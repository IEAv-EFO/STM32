
ADC_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f074  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800f218  0800f218  00010218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f718  0800f718  000112d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f718  0800f718  00010718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f720  0800f720  000112d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f720  0800f720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f724  0800f724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800f728  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  200002d8  0800fa00  000112d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  0800fa00  000121ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fc1  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af7  00000000  00000000  000282c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e81  00000000  00000000  0002d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4b2  00000000  00000000  0002df31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a83e  00000000  00000000  000493e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a189  00000000  00000000  00063c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fddaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e4  00000000  00000000  000fddf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001043d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1fc 	.word	0x0800f1fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800f1fc 	.word	0x0800f1fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <lcd_send_nibble>:
#include "string.h"

extern I2C_HandleTypeDef hi2c1;

void lcd_send_nibble(char nibble)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t dado_t[2];
	dado_t[0]=(nibble | 0x0C);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f043 030c 	orr.w	r3, r3, #12
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	dado_t[1]=(nibble | 0x08);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,END_I2C<<1,dado_t, 2, 100);
 8001012:	f107 020c 	add.w	r2, r7, #12
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	214e      	movs	r1, #78	@ 0x4e
 800101e:	4803      	ldr	r0, [pc, #12]	@ (800102c <lcd_send_nibble+0x38>)
 8001020:	f001 ff74 	bl	8002f0c <HAL_I2C_Master_Transmit>
	
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000340 	.word	0x20000340

08001030 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]

	uint8_t dado_t[4];
	char dado_l, dado_u;
	dado_u=cmd & 0xF0;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f023 030f 	bic.w	r3, r3, #15
 8001040:	73fb      	strb	r3, [r7, #15]
	dado_l=(cmd<<4) & 0xF0;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	73bb      	strb	r3, [r7, #14]
	dado_t[0]=dado_u | 0x0C;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 030c 	orr.w	r3, r3, #12
 800104e:	b2db      	uxtb	r3, r3
 8001050:	723b      	strb	r3, [r7, #8]
	dado_t[1]=dado_u | 0x08;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	727b      	strb	r3, [r7, #9]
	dado_t[2]=dado_l | 0x0C;
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	f043 030c 	orr.w	r3, r3, #12
 8001062:	b2db      	uxtb	r3, r3
 8001064:	72bb      	strb	r3, [r7, #10]
	dado_t[3]=dado_l | 0x08;
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	b2db      	uxtb	r3, r3
 800106e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, END_I2C<<1,dado_t, 4, 100);
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2304      	movs	r3, #4
 800107a:	214e      	movs	r1, #78	@ 0x4e
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <lcd_send_cmd+0x5c>)
 800107e:	f001 ff45 	bl	8002f0c <HAL_I2C_Master_Transmit>

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000340 	.word	0x20000340

08001090 <lcd_send_dado>:

void lcd_send_dado (char dado)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]

	uint8_t dado_t[4];
	char dado_l, dado_u;
	dado_u=dado & 0xF0;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	73fb      	strb	r3, [r7, #15]
	dado_l=(dado<<4) & 0xF0;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	73bb      	strb	r3, [r7, #14]
	dado_t[0]=dado_u | 0x0D;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f043 030d 	orr.w	r3, r3, #13
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	dado_t[1]=dado_u | 0x09;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f043 0309 	orr.w	r3, r3, #9
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	dado_t[2]=dado_l | 0x0D;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 030d 	orr.w	r3, r3, #13
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72bb      	strb	r3, [r7, #10]
	dado_t[3]=dado_l | 0x09;
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f043 0309 	orr.w	r3, r3, #9
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, END_I2C<<1,dado_t, 4, 100);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	2364      	movs	r3, #100	@ 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2304      	movs	r3, #4
 80010da:	214e      	movs	r1, #78	@ 0x4e
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <lcd_send_dado+0x5c>)
 80010de:	f001 ff15 	bl	8002f0c <HAL_I2C_Master_Transmit>
	
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000340 	.word	0x20000340

080010f0 <lcd_init>:

void lcd_init (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 80010f4:	2032      	movs	r0, #50	@ 0x32
 80010f6:	f000 fe49 	bl	8001d8c <HAL_Delay>
	  lcd_send_nibble(0x30);
 80010fa:	2030      	movs	r0, #48	@ 0x30
 80010fc:	f7ff ff7a 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f000 fe43 	bl	8001d8c <HAL_Delay>
	  lcd_send_nibble(0x30);
 8001106:	2030      	movs	r0, #48	@ 0x30
 8001108:	f7ff ff74 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fe3d 	bl	8001d8c <HAL_Delay>
	  lcd_send_nibble(0x30);
 8001112:	2030      	movs	r0, #48	@ 0x30
 8001114:	f7ff ff6e 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fe37 	bl	8001d8c <HAL_Delay>
	  lcd_send_nibble(0x20);
 800111e:	2020      	movs	r0, #32
 8001120:	f7ff ff68 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fe31 	bl	8001d8c <HAL_Delay>

	  lcd_send_cmd(0x28);
 800112a:	2028      	movs	r0, #40	@ 0x28
 800112c:	f7ff ff80 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fe2b 	bl	8001d8c <HAL_Delay>
	  lcd_send_cmd(0x06);
 8001136:	2006      	movs	r0, #6
 8001138:	f7ff ff7a 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fe25 	bl	8001d8c <HAL_Delay>
	  lcd_send_cmd(0x0C);
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff ff74 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 fe1f 	bl	8001d8c <HAL_Delay>
	  lcd_send_cmd(0x01);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff ff6e 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fe19 	bl	8001d8c <HAL_Delay>

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <lcd_send_string>:

void lcd_send_string(char *str)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	while(*str) lcd_send_dado(*str++);
 8001166:	e006      	b.n	8001176 <lcd_send_string+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff8d 	bl	8001090 <lcd_send_dado>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f4      	bne.n	8001168 <lcd_send_string+0xa>
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

float count2volt(int res, int count){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff f9ce 	bl	8000534 <__aeabi_i2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ec43 2b11 	vmov	d1, r2, r3
 80011a0:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8001218 <count2volt+0x90>
 80011a4:	f00d f8ca 	bl	800e33c <pow>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <count2volt+0xa0>)
 80011b2:	f7ff f871 	bl	8000298 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fcd3 	bl	8000b68 <__aeabi_d2iz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <count2volt+0xa4>)
 80011c6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <count2volt+0xa4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b1 	bl	8000534 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	a112      	add	r1, pc, #72	@ (adr r1, 8001220 <count2volt+0x98>)
 80011d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011dc:	f7ff fb3e 	bl	800085c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4614      	mov	r4, r2
 80011e6:	461d      	mov	r5, r3
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f7ff f9a3 	bl	8000534 <__aeabi_i2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff fa07 	bl	8000608 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcf9 	bl	8000bf8 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	bf00      	nop
 8001218:	00000000 	.word	0x00000000
 800121c:	40000000 	.word	0x40000000
 8001220:	66666666 	.word	0x66666666
 8001224:	400a6666 	.word	0x400a6666
 8001228:	3ff00000 	.word	0x3ff00000
 800122c:	200002f4 	.word	0x200002f4

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fd37 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */
	HAL_StatusTypeDef RET;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f8a3 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f000 f9e1 	bl	8001604 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001242:	f000 f907 	bl	8001454 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001246:	f000 f957 	bl	80014f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800124a:	f000 f983 	bl	8001554 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800124e:	f000 f9af 	bl	80015b0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001252:	f008 f80d 	bl	8009270 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8001256:	f7ff ff4b 	bl	80010f0 <lcd_init>
	HAL_ADC_Start_IT(&hadc1);
 800125a:	483f      	ldr	r0, [pc, #252]	@ (8001358 <main+0x128>)
 800125c:	f000 fdfe 	bl	8001e5c <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adc_valor = 2048;
 8001260:	4b3e      	ldr	r3, [pc, #248]	@ (800135c <main+0x12c>)
 8001262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001266:	601a      	str	r2, [r3, #0]
		buf[0] = (uint8_t) (adc_valor >> 8);
 8001268:	4b3c      	ldr	r3, [pc, #240]	@ (800135c <main+0x12c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <main+0x130>)
 8001272:	701a      	strb	r2, [r3, #0]
		buf[1] = (uint8_t) adc_valor;
 8001274:	4b39      	ldr	r3, [pc, #228]	@ (800135c <main+0x12c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <main+0x130>)
 800127c:	705a      	strb	r2, [r3, #1]
		RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60) << 1, buf, 2, 50);
 800127e:	2332      	movs	r3, #50	@ 0x32
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2302      	movs	r3, #2
 8001284:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <main+0x130>)
 8001286:	21c0      	movs	r1, #192	@ 0xc0
 8001288:	4836      	ldr	r0, [pc, #216]	@ (8001364 <main+0x134>)
 800128a:	f001 fe3f 	bl	8002f0c <HAL_I2C_Master_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
		if (RET == HAL_OK)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <main+0x76>
			HAL_GPIO_WritePin(GPIOC, LED_Pin, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4832      	ldr	r0, [pc, #200]	@ (8001368 <main+0x138>)
 80012a0:	f001 fcd6 	bl	8002c50 <HAL_GPIO_WritePin>
 80012a4:	e005      	b.n	80012b2 <main+0x82>
		else
			HAL_GPIO_WritePin(GPIOC, LED_Pin, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ac:	482e      	ldr	r0, [pc, #184]	@ (8001368 <main+0x138>)
 80012ae:	f001 fccf 	bl	8002c50 <HAL_GPIO_WritePin>

		valor = count2volt(ADCRES, adc_valor);
 80012b2:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <main+0x12c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	200c      	movs	r0, #12
 80012ba:	f7ff ff65 	bl	8001188 <count2volt>
 80012be:	eef0 7a40 	vmov.f32	s15, s0
 80012c2:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <main+0x13c>)
 80012c4:	edc3 7a00 	vstr	s15, [r3]
		sprintf(valor_string, "%.3f [V]", valor);
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <main+0x13c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f943 	bl	8000558 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4926      	ldr	r1, [pc, #152]	@ (8001370 <main+0x140>)
 80012d8:	4826      	ldr	r0, [pc, #152]	@ (8001374 <main+0x144>)
 80012da:	f009 fbf7 	bl	800aacc <siprintf>

		lcd_send_cmd(Linha_1);
 80012de:	2080      	movs	r0, #128	@ 0x80
 80012e0:	f7ff fea6 	bl	8001030 <lcd_send_cmd>
		lcd_send_string("Tensao = ");
 80012e4:	4824      	ldr	r0, [pc, #144]	@ (8001378 <main+0x148>)
 80012e6:	f7ff ff3a 	bl	800115e <lcd_send_string>
		lcd_send_cmd(Linha_1 + 9);
 80012ea:	2089      	movs	r0, #137	@ 0x89
 80012ec:	f7ff fea0 	bl	8001030 <lcd_send_cmd>
		lcd_send_string(valor_string);
 80012f0:	4820      	ldr	r0, [pc, #128]	@ (8001374 <main+0x144>)
 80012f2:	f7ff ff34 	bl	800115e <lcd_send_string>

		HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	@ 0x64
 80012f8:	f000 fd48 	bl	8001d8c <HAL_Delay>

		sprintf(valor_string, "Tensão: %.3f [V]\n", valor);
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <main+0x13c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	491c      	ldr	r1, [pc, #112]	@ (800137c <main+0x14c>)
 800130c:	4819      	ldr	r0, [pc, #100]	@ (8001374 <main+0x144>)
 800130e:	f009 fbdd 	bl	800aacc <siprintf>
		btSendString(valor_string);
 8001312:	4818      	ldr	r0, [pc, #96]	@ (8001374 <main+0x144>)
 8001314:	f000 f9fa 	bl	800170c <btSendString>
		HAL_Delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f000 fd37 	bl	8001d8c <HAL_Delay>
		sprintf(valor_string, "Tensão: %.3f [V]\n\r", valor);
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <main+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f918 	bl	8000558 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4914      	ldr	r1, [pc, #80]	@ (8001380 <main+0x150>)
 800132e:	4811      	ldr	r0, [pc, #68]	@ (8001374 <main+0x144>)
 8001330:	f009 fbcc 	bl	800aacc <siprintf>
		CDC_Transmit_FS(valor_string, strlen(valor_string));
 8001334:	480f      	ldr	r0, [pc, #60]	@ (8001374 <main+0x144>)
 8001336:	f7fe ffa3 	bl	8000280 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29b      	uxth	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <main+0x144>)
 8001342:	f008 f853 	bl	80093ec <CDC_Transmit_FS>
		HAL_Delay(500);
 8001346:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800134a:	f000 fd1f 	bl	8001d8c <HAL_Delay>
		HAL_ADC_Start_IT(&hadc1);
 800134e:	4802      	ldr	r0, [pc, #8]	@ (8001358 <main+0x128>)
 8001350:	f000 fd84 	bl	8001e5c <HAL_ADC_Start_IT>
		adc_valor = 2048;
 8001354:	e784      	b.n	8001260 <main+0x30>
 8001356:	bf00      	nop
 8001358:	200002f8 	.word	0x200002f8
 800135c:	2000042c 	.word	0x2000042c
 8001360:	20000448 	.word	0x20000448
 8001364:	20000394 	.word	0x20000394
 8001368:	40020800 	.word	0x40020800
 800136c:	20000430 	.word	0x20000430
 8001370:	0800f218 	.word	0x0800f218
 8001374:	20000434 	.word	0x20000434
 8001378:	0800f224 	.word	0x0800f224
 800137c:	0800f230 	.word	0x0800f230
 8001380:	0800f244 	.word	0x0800f244

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	@ 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2230      	movs	r2, #48	@ 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f009 fbfd 	bl	800ab92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b27      	ldr	r3, [pc, #156]	@ (800144c <SystemClock_Config+0xc8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a26      	ldr	r2, [pc, #152]	@ (800144c <SystemClock_Config+0xc8>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <SystemClock_Config+0xc8>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a20      	ldr	r2, [pc, #128]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <SystemClock_Config+0xcc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80013f4:	230c      	movs	r3, #12
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80013f8:	2360      	movs	r3, #96	@ 0x60
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fb03 	bl	8004a14 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001414:	f000 f992 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2103      	movs	r1, #3
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fd65 	bl	8004f04 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001440:	f000 f97c 	bl	800173c <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	@ 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001468:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <MX_ADC1_Init+0x9c>)
 800146a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_ADC1_Init+0x98>)
 800146e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001472:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_ADC1_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_ADC1_Init+0x98>)
 8001496:	4a17      	ldr	r2, [pc, #92]	@ (80014f4 <MX_ADC1_Init+0xa0>)
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_ADC1_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_ADC1_Init+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_ADC1_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_ADC1_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_ADC1_Init+0x98>)
 80014b6:	f000 fc8d 	bl	8001dd4 <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 f93c 	bl	800173c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_ADC1_Init+0x98>)
 80014d6:	f000 feed 	bl	80022b4 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e0:	f000 f92c 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002f8 	.word	0x200002f8
 80014f0:	40012000 	.word	0x40012000
 80014f4:	0f000001 	.word	0x0f000001

080014f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <MX_I2C1_Init+0x50>)
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <MX_I2C1_Init+0x54>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001504:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_I2C1_Init+0x58>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001516:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800151a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <MX_I2C1_Init+0x50>)
 8001536:	f001 fba5 	bl	8002c84 <HAL_I2C_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001540:	f000 f8fc 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000340 	.word	0x20000340
 800154c:	40005400 	.word	0x40005400
 8001550:	000186a0 	.word	0x000186a0

08001554 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_I2C2_Init+0x50>)
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <MX_I2C2_Init+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_I2C2_Init+0x58>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_I2C2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_I2C2_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_I2C2_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_I2C2_Init+0x50>)
 8001592:	f001 fb77 	bl	8002c84 <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 f8ce 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000394 	.word	0x20000394
 80015a8:	40005800 	.word	0x40005800
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f003 fe6c 	bl	80052c4 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 f8a3 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200003e8 	.word	0x200003e8
 8001600:	40011000 	.word	0x40011000

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a1f      	ldr	r2, [pc, #124]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <MX_GPIO_Init+0xbc>)
 8001692:	f001 fadd 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001696:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_GPIO_Init+0xbc>)
 80016b0:	f001 f94a 	bl	8002948 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020800 	.word	0x40020800

080016c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	adc_valor = HAL_ADC_GetValue(hadc1);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fdd0 	bl	8002272 <HAL_ADC_GetValue>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_IT(hadc1);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fc7d 	bl	8001fd8 <HAL_ADC_Stop_IT>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000042c 	.word	0x2000042c

080016ec <sendChar>:

void sendChar(char *c) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 80016f4:	1d39      	adds	r1, r7, #4
 80016f6:	230a      	movs	r3, #10
 80016f8:	2201      	movs	r2, #1
 80016fa:	4803      	ldr	r0, [pc, #12]	@ (8001708 <sendChar+0x1c>)
 80016fc:	f003 fe2f 	bl	800535e <HAL_UART_Transmit>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003e8 	.word	0x200003e8

0800170c <btSendString>:

void btSendString(char *Buf) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	// Loop through each character in the string until the null terminator
	while (*Buf) {
 8001714:	e009      	b.n	800172a <btSendString+0x1e>
		sendChar((uint8_t) *Buf++);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffe4 	bl	80016ec <sendChar>
		HAL_Delay(2);
 8001724:	2002      	movs	r0, #2
 8001726:	f000 fb31 	bl	8001d8c <HAL_Delay>
	while (*Buf) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f1      	bne.n	8001716 <btSendString+0xa>
	}
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <HAL_ADC_MspInit+0x8c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12f      	bne.n	800181a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_ADC_MspInit+0x90>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f2:	2302      	movs	r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <HAL_ADC_MspInit+0x94>)
 8001806:	f001 f89f 	bl	8002948 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2012      	movs	r0, #18
 8001810:	f001 f863 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001814:	2012      	movs	r0, #18
 8001816:	f001 f87c 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012000 	.word	0x40012000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3b      	ldr	r2, [pc, #236]	@ (800193c <HAL_I2C_MspInit+0x10c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	4b3a      	ldr	r3, [pc, #232]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a39      	ldr	r2, [pc, #228]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	@ 0xc0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	482e      	ldr	r0, [pc, #184]	@ (8001944 <HAL_I2C_MspInit+0x114>)
 800188a:	f001 f85d 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a2a      	ldr	r2, [pc, #168]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018aa:	e042      	b.n	8001932 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a25      	ldr	r2, [pc, #148]	@ (8001948 <HAL_I2C_MspInit+0x118>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d13d      	bne.n	8001932 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a20      	ldr	r2, [pc, #128]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	2312      	movs	r3, #18
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018e4:	2304      	movs	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4815      	ldr	r0, [pc, #84]	@ (8001944 <HAL_I2C_MspInit+0x114>)
 80018f0:	f001 f82a 	bl	8002948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fa:	2312      	movs	r3, #18
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001906:	2309      	movs	r3, #9
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <HAL_I2C_MspInit+0x114>)
 8001912:	f001 f819 	bl	8002948 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_I2C_MspInit+0x110>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	@ 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40005400 	.word	0x40005400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	40005800 	.word	0x40005800

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	@ (8001a0c <HAL_UART_MspInit+0xc0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d14a      	bne.n	8001a04 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a26      	ldr	r2, [pc, #152]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a18      	ldr	r2, [pc, #96]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_UART_MspInit+0xc4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <HAL_UART_MspInit+0xc8>)
 80019e0:	f000 ffb2 	bl	8002948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019e4:	2308      	movs	r3, #8
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <HAL_UART_MspInit+0xcc>)
 8001a00:	f000 ffa2 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	@ 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <NMI_Handler+0x4>

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f96b 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <ADC_IRQHandler+0x10>)
 8001a82:	f000 fae6 	bl	8002052 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002f8 	.word	0x200002f8

08001a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <OTG_FS_IRQHandler+0x10>)
 8001a96:	f001 fe90 	bl	80037ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20001934 	.word	0x20001934

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001abe:	f009 f8bb 	bl	800ac38 <__errno>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2216      	movs	r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_exit>:

void _exit (int status)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe7 	bl	8001ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae6:	bf00      	nop
 8001ae8:	e7fd      	b.n	8001ae6 <_exit+0x12>

08001aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e00a      	b.n	8001b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afc:	f3af 8000 	nop.w
 8001b00:	4601      	mov	r1, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dbf0      	blt.n	8001afc <_read+0x12>
  }

  return len;
 8001b1a:	687b      	ldr	r3, [r7, #4]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e009      	b.n	8001b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dbf1      	blt.n	8001b36 <_write+0x12>
  }
  return len;
 8001b52:	687b      	ldr	r3, [r7, #4]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_close>:

int _close(int file)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b84:	605a      	str	r2, [r3, #4]
  return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_isatty>:

int _isatty(int file)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	@ (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f009 f820 	bl	800ac38 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20020000 	.word	0x20020000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	2000044c 	.word	0x2000044c
 8001c2c:	200021b0 	.word	0x200021b0

08001c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <SystemInit+0x20>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c3a:	4a05      	ldr	r2, [pc, #20]	@ (8001c50 <SystemInit+0x20>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5a:	490e      	ldr	r1, [pc, #56]	@ (8001c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c70:	4c0b      	ldr	r4, [pc, #44]	@ (8001ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7e:	f7ff ffd7 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f008 ffdf 	bl	800ac44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff fad3 	bl	8001230 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001c98:	0800f728 	.word	0x0800f728
  ldr r2, =_sbss
 8001c9c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001ca0:	200021ac 	.word	0x200021ac

08001ca4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <DMA1_Stream0_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <HAL_Init+0x40>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <HAL_Init+0x40>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_Init+0x40>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 fdf7 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fd34 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fe0f 	bl	800292e <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 fdd7 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	@ (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000450 	.word	0x20000450

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000450 	.word	0x20000450

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e033      	b.n	8001e52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fcd0 	bl	8001798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e1a:	f023 0302 	bic.w	r3, r3, #2
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fb76 	bl	8002518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start_IT+0x1a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e0a1      	b.n	8001fba <HAL_ADC_Start_IT+0x15e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d018      	beq.n	8001ebe <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_ADC_Start_IT+0x16c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8001fcc <HAL_ADC_Start_IT+0x170>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9a      	lsrs	r2, r3, #18
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d169      	bne.n	8001fa0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f023 0206 	bic.w	r2, r3, #6
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_ADC_Start_IT+0x174>)
 8001f2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f34:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f44:	f043 0320 	orr.w	r3, r3, #32
 8001f48:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d129      	bne.n	8001fb8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e020      	b.n	8001fb8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <HAL_ADC_Start_IT+0x178>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_ADC_Start_IT+0x15c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000

08001fd8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Stop_IT+0x16>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e02b      	b.n	8002046 <HAL_ADC_Stop_IT+0x6e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d113      	bne.n	800203c <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002022:	f023 0320 	bic.w	r3, r3, #32
 8002026:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d049      	beq.n	800211c <HAL_ADC_IRQHandler+0xca>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d046      	beq.n	800211c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12b      	bne.n	800210c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d119      	bne.n	800210c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0220 	bic.w	r2, r2, #32
 80020e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fad9 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0212 	mvn.w	r2, #18
 800211a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d057      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x190>
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d054      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d139      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12b      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d124      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11d      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa9c 	bl	8002710 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 020c 	mvn.w	r2, #12
 80021e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d017      	beq.n	8002228 <HAL_ADC_IRQHandler+0x1d6>
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d014      	beq.n	8002228 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10d      	bne.n	8002228 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f837 	bl	800228c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f06f 0201 	mvn.w	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002236:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_ADC_IRQHandler+0x218>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0220 	mvn.w	r2, #32
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f820 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0220 	mvn.w	r2, #32
 8002268:	601a      	str	r2, [r3, #0]
  }
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e113      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x244>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	@ 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	@ 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	@ 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	@ 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_ADC_ConfigChannel+0x250>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d10b      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x1f4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d122      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_ADC_ConfigChannel+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_ADC_ConfigChannel+0x260>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9a      	lsrs	r2, r3, #18
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	40012000 	.word	0x40012000
 800250c:	10000012 	.word	0x10000012
 8002510:	20000000 	.word	0x20000000
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <ADC_Init+0x1f0>)
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	4a58      	ldr	r2, [pc, #352]	@ (800270c <ADC_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e00f      	b.n	8002616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0202 	bic.w	r2, r2, #2
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	035a      	lsls	r2, r3, #13
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e007      	b.n	800268c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051a      	lsls	r2, r3, #20
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ce:	025a      	lsls	r2, r3, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	029a      	lsls	r2, r3, #10
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	0f000001 	.word	0x0f000001

08002710 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	@ (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff3e 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff31 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e159      	b.n	8002c18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8148 	bne.w	8002c12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a2 	beq.w	8002c12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b57      	ldr	r3, [pc, #348]	@ (8002c30 <HAL_GPIO_Init+0x2e8>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	4a56      	ldr	r2, [pc, #344]	@ (8002c30 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ade:	4b54      	ldr	r3, [pc, #336]	@ (8002c30 <HAL_GPIO_Init+0x2e8>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_GPIO_Init+0x2ec>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a49      	ldr	r2, [pc, #292]	@ (8002c38 <HAL_GPIO_Init+0x2f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x202>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a48      	ldr	r2, [pc, #288]	@ (8002c3c <HAL_GPIO_Init+0x2f4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x1fe>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a47      	ldr	r2, [pc, #284]	@ (8002c40 <HAL_GPIO_Init+0x2f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x1fa>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a46      	ldr	r2, [pc, #280]	@ (8002c44 <HAL_GPIO_Init+0x2fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x1f6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <HAL_GPIO_Init+0x300>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x1f2>
 8002b36:	2304      	movs	r3, #4
 8002b38:	e008      	b.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b3a:	2307      	movs	r3, #7
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e004      	b.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_GPIO_Init+0x204>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f002 0203 	and.w	r2, r2, #3
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4093      	lsls	r3, r2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5c:	4935      	ldr	r1, [pc, #212]	@ (8002c34 <HAL_GPIO_Init+0x2ec>)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	3302      	adds	r3, #2
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6a:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb8:	4a24      	ldr	r2, [pc, #144]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be8:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0f      	cmp	r3, #15
 8002c1c:	f67f aea2 	bls.w	8002964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020c00 	.word	0x40020c00
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e12b      	b.n	8002eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fdc0 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f002 fac4 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 8002cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a81      	ldr	r2, [pc, #516]	@ (8002ef8 <HAL_I2C_Init+0x274>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d807      	bhi.n	8002d08 <HAL_I2C_Init+0x84>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a80      	ldr	r2, [pc, #512]	@ (8002efc <HAL_I2C_Init+0x278>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	bf94      	ite	ls
 8002d00:	2301      	movls	r3, #1
 8002d02:	2300      	movhi	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e006      	b.n	8002d16 <HAL_I2C_Init+0x92>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8002f00 <HAL_I2C_Init+0x27c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	bf94      	ite	ls
 8002d10:	2301      	movls	r3, #1
 8002d12:	2300      	movhi	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0e7      	b.n	8002eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a78      	ldr	r2, [pc, #480]	@ (8002f04 <HAL_I2C_Init+0x280>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_I2C_Init+0x274>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d802      	bhi.n	8002d58 <HAL_I2C_Init+0xd4>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	e009      	b.n	8002d6c <HAL_I2C_Init+0xe8>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	4a69      	ldr	r2, [pc, #420]	@ (8002f08 <HAL_I2C_Init+0x284>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	495c      	ldr	r1, [pc, #368]	@ (8002ef8 <HAL_I2C_Init+0x274>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d819      	bhi.n	8002dc0 <HAL_I2C_Init+0x13c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e59      	subs	r1, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002da0:	400b      	ands	r3, r1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_I2C_Init+0x138>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e59      	subs	r1, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dba:	e051      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e04f      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <HAL_I2C_Init+0x168>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e012      	b.n	8002e12 <HAL_I2C_Init+0x18e>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Init+0x196>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e022      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10e      	bne.n	8002e40 <HAL_I2C_Init+0x1bc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e58      	subs	r0, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	440b      	add	r3, r1
 8002e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e3e:	e00f      	b.n	8002e60 <HAL_I2C_Init+0x1dc>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6809      	ldr	r1, [r1, #0]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6911      	ldr	r1, [r2, #16]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	000186a0 	.word	0x000186a0
 8002efc:	001e847f 	.word	0x001e847f
 8002f00:	003d08ff 	.word	0x003d08ff
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	10624dd3 	.word	0x10624dd3

08002f0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	461a      	mov	r2, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	817b      	strh	r3, [r7, #10]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7fe ff28 	bl	8001d74 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 80e0 	bne.w	80030f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4970      	ldr	r1, [pc, #448]	@ (8003100 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f964 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0d3      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Master_Transmit+0x50>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0cc      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d007      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2221      	movs	r2, #33	@ 0x21
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	@ (8003104 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f89c 	bl	8003108 <I2C_MasterRequestWrite>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e08d      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ff0:	e066      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f9de 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b04      	cmp	r3, #4
 8003008:	d107      	bne.n	800301a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003018:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11b      	bne.n	8003094 <HAL_I2C_Master_Transmit+0x188>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9ce 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01a      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d194      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	00100002 	.word	0x00100002
 8003104:	ffff0000 	.word	0xffff0000

08003108 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d006      	beq.n	8003132 <I2C_MasterRequestWrite+0x2a>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d003      	beq.n	8003132 <I2C_MasterRequestWrite+0x2a>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003130:	d108      	bne.n	8003144 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e00b      	b.n	800315c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	2b12      	cmp	r3, #18
 800314a:	d107      	bne.n	800315c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f84f 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003182:	d103      	bne.n	800318c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e035      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003198:	d108      	bne.n	80031ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031a8:	611a      	str	r2, [r3, #16]
 80031aa:	e01b      	b.n	80031e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	11db      	asrs	r3, r3, #7
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 0306 	and.w	r3, r3, #6
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f063 030f 	orn	r3, r3, #15
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	490e      	ldr	r1, [pc, #56]	@ (8003204 <I2C_MasterRequestWrite+0xfc>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f875 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e010      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <I2C_MasterRequestWrite+0x100>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f865 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010008 	.word	0x00010008
 8003208:	00010002 	.word	0x00010002

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e025      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe fda5 	bl	8001d74 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e023      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	e00c      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0b6      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c8:	e051      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d8:	d123      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e046      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fd23 	bl	8001d74 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e00b      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e02d      	b.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f878 	bl	80034bc <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fcc9 	bl	8001d74 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b80      	cmp	r3, #128	@ 0x80
 800342e:	d1ca      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003446:	e02d      	b.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f837 	bl	80034bc <I2C_IsAcknowledgeFailed>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d021      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fc88 	bl	8001d74 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d1ca      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d2:	d11b      	bne.n	800350c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800351a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351c:	b08f      	sub	sp, #60	@ 0x3c
 800351e:	af0a      	add	r7, sp, #40	@ 0x28
 8003520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e10f      	b.n	800374c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f006 f888 	bl	800965c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fb81 	bl	8005c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	687e      	ldr	r6, [r7, #4]
 8003578:	466d      	mov	r5, sp
 800357a:	f106 0410 	add.w	r4, r6, #16
 800357e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358a:	e885 0003 	stmia.w	r5, {r0, r1}
 800358e:	1d33      	adds	r3, r6, #4
 8003590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	f002 fa58 	bl	8005a48 <USB_CoreInit>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0d0      	b.n	800374c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 fb6f 	bl	8005c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e04a      	b.n	8003652 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	333d      	adds	r3, #61	@ 0x3d
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	333c      	adds	r3, #60	@ 0x3c
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	b298      	uxth	r0, r3
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3344      	adds	r3, #68	@ 0x44
 80035f8:	4602      	mov	r2, r0
 80035fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3340      	adds	r3, #64	@ 0x40
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3348      	adds	r3, #72	@ 0x48
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	334c      	adds	r3, #76	@ 0x4c
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3354      	adds	r3, #84	@ 0x54
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	3301      	adds	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3af      	bcc.n	80035bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e044      	b.n	80036ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	3301      	adds	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3b5      	bcc.n	8003662 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	687e      	ldr	r6, [r7, #4]
 80036fe:	466d      	mov	r5, sp
 8003700:	f106 0410 	add.w	r4, r6, #16
 8003704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003710:	e885 0003 	stmia.w	r5, {r0, r1}
 8003714:	1d33      	adds	r3, r6, #4
 8003716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f002 fb07 	bl	8005d2c <USB_DevInit>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e00d      	b.n	800374c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fc56 	bl	8006ff6 <USB_DevDisconnect>

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003754 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_Start+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e020      	b.n	80037b2 <HAL_PCD_Start+0x5e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	2b01      	cmp	r3, #1
 800377e:	d109      	bne.n	8003794 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003784:	2b01      	cmp	r3, #1
 8003786:	d005      	beq.n	8003794 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f002 fa59 	bl	8005c50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 fc06 	bl	8006fb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037ba:	b590      	push	{r4, r7, lr}
 80037bc:	b08d      	sub	sp, #52	@ 0x34
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fcc4 	bl	800715e <USB_GetMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f040 848a 	bne.w	80040f2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fc28 	bl	8007038 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8480 	beq.w	80040f0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fc15 	bl	8007038 <USB_ReadInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d107      	bne.n	8003828 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f002 0202 	and.w	r2, r2, #2
 8003826:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 fc03 	bl	8007038 <USB_ReadInterrupts>
 8003832:	4603      	mov	r3, r0
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d161      	bne.n	8003900 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0210 	bic.w	r2, r2, #16
 800384a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	0c5b      	lsrs	r3, r3, #17
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2b02      	cmp	r3, #2
 8003876:	d124      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d035      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800388e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6a38      	ldr	r0, [r7, #32]
 8003898:	f003 fa3a 	bl	8006d10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a8:	441a      	add	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ba:	441a      	add	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
 80038c0:	e016      	b.n	80038f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	0c5b      	lsrs	r3, r3, #17
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d110      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80038d4:	2208      	movs	r2, #8
 80038d6:	4619      	mov	r1, r3
 80038d8:	6a38      	ldr	r0, [r7, #32]
 80038da:	f003 fa19 	bl	8006d10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ea:	441a      	add	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0210 	orr.w	r2, r2, #16
 80038fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fb97 	bl	8007038 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003910:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003914:	f040 80a7 	bne.w	8003a66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fb9c 	bl	800705e <USB_ReadDevAllOutEpInterrupt>
 8003926:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003928:	e099      	b.n	8003a5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 808e 	beq.w	8003a52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fbc0 	bl	80070c6 <USB_ReadDevOutEPInterrupt>
 8003946:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	2301      	movs	r3, #1
 8003962:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fec2 	bl	80046f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003982:	461a      	mov	r2, r3
 8003984:	2308      	movs	r3, #8
 8003986:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 ff98 	bl	80048c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a6:	461a      	mov	r2, r3
 80039a8:	2310      	movs	r3, #16
 80039aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d030      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d109      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	78db      	ldrb	r3, [r3, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d108      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f005 ff27 	bl	8009854 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	2302      	movs	r3, #2
 8003a16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2320      	movs	r3, #32
 8003a32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f af62 	bne.w	800392a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 fae4 	bl	8007038 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a7a:	f040 80db 	bne.w	8003c34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fb05 	bl	8007092 <USB_ReadDevAllInEpInterrupt>
 8003a88:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a8e:	e0cd      	b.n	8003c2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80c2 	beq.w	8003c20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fb2b 	bl	8007102 <USB_ReadDevInEPInterrupt>
 8003aac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d057      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	2201      	movs	r2, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69f9      	ldr	r1, [r7, #28]
 8003ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ad8:	4013      	ands	r3, r2
 8003ada:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2301      	movs	r3, #1
 8003aec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d132      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	334c      	adds	r3, #76	@ 0x4c
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4403      	add	r3, r0
 8003b16:	3348      	adds	r3, #72	@ 0x48
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4419      	add	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4403      	add	r3, r0
 8003b2a:	334c      	adds	r3, #76	@ 0x4c
 8003b2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x3a2>
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3354      	adds	r3, #84	@ 0x54
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	f003 fb32 	bl	80071c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f005 fdfb 	bl	800975e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2308      	movs	r3, #8
 8003b82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2340      	movs	r3, #64	@ 0x40
 8003bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d023      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc8:	6a38      	ldr	r0, [r7, #32]
 8003bca:	f002 fa13 	bl	8005ff4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	@ 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f005 fe3e 	bl	8009878 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fcdb 	bl	80045d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	3301      	adds	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f af2e 	bne.w	8003a90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 f9fd 	bl	8007038 <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c48:	d122      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c70:	2100      	movs	r1, #0
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fec2 	bl	80049fc <HAL_PCDEx_LPM_Callback>
 8003c78:	e002      	b.n	8003c80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f005 fddc 	bl	8009838 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 f9cf 	bl	8007038 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca4:	d112      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f005 fd98 	bl	80097ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003cca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 f9b1 	bl	8007038 <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce0:	f040 80b7 	bne.w	8003e52 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 f978 	bl	8005ff4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d08:	e046      	b.n	8003d98 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	3301      	adds	r3, #1
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3b3      	bcc.n	8003d0a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003db4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dce:	f043 030b 	orr.w	r3, r3, #11
 8003dd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de4:	f043 030b 	orr.w	r3, r3, #11
 8003de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dea:	e015      	b.n	8003e18 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dfe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e12:	f043 030b 	orr.w	r3, r3, #11
 8003e16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f003 f9bf 	bl	80071c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 f8ee 	bl	8007038 <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e66:	d124      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 f984 	bl	800717a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 f939 	bl	80060ee <USB_GetDevSpeed>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681c      	ldr	r4, [r3, #0]
 8003e88:	f001 f9e8 	bl	800525c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	4620      	mov	r0, r4
 8003e98:	f001 fe38 	bl	8005b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f005 fc86 	bl	80097ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 f8be 	bl	8007038 <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d10a      	bne.n	8003edc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fc63 	bl	8009792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f002 0208 	and.w	r2, r2, #8
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 f8a9 	bl	8007038 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eec:	2b80      	cmp	r3, #128	@ 0x80
 8003eee:	d122      	bne.n	8003f36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003efc:	2301      	movs	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f00:	e014      	b.n	8003f2c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb27 	bl	8004574 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	3301      	adds	r3, #1
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3e5      	bcc.n	8003f02 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 f87c 	bl	8007038 <USB_ReadInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4a:	d13b      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f50:	e02b      	b.n	8003faa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3340      	adds	r3, #64	@ 0x40
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d115      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da12      	bge.n	8003fa4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	333f      	adds	r3, #63	@ 0x3f
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fae8 	bl	8004574 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3ce      	bcc.n	8003f52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 f835 	bl	8007038 <USB_ReadInterrupts>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd8:	d155      	bne.n	8004086 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fda:	2301      	movs	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	e045      	b.n	800406c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d12e      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004008:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	da2b      	bge.n	8004066 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800401a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800401e:	429a      	cmp	r2, r3
 8004020:	d121      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004062:	6053      	str	r3, [r2, #4]
            break;
 8004064:	e007      	b.n	8004076 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	3301      	adds	r3, #1
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	429a      	cmp	r2, r3
 8004074:	d3b4      	bcc.n	8003fe0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f002 ffd4 	bl	8007038 <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409a:	d10a      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f005 fbfd 	bl	800989c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80040b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 ffbe 	bl	8007038 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d115      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f005 fbed 	bl	80098b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	e000      	b.n	80040f2 <HAL_PCD_IRQHandler+0x938>
      return;
 80040f0:	bf00      	nop
    }
  }
}
 80040f2:	3734      	adds	r7, #52	@ 0x34
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_PCD_SetAddress+0x1a>
 800410e:	2302      	movs	r3, #2
 8004110:	e013      	b.n	800413a <HAL_PCD_SetAddress+0x42>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f002 ff1c 	bl	8006f68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	4608      	mov	r0, r1
 800414c:	4611      	mov	r1, r2
 800414e:	461a      	mov	r2, r3
 8004150:	4603      	mov	r3, r0
 8004152:	70fb      	strb	r3, [r7, #3]
 8004154:	460b      	mov	r3, r1
 8004156:	803b      	strh	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	da0f      	bge.n	8004188 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	3338      	adds	r3, #56	@ 0x38
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	705a      	strb	r2, [r3, #1]
 8004186:	e00f      	b.n	80041a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041b4:	883a      	ldrh	r2, [r7, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	78ba      	ldrb	r2, [r7, #2]
 80041be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041d2:	78bb      	ldrb	r3, [r7, #2]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d102      	bne.n	80041de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_PCD_EP_Open+0xaa>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e00e      	b.n	800420a <HAL_PCD_EP_Open+0xc8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 ff9c 	bl	8006138 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004208:	7afb      	ldrb	r3, [r7, #11]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800421e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	da0f      	bge.n	8004246 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3338      	adds	r3, #56	@ 0x38
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	705a      	strb	r2, [r3, #1]
 8004244:	e00f      	b.n	8004266 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_PCD_EP_Close+0x6e>
 800427c:	2302      	movs	r3, #2
 800427e:	e00e      	b.n	800429e <HAL_PCD_EP_Close+0x8c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	4618      	mov	r0, r3
 8004290:	f001 ffda 	bl	8006248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	460b      	mov	r3, r1
 80042b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e8:	7afb      	ldrb	r3, [r7, #11]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	f002 fab9 	bl	8006890 <USB_EP0StartXfer>
 800431e:	e008      	b.n	8004332 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	f002 f867 	bl	8006400 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	460b      	mov	r3, r1
 800437a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437c:	7afb      	ldrb	r3, [r7, #11]
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	3338      	adds	r3, #56	@ 0x38
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	3304      	adds	r3, #4
 8004392:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2201      	movs	r2, #1
 80043aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d102      	bne.n	80043c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c6:	7afb      	ldrb	r3, [r7, #11]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	f002 fa57 	bl	8006890 <USB_EP0StartXfer>
 80043e2:	e008      	b.n	80043f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6979      	ldr	r1, [r7, #20]
 80043f2:	f002 f805 	bl	8006400 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d901      	bls.n	800441e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e050      	b.n	80044c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800441e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da0f      	bge.n	8004446 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3338      	adds	r3, #56	@ 0x38
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	705a      	strb	r2, [r3, #1]
 8004444:	e00d      	b.n	8004462 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_PCD_EP_SetStall+0x82>
 800447e:	2302      	movs	r3, #2
 8004480:	e01e      	b.n	80044c0 <HAL_PCD_EP_SetStall+0xc0>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f002 fc95 	bl	8006dc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	b2d9      	uxtb	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80044b0:	461a      	mov	r2, r3
 80044b2:	f002 fe85 	bl	80071c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d901      	bls.n	80044e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e042      	b.n	800456c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da0f      	bge.n	800450e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3338      	adds	r3, #56	@ 0x38
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	3304      	adds	r3, #4
 8004504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	705a      	strb	r2, [r3, #1]
 800450c:	e00f      	b.n	800452e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	3304      	adds	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_ClrStall+0x86>
 800454a:	2302      	movs	r3, #2
 800454c:	e00e      	b.n	800456c <HAL_PCD_EP_ClrStall+0xa4>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f002 fc9d 	bl	8006e9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004584:	2b00      	cmp	r3, #0
 8004586:	da0c      	bge.n	80045a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 020f 	and.w	r2, r3, #15
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	3338      	adds	r3, #56	@ 0x38
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e00c      	b.n	80045bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	3304      	adds	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f002 fabc 	bl	8006b40 <USB_EPStopXfer>
 80045c8:	4603      	mov	r3, r0
 80045ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045cc:	7afb      	ldrb	r3, [r7, #11]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	@ 0x28
 80045da:	af02      	add	r7, sp, #8
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	3338      	adds	r3, #56	@ 0x38
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	3304      	adds	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	429a      	cmp	r2, r3
 8004608:	d901      	bls.n	800460e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06c      	b.n	80046e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3303      	adds	r3, #3
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004632:	e02b      	b.n	800468c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	429a      	cmp	r2, r3
 8004648:	d902      	bls.n	8004650 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3303      	adds	r3, #3
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6919      	ldr	r1, [r3, #16]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004668:	b2db      	uxtb	r3, r3
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f002 fb10 	bl	8006c94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	441a      	add	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	441a      	add	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d809      	bhi.n	80046b6 <PCD_WriteEmptyTxFifo+0xe0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d203      	bcs.n	80046b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1be      	bne.n	8004634 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d811      	bhi.n	80046e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	2201      	movs	r2, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	43db      	mvns	r3, r3
 80046dc:	6939      	ldr	r1, [r7, #16]
 80046de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046e2:	4013      	ands	r3, r2
 80046e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	333c      	adds	r3, #60	@ 0x3c
 8004708:	3304      	adds	r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d17b      	bne.n	800481e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4a61      	ldr	r2, [pc, #388]	@ (80048b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	f240 80b9 	bls.w	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80b3 	beq.w	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004758:	6093      	str	r3, [r2, #8]
 800475a:	e0a7      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	2320      	movs	r3, #32
 8004776:	6093      	str	r3, [r2, #8]
 8004778:	e098      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 8093 	bne.w	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a4b      	ldr	r2, [pc, #300]	@ (80048b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d90f      	bls.n	80047ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	e07e      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	0159      	lsls	r1, r3, #5
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80047f8:	461a      	mov	r2, r3
 80047fa:	2101      	movs	r1, #1
 80047fc:	f002 fce0 	bl	80071c0 <USB_EP0_OutStart>
 8004800:	e006      	b.n	8004810 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f004 ff86 	bl	8009728 <HAL_PCD_DataOutStageCallback>
 800481c:	e046      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4a26      	ldr	r2, [pc, #152]	@ (80048bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d124      	bne.n	8004870 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004842:	6093      	str	r3, [r2, #8]
 8004844:	e032      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	461a      	mov	r2, r3
 800485e:	2320      	movs	r3, #32
 8004860:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f004 ff5d 	bl	8009728 <HAL_PCD_DataOutStageCallback>
 800486e:	e01d      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d114      	bne.n	80048a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004898:	461a      	mov	r2, r3
 800489a:	2100      	movs	r1, #0
 800489c:	f002 fc90 	bl	80071c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f004 ff3e 	bl	8009728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	4f54300a 	.word	0x4f54300a
 80048bc:	4f54310a 	.word	0x4f54310a

080048c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	333c      	adds	r3, #60	@ 0x3c
 80048d8:	3304      	adds	r3, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a15      	ldr	r2, [pc, #84]	@ (8004948 <PCD_EP_OutSetupPacket_int+0x88>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d90e      	bls.n	8004914 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004912:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f004 fef5 	bl	8009704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a0a      	ldr	r2, [pc, #40]	@ (8004948 <PCD_EP_OutSetupPacket_int+0x88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d90c      	bls.n	800493c <PCD_EP_OutSetupPacket_int+0x7c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004934:	461a      	mov	r2, r3
 8004936:	2101      	movs	r1, #1
 8004938:	f002 fc42 	bl	80071c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	4f54300a 	.word	0x4f54300a

0800494c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
 8004958:	4613      	mov	r3, r2
 800495a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800496a:	883b      	ldrh	r3, [r7, #0]
 800496c:	0419      	lsls	r1, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	430a      	orrs	r2, r1
 8004976:	629a      	str	r2, [r3, #40]	@ 0x28
 8004978:	e028      	b.n	80049cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4413      	add	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e00d      	b.n	80049aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	3340      	adds	r3, #64	@ 0x40
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4413      	add	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	3301      	adds	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d3ec      	bcc.n	800498e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049b4:	883b      	ldrh	r3, [r7, #0]
 80049b6:	0418      	lsls	r0, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	3b01      	subs	r3, #1
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4302      	orrs	r2, r0
 80049c4:	3340      	adds	r3, #64	@ 0x40
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e267      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d075      	beq.n	8004b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	4b88      	ldr	r3, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d00c      	beq.n	8004a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b85      	ldr	r3, [pc, #532]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d112      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4a:	4b82      	ldr	r3, [pc, #520]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a58:	4b7e      	ldr	r3, [pc, #504]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05b      	beq.n	8004b1c <HAL_RCC_OscConfig+0x108>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d157      	bne.n	8004b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e242      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x74>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b70      	ldr	r3, [pc, #448]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a6f      	ldr	r2, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004aac:	4b69      	ldr	r3, [pc, #420]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a68      	ldr	r2, [pc, #416]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd f952 	bl	8001d74 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd f94e 	bl	8001d74 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e207      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xc0>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd f93e 	bl	8001d74 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fd f93a 	bl	8001d74 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1f3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b51      	ldr	r3, [pc, #324]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0xe8>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b36:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b44      	ldr	r3, [pc, #272]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b41      	ldr	r3, [pc, #260]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4937      	ldr	r1, [pc, #220]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b34      	ldr	r3, [pc, #208]	@ (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd f8f3 	bl	8001d74 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fd f8ef 	bl	8001d74 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a8      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4925      	ldr	r1, [pc, #148]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd f8d2 	bl	8001d74 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fd f8ce 	bl	8001d74 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e187      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd f8b2 	bl	8001d74 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fd f8ae 	bl	8001d74 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e167      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x200>
 8004c32:	e01b      	b.n	8004c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fd f89b 	bl	8001d74 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00e      	b.n	8004c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fd f897 	bl	8001d74 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d907      	bls.n	8004c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e150      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470000 	.word	0x42470000
 8004c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b88      	ldr	r3, [pc, #544]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ea      	bne.n	8004c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8097 	beq.w	8004da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b81      	ldr	r3, [pc, #516]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	4a7c      	ldr	r2, [pc, #496]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b77      	ldr	r3, [pc, #476]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b74      	ldr	r3, [pc, #464]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a73      	ldr	r2, [pc, #460]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd f857 	bl	8001d74 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd f853 	bl	8001d74 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e10c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x2ea>
 8004cf0:	4b64      	ldr	r3, [pc, #400]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a63      	ldr	r2, [pc, #396]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x30c>
 8004d06:	4b5f      	ldr	r3, [pc, #380]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d12:	4b5c      	ldr	r3, [pc, #368]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a5b      	ldr	r2, [pc, #364]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004d20:	4b58      	ldr	r3, [pc, #352]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	4a57      	ldr	r2, [pc, #348]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2c:	4b55      	ldr	r3, [pc, #340]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a54      	ldr	r2, [pc, #336]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd f818 	bl	8001d74 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fd f814 	bl	8001d74 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0cb      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	4b49      	ldr	r3, [pc, #292]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ee      	beq.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fd f802 	bl	8001d74 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fc fffe 	bl	8001d74 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0b5      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b39      	ldr	r3, [pc, #228]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	4a38      	ldr	r2, [pc, #224]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a1 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db2:	4b34      	ldr	r3, [pc, #208]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d05c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d141      	bne.n	8004e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc ffd2 	bl	8001d74 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc ffce 	bl	8001d74 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e087      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	491b      	ldr	r1, [pc, #108]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fc ffa7 	bl	8001d74 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fc ffa3 	bl	8001d74 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e05c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x416>
 8004e48:	e054      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fc ff90 	bl	8001d74 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fc ff8c 	bl	8001d74 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e045      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e038      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <HAL_RCC_OscConfig+0x4ec>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d028      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d121      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b68      	ldr	r3, [pc, #416]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90c      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b65      	ldr	r3, [pc, #404]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a52      	ldr	r2, [pc, #328]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e067      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4934      	ldr	r1, [pc, #208]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fc febe 	bl	8001d74 <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fc feba 	bl	8001d74 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b25      	ldr	r3, [pc, #148]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fc fe1e 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800f2a0 	.word	0x0800f2a0
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b090      	sub	sp, #64	@ 0x40
 80050d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e0:	2300      	movs	r3, #0
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e8:	4b59      	ldr	r3, [pc, #356]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d00d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x40>
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	f200 80a1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x16c>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x34>
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x3a>
 8005102:	e09b      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005108:	e09b      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800510a:	4b53      	ldr	r3, [pc, #332]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800510c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800510e:	e098      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005110:	4b4f      	ldr	r3, [pc, #316]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800511a:	4b4d      	ldr	r3, [pc, #308]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d028      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005126:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	099b      	lsrs	r3, r3, #6
 800512c:	2200      	movs	r2, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	627a      	str	r2, [r7, #36]	@ 0x24
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005138:	2100      	movs	r1, #0
 800513a:	4b47      	ldr	r3, [pc, #284]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800513c:	fb03 f201 	mul.w	r2, r3, r1
 8005140:	2300      	movs	r3, #0
 8005142:	fb00 f303 	mul.w	r3, r0, r3
 8005146:	4413      	add	r3, r2
 8005148:	4a43      	ldr	r2, [pc, #268]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800514a:	fba0 1202 	umull	r1, r2, r0, r2
 800514e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005150:	460a      	mov	r2, r1
 8005152:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005156:	4413      	add	r3, r2
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	2200      	movs	r2, #0
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800516a:	f7fb fd95 	bl	8000c98 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4613      	mov	r3, r2
 8005174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005176:	e053      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4b35      	ldr	r3, [pc, #212]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	2200      	movs	r2, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	617a      	str	r2, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800518a:	f04f 0b00 	mov.w	fp, #0
 800518e:	4652      	mov	r2, sl
 8005190:	465b      	mov	r3, fp
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	ebb2 080a 	subs.w	r8, r2, sl
 80051aa:	eb63 090b 	sbc.w	r9, r3, fp
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051c2:	ebb2 0408 	subs.w	r4, r2, r8
 80051c6:	eb63 0509 	sbc.w	r5, r3, r9
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	00eb      	lsls	r3, r5, #3
 80051d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d8:	00e2      	lsls	r2, r4, #3
 80051da:	4614      	mov	r4, r2
 80051dc:	461d      	mov	r5, r3
 80051de:	eb14 030a 	adds.w	r3, r4, sl
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	eb45 030b 	adc.w	r3, r5, fp
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	2200      	movs	r2, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	60fa      	str	r2, [r7, #12]
 8005210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005214:	f7fb fd40 	bl	8000c98 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005230:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 800523e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005244:	4618      	mov	r0, r3
 8005246:	3740      	adds	r7, #64	@ 0x40
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	016e3600 	.word	0x016e3600

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	@ (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000000 	.word	0x20000000

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	@ (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800f2b0 	.word	0x0800f2b0

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	@ (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	0800f2b0 	.word	0x0800f2b0

080052c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e03f      	b.n	8005356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fb2e 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	@ 0x24
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f929 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800531c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800532c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800533c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08a      	sub	sp, #40	@ 0x28
 8005362:	af02      	add	r7, sp, #8
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	d17c      	bne.n	8005478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_UART_Transmit+0x2c>
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e075      	b.n	800547a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_UART_Transmit+0x3e>
 8005398:	2302      	movs	r3, #2
 800539a:	e06e      	b.n	800547a <HAL_UART_Transmit+0x11c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2221      	movs	r2, #33	@ 0x21
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b2:	f7fc fcdf 	bl	8001d74 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053cc:	d108      	bne.n	80053e0 <HAL_UART_Transmit+0x82>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e003      	b.n	80053e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80053f0:	e02a      	b.n	8005448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	@ 0x80
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f840 	bl	8005482 <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e036      	b.n	800547a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3302      	adds	r3, #2
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e007      	b.n	800543a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1cf      	bne.n	80053f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2140      	movs	r1, #64	@ 0x40
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f810 	bl	8005482 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e006      	b.n	800547a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b090      	sub	sp, #64	@ 0x40
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4613      	mov	r3, r2
 8005490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005492:	e050      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d04c      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800549c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054a2:	f7fc fc67 	bl	8001d74 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d241      	bcs.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e00f      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	429a      	cmp	r2, r3
 8005552:	d09f      	beq.n	8005494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3740      	adds	r7, #64	@ 0x40
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b0c0      	sub	sp, #256	@ 0x100
 8005566:	af00      	add	r7, sp, #0
 8005568:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	ea40 0301 	orr.w	r3, r0, r1
 8005588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055b8:	f021 010c 	bic.w	r1, r1, #12
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055c6:	430b      	orrs	r3, r1
 80055c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	6999      	ldr	r1, [r3, #24]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	ea40 0301 	orr.w	r3, r0, r1
 80055e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8f      	ldr	r3, [pc, #572]	@ (800582c <UART_SetConfig+0x2cc>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d005      	beq.n	8005600 <UART_SetConfig+0xa0>
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005830 <UART_SetConfig+0x2d0>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d104      	bne.n	800560a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7ff fe4c 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8005604:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005608:	e003      	b.n	8005612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7ff fe33 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800560e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561c:	f040 810c 	bne.w	8005838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800562a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800562e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	1891      	adds	r1, r2, r2
 8005638:	65b9      	str	r1, [r7, #88]	@ 0x58
 800563a:	415b      	adcs	r3, r3
 800563c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800563e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005642:	4621      	mov	r1, r4
 8005644:	eb12 0801 	adds.w	r8, r2, r1
 8005648:	4629      	mov	r1, r5
 800564a:	eb43 0901 	adc.w	r9, r3, r1
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800565e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005662:	4690      	mov	r8, r2
 8005664:	4699      	mov	r9, r3
 8005666:	4623      	mov	r3, r4
 8005668:	eb18 0303 	adds.w	r3, r8, r3
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005670:	462b      	mov	r3, r5
 8005672:	eb49 0303 	adc.w	r3, r9, r3
 8005676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005686:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800568a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800568e:	460b      	mov	r3, r1
 8005690:	18db      	adds	r3, r3, r3
 8005692:	653b      	str	r3, [r7, #80]	@ 0x50
 8005694:	4613      	mov	r3, r2
 8005696:	eb42 0303 	adc.w	r3, r2, r3
 800569a:	657b      	str	r3, [r7, #84]	@ 0x54
 800569c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056a4:	f7fb faf8 	bl	8000c98 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b61      	ldr	r3, [pc, #388]	@ (8005834 <UART_SetConfig+0x2d4>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	011c      	lsls	r4, r3, #4
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056d0:	415b      	adcs	r3, r3
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056d8:	4641      	mov	r1, r8
 80056da:	eb12 0a01 	adds.w	sl, r2, r1
 80056de:	4649      	mov	r1, r9
 80056e0:	eb43 0b01 	adc.w	fp, r3, r1
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f8:	4692      	mov	sl, r2
 80056fa:	469b      	mov	fp, r3
 80056fc:	4643      	mov	r3, r8
 80056fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005706:	464b      	mov	r3, r9
 8005708:	eb4b 0303 	adc.w	r3, fp, r3
 800570c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800571c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005724:	460b      	mov	r3, r1
 8005726:	18db      	adds	r3, r3, r3
 8005728:	643b      	str	r3, [r7, #64]	@ 0x40
 800572a:	4613      	mov	r3, r2
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	647b      	str	r3, [r7, #68]	@ 0x44
 8005732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800573a:	f7fb faad 	bl	8000c98 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4611      	mov	r1, r2
 8005744:	4b3b      	ldr	r3, [pc, #236]	@ (8005834 <UART_SetConfig+0x2d4>)
 8005746:	fba3 2301 	umull	r2, r3, r3, r1
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2264      	movs	r2, #100	@ 0x64
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	1acb      	subs	r3, r1, r3
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800575a:	4b36      	ldr	r3, [pc, #216]	@ (8005834 <UART_SetConfig+0x2d4>)
 800575c:	fba3 2302 	umull	r2, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005768:	441c      	add	r4, r3
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005784:	415b      	adcs	r3, r3
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800578c:	4641      	mov	r1, r8
 800578e:	1851      	adds	r1, r2, r1
 8005790:	6339      	str	r1, [r7, #48]	@ 0x30
 8005792:	4649      	mov	r1, r9
 8005794:	414b      	adcs	r3, r1
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057a4:	4659      	mov	r1, fp
 80057a6:	00cb      	lsls	r3, r1, #3
 80057a8:	4651      	mov	r1, sl
 80057aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ae:	4651      	mov	r1, sl
 80057b0:	00ca      	lsls	r2, r1, #3
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	4642      	mov	r2, r8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057c0:	464b      	mov	r3, r9
 80057c2:	460a      	mov	r2, r1
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057e0:	460b      	mov	r3, r1
 80057e2:	18db      	adds	r3, r3, r3
 80057e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e6:	4613      	mov	r3, r2
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057f6:	f7fb fa4f 	bl	8000c98 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <UART_SetConfig+0x2d4>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	@ 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3332      	adds	r3, #50	@ 0x32
 8005812:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <UART_SetConfig+0x2d4>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4422      	add	r2, r4
 8005826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005828:	e106      	b.n	8005a38 <UART_SetConfig+0x4d8>
 800582a:	bf00      	nop
 800582c:	40011000 	.word	0x40011000
 8005830:	40011400 	.word	0x40011400
 8005834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005842:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800584a:	4642      	mov	r2, r8
 800584c:	464b      	mov	r3, r9
 800584e:	1891      	adds	r1, r2, r2
 8005850:	6239      	str	r1, [r7, #32]
 8005852:	415b      	adcs	r3, r3
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
 8005856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585a:	4641      	mov	r1, r8
 800585c:	1854      	adds	r4, r2, r1
 800585e:	4649      	mov	r1, r9
 8005860:	eb43 0501 	adc.w	r5, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	00eb      	lsls	r3, r5, #3
 800586e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005872:	00e2      	lsls	r2, r4, #3
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	4643      	mov	r3, r8
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005880:	464b      	mov	r3, r9
 8005882:	eb45 0303 	adc.w	r3, r5, r3
 8005886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058a6:	4629      	mov	r1, r5
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b0:	4621      	mov	r1, r4
 80058b2:	008a      	lsls	r2, r1, #2
 80058b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058b8:	f7fb f9ee 	bl	8000c98 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4b60      	ldr	r3, [pc, #384]	@ (8005a44 <UART_SetConfig+0x4e4>)
 80058c2:	fba3 2302 	umull	r2, r3, r3, r2
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	011c      	lsls	r4, r3, #4
 80058ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	61b9      	str	r1, [r7, #24]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	4641      	mov	r1, r8
 80058ee:	1851      	adds	r1, r2, r1
 80058f0:	6139      	str	r1, [r7, #16]
 80058f2:	4649      	mov	r1, r9
 80058f4:	414b      	adcs	r3, r1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005904:	4659      	mov	r1, fp
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590e:	4651      	mov	r1, sl
 8005910:	00ca      	lsls	r2, r1, #3
 8005912:	4610      	mov	r0, r2
 8005914:	4619      	mov	r1, r3
 8005916:	4603      	mov	r3, r0
 8005918:	4642      	mov	r2, r8
 800591a:	189b      	adds	r3, r3, r2
 800591c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005920:	464b      	mov	r3, r9
 8005922:	460a      	mov	r2, r1
 8005924:	eb42 0303 	adc.w	r3, r2, r3
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005936:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005944:	4649      	mov	r1, r9
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	4641      	mov	r1, r8
 800594a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594e:	4641      	mov	r1, r8
 8005950:	008a      	lsls	r2, r1, #2
 8005952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005956:	f7fb f99f 	bl	8000c98 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4611      	mov	r1, r2
 8005960:	4b38      	ldr	r3, [pc, #224]	@ (8005a44 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2301 	umull	r2, r3, r3, r1
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	2264      	movs	r2, #100	@ 0x64
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	1acb      	subs	r3, r1, r3
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	3332      	adds	r3, #50	@ 0x32
 8005974:	4a33      	ldr	r2, [pc, #204]	@ (8005a44 <UART_SetConfig+0x4e4>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005980:	441c      	add	r4, r3
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	673b      	str	r3, [r7, #112]	@ 0x70
 800598a:	677a      	str	r2, [r7, #116]	@ 0x74
 800598c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	415b      	adcs	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a0:	4641      	mov	r1, r8
 80059a2:	1851      	adds	r1, r2, r1
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	4649      	mov	r1, r9
 80059a8:	414b      	adcs	r3, r1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059b8:	4659      	mov	r1, fp
 80059ba:	00cb      	lsls	r3, r1, #3
 80059bc:	4651      	mov	r1, sl
 80059be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c2:	4651      	mov	r1, sl
 80059c4:	00ca      	lsls	r2, r1, #3
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	4642      	mov	r2, r8
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d2:	464b      	mov	r3, r9
 80059d4:	460a      	mov	r2, r1
 80059d6:	eb42 0303 	adc.w	r3, r2, r3
 80059da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059f4:	4649      	mov	r1, r9
 80059f6:	008b      	lsls	r3, r1, #2
 80059f8:	4641      	mov	r1, r8
 80059fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fe:	4641      	mov	r1, r8
 8005a00:	008a      	lsls	r2, r1, #2
 8005a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a06:	f7fb f947 	bl	8000c98 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <UART_SetConfig+0x4e4>)
 8005a10:	fba3 1302 	umull	r1, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	2164      	movs	r1, #100	@ 0x64
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	3332      	adds	r3, #50	@ 0x32
 8005a22:	4a08      	ldr	r2, [pc, #32]	@ (8005a44 <UART_SetConfig+0x4e4>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f003 020f 	and.w	r2, r3, #15
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4422      	add	r2, r4
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a44:	51eb851f 	.word	0x51eb851f

08005a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a48:	b084      	sub	sp, #16
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	f107 001c 	add.w	r0, r7, #28
 8005a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d122      	bne.n	8005aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fbee 	bl	800727c <USB_CoreReset>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e01a      	b.n	8005adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fbe2 	bl	800727c <USB_CoreReset>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ace:	e005      	b.n	8005adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10b      	bne.n	8005afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f043 0206 	orr.w	r2, r3, #6
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b06:	b004      	add	sp, #16
 8005b08:	4770      	bx	lr
	...

08005b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d165      	bne.n	8005bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a41      	ldr	r2, [pc, #260]	@ (8005c28 <USB_SetTurnaroundTime+0x11c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d906      	bls.n	8005b36 <USB_SetTurnaroundTime+0x2a>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a40      	ldr	r2, [pc, #256]	@ (8005c2c <USB_SetTurnaroundTime+0x120>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d202      	bcs.n	8005b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b30:	230f      	movs	r3, #15
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e062      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4a3c      	ldr	r2, [pc, #240]	@ (8005c2c <USB_SetTurnaroundTime+0x120>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d306      	bcc.n	8005b4c <USB_SetTurnaroundTime+0x40>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4a3b      	ldr	r2, [pc, #236]	@ (8005c30 <USB_SetTurnaroundTime+0x124>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d202      	bcs.n	8005b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b46:	230e      	movs	r3, #14
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e057      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4a38      	ldr	r2, [pc, #224]	@ (8005c30 <USB_SetTurnaroundTime+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d306      	bcc.n	8005b62 <USB_SetTurnaroundTime+0x56>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <USB_SetTurnaroundTime+0x128>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d202      	bcs.n	8005b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b5c:	230d      	movs	r3, #13
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e04c      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4a33      	ldr	r2, [pc, #204]	@ (8005c34 <USB_SetTurnaroundTime+0x128>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d306      	bcc.n	8005b78 <USB_SetTurnaroundTime+0x6c>
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4a32      	ldr	r2, [pc, #200]	@ (8005c38 <USB_SetTurnaroundTime+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d802      	bhi.n	8005b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b72:	230c      	movs	r3, #12
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e041      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c38 <USB_SetTurnaroundTime+0x12c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d906      	bls.n	8005b8e <USB_SetTurnaroundTime+0x82>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4a2e      	ldr	r2, [pc, #184]	@ (8005c3c <USB_SetTurnaroundTime+0x130>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d802      	bhi.n	8005b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b88:	230b      	movs	r3, #11
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e036      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4a2a      	ldr	r2, [pc, #168]	@ (8005c3c <USB_SetTurnaroundTime+0x130>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d906      	bls.n	8005ba4 <USB_SetTurnaroundTime+0x98>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4a29      	ldr	r2, [pc, #164]	@ (8005c40 <USB_SetTurnaroundTime+0x134>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d802      	bhi.n	8005ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e02b      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a26      	ldr	r2, [pc, #152]	@ (8005c40 <USB_SetTurnaroundTime+0x134>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d906      	bls.n	8005bba <USB_SetTurnaroundTime+0xae>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a25      	ldr	r2, [pc, #148]	@ (8005c44 <USB_SetTurnaroundTime+0x138>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d202      	bcs.n	8005bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005bb4:	2309      	movs	r3, #9
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e020      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4a21      	ldr	r2, [pc, #132]	@ (8005c44 <USB_SetTurnaroundTime+0x138>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d306      	bcc.n	8005bd0 <USB_SetTurnaroundTime+0xc4>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	@ (8005c48 <USB_SetTurnaroundTime+0x13c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d802      	bhi.n	8005bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bca:	2308      	movs	r3, #8
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e015      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c48 <USB_SetTurnaroundTime+0x13c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d906      	bls.n	8005be6 <USB_SetTurnaroundTime+0xda>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4a1c      	ldr	r2, [pc, #112]	@ (8005c4c <USB_SetTurnaroundTime+0x140>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d202      	bcs.n	8005be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005be0:	2307      	movs	r3, #7
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e00a      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005be6:	2306      	movs	r3, #6
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e007      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bf2:	2309      	movs	r3, #9
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e001      	b.n	8005bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bf8:	2309      	movs	r3, #9
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	029b      	lsls	r3, r3, #10
 8005c10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	00d8acbf 	.word	0x00d8acbf
 8005c2c:	00e4e1c0 	.word	0x00e4e1c0
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	01067380 	.word	0x01067380
 8005c38:	011a499f 	.word	0x011a499f
 8005c3c:	01312cff 	.word	0x01312cff
 8005c40:	014ca43f 	.word	0x014ca43f
 8005c44:	016e3600 	.word	0x016e3600
 8005c48:	01a6ab1f 	.word	0x01a6ab1f
 8005c4c:	01e84800 	.word	0x01e84800

08005c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 0201 	bic.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d115      	bne.n	8005ce2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f7fc f862 	bl	8001d8c <HAL_Delay>
      ms++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fa45 	bl	800715e <USB_GetMode>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d01e      	beq.n	8005d18 <USB_SetCurrentMode+0x84>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b31      	cmp	r3, #49	@ 0x31
 8005cde:	d9f0      	bls.n	8005cc2 <USB_SetCurrentMode+0x2e>
 8005ce0:	e01a      	b.n	8005d18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d115      	bne.n	8005d14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	f7fc f849 	bl	8001d8c <HAL_Delay>
      ms++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fa2c 	bl	800715e <USB_GetMode>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <USB_SetCurrentMode+0x84>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b31      	cmp	r3, #49	@ 0x31
 8005d10:	d9f0      	bls.n	8005cf4 <USB_SetCurrentMode+0x60>
 8005d12:	e001      	b.n	8005d18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e005      	b.n	8005d24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b32      	cmp	r3, #50	@ 0x32
 8005d1c:	d101      	bne.n	8005d22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b086      	sub	sp, #24
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	e009      	b.n	8005d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3340      	adds	r3, #64	@ 0x40
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b0e      	cmp	r3, #14
 8005d64:	d9f2      	bls.n	8005d4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11c      	bne.n	8005da6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005da4:	e00b      	b.n	8005dbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd8:	461a      	mov	r2, r3
 8005dda:	680b      	ldr	r3, [r1, #0]
 8005ddc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10c      	bne.n	8005dfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dea:	2100      	movs	r1, #0
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f965 	bl	80060bc <USB_SetDevSpeed>
 8005df2:	e008      	b.n	8005e06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005df4:	2101      	movs	r1, #1
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f960 	bl	80060bc <USB_SetDevSpeed>
 8005dfc:	e003      	b.n	8005e06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dfe:	2103      	movs	r1, #3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f95b 	bl	80060bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e06:	2110      	movs	r1, #16
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8f3 	bl	8005ff4 <USB_FlushTxFifo>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f91f 	bl	800605c <USB_FlushRxFifo>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	461a      	mov	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	e043      	b.n	8005eda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e68:	d118      	bne.n	8005e9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e013      	b.n	8005eae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e92:	461a      	mov	r2, r3
 8005e94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e008      	b.n	8005eae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3b7      	bcc.n	8005e52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e043      	b.n	8005f70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005efe:	d118      	bne.n	8005f32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	461a      	mov	r2, r3
 8005f14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e013      	b.n	8005f44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e008      	b.n	8005f44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3b7      	bcc.n	8005ee8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <USB_DevInit+0x2c4>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd8:	f043 0304 	orr.w	r3, r3, #4
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fec:	b004      	add	sp, #16
 8005fee:	4770      	bx	lr
 8005ff0:	803c3800 	.word	0x803c3800

08005ff4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a13      	ldr	r2, [pc, #76]	@ (8006058 <USB_FlushTxFifo+0x64>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e01b      	b.n	800604c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	daf2      	bge.n	8006002 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	019b      	lsls	r3, r3, #6
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a08      	ldr	r2, [pc, #32]	@ (8006058 <USB_FlushTxFifo+0x64>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e006      	b.n	800604c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b20      	cmp	r3, #32
 8006048:	d0f0      	beq.n	800602c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	00030d40 	.word	0x00030d40

0800605c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <USB_FlushRxFifo+0x5c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e018      	b.n	80060ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	daf2      	bge.n	8006068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2210      	movs	r2, #16
 800608a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <USB_FlushRxFifo+0x5c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e006      	b.n	80060ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d0f0      	beq.n	800608c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	00030d40 	.word	0x00030d40

080060bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060dc:	4313      	orrs	r3, r2
 80060de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b087      	sub	sp, #28
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]
 8006112:	e00a      	b.n	800612a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d002      	beq.n	8006120 <USB_GetDevSpeed+0x32>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d102      	bne.n	8006126 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006120:	2302      	movs	r3, #2
 8006122:	75fb      	strb	r3, [r7, #23]
 8006124:	e001      	b.n	800612a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006126:	230f      	movs	r3, #15
 8006128:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d13a      	bne.n	80061ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	2101      	movs	r1, #1
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006172:	4313      	orrs	r3, r2
 8006174:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d155      	bne.n	8006238 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	059b      	lsls	r3, r3, #22
 80061ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061b0:	4313      	orrs	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e036      	b.n	8006238 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d0:	69da      	ldr	r2, [r3, #28]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	2101      	movs	r1, #1
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d11a      	bne.n	8006238 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	791b      	ldrb	r3, [r3, #4]
 800621c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800621e:	430b      	orrs	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006236:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d161      	bne.n	8006328 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800627a:	d11f      	bne.n	80062bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800629a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062dc:	4013      	ands	r3, r2
 80062de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	43db      	mvns	r3, r3
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006300:	4013      	ands	r3, r2
 8006302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	0159      	lsls	r1, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	440b      	add	r3, r1
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	4619      	mov	r1, r3
 8006320:	4b35      	ldr	r3, [pc, #212]	@ (80063f8 <USB_DeactivateEndpoint+0x1b0>)
 8006322:	4013      	ands	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	e060      	b.n	80063ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800633a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800633e:	d11f      	bne.n	8006380 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800635a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800635e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800637a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800637e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	2101      	movs	r1, #1
 8006392:	fa01 f303 	lsl.w	r3, r1, r3
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	43db      	mvns	r3, r3
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063a0:	4013      	ands	r3, r2
 80063a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	43db      	mvns	r3, r3
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063c4:	4013      	ands	r3, r2
 80063c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	0159      	lsls	r1, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	440b      	add	r3, r1
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	4619      	mov	r1, r3
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <USB_DeactivateEndpoint+0x1b4>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	ec337800 	.word	0xec337800
 80063fc:	eff37800 	.word	0xeff37800

08006400 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	f040 815c 	bne.w	80066da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d132      	bne.n	8006490 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006444:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006448:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800644c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800646c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006488:	0cdb      	lsrs	r3, r3, #19
 800648a:	04db      	lsls	r3, r3, #19
 800648c:	6113      	str	r3, [r2, #16]
 800648e:	e074      	b.n	800657a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064aa:	0cdb      	lsrs	r3, r3, #19
 80064ac:	04db      	lsls	r3, r3, #19
 80064ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	440b      	add	r3, r1
 80064ec:	1e59      	subs	r1, r3, #1
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80064f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064f8:	4b9d      	ldr	r3, [pc, #628]	@ (8006770 <USB_EPStartXfer+0x370>)
 80064fa:	400b      	ands	r3, r1
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	0148      	lsls	r0, r1, #5
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	4401      	add	r1, r0
 8006504:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006522:	69b9      	ldr	r1, [r7, #24]
 8006524:	0148      	lsls	r0, r1, #5
 8006526:	69f9      	ldr	r1, [r7, #28]
 8006528:	4401      	add	r1, r0
 800652a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800652e:	4313      	orrs	r3, r2
 8006530:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	791b      	ldrb	r3, [r3, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d11f      	bne.n	800657a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006554:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006558:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006578:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d14b      	bne.n	8006618 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	791b      	ldrb	r3, [r3, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d128      	bne.n	80065f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d110      	bne.n	80065d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e00f      	b.n	80065f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006610:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e133      	b.n	8006880 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006632:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006636:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d015      	beq.n	800666c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 811b 	beq.w	8006880 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006666:	4313      	orrs	r3, r2
 8006668:	634b      	str	r3, [r1, #52]	@ 0x34
 800666a:	e109      	b.n	8006880 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006696:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e00f      	b.n	80066be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6919      	ldr	r1, [r3, #16]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	b298      	uxth	r0, r3
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4603      	mov	r3, r0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fade 	bl	8006c94 <USB_WritePacket>
 80066d8:	e0d2      	b.n	8006880 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	0cdb      	lsrs	r3, r3, #19
 80066f6:	04db      	lsls	r3, r3, #19
 80066f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006714:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006718:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800671c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d126      	bne.n	8006774 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673c:	69b9      	ldr	r1, [r7, #24]
 800673e:	0148      	lsls	r0, r1, #5
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	4401      	add	r1, r0
 8006744:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006748:	4313      	orrs	r3, r2
 800674a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006766:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800676a:	6113      	str	r3, [r2, #16]
 800676c:	e03a      	b.n	80067e4 <USB_EPStartXfer+0x3e4>
 800676e:	bf00      	nop
 8006770:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4413      	add	r3, r2
 800677e:	1e5a      	subs	r2, r3, #1
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	8afa      	ldrh	r2, [r7, #22]
 8006790:	fb03 f202 	mul.w	r2, r3, r2
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	8afb      	ldrh	r3, [r7, #22]
 80067a8:	04d9      	lsls	r1, r3, #19
 80067aa:	4b38      	ldr	r3, [pc, #224]	@ (800688c <USB_EPStartXfer+0x48c>)
 80067ac:	400b      	ands	r3, r1
 80067ae:	69b9      	ldr	r1, [r7, #24]
 80067b0:	0148      	lsls	r0, r1, #5
 80067b2:	69f9      	ldr	r1, [r7, #28]
 80067b4:	4401      	add	r1, r0
 80067b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067ba:	4313      	orrs	r3, r2
 80067bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d4:	69b9      	ldr	r1, [r7, #24]
 80067d6:	0148      	lsls	r0, r1, #5
 80067d8:	69f9      	ldr	r1, [r7, #28]
 80067da:	4401      	add	r1, r0
 80067dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067e0:	4313      	orrs	r3, r2
 80067e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10d      	bne.n	8006806 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6919      	ldr	r1, [r3, #16]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006802:	460a      	mov	r2, r1
 8006804:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d128      	bne.n	8006860 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d110      	bne.n	8006840 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006838:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e00f      	b.n	8006860 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800687a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800687e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	1ff80000 	.word	0x1ff80000

08006890 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 80ce 	bne.w	8006a4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d132      	bne.n	8006920 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006918:	0cdb      	lsrs	r3, r3, #19
 800691a:	04db      	lsls	r3, r3, #19
 800691c:	6113      	str	r3, [r2, #16]
 800691e:	e04e      	b.n	80069be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693a:	0cdb      	lsrs	r3, r3, #19
 800693c:	04db      	lsls	r3, r3, #19
 800693e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800695e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006962:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	429a      	cmp	r2, r3
 800696e:	d903      	bls.n	8006978 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006992:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ae:	6939      	ldr	r1, [r7, #16]
 80069b0:	0148      	lsls	r0, r1, #5
 80069b2:	6979      	ldr	r1, [r7, #20]
 80069b4:	4401      	add	r1, r0
 80069b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069ba:	4313      	orrs	r3, r2
 80069bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d11e      	bne.n	8006a02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d8:	461a      	mov	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	e097      	b.n	8006b32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8083 	beq.w	8006b32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	6979      	ldr	r1, [r7, #20]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a4c:	e071      	b.n	8006b32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a68:	0cdb      	lsrs	r3, r3, #19
 8006a6a:	04db      	lsls	r3, r3, #19
 8006a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	6939      	ldr	r1, [r7, #16]
 8006ae2:	0148      	lsls	r0, r1, #5
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10d      	bne.n	8006b12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6919      	ldr	r1, [r3, #16]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0e:	460a      	mov	r2, r1
 8006b10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d14a      	bne.n	8006bf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b76:	f040 8086 	bne.w	8006c86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d902      	bls.n	8006bd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bd6:	e056      	b.n	8006c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf0:	d0e7      	beq.n	8006bc2 <USB_EPStopXfer+0x82>
 8006bf2:	e048      	b.n	8006c86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c0c:	d13b      	bne.n	8006c86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d902      	bls.n	8006c6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
          break;
 8006c6a:	e00c      	b.n	8006c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c84:	d0e7      	beq.n	8006c56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b089      	sub	sp, #36	@ 0x24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	71fb      	strb	r3, [r7, #7]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d123      	bne.n	8006d02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cba:	88bb      	ldrh	r3, [r7, #4]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	089b      	lsrs	r3, r3, #2
 8006cc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	e018      	b.n	8006cfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	031a      	lsls	r2, r3, #12
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3301      	adds	r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d3e2      	bcc.n	8006cc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3724      	adds	r7, #36	@ 0x24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b08b      	sub	sp, #44	@ 0x2c
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	f003 0303 	and.w	r3, r3, #3
 8006d34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d36:	2300      	movs	r3, #0
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	e014      	b.n	8006d66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	3301      	adds	r3, #1
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	3301      	adds	r3, #1
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	3301      	adds	r3, #1
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d3e6      	bcc.n	8006d3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d6e:	8bfb      	ldrh	r3, [r7, #30]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01e      	beq.n	8006db2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f107 0310 	add.w	r3, r7, #16
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	701a      	strb	r2, [r3, #0]
      i++;
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	3301      	adds	r3, #1
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006da6:	8bfb      	ldrh	r3, [r7, #30]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dac:	8bfb      	ldrh	r3, [r7, #30]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1ea      	bne.n	8006d88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	372c      	adds	r7, #44	@ 0x2c
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d12c      	bne.n	8006e36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db12      	blt.n	8006e14 <USB_EPSetStall+0x54>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00f      	beq.n	8006e14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	e02b      	b.n	8006e8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db12      	blt.n	8006e6e <USB_EPSetStall+0xae>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00f      	beq.n	8006e6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d128      	bne.n	8006f0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ed6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	791b      	ldrb	r3, [r3, #4]
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d003      	beq.n	8006ee8 <USB_EPClearStall+0x4c>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	791b      	ldrb	r3, [r3, #4]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d138      	bne.n	8006f5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e027      	b.n	8006f5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d003      	beq.n	8006f3a <USB_EPClearStall+0x9e>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	791b      	ldrb	r3, [r3, #4]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d10f      	bne.n	8006f5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006f8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe2:	f023 0302 	bic.w	r3, r3, #2
 8006fe6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007010:	f023 0303 	bic.w	r3, r3, #3
 8007014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4013      	ands	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007050:	68fb      	ldr	r3, [r7, #12]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	0c1b      	lsrs	r3, r3, #16
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	4013      	ands	r3, r2
 80070b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	b29b      	uxth	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070f4:	68bb      	ldr	r3, [r7, #8]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007102:	b480      	push	{r7}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007124:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	fa22 f303 	lsr.w	r3, r2, r3
 8007132:	01db      	lsls	r3, r3, #7
 8007134:	b2db      	uxtb	r3, r3
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4013      	ands	r3, r2
 800714e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007150:	68bb      	ldr	r3, [r7, #8]
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0301 	and.w	r3, r3, #1
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007194:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007198:	f023 0307 	bic.w	r3, r3, #7
 800719c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	333c      	adds	r3, #60	@ 0x3c
 80071d6:	3304      	adds	r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4a26      	ldr	r2, [pc, #152]	@ (8007278 <USB_EP0_OutStart+0xb8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d90a      	bls.n	80071fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071f4:	d101      	bne.n	80071fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e037      	b.n	800726a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007228:	f043 0318 	orr.w	r3, r3, #24
 800722c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800723c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10f      	bne.n	8007268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007262:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	4f54300a 	.word	0x4f54300a

0800727c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4a13      	ldr	r2, [pc, #76]	@ (80072e0 <USB_CoreReset+0x64>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d901      	bls.n	800729a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e01b      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	daf2      	bge.n	8007288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a09      	ldr	r2, [pc, #36]	@ (80072e0 <USB_CoreReset+0x64>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d0f0      	beq.n	80072b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	00030d40 	.word	0x00030d40

080072e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80072f4:	f002 fc78 	bl	8009be8 <USBD_static_malloc>
 80072f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32b0      	adds	r2, #176	@ 0xb0
 800730a:	2100      	movs	r1, #0
 800730c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007310:	2302      	movs	r3, #2
 8007312:	e0d4      	b.n	80074be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007314:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007318:	2100      	movs	r1, #0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f003 fc39 	bl	800ab92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32b0      	adds	r2, #176	@ 0xb0
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32b0      	adds	r2, #176	@ 0xb0
 800733a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7c1b      	ldrb	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d138      	bne.n	80073be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800734c:	4b5e      	ldr	r3, [pc, #376]	@ (80074c8 <USBD_CDC_Init+0x1e4>)
 800734e:	7819      	ldrb	r1, [r3, #0]
 8007350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007354:	2202      	movs	r2, #2
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f002 fb23 	bl	80099a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800735c:	4b5a      	ldr	r3, [pc, #360]	@ (80074c8 <USBD_CDC_Init+0x1e4>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	3324      	adds	r3, #36	@ 0x24
 8007372:	2201      	movs	r2, #1
 8007374:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007376:	4b55      	ldr	r3, [pc, #340]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 8007378:	7819      	ldrb	r1, [r3, #0]
 800737a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800737e:	2202      	movs	r2, #2
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f002 fb0e 	bl	80099a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007386:	4b51      	ldr	r3, [pc, #324]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800739e:	2201      	movs	r2, #1
 80073a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073a2:	4b4b      	ldr	r3, [pc, #300]	@ (80074d0 <USBD_CDC_Init+0x1ec>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	3326      	adds	r3, #38	@ 0x26
 80073b8:	2210      	movs	r2, #16
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e035      	b.n	800742a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073be:	4b42      	ldr	r3, [pc, #264]	@ (80074c8 <USBD_CDC_Init+0x1e4>)
 80073c0:	7819      	ldrb	r1, [r3, #0]
 80073c2:	2340      	movs	r3, #64	@ 0x40
 80073c4:	2202      	movs	r2, #2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f002 faeb 	bl	80099a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073cc:	4b3e      	ldr	r3, [pc, #248]	@ (80074c8 <USBD_CDC_Init+0x1e4>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f003 020f 	and.w	r2, r3, #15
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	3324      	adds	r3, #36	@ 0x24
 80073e2:	2201      	movs	r2, #1
 80073e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073e6:	4b39      	ldr	r3, [pc, #228]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 80073e8:	7819      	ldrb	r1, [r3, #0]
 80073ea:	2340      	movs	r3, #64	@ 0x40
 80073ec:	2202      	movs	r2, #2
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f002 fad7 	bl	80099a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073f4:	4b35      	ldr	r3, [pc, #212]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800740c:	2201      	movs	r2, #1
 800740e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007410:	4b2f      	ldr	r3, [pc, #188]	@ (80074d0 <USBD_CDC_Init+0x1ec>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	3326      	adds	r3, #38	@ 0x26
 8007426:	2210      	movs	r2, #16
 8007428:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800742a:	4b29      	ldr	r3, [pc, #164]	@ (80074d0 <USBD_CDC_Init+0x1ec>)
 800742c:	7819      	ldrb	r1, [r3, #0]
 800742e:	2308      	movs	r3, #8
 8007430:	2203      	movs	r2, #3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f002 fab5 	bl	80099a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007438:	4b25      	ldr	r3, [pc, #148]	@ (80074d0 <USBD_CDC_Init+0x1ec>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3324      	adds	r3, #36	@ 0x24
 800744e:	2201      	movs	r2, #1
 8007450:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	33b0      	adds	r3, #176	@ 0xb0
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007488:	2302      	movs	r3, #2
 800748a:	e018      	b.n	80074be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7c1b      	ldrb	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007494:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 8007496:	7819      	ldrb	r1, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800749e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 fb6c 	bl	8009b80 <USBD_LL_PrepareReceive>
 80074a8:	e008      	b.n	80074bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074aa:	4b08      	ldr	r3, [pc, #32]	@ (80074cc <USBD_CDC_Init+0x1e8>)
 80074ac:	7819      	ldrb	r1, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 fb62 	bl	8009b80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000093 	.word	0x20000093
 80074cc:	20000094 	.word	0x20000094
 80074d0:	20000095 	.word	0x20000095

080074d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80074e0:	4b3a      	ldr	r3, [pc, #232]	@ (80075cc <USBD_CDC_DeInit+0xf8>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f002 fa81 	bl	80099ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80074ec:	4b37      	ldr	r3, [pc, #220]	@ (80075cc <USBD_CDC_DeInit+0xf8>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	3324      	adds	r3, #36	@ 0x24
 8007502:	2200      	movs	r2, #0
 8007504:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007506:	4b32      	ldr	r3, [pc, #200]	@ (80075d0 <USBD_CDC_DeInit+0xfc>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 fa6e 	bl	80099ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007512:	4b2f      	ldr	r3, [pc, #188]	@ (80075d0 <USBD_CDC_DeInit+0xfc>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 020f 	and.w	r2, r3, #15
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800752a:	2200      	movs	r2, #0
 800752c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800752e:	4b29      	ldr	r3, [pc, #164]	@ (80075d4 <USBD_CDC_DeInit+0x100>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f002 fa5a 	bl	80099ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800753a:	4b26      	ldr	r3, [pc, #152]	@ (80075d4 <USBD_CDC_DeInit+0x100>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 020f 	and.w	r2, r3, #15
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	3324      	adds	r3, #36	@ 0x24
 8007550:	2200      	movs	r2, #0
 8007552:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007554:	4b1f      	ldr	r3, [pc, #124]	@ (80075d4 <USBD_CDC_DeInit+0x100>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 020f 	and.w	r2, r3, #15
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3326      	adds	r3, #38	@ 0x26
 800756a:	2200      	movs	r2, #0
 800756c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	32b0      	adds	r2, #176	@ 0xb0
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01f      	beq.n	80075c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	33b0      	adds	r3, #176	@ 0xb0
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32b0      	adds	r2, #176	@ 0xb0
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f002 fb2e 	bl	8009c04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	32b0      	adds	r2, #176	@ 0xb0
 80075b2:	2100      	movs	r1, #0
 80075b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20000093 	.word	0x20000093
 80075d0:	20000094 	.word	0x20000094
 80075d4:	20000095 	.word	0x20000095

080075d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32b0      	adds	r2, #176	@ 0xb0
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	e0bf      	b.n	8007788 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007610:	2b00      	cmp	r3, #0
 8007612:	d050      	beq.n	80076b6 <USBD_CDC_Setup+0xde>
 8007614:	2b20      	cmp	r3, #32
 8007616:	f040 80af 	bne.w	8007778 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d03a      	beq.n	8007698 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b25b      	sxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	da1b      	bge.n	8007664 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	33b0      	adds	r3, #176	@ 0xb0
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007642:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	88d2      	ldrh	r2, [r2, #6]
 8007648:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	88db      	ldrh	r3, [r3, #6]
 800764e:	2b07      	cmp	r3, #7
 8007650:	bf28      	it	cs
 8007652:	2307      	movcs	r3, #7
 8007654:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	89fa      	ldrh	r2, [r7, #14]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fd87 	bl	8009170 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007662:	e090      	b.n	8007786 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	785a      	ldrb	r2, [r3, #1]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b3f      	cmp	r3, #63	@ 0x3f
 8007674:	d803      	bhi.n	800767e <USBD_CDC_Setup+0xa6>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	88db      	ldrh	r3, [r3, #6]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	e000      	b.n	8007680 <USBD_CDC_Setup+0xa8>
 800767e:	2240      	movs	r2, #64	@ 0x40
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007686:	6939      	ldr	r1, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800768e:	461a      	mov	r2, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fd99 	bl	80091c8 <USBD_CtlPrepareRx>
      break;
 8007696:	e076      	b.n	8007786 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	33b0      	adds	r3, #176	@ 0xb0
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	7850      	ldrb	r0, [r2, #1]
 80076ae:	2200      	movs	r2, #0
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	4798      	blx	r3
      break;
 80076b4:	e067      	b.n	8007786 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b0b      	cmp	r3, #11
 80076bc:	d851      	bhi.n	8007762 <USBD_CDC_Setup+0x18a>
 80076be:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <USBD_CDC_Setup+0xec>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076f5 	.word	0x080076f5
 80076c8:	08007771 	.word	0x08007771
 80076cc:	08007763 	.word	0x08007763
 80076d0:	08007763 	.word	0x08007763
 80076d4:	08007763 	.word	0x08007763
 80076d8:	08007763 	.word	0x08007763
 80076dc:	08007763 	.word	0x08007763
 80076e0:	08007763 	.word	0x08007763
 80076e4:	08007763 	.word	0x08007763
 80076e8:	08007763 	.word	0x08007763
 80076ec:	0800771f 	.word	0x0800771f
 80076f0:	08007749 	.word	0x08007749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d107      	bne.n	8007710 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007700:	f107 030a 	add.w	r3, r7, #10
 8007704:	2202      	movs	r2, #2
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fd31 	bl	8009170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800770e:	e032      	b.n	8007776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fcbb 	bl	800908e <USBD_CtlError>
            ret = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	75fb      	strb	r3, [r7, #23]
          break;
 800771c:	e02b      	b.n	8007776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d107      	bne.n	800773a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800772a:	f107 030d 	add.w	r3, r7, #13
 800772e:	2201      	movs	r2, #1
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fd1c 	bl	8009170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007738:	e01d      	b.n	8007776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fca6 	bl	800908e <USBD_CtlError>
            ret = USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	75fb      	strb	r3, [r7, #23]
          break;
 8007746:	e016      	b.n	8007776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d00f      	beq.n	8007774 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fc99 	bl	800908e <USBD_CtlError>
            ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007760:	e008      	b.n	8007774 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fc92 	bl	800908e <USBD_CtlError>
          ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	75fb      	strb	r3, [r7, #23]
          break;
 800776e:	e002      	b.n	8007776 <USBD_CDC_Setup+0x19e>
          break;
 8007770:	bf00      	nop
 8007772:	e008      	b.n	8007786 <USBD_CDC_Setup+0x1ae>
          break;
 8007774:	bf00      	nop
      }
      break;
 8007776:	e006      	b.n	8007786 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fc87 	bl	800908e <USBD_CtlError>
      ret = USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	bf00      	nop
  }

  return (uint8_t)ret;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32b0      	adds	r2, #176	@ 0xb0
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e065      	b.n	8007886 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	32b0      	adds	r2, #176	@ 0xb0
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3318      	adds	r3, #24
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d02f      	beq.n	8007844 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	f003 020f 	and.w	r2, r3, #15
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3318      	adds	r3, #24
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	f003 010f 	and.w	r1, r3, #15
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	460b      	mov	r3, r1
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	440b      	add	r3, r1
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4403      	add	r3, r0
 800780c:	3348      	adds	r3, #72	@ 0x48
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	fbb2 f1f3 	udiv	r1, r2, r3
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800781a:	2b00      	cmp	r3, #0
 800781c:	d112      	bne.n	8007844 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	3318      	adds	r3, #24
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007836:	78f9      	ldrb	r1, [r7, #3]
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 f97e 	bl	8009b3e <USBD_LL_Transmit>
 8007842:	e01f      	b.n	8007884 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	33b0      	adds	r3, #176	@ 0xb0
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d010      	beq.n	8007884 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	33b0      	adds	r3, #176	@ 0xb0
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	32b0      	adds	r2, #176	@ 0xb0
 80078a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32b0      	adds	r2, #176	@ 0xb0
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	e01a      	b.n	80078f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f002 f97c 	bl	8009bc2 <USBD_LL_GetRxDataSize>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	33b0      	adds	r3, #176	@ 0xb0
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80078f0:	4611      	mov	r1, r2
 80078f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	32b0      	adds	r2, #176	@ 0xb0
 8007910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007914:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	e024      	b.n	800796a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	33b0      	adds	r3, #176	@ 0xb0
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d019      	beq.n	8007968 <USBD_CDC_EP0_RxReady+0x6a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800793a:	2bff      	cmp	r3, #255	@ 0xff
 800793c:	d014      	beq.n	8007968 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	33b0      	adds	r3, #176	@ 0xb0
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007956:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800795e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	22ff      	movs	r2, #255	@ 0xff
 8007964:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800797c:	2182      	movs	r1, #130	@ 0x82
 800797e:	4818      	ldr	r0, [pc, #96]	@ (80079e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007980:	f000 fd4f 	bl	8008422 <USBD_GetEpDesc>
 8007984:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007986:	2101      	movs	r1, #1
 8007988:	4815      	ldr	r0, [pc, #84]	@ (80079e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800798a:	f000 fd4a 	bl	8008422 <USBD_GetEpDesc>
 800798e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007990:	2181      	movs	r1, #129	@ 0x81
 8007992:	4813      	ldr	r0, [pc, #76]	@ (80079e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007994:	f000 fd45 	bl	8008422 <USBD_GetEpDesc>
 8007998:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2210      	movs	r2, #16
 80079a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079b4:	711a      	strb	r2, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079c8:	711a      	strb	r2, [r3, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2243      	movs	r2, #67	@ 0x43
 80079d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079d4:	4b02      	ldr	r3, [pc, #8]	@ (80079e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000050 	.word	0x20000050

080079e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079ec:	2182      	movs	r1, #130	@ 0x82
 80079ee:	4818      	ldr	r0, [pc, #96]	@ (8007a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079f0:	f000 fd17 	bl	8008422 <USBD_GetEpDesc>
 80079f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079f6:	2101      	movs	r1, #1
 80079f8:	4815      	ldr	r0, [pc, #84]	@ (8007a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079fa:	f000 fd12 	bl	8008422 <USBD_GetEpDesc>
 80079fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a00:	2181      	movs	r1, #129	@ 0x81
 8007a02:	4813      	ldr	r0, [pc, #76]	@ (8007a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a04:	f000 fd0d 	bl	8008422 <USBD_GetEpDesc>
 8007a08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2210      	movs	r2, #16
 8007a14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d006      	beq.n	8007a2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	711a      	strb	r2, [r3, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f042 0202 	orr.w	r2, r2, #2
 8007a28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	711a      	strb	r2, [r3, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f042 0202 	orr.w	r2, r2, #2
 8007a3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2243      	movs	r2, #67	@ 0x43
 8007a42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a44:	4b02      	ldr	r3, [pc, #8]	@ (8007a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000050 	.word	0x20000050

08007a54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a5c:	2182      	movs	r1, #130	@ 0x82
 8007a5e:	4818      	ldr	r0, [pc, #96]	@ (8007ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a60:	f000 fcdf 	bl	8008422 <USBD_GetEpDesc>
 8007a64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a66:	2101      	movs	r1, #1
 8007a68:	4815      	ldr	r0, [pc, #84]	@ (8007ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a6a:	f000 fcda 	bl	8008422 <USBD_GetEpDesc>
 8007a6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a70:	2181      	movs	r1, #129	@ 0x81
 8007a72:	4813      	ldr	r0, [pc, #76]	@ (8007ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a74:	f000 fcd5 	bl	8008422 <USBD_GetEpDesc>
 8007a78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2210      	movs	r2, #16
 8007a84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d006      	beq.n	8007a9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a94:	711a      	strb	r2, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d006      	beq.n	8007aae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa8:	711a      	strb	r2, [r3, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2243      	movs	r2, #67	@ 0x43
 8007ab2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000050 	.word	0x20000050

08007ac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	220a      	movs	r2, #10
 8007ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ad2:	4b03      	ldr	r3, [pc, #12]	@ (8007ae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	2000000c 	.word	0x2000000c

08007ae4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e009      	b.n	8007b0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	33b0      	adds	r3, #176	@ 0xb0
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	32b0      	adds	r2, #176	@ 0xb0
 8007b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e008      	b.n	8007b50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	32b0      	adds	r2, #176	@ 0xb0
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e004      	b.n	8007b8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32b0      	adds	r2, #176	@ 0xb0
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	32b0      	adds	r2, #176	@ 0xb0
 8007bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e025      	b.n	8007c16 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11f      	bne.n	8007c14 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007bdc:	4b10      	ldr	r3, [pc, #64]	@ (8007c20 <USBD_CDC_TransmitPacket+0x88>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4403      	add	r3, r0
 8007bf6:	3318      	adds	r3, #24
 8007bf8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007bfa:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <USBD_CDC_TransmitPacket+0x88>)
 8007bfc:	7819      	ldrb	r1, [r3, #0]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 ff97 	bl	8009b3e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000093 	.word	0x20000093

08007c24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	@ 0xb0
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32b0      	adds	r2, #176	@ 0xb0
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e018      	b.n	8007c84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7c1b      	ldrb	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <USBD_CDC_ReceivePacket+0x68>)
 8007c5c:	7819      	ldrb	r1, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 ff89 	bl	8009b80 <USBD_LL_PrepareReceive>
 8007c6e:	e008      	b.n	8007c82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c70:	4b06      	ldr	r3, [pc, #24]	@ (8007c8c <USBD_CDC_ReceivePacket+0x68>)
 8007c72:	7819      	ldrb	r1, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c7a:	2340      	movs	r3, #64	@ 0x40
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 ff7f 	bl	8009b80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000094 	.word	0x20000094

08007c90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e01f      	b.n	8007ce8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	79fa      	ldrb	r2, [r7, #7]
 8007cda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f001 fdf9 	bl	80098d4 <USBD_LL_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e025      	b.n	8007d54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	32ae      	adds	r2, #174	@ 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00f      	beq.n	8007d44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	@ 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	f107 020e 	add.w	r2, r7, #14
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fe01 	bl	800996c <USBD_LL_Start>
 8007d6a:	4603      	mov	r3, r0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4611      	mov	r1, r2
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 f906 	bl	800901a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d01a      	beq.n	8007e68 <USBD_LL_SetupStage+0x72>
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d822      	bhi.n	8007e7c <USBD_LL_SetupStage+0x86>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <USBD_LL_SetupStage+0x4a>
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d00a      	beq.n	8007e54 <USBD_LL_SetupStage+0x5e>
 8007e3e:	e01d      	b.n	8007e7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fb5d 	bl	8008508 <USBD_StdDevReq>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]
      break;
 8007e52:	e020      	b.n	8007e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbc5 	bl	80085ec <USBD_StdItfReq>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	e016      	b.n	8007e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc27 	bl	80086c4 <USBD_StdEPReq>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7a:	e00c      	b.n	8007e96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fdce 	bl	8009a2c <USBD_LL_StallEP>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
      break;
 8007e94:	bf00      	nop
  }

  return ret;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d16e      	bne.n	8007f96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007ebe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	f040 8098 	bne.w	8007ffc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d913      	bls.n	8007f00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	1ad2      	subs	r2, r2, r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bf28      	it	cs
 8007ef2:	4613      	movcs	r3, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f001 f982 	bl	8009202 <USBD_CtlContinueRx>
 8007efe:	e07d      	b.n	8007ffc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d014      	beq.n	8007f38 <USBD_LL_DataOutStage+0x98>
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d81d      	bhi.n	8007f4e <USBD_LL_DataOutStage+0xae>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <USBD_LL_DataOutStage+0x7c>
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d003      	beq.n	8007f22 <USBD_LL_DataOutStage+0x82>
 8007f1a:	e018      	b.n	8007f4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	75bb      	strb	r3, [r7, #22]
            break;
 8007f20:	e018      	b.n	8007f54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fa5e 	bl	80083ee <USBD_CoreFindIF>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75bb      	strb	r3, [r7, #22]
            break;
 8007f36:	e00d      	b.n	8007f54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fa60 	bl	8008408 <USBD_CoreFindEP>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75bb      	strb	r3, [r7, #22]
            break;
 8007f4c:	e002      	b.n	8007f54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75bb      	strb	r3, [r7, #22]
            break;
 8007f52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f54:	7dbb      	ldrb	r3, [r7, #22]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d119      	bne.n	8007f8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d113      	bne.n	8007f8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f66:	7dba      	ldrb	r2, [r7, #22]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	32ae      	adds	r2, #174	@ 0xae
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f76:	7dba      	ldrb	r2, [r7, #22]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f7e:	7dba      	ldrb	r2, [r7, #22]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	32ae      	adds	r2, #174	@ 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f001 f948 	bl	8009224 <USBD_CtlSendStatus>
 8007f94:	e032      	b.n	8007ffc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fa31 	bl	8008408 <USBD_CoreFindEP>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
 8007fac:	2bff      	cmp	r3, #255	@ 0xff
 8007fae:	d025      	beq.n	8007ffc <USBD_LL_DataOutStage+0x15c>
 8007fb0:	7dbb      	ldrb	r3, [r7, #22]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d122      	bne.n	8007ffc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d117      	bne.n	8007ff2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007fc2:	7dba      	ldrb	r2, [r7, #22]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	32ae      	adds	r2, #174	@ 0xae
 8007fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00f      	beq.n	8007ff2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007fd2:	7dba      	ldrb	r2, [r7, #22]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007fda:	7dba      	ldrb	r2, [r7, #22]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	32ae      	adds	r2, #174	@ 0xae
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	7afa      	ldrb	r2, [r7, #11]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	e000      	b.n	8007ffe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b086      	sub	sp, #24
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	460b      	mov	r3, r1
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008014:	7afb      	ldrb	r3, [r7, #11]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d16f      	bne.n	80080fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3314      	adds	r3, #20
 800801e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008026:	2b02      	cmp	r3, #2
 8008028:	d15a      	bne.n	80080e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	429a      	cmp	r2, r3
 8008034:	d914      	bls.n	8008060 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	461a      	mov	r2, r3
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f001 f8aa 	bl	80091a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008052:	2300      	movs	r3, #0
 8008054:	2200      	movs	r2, #0
 8008056:	2100      	movs	r1, #0
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 fd91 	bl	8009b80 <USBD_LL_PrepareReceive>
 800805e:	e03f      	b.n	80080e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	d11c      	bne.n	80080a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d316      	bcc.n	80080a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008082:	429a      	cmp	r2, r3
 8008084:	d20f      	bcs.n	80080a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008086:	2200      	movs	r2, #0
 8008088:	2100      	movs	r1, #0
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f001 f88b 	bl	80091a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008098:	2300      	movs	r3, #0
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 fd6e 	bl	8009b80 <USBD_LL_PrepareReceive>
 80080a4:	e01c      	b.n	80080e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d10f      	bne.n	80080d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d2:	2180      	movs	r1, #128	@ 0x80
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f001 fca9 	bl	8009a2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f001 f8b5 	bl	800924a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d03a      	beq.n	8008160 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff fe42 	bl	8007d74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80080f8:	e032      	b.n	8008160 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f97f 	bl	8008408 <USBD_CoreFindEP>
 800810a:	4603      	mov	r3, r0
 800810c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	2bff      	cmp	r3, #255	@ 0xff
 8008112:	d025      	beq.n	8008160 <USBD_LL_DataInStage+0x15a>
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d122      	bne.n	8008160 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b03      	cmp	r3, #3
 8008124:	d11c      	bne.n	8008160 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008126:	7dfa      	ldrb	r2, [r7, #23]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	32ae      	adds	r2, #174	@ 0xae
 800812c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d014      	beq.n	8008160 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008136:	7dfa      	ldrb	r2, [r7, #23]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800813e:	7dfa      	ldrb	r2, [r7, #23]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	32ae      	adds	r2, #174	@ 0xae
 8008144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	7afa      	ldrb	r2, [r7, #11]
 800814c:	4611      	mov	r1, r2
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008156:	7dbb      	ldrb	r3, [r7, #22]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800815c:	7dbb      	ldrb	r3, [r7, #22]
 800815e:	e000      	b.n	8008162 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d014      	beq.n	80081d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00e      	beq.n	80081d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6852      	ldr	r2, [r2, #4]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	4611      	mov	r1, r2
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081cc:	2303      	movs	r3, #3
 80081ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081d0:	2340      	movs	r3, #64	@ 0x40
 80081d2:	2200      	movs	r2, #0
 80081d4:	2100      	movs	r1, #0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fbe3 	bl	80099a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2240      	movs	r2, #64	@ 0x40
 80081e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081ec:	2340      	movs	r3, #64	@ 0x40
 80081ee:	2200      	movs	r2, #0
 80081f0:	2180      	movs	r1, #128	@ 0x80
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 fbd5 	bl	80099a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2240      	movs	r2, #64	@ 0x40
 8008202:	621a      	str	r2, [r3, #32]

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800823c:	b2da      	uxtb	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2204      	movs	r2, #4
 8008248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b04      	cmp	r3, #4
 800826c:	d106      	bne.n	800827c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d110      	bne.n	80082c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	32ae      	adds	r2, #174	@ 0xae
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e01c      	b.n	8008326 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d115      	bne.n	8008324 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32ae      	adds	r2, #174	@ 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	@ 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	32ae      	adds	r2, #174	@ 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	e01c      	b.n	800838a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b03      	cmp	r3, #3
 800835a:	d115      	bne.n	8008388 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32ae      	adds	r2, #174	@ 0xae
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	@ 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	4611      	mov	r1, r2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00e      	beq.n	80083e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6852      	ldr	r2, [r2, #4]
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	4611      	mov	r1, r2
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008414:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b086      	sub	sp, #24
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	885b      	ldrh	r3, [r3, #2]
 800843e:	b29b      	uxth	r3, r3
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	4293      	cmp	r3, r2
 8008446:	d91f      	bls.n	8008488 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800844e:	e013      	b.n	8008478 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008450:	f107 030a 	add.w	r3, r7, #10
 8008454:	4619      	mov	r1, r3
 8008456:	6978      	ldr	r0, [r7, #20]
 8008458:	f000 f81b 	bl	8008492 <USBD_GetNextDesc>
 800845c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	2b05      	cmp	r3, #5
 8008464:	d108      	bne.n	8008478 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	789b      	ldrb	r3, [r3, #2]
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	429a      	cmp	r2, r3
 8008472:	d008      	beq.n	8008486 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	885b      	ldrh	r3, [r3, #2]
 800847c:	b29a      	uxth	r2, r3
 800847e:	897b      	ldrh	r3, [r7, #10]
 8008480:	429a      	cmp	r2, r3
 8008482:	d8e5      	bhi.n	8008450 <USBD_GetEpDesc+0x2e>
 8008484:	e000      	b.n	8008488 <USBD_GetEpDesc+0x66>
          break;
 8008486:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008488:	693b      	ldr	r3, [r7, #16]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	4413      	add	r3, r2
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084bc:	68fb      	ldr	r3, [r7, #12]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b087      	sub	sp, #28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	3301      	adds	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084e8:	8a3b      	ldrh	r3, [r7, #16]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b21a      	sxth	r2, r3
 80084ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084f8:	89fb      	ldrh	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800851e:	2b40      	cmp	r3, #64	@ 0x40
 8008520:	d005      	beq.n	800852e <USBD_StdDevReq+0x26>
 8008522:	2b40      	cmp	r3, #64	@ 0x40
 8008524:	d857      	bhi.n	80085d6 <USBD_StdDevReq+0xce>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00f      	beq.n	800854a <USBD_StdDevReq+0x42>
 800852a:	2b20      	cmp	r3, #32
 800852c:	d153      	bne.n	80085d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	32ae      	adds	r2, #174	@ 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]
      break;
 8008548:	e04a      	b.n	80085e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b09      	cmp	r3, #9
 8008550:	d83b      	bhi.n	80085ca <USBD_StdDevReq+0xc2>
 8008552:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <USBD_StdDevReq+0x50>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	080085ad 	.word	0x080085ad
 800855c:	080085c1 	.word	0x080085c1
 8008560:	080085cb 	.word	0x080085cb
 8008564:	080085b7 	.word	0x080085b7
 8008568:	080085cb 	.word	0x080085cb
 800856c:	0800858b 	.word	0x0800858b
 8008570:	08008581 	.word	0x08008581
 8008574:	080085cb 	.word	0x080085cb
 8008578:	080085a3 	.word	0x080085a3
 800857c:	08008595 	.word	0x08008595
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa3c 	bl	8008a00 <USBD_GetDescriptor>
          break;
 8008588:	e024      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fba1 	bl	8008cd4 <USBD_SetAddress>
          break;
 8008592:	e01f      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fbe0 	bl	8008d5c <USBD_SetConfig>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
          break;
 80085a0:	e018      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fc83 	bl	8008eb0 <USBD_GetConfig>
          break;
 80085aa:	e013      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fcb4 	bl	8008f1c <USBD_GetStatus>
          break;
 80085b4:	e00e      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fce3 	bl	8008f84 <USBD_SetFeature>
          break;
 80085be:	e009      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fd07 	bl	8008fd6 <USBD_ClrFeature>
          break;
 80085c8:	e004      	b.n	80085d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fd5e 	bl	800908e <USBD_CtlError>
          break;
 80085d2:	bf00      	nop
      }
      break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fd58 	bl	800908e <USBD_CtlError>
      break;
 80085de:	bf00      	nop
  }

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008602:	2b40      	cmp	r3, #64	@ 0x40
 8008604:	d005      	beq.n	8008612 <USBD_StdItfReq+0x26>
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d852      	bhi.n	80086b0 <USBD_StdItfReq+0xc4>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <USBD_StdItfReq+0x26>
 800860e:	2b20      	cmp	r3, #32
 8008610:	d14e      	bne.n	80086b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	2b02      	cmp	r3, #2
 800861e:	d840      	bhi.n	80086a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	889b      	ldrh	r3, [r3, #4]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d836      	bhi.n	8008698 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fedb 	bl	80083ee <USBD_CoreFindIF>
 8008638:	4603      	mov	r3, r0
 800863a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2bff      	cmp	r3, #255	@ 0xff
 8008640:	d01d      	beq.n	800867e <USBD_StdItfReq+0x92>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d11a      	bne.n	800867e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008648:	7bba      	ldrb	r2, [r7, #14]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	32ae      	adds	r2, #174	@ 0xae
 800864e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00f      	beq.n	8008678 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008658:	7bba      	ldrb	r2, [r7, #14]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008660:	7bba      	ldrb	r2, [r7, #14]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32ae      	adds	r2, #174	@ 0xae
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008676:	e004      	b.n	8008682 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800867c:	e001      	b.n	8008682 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	88db      	ldrh	r3, [r3, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d110      	bne.n	80086ac <USBD_StdItfReq+0xc0>
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10d      	bne.n	80086ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fdc7 	bl	8009224 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008696:	e009      	b.n	80086ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fcf7 	bl	800908e <USBD_CtlError>
          break;
 80086a0:	e004      	b.n	80086ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fcf2 	bl	800908e <USBD_CtlError>
          break;
 80086aa:	e000      	b.n	80086ae <USBD_StdItfReq+0xc2>
          break;
 80086ac:	bf00      	nop
      }
      break;
 80086ae:	e004      	b.n	80086ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fceb 	bl	800908e <USBD_CtlError>
      break;
 80086b8:	bf00      	nop
  }

  return ret;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	889b      	ldrh	r3, [r3, #4]
 80086d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086e0:	2b40      	cmp	r3, #64	@ 0x40
 80086e2:	d007      	beq.n	80086f4 <USBD_StdEPReq+0x30>
 80086e4:	2b40      	cmp	r3, #64	@ 0x40
 80086e6:	f200 817f 	bhi.w	80089e8 <USBD_StdEPReq+0x324>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02a      	beq.n	8008744 <USBD_StdEPReq+0x80>
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	f040 817a 	bne.w	80089e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff fe85 	bl	8008408 <USBD_CoreFindEP>
 80086fe:	4603      	mov	r3, r0
 8008700:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008702:	7b7b      	ldrb	r3, [r7, #13]
 8008704:	2bff      	cmp	r3, #255	@ 0xff
 8008706:	f000 8174 	beq.w	80089f2 <USBD_StdEPReq+0x32e>
 800870a:	7b7b      	ldrb	r3, [r7, #13]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 8170 	bne.w	80089f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008712:	7b7a      	ldrb	r2, [r7, #13]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800871a:	7b7a      	ldrb	r2, [r7, #13]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	32ae      	adds	r2, #174	@ 0xae
 8008720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 8163 	beq.w	80089f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800872c:	7b7a      	ldrb	r2, [r7, #13]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32ae      	adds	r2, #174	@ 0xae
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008742:	e156      	b.n	80089f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d008      	beq.n	800875e <USBD_StdEPReq+0x9a>
 800874c:	2b03      	cmp	r3, #3
 800874e:	f300 8145 	bgt.w	80089dc <USBD_StdEPReq+0x318>
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 809b 	beq.w	800888e <USBD_StdEPReq+0x1ca>
 8008758:	2b01      	cmp	r3, #1
 800875a:	d03c      	beq.n	80087d6 <USBD_StdEPReq+0x112>
 800875c:	e13e      	b.n	80089dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d002      	beq.n	8008770 <USBD_StdEPReq+0xac>
 800876a:	2b03      	cmp	r3, #3
 800876c:	d016      	beq.n	800879c <USBD_StdEPReq+0xd8>
 800876e:	e02c      	b.n	80087ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <USBD_StdEPReq+0xce>
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b80      	cmp	r3, #128	@ 0x80
 800877a:	d00a      	beq.n	8008792 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f953 	bl	8009a2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008786:	2180      	movs	r1, #128	@ 0x80
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 f94f 	bl	8009a2c <USBD_LL_StallEP>
 800878e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008790:	e020      	b.n	80087d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc7a 	bl	800908e <USBD_CtlError>
              break;
 800879a:	e01b      	b.n	80087d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	885b      	ldrh	r3, [r3, #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10e      	bne.n	80087c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <USBD_StdEPReq+0xfe>
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b80      	cmp	r3, #128	@ 0x80
 80087ae:	d008      	beq.n	80087c2 <USBD_StdEPReq+0xfe>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	88db      	ldrh	r3, [r3, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f935 	bl	8009a2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fd2e 	bl	8009224 <USBD_CtlSendStatus>

              break;
 80087c8:	e004      	b.n	80087d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc5e 	bl	800908e <USBD_CtlError>
              break;
 80087d2:	bf00      	nop
          }
          break;
 80087d4:	e107      	b.n	80089e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d002      	beq.n	80087e8 <USBD_StdEPReq+0x124>
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d016      	beq.n	8008814 <USBD_StdEPReq+0x150>
 80087e6:	e04b      	b.n	8008880 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00d      	beq.n	800880a <USBD_StdEPReq+0x146>
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b80      	cmp	r3, #128	@ 0x80
 80087f2:	d00a      	beq.n	800880a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f917 	bl	8009a2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087fe:	2180      	movs	r1, #128	@ 0x80
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 f913 	bl	8009a2c <USBD_LL_StallEP>
 8008806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008808:	e040      	b.n	800888c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fc3e 	bl	800908e <USBD_CtlError>
              break;
 8008812:	e03b      	b.n	800888c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	885b      	ldrh	r3, [r3, #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d136      	bne.n	800888a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f91d 	bl	8009a6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fcf7 	bl	8009224 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fde4 	bl	8008408 <USBD_CoreFindEP>
 8008840:	4603      	mov	r3, r0
 8008842:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008844:	7b7b      	ldrb	r3, [r7, #13]
 8008846:	2bff      	cmp	r3, #255	@ 0xff
 8008848:	d01f      	beq.n	800888a <USBD_StdEPReq+0x1c6>
 800884a:	7b7b      	ldrb	r3, [r7, #13]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d11c      	bne.n	800888a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008850:	7b7a      	ldrb	r2, [r7, #13]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008858:	7b7a      	ldrb	r2, [r7, #13]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32ae      	adds	r2, #174	@ 0xae
 800885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d010      	beq.n	800888a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008868:	7b7a      	ldrb	r2, [r7, #13]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	32ae      	adds	r2, #174	@ 0xae
 800886e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800887e:	e004      	b.n	800888a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc03 	bl	800908e <USBD_CtlError>
              break;
 8008888:	e000      	b.n	800888c <USBD_StdEPReq+0x1c8>
              break;
 800888a:	bf00      	nop
          }
          break;
 800888c:	e0ab      	b.n	80089e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d002      	beq.n	80088a0 <USBD_StdEPReq+0x1dc>
 800889a:	2b03      	cmp	r3, #3
 800889c:	d032      	beq.n	8008904 <USBD_StdEPReq+0x240>
 800889e:	e097      	b.n	80089d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <USBD_StdEPReq+0x1f2>
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b80      	cmp	r3, #128	@ 0x80
 80088aa:	d004      	beq.n	80088b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fbed 	bl	800908e <USBD_CtlError>
                break;
 80088b4:	e091      	b.n	80089da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da0b      	bge.n	80088d6 <USBD_StdEPReq+0x212>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	3310      	adds	r3, #16
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	3304      	adds	r3, #4
 80088d4:	e00b      	b.n	80088ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088dc:	4613      	mov	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	4413      	add	r3, r2
 80088ec:	3304      	adds	r3, #4
 80088ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2202      	movs	r2, #2
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc37 	bl	8009170 <USBD_CtlSendData>
              break;
 8008902:	e06a      	b.n	80089da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008908:	2b00      	cmp	r3, #0
 800890a:	da11      	bge.n	8008930 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	f003 020f 	and.w	r2, r3, #15
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	3324      	adds	r3, #36	@ 0x24
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d117      	bne.n	8008956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fbb0 	bl	800908e <USBD_CtlError>
                  break;
 800892e:	e054      	b.n	80089da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	f003 020f 	and.w	r2, r3, #15
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb9d 	bl	800908e <USBD_CtlError>
                  break;
 8008954:	e041      	b.n	80089da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	da0b      	bge.n	8008976 <USBD_StdEPReq+0x2b2>
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	3310      	adds	r3, #16
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	3304      	adds	r3, #4
 8008974:	e00b      	b.n	800898e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	3304      	adds	r3, #4
 800898e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <USBD_StdEPReq+0x2d8>
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b80      	cmp	r3, #128	@ 0x80
 800899a:	d103      	bne.n	80089a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e00e      	b.n	80089c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 f87d 	bl	8009aa8 <USBD_LL_IsStallEP>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2202      	movs	r2, #2
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fbd1 	bl	8009170 <USBD_CtlSendData>
              break;
 80089ce:	e004      	b.n	80089da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fb5b 	bl	800908e <USBD_CtlError>
              break;
 80089d8:	bf00      	nop
          }
          break;
 80089da:	e004      	b.n	80089e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fb55 	bl	800908e <USBD_CtlError>
          break;
 80089e4:	bf00      	nop
      }
      break;
 80089e6:	e005      	b.n	80089f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fb4f 	bl	800908e <USBD_CtlError>
      break;
 80089f0:	e000      	b.n	80089f4 <USBD_StdEPReq+0x330>
      break;
 80089f2:	bf00      	nop
  }

  return ret;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	2b06      	cmp	r3, #6
 8008a22:	f200 8128 	bhi.w	8008c76 <USBD_GetDescriptor+0x276>
 8008a26:	a201      	add	r2, pc, #4	@ (adr r2, 8008a2c <USBD_GetDescriptor+0x2c>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a49 	.word	0x08008a49
 8008a30:	08008a61 	.word	0x08008a61
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008c77 	.word	0x08008c77
 8008a3c:	08008c77 	.word	0x08008c77
 8008a40:	08008c17 	.word	0x08008c17
 8008a44:	08008c43 	.word	0x08008c43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
      break;
 8008a5e:	e112      	b.n	8008c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7c1b      	ldrb	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10d      	bne.n	8008a84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a70:	f107 0208 	add.w	r2, r7, #8
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	2202      	movs	r2, #2
 8008a80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a82:	e100      	b.n	8008c86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	f107 0208 	add.w	r2, r7, #8
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	701a      	strb	r2, [r3, #0]
      break;
 8008a9e:	e0f2      	b.n	8008c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	885b      	ldrh	r3, [r3, #2]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	f200 80ac 	bhi.w	8008c04 <USBD_GetDescriptor+0x204>
 8008aac:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <USBD_GetDescriptor+0xb4>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008acd 	.word	0x08008acd
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008b35 	.word	0x08008b35
 8008ac0:	08008b69 	.word	0x08008b69
 8008ac4:	08008b9d 	.word	0x08008b9d
 8008ac8:	08008bd1 	.word	0x08008bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	7c12      	ldrb	r2, [r2, #16]
 8008ae4:	f107 0108 	add.w	r1, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aee:	e091      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 facb 	bl	800908e <USBD_CtlError>
            err++;
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	3301      	adds	r3, #1
 8008afc:	72fb      	strb	r3, [r7, #11]
          break;
 8008afe:	e089      	b.n	8008c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00b      	beq.n	8008b24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	7c12      	ldrb	r2, [r2, #16]
 8008b18:	f107 0108 	add.w	r1, r7, #8
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b22:	e077      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fab1 	bl	800908e <USBD_CtlError>
            err++;
 8008b2c:	7afb      	ldrb	r3, [r7, #11]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	72fb      	strb	r3, [r7, #11]
          break;
 8008b32:	e06f      	b.n	8008c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7c12      	ldrb	r2, [r2, #16]
 8008b4c:	f107 0108 	add.w	r1, r7, #8
 8008b50:	4610      	mov	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b56:	e05d      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa97 	bl	800908e <USBD_CtlError>
            err++;
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	3301      	adds	r3, #1
 8008b64:	72fb      	strb	r3, [r7, #11]
          break;
 8008b66:	e055      	b.n	8008c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	7c12      	ldrb	r2, [r2, #16]
 8008b80:	f107 0108 	add.w	r1, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b8a:	e043      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa7d 	bl	800908e <USBD_CtlError>
            err++;
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	3301      	adds	r3, #1
 8008b98:	72fb      	strb	r3, [r7, #11]
          break;
 8008b9a:	e03b      	b.n	8008c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	7c12      	ldrb	r2, [r2, #16]
 8008bb4:	f107 0108 	add.w	r1, r7, #8
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
 8008bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bbe:	e029      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa63 	bl	800908e <USBD_CtlError>
            err++;
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bce:	e021      	b.n	8008c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	7c12      	ldrb	r2, [r2, #16]
 8008be8:	f107 0108 	add.w	r1, r7, #8
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf2:	e00f      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa49 	bl	800908e <USBD_CtlError>
            err++;
 8008bfc:	7afb      	ldrb	r3, [r7, #11]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	72fb      	strb	r3, [r7, #11]
          break;
 8008c02:	e007      	b.n	8008c14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa41 	bl	800908e <USBD_CtlError>
          err++;
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c12:	bf00      	nop
      }
      break;
 8008c14:	e037      	b.n	8008c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7c1b      	ldrb	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c26:	f107 0208 	add.w	r2, r7, #8
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	4798      	blx	r3
 8008c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c30:	e029      	b.n	8008c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa2a 	bl	800908e <USBD_CtlError>
        err++;
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c40:	e021      	b.n	8008c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7c1b      	ldrb	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10d      	bne.n	8008c66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c52:	f107 0208 	add.w	r2, r7, #8
 8008c56:	4610      	mov	r0, r2
 8008c58:	4798      	blx	r3
 8008c5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	2207      	movs	r2, #7
 8008c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c64:	e00f      	b.n	8008c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa10 	bl	800908e <USBD_CtlError>
        err++;
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	3301      	adds	r3, #1
 8008c72:	72fb      	strb	r3, [r7, #11]
      break;
 8008c74:	e007      	b.n	8008c86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa08 	bl	800908e <USBD_CtlError>
      err++;
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	3301      	adds	r3, #1
 8008c82:	72fb      	strb	r3, [r7, #11]
      break;
 8008c84:	bf00      	nop
  }

  if (err != 0U)
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d11e      	bne.n	8008cca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d016      	beq.n	8008cc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c94:	893b      	ldrh	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00e      	beq.n	8008cb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	88da      	ldrh	r2, [r3, #6]
 8008c9e:	893b      	ldrh	r3, [r7, #8]
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	bf28      	it	cs
 8008ca4:	4613      	movcs	r3, r2
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008caa:	893b      	ldrh	r3, [r7, #8]
 8008cac:	461a      	mov	r2, r3
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa5d 	bl	8009170 <USBD_CtlSendData>
 8008cb6:	e009      	b.n	8008ccc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f9e7 	bl	800908e <USBD_CtlError>
 8008cc0:	e004      	b.n	8008ccc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 faae 	bl	8009224 <USBD_CtlSendStatus>
 8008cc8:	e000      	b.n	8008ccc <USBD_GetDescriptor+0x2cc>
    return;
 8008cca:	bf00      	nop
  }
}
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop

08008cd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	889b      	ldrh	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d131      	bne.n	8008d4a <USBD_SetAddress+0x76>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d12d      	bne.n	8008d4a <USBD_SetAddress+0x76>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cf4:	d829      	bhi.n	8008d4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d104      	bne.n	8008d18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9bc 	bl	800908e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	e01d      	b.n	8008d54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7bfa      	ldrb	r2, [r7, #15]
 8008d1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 feeb 	bl	8009b00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa7a 	bl	8009224 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3e:	e009      	b.n	8008d54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d48:	e004      	b.n	8008d54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f99e 	bl	800908e <USBD_CtlError>
  }
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	4b4e      	ldr	r3, [pc, #312]	@ (8008eac <USBD_SetConfig+0x150>)
 8008d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d74:	4b4d      	ldr	r3, [pc, #308]	@ (8008eac <USBD_SetConfig+0x150>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d905      	bls.n	8008d88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f985 	bl	800908e <USBD_CtlError>
    return USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e08c      	b.n	8008ea2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d002      	beq.n	8008d9a <USBD_SetConfig+0x3e>
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d029      	beq.n	8008dec <USBD_SetConfig+0x90>
 8008d98:	e075      	b.n	8008e86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d9a:	4b44      	ldr	r3, [pc, #272]	@ (8008eac <USBD_SetConfig+0x150>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d020      	beq.n	8008de4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008da2:	4b42      	ldr	r3, [pc, #264]	@ (8008eac <USBD_SetConfig+0x150>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dac:	4b3f      	ldr	r3, [pc, #252]	@ (8008eac <USBD_SetConfig+0x150>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe ffe9 	bl	8007d8a <USBD_SetClassConfig>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d008      	beq.n	8008dd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f962 	bl	800908e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008dd2:	e065      	b.n	8008ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa25 	bl	8009224 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008de2:	e05d      	b.n	8008ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa1d 	bl	8009224 <USBD_CtlSendStatus>
      break;
 8008dea:	e059      	b.n	8008ea0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008dec:	4b2f      	ldr	r3, [pc, #188]	@ (8008eac <USBD_SetConfig+0x150>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d112      	bne.n	8008e1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008eac <USBD_SetConfig+0x150>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e06:	4b29      	ldr	r3, [pc, #164]	@ (8008eac <USBD_SetConfig+0x150>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7fe ffd8 	bl	8007dc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa06 	bl	8009224 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e18:	e042      	b.n	8008ea0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e1a:	4b24      	ldr	r3, [pc, #144]	@ (8008eac <USBD_SetConfig+0x150>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d02a      	beq.n	8008e7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7fe ffc6 	bl	8007dc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e36:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <USBD_SetConfig+0x150>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e40:	4b1a      	ldr	r3, [pc, #104]	@ (8008eac <USBD_SetConfig+0x150>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fe ff9f 	bl	8007d8a <USBD_SetClassConfig>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00f      	beq.n	8008e76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f918 	bl	800908e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fe ffab 	bl	8007dc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e74:	e014      	b.n	8008ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f9d4 	bl	8009224 <USBD_CtlSendStatus>
      break;
 8008e7c:	e010      	b.n	8008ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9d0 	bl	8009224 <USBD_CtlSendStatus>
      break;
 8008e84:	e00c      	b.n	8008ea0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f900 	bl	800908e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e8e:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <USBD_SetConfig+0x150>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fe ff94 	bl	8007dc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9e:	bf00      	nop
  }

  return ret;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000454 	.word	0x20000454

08008eb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d004      	beq.n	8008ecc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f8e2 	bl	800908e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eca:	e023      	b.n	8008f14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	dc02      	bgt.n	8008ede <USBD_GetConfig+0x2e>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc03      	bgt.n	8008ee4 <USBD_GetConfig+0x34>
 8008edc:	e015      	b.n	8008f0a <USBD_GetConfig+0x5a>
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d00b      	beq.n	8008efa <USBD_GetConfig+0x4a>
 8008ee2:	e012      	b.n	8008f0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3308      	adds	r3, #8
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f93c 	bl	8009170 <USBD_CtlSendData>
        break;
 8008ef8:	e00c      	b.n	8008f14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3304      	adds	r3, #4
 8008efe:	2201      	movs	r2, #1
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f934 	bl	8009170 <USBD_CtlSendData>
        break;
 8008f08:	e004      	b.n	8008f14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8be 	bl	800908e <USBD_CtlError>
        break;
 8008f12:	bf00      	nop
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d81e      	bhi.n	8008f72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d004      	beq.n	8008f46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f8a5 	bl	800908e <USBD_CtlError>
        break;
 8008f44:	e01a      	b.n	8008f7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f043 0202 	orr.w	r2, r3, #2
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	330c      	adds	r3, #12
 8008f66:	2202      	movs	r2, #2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f900 	bl	8009170 <USBD_CtlSendData>
      break;
 8008f70:	e004      	b.n	8008f7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f88a 	bl	800908e <USBD_CtlError>
      break;
 8008f7a:	bf00      	nop
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d107      	bne.n	8008fa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f940 	bl	8009224 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008fa4:	e013      	b.n	8008fce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d10b      	bne.n	8008fc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	889b      	ldrh	r3, [r3, #4]
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f930 	bl	8009224 <USBD_CtlSendStatus>
}
 8008fc4:	e003      	b.n	8008fce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f860 	bl	800908e <USBD_CtlError>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d80b      	bhi.n	8009006 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d10c      	bne.n	8009010 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f910 	bl	8009224 <USBD_CtlSendStatus>
      }
      break;
 8009004:	e004      	b.n	8009010 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f840 	bl	800908e <USBD_CtlError>
      break;
 800900e:	e000      	b.n	8009012 <USBD_ClrFeature+0x3c>
      break;
 8009010:	bf00      	nop
  }
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	781a      	ldrb	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff fa40 	bl	80084ca <SWAPBYTE>
 800904a:	4603      	mov	r3, r0
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fa33 	bl	80084ca <SWAPBYTE>
 8009064:	4603      	mov	r3, r0
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7ff fa26 	bl	80084ca <SWAPBYTE>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	80da      	strh	r2, [r3, #6]
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009098:	2180      	movs	r1, #128	@ 0x80
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fcc6 	bl	8009a2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090a0:	2100      	movs	r1, #0
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fcc2 	bl	8009a2c <USBD_LL_StallEP>
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d036      	beq.n	8009134 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f000 f836 	bl	800913c <USBD_GetLen>
 80090d0:	4603      	mov	r3, r0
 80090d2:	3301      	adds	r3, #1
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4413      	add	r3, r2
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	3301      	adds	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	4413      	add	r3, r2
 80090f6:	2203      	movs	r2, #3
 80090f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	3301      	adds	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009100:	e013      	b.n	800912a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	4413      	add	r3, r2
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	7812      	ldrb	r2, [r2, #0]
 800910c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
    idx++;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	3301      	adds	r3, #1
 8009118:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	4413      	add	r3, r2
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
    idx++;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	3301      	adds	r3, #1
 8009128:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e7      	bne.n	8009102 <USBD_GetString+0x52>
 8009132:	e000      	b.n	8009136 <USBD_GetString+0x86>
    return;
 8009134:	bf00      	nop
  }
}
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800914c:	e005      	b.n	800915a <USBD_GetLen+0x1e>
  {
    len++;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	3301      	adds	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3301      	adds	r3, #1
 8009158:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f5      	bne.n	800914e <USBD_GetLen+0x12>
  }

  return len;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2202      	movs	r2, #2
 8009180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	2100      	movs	r1, #0
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 fcd1 	bl	8009b3e <USBD_LL_Transmit>

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	2100      	movs	r1, #0
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fcc0 	bl	8009b3e <USBD_LL_Transmit>

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2203      	movs	r2, #3
 80091d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fcc4 	bl	8009b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	2100      	movs	r1, #0
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fcb3 	bl	8009b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2204      	movs	r2, #4
 8009230:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009234:	2300      	movs	r3, #0
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc7f 	bl	8009b3e <USBD_LL_Transmit>

  return USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2205      	movs	r2, #5
 8009256:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800925a:	2300      	movs	r3, #0
 800925c:	2200      	movs	r2, #0
 800925e:	2100      	movs	r1, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fc8d 	bl	8009b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009274:	2200      	movs	r2, #0
 8009276:	4912      	ldr	r1, [pc, #72]	@ (80092c0 <MX_USB_DEVICE_Init+0x50>)
 8009278:	4812      	ldr	r0, [pc, #72]	@ (80092c4 <MX_USB_DEVICE_Init+0x54>)
 800927a:	f7fe fd09 	bl	8007c90 <USBD_Init>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009284:	f7f8 fa5a 	bl	800173c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009288:	490f      	ldr	r1, [pc, #60]	@ (80092c8 <MX_USB_DEVICE_Init+0x58>)
 800928a:	480e      	ldr	r0, [pc, #56]	@ (80092c4 <MX_USB_DEVICE_Init+0x54>)
 800928c:	f7fe fd30 	bl	8007cf0 <USBD_RegisterClass>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009296:	f7f8 fa51 	bl	800173c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800929a:	490c      	ldr	r1, [pc, #48]	@ (80092cc <MX_USB_DEVICE_Init+0x5c>)
 800929c:	4809      	ldr	r0, [pc, #36]	@ (80092c4 <MX_USB_DEVICE_Init+0x54>)
 800929e:	f7fe fc21 	bl	8007ae4 <USBD_CDC_RegisterInterface>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092a8:	f7f8 fa48 	bl	800173c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092ac:	4805      	ldr	r0, [pc, #20]	@ (80092c4 <MX_USB_DEVICE_Init+0x54>)
 80092ae:	f7fe fd55 	bl	8007d5c <USBD_Start>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092b8:	f7f8 fa40 	bl	800173c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092bc:	bf00      	nop
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	200000ac 	.word	0x200000ac
 80092c4:	20000458 	.word	0x20000458
 80092c8:	20000018 	.word	0x20000018
 80092cc:	20000098 	.word	0x20000098

080092d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092d4:	2200      	movs	r2, #0
 80092d6:	4905      	ldr	r1, [pc, #20]	@ (80092ec <CDC_Init_FS+0x1c>)
 80092d8:	4805      	ldr	r0, [pc, #20]	@ (80092f0 <CDC_Init_FS+0x20>)
 80092da:	f7fe fc1d 	bl	8007b18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092de:	4905      	ldr	r1, [pc, #20]	@ (80092f4 <CDC_Init_FS+0x24>)
 80092e0:	4803      	ldr	r0, [pc, #12]	@ (80092f0 <CDC_Init_FS+0x20>)
 80092e2:	f7fe fc3b 	bl	8007b5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000f34 	.word	0x20000f34
 80092f0:	20000458 	.word	0x20000458
 80092f4:	20000734 	.word	0x20000734

080092f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092fe:	4618      	mov	r0, r3
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	6039      	str	r1, [r7, #0]
 8009312:	71fb      	strb	r3, [r7, #7]
 8009314:	4613      	mov	r3, r2
 8009316:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b23      	cmp	r3, #35	@ 0x23
 800931c:	d84a      	bhi.n	80093b4 <CDC_Control_FS+0xac>
 800931e:	a201      	add	r2, pc, #4	@ (adr r2, 8009324 <CDC_Control_FS+0x1c>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	080093b5 	.word	0x080093b5
 8009328:	080093b5 	.word	0x080093b5
 800932c:	080093b5 	.word	0x080093b5
 8009330:	080093b5 	.word	0x080093b5
 8009334:	080093b5 	.word	0x080093b5
 8009338:	080093b5 	.word	0x080093b5
 800933c:	080093b5 	.word	0x080093b5
 8009340:	080093b5 	.word	0x080093b5
 8009344:	080093b5 	.word	0x080093b5
 8009348:	080093b5 	.word	0x080093b5
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	080093b5 	.word	0x080093b5
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093b5 	.word	0x080093b5
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093b5 	.word	0x080093b5
 800936c:	080093b5 	.word	0x080093b5
 8009370:	080093b5 	.word	0x080093b5
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093b5 	.word	0x080093b5
 800937c:	080093b5 	.word	0x080093b5
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080093b5 	.word	0x080093b5
 8009388:	080093b5 	.word	0x080093b5
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080093b5 	.word	0x080093b5
 8009398:	080093b5 	.word	0x080093b5
 800939c:	080093b5 	.word	0x080093b5
 80093a0:	080093b5 	.word	0x080093b5
 80093a4:	080093b5 	.word	0x080093b5
 80093a8:	080093b5 	.word	0x080093b5
 80093ac:	080093b5 	.word	0x080093b5
 80093b0:	080093b5 	.word	0x080093b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093b4:	bf00      	nop
  }

  return (USBD_OK);
 80093b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4805      	ldr	r0, [pc, #20]	@ (80093e8 <CDC_Receive_FS+0x24>)
 80093d2:	f7fe fbc3 	bl	8007b5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093d6:	4804      	ldr	r0, [pc, #16]	@ (80093e8 <CDC_Receive_FS+0x24>)
 80093d8:	f7fe fc24 	bl	8007c24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000458 	.word	0x20000458

080093ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <CDC_Transmit_FS+0x48>)
 80093fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009402:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800940e:	2301      	movs	r3, #1
 8009410:	e00b      	b.n	800942a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	461a      	mov	r2, r3
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4806      	ldr	r0, [pc, #24]	@ (8009434 <CDC_Transmit_FS+0x48>)
 800941a:	f7fe fb7d 	bl	8007b18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800941e:	4805      	ldr	r0, [pc, #20]	@ (8009434 <CDC_Transmit_FS+0x48>)
 8009420:	f7fe fbba 	bl	8007b98 <USBD_CDC_TransmitPacket>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000458 	.word	0x20000458

08009438 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800944a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800944e:	4618      	mov	r0, r3
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2212      	movs	r2, #18
 800946c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800946e:	4b03      	ldr	r3, [pc, #12]	@ (800947c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	200000c8 	.word	0x200000c8

08009480 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2204      	movs	r2, #4
 8009490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009492:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	200000dc 	.word	0x200000dc

080094a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4907      	ldr	r1, [pc, #28]	@ (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ba:	4808      	ldr	r0, [pc, #32]	@ (80094dc <USBD_FS_ProductStrDescriptor+0x38>)
 80094bc:	f7ff fdf8 	bl	80090b0 <USBD_GetString>
 80094c0:	e004      	b.n	80094cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	4904      	ldr	r1, [pc, #16]	@ (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094c6:	4805      	ldr	r0, [pc, #20]	@ (80094dc <USBD_FS_ProductStrDescriptor+0x38>)
 80094c8:	f7ff fdf2 	bl	80090b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094cc:	4b02      	ldr	r3, [pc, #8]	@ (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20001734 	.word	0x20001734
 80094dc:	0800f258 	.word	0x0800f258

080094e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	4904      	ldr	r1, [pc, #16]	@ (8009500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094f0:	4804      	ldr	r0, [pc, #16]	@ (8009504 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094f2:	f7ff fddd 	bl	80090b0 <USBD_GetString>
  return USBD_StrDesc;
 80094f6:	4b02      	ldr	r3, [pc, #8]	@ (8009500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20001734 	.word	0x20001734
 8009504:	0800f270 	.word	0x0800f270

08009508 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	221a      	movs	r2, #26
 8009518:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800951a:	f000 f843 	bl	80095a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800951e:	4b02      	ldr	r3, [pc, #8]	@ (8009528 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200000e0 	.word	0x200000e0

0800952c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	@ (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	@ (8009564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009544:	f7ff fdb4 	bl	80090b0 <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	@ (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	@ (8009564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009550:	f7ff fdae 	bl	80090b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	@ (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001734 	.word	0x20001734
 8009564:	0800f284 	.word	0x0800f284

08009568 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4907      	ldr	r1, [pc, #28]	@ (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800957e:	4808      	ldr	r0, [pc, #32]	@ (80095a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009580:	f7ff fd96 	bl	80090b0 <USBD_GetString>
 8009584:	e004      	b.n	8009590 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4904      	ldr	r1, [pc, #16]	@ (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800958a:	4805      	ldr	r0, [pc, #20]	@ (80095a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800958c:	f7ff fd90 	bl	80090b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009590:	4b02      	ldr	r3, [pc, #8]	@ (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20001734 	.word	0x20001734
 80095a0:	0800f290 	.word	0x0800f290

080095a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4413      	add	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d009      	beq.n	80095cc <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095b8:	2208      	movs	r2, #8
 80095ba:	4906      	ldr	r1, [pc, #24]	@ (80095d4 <Get_SerialNum+0x30>)
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f80d 	bl	80095dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095c2:	2204      	movs	r2, #4
 80095c4:	4904      	ldr	r1, [pc, #16]	@ (80095d8 <Get_SerialNum+0x34>)
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f808 	bl	80095dc <IntToUnicode>
  }
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200000e2 	.word	0x200000e2
 80095d8:	200000f2 	.word	0x200000f2

080095dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]
 80095f2:	e027      	b.n	8009644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	0f1b      	lsrs	r3, r3, #28
 80095f8:	2b09      	cmp	r3, #9
 80095fa:	d80b      	bhi.n	8009614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0f1b      	lsrs	r3, r3, #28
 8009600:	b2da      	uxtb	r2, r3
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	4619      	mov	r1, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	440b      	add	r3, r1
 800960c:	3230      	adds	r2, #48	@ 0x30
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]
 8009612:	e00a      	b.n	800962a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0f1b      	lsrs	r3, r3, #28
 8009618:	b2da      	uxtb	r2, r3
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4619      	mov	r1, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	440b      	add	r3, r1
 8009624:	3237      	adds	r2, #55	@ 0x37
 8009626:	b2d2      	uxtb	r2, r2
 8009628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	3301      	adds	r3, #1
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	3301      	adds	r3, #1
 8009642:	75fb      	strb	r3, [r7, #23]
 8009644:	7dfa      	ldrb	r2, [r7, #23]
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	429a      	cmp	r2, r3
 800964a:	d3d3      	bcc.n	80095f4 <IntToUnicode+0x18>
  }
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	609a      	str	r2, [r3, #8]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800967c:	d13a      	bne.n	80096f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	4b1e      	ldr	r3, [pc, #120]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 8009684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009686:	4a1d      	ldr	r2, [pc, #116]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	6313      	str	r3, [r2, #48]	@ 0x30
 800968e:	4b1b      	ldr	r3, [pc, #108]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 8009690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800969a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800969e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a0:	2302      	movs	r3, #2
 80096a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096a8:	2303      	movs	r3, #3
 80096aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096ac:	230a      	movs	r3, #10
 80096ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b0:	f107 0314 	add.w	r3, r7, #20
 80096b4:	4619      	mov	r1, r3
 80096b6:	4812      	ldr	r0, [pc, #72]	@ (8009700 <HAL_PCD_MspInit+0xa4>)
 80096b8:	f7f9 f946 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096bc:	4b0f      	ldr	r3, [pc, #60]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 80096be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c0:	4a0e      	ldr	r2, [pc, #56]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 80096c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	4b0b      	ldr	r3, [pc, #44]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 80096ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d0:	4a0a      	ldr	r2, [pc, #40]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 80096d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80096d8:	4b08      	ldr	r3, [pc, #32]	@ (80096fc <HAL_PCD_MspInit+0xa0>)
 80096da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	2043      	movs	r0, #67	@ 0x43
 80096ea:	f7f9 f8f6 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096ee:	2043      	movs	r0, #67	@ 0x43
 80096f0:	f7f9 f90f 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096f4:	bf00      	nop
 80096f6:	3728      	adds	r7, #40	@ 0x28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40023800 	.word	0x40023800
 8009700:	40020000 	.word	0x40020000

08009704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe fb6b 	bl	8007df6 <USBD_LL_SetupStage>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	4619      	mov	r1, r3
 8009752:	f7fe fba5 	bl	8007ea0 <USBD_LL_DataOutStage>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	334c      	adds	r3, #76	@ 0x4c
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4619      	mov	r1, r3
 8009786:	f7fe fc3e 	bl	8008006 <USBD_LL_DataInStage>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fd72 	bl	800828a <USBD_LL_SOF>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097b6:	2301      	movs	r3, #1
 80097b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d001      	beq.n	80097c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097c2:	f7f7 ffbb 	bl	800173c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80097cc:	7bfa      	ldrb	r2, [r7, #15]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fd1c 	bl	800820e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe fcc4 	bl	800816a <USBD_LL_Reset>
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fd17 	bl	800822e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009820:	4b04      	ldr	r3, [pc, #16]	@ (8009834 <HAL_PCD_SuspendCallback+0x48>)
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	4a03      	ldr	r2, [pc, #12]	@ (8009834 <HAL_PCD_SuspendCallback+0x48>)
 8009826:	f043 0306 	orr.w	r3, r3, #6
 800982a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe fd07 	bl	800825a <USBD_LL_Resume>
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009866:	78fa      	ldrb	r2, [r7, #3]
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fd5f 	bl	800832e <USBD_LL_IsoOUTIncomplete>
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fd1b 	bl	80082ca <USBD_LL_IsoINIncomplete>
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fd71 	bl	8008392 <USBD_LL_DevConnected>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fd6e 	bl	80083a8 <USBD_LL_DevDisconnected>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d13c      	bne.n	800995e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80098e4:	4a20      	ldr	r2, [pc, #128]	@ (8009968 <USBD_LL_Init+0x94>)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <USBD_LL_Init+0x94>)
 80098f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009968 <USBD_LL_Init+0x94>)
 80098f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80098fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80098fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <USBD_LL_Init+0x94>)
 80098fe:	2204      	movs	r2, #4
 8009900:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009902:	4b19      	ldr	r3, [pc, #100]	@ (8009968 <USBD_LL_Init+0x94>)
 8009904:	2202      	movs	r2, #2
 8009906:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009908:	4b17      	ldr	r3, [pc, #92]	@ (8009968 <USBD_LL_Init+0x94>)
 800990a:	2200      	movs	r2, #0
 800990c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800990e:	4b16      	ldr	r3, [pc, #88]	@ (8009968 <USBD_LL_Init+0x94>)
 8009910:	2202      	movs	r2, #2
 8009912:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009914:	4b14      	ldr	r3, [pc, #80]	@ (8009968 <USBD_LL_Init+0x94>)
 8009916:	2200      	movs	r2, #0
 8009918:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800991a:	4b13      	ldr	r3, [pc, #76]	@ (8009968 <USBD_LL_Init+0x94>)
 800991c:	2200      	movs	r2, #0
 800991e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009920:	4b11      	ldr	r3, [pc, #68]	@ (8009968 <USBD_LL_Init+0x94>)
 8009922:	2200      	movs	r2, #0
 8009924:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009926:	4b10      	ldr	r3, [pc, #64]	@ (8009968 <USBD_LL_Init+0x94>)
 8009928:	2200      	movs	r2, #0
 800992a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800992c:	4b0e      	ldr	r3, [pc, #56]	@ (8009968 <USBD_LL_Init+0x94>)
 800992e:	2200      	movs	r2, #0
 8009930:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009932:	480d      	ldr	r0, [pc, #52]	@ (8009968 <USBD_LL_Init+0x94>)
 8009934:	f7f9 fdf1 	bl	800351a <HAL_PCD_Init>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800993e:	f7f7 fefd 	bl	800173c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009942:	2180      	movs	r1, #128	@ 0x80
 8009944:	4808      	ldr	r0, [pc, #32]	@ (8009968 <USBD_LL_Init+0x94>)
 8009946:	f7fb f848 	bl	80049da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800994a:	2240      	movs	r2, #64	@ 0x40
 800994c:	2100      	movs	r1, #0
 800994e:	4806      	ldr	r0, [pc, #24]	@ (8009968 <USBD_LL_Init+0x94>)
 8009950:	f7fa fffc 	bl	800494c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009954:	2280      	movs	r2, #128	@ 0x80
 8009956:	2101      	movs	r1, #1
 8009958:	4803      	ldr	r0, [pc, #12]	@ (8009968 <USBD_LL_Init+0x94>)
 800995a:	f7fa fff7 	bl	800494c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20001934 	.word	0x20001934

0800996c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009982:	4618      	mov	r0, r3
 8009984:	f7f9 fee6 	bl	8003754 <HAL_PCD_Start>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4618      	mov	r0, r3
 8009990:	f000 f942 	bl	8009c18 <USBD_Get_USB_Status>
 8009994:	4603      	mov	r3, r0
 8009996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009998:	7bbb      	ldrb	r3, [r7, #14]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	461a      	mov	r2, r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	70fb      	strb	r3, [r7, #3]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70bb      	strb	r3, [r7, #2]
 80099b8:	4613      	mov	r3, r2
 80099ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099ca:	78bb      	ldrb	r3, [r7, #2]
 80099cc:	883a      	ldrh	r2, [r7, #0]
 80099ce:	78f9      	ldrb	r1, [r7, #3]
 80099d0:	f7fa fbb7 	bl	8004142 <HAL_PCD_EP_Open>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f91c 	bl	8009c18 <USBD_Get_USB_Status>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fa fc00 	bl	8004212 <HAL_PCD_EP_Close>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 f8fd 	bl	8009c18 <USBD_Get_USB_Status>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fa fcd8 	bl	8004400 <HAL_PCD_EP_SetStall>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f8de 	bl	8009c18 <USBD_Get_USB_Status>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fa fd1d 	bl	80044c8 <HAL_PCD_EP_ClrStall>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f8bf 	bl	8009c18 <USBD_Get_USB_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da0b      	bge.n	8009adc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aca:	68f9      	ldr	r1, [r7, #12]
 8009acc:	4613      	mov	r3, r2
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	440b      	add	r3, r1
 8009ad6:	333e      	adds	r3, #62	@ 0x3e
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	e00b      	b.n	8009af4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	440b      	add	r3, r1
 8009aee:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8009af2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b1a:	78fa      	ldrb	r2, [r7, #3]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa faea 	bl	80040f8 <HAL_PCD_SetAddress>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f874 	bl	8009c18 <USBD_Get_USB_Status>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b5c:	7af9      	ldrb	r1, [r7, #11]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	f7fa fc03 	bl	800436c <HAL_PCD_EP_Transmit>
 8009b66:	4603      	mov	r3, r0
 8009b68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f853 	bl	8009c18 <USBD_Get_USB_Status>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b76:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b9e:	7af9      	ldrb	r1, [r7, #11]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	f7fa fb7f 	bl	80042a6 <HAL_PCD_EP_Receive>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f832 	bl	8009c18 <USBD_Get_USB_Status>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fa fbaf 	bl	800433c <HAL_PCD_EP_GetRxCount>
 8009bde:	4603      	mov	r3, r0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bf0:	4b03      	ldr	r3, [pc, #12]	@ (8009c00 <USBD_static_malloc+0x18>)
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20001e40 	.word	0x20001e40

08009c04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d817      	bhi.n	8009c5c <USBD_Get_USB_Status+0x44>
 8009c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <USBD_Get_USB_Status+0x1c>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c45 	.word	0x08009c45
 8009c38:	08009c4b 	.word	0x08009c4b
 8009c3c:	08009c51 	.word	0x08009c51
 8009c40:	08009c57 	.word	0x08009c57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
    break;
 8009c48:	e00b      	b.n	8009c62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4e:	e008      	b.n	8009c62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
    break;
 8009c54:	e005      	b.n	8009c62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	73fb      	strb	r3, [r7, #15]
    break;
 8009c5a:	e002      	b.n	8009c62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c60:	bf00      	nop
  }
  return usb_status;
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <__cvt>:
 8009c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	ec57 6b10 	vmov	r6, r7, d0
 8009c78:	2f00      	cmp	r7, #0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	463b      	mov	r3, r7
 8009c80:	bfbb      	ittet	lt
 8009c82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c86:	461f      	movlt	r7, r3
 8009c88:	2300      	movge	r3, #0
 8009c8a:	232d      	movlt	r3, #45	@ 0x2d
 8009c8c:	700b      	strb	r3, [r1, #0]
 8009c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c94:	4691      	mov	r9, r2
 8009c96:	f023 0820 	bic.w	r8, r3, #32
 8009c9a:	bfbc      	itt	lt
 8009c9c:	4632      	movlt	r2, r6
 8009c9e:	4616      	movlt	r6, r2
 8009ca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ca4:	d005      	beq.n	8009cb2 <__cvt+0x42>
 8009ca6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009caa:	d100      	bne.n	8009cae <__cvt+0x3e>
 8009cac:	3401      	adds	r4, #1
 8009cae:	2102      	movs	r1, #2
 8009cb0:	e000      	b.n	8009cb4 <__cvt+0x44>
 8009cb2:	2103      	movs	r1, #3
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	ab02      	add	r3, sp, #8
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	ec47 6b10 	vmov	d0, r6, r7
 8009cc0:	4653      	mov	r3, sl
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	f001 f874 	bl	800adb0 <_dtoa_r>
 8009cc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ccc:	4605      	mov	r5, r0
 8009cce:	d119      	bne.n	8009d04 <__cvt+0x94>
 8009cd0:	f019 0f01 	tst.w	r9, #1
 8009cd4:	d00e      	beq.n	8009cf4 <__cvt+0x84>
 8009cd6:	eb00 0904 	add.w	r9, r0, r4
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ce6:	b108      	cbz	r0, 8009cec <__cvt+0x7c>
 8009ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cec:	2230      	movs	r2, #48	@ 0x30
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	454b      	cmp	r3, r9
 8009cf2:	d31e      	bcc.n	8009d32 <__cvt+0xc2>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf8:	1b5b      	subs	r3, r3, r5
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	b004      	add	sp, #16
 8009d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d08:	eb00 0904 	add.w	r9, r0, r4
 8009d0c:	d1e5      	bne.n	8009cda <__cvt+0x6a>
 8009d0e:	7803      	ldrb	r3, [r0, #0]
 8009d10:	2b30      	cmp	r3, #48	@ 0x30
 8009d12:	d10a      	bne.n	8009d2a <__cvt+0xba>
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d20:	b918      	cbnz	r0, 8009d2a <__cvt+0xba>
 8009d22:	f1c4 0401 	rsb	r4, r4, #1
 8009d26:	f8ca 4000 	str.w	r4, [sl]
 8009d2a:	f8da 3000 	ldr.w	r3, [sl]
 8009d2e:	4499      	add	r9, r3
 8009d30:	e7d3      	b.n	8009cda <__cvt+0x6a>
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e7d9      	b.n	8009cee <__cvt+0x7e>

08009d3a <__exponent>:
 8009d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	bfba      	itte	lt
 8009d40:	4249      	neglt	r1, r1
 8009d42:	232d      	movlt	r3, #45	@ 0x2d
 8009d44:	232b      	movge	r3, #43	@ 0x2b
 8009d46:	2909      	cmp	r1, #9
 8009d48:	7002      	strb	r2, [r0, #0]
 8009d4a:	7043      	strb	r3, [r0, #1]
 8009d4c:	dd29      	ble.n	8009da2 <__exponent+0x68>
 8009d4e:	f10d 0307 	add.w	r3, sp, #7
 8009d52:	461d      	mov	r5, r3
 8009d54:	270a      	movs	r7, #10
 8009d56:	461a      	mov	r2, r3
 8009d58:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d5c:	fb07 1416 	mls	r4, r7, r6, r1
 8009d60:	3430      	adds	r4, #48	@ 0x30
 8009d62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d66:	460c      	mov	r4, r1
 8009d68:	2c63      	cmp	r4, #99	@ 0x63
 8009d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d6e:	4631      	mov	r1, r6
 8009d70:	dcf1      	bgt.n	8009d56 <__exponent+0x1c>
 8009d72:	3130      	adds	r1, #48	@ 0x30
 8009d74:	1e94      	subs	r4, r2, #2
 8009d76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d7a:	1c41      	adds	r1, r0, #1
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	42ab      	cmp	r3, r5
 8009d80:	d30a      	bcc.n	8009d98 <__exponent+0x5e>
 8009d82:	f10d 0309 	add.w	r3, sp, #9
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	42ac      	cmp	r4, r5
 8009d8a:	bf88      	it	hi
 8009d8c:	2300      	movhi	r3, #0
 8009d8e:	3302      	adds	r3, #2
 8009d90:	4403      	add	r3, r0
 8009d92:	1a18      	subs	r0, r3, r0
 8009d94:	b003      	add	sp, #12
 8009d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009da0:	e7ed      	b.n	8009d7e <__exponent+0x44>
 8009da2:	2330      	movs	r3, #48	@ 0x30
 8009da4:	3130      	adds	r1, #48	@ 0x30
 8009da6:	7083      	strb	r3, [r0, #2]
 8009da8:	70c1      	strb	r1, [r0, #3]
 8009daa:	1d03      	adds	r3, r0, #4
 8009dac:	e7f1      	b.n	8009d92 <__exponent+0x58>
	...

08009db0 <_printf_float>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b08d      	sub	sp, #52	@ 0x34
 8009db6:	460c      	mov	r4, r1
 8009db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dbc:	4616      	mov	r6, r2
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	f000 feef 	bl	800aba4 <_localeconv_r>
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f6 fa58 	bl	8000280 <strlen>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd8:	9005      	str	r0, [sp, #20]
 8009dda:	3307      	adds	r3, #7
 8009ddc:	f023 0307 	bic.w	r3, r3, #7
 8009de0:	f103 0208 	add.w	r2, r3, #8
 8009de4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009de8:	f8d4 b000 	ldr.w	fp, [r4]
 8009dec:	f8c8 2000 	str.w	r2, [r8]
 8009df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009df4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e06:	4b9c      	ldr	r3, [pc, #624]	@ (800a078 <_printf_float+0x2c8>)
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0c:	f7f6 fe96 	bl	8000b3c <__aeabi_dcmpun>
 8009e10:	bb70      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e16:	4b98      	ldr	r3, [pc, #608]	@ (800a078 <_printf_float+0x2c8>)
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1c:	f7f6 fe70 	bl	8000b00 <__aeabi_dcmple>
 8009e20:	bb30      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	4649      	mov	r1, r9
 8009e2a:	f7f6 fe5f 	bl	8000aec <__aeabi_dcmplt>
 8009e2e:	b110      	cbz	r0, 8009e36 <_printf_float+0x86>
 8009e30:	232d      	movs	r3, #45	@ 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e36:	4a91      	ldr	r2, [pc, #580]	@ (800a07c <_printf_float+0x2cc>)
 8009e38:	4b91      	ldr	r3, [pc, #580]	@ (800a080 <_printf_float+0x2d0>)
 8009e3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e3e:	bf94      	ite	ls
 8009e40:	4690      	movls	r8, r2
 8009e42:	4698      	movhi	r8, r3
 8009e44:	2303      	movs	r3, #3
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	f02b 0304 	bic.w	r3, fp, #4
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	f04f 0900 	mov.w	r9, #0
 8009e52:	9700      	str	r7, [sp, #0]
 8009e54:	4633      	mov	r3, r6
 8009e56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f9d2 	bl	800a204 <_printf_common>
 8009e60:	3001      	adds	r0, #1
 8009e62:	f040 808d 	bne.w	8009f80 <_printf_float+0x1d0>
 8009e66:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6a:	b00d      	add	sp, #52	@ 0x34
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	4642      	mov	r2, r8
 8009e72:	464b      	mov	r3, r9
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 fe60 	bl	8000b3c <__aeabi_dcmpun>
 8009e7c:	b140      	cbz	r0, 8009e90 <_printf_float+0xe0>
 8009e7e:	464b      	mov	r3, r9
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbc      	itt	lt
 8009e84:	232d      	movlt	r3, #45	@ 0x2d
 8009e86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e8a:	4a7e      	ldr	r2, [pc, #504]	@ (800a084 <_printf_float+0x2d4>)
 8009e8c:	4b7e      	ldr	r3, [pc, #504]	@ (800a088 <_printf_float+0x2d8>)
 8009e8e:	e7d4      	b.n	8009e3a <_printf_float+0x8a>
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e96:	9206      	str	r2, [sp, #24]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	d13b      	bne.n	8009f14 <_printf_float+0x164>
 8009e9c:	2306      	movs	r3, #6
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6022      	str	r2, [r4, #0]
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	ab0a      	add	r3, sp, #40	@ 0x28
 8009eac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009eb0:	ab09      	add	r3, sp, #36	@ 0x24
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	6861      	ldr	r1, [r4, #4]
 8009eb6:	ec49 8b10 	vmov	d0, r8, r9
 8009eba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7ff fed6 	bl	8009c70 <__cvt>
 8009ec4:	9b06      	ldr	r3, [sp, #24]
 8009ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ec8:	2b47      	cmp	r3, #71	@ 0x47
 8009eca:	4680      	mov	r8, r0
 8009ecc:	d129      	bne.n	8009f22 <_printf_float+0x172>
 8009ece:	1cc8      	adds	r0, r1, #3
 8009ed0:	db02      	blt.n	8009ed8 <_printf_float+0x128>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	dd41      	ble.n	8009f5c <_printf_float+0x1ac>
 8009ed8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009edc:	fa5f fa8a 	uxtb.w	sl, sl
 8009ee0:	3901      	subs	r1, #1
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ee8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009eea:	f7ff ff26 	bl	8009d3a <__exponent>
 8009eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ef0:	1813      	adds	r3, r2, r0
 8009ef2:	2a01      	cmp	r2, #1
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	dc02      	bgt.n	8009f00 <_printf_float+0x150>
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	07d2      	lsls	r2, r2, #31
 8009efe:	d501      	bpl.n	8009f04 <_printf_float+0x154>
 8009f00:	3301      	adds	r3, #1
 8009f02:	6123      	str	r3, [r4, #16]
 8009f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0a2      	beq.n	8009e52 <_printf_float+0xa2>
 8009f0c:	232d      	movs	r3, #45	@ 0x2d
 8009f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f12:	e79e      	b.n	8009e52 <_printf_float+0xa2>
 8009f14:	9a06      	ldr	r2, [sp, #24]
 8009f16:	2a47      	cmp	r2, #71	@ 0x47
 8009f18:	d1c2      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1c0      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e7bd      	b.n	8009e9e <_printf_float+0xee>
 8009f22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f26:	d9db      	bls.n	8009ee0 <_printf_float+0x130>
 8009f28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f2c:	d118      	bne.n	8009f60 <_printf_float+0x1b0>
 8009f2e:	2900      	cmp	r1, #0
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	dd0b      	ble.n	8009f4c <_printf_float+0x19c>
 8009f34:	6121      	str	r1, [r4, #16]
 8009f36:	b913      	cbnz	r3, 8009f3e <_printf_float+0x18e>
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	07d0      	lsls	r0, r2, #31
 8009f3c:	d502      	bpl.n	8009f44 <_printf_float+0x194>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	440b      	add	r3, r1
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f46:	f04f 0900 	mov.w	r9, #0
 8009f4a:	e7db      	b.n	8009f04 <_printf_float+0x154>
 8009f4c:	b913      	cbnz	r3, 8009f54 <_printf_float+0x1a4>
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	07d2      	lsls	r2, r2, #31
 8009f52:	d501      	bpl.n	8009f58 <_printf_float+0x1a8>
 8009f54:	3302      	adds	r3, #2
 8009f56:	e7f4      	b.n	8009f42 <_printf_float+0x192>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e7f2      	b.n	8009f42 <_printf_float+0x192>
 8009f5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f62:	4299      	cmp	r1, r3
 8009f64:	db05      	blt.n	8009f72 <_printf_float+0x1c2>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	6121      	str	r1, [r4, #16]
 8009f6a:	07d8      	lsls	r0, r3, #31
 8009f6c:	d5ea      	bpl.n	8009f44 <_printf_float+0x194>
 8009f6e:	1c4b      	adds	r3, r1, #1
 8009f70:	e7e7      	b.n	8009f42 <_printf_float+0x192>
 8009f72:	2900      	cmp	r1, #0
 8009f74:	bfd4      	ite	le
 8009f76:	f1c1 0202 	rsble	r2, r1, #2
 8009f7a:	2201      	movgt	r2, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	e7e0      	b.n	8009f42 <_printf_float+0x192>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	055a      	lsls	r2, r3, #21
 8009f84:	d407      	bmi.n	8009f96 <_printf_float+0x1e6>
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	4642      	mov	r2, r8
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	d12b      	bne.n	8009fec <_printf_float+0x23c>
 8009f94:	e767      	b.n	8009e66 <_printf_float+0xb6>
 8009f96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f9a:	f240 80dd 	bls.w	800a158 <_printf_float+0x3a8>
 8009f9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f7f6 fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d033      	beq.n	800a016 <_printf_float+0x266>
 8009fae:	4a37      	ldr	r2, [pc, #220]	@ (800a08c <_printf_float+0x2dc>)
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	47b8      	blx	r7
 8009fb8:	3001      	adds	r0, #1
 8009fba:	f43f af54 	beq.w	8009e66 <_printf_float+0xb6>
 8009fbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fc2:	4543      	cmp	r3, r8
 8009fc4:	db02      	blt.n	8009fcc <_printf_float+0x21c>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	07d8      	lsls	r0, r3, #31
 8009fca:	d50f      	bpl.n	8009fec <_printf_float+0x23c>
 8009fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f af45 	beq.w	8009e66 <_printf_float+0xb6>
 8009fdc:	f04f 0900 	mov.w	r9, #0
 8009fe0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fe4:	f104 0a1a 	add.w	sl, r4, #26
 8009fe8:	45c8      	cmp	r8, r9
 8009fea:	dc09      	bgt.n	800a000 <_printf_float+0x250>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	079b      	lsls	r3, r3, #30
 8009ff0:	f100 8103 	bmi.w	800a1fa <_printf_float+0x44a>
 8009ff4:	68e0      	ldr	r0, [r4, #12]
 8009ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ff8:	4298      	cmp	r0, r3
 8009ffa:	bfb8      	it	lt
 8009ffc:	4618      	movlt	r0, r3
 8009ffe:	e734      	b.n	8009e6a <_printf_float+0xba>
 800a000:	2301      	movs	r3, #1
 800a002:	4652      	mov	r2, sl
 800a004:	4631      	mov	r1, r6
 800a006:	4628      	mov	r0, r5
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	f43f af2b 	beq.w	8009e66 <_printf_float+0xb6>
 800a010:	f109 0901 	add.w	r9, r9, #1
 800a014:	e7e8      	b.n	8009fe8 <_printf_float+0x238>
 800a016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	dc39      	bgt.n	800a090 <_printf_float+0x2e0>
 800a01c:	4a1b      	ldr	r2, [pc, #108]	@ (800a08c <_printf_float+0x2dc>)
 800a01e:	2301      	movs	r3, #1
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af1d 	beq.w	8009e66 <_printf_float+0xb6>
 800a02c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a030:	ea59 0303 	orrs.w	r3, r9, r3
 800a034:	d102      	bne.n	800a03c <_printf_float+0x28c>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	07d9      	lsls	r1, r3, #31
 800a03a:	d5d7      	bpl.n	8009fec <_printf_float+0x23c>
 800a03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	f43f af0d 	beq.w	8009e66 <_printf_float+0xb6>
 800a04c:	f04f 0a00 	mov.w	sl, #0
 800a050:	f104 0b1a 	add.w	fp, r4, #26
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	425b      	negs	r3, r3
 800a058:	4553      	cmp	r3, sl
 800a05a:	dc01      	bgt.n	800a060 <_printf_float+0x2b0>
 800a05c:	464b      	mov	r3, r9
 800a05e:	e793      	b.n	8009f88 <_printf_float+0x1d8>
 800a060:	2301      	movs	r3, #1
 800a062:	465a      	mov	r2, fp
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f aefb 	beq.w	8009e66 <_printf_float+0xb6>
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	e7ee      	b.n	800a054 <_printf_float+0x2a4>
 800a076:	bf00      	nop
 800a078:	7fefffff 	.word	0x7fefffff
 800a07c:	0800f2b8 	.word	0x0800f2b8
 800a080:	0800f2bc 	.word	0x0800f2bc
 800a084:	0800f2c0 	.word	0x0800f2c0
 800a088:	0800f2c4 	.word	0x0800f2c4
 800a08c:	0800f2c8 	.word	0x0800f2c8
 800a090:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a092:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a096:	4553      	cmp	r3, sl
 800a098:	bfa8      	it	ge
 800a09a:	4653      	movge	r3, sl
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	4699      	mov	r9, r3
 800a0a0:	dc36      	bgt.n	800a110 <_printf_float+0x360>
 800a0a2:	f04f 0b00 	mov.w	fp, #0
 800a0a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0aa:	f104 021a 	add.w	r2, r4, #26
 800a0ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0b0:	9306      	str	r3, [sp, #24]
 800a0b2:	eba3 0309 	sub.w	r3, r3, r9
 800a0b6:	455b      	cmp	r3, fp
 800a0b8:	dc31      	bgt.n	800a11e <_printf_float+0x36e>
 800a0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0bc:	459a      	cmp	sl, r3
 800a0be:	dc3a      	bgt.n	800a136 <_printf_float+0x386>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07da      	lsls	r2, r3, #31
 800a0c4:	d437      	bmi.n	800a136 <_printf_float+0x386>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c8:	ebaa 0903 	sub.w	r9, sl, r3
 800a0cc:	9b06      	ldr	r3, [sp, #24]
 800a0ce:	ebaa 0303 	sub.w	r3, sl, r3
 800a0d2:	4599      	cmp	r9, r3
 800a0d4:	bfa8      	it	ge
 800a0d6:	4699      	movge	r9, r3
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	dc33      	bgt.n	800a146 <_printf_float+0x396>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0e6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a0f0:	eba3 0309 	sub.w	r3, r3, r9
 800a0f4:	4543      	cmp	r3, r8
 800a0f6:	f77f af79 	ble.w	8009fec <_printf_float+0x23c>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	465a      	mov	r2, fp
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f aeae 	beq.w	8009e66 <_printf_float+0xb6>
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	e7ec      	b.n	800a0ea <_printf_float+0x33a>
 800a110:	4642      	mov	r2, r8
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	d1c2      	bne.n	800a0a2 <_printf_float+0x2f2>
 800a11c:	e6a3      	b.n	8009e66 <_printf_float+0xb6>
 800a11e:	2301      	movs	r3, #1
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	9206      	str	r2, [sp, #24]
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f ae9c 	beq.w	8009e66 <_printf_float+0xb6>
 800a12e:	9a06      	ldr	r2, [sp, #24]
 800a130:	f10b 0b01 	add.w	fp, fp, #1
 800a134:	e7bb      	b.n	800a0ae <_printf_float+0x2fe>
 800a136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	d1c0      	bne.n	800a0c6 <_printf_float+0x316>
 800a144:	e68f      	b.n	8009e66 <_printf_float+0xb6>
 800a146:	9a06      	ldr	r2, [sp, #24]
 800a148:	464b      	mov	r3, r9
 800a14a:	4442      	add	r2, r8
 800a14c:	4631      	mov	r1, r6
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	d1c3      	bne.n	800a0de <_printf_float+0x32e>
 800a156:	e686      	b.n	8009e66 <_printf_float+0xb6>
 800a158:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a15c:	f1ba 0f01 	cmp.w	sl, #1
 800a160:	dc01      	bgt.n	800a166 <_printf_float+0x3b6>
 800a162:	07db      	lsls	r3, r3, #31
 800a164:	d536      	bpl.n	800a1d4 <_printf_float+0x424>
 800a166:	2301      	movs	r3, #1
 800a168:	4642      	mov	r2, r8
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f ae78 	beq.w	8009e66 <_printf_float+0xb6>
 800a176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	f43f ae70 	beq.w	8009e66 <_printf_float+0xb6>
 800a186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a192:	f7f6 fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a196:	b9c0      	cbnz	r0, 800a1ca <_printf_float+0x41a>
 800a198:	4653      	mov	r3, sl
 800a19a:	f108 0201 	add.w	r2, r8, #1
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d10c      	bne.n	800a1c2 <_printf_float+0x412>
 800a1a8:	e65d      	b.n	8009e66 <_printf_float+0xb6>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	465a      	mov	r2, fp
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae56 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	45d0      	cmp	r8, sl
 800a1c0:	dbf3      	blt.n	800a1aa <_printf_float+0x3fa>
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1c8:	e6df      	b.n	8009f8a <_printf_float+0x1da>
 800a1ca:	f04f 0800 	mov.w	r8, #0
 800a1ce:	f104 0b1a 	add.w	fp, r4, #26
 800a1d2:	e7f4      	b.n	800a1be <_printf_float+0x40e>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4642      	mov	r2, r8
 800a1d8:	e7e1      	b.n	800a19e <_printf_float+0x3ee>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	464a      	mov	r2, r9
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f ae3e 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ea:	f108 0801 	add.w	r8, r8, #1
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	dcf0      	bgt.n	800a1da <_printf_float+0x42a>
 800a1f8:	e6fc      	b.n	8009ff4 <_printf_float+0x244>
 800a1fa:	f04f 0800 	mov.w	r8, #0
 800a1fe:	f104 0919 	add.w	r9, r4, #25
 800a202:	e7f4      	b.n	800a1ee <_printf_float+0x43e>

0800a204 <_printf_common>:
 800a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	4616      	mov	r6, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	688a      	ldr	r2, [r1, #8]
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a214:	4293      	cmp	r3, r2
 800a216:	bfb8      	it	lt
 800a218:	4613      	movlt	r3, r2
 800a21a:	6033      	str	r3, [r6, #0]
 800a21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a220:	4607      	mov	r7, r0
 800a222:	460c      	mov	r4, r1
 800a224:	b10a      	cbz	r2, 800a22a <_printf_common+0x26>
 800a226:	3301      	adds	r3, #1
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	0699      	lsls	r1, r3, #26
 800a22e:	bf42      	ittt	mi
 800a230:	6833      	ldrmi	r3, [r6, #0]
 800a232:	3302      	addmi	r3, #2
 800a234:	6033      	strmi	r3, [r6, #0]
 800a236:	6825      	ldr	r5, [r4, #0]
 800a238:	f015 0506 	ands.w	r5, r5, #6
 800a23c:	d106      	bne.n	800a24c <_printf_common+0x48>
 800a23e:	f104 0a19 	add.w	sl, r4, #25
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	6832      	ldr	r2, [r6, #0]
 800a246:	1a9b      	subs	r3, r3, r2
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dc26      	bgt.n	800a29a <_printf_common+0x96>
 800a24c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	3b00      	subs	r3, #0
 800a254:	bf18      	it	ne
 800a256:	2301      	movne	r3, #1
 800a258:	0692      	lsls	r2, r2, #26
 800a25a:	d42b      	bmi.n	800a2b4 <_printf_common+0xb0>
 800a25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a260:	4641      	mov	r1, r8
 800a262:	4638      	mov	r0, r7
 800a264:	47c8      	blx	r9
 800a266:	3001      	adds	r0, #1
 800a268:	d01e      	beq.n	800a2a8 <_printf_common+0xa4>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6922      	ldr	r2, [r4, #16]
 800a26e:	f003 0306 	and.w	r3, r3, #6
 800a272:	2b04      	cmp	r3, #4
 800a274:	bf02      	ittt	eq
 800a276:	68e5      	ldreq	r5, [r4, #12]
 800a278:	6833      	ldreq	r3, [r6, #0]
 800a27a:	1aed      	subeq	r5, r5, r3
 800a27c:	68a3      	ldr	r3, [r4, #8]
 800a27e:	bf0c      	ite	eq
 800a280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a284:	2500      	movne	r5, #0
 800a286:	4293      	cmp	r3, r2
 800a288:	bfc4      	itt	gt
 800a28a:	1a9b      	subgt	r3, r3, r2
 800a28c:	18ed      	addgt	r5, r5, r3
 800a28e:	2600      	movs	r6, #0
 800a290:	341a      	adds	r4, #26
 800a292:	42b5      	cmp	r5, r6
 800a294:	d11a      	bne.n	800a2cc <_printf_common+0xc8>
 800a296:	2000      	movs	r0, #0
 800a298:	e008      	b.n	800a2ac <_printf_common+0xa8>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4652      	mov	r2, sl
 800a29e:	4641      	mov	r1, r8
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	47c8      	blx	r9
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_printf_common+0xac>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	e7c6      	b.n	800a242 <_printf_common+0x3e>
 800a2b4:	18e1      	adds	r1, r4, r3
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	2030      	movs	r0, #48	@ 0x30
 800a2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2be:	4422      	add	r2, r4
 800a2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	e7c7      	b.n	800a25c <_printf_common+0x58>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	47c8      	blx	r9
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d0e6      	beq.n	800a2a8 <_printf_common+0xa4>
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7d9      	b.n	800a292 <_printf_common+0x8e>
	...

0800a2e0 <_printf_i>:
 800a2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	7e0f      	ldrb	r7, [r1, #24]
 800a2e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2e8:	2f78      	cmp	r7, #120	@ 0x78
 800a2ea:	4691      	mov	r9, r2
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2f6:	d807      	bhi.n	800a308 <_printf_i+0x28>
 800a2f8:	2f62      	cmp	r7, #98	@ 0x62
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x32>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f000 80d2 	beq.w	800a4a6 <_printf_i+0x1c6>
 800a302:	2f58      	cmp	r7, #88	@ 0x58
 800a304:	f000 80b9 	beq.w	800a47a <_printf_i+0x19a>
 800a308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a310:	e03a      	b.n	800a388 <_printf_i+0xa8>
 800a312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a316:	2b15      	cmp	r3, #21
 800a318:	d8f6      	bhi.n	800a308 <_printf_i+0x28>
 800a31a:	a101      	add	r1, pc, #4	@ (adr r1, 800a320 <_printf_i+0x40>)
 800a31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a320:	0800a379 	.word	0x0800a379
 800a324:	0800a38d 	.word	0x0800a38d
 800a328:	0800a309 	.word	0x0800a309
 800a32c:	0800a309 	.word	0x0800a309
 800a330:	0800a309 	.word	0x0800a309
 800a334:	0800a309 	.word	0x0800a309
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a309 	.word	0x0800a309
 800a340:	0800a309 	.word	0x0800a309
 800a344:	0800a309 	.word	0x0800a309
 800a348:	0800a309 	.word	0x0800a309
 800a34c:	0800a48d 	.word	0x0800a48d
 800a350:	0800a3b7 	.word	0x0800a3b7
 800a354:	0800a447 	.word	0x0800a447
 800a358:	0800a309 	.word	0x0800a309
 800a35c:	0800a309 	.word	0x0800a309
 800a360:	0800a4af 	.word	0x0800a4af
 800a364:	0800a309 	.word	0x0800a309
 800a368:	0800a3b7 	.word	0x0800a3b7
 800a36c:	0800a309 	.word	0x0800a309
 800a370:	0800a309 	.word	0x0800a309
 800a374:	0800a44f 	.word	0x0800a44f
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6032      	str	r2, [r6, #0]
 800a380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a388:	2301      	movs	r3, #1
 800a38a:	e09d      	b.n	800a4c8 <_printf_i+0x1e8>
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	1d19      	adds	r1, r3, #4
 800a392:	6031      	str	r1, [r6, #0]
 800a394:	0606      	lsls	r6, r0, #24
 800a396:	d501      	bpl.n	800a39c <_printf_i+0xbc>
 800a398:	681d      	ldr	r5, [r3, #0]
 800a39a:	e003      	b.n	800a3a4 <_printf_i+0xc4>
 800a39c:	0645      	lsls	r5, r0, #25
 800a39e:	d5fb      	bpl.n	800a398 <_printf_i+0xb8>
 800a3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	da03      	bge.n	800a3b0 <_printf_i+0xd0>
 800a3a8:	232d      	movs	r3, #45	@ 0x2d
 800a3aa:	426d      	negs	r5, r5
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3b0:	4859      	ldr	r0, [pc, #356]	@ (800a518 <_printf_i+0x238>)
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e011      	b.n	800a3da <_printf_i+0xfa>
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	6833      	ldr	r3, [r6, #0]
 800a3ba:	0608      	lsls	r0, r1, #24
 800a3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3c0:	d402      	bmi.n	800a3c8 <_printf_i+0xe8>
 800a3c2:	0649      	lsls	r1, r1, #25
 800a3c4:	bf48      	it	mi
 800a3c6:	b2ad      	uxthmi	r5, r5
 800a3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ca:	4853      	ldr	r0, [pc, #332]	@ (800a518 <_printf_i+0x238>)
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	bf14      	ite	ne
 800a3d0:	230a      	movne	r3, #10
 800a3d2:	2308      	moveq	r3, #8
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3da:	6866      	ldr	r6, [r4, #4]
 800a3dc:	60a6      	str	r6, [r4, #8]
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	bfa2      	ittt	ge
 800a3e2:	6821      	ldrge	r1, [r4, #0]
 800a3e4:	f021 0104 	bicge.w	r1, r1, #4
 800a3e8:	6021      	strge	r1, [r4, #0]
 800a3ea:	b90d      	cbnz	r5, 800a3f0 <_printf_i+0x110>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d04b      	beq.n	800a488 <_printf_i+0x1a8>
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a3fa:	5dc7      	ldrb	r7, [r0, r7]
 800a3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a400:	462f      	mov	r7, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	460d      	mov	r5, r1
 800a406:	d9f4      	bls.n	800a3f2 <_printf_i+0x112>
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d10b      	bne.n	800a424 <_printf_i+0x144>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	d508      	bpl.n	800a424 <_printf_i+0x144>
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	6861      	ldr	r1, [r4, #4]
 800a416:	4299      	cmp	r1, r3
 800a418:	bfde      	ittt	le
 800a41a:	2330      	movle	r3, #48	@ 0x30
 800a41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a420:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a424:	1b92      	subs	r2, r2, r6
 800a426:	6122      	str	r2, [r4, #16]
 800a428:	f8cd a000 	str.w	sl, [sp]
 800a42c:	464b      	mov	r3, r9
 800a42e:	aa03      	add	r2, sp, #12
 800a430:	4621      	mov	r1, r4
 800a432:	4640      	mov	r0, r8
 800a434:	f7ff fee6 	bl	800a204 <_printf_common>
 800a438:	3001      	adds	r0, #1
 800a43a:	d14a      	bne.n	800a4d2 <_printf_i+0x1f2>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	b004      	add	sp, #16
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	f043 0320 	orr.w	r3, r3, #32
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	4833      	ldr	r0, [pc, #204]	@ (800a51c <_printf_i+0x23c>)
 800a450:	2778      	movs	r7, #120	@ 0x78
 800a452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	6831      	ldr	r1, [r6, #0]
 800a45a:	061f      	lsls	r7, r3, #24
 800a45c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a460:	d402      	bmi.n	800a468 <_printf_i+0x188>
 800a462:	065f      	lsls	r7, r3, #25
 800a464:	bf48      	it	mi
 800a466:	b2ad      	uxthmi	r5, r5
 800a468:	6031      	str	r1, [r6, #0]
 800a46a:	07d9      	lsls	r1, r3, #31
 800a46c:	bf44      	itt	mi
 800a46e:	f043 0320 	orrmi.w	r3, r3, #32
 800a472:	6023      	strmi	r3, [r4, #0]
 800a474:	b11d      	cbz	r5, 800a47e <_printf_i+0x19e>
 800a476:	2310      	movs	r3, #16
 800a478:	e7ac      	b.n	800a3d4 <_printf_i+0xf4>
 800a47a:	4827      	ldr	r0, [pc, #156]	@ (800a518 <_printf_i+0x238>)
 800a47c:	e7e9      	b.n	800a452 <_printf_i+0x172>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	f023 0320 	bic.w	r3, r3, #32
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	e7f6      	b.n	800a476 <_printf_i+0x196>
 800a488:	4616      	mov	r6, r2
 800a48a:	e7bd      	b.n	800a408 <_printf_i+0x128>
 800a48c:	6833      	ldr	r3, [r6, #0]
 800a48e:	6825      	ldr	r5, [r4, #0]
 800a490:	6961      	ldr	r1, [r4, #20]
 800a492:	1d18      	adds	r0, r3, #4
 800a494:	6030      	str	r0, [r6, #0]
 800a496:	062e      	lsls	r6, r5, #24
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	d501      	bpl.n	800a4a0 <_printf_i+0x1c0>
 800a49c:	6019      	str	r1, [r3, #0]
 800a49e:	e002      	b.n	800a4a6 <_printf_i+0x1c6>
 800a4a0:	0668      	lsls	r0, r5, #25
 800a4a2:	d5fb      	bpl.n	800a49c <_printf_i+0x1bc>
 800a4a4:	8019      	strh	r1, [r3, #0]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	4616      	mov	r6, r2
 800a4ac:	e7bc      	b.n	800a428 <_printf_i+0x148>
 800a4ae:	6833      	ldr	r3, [r6, #0]
 800a4b0:	1d1a      	adds	r2, r3, #4
 800a4b2:	6032      	str	r2, [r6, #0]
 800a4b4:	681e      	ldr	r6, [r3, #0]
 800a4b6:	6862      	ldr	r2, [r4, #4]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7f5 fe90 	bl	80001e0 <memchr>
 800a4c0:	b108      	cbz	r0, 800a4c6 <_printf_i+0x1e6>
 800a4c2:	1b80      	subs	r0, r0, r6
 800a4c4:	6060      	str	r0, [r4, #4]
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4d0:	e7aa      	b.n	800a428 <_printf_i+0x148>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4640      	mov	r0, r8
 800a4da:	47d0      	blx	sl
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d0ad      	beq.n	800a43c <_printf_i+0x15c>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	079b      	lsls	r3, r3, #30
 800a4e4:	d413      	bmi.n	800a50e <_printf_i+0x22e>
 800a4e6:	68e0      	ldr	r0, [r4, #12]
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	bfb8      	it	lt
 800a4ee:	4618      	movlt	r0, r3
 800a4f0:	e7a6      	b.n	800a440 <_printf_i+0x160>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	47d0      	blx	sl
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d09d      	beq.n	800a43c <_printf_i+0x15c>
 800a500:	3501      	adds	r5, #1
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	9903      	ldr	r1, [sp, #12]
 800a506:	1a5b      	subs	r3, r3, r1
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dcf2      	bgt.n	800a4f2 <_printf_i+0x212>
 800a50c:	e7eb      	b.n	800a4e6 <_printf_i+0x206>
 800a50e:	2500      	movs	r5, #0
 800a510:	f104 0619 	add.w	r6, r4, #25
 800a514:	e7f5      	b.n	800a502 <_printf_i+0x222>
 800a516:	bf00      	nop
 800a518:	0800f2ca 	.word	0x0800f2ca
 800a51c:	0800f2db 	.word	0x0800f2db

0800a520 <_scanf_float>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	b087      	sub	sp, #28
 800a526:	4617      	mov	r7, r2
 800a528:	9303      	str	r3, [sp, #12]
 800a52a:	688b      	ldr	r3, [r1, #8]
 800a52c:	1e5a      	subs	r2, r3, #1
 800a52e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a532:	bf81      	itttt	hi
 800a534:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a538:	eb03 0b05 	addhi.w	fp, r3, r5
 800a53c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a540:	608b      	strhi	r3, [r1, #8]
 800a542:	680b      	ldr	r3, [r1, #0]
 800a544:	460a      	mov	r2, r1
 800a546:	f04f 0500 	mov.w	r5, #0
 800a54a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a54e:	f842 3b1c 	str.w	r3, [r2], #28
 800a552:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a556:	4680      	mov	r8, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	bf98      	it	ls
 800a55c:	f04f 0b00 	movls.w	fp, #0
 800a560:	9201      	str	r2, [sp, #4]
 800a562:	4616      	mov	r6, r2
 800a564:	46aa      	mov	sl, r5
 800a566:	46a9      	mov	r9, r5
 800a568:	9502      	str	r5, [sp, #8]
 800a56a:	68a2      	ldr	r2, [r4, #8]
 800a56c:	b152      	cbz	r2, 800a584 <_scanf_float+0x64>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b4e      	cmp	r3, #78	@ 0x4e
 800a574:	d864      	bhi.n	800a640 <_scanf_float+0x120>
 800a576:	2b40      	cmp	r3, #64	@ 0x40
 800a578:	d83c      	bhi.n	800a5f4 <_scanf_float+0xd4>
 800a57a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a57e:	b2c8      	uxtb	r0, r1
 800a580:	280e      	cmp	r0, #14
 800a582:	d93a      	bls.n	800a5fa <_scanf_float+0xda>
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	d003      	beq.n	800a592 <_scanf_float+0x72>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a596:	f1ba 0f01 	cmp.w	sl, #1
 800a59a:	f200 8117 	bhi.w	800a7cc <_scanf_float+0x2ac>
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	429e      	cmp	r6, r3
 800a5a2:	f200 8108 	bhi.w	800a7b6 <_scanf_float+0x296>
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	b007      	add	sp, #28
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a5b2:	2a0d      	cmp	r2, #13
 800a5b4:	d8e6      	bhi.n	800a584 <_scanf_float+0x64>
 800a5b6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5bc <_scanf_float+0x9c>)
 800a5b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a5bc:	0800a703 	.word	0x0800a703
 800a5c0:	0800a585 	.word	0x0800a585
 800a5c4:	0800a585 	.word	0x0800a585
 800a5c8:	0800a585 	.word	0x0800a585
 800a5cc:	0800a763 	.word	0x0800a763
 800a5d0:	0800a73b 	.word	0x0800a73b
 800a5d4:	0800a585 	.word	0x0800a585
 800a5d8:	0800a585 	.word	0x0800a585
 800a5dc:	0800a711 	.word	0x0800a711
 800a5e0:	0800a585 	.word	0x0800a585
 800a5e4:	0800a585 	.word	0x0800a585
 800a5e8:	0800a585 	.word	0x0800a585
 800a5ec:	0800a585 	.word	0x0800a585
 800a5f0:	0800a6c9 	.word	0x0800a6c9
 800a5f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a5f8:	e7db      	b.n	800a5b2 <_scanf_float+0x92>
 800a5fa:	290e      	cmp	r1, #14
 800a5fc:	d8c2      	bhi.n	800a584 <_scanf_float+0x64>
 800a5fe:	a001      	add	r0, pc, #4	@ (adr r0, 800a604 <_scanf_float+0xe4>)
 800a600:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a604:	0800a6b9 	.word	0x0800a6b9
 800a608:	0800a585 	.word	0x0800a585
 800a60c:	0800a6b9 	.word	0x0800a6b9
 800a610:	0800a74f 	.word	0x0800a74f
 800a614:	0800a585 	.word	0x0800a585
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a69f 	.word	0x0800a69f
 800a620:	0800a69f 	.word	0x0800a69f
 800a624:	0800a69f 	.word	0x0800a69f
 800a628:	0800a69f 	.word	0x0800a69f
 800a62c:	0800a69f 	.word	0x0800a69f
 800a630:	0800a69f 	.word	0x0800a69f
 800a634:	0800a69f 	.word	0x0800a69f
 800a638:	0800a69f 	.word	0x0800a69f
 800a63c:	0800a69f 	.word	0x0800a69f
 800a640:	2b6e      	cmp	r3, #110	@ 0x6e
 800a642:	d809      	bhi.n	800a658 <_scanf_float+0x138>
 800a644:	2b60      	cmp	r3, #96	@ 0x60
 800a646:	d8b2      	bhi.n	800a5ae <_scanf_float+0x8e>
 800a648:	2b54      	cmp	r3, #84	@ 0x54
 800a64a:	d07b      	beq.n	800a744 <_scanf_float+0x224>
 800a64c:	2b59      	cmp	r3, #89	@ 0x59
 800a64e:	d199      	bne.n	800a584 <_scanf_float+0x64>
 800a650:	2d07      	cmp	r5, #7
 800a652:	d197      	bne.n	800a584 <_scanf_float+0x64>
 800a654:	2508      	movs	r5, #8
 800a656:	e02c      	b.n	800a6b2 <_scanf_float+0x192>
 800a658:	2b74      	cmp	r3, #116	@ 0x74
 800a65a:	d073      	beq.n	800a744 <_scanf_float+0x224>
 800a65c:	2b79      	cmp	r3, #121	@ 0x79
 800a65e:	e7f6      	b.n	800a64e <_scanf_float+0x12e>
 800a660:	6821      	ldr	r1, [r4, #0]
 800a662:	05c8      	lsls	r0, r1, #23
 800a664:	d51b      	bpl.n	800a69e <_scanf_float+0x17e>
 800a666:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a66a:	6021      	str	r1, [r4, #0]
 800a66c:	f109 0901 	add.w	r9, r9, #1
 800a670:	f1bb 0f00 	cmp.w	fp, #0
 800a674:	d003      	beq.n	800a67e <_scanf_float+0x15e>
 800a676:	3201      	adds	r2, #1
 800a678:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a67c:	60a2      	str	r2, [r4, #8]
 800a67e:	68a3      	ldr	r3, [r4, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	3301      	adds	r3, #1
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	f340 8087 	ble.w	800a7a4 <_scanf_float+0x284>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	e765      	b.n	800a56a <_scanf_float+0x4a>
 800a69e:	eb1a 0105 	adds.w	r1, sl, r5
 800a6a2:	f47f af6f 	bne.w	800a584 <_scanf_float+0x64>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a6ac:	6022      	str	r2, [r4, #0]
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	468a      	mov	sl, r1
 800a6b2:	f806 3b01 	strb.w	r3, [r6], #1
 800a6b6:	e7e2      	b.n	800a67e <_scanf_float+0x15e>
 800a6b8:	6822      	ldr	r2, [r4, #0]
 800a6ba:	0610      	lsls	r0, r2, #24
 800a6bc:	f57f af62 	bpl.w	800a584 <_scanf_float+0x64>
 800a6c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6c4:	6022      	str	r2, [r4, #0]
 800a6c6:	e7f4      	b.n	800a6b2 <_scanf_float+0x192>
 800a6c8:	f1ba 0f00 	cmp.w	sl, #0
 800a6cc:	d10e      	bne.n	800a6ec <_scanf_float+0x1cc>
 800a6ce:	f1b9 0f00 	cmp.w	r9, #0
 800a6d2:	d10e      	bne.n	800a6f2 <_scanf_float+0x1d2>
 800a6d4:	6822      	ldr	r2, [r4, #0]
 800a6d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a6da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a6de:	d108      	bne.n	800a6f2 <_scanf_float+0x1d2>
 800a6e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	f04f 0a01 	mov.w	sl, #1
 800a6ea:	e7e2      	b.n	800a6b2 <_scanf_float+0x192>
 800a6ec:	f1ba 0f02 	cmp.w	sl, #2
 800a6f0:	d055      	beq.n	800a79e <_scanf_float+0x27e>
 800a6f2:	2d01      	cmp	r5, #1
 800a6f4:	d002      	beq.n	800a6fc <_scanf_float+0x1dc>
 800a6f6:	2d04      	cmp	r5, #4
 800a6f8:	f47f af44 	bne.w	800a584 <_scanf_float+0x64>
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	b2ed      	uxtb	r5, r5
 800a700:	e7d7      	b.n	800a6b2 <_scanf_float+0x192>
 800a702:	f1ba 0f01 	cmp.w	sl, #1
 800a706:	f47f af3d 	bne.w	800a584 <_scanf_float+0x64>
 800a70a:	f04f 0a02 	mov.w	sl, #2
 800a70e:	e7d0      	b.n	800a6b2 <_scanf_float+0x192>
 800a710:	b97d      	cbnz	r5, 800a732 <_scanf_float+0x212>
 800a712:	f1b9 0f00 	cmp.w	r9, #0
 800a716:	f47f af38 	bne.w	800a58a <_scanf_float+0x6a>
 800a71a:	6822      	ldr	r2, [r4, #0]
 800a71c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a720:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a724:	f040 8108 	bne.w	800a938 <_scanf_float+0x418>
 800a728:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a72c:	6022      	str	r2, [r4, #0]
 800a72e:	2501      	movs	r5, #1
 800a730:	e7bf      	b.n	800a6b2 <_scanf_float+0x192>
 800a732:	2d03      	cmp	r5, #3
 800a734:	d0e2      	beq.n	800a6fc <_scanf_float+0x1dc>
 800a736:	2d05      	cmp	r5, #5
 800a738:	e7de      	b.n	800a6f8 <_scanf_float+0x1d8>
 800a73a:	2d02      	cmp	r5, #2
 800a73c:	f47f af22 	bne.w	800a584 <_scanf_float+0x64>
 800a740:	2503      	movs	r5, #3
 800a742:	e7b6      	b.n	800a6b2 <_scanf_float+0x192>
 800a744:	2d06      	cmp	r5, #6
 800a746:	f47f af1d 	bne.w	800a584 <_scanf_float+0x64>
 800a74a:	2507      	movs	r5, #7
 800a74c:	e7b1      	b.n	800a6b2 <_scanf_float+0x192>
 800a74e:	6822      	ldr	r2, [r4, #0]
 800a750:	0591      	lsls	r1, r2, #22
 800a752:	f57f af17 	bpl.w	800a584 <_scanf_float+0x64>
 800a756:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a760:	e7a7      	b.n	800a6b2 <_scanf_float+0x192>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a768:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a76c:	d006      	beq.n	800a77c <_scanf_float+0x25c>
 800a76e:	0550      	lsls	r0, r2, #21
 800a770:	f57f af08 	bpl.w	800a584 <_scanf_float+0x64>
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	f000 80de 	beq.w	800a938 <_scanf_float+0x418>
 800a77c:	0591      	lsls	r1, r2, #22
 800a77e:	bf58      	it	pl
 800a780:	9902      	ldrpl	r1, [sp, #8]
 800a782:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a786:	bf58      	it	pl
 800a788:	eba9 0101 	subpl.w	r1, r9, r1
 800a78c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a790:	bf58      	it	pl
 800a792:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a796:	6022      	str	r2, [r4, #0]
 800a798:	f04f 0900 	mov.w	r9, #0
 800a79c:	e789      	b.n	800a6b2 <_scanf_float+0x192>
 800a79e:	f04f 0a03 	mov.w	sl, #3
 800a7a2:	e786      	b.n	800a6b2 <_scanf_float+0x192>
 800a7a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4798      	blx	r3
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f aedb 	beq.w	800a56a <_scanf_float+0x4a>
 800a7b4:	e6e6      	b.n	800a584 <_scanf_float+0x64>
 800a7b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7be:	463a      	mov	r2, r7
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4798      	blx	r3
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	e6e8      	b.n	800a59e <_scanf_float+0x7e>
 800a7cc:	1e6b      	subs	r3, r5, #1
 800a7ce:	2b06      	cmp	r3, #6
 800a7d0:	d824      	bhi.n	800a81c <_scanf_float+0x2fc>
 800a7d2:	2d02      	cmp	r5, #2
 800a7d4:	d836      	bhi.n	800a844 <_scanf_float+0x324>
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	f67f aee4 	bls.w	800a5a6 <_scanf_float+0x86>
 800a7de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7e6:	463a      	mov	r2, r7
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4798      	blx	r3
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	e7f0      	b.n	800a7d6 <_scanf_float+0x2b6>
 800a7f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a7fc:	463a      	mov	r2, r7
 800a7fe:	4640      	mov	r0, r8
 800a800:	4798      	blx	r3
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	3b01      	subs	r3, #1
 800a806:	6123      	str	r3, [r4, #16]
 800a808:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a80c:	fa5f fa8a 	uxtb.w	sl, sl
 800a810:	f1ba 0f02 	cmp.w	sl, #2
 800a814:	d1ee      	bne.n	800a7f4 <_scanf_float+0x2d4>
 800a816:	3d03      	subs	r5, #3
 800a818:	b2ed      	uxtb	r5, r5
 800a81a:	1b76      	subs	r6, r6, r5
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	05da      	lsls	r2, r3, #23
 800a820:	d530      	bpl.n	800a884 <_scanf_float+0x364>
 800a822:	055b      	lsls	r3, r3, #21
 800a824:	d511      	bpl.n	800a84a <_scanf_float+0x32a>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	429e      	cmp	r6, r3
 800a82a:	f67f aebc 	bls.w	800a5a6 <_scanf_float+0x86>
 800a82e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a836:	463a      	mov	r2, r7
 800a838:	4640      	mov	r0, r8
 800a83a:	4798      	blx	r3
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	3b01      	subs	r3, #1
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	e7f0      	b.n	800a826 <_scanf_float+0x306>
 800a844:	46aa      	mov	sl, r5
 800a846:	46b3      	mov	fp, r6
 800a848:	e7de      	b.n	800a808 <_scanf_float+0x2e8>
 800a84a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	2965      	cmp	r1, #101	@ 0x65
 800a852:	f103 33ff 	add.w	r3, r3, #4294967295
 800a856:	f106 35ff 	add.w	r5, r6, #4294967295
 800a85a:	6123      	str	r3, [r4, #16]
 800a85c:	d00c      	beq.n	800a878 <_scanf_float+0x358>
 800a85e:	2945      	cmp	r1, #69	@ 0x45
 800a860:	d00a      	beq.n	800a878 <_scanf_float+0x358>
 800a862:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a866:	463a      	mov	r2, r7
 800a868:	4640      	mov	r0, r8
 800a86a:	4798      	blx	r3
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a872:	3b01      	subs	r3, #1
 800a874:	1eb5      	subs	r5, r6, #2
 800a876:	6123      	str	r3, [r4, #16]
 800a878:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a87c:	463a      	mov	r2, r7
 800a87e:	4640      	mov	r0, r8
 800a880:	4798      	blx	r3
 800a882:	462e      	mov	r6, r5
 800a884:	6822      	ldr	r2, [r4, #0]
 800a886:	f012 0210 	ands.w	r2, r2, #16
 800a88a:	d001      	beq.n	800a890 <_scanf_float+0x370>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e68b      	b.n	800a5a8 <_scanf_float+0x88>
 800a890:	7032      	strb	r2, [r6, #0]
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a89c:	d11c      	bne.n	800a8d8 <_scanf_float+0x3b8>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	454b      	cmp	r3, r9
 800a8a2:	eba3 0209 	sub.w	r2, r3, r9
 800a8a6:	d123      	bne.n	800a8f0 <_scanf_float+0x3d0>
 800a8a8:	9901      	ldr	r1, [sp, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	f002 fbf7 	bl	800d0a0 <_strtod_r>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	6821      	ldr	r1, [r4, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f011 0f02 	tst.w	r1, #2
 800a8bc:	ec57 6b10 	vmov	r6, r7, d0
 800a8c0:	f103 0204 	add.w	r2, r3, #4
 800a8c4:	d01f      	beq.n	800a906 <_scanf_float+0x3e6>
 800a8c6:	9903      	ldr	r1, [sp, #12]
 800a8c8:	600a      	str	r2, [r1, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	e9c3 6700 	strd	r6, r7, [r3]
 800a8d0:	68e3      	ldr	r3, [r4, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	60e3      	str	r3, [r4, #12]
 800a8d6:	e7d9      	b.n	800a88c <_scanf_float+0x36c>
 800a8d8:	9b04      	ldr	r3, [sp, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0e4      	beq.n	800a8a8 <_scanf_float+0x388>
 800a8de:	9905      	ldr	r1, [sp, #20]
 800a8e0:	230a      	movs	r3, #10
 800a8e2:	3101      	adds	r1, #1
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	f002 fc5b 	bl	800d1a0 <_strtol_r>
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	9e05      	ldr	r6, [sp, #20]
 800a8ee:	1ac2      	subs	r2, r0, r3
 800a8f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a8f4:	429e      	cmp	r6, r3
 800a8f6:	bf28      	it	cs
 800a8f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a8fc:	4910      	ldr	r1, [pc, #64]	@ (800a940 <_scanf_float+0x420>)
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f8e4 	bl	800aacc <siprintf>
 800a904:	e7d0      	b.n	800a8a8 <_scanf_float+0x388>
 800a906:	f011 0f04 	tst.w	r1, #4
 800a90a:	9903      	ldr	r1, [sp, #12]
 800a90c:	600a      	str	r2, [r1, #0]
 800a90e:	d1dc      	bne.n	800a8ca <_scanf_float+0x3aa>
 800a910:	681d      	ldr	r5, [r3, #0]
 800a912:	4632      	mov	r2, r6
 800a914:	463b      	mov	r3, r7
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f6 f90f 	bl	8000b3c <__aeabi_dcmpun>
 800a91e:	b128      	cbz	r0, 800a92c <_scanf_float+0x40c>
 800a920:	4808      	ldr	r0, [pc, #32]	@ (800a944 <_scanf_float+0x424>)
 800a922:	f000 f9b7 	bl	800ac94 <nanf>
 800a926:	ed85 0a00 	vstr	s0, [r5]
 800a92a:	e7d1      	b.n	800a8d0 <_scanf_float+0x3b0>
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f6 f962 	bl	8000bf8 <__aeabi_d2f>
 800a934:	6028      	str	r0, [r5, #0]
 800a936:	e7cb      	b.n	800a8d0 <_scanf_float+0x3b0>
 800a938:	f04f 0900 	mov.w	r9, #0
 800a93c:	e629      	b.n	800a592 <_scanf_float+0x72>
 800a93e:	bf00      	nop
 800a940:	0800f2ec 	.word	0x0800f2ec
 800a944:	0800f685 	.word	0x0800f685

0800a948 <std>:
 800a948:	2300      	movs	r3, #0
 800a94a:	b510      	push	{r4, lr}
 800a94c:	4604      	mov	r4, r0
 800a94e:	e9c0 3300 	strd	r3, r3, [r0]
 800a952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a956:	6083      	str	r3, [r0, #8]
 800a958:	8181      	strh	r1, [r0, #12]
 800a95a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a95c:	81c2      	strh	r2, [r0, #14]
 800a95e:	6183      	str	r3, [r0, #24]
 800a960:	4619      	mov	r1, r3
 800a962:	2208      	movs	r2, #8
 800a964:	305c      	adds	r0, #92	@ 0x5c
 800a966:	f000 f914 	bl	800ab92 <memset>
 800a96a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a0 <std+0x58>)
 800a96c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a96e:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a4 <std+0x5c>)
 800a970:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a972:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <std+0x60>)
 800a974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a976:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ac <std+0x64>)
 800a978:	6323      	str	r3, [r4, #48]	@ 0x30
 800a97a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <std+0x68>)
 800a97c:	6224      	str	r4, [r4, #32]
 800a97e:	429c      	cmp	r4, r3
 800a980:	d006      	beq.n	800a990 <std+0x48>
 800a982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a986:	4294      	cmp	r4, r2
 800a988:	d002      	beq.n	800a990 <std+0x48>
 800a98a:	33d0      	adds	r3, #208	@ 0xd0
 800a98c:	429c      	cmp	r4, r3
 800a98e:	d105      	bne.n	800a99c <std+0x54>
 800a990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a998:	f000 b978 	b.w	800ac8c <__retarget_lock_init_recursive>
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800ab0d 	.word	0x0800ab0d
 800a9a4:	0800ab2f 	.word	0x0800ab2f
 800a9a8:	0800ab67 	.word	0x0800ab67
 800a9ac:	0800ab8b 	.word	0x0800ab8b
 800a9b0:	20002060 	.word	0x20002060

0800a9b4 <stdio_exit_handler>:
 800a9b4:	4a02      	ldr	r2, [pc, #8]	@ (800a9c0 <stdio_exit_handler+0xc>)
 800a9b6:	4903      	ldr	r1, [pc, #12]	@ (800a9c4 <stdio_exit_handler+0x10>)
 800a9b8:	4803      	ldr	r0, [pc, #12]	@ (800a9c8 <stdio_exit_handler+0x14>)
 800a9ba:	f000 b869 	b.w	800aa90 <_fwalk_sglue>
 800a9be:	bf00      	nop
 800a9c0:	200000fc 	.word	0x200000fc
 800a9c4:	0800d55d 	.word	0x0800d55d
 800a9c8:	2000010c 	.word	0x2000010c

0800a9cc <cleanup_stdio>:
 800a9cc:	6841      	ldr	r1, [r0, #4]
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <cleanup_stdio+0x34>)
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	d001      	beq.n	800a9dc <cleanup_stdio+0x10>
 800a9d8:	f002 fdc0 	bl	800d55c <_fflush_r>
 800a9dc:	68a1      	ldr	r1, [r4, #8]
 800a9de:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <cleanup_stdio+0x38>)
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	d002      	beq.n	800a9ea <cleanup_stdio+0x1e>
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f002 fdb9 	bl	800d55c <_fflush_r>
 800a9ea:	68e1      	ldr	r1, [r4, #12]
 800a9ec:	4b06      	ldr	r3, [pc, #24]	@ (800aa08 <cleanup_stdio+0x3c>)
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d004      	beq.n	800a9fc <cleanup_stdio+0x30>
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f8:	f002 bdb0 	b.w	800d55c <_fflush_r>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	20002060 	.word	0x20002060
 800aa04:	200020c8 	.word	0x200020c8
 800aa08:	20002130 	.word	0x20002130

0800aa0c <global_stdio_init.part.0>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa3c <global_stdio_init.part.0+0x30>)
 800aa10:	4c0b      	ldr	r4, [pc, #44]	@ (800aa40 <global_stdio_init.part.0+0x34>)
 800aa12:	4a0c      	ldr	r2, [pc, #48]	@ (800aa44 <global_stdio_init.part.0+0x38>)
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2104      	movs	r1, #4
 800aa1c:	f7ff ff94 	bl	800a948 <std>
 800aa20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa24:	2201      	movs	r2, #1
 800aa26:	2109      	movs	r1, #9
 800aa28:	f7ff ff8e 	bl	800a948 <std>
 800aa2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa30:	2202      	movs	r2, #2
 800aa32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa36:	2112      	movs	r1, #18
 800aa38:	f7ff bf86 	b.w	800a948 <std>
 800aa3c:	20002198 	.word	0x20002198
 800aa40:	20002060 	.word	0x20002060
 800aa44:	0800a9b5 	.word	0x0800a9b5

0800aa48 <__sfp_lock_acquire>:
 800aa48:	4801      	ldr	r0, [pc, #4]	@ (800aa50 <__sfp_lock_acquire+0x8>)
 800aa4a:	f000 b920 	b.w	800ac8e <__retarget_lock_acquire_recursive>
 800aa4e:	bf00      	nop
 800aa50:	200021a1 	.word	0x200021a1

0800aa54 <__sfp_lock_release>:
 800aa54:	4801      	ldr	r0, [pc, #4]	@ (800aa5c <__sfp_lock_release+0x8>)
 800aa56:	f000 b91b 	b.w	800ac90 <__retarget_lock_release_recursive>
 800aa5a:	bf00      	nop
 800aa5c:	200021a1 	.word	0x200021a1

0800aa60 <__sinit>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	4604      	mov	r4, r0
 800aa64:	f7ff fff0 	bl	800aa48 <__sfp_lock_acquire>
 800aa68:	6a23      	ldr	r3, [r4, #32]
 800aa6a:	b11b      	cbz	r3, 800aa74 <__sinit+0x14>
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa70:	f7ff bff0 	b.w	800aa54 <__sfp_lock_release>
 800aa74:	4b04      	ldr	r3, [pc, #16]	@ (800aa88 <__sinit+0x28>)
 800aa76:	6223      	str	r3, [r4, #32]
 800aa78:	4b04      	ldr	r3, [pc, #16]	@ (800aa8c <__sinit+0x2c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1f5      	bne.n	800aa6c <__sinit+0xc>
 800aa80:	f7ff ffc4 	bl	800aa0c <global_stdio_init.part.0>
 800aa84:	e7f2      	b.n	800aa6c <__sinit+0xc>
 800aa86:	bf00      	nop
 800aa88:	0800a9cd 	.word	0x0800a9cd
 800aa8c:	20002198 	.word	0x20002198

0800aa90 <_fwalk_sglue>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4607      	mov	r7, r0
 800aa96:	4688      	mov	r8, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	2600      	movs	r6, #0
 800aa9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaa0:	f1b9 0901 	subs.w	r9, r9, #1
 800aaa4:	d505      	bpl.n	800aab2 <_fwalk_sglue+0x22>
 800aaa6:	6824      	ldr	r4, [r4, #0]
 800aaa8:	2c00      	cmp	r4, #0
 800aaaa:	d1f7      	bne.n	800aa9c <_fwalk_sglue+0xc>
 800aaac:	4630      	mov	r0, r6
 800aaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d907      	bls.n	800aac8 <_fwalk_sglue+0x38>
 800aab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aabc:	3301      	adds	r3, #1
 800aabe:	d003      	beq.n	800aac8 <_fwalk_sglue+0x38>
 800aac0:	4629      	mov	r1, r5
 800aac2:	4638      	mov	r0, r7
 800aac4:	47c0      	blx	r8
 800aac6:	4306      	orrs	r6, r0
 800aac8:	3568      	adds	r5, #104	@ 0x68
 800aaca:	e7e9      	b.n	800aaa0 <_fwalk_sglue+0x10>

0800aacc <siprintf>:
 800aacc:	b40e      	push	{r1, r2, r3}
 800aace:	b500      	push	{lr}
 800aad0:	b09c      	sub	sp, #112	@ 0x70
 800aad2:	ab1d      	add	r3, sp, #116	@ 0x74
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	9006      	str	r0, [sp, #24]
 800aad8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aadc:	4809      	ldr	r0, [pc, #36]	@ (800ab04 <siprintf+0x38>)
 800aade:	9107      	str	r1, [sp, #28]
 800aae0:	9104      	str	r1, [sp, #16]
 800aae2:	4909      	ldr	r1, [pc, #36]	@ (800ab08 <siprintf+0x3c>)
 800aae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae8:	9105      	str	r1, [sp, #20]
 800aaea:	6800      	ldr	r0, [r0, #0]
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	a902      	add	r1, sp, #8
 800aaf0:	f002 fbb4 	bl	800d25c <_svfiprintf_r>
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	b01c      	add	sp, #112	@ 0x70
 800aafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab00:	b003      	add	sp, #12
 800ab02:	4770      	bx	lr
 800ab04:	20000108 	.word	0x20000108
 800ab08:	ffff0208 	.word	0xffff0208

0800ab0c <__sread>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	460c      	mov	r4, r1
 800ab10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab14:	f000 f86c 	bl	800abf0 <_read_r>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	bfab      	itete	ge
 800ab1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab1e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab20:	181b      	addge	r3, r3, r0
 800ab22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab26:	bfac      	ite	ge
 800ab28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab2a:	81a3      	strhlt	r3, [r4, #12]
 800ab2c:	bd10      	pop	{r4, pc}

0800ab2e <__swrite>:
 800ab2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab32:	461f      	mov	r7, r3
 800ab34:	898b      	ldrh	r3, [r1, #12]
 800ab36:	05db      	lsls	r3, r3, #23
 800ab38:	4605      	mov	r5, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	4616      	mov	r6, r2
 800ab3e:	d505      	bpl.n	800ab4c <__swrite+0x1e>
 800ab40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab44:	2302      	movs	r3, #2
 800ab46:	2200      	movs	r2, #0
 800ab48:	f000 f840 	bl	800abcc <_lseek_r>
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab56:	81a3      	strh	r3, [r4, #12]
 800ab58:	4632      	mov	r2, r6
 800ab5a:	463b      	mov	r3, r7
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	f000 b857 	b.w	800ac14 <_write_r>

0800ab66 <__sseek>:
 800ab66:	b510      	push	{r4, lr}
 800ab68:	460c      	mov	r4, r1
 800ab6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6e:	f000 f82d 	bl	800abcc <_lseek_r>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	bf15      	itete	ne
 800ab78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab82:	81a3      	strheq	r3, [r4, #12]
 800ab84:	bf18      	it	ne
 800ab86:	81a3      	strhne	r3, [r4, #12]
 800ab88:	bd10      	pop	{r4, pc}

0800ab8a <__sclose>:
 800ab8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8e:	f000 b80d 	b.w	800abac <_close_r>

0800ab92 <memset>:
 800ab92:	4402      	add	r2, r0
 800ab94:	4603      	mov	r3, r0
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d100      	bne.n	800ab9c <memset+0xa>
 800ab9a:	4770      	bx	lr
 800ab9c:	f803 1b01 	strb.w	r1, [r3], #1
 800aba0:	e7f9      	b.n	800ab96 <memset+0x4>
	...

0800aba4 <_localeconv_r>:
 800aba4:	4800      	ldr	r0, [pc, #0]	@ (800aba8 <_localeconv_r+0x4>)
 800aba6:	4770      	bx	lr
 800aba8:	20000248 	.word	0x20000248

0800abac <_close_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d06      	ldr	r5, [pc, #24]	@ (800abc8 <_close_r+0x1c>)
 800abb0:	2300      	movs	r3, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f6 ffd0 	bl	8001b5c <_close>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_close_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_close_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	2000219c 	.word	0x2000219c

0800abcc <_lseek_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d07      	ldr	r5, [pc, #28]	@ (800abec <_lseek_r+0x20>)
 800abd0:	4604      	mov	r4, r0
 800abd2:	4608      	mov	r0, r1
 800abd4:	4611      	mov	r1, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	602a      	str	r2, [r5, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	f7f6 ffe5 	bl	8001baa <_lseek>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_lseek_r+0x1e>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_lseek_r+0x1e>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	2000219c 	.word	0x2000219c

0800abf0 <_read_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d07      	ldr	r5, [pc, #28]	@ (800ac10 <_read_r+0x20>)
 800abf4:	4604      	mov	r4, r0
 800abf6:	4608      	mov	r0, r1
 800abf8:	4611      	mov	r1, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f7f6 ff73 	bl	8001aea <_read>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_read_r+0x1e>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_read_r+0x1e>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	2000219c 	.word	0x2000219c

0800ac14 <_write_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d07      	ldr	r5, [pc, #28]	@ (800ac34 <_write_r+0x20>)
 800ac18:	4604      	mov	r4, r0
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	2200      	movs	r2, #0
 800ac20:	602a      	str	r2, [r5, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f7f6 ff7e 	bl	8001b24 <_write>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_write_r+0x1e>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_write_r+0x1e>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	2000219c 	.word	0x2000219c

0800ac38 <__errno>:
 800ac38:	4b01      	ldr	r3, [pc, #4]	@ (800ac40 <__errno+0x8>)
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20000108 	.word	0x20000108

0800ac44 <__libc_init_array>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	4d0d      	ldr	r5, [pc, #52]	@ (800ac7c <__libc_init_array+0x38>)
 800ac48:	4c0d      	ldr	r4, [pc, #52]	@ (800ac80 <__libc_init_array+0x3c>)
 800ac4a:	1b64      	subs	r4, r4, r5
 800ac4c:	10a4      	asrs	r4, r4, #2
 800ac4e:	2600      	movs	r6, #0
 800ac50:	42a6      	cmp	r6, r4
 800ac52:	d109      	bne.n	800ac68 <__libc_init_array+0x24>
 800ac54:	4d0b      	ldr	r5, [pc, #44]	@ (800ac84 <__libc_init_array+0x40>)
 800ac56:	4c0c      	ldr	r4, [pc, #48]	@ (800ac88 <__libc_init_array+0x44>)
 800ac58:	f004 fad0 	bl	800f1fc <_init>
 800ac5c:	1b64      	subs	r4, r4, r5
 800ac5e:	10a4      	asrs	r4, r4, #2
 800ac60:	2600      	movs	r6, #0
 800ac62:	42a6      	cmp	r6, r4
 800ac64:	d105      	bne.n	800ac72 <__libc_init_array+0x2e>
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6c:	4798      	blx	r3
 800ac6e:	3601      	adds	r6, #1
 800ac70:	e7ee      	b.n	800ac50 <__libc_init_array+0xc>
 800ac72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac76:	4798      	blx	r3
 800ac78:	3601      	adds	r6, #1
 800ac7a:	e7f2      	b.n	800ac62 <__libc_init_array+0x1e>
 800ac7c:	0800f720 	.word	0x0800f720
 800ac80:	0800f720 	.word	0x0800f720
 800ac84:	0800f720 	.word	0x0800f720
 800ac88:	0800f724 	.word	0x0800f724

0800ac8c <__retarget_lock_init_recursive>:
 800ac8c:	4770      	bx	lr

0800ac8e <__retarget_lock_acquire_recursive>:
 800ac8e:	4770      	bx	lr

0800ac90 <__retarget_lock_release_recursive>:
 800ac90:	4770      	bx	lr
	...

0800ac94 <nanf>:
 800ac94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac9c <nanf+0x8>
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	7fc00000 	.word	0x7fc00000

0800aca0 <quorem>:
 800aca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	6903      	ldr	r3, [r0, #16]
 800aca6:	690c      	ldr	r4, [r1, #16]
 800aca8:	42a3      	cmp	r3, r4
 800acaa:	4607      	mov	r7, r0
 800acac:	db7e      	blt.n	800adac <quorem+0x10c>
 800acae:	3c01      	subs	r4, #1
 800acb0:	f101 0814 	add.w	r8, r1, #20
 800acb4:	00a3      	lsls	r3, r4, #2
 800acb6:	f100 0514 	add.w	r5, r0, #20
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acca:	3301      	adds	r3, #1
 800accc:	429a      	cmp	r2, r3
 800acce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800acd6:	d32e      	bcc.n	800ad36 <quorem+0x96>
 800acd8:	f04f 0a00 	mov.w	sl, #0
 800acdc:	46c4      	mov	ip, r8
 800acde:	46ae      	mov	lr, r5
 800ace0:	46d3      	mov	fp, sl
 800ace2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ace6:	b298      	uxth	r0, r3
 800ace8:	fb06 a000 	mla	r0, r6, r0, sl
 800acec:	0c02      	lsrs	r2, r0, #16
 800acee:	0c1b      	lsrs	r3, r3, #16
 800acf0:	fb06 2303 	mla	r3, r6, r3, r2
 800acf4:	f8de 2000 	ldr.w	r2, [lr]
 800acf8:	b280      	uxth	r0, r0
 800acfa:	b292      	uxth	r2, r2
 800acfc:	1a12      	subs	r2, r2, r0
 800acfe:	445a      	add	r2, fp
 800ad00:	f8de 0000 	ldr.w	r0, [lr]
 800ad04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad12:	b292      	uxth	r2, r2
 800ad14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad18:	45e1      	cmp	r9, ip
 800ad1a:	f84e 2b04 	str.w	r2, [lr], #4
 800ad1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad22:	d2de      	bcs.n	800ace2 <quorem+0x42>
 800ad24:	9b00      	ldr	r3, [sp, #0]
 800ad26:	58eb      	ldr	r3, [r5, r3]
 800ad28:	b92b      	cbnz	r3, 800ad36 <quorem+0x96>
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	3b04      	subs	r3, #4
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	d32f      	bcc.n	800ad94 <quorem+0xf4>
 800ad34:	613c      	str	r4, [r7, #16]
 800ad36:	4638      	mov	r0, r7
 800ad38:	f001 f9c2 	bl	800c0c0 <__mcmp>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	db25      	blt.n	800ad8c <quorem+0xec>
 800ad40:	4629      	mov	r1, r5
 800ad42:	2000      	movs	r0, #0
 800ad44:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad48:	f8d1 c000 	ldr.w	ip, [r1]
 800ad4c:	fa1f fe82 	uxth.w	lr, r2
 800ad50:	fa1f f38c 	uxth.w	r3, ip
 800ad54:	eba3 030e 	sub.w	r3, r3, lr
 800ad58:	4403      	add	r3, r0
 800ad5a:	0c12      	lsrs	r2, r2, #16
 800ad5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad6a:	45c1      	cmp	r9, r8
 800ad6c:	f841 3b04 	str.w	r3, [r1], #4
 800ad70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad74:	d2e6      	bcs.n	800ad44 <quorem+0xa4>
 800ad76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad7e:	b922      	cbnz	r2, 800ad8a <quorem+0xea>
 800ad80:	3b04      	subs	r3, #4
 800ad82:	429d      	cmp	r5, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	d30b      	bcc.n	800ada0 <quorem+0x100>
 800ad88:	613c      	str	r4, [r7, #16]
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	b003      	add	sp, #12
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	3b04      	subs	r3, #4
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	d1cb      	bne.n	800ad34 <quorem+0x94>
 800ad9c:	3c01      	subs	r4, #1
 800ad9e:	e7c6      	b.n	800ad2e <quorem+0x8e>
 800ada0:	6812      	ldr	r2, [r2, #0]
 800ada2:	3b04      	subs	r3, #4
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	d1ef      	bne.n	800ad88 <quorem+0xe8>
 800ada8:	3c01      	subs	r4, #1
 800adaa:	e7ea      	b.n	800ad82 <quorem+0xe2>
 800adac:	2000      	movs	r0, #0
 800adae:	e7ee      	b.n	800ad8e <quorem+0xee>

0800adb0 <_dtoa_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	69c7      	ldr	r7, [r0, #28]
 800adb6:	b099      	sub	sp, #100	@ 0x64
 800adb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800adbc:	ec55 4b10 	vmov	r4, r5, d0
 800adc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800adc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800adc4:	4683      	mov	fp, r0
 800adc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800adc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adca:	b97f      	cbnz	r7, 800adec <_dtoa_r+0x3c>
 800adcc:	2010      	movs	r0, #16
 800adce:	f000 fdfd 	bl	800b9cc <malloc>
 800add2:	4602      	mov	r2, r0
 800add4:	f8cb 001c 	str.w	r0, [fp, #28]
 800add8:	b920      	cbnz	r0, 800ade4 <_dtoa_r+0x34>
 800adda:	4ba7      	ldr	r3, [pc, #668]	@ (800b078 <_dtoa_r+0x2c8>)
 800addc:	21ef      	movs	r1, #239	@ 0xef
 800adde:	48a7      	ldr	r0, [pc, #668]	@ (800b07c <_dtoa_r+0x2cc>)
 800ade0:	f002 fc36 	bl	800d650 <__assert_func>
 800ade4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ade8:	6007      	str	r7, [r0, #0]
 800adea:	60c7      	str	r7, [r0, #12]
 800adec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adf0:	6819      	ldr	r1, [r3, #0]
 800adf2:	b159      	cbz	r1, 800ae0c <_dtoa_r+0x5c>
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	604a      	str	r2, [r1, #4]
 800adf8:	2301      	movs	r3, #1
 800adfa:	4093      	lsls	r3, r2
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	4658      	mov	r0, fp
 800ae00:	f000 feda 	bl	800bbb8 <_Bfree>
 800ae04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	1e2b      	subs	r3, r5, #0
 800ae0e:	bfb9      	ittee	lt
 800ae10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae14:	9303      	strlt	r3, [sp, #12]
 800ae16:	2300      	movge	r3, #0
 800ae18:	6033      	strge	r3, [r6, #0]
 800ae1a:	9f03      	ldr	r7, [sp, #12]
 800ae1c:	4b98      	ldr	r3, [pc, #608]	@ (800b080 <_dtoa_r+0x2d0>)
 800ae1e:	bfbc      	itt	lt
 800ae20:	2201      	movlt	r2, #1
 800ae22:	6032      	strlt	r2, [r6, #0]
 800ae24:	43bb      	bics	r3, r7
 800ae26:	d112      	bne.n	800ae4e <_dtoa_r+0x9e>
 800ae28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae34:	4323      	orrs	r3, r4
 800ae36:	f000 854d 	beq.w	800b8d4 <_dtoa_r+0xb24>
 800ae3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b094 <_dtoa_r+0x2e4>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 854f 	beq.w	800b8e4 <_dtoa_r+0xb34>
 800ae46:	f10a 0303 	add.w	r3, sl, #3
 800ae4a:	f000 bd49 	b.w	800b8e0 <_dtoa_r+0xb30>
 800ae4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae52:	2200      	movs	r2, #0
 800ae54:	ec51 0b17 	vmov	r0, r1, d7
 800ae58:	2300      	movs	r3, #0
 800ae5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ae5e:	f7f5 fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae62:	4680      	mov	r8, r0
 800ae64:	b158      	cbz	r0, 800ae7e <_dtoa_r+0xce>
 800ae66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae68:	2301      	movs	r3, #1
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae6e:	b113      	cbz	r3, 800ae76 <_dtoa_r+0xc6>
 800ae70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae72:	4b84      	ldr	r3, [pc, #528]	@ (800b084 <_dtoa_r+0x2d4>)
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b098 <_dtoa_r+0x2e8>
 800ae7a:	f000 bd33 	b.w	800b8e4 <_dtoa_r+0xb34>
 800ae7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae82:	aa16      	add	r2, sp, #88	@ 0x58
 800ae84:	a917      	add	r1, sp, #92	@ 0x5c
 800ae86:	4658      	mov	r0, fp
 800ae88:	f001 fa3a 	bl	800c300 <__d2b>
 800ae8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae90:	4681      	mov	r9, r0
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	d077      	beq.n	800af86 <_dtoa_r+0x1d6>
 800ae96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ae9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aeac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4b74      	ldr	r3, [pc, #464]	@ (800b088 <_dtoa_r+0x2d8>)
 800aeb6:	f7f5 f9ef 	bl	8000298 <__aeabi_dsub>
 800aeba:	a369      	add	r3, pc, #420	@ (adr r3, 800b060 <_dtoa_r+0x2b0>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fba2 	bl	8000608 <__aeabi_dmul>
 800aec4:	a368      	add	r3, pc, #416	@ (adr r3, 800b068 <_dtoa_r+0x2b8>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f7f5 f9e7 	bl	800029c <__adddf3>
 800aece:	4604      	mov	r4, r0
 800aed0:	4630      	mov	r0, r6
 800aed2:	460d      	mov	r5, r1
 800aed4:	f7f5 fb2e 	bl	8000534 <__aeabi_i2d>
 800aed8:	a365      	add	r3, pc, #404	@ (adr r3, 800b070 <_dtoa_r+0x2c0>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fb93 	bl	8000608 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f9d7 	bl	800029c <__adddf3>
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	f7f5 fe39 	bl	8000b68 <__aeabi_d2iz>
 800aef6:	2200      	movs	r2, #0
 800aef8:	4607      	mov	r7, r0
 800aefa:	2300      	movs	r3, #0
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f7f5 fdf4 	bl	8000aec <__aeabi_dcmplt>
 800af04:	b140      	cbz	r0, 800af18 <_dtoa_r+0x168>
 800af06:	4638      	mov	r0, r7
 800af08:	f7f5 fb14 	bl	8000534 <__aeabi_i2d>
 800af0c:	4622      	mov	r2, r4
 800af0e:	462b      	mov	r3, r5
 800af10:	f7f5 fde2 	bl	8000ad8 <__aeabi_dcmpeq>
 800af14:	b900      	cbnz	r0, 800af18 <_dtoa_r+0x168>
 800af16:	3f01      	subs	r7, #1
 800af18:	2f16      	cmp	r7, #22
 800af1a:	d851      	bhi.n	800afc0 <_dtoa_r+0x210>
 800af1c:	4b5b      	ldr	r3, [pc, #364]	@ (800b08c <_dtoa_r+0x2dc>)
 800af1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af2a:	f7f5 fddf 	bl	8000aec <__aeabi_dcmplt>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d048      	beq.n	800afc4 <_dtoa_r+0x214>
 800af32:	3f01      	subs	r7, #1
 800af34:	2300      	movs	r3, #0
 800af36:	9312      	str	r3, [sp, #72]	@ 0x48
 800af38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	bf44      	itt	mi
 800af40:	f1c3 0801 	rsbmi	r8, r3, #1
 800af44:	2300      	movmi	r3, #0
 800af46:	9208      	str	r2, [sp, #32]
 800af48:	bf54      	ite	pl
 800af4a:	f04f 0800 	movpl.w	r8, #0
 800af4e:	9308      	strmi	r3, [sp, #32]
 800af50:	2f00      	cmp	r7, #0
 800af52:	db39      	blt.n	800afc8 <_dtoa_r+0x218>
 800af54:	9b08      	ldr	r3, [sp, #32]
 800af56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800af58:	443b      	add	r3, r7
 800af5a:	9308      	str	r3, [sp, #32]
 800af5c:	2300      	movs	r3, #0
 800af5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af62:	2b09      	cmp	r3, #9
 800af64:	d864      	bhi.n	800b030 <_dtoa_r+0x280>
 800af66:	2b05      	cmp	r3, #5
 800af68:	bfc4      	itt	gt
 800af6a:	3b04      	subgt	r3, #4
 800af6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800af6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af70:	f1a3 0302 	sub.w	r3, r3, #2
 800af74:	bfcc      	ite	gt
 800af76:	2400      	movgt	r4, #0
 800af78:	2401      	movle	r4, #1
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d863      	bhi.n	800b046 <_dtoa_r+0x296>
 800af7e:	e8df f003 	tbb	[pc, r3]
 800af82:	372a      	.short	0x372a
 800af84:	5535      	.short	0x5535
 800af86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800af8a:	441e      	add	r6, r3
 800af8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af90:	2b20      	cmp	r3, #32
 800af92:	bfc1      	itttt	gt
 800af94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af98:	409f      	lslgt	r7, r3
 800af9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800afa2:	bfd6      	itet	le
 800afa4:	f1c3 0320 	rsble	r3, r3, #32
 800afa8:	ea47 0003 	orrgt.w	r0, r7, r3
 800afac:	fa04 f003 	lslle.w	r0, r4, r3
 800afb0:	f7f5 fab0 	bl	8000514 <__aeabi_ui2d>
 800afb4:	2201      	movs	r2, #1
 800afb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800afba:	3e01      	subs	r6, #1
 800afbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800afbe:	e777      	b.n	800aeb0 <_dtoa_r+0x100>
 800afc0:	2301      	movs	r3, #1
 800afc2:	e7b8      	b.n	800af36 <_dtoa_r+0x186>
 800afc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800afc6:	e7b7      	b.n	800af38 <_dtoa_r+0x188>
 800afc8:	427b      	negs	r3, r7
 800afca:	930a      	str	r3, [sp, #40]	@ 0x28
 800afcc:	2300      	movs	r3, #0
 800afce:	eba8 0807 	sub.w	r8, r8, r7
 800afd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afd4:	e7c4      	b.n	800af60 <_dtoa_r+0x1b0>
 800afd6:	2300      	movs	r3, #0
 800afd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afdc:	2b00      	cmp	r3, #0
 800afde:	dc35      	bgt.n	800b04c <_dtoa_r+0x29c>
 800afe0:	2301      	movs	r3, #1
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	9307      	str	r3, [sp, #28]
 800afe6:	461a      	mov	r2, r3
 800afe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800afea:	e00b      	b.n	800b004 <_dtoa_r+0x254>
 800afec:	2301      	movs	r3, #1
 800afee:	e7f3      	b.n	800afd8 <_dtoa_r+0x228>
 800aff0:	2300      	movs	r3, #0
 800aff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aff6:	18fb      	adds	r3, r7, r3
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	3301      	adds	r3, #1
 800affc:	2b01      	cmp	r3, #1
 800affe:	9307      	str	r3, [sp, #28]
 800b000:	bfb8      	it	lt
 800b002:	2301      	movlt	r3, #1
 800b004:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b008:	2100      	movs	r1, #0
 800b00a:	2204      	movs	r2, #4
 800b00c:	f102 0514 	add.w	r5, r2, #20
 800b010:	429d      	cmp	r5, r3
 800b012:	d91f      	bls.n	800b054 <_dtoa_r+0x2a4>
 800b014:	6041      	str	r1, [r0, #4]
 800b016:	4658      	mov	r0, fp
 800b018:	f000 fd8e 	bl	800bb38 <_Balloc>
 800b01c:	4682      	mov	sl, r0
 800b01e:	2800      	cmp	r0, #0
 800b020:	d13c      	bne.n	800b09c <_dtoa_r+0x2ec>
 800b022:	4b1b      	ldr	r3, [pc, #108]	@ (800b090 <_dtoa_r+0x2e0>)
 800b024:	4602      	mov	r2, r0
 800b026:	f240 11af 	movw	r1, #431	@ 0x1af
 800b02a:	e6d8      	b.n	800adde <_dtoa_r+0x2e>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7e0      	b.n	800aff2 <_dtoa_r+0x242>
 800b030:	2401      	movs	r4, #1
 800b032:	2300      	movs	r3, #0
 800b034:	9309      	str	r3, [sp, #36]	@ 0x24
 800b036:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	9307      	str	r3, [sp, #28]
 800b040:	2200      	movs	r2, #0
 800b042:	2312      	movs	r3, #18
 800b044:	e7d0      	b.n	800afe8 <_dtoa_r+0x238>
 800b046:	2301      	movs	r3, #1
 800b048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b04a:	e7f5      	b.n	800b038 <_dtoa_r+0x288>
 800b04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	9307      	str	r3, [sp, #28]
 800b052:	e7d7      	b.n	800b004 <_dtoa_r+0x254>
 800b054:	3101      	adds	r1, #1
 800b056:	0052      	lsls	r2, r2, #1
 800b058:	e7d8      	b.n	800b00c <_dtoa_r+0x25c>
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w
 800b060:	636f4361 	.word	0x636f4361
 800b064:	3fd287a7 	.word	0x3fd287a7
 800b068:	8b60c8b3 	.word	0x8b60c8b3
 800b06c:	3fc68a28 	.word	0x3fc68a28
 800b070:	509f79fb 	.word	0x509f79fb
 800b074:	3fd34413 	.word	0x3fd34413
 800b078:	0800f2fe 	.word	0x0800f2fe
 800b07c:	0800f315 	.word	0x0800f315
 800b080:	7ff00000 	.word	0x7ff00000
 800b084:	0800f2c9 	.word	0x0800f2c9
 800b088:	3ff80000 	.word	0x3ff80000
 800b08c:	0800f410 	.word	0x0800f410
 800b090:	0800f36d 	.word	0x0800f36d
 800b094:	0800f2fa 	.word	0x0800f2fa
 800b098:	0800f2c8 	.word	0x0800f2c8
 800b09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0a0:	6018      	str	r0, [r3, #0]
 800b0a2:	9b07      	ldr	r3, [sp, #28]
 800b0a4:	2b0e      	cmp	r3, #14
 800b0a6:	f200 80a4 	bhi.w	800b1f2 <_dtoa_r+0x442>
 800b0aa:	2c00      	cmp	r4, #0
 800b0ac:	f000 80a1 	beq.w	800b1f2 <_dtoa_r+0x442>
 800b0b0:	2f00      	cmp	r7, #0
 800b0b2:	dd33      	ble.n	800b11c <_dtoa_r+0x36c>
 800b0b4:	4bad      	ldr	r3, [pc, #692]	@ (800b36c <_dtoa_r+0x5bc>)
 800b0b6:	f007 020f 	and.w	r2, r7, #15
 800b0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0be:	ed93 7b00 	vldr	d7, [r3]
 800b0c2:	05f8      	lsls	r0, r7, #23
 800b0c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b0cc:	d516      	bpl.n	800b0fc <_dtoa_r+0x34c>
 800b0ce:	4ba8      	ldr	r3, [pc, #672]	@ (800b370 <_dtoa_r+0x5c0>)
 800b0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0d8:	f7f5 fbc0 	bl	800085c <__aeabi_ddiv>
 800b0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0e0:	f004 040f 	and.w	r4, r4, #15
 800b0e4:	2603      	movs	r6, #3
 800b0e6:	4da2      	ldr	r5, [pc, #648]	@ (800b370 <_dtoa_r+0x5c0>)
 800b0e8:	b954      	cbnz	r4, 800b100 <_dtoa_r+0x350>
 800b0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0f2:	f7f5 fbb3 	bl	800085c <__aeabi_ddiv>
 800b0f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0fa:	e028      	b.n	800b14e <_dtoa_r+0x39e>
 800b0fc:	2602      	movs	r6, #2
 800b0fe:	e7f2      	b.n	800b0e6 <_dtoa_r+0x336>
 800b100:	07e1      	lsls	r1, r4, #31
 800b102:	d508      	bpl.n	800b116 <_dtoa_r+0x366>
 800b104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b10c:	f7f5 fa7c 	bl	8000608 <__aeabi_dmul>
 800b110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b114:	3601      	adds	r6, #1
 800b116:	1064      	asrs	r4, r4, #1
 800b118:	3508      	adds	r5, #8
 800b11a:	e7e5      	b.n	800b0e8 <_dtoa_r+0x338>
 800b11c:	f000 80d2 	beq.w	800b2c4 <_dtoa_r+0x514>
 800b120:	427c      	negs	r4, r7
 800b122:	4b92      	ldr	r3, [pc, #584]	@ (800b36c <_dtoa_r+0x5bc>)
 800b124:	4d92      	ldr	r5, [pc, #584]	@ (800b370 <_dtoa_r+0x5c0>)
 800b126:	f004 020f 	and.w	r2, r4, #15
 800b12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b136:	f7f5 fa67 	bl	8000608 <__aeabi_dmul>
 800b13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b13e:	1124      	asrs	r4, r4, #4
 800b140:	2300      	movs	r3, #0
 800b142:	2602      	movs	r6, #2
 800b144:	2c00      	cmp	r4, #0
 800b146:	f040 80b2 	bne.w	800b2ae <_dtoa_r+0x4fe>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1d3      	bne.n	800b0f6 <_dtoa_r+0x346>
 800b14e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 80b7 	beq.w	800b2c8 <_dtoa_r+0x518>
 800b15a:	4b86      	ldr	r3, [pc, #536]	@ (800b374 <_dtoa_r+0x5c4>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	4620      	mov	r0, r4
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 fcc3 	bl	8000aec <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	f000 80ae 	beq.w	800b2c8 <_dtoa_r+0x518>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 80aa 	beq.w	800b2c8 <_dtoa_r+0x518>
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	dd37      	ble.n	800b1ea <_dtoa_r+0x43a>
 800b17a:	1e7b      	subs	r3, r7, #1
 800b17c:	9304      	str	r3, [sp, #16]
 800b17e:	4620      	mov	r0, r4
 800b180:	4b7d      	ldr	r3, [pc, #500]	@ (800b378 <_dtoa_r+0x5c8>)
 800b182:	2200      	movs	r2, #0
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 fa3f 	bl	8000608 <__aeabi_dmul>
 800b18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b18e:	9c00      	ldr	r4, [sp, #0]
 800b190:	3601      	adds	r6, #1
 800b192:	4630      	mov	r0, r6
 800b194:	f7f5 f9ce 	bl	8000534 <__aeabi_i2d>
 800b198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b19c:	f7f5 fa34 	bl	8000608 <__aeabi_dmul>
 800b1a0:	4b76      	ldr	r3, [pc, #472]	@ (800b37c <_dtoa_r+0x5cc>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f7f5 f87a 	bl	800029c <__adddf3>
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b1ae:	2c00      	cmp	r4, #0
 800b1b0:	f040 808d 	bne.w	800b2ce <_dtoa_r+0x51e>
 800b1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b8:	4b71      	ldr	r3, [pc, #452]	@ (800b380 <_dtoa_r+0x5d0>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f7f5 f86c 	bl	8000298 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1c8:	462a      	mov	r2, r5
 800b1ca:	4633      	mov	r3, r6
 800b1cc:	f7f5 fcac 	bl	8000b28 <__aeabi_dcmpgt>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f040 828b 	bne.w	800b6ec <_dtoa_r+0x93c>
 800b1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1da:	462a      	mov	r2, r5
 800b1dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1e0:	f7f5 fc84 	bl	8000aec <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f040 8128 	bne.w	800b43a <_dtoa_r+0x68a>
 800b1ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b1ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b1f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f2c0 815a 	blt.w	800b4ae <_dtoa_r+0x6fe>
 800b1fa:	2f0e      	cmp	r7, #14
 800b1fc:	f300 8157 	bgt.w	800b4ae <_dtoa_r+0x6fe>
 800b200:	4b5a      	ldr	r3, [pc, #360]	@ (800b36c <_dtoa_r+0x5bc>)
 800b202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b206:	ed93 7b00 	vldr	d7, [r3]
 800b20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	ed8d 7b00 	vstr	d7, [sp]
 800b212:	da03      	bge.n	800b21c <_dtoa_r+0x46c>
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f340 8101 	ble.w	800b41e <_dtoa_r+0x66e>
 800b21c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b220:	4656      	mov	r6, sl
 800b222:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 fb17 	bl	800085c <__aeabi_ddiv>
 800b22e:	f7f5 fc9b 	bl	8000b68 <__aeabi_d2iz>
 800b232:	4680      	mov	r8, r0
 800b234:	f7f5 f97e 	bl	8000534 <__aeabi_i2d>
 800b238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23c:	f7f5 f9e4 	bl	8000608 <__aeabi_dmul>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b24c:	f7f5 f824 	bl	8000298 <__aeabi_dsub>
 800b250:	f806 4b01 	strb.w	r4, [r6], #1
 800b254:	9d07      	ldr	r5, [sp, #28]
 800b256:	eba6 040a 	sub.w	r4, r6, sl
 800b25a:	42a5      	cmp	r5, r4
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	f040 8117 	bne.w	800b492 <_dtoa_r+0x6e2>
 800b264:	f7f5 f81a 	bl	800029c <__adddf3>
 800b268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b26c:	4604      	mov	r4, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	f7f5 fc5a 	bl	8000b28 <__aeabi_dcmpgt>
 800b274:	2800      	cmp	r0, #0
 800b276:	f040 80f9 	bne.w	800b46c <_dtoa_r+0x6bc>
 800b27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b27e:	4620      	mov	r0, r4
 800b280:	4629      	mov	r1, r5
 800b282:	f7f5 fc29 	bl	8000ad8 <__aeabi_dcmpeq>
 800b286:	b118      	cbz	r0, 800b290 <_dtoa_r+0x4e0>
 800b288:	f018 0f01 	tst.w	r8, #1
 800b28c:	f040 80ee 	bne.w	800b46c <_dtoa_r+0x6bc>
 800b290:	4649      	mov	r1, r9
 800b292:	4658      	mov	r0, fp
 800b294:	f000 fc90 	bl	800bbb8 <_Bfree>
 800b298:	2300      	movs	r3, #0
 800b29a:	7033      	strb	r3, [r6, #0]
 800b29c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b29e:	3701      	adds	r7, #1
 800b2a0:	601f      	str	r7, [r3, #0]
 800b2a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 831d 	beq.w	800b8e4 <_dtoa_r+0xb34>
 800b2aa:	601e      	str	r6, [r3, #0]
 800b2ac:	e31a      	b.n	800b8e4 <_dtoa_r+0xb34>
 800b2ae:	07e2      	lsls	r2, r4, #31
 800b2b0:	d505      	bpl.n	800b2be <_dtoa_r+0x50e>
 800b2b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2b6:	f7f5 f9a7 	bl	8000608 <__aeabi_dmul>
 800b2ba:	3601      	adds	r6, #1
 800b2bc:	2301      	movs	r3, #1
 800b2be:	1064      	asrs	r4, r4, #1
 800b2c0:	3508      	adds	r5, #8
 800b2c2:	e73f      	b.n	800b144 <_dtoa_r+0x394>
 800b2c4:	2602      	movs	r6, #2
 800b2c6:	e742      	b.n	800b14e <_dtoa_r+0x39e>
 800b2c8:	9c07      	ldr	r4, [sp, #28]
 800b2ca:	9704      	str	r7, [sp, #16]
 800b2cc:	e761      	b.n	800b192 <_dtoa_r+0x3e2>
 800b2ce:	4b27      	ldr	r3, [pc, #156]	@ (800b36c <_dtoa_r+0x5bc>)
 800b2d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2da:	4454      	add	r4, sl
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d053      	beq.n	800b388 <_dtoa_r+0x5d8>
 800b2e0:	4928      	ldr	r1, [pc, #160]	@ (800b384 <_dtoa_r+0x5d4>)
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f7f5 faba 	bl	800085c <__aeabi_ddiv>
 800b2e8:	4633      	mov	r3, r6
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	f7f4 ffd4 	bl	8000298 <__aeabi_dsub>
 800b2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2f4:	4656      	mov	r6, sl
 800b2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2fa:	f7f5 fc35 	bl	8000b68 <__aeabi_d2iz>
 800b2fe:	4605      	mov	r5, r0
 800b300:	f7f5 f918 	bl	8000534 <__aeabi_i2d>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b30c:	f7f4 ffc4 	bl	8000298 <__aeabi_dsub>
 800b310:	3530      	adds	r5, #48	@ 0x30
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b31a:	f806 5b01 	strb.w	r5, [r6], #1
 800b31e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b322:	f7f5 fbe3 	bl	8000aec <__aeabi_dcmplt>
 800b326:	2800      	cmp	r0, #0
 800b328:	d171      	bne.n	800b40e <_dtoa_r+0x65e>
 800b32a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b32e:	4911      	ldr	r1, [pc, #68]	@ (800b374 <_dtoa_r+0x5c4>)
 800b330:	2000      	movs	r0, #0
 800b332:	f7f4 ffb1 	bl	8000298 <__aeabi_dsub>
 800b336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b33a:	f7f5 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f040 8095 	bne.w	800b46e <_dtoa_r+0x6be>
 800b344:	42a6      	cmp	r6, r4
 800b346:	f43f af50 	beq.w	800b1ea <_dtoa_r+0x43a>
 800b34a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b34e:	4b0a      	ldr	r3, [pc, #40]	@ (800b378 <_dtoa_r+0x5c8>)
 800b350:	2200      	movs	r2, #0
 800b352:	f7f5 f959 	bl	8000608 <__aeabi_dmul>
 800b356:	4b08      	ldr	r3, [pc, #32]	@ (800b378 <_dtoa_r+0x5c8>)
 800b358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b35c:	2200      	movs	r2, #0
 800b35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b362:	f7f5 f951 	bl	8000608 <__aeabi_dmul>
 800b366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36a:	e7c4      	b.n	800b2f6 <_dtoa_r+0x546>
 800b36c:	0800f410 	.word	0x0800f410
 800b370:	0800f3e8 	.word	0x0800f3e8
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	40240000 	.word	0x40240000
 800b37c:	401c0000 	.word	0x401c0000
 800b380:	40140000 	.word	0x40140000
 800b384:	3fe00000 	.word	0x3fe00000
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7f5 f93c 	bl	8000608 <__aeabi_dmul>
 800b390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b394:	9415      	str	r4, [sp, #84]	@ 0x54
 800b396:	4656      	mov	r6, sl
 800b398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b39c:	f7f5 fbe4 	bl	8000b68 <__aeabi_d2iz>
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	f7f5 f8c7 	bl	8000534 <__aeabi_i2d>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ae:	f7f4 ff73 	bl	8000298 <__aeabi_dsub>
 800b3b2:	3530      	adds	r5, #48	@ 0x30
 800b3b4:	f806 5b01 	strb.w	r5, [r6], #1
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	42a6      	cmp	r6, r4
 800b3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	d124      	bne.n	800b412 <_dtoa_r+0x662>
 800b3c8:	4bac      	ldr	r3, [pc, #688]	@ (800b67c <_dtoa_r+0x8cc>)
 800b3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3ce:	f7f4 ff65 	bl	800029c <__adddf3>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3da:	f7f5 fba5 	bl	8000b28 <__aeabi_dcmpgt>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d145      	bne.n	800b46e <_dtoa_r+0x6be>
 800b3e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3e6:	49a5      	ldr	r1, [pc, #660]	@ (800b67c <_dtoa_r+0x8cc>)
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	f7f4 ff55 	bl	8000298 <__aeabi_dsub>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f6:	f7f5 fb79 	bl	8000aec <__aeabi_dcmplt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f43f aef5 	beq.w	800b1ea <_dtoa_r+0x43a>
 800b400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b402:	1e73      	subs	r3, r6, #1
 800b404:	9315      	str	r3, [sp, #84]	@ 0x54
 800b406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b40a:	2b30      	cmp	r3, #48	@ 0x30
 800b40c:	d0f8      	beq.n	800b400 <_dtoa_r+0x650>
 800b40e:	9f04      	ldr	r7, [sp, #16]
 800b410:	e73e      	b.n	800b290 <_dtoa_r+0x4e0>
 800b412:	4b9b      	ldr	r3, [pc, #620]	@ (800b680 <_dtoa_r+0x8d0>)
 800b414:	f7f5 f8f8 	bl	8000608 <__aeabi_dmul>
 800b418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b41c:	e7bc      	b.n	800b398 <_dtoa_r+0x5e8>
 800b41e:	d10c      	bne.n	800b43a <_dtoa_r+0x68a>
 800b420:	4b98      	ldr	r3, [pc, #608]	@ (800b684 <_dtoa_r+0x8d4>)
 800b422:	2200      	movs	r2, #0
 800b424:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b428:	f7f5 f8ee 	bl	8000608 <__aeabi_dmul>
 800b42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b430:	f7f5 fb70 	bl	8000b14 <__aeabi_dcmpge>
 800b434:	2800      	cmp	r0, #0
 800b436:	f000 8157 	beq.w	800b6e8 <_dtoa_r+0x938>
 800b43a:	2400      	movs	r4, #0
 800b43c:	4625      	mov	r5, r4
 800b43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b440:	43db      	mvns	r3, r3
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	4656      	mov	r6, sl
 800b446:	2700      	movs	r7, #0
 800b448:	4621      	mov	r1, r4
 800b44a:	4658      	mov	r0, fp
 800b44c:	f000 fbb4 	bl	800bbb8 <_Bfree>
 800b450:	2d00      	cmp	r5, #0
 800b452:	d0dc      	beq.n	800b40e <_dtoa_r+0x65e>
 800b454:	b12f      	cbz	r7, 800b462 <_dtoa_r+0x6b2>
 800b456:	42af      	cmp	r7, r5
 800b458:	d003      	beq.n	800b462 <_dtoa_r+0x6b2>
 800b45a:	4639      	mov	r1, r7
 800b45c:	4658      	mov	r0, fp
 800b45e:	f000 fbab 	bl	800bbb8 <_Bfree>
 800b462:	4629      	mov	r1, r5
 800b464:	4658      	mov	r0, fp
 800b466:	f000 fba7 	bl	800bbb8 <_Bfree>
 800b46a:	e7d0      	b.n	800b40e <_dtoa_r+0x65e>
 800b46c:	9704      	str	r7, [sp, #16]
 800b46e:	4633      	mov	r3, r6
 800b470:	461e      	mov	r6, r3
 800b472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b476:	2a39      	cmp	r2, #57	@ 0x39
 800b478:	d107      	bne.n	800b48a <_dtoa_r+0x6da>
 800b47a:	459a      	cmp	sl, r3
 800b47c:	d1f8      	bne.n	800b470 <_dtoa_r+0x6c0>
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	3201      	adds	r2, #1
 800b482:	9204      	str	r2, [sp, #16]
 800b484:	2230      	movs	r2, #48	@ 0x30
 800b486:	f88a 2000 	strb.w	r2, [sl]
 800b48a:	781a      	ldrb	r2, [r3, #0]
 800b48c:	3201      	adds	r2, #1
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e7bd      	b.n	800b40e <_dtoa_r+0x65e>
 800b492:	4b7b      	ldr	r3, [pc, #492]	@ (800b680 <_dtoa_r+0x8d0>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	f7f5 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f aebb 	beq.w	800b222 <_dtoa_r+0x472>
 800b4ac:	e6f0      	b.n	800b290 <_dtoa_r+0x4e0>
 800b4ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	f000 80db 	beq.w	800b66c <_dtoa_r+0x8bc>
 800b4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b8:	2a01      	cmp	r2, #1
 800b4ba:	f300 80bf 	bgt.w	800b63c <_dtoa_r+0x88c>
 800b4be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b4c0:	2a00      	cmp	r2, #0
 800b4c2:	f000 80b7 	beq.w	800b634 <_dtoa_r+0x884>
 800b4c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b4ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b4cc:	4646      	mov	r6, r8
 800b4ce:	9a08      	ldr	r2, [sp, #32]
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	441a      	add	r2, r3
 800b4d4:	4658      	mov	r0, fp
 800b4d6:	4498      	add	r8, r3
 800b4d8:	9208      	str	r2, [sp, #32]
 800b4da:	f000 fc6b 	bl	800bdb4 <__i2b>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	b15e      	cbz	r6, 800b4fa <_dtoa_r+0x74a>
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd08      	ble.n	800b4fa <_dtoa_r+0x74a>
 800b4e8:	42b3      	cmp	r3, r6
 800b4ea:	9a08      	ldr	r2, [sp, #32]
 800b4ec:	bfa8      	it	ge
 800b4ee:	4633      	movge	r3, r6
 800b4f0:	eba8 0803 	sub.w	r8, r8, r3
 800b4f4:	1af6      	subs	r6, r6, r3
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	9308      	str	r3, [sp, #32]
 800b4fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fc:	b1f3      	cbz	r3, 800b53c <_dtoa_r+0x78c>
 800b4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 80b7 	beq.w	800b674 <_dtoa_r+0x8c4>
 800b506:	b18c      	cbz	r4, 800b52c <_dtoa_r+0x77c>
 800b508:	4629      	mov	r1, r5
 800b50a:	4622      	mov	r2, r4
 800b50c:	4658      	mov	r0, fp
 800b50e:	f000 fd11 	bl	800bf34 <__pow5mult>
 800b512:	464a      	mov	r2, r9
 800b514:	4601      	mov	r1, r0
 800b516:	4605      	mov	r5, r0
 800b518:	4658      	mov	r0, fp
 800b51a:	f000 fc61 	bl	800bde0 <__multiply>
 800b51e:	4649      	mov	r1, r9
 800b520:	9004      	str	r0, [sp, #16]
 800b522:	4658      	mov	r0, fp
 800b524:	f000 fb48 	bl	800bbb8 <_Bfree>
 800b528:	9b04      	ldr	r3, [sp, #16]
 800b52a:	4699      	mov	r9, r3
 800b52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b52e:	1b1a      	subs	r2, r3, r4
 800b530:	d004      	beq.n	800b53c <_dtoa_r+0x78c>
 800b532:	4649      	mov	r1, r9
 800b534:	4658      	mov	r0, fp
 800b536:	f000 fcfd 	bl	800bf34 <__pow5mult>
 800b53a:	4681      	mov	r9, r0
 800b53c:	2101      	movs	r1, #1
 800b53e:	4658      	mov	r0, fp
 800b540:	f000 fc38 	bl	800bdb4 <__i2b>
 800b544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b546:	4604      	mov	r4, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 81cf 	beq.w	800b8ec <_dtoa_r+0xb3c>
 800b54e:	461a      	mov	r2, r3
 800b550:	4601      	mov	r1, r0
 800b552:	4658      	mov	r0, fp
 800b554:	f000 fcee 	bl	800bf34 <__pow5mult>
 800b558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	4604      	mov	r4, r0
 800b55e:	f300 8095 	bgt.w	800b68c <_dtoa_r+0x8dc>
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f040 8087 	bne.w	800b678 <_dtoa_r+0x8c8>
 800b56a:	9b03      	ldr	r3, [sp, #12]
 800b56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 8089 	bne.w	800b688 <_dtoa_r+0x8d8>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b57c:	0d1b      	lsrs	r3, r3, #20
 800b57e:	051b      	lsls	r3, r3, #20
 800b580:	b12b      	cbz	r3, 800b58e <_dtoa_r+0x7de>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	3301      	adds	r3, #1
 800b586:	9308      	str	r3, [sp, #32]
 800b588:	f108 0801 	add.w	r8, r8, #1
 800b58c:	2301      	movs	r3, #1
 800b58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 81b0 	beq.w	800b8f8 <_dtoa_r+0xb48>
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b59e:	6918      	ldr	r0, [r3, #16]
 800b5a0:	f000 fbbc 	bl	800bd1c <__hi0bits>
 800b5a4:	f1c0 0020 	rsb	r0, r0, #32
 800b5a8:	9b08      	ldr	r3, [sp, #32]
 800b5aa:	4418      	add	r0, r3
 800b5ac:	f010 001f 	ands.w	r0, r0, #31
 800b5b0:	d077      	beq.n	800b6a2 <_dtoa_r+0x8f2>
 800b5b2:	f1c0 0320 	rsb	r3, r0, #32
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	dd6b      	ble.n	800b692 <_dtoa_r+0x8e2>
 800b5ba:	9b08      	ldr	r3, [sp, #32]
 800b5bc:	f1c0 001c 	rsb	r0, r0, #28
 800b5c0:	4403      	add	r3, r0
 800b5c2:	4480      	add	r8, r0
 800b5c4:	4406      	add	r6, r0
 800b5c6:	9308      	str	r3, [sp, #32]
 800b5c8:	f1b8 0f00 	cmp.w	r8, #0
 800b5cc:	dd05      	ble.n	800b5da <_dtoa_r+0x82a>
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	4642      	mov	r2, r8
 800b5d2:	4658      	mov	r0, fp
 800b5d4:	f000 fd08 	bl	800bfe8 <__lshift>
 800b5d8:	4681      	mov	r9, r0
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd05      	ble.n	800b5ec <_dtoa_r+0x83c>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4658      	mov	r0, fp
 800b5e6:	f000 fcff 	bl	800bfe8 <__lshift>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d059      	beq.n	800b6a6 <_dtoa_r+0x8f6>
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4648      	mov	r0, r9
 800b5f6:	f000 fd63 	bl	800c0c0 <__mcmp>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	da53      	bge.n	800b6a6 <_dtoa_r+0x8f6>
 800b5fe:	1e7b      	subs	r3, r7, #1
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	4649      	mov	r1, r9
 800b604:	2300      	movs	r3, #0
 800b606:	220a      	movs	r2, #10
 800b608:	4658      	mov	r0, fp
 800b60a:	f000 faf7 	bl	800bbfc <__multadd>
 800b60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b610:	4681      	mov	r9, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 8172 	beq.w	800b8fc <_dtoa_r+0xb4c>
 800b618:	2300      	movs	r3, #0
 800b61a:	4629      	mov	r1, r5
 800b61c:	220a      	movs	r2, #10
 800b61e:	4658      	mov	r0, fp
 800b620:	f000 faec 	bl	800bbfc <__multadd>
 800b624:	9b00      	ldr	r3, [sp, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	4605      	mov	r5, r0
 800b62a:	dc67      	bgt.n	800b6fc <_dtoa_r+0x94c>
 800b62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62e:	2b02      	cmp	r3, #2
 800b630:	dc41      	bgt.n	800b6b6 <_dtoa_r+0x906>
 800b632:	e063      	b.n	800b6fc <_dtoa_r+0x94c>
 800b634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b63a:	e746      	b.n	800b4ca <_dtoa_r+0x71a>
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	1e5c      	subs	r4, r3, #1
 800b640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b642:	42a3      	cmp	r3, r4
 800b644:	bfbf      	itttt	lt
 800b646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b64a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b64c:	1ae3      	sublt	r3, r4, r3
 800b64e:	bfb4      	ite	lt
 800b650:	18d2      	addlt	r2, r2, r3
 800b652:	1b1c      	subge	r4, r3, r4
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	bfbc      	itt	lt
 800b658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b65a:	2400      	movlt	r4, #0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfb5      	itete	lt
 800b660:	eba8 0603 	sublt.w	r6, r8, r3
 800b664:	9b07      	ldrge	r3, [sp, #28]
 800b666:	2300      	movlt	r3, #0
 800b668:	4646      	movge	r6, r8
 800b66a:	e730      	b.n	800b4ce <_dtoa_r+0x71e>
 800b66c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b66e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b670:	4646      	mov	r6, r8
 800b672:	e735      	b.n	800b4e0 <_dtoa_r+0x730>
 800b674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b676:	e75c      	b.n	800b532 <_dtoa_r+0x782>
 800b678:	2300      	movs	r3, #0
 800b67a:	e788      	b.n	800b58e <_dtoa_r+0x7de>
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	40240000 	.word	0x40240000
 800b684:	40140000 	.word	0x40140000
 800b688:	9b02      	ldr	r3, [sp, #8]
 800b68a:	e780      	b.n	800b58e <_dtoa_r+0x7de>
 800b68c:	2300      	movs	r3, #0
 800b68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b690:	e782      	b.n	800b598 <_dtoa_r+0x7e8>
 800b692:	d099      	beq.n	800b5c8 <_dtoa_r+0x818>
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	331c      	adds	r3, #28
 800b698:	441a      	add	r2, r3
 800b69a:	4498      	add	r8, r3
 800b69c:	441e      	add	r6, r3
 800b69e:	9208      	str	r2, [sp, #32]
 800b6a0:	e792      	b.n	800b5c8 <_dtoa_r+0x818>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	e7f6      	b.n	800b694 <_dtoa_r+0x8e4>
 800b6a6:	9b07      	ldr	r3, [sp, #28]
 800b6a8:	9704      	str	r7, [sp, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	dc20      	bgt.n	800b6f0 <_dtoa_r+0x940>
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	dd1e      	ble.n	800b6f4 <_dtoa_r+0x944>
 800b6b6:	9b00      	ldr	r3, [sp, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f47f aec0 	bne.w	800b43e <_dtoa_r+0x68e>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	4658      	mov	r0, fp
 800b6c4:	f000 fa9a 	bl	800bbfc <__multadd>
 800b6c8:	4601      	mov	r1, r0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4648      	mov	r0, r9
 800b6ce:	f000 fcf7 	bl	800c0c0 <__mcmp>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f77f aeb3 	ble.w	800b43e <_dtoa_r+0x68e>
 800b6d8:	4656      	mov	r6, sl
 800b6da:	2331      	movs	r3, #49	@ 0x31
 800b6dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	e6ae      	b.n	800b446 <_dtoa_r+0x696>
 800b6e8:	9c07      	ldr	r4, [sp, #28]
 800b6ea:	9704      	str	r7, [sp, #16]
 800b6ec:	4625      	mov	r5, r4
 800b6ee:	e7f3      	b.n	800b6d8 <_dtoa_r+0x928>
 800b6f0:	9b07      	ldr	r3, [sp, #28]
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 8104 	beq.w	800b904 <_dtoa_r+0xb54>
 800b6fc:	2e00      	cmp	r6, #0
 800b6fe:	dd05      	ble.n	800b70c <_dtoa_r+0x95c>
 800b700:	4629      	mov	r1, r5
 800b702:	4632      	mov	r2, r6
 800b704:	4658      	mov	r0, fp
 800b706:	f000 fc6f 	bl	800bfe8 <__lshift>
 800b70a:	4605      	mov	r5, r0
 800b70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d05a      	beq.n	800b7c8 <_dtoa_r+0xa18>
 800b712:	6869      	ldr	r1, [r5, #4]
 800b714:	4658      	mov	r0, fp
 800b716:	f000 fa0f 	bl	800bb38 <_Balloc>
 800b71a:	4606      	mov	r6, r0
 800b71c:	b928      	cbnz	r0, 800b72a <_dtoa_r+0x97a>
 800b71e:	4b84      	ldr	r3, [pc, #528]	@ (800b930 <_dtoa_r+0xb80>)
 800b720:	4602      	mov	r2, r0
 800b722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b726:	f7ff bb5a 	b.w	800adde <_dtoa_r+0x2e>
 800b72a:	692a      	ldr	r2, [r5, #16]
 800b72c:	3202      	adds	r2, #2
 800b72e:	0092      	lsls	r2, r2, #2
 800b730:	f105 010c 	add.w	r1, r5, #12
 800b734:	300c      	adds	r0, #12
 800b736:	f001 ff75 	bl	800d624 <memcpy>
 800b73a:	2201      	movs	r2, #1
 800b73c:	4631      	mov	r1, r6
 800b73e:	4658      	mov	r0, fp
 800b740:	f000 fc52 	bl	800bfe8 <__lshift>
 800b744:	f10a 0301 	add.w	r3, sl, #1
 800b748:	9307      	str	r3, [sp, #28]
 800b74a:	9b00      	ldr	r3, [sp, #0]
 800b74c:	4453      	add	r3, sl
 800b74e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b750:	9b02      	ldr	r3, [sp, #8]
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	462f      	mov	r7, r5
 800b758:	930a      	str	r3, [sp, #40]	@ 0x28
 800b75a:	4605      	mov	r5, r0
 800b75c:	9b07      	ldr	r3, [sp, #28]
 800b75e:	4621      	mov	r1, r4
 800b760:	3b01      	subs	r3, #1
 800b762:	4648      	mov	r0, r9
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	f7ff fa9b 	bl	800aca0 <quorem>
 800b76a:	4639      	mov	r1, r7
 800b76c:	9002      	str	r0, [sp, #8]
 800b76e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b772:	4648      	mov	r0, r9
 800b774:	f000 fca4 	bl	800c0c0 <__mcmp>
 800b778:	462a      	mov	r2, r5
 800b77a:	9008      	str	r0, [sp, #32]
 800b77c:	4621      	mov	r1, r4
 800b77e:	4658      	mov	r0, fp
 800b780:	f000 fcba 	bl	800c0f8 <__mdiff>
 800b784:	68c2      	ldr	r2, [r0, #12]
 800b786:	4606      	mov	r6, r0
 800b788:	bb02      	cbnz	r2, 800b7cc <_dtoa_r+0xa1c>
 800b78a:	4601      	mov	r1, r0
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 fc97 	bl	800c0c0 <__mcmp>
 800b792:	4602      	mov	r2, r0
 800b794:	4631      	mov	r1, r6
 800b796:	4658      	mov	r0, fp
 800b798:	920e      	str	r2, [sp, #56]	@ 0x38
 800b79a:	f000 fa0d 	bl	800bbb8 <_Bfree>
 800b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7a2:	9e07      	ldr	r6, [sp, #28]
 800b7a4:	ea43 0102 	orr.w	r1, r3, r2
 800b7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7aa:	4319      	orrs	r1, r3
 800b7ac:	d110      	bne.n	800b7d0 <_dtoa_r+0xa20>
 800b7ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7b2:	d029      	beq.n	800b808 <_dtoa_r+0xa58>
 800b7b4:	9b08      	ldr	r3, [sp, #32]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dd02      	ble.n	800b7c0 <_dtoa_r+0xa10>
 800b7ba:	9b02      	ldr	r3, [sp, #8]
 800b7bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b7c0:	9b00      	ldr	r3, [sp, #0]
 800b7c2:	f883 8000 	strb.w	r8, [r3]
 800b7c6:	e63f      	b.n	800b448 <_dtoa_r+0x698>
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	e7bb      	b.n	800b744 <_dtoa_r+0x994>
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	e7e1      	b.n	800b794 <_dtoa_r+0x9e4>
 800b7d0:	9b08      	ldr	r3, [sp, #32]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	db04      	blt.n	800b7e0 <_dtoa_r+0xa30>
 800b7d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7d8:	430b      	orrs	r3, r1
 800b7da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7dc:	430b      	orrs	r3, r1
 800b7de:	d120      	bne.n	800b822 <_dtoa_r+0xa72>
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	dded      	ble.n	800b7c0 <_dtoa_r+0xa10>
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 fbfd 	bl	800bfe8 <__lshift>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4681      	mov	r9, r0
 800b7f2:	f000 fc65 	bl	800c0c0 <__mcmp>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	dc03      	bgt.n	800b802 <_dtoa_r+0xa52>
 800b7fa:	d1e1      	bne.n	800b7c0 <_dtoa_r+0xa10>
 800b7fc:	f018 0f01 	tst.w	r8, #1
 800b800:	d0de      	beq.n	800b7c0 <_dtoa_r+0xa10>
 800b802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b806:	d1d8      	bne.n	800b7ba <_dtoa_r+0xa0a>
 800b808:	9a00      	ldr	r2, [sp, #0]
 800b80a:	2339      	movs	r3, #57	@ 0x39
 800b80c:	7013      	strb	r3, [r2, #0]
 800b80e:	4633      	mov	r3, r6
 800b810:	461e      	mov	r6, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b818:	2a39      	cmp	r2, #57	@ 0x39
 800b81a:	d052      	beq.n	800b8c2 <_dtoa_r+0xb12>
 800b81c:	3201      	adds	r2, #1
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	e612      	b.n	800b448 <_dtoa_r+0x698>
 800b822:	2a00      	cmp	r2, #0
 800b824:	dd07      	ble.n	800b836 <_dtoa_r+0xa86>
 800b826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b82a:	d0ed      	beq.n	800b808 <_dtoa_r+0xa58>
 800b82c:	9a00      	ldr	r2, [sp, #0]
 800b82e:	f108 0301 	add.w	r3, r8, #1
 800b832:	7013      	strb	r3, [r2, #0]
 800b834:	e608      	b.n	800b448 <_dtoa_r+0x698>
 800b836:	9b07      	ldr	r3, [sp, #28]
 800b838:	9a07      	ldr	r2, [sp, #28]
 800b83a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b840:	4293      	cmp	r3, r2
 800b842:	d028      	beq.n	800b896 <_dtoa_r+0xae6>
 800b844:	4649      	mov	r1, r9
 800b846:	2300      	movs	r3, #0
 800b848:	220a      	movs	r2, #10
 800b84a:	4658      	mov	r0, fp
 800b84c:	f000 f9d6 	bl	800bbfc <__multadd>
 800b850:	42af      	cmp	r7, r5
 800b852:	4681      	mov	r9, r0
 800b854:	f04f 0300 	mov.w	r3, #0
 800b858:	f04f 020a 	mov.w	r2, #10
 800b85c:	4639      	mov	r1, r7
 800b85e:	4658      	mov	r0, fp
 800b860:	d107      	bne.n	800b872 <_dtoa_r+0xac2>
 800b862:	f000 f9cb 	bl	800bbfc <__multadd>
 800b866:	4607      	mov	r7, r0
 800b868:	4605      	mov	r5, r0
 800b86a:	9b07      	ldr	r3, [sp, #28]
 800b86c:	3301      	adds	r3, #1
 800b86e:	9307      	str	r3, [sp, #28]
 800b870:	e774      	b.n	800b75c <_dtoa_r+0x9ac>
 800b872:	f000 f9c3 	bl	800bbfc <__multadd>
 800b876:	4629      	mov	r1, r5
 800b878:	4607      	mov	r7, r0
 800b87a:	2300      	movs	r3, #0
 800b87c:	220a      	movs	r2, #10
 800b87e:	4658      	mov	r0, fp
 800b880:	f000 f9bc 	bl	800bbfc <__multadd>
 800b884:	4605      	mov	r5, r0
 800b886:	e7f0      	b.n	800b86a <_dtoa_r+0xaba>
 800b888:	9b00      	ldr	r3, [sp, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bfcc      	ite	gt
 800b88e:	461e      	movgt	r6, r3
 800b890:	2601      	movle	r6, #1
 800b892:	4456      	add	r6, sl
 800b894:	2700      	movs	r7, #0
 800b896:	4649      	mov	r1, r9
 800b898:	2201      	movs	r2, #1
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 fba4 	bl	800bfe8 <__lshift>
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	4681      	mov	r9, r0
 800b8a4:	f000 fc0c 	bl	800c0c0 <__mcmp>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	dcb0      	bgt.n	800b80e <_dtoa_r+0xa5e>
 800b8ac:	d102      	bne.n	800b8b4 <_dtoa_r+0xb04>
 800b8ae:	f018 0f01 	tst.w	r8, #1
 800b8b2:	d1ac      	bne.n	800b80e <_dtoa_r+0xa5e>
 800b8b4:	4633      	mov	r3, r6
 800b8b6:	461e      	mov	r6, r3
 800b8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8bc:	2a30      	cmp	r2, #48	@ 0x30
 800b8be:	d0fa      	beq.n	800b8b6 <_dtoa_r+0xb06>
 800b8c0:	e5c2      	b.n	800b448 <_dtoa_r+0x698>
 800b8c2:	459a      	cmp	sl, r3
 800b8c4:	d1a4      	bne.n	800b810 <_dtoa_r+0xa60>
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	2331      	movs	r3, #49	@ 0x31
 800b8ce:	f88a 3000 	strb.w	r3, [sl]
 800b8d2:	e5b9      	b.n	800b448 <_dtoa_r+0x698>
 800b8d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b934 <_dtoa_r+0xb84>
 800b8da:	b11b      	cbz	r3, 800b8e4 <_dtoa_r+0xb34>
 800b8dc:	f10a 0308 	add.w	r3, sl, #8
 800b8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	b019      	add	sp, #100	@ 0x64
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	f77f ae37 	ble.w	800b562 <_dtoa_r+0x7b2>
 800b8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	e655      	b.n	800b5a8 <_dtoa_r+0x7f8>
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f77f aed6 	ble.w	800b6b0 <_dtoa_r+0x900>
 800b904:	4656      	mov	r6, sl
 800b906:	4621      	mov	r1, r4
 800b908:	4648      	mov	r0, r9
 800b90a:	f7ff f9c9 	bl	800aca0 <quorem>
 800b90e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b912:	f806 8b01 	strb.w	r8, [r6], #1
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	eba6 020a 	sub.w	r2, r6, sl
 800b91c:	4293      	cmp	r3, r2
 800b91e:	ddb3      	ble.n	800b888 <_dtoa_r+0xad8>
 800b920:	4649      	mov	r1, r9
 800b922:	2300      	movs	r3, #0
 800b924:	220a      	movs	r2, #10
 800b926:	4658      	mov	r0, fp
 800b928:	f000 f968 	bl	800bbfc <__multadd>
 800b92c:	4681      	mov	r9, r0
 800b92e:	e7ea      	b.n	800b906 <_dtoa_r+0xb56>
 800b930:	0800f36d 	.word	0x0800f36d
 800b934:	0800f2f1 	.word	0x0800f2f1

0800b938 <_free_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4605      	mov	r5, r0
 800b93c:	2900      	cmp	r1, #0
 800b93e:	d041      	beq.n	800b9c4 <_free_r+0x8c>
 800b940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b944:	1f0c      	subs	r4, r1, #4
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfb8      	it	lt
 800b94a:	18e4      	addlt	r4, r4, r3
 800b94c:	f000 f8e8 	bl	800bb20 <__malloc_lock>
 800b950:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c8 <_free_r+0x90>)
 800b952:	6813      	ldr	r3, [r2, #0]
 800b954:	b933      	cbnz	r3, 800b964 <_free_r+0x2c>
 800b956:	6063      	str	r3, [r4, #4]
 800b958:	6014      	str	r4, [r2, #0]
 800b95a:	4628      	mov	r0, r5
 800b95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b960:	f000 b8e4 	b.w	800bb2c <__malloc_unlock>
 800b964:	42a3      	cmp	r3, r4
 800b966:	d908      	bls.n	800b97a <_free_r+0x42>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	1821      	adds	r1, r4, r0
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf01      	itttt	eq
 800b970:	6819      	ldreq	r1, [r3, #0]
 800b972:	685b      	ldreq	r3, [r3, #4]
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	e7ed      	b.n	800b956 <_free_r+0x1e>
 800b97a:	461a      	mov	r2, r3
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	b10b      	cbz	r3, 800b984 <_free_r+0x4c>
 800b980:	42a3      	cmp	r3, r4
 800b982:	d9fa      	bls.n	800b97a <_free_r+0x42>
 800b984:	6811      	ldr	r1, [r2, #0]
 800b986:	1850      	adds	r0, r2, r1
 800b988:	42a0      	cmp	r0, r4
 800b98a:	d10b      	bne.n	800b9a4 <_free_r+0x6c>
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	4401      	add	r1, r0
 800b990:	1850      	adds	r0, r2, r1
 800b992:	4283      	cmp	r3, r0
 800b994:	6011      	str	r1, [r2, #0]
 800b996:	d1e0      	bne.n	800b95a <_free_r+0x22>
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	6053      	str	r3, [r2, #4]
 800b99e:	4408      	add	r0, r1
 800b9a0:	6010      	str	r0, [r2, #0]
 800b9a2:	e7da      	b.n	800b95a <_free_r+0x22>
 800b9a4:	d902      	bls.n	800b9ac <_free_r+0x74>
 800b9a6:	230c      	movs	r3, #12
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	e7d6      	b.n	800b95a <_free_r+0x22>
 800b9ac:	6820      	ldr	r0, [r4, #0]
 800b9ae:	1821      	adds	r1, r4, r0
 800b9b0:	428b      	cmp	r3, r1
 800b9b2:	bf04      	itt	eq
 800b9b4:	6819      	ldreq	r1, [r3, #0]
 800b9b6:	685b      	ldreq	r3, [r3, #4]
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	bf04      	itt	eq
 800b9bc:	1809      	addeq	r1, r1, r0
 800b9be:	6021      	streq	r1, [r4, #0]
 800b9c0:	6054      	str	r4, [r2, #4]
 800b9c2:	e7ca      	b.n	800b95a <_free_r+0x22>
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	200021a8 	.word	0x200021a8

0800b9cc <malloc>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	@ (800b9d8 <malloc+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f000 b825 	b.w	800ba20 <_malloc_r>
 800b9d6:	bf00      	nop
 800b9d8:	20000108 	.word	0x20000108

0800b9dc <sbrk_aligned>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4e0f      	ldr	r6, [pc, #60]	@ (800ba1c <sbrk_aligned+0x40>)
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6831      	ldr	r1, [r6, #0]
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	b911      	cbnz	r1, 800b9ee <sbrk_aligned+0x12>
 800b9e8:	f001 fe0c 	bl	800d604 <_sbrk_r>
 800b9ec:	6030      	str	r0, [r6, #0]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f001 fe07 	bl	800d604 <_sbrk_r>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d103      	bne.n	800ba02 <sbrk_aligned+0x26>
 800b9fa:	f04f 34ff 	mov.w	r4, #4294967295
 800b9fe:	4620      	mov	r0, r4
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	1cc4      	adds	r4, r0, #3
 800ba04:	f024 0403 	bic.w	r4, r4, #3
 800ba08:	42a0      	cmp	r0, r4
 800ba0a:	d0f8      	beq.n	800b9fe <sbrk_aligned+0x22>
 800ba0c:	1a21      	subs	r1, r4, r0
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f001 fdf8 	bl	800d604 <_sbrk_r>
 800ba14:	3001      	adds	r0, #1
 800ba16:	d1f2      	bne.n	800b9fe <sbrk_aligned+0x22>
 800ba18:	e7ef      	b.n	800b9fa <sbrk_aligned+0x1e>
 800ba1a:	bf00      	nop
 800ba1c:	200021a4 	.word	0x200021a4

0800ba20 <_malloc_r>:
 800ba20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba24:	1ccd      	adds	r5, r1, #3
 800ba26:	f025 0503 	bic.w	r5, r5, #3
 800ba2a:	3508      	adds	r5, #8
 800ba2c:	2d0c      	cmp	r5, #12
 800ba2e:	bf38      	it	cc
 800ba30:	250c      	movcc	r5, #12
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	4606      	mov	r6, r0
 800ba36:	db01      	blt.n	800ba3c <_malloc_r+0x1c>
 800ba38:	42a9      	cmp	r1, r5
 800ba3a:	d904      	bls.n	800ba46 <_malloc_r+0x26>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	6033      	str	r3, [r6, #0]
 800ba40:	2000      	movs	r0, #0
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb1c <_malloc_r+0xfc>
 800ba4a:	f000 f869 	bl	800bb20 <__malloc_lock>
 800ba4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba52:	461c      	mov	r4, r3
 800ba54:	bb44      	cbnz	r4, 800baa8 <_malloc_r+0x88>
 800ba56:	4629      	mov	r1, r5
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff ffbf 	bl	800b9dc <sbrk_aligned>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	4604      	mov	r4, r0
 800ba62:	d158      	bne.n	800bb16 <_malloc_r+0xf6>
 800ba64:	f8d8 4000 	ldr.w	r4, [r8]
 800ba68:	4627      	mov	r7, r4
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	d143      	bne.n	800baf6 <_malloc_r+0xd6>
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d04b      	beq.n	800bb0a <_malloc_r+0xea>
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	4639      	mov	r1, r7
 800ba76:	4630      	mov	r0, r6
 800ba78:	eb04 0903 	add.w	r9, r4, r3
 800ba7c:	f001 fdc2 	bl	800d604 <_sbrk_r>
 800ba80:	4581      	cmp	r9, r0
 800ba82:	d142      	bne.n	800bb0a <_malloc_r+0xea>
 800ba84:	6821      	ldr	r1, [r4, #0]
 800ba86:	1a6d      	subs	r5, r5, r1
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffa6 	bl	800b9dc <sbrk_aligned>
 800ba90:	3001      	adds	r0, #1
 800ba92:	d03a      	beq.n	800bb0a <_malloc_r+0xea>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	442b      	add	r3, r5
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	bb62      	cbnz	r2, 800bafc <_malloc_r+0xdc>
 800baa2:	f8c8 7000 	str.w	r7, [r8]
 800baa6:	e00f      	b.n	800bac8 <_malloc_r+0xa8>
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	1b52      	subs	r2, r2, r5
 800baac:	d420      	bmi.n	800baf0 <_malloc_r+0xd0>
 800baae:	2a0b      	cmp	r2, #11
 800bab0:	d917      	bls.n	800bae2 <_malloc_r+0xc2>
 800bab2:	1961      	adds	r1, r4, r5
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	6025      	str	r5, [r4, #0]
 800bab8:	bf18      	it	ne
 800baba:	6059      	strne	r1, [r3, #4]
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	bf08      	it	eq
 800bac0:	f8c8 1000 	streq.w	r1, [r8]
 800bac4:	5162      	str	r2, [r4, r5]
 800bac6:	604b      	str	r3, [r1, #4]
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 f82f 	bl	800bb2c <__malloc_unlock>
 800bace:	f104 000b 	add.w	r0, r4, #11
 800bad2:	1d23      	adds	r3, r4, #4
 800bad4:	f020 0007 	bic.w	r0, r0, #7
 800bad8:	1ac2      	subs	r2, r0, r3
 800bada:	bf1c      	itt	ne
 800badc:	1a1b      	subne	r3, r3, r0
 800bade:	50a3      	strne	r3, [r4, r2]
 800bae0:	e7af      	b.n	800ba42 <_malloc_r+0x22>
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	bf0c      	ite	eq
 800bae8:	f8c8 2000 	streq.w	r2, [r8]
 800baec:	605a      	strne	r2, [r3, #4]
 800baee:	e7eb      	b.n	800bac8 <_malloc_r+0xa8>
 800baf0:	4623      	mov	r3, r4
 800baf2:	6864      	ldr	r4, [r4, #4]
 800baf4:	e7ae      	b.n	800ba54 <_malloc_r+0x34>
 800baf6:	463c      	mov	r4, r7
 800baf8:	687f      	ldr	r7, [r7, #4]
 800bafa:	e7b6      	b.n	800ba6a <_malloc_r+0x4a>
 800bafc:	461a      	mov	r2, r3
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	d1fb      	bne.n	800bafc <_malloc_r+0xdc>
 800bb04:	2300      	movs	r3, #0
 800bb06:	6053      	str	r3, [r2, #4]
 800bb08:	e7de      	b.n	800bac8 <_malloc_r+0xa8>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	6033      	str	r3, [r6, #0]
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f000 f80c 	bl	800bb2c <__malloc_unlock>
 800bb14:	e794      	b.n	800ba40 <_malloc_r+0x20>
 800bb16:	6005      	str	r5, [r0, #0]
 800bb18:	e7d6      	b.n	800bac8 <_malloc_r+0xa8>
 800bb1a:	bf00      	nop
 800bb1c:	200021a8 	.word	0x200021a8

0800bb20 <__malloc_lock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	@ (800bb28 <__malloc_lock+0x8>)
 800bb22:	f7ff b8b4 	b.w	800ac8e <__retarget_lock_acquire_recursive>
 800bb26:	bf00      	nop
 800bb28:	200021a0 	.word	0x200021a0

0800bb2c <__malloc_unlock>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	@ (800bb34 <__malloc_unlock+0x8>)
 800bb2e:	f7ff b8af 	b.w	800ac90 <__retarget_lock_release_recursive>
 800bb32:	bf00      	nop
 800bb34:	200021a0 	.word	0x200021a0

0800bb38 <_Balloc>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	69c6      	ldr	r6, [r0, #28]
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	460d      	mov	r5, r1
 800bb40:	b976      	cbnz	r6, 800bb60 <_Balloc+0x28>
 800bb42:	2010      	movs	r0, #16
 800bb44:	f7ff ff42 	bl	800b9cc <malloc>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	61e0      	str	r0, [r4, #28]
 800bb4c:	b920      	cbnz	r0, 800bb58 <_Balloc+0x20>
 800bb4e:	4b18      	ldr	r3, [pc, #96]	@ (800bbb0 <_Balloc+0x78>)
 800bb50:	4818      	ldr	r0, [pc, #96]	@ (800bbb4 <_Balloc+0x7c>)
 800bb52:	216b      	movs	r1, #107	@ 0x6b
 800bb54:	f001 fd7c 	bl	800d650 <__assert_func>
 800bb58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb5c:	6006      	str	r6, [r0, #0]
 800bb5e:	60c6      	str	r6, [r0, #12]
 800bb60:	69e6      	ldr	r6, [r4, #28]
 800bb62:	68f3      	ldr	r3, [r6, #12]
 800bb64:	b183      	cbz	r3, 800bb88 <_Balloc+0x50>
 800bb66:	69e3      	ldr	r3, [r4, #28]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb6e:	b9b8      	cbnz	r0, 800bba0 <_Balloc+0x68>
 800bb70:	2101      	movs	r1, #1
 800bb72:	fa01 f605 	lsl.w	r6, r1, r5
 800bb76:	1d72      	adds	r2, r6, #5
 800bb78:	0092      	lsls	r2, r2, #2
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f001 fd86 	bl	800d68c <_calloc_r>
 800bb80:	b160      	cbz	r0, 800bb9c <_Balloc+0x64>
 800bb82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb86:	e00e      	b.n	800bba6 <_Balloc+0x6e>
 800bb88:	2221      	movs	r2, #33	@ 0x21
 800bb8a:	2104      	movs	r1, #4
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f001 fd7d 	bl	800d68c <_calloc_r>
 800bb92:	69e3      	ldr	r3, [r4, #28]
 800bb94:	60f0      	str	r0, [r6, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e4      	bne.n	800bb66 <_Balloc+0x2e>
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}
 800bba0:	6802      	ldr	r2, [r0, #0]
 800bba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bba6:	2300      	movs	r3, #0
 800bba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbac:	e7f7      	b.n	800bb9e <_Balloc+0x66>
 800bbae:	bf00      	nop
 800bbb0:	0800f2fe 	.word	0x0800f2fe
 800bbb4:	0800f37e 	.word	0x0800f37e

0800bbb8 <_Bfree>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	69c6      	ldr	r6, [r0, #28]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	b976      	cbnz	r6, 800bbe0 <_Bfree+0x28>
 800bbc2:	2010      	movs	r0, #16
 800bbc4:	f7ff ff02 	bl	800b9cc <malloc>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	61e8      	str	r0, [r5, #28]
 800bbcc:	b920      	cbnz	r0, 800bbd8 <_Bfree+0x20>
 800bbce:	4b09      	ldr	r3, [pc, #36]	@ (800bbf4 <_Bfree+0x3c>)
 800bbd0:	4809      	ldr	r0, [pc, #36]	@ (800bbf8 <_Bfree+0x40>)
 800bbd2:	218f      	movs	r1, #143	@ 0x8f
 800bbd4:	f001 fd3c 	bl	800d650 <__assert_func>
 800bbd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbdc:	6006      	str	r6, [r0, #0]
 800bbde:	60c6      	str	r6, [r0, #12]
 800bbe0:	b13c      	cbz	r4, 800bbf2 <_Bfree+0x3a>
 800bbe2:	69eb      	ldr	r3, [r5, #28]
 800bbe4:	6862      	ldr	r2, [r4, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbec:	6021      	str	r1, [r4, #0]
 800bbee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}
 800bbf4:	0800f2fe 	.word	0x0800f2fe
 800bbf8:	0800f37e 	.word	0x0800f37e

0800bbfc <__multadd>:
 800bbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc00:	690d      	ldr	r5, [r1, #16]
 800bc02:	4607      	mov	r7, r0
 800bc04:	460c      	mov	r4, r1
 800bc06:	461e      	mov	r6, r3
 800bc08:	f101 0c14 	add.w	ip, r1, #20
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc12:	b299      	uxth	r1, r3
 800bc14:	fb02 6101 	mla	r1, r2, r1, r6
 800bc18:	0c1e      	lsrs	r6, r3, #16
 800bc1a:	0c0b      	lsrs	r3, r1, #16
 800bc1c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc20:	b289      	uxth	r1, r1
 800bc22:	3001      	adds	r0, #1
 800bc24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc28:	4285      	cmp	r5, r0
 800bc2a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc32:	dcec      	bgt.n	800bc0e <__multadd+0x12>
 800bc34:	b30e      	cbz	r6, 800bc7a <__multadd+0x7e>
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	42ab      	cmp	r3, r5
 800bc3a:	dc19      	bgt.n	800bc70 <__multadd+0x74>
 800bc3c:	6861      	ldr	r1, [r4, #4]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	3101      	adds	r1, #1
 800bc42:	f7ff ff79 	bl	800bb38 <_Balloc>
 800bc46:	4680      	mov	r8, r0
 800bc48:	b928      	cbnz	r0, 800bc56 <__multadd+0x5a>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc80 <__multadd+0x84>)
 800bc4e:	480d      	ldr	r0, [pc, #52]	@ (800bc84 <__multadd+0x88>)
 800bc50:	21ba      	movs	r1, #186	@ 0xba
 800bc52:	f001 fcfd 	bl	800d650 <__assert_func>
 800bc56:	6922      	ldr	r2, [r4, #16]
 800bc58:	3202      	adds	r2, #2
 800bc5a:	f104 010c 	add.w	r1, r4, #12
 800bc5e:	0092      	lsls	r2, r2, #2
 800bc60:	300c      	adds	r0, #12
 800bc62:	f001 fcdf 	bl	800d624 <memcpy>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff ffa5 	bl	800bbb8 <_Bfree>
 800bc6e:	4644      	mov	r4, r8
 800bc70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc74:	3501      	adds	r5, #1
 800bc76:	615e      	str	r6, [r3, #20]
 800bc78:	6125      	str	r5, [r4, #16]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	0800f36d 	.word	0x0800f36d
 800bc84:	0800f37e 	.word	0x0800f37e

0800bc88 <__s2b>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	4615      	mov	r5, r2
 800bc90:	461f      	mov	r7, r3
 800bc92:	2209      	movs	r2, #9
 800bc94:	3308      	adds	r3, #8
 800bc96:	4606      	mov	r6, r0
 800bc98:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	2201      	movs	r2, #1
 800bca0:	429a      	cmp	r2, r3
 800bca2:	db09      	blt.n	800bcb8 <__s2b+0x30>
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff ff47 	bl	800bb38 <_Balloc>
 800bcaa:	b940      	cbnz	r0, 800bcbe <__s2b+0x36>
 800bcac:	4602      	mov	r2, r0
 800bcae:	4b19      	ldr	r3, [pc, #100]	@ (800bd14 <__s2b+0x8c>)
 800bcb0:	4819      	ldr	r0, [pc, #100]	@ (800bd18 <__s2b+0x90>)
 800bcb2:	21d3      	movs	r1, #211	@ 0xd3
 800bcb4:	f001 fccc 	bl	800d650 <__assert_func>
 800bcb8:	0052      	lsls	r2, r2, #1
 800bcba:	3101      	adds	r1, #1
 800bcbc:	e7f0      	b.n	800bca0 <__s2b+0x18>
 800bcbe:	9b08      	ldr	r3, [sp, #32]
 800bcc0:	6143      	str	r3, [r0, #20]
 800bcc2:	2d09      	cmp	r5, #9
 800bcc4:	f04f 0301 	mov.w	r3, #1
 800bcc8:	6103      	str	r3, [r0, #16]
 800bcca:	dd16      	ble.n	800bcfa <__s2b+0x72>
 800bccc:	f104 0909 	add.w	r9, r4, #9
 800bcd0:	46c8      	mov	r8, r9
 800bcd2:	442c      	add	r4, r5
 800bcd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcd8:	4601      	mov	r1, r0
 800bcda:	3b30      	subs	r3, #48	@ 0x30
 800bcdc:	220a      	movs	r2, #10
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7ff ff8c 	bl	800bbfc <__multadd>
 800bce4:	45a0      	cmp	r8, r4
 800bce6:	d1f5      	bne.n	800bcd4 <__s2b+0x4c>
 800bce8:	f1a5 0408 	sub.w	r4, r5, #8
 800bcec:	444c      	add	r4, r9
 800bcee:	1b2d      	subs	r5, r5, r4
 800bcf0:	1963      	adds	r3, r4, r5
 800bcf2:	42bb      	cmp	r3, r7
 800bcf4:	db04      	blt.n	800bd00 <__s2b+0x78>
 800bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	340a      	adds	r4, #10
 800bcfc:	2509      	movs	r5, #9
 800bcfe:	e7f6      	b.n	800bcee <__s2b+0x66>
 800bd00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd04:	4601      	mov	r1, r0
 800bd06:	3b30      	subs	r3, #48	@ 0x30
 800bd08:	220a      	movs	r2, #10
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7ff ff76 	bl	800bbfc <__multadd>
 800bd10:	e7ee      	b.n	800bcf0 <__s2b+0x68>
 800bd12:	bf00      	nop
 800bd14:	0800f36d 	.word	0x0800f36d
 800bd18:	0800f37e 	.word	0x0800f37e

0800bd1c <__hi0bits>:
 800bd1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd20:	4603      	mov	r3, r0
 800bd22:	bf36      	itet	cc
 800bd24:	0403      	lslcc	r3, r0, #16
 800bd26:	2000      	movcs	r0, #0
 800bd28:	2010      	movcc	r0, #16
 800bd2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd2e:	bf3c      	itt	cc
 800bd30:	021b      	lslcc	r3, r3, #8
 800bd32:	3008      	addcc	r0, #8
 800bd34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd38:	bf3c      	itt	cc
 800bd3a:	011b      	lslcc	r3, r3, #4
 800bd3c:	3004      	addcc	r0, #4
 800bd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd42:	bf3c      	itt	cc
 800bd44:	009b      	lslcc	r3, r3, #2
 800bd46:	3002      	addcc	r0, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	db05      	blt.n	800bd58 <__hi0bits+0x3c>
 800bd4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd50:	f100 0001 	add.w	r0, r0, #1
 800bd54:	bf08      	it	eq
 800bd56:	2020      	moveq	r0, #32
 800bd58:	4770      	bx	lr

0800bd5a <__lo0bits>:
 800bd5a:	6803      	ldr	r3, [r0, #0]
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	f013 0007 	ands.w	r0, r3, #7
 800bd62:	d00b      	beq.n	800bd7c <__lo0bits+0x22>
 800bd64:	07d9      	lsls	r1, r3, #31
 800bd66:	d421      	bmi.n	800bdac <__lo0bits+0x52>
 800bd68:	0798      	lsls	r0, r3, #30
 800bd6a:	bf49      	itett	mi
 800bd6c:	085b      	lsrmi	r3, r3, #1
 800bd6e:	089b      	lsrpl	r3, r3, #2
 800bd70:	2001      	movmi	r0, #1
 800bd72:	6013      	strmi	r3, [r2, #0]
 800bd74:	bf5c      	itt	pl
 800bd76:	6013      	strpl	r3, [r2, #0]
 800bd78:	2002      	movpl	r0, #2
 800bd7a:	4770      	bx	lr
 800bd7c:	b299      	uxth	r1, r3
 800bd7e:	b909      	cbnz	r1, 800bd84 <__lo0bits+0x2a>
 800bd80:	0c1b      	lsrs	r3, r3, #16
 800bd82:	2010      	movs	r0, #16
 800bd84:	b2d9      	uxtb	r1, r3
 800bd86:	b909      	cbnz	r1, 800bd8c <__lo0bits+0x32>
 800bd88:	3008      	adds	r0, #8
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	0719      	lsls	r1, r3, #28
 800bd8e:	bf04      	itt	eq
 800bd90:	091b      	lsreq	r3, r3, #4
 800bd92:	3004      	addeq	r0, #4
 800bd94:	0799      	lsls	r1, r3, #30
 800bd96:	bf04      	itt	eq
 800bd98:	089b      	lsreq	r3, r3, #2
 800bd9a:	3002      	addeq	r0, #2
 800bd9c:	07d9      	lsls	r1, r3, #31
 800bd9e:	d403      	bmi.n	800bda8 <__lo0bits+0x4e>
 800bda0:	085b      	lsrs	r3, r3, #1
 800bda2:	f100 0001 	add.w	r0, r0, #1
 800bda6:	d003      	beq.n	800bdb0 <__lo0bits+0x56>
 800bda8:	6013      	str	r3, [r2, #0]
 800bdaa:	4770      	bx	lr
 800bdac:	2000      	movs	r0, #0
 800bdae:	4770      	bx	lr
 800bdb0:	2020      	movs	r0, #32
 800bdb2:	4770      	bx	lr

0800bdb4 <__i2b>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	2101      	movs	r1, #1
 800bdba:	f7ff febd 	bl	800bb38 <_Balloc>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	b928      	cbnz	r0, 800bdce <__i2b+0x1a>
 800bdc2:	4b05      	ldr	r3, [pc, #20]	@ (800bdd8 <__i2b+0x24>)
 800bdc4:	4805      	ldr	r0, [pc, #20]	@ (800bddc <__i2b+0x28>)
 800bdc6:	f240 1145 	movw	r1, #325	@ 0x145
 800bdca:	f001 fc41 	bl	800d650 <__assert_func>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	6144      	str	r4, [r0, #20]
 800bdd2:	6103      	str	r3, [r0, #16]
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800f36d 	.word	0x0800f36d
 800bddc:	0800f37e 	.word	0x0800f37e

0800bde0 <__multiply>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	4614      	mov	r4, r2
 800bde6:	690a      	ldr	r2, [r1, #16]
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	bfa8      	it	ge
 800bdee:	4623      	movge	r3, r4
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	bfa4      	itt	ge
 800bdf4:	460c      	movge	r4, r1
 800bdf6:	461f      	movge	r7, r3
 800bdf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be00:	68a3      	ldr	r3, [r4, #8]
 800be02:	6861      	ldr	r1, [r4, #4]
 800be04:	eb0a 0609 	add.w	r6, sl, r9
 800be08:	42b3      	cmp	r3, r6
 800be0a:	b085      	sub	sp, #20
 800be0c:	bfb8      	it	lt
 800be0e:	3101      	addlt	r1, #1
 800be10:	f7ff fe92 	bl	800bb38 <_Balloc>
 800be14:	b930      	cbnz	r0, 800be24 <__multiply+0x44>
 800be16:	4602      	mov	r2, r0
 800be18:	4b44      	ldr	r3, [pc, #272]	@ (800bf2c <__multiply+0x14c>)
 800be1a:	4845      	ldr	r0, [pc, #276]	@ (800bf30 <__multiply+0x150>)
 800be1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be20:	f001 fc16 	bl	800d650 <__assert_func>
 800be24:	f100 0514 	add.w	r5, r0, #20
 800be28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be2c:	462b      	mov	r3, r5
 800be2e:	2200      	movs	r2, #0
 800be30:	4543      	cmp	r3, r8
 800be32:	d321      	bcc.n	800be78 <__multiply+0x98>
 800be34:	f107 0114 	add.w	r1, r7, #20
 800be38:	f104 0214 	add.w	r2, r4, #20
 800be3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be44:	9302      	str	r3, [sp, #8]
 800be46:	1b13      	subs	r3, r2, r4
 800be48:	3b15      	subs	r3, #21
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	3304      	adds	r3, #4
 800be50:	f104 0715 	add.w	r7, r4, #21
 800be54:	42ba      	cmp	r2, r7
 800be56:	bf38      	it	cc
 800be58:	2304      	movcc	r3, #4
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	9103      	str	r1, [sp, #12]
 800be60:	428b      	cmp	r3, r1
 800be62:	d80c      	bhi.n	800be7e <__multiply+0x9e>
 800be64:	2e00      	cmp	r6, #0
 800be66:	dd03      	ble.n	800be70 <__multiply+0x90>
 800be68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d05b      	beq.n	800bf28 <__multiply+0x148>
 800be70:	6106      	str	r6, [r0, #16]
 800be72:	b005      	add	sp, #20
 800be74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be78:	f843 2b04 	str.w	r2, [r3], #4
 800be7c:	e7d8      	b.n	800be30 <__multiply+0x50>
 800be7e:	f8b1 a000 	ldrh.w	sl, [r1]
 800be82:	f1ba 0f00 	cmp.w	sl, #0
 800be86:	d024      	beq.n	800bed2 <__multiply+0xf2>
 800be88:	f104 0e14 	add.w	lr, r4, #20
 800be8c:	46a9      	mov	r9, r5
 800be8e:	f04f 0c00 	mov.w	ip, #0
 800be92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be96:	f8d9 3000 	ldr.w	r3, [r9]
 800be9a:	fa1f fb87 	uxth.w	fp, r7
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bea4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bea8:	f8d9 7000 	ldr.w	r7, [r9]
 800beac:	4463      	add	r3, ip
 800beae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800beb2:	fb0a c70b 	mla	r7, sl, fp, ip
 800beb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800beba:	b29b      	uxth	r3, r3
 800bebc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bec0:	4572      	cmp	r2, lr
 800bec2:	f849 3b04 	str.w	r3, [r9], #4
 800bec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800beca:	d8e2      	bhi.n	800be92 <__multiply+0xb2>
 800becc:	9b01      	ldr	r3, [sp, #4]
 800bece:	f845 c003 	str.w	ip, [r5, r3]
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bed8:	3104      	adds	r1, #4
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	d021      	beq.n	800bf24 <__multiply+0x144>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	f104 0c14 	add.w	ip, r4, #20
 800bee6:	46ae      	mov	lr, r5
 800bee8:	f04f 0a00 	mov.w	sl, #0
 800beec:	f8bc b000 	ldrh.w	fp, [ip]
 800bef0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bef4:	fb09 770b 	mla	r7, r9, fp, r7
 800bef8:	4457      	add	r7, sl
 800befa:	b29b      	uxth	r3, r3
 800befc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf00:	f84e 3b04 	str.w	r3, [lr], #4
 800bf04:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf0c:	f8be 3000 	ldrh.w	r3, [lr]
 800bf10:	fb09 330a 	mla	r3, r9, sl, r3
 800bf14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf18:	4562      	cmp	r2, ip
 800bf1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf1e:	d8e5      	bhi.n	800beec <__multiply+0x10c>
 800bf20:	9f01      	ldr	r7, [sp, #4]
 800bf22:	51eb      	str	r3, [r5, r7]
 800bf24:	3504      	adds	r5, #4
 800bf26:	e799      	b.n	800be5c <__multiply+0x7c>
 800bf28:	3e01      	subs	r6, #1
 800bf2a:	e79b      	b.n	800be64 <__multiply+0x84>
 800bf2c:	0800f36d 	.word	0x0800f36d
 800bf30:	0800f37e 	.word	0x0800f37e

0800bf34 <__pow5mult>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	4615      	mov	r5, r2
 800bf3a:	f012 0203 	ands.w	r2, r2, #3
 800bf3e:	4607      	mov	r7, r0
 800bf40:	460e      	mov	r6, r1
 800bf42:	d007      	beq.n	800bf54 <__pow5mult+0x20>
 800bf44:	4c25      	ldr	r4, [pc, #148]	@ (800bfdc <__pow5mult+0xa8>)
 800bf46:	3a01      	subs	r2, #1
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf4e:	f7ff fe55 	bl	800bbfc <__multadd>
 800bf52:	4606      	mov	r6, r0
 800bf54:	10ad      	asrs	r5, r5, #2
 800bf56:	d03d      	beq.n	800bfd4 <__pow5mult+0xa0>
 800bf58:	69fc      	ldr	r4, [r7, #28]
 800bf5a:	b97c      	cbnz	r4, 800bf7c <__pow5mult+0x48>
 800bf5c:	2010      	movs	r0, #16
 800bf5e:	f7ff fd35 	bl	800b9cc <malloc>
 800bf62:	4602      	mov	r2, r0
 800bf64:	61f8      	str	r0, [r7, #28]
 800bf66:	b928      	cbnz	r0, 800bf74 <__pow5mult+0x40>
 800bf68:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe0 <__pow5mult+0xac>)
 800bf6a:	481e      	ldr	r0, [pc, #120]	@ (800bfe4 <__pow5mult+0xb0>)
 800bf6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf70:	f001 fb6e 	bl	800d650 <__assert_func>
 800bf74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf78:	6004      	str	r4, [r0, #0]
 800bf7a:	60c4      	str	r4, [r0, #12]
 800bf7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf84:	b94c      	cbnz	r4, 800bf9a <__pow5mult+0x66>
 800bf86:	f240 2171 	movw	r1, #625	@ 0x271
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ff12 	bl	800bdb4 <__i2b>
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf96:	4604      	mov	r4, r0
 800bf98:	6003      	str	r3, [r0, #0]
 800bf9a:	f04f 0900 	mov.w	r9, #0
 800bf9e:	07eb      	lsls	r3, r5, #31
 800bfa0:	d50a      	bpl.n	800bfb8 <__pow5mult+0x84>
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f7ff ff1a 	bl	800bde0 <__multiply>
 800bfac:	4631      	mov	r1, r6
 800bfae:	4680      	mov	r8, r0
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f7ff fe01 	bl	800bbb8 <_Bfree>
 800bfb6:	4646      	mov	r6, r8
 800bfb8:	106d      	asrs	r5, r5, #1
 800bfba:	d00b      	beq.n	800bfd4 <__pow5mult+0xa0>
 800bfbc:	6820      	ldr	r0, [r4, #0]
 800bfbe:	b938      	cbnz	r0, 800bfd0 <__pow5mult+0x9c>
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f7ff ff0b 	bl	800bde0 <__multiply>
 800bfca:	6020      	str	r0, [r4, #0]
 800bfcc:	f8c0 9000 	str.w	r9, [r0]
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	e7e4      	b.n	800bf9e <__pow5mult+0x6a>
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800f3d8 	.word	0x0800f3d8
 800bfe0:	0800f2fe 	.word	0x0800f2fe
 800bfe4:	0800f37e 	.word	0x0800f37e

0800bfe8 <__lshift>:
 800bfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	6849      	ldr	r1, [r1, #4]
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bff6:	68a3      	ldr	r3, [r4, #8]
 800bff8:	4607      	mov	r7, r0
 800bffa:	4691      	mov	r9, r2
 800bffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c000:	f108 0601 	add.w	r6, r8, #1
 800c004:	42b3      	cmp	r3, r6
 800c006:	db0b      	blt.n	800c020 <__lshift+0x38>
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff fd95 	bl	800bb38 <_Balloc>
 800c00e:	4605      	mov	r5, r0
 800c010:	b948      	cbnz	r0, 800c026 <__lshift+0x3e>
 800c012:	4602      	mov	r2, r0
 800c014:	4b28      	ldr	r3, [pc, #160]	@ (800c0b8 <__lshift+0xd0>)
 800c016:	4829      	ldr	r0, [pc, #164]	@ (800c0bc <__lshift+0xd4>)
 800c018:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c01c:	f001 fb18 	bl	800d650 <__assert_func>
 800c020:	3101      	adds	r1, #1
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	e7ee      	b.n	800c004 <__lshift+0x1c>
 800c026:	2300      	movs	r3, #0
 800c028:	f100 0114 	add.w	r1, r0, #20
 800c02c:	f100 0210 	add.w	r2, r0, #16
 800c030:	4618      	mov	r0, r3
 800c032:	4553      	cmp	r3, sl
 800c034:	db33      	blt.n	800c09e <__lshift+0xb6>
 800c036:	6920      	ldr	r0, [r4, #16]
 800c038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c03c:	f104 0314 	add.w	r3, r4, #20
 800c040:	f019 091f 	ands.w	r9, r9, #31
 800c044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c04c:	d02b      	beq.n	800c0a6 <__lshift+0xbe>
 800c04e:	f1c9 0e20 	rsb	lr, r9, #32
 800c052:	468a      	mov	sl, r1
 800c054:	2200      	movs	r2, #0
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	fa00 f009 	lsl.w	r0, r0, r9
 800c05c:	4310      	orrs	r0, r2
 800c05e:	f84a 0b04 	str.w	r0, [sl], #4
 800c062:	f853 2b04 	ldr.w	r2, [r3], #4
 800c066:	459c      	cmp	ip, r3
 800c068:	fa22 f20e 	lsr.w	r2, r2, lr
 800c06c:	d8f3      	bhi.n	800c056 <__lshift+0x6e>
 800c06e:	ebac 0304 	sub.w	r3, ip, r4
 800c072:	3b15      	subs	r3, #21
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	3304      	adds	r3, #4
 800c07a:	f104 0015 	add.w	r0, r4, #21
 800c07e:	4584      	cmp	ip, r0
 800c080:	bf38      	it	cc
 800c082:	2304      	movcc	r3, #4
 800c084:	50ca      	str	r2, [r1, r3]
 800c086:	b10a      	cbz	r2, 800c08c <__lshift+0xa4>
 800c088:	f108 0602 	add.w	r6, r8, #2
 800c08c:	3e01      	subs	r6, #1
 800c08e:	4638      	mov	r0, r7
 800c090:	612e      	str	r6, [r5, #16]
 800c092:	4621      	mov	r1, r4
 800c094:	f7ff fd90 	bl	800bbb8 <_Bfree>
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	e7c5      	b.n	800c032 <__lshift+0x4a>
 800c0a6:	3904      	subs	r1, #4
 800c0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0b0:	459c      	cmp	ip, r3
 800c0b2:	d8f9      	bhi.n	800c0a8 <__lshift+0xc0>
 800c0b4:	e7ea      	b.n	800c08c <__lshift+0xa4>
 800c0b6:	bf00      	nop
 800c0b8:	0800f36d 	.word	0x0800f36d
 800c0bc:	0800f37e 	.word	0x0800f37e

0800c0c0 <__mcmp>:
 800c0c0:	690a      	ldr	r2, [r1, #16]
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6900      	ldr	r0, [r0, #16]
 800c0c6:	1a80      	subs	r0, r0, r2
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	d10e      	bne.n	800c0ea <__mcmp+0x2a>
 800c0cc:	3314      	adds	r3, #20
 800c0ce:	3114      	adds	r1, #20
 800c0d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0e0:	4295      	cmp	r5, r2
 800c0e2:	d003      	beq.n	800c0ec <__mcmp+0x2c>
 800c0e4:	d205      	bcs.n	800c0f2 <__mcmp+0x32>
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	bd30      	pop	{r4, r5, pc}
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	d3f3      	bcc.n	800c0d8 <__mcmp+0x18>
 800c0f0:	e7fb      	b.n	800c0ea <__mcmp+0x2a>
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7f9      	b.n	800c0ea <__mcmp+0x2a>
	...

0800c0f8 <__mdiff>:
 800c0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	4606      	mov	r6, r0
 800c100:	4611      	mov	r1, r2
 800c102:	4648      	mov	r0, r9
 800c104:	4614      	mov	r4, r2
 800c106:	f7ff ffdb 	bl	800c0c0 <__mcmp>
 800c10a:	1e05      	subs	r5, r0, #0
 800c10c:	d112      	bne.n	800c134 <__mdiff+0x3c>
 800c10e:	4629      	mov	r1, r5
 800c110:	4630      	mov	r0, r6
 800c112:	f7ff fd11 	bl	800bb38 <_Balloc>
 800c116:	4602      	mov	r2, r0
 800c118:	b928      	cbnz	r0, 800c126 <__mdiff+0x2e>
 800c11a:	4b3f      	ldr	r3, [pc, #252]	@ (800c218 <__mdiff+0x120>)
 800c11c:	f240 2137 	movw	r1, #567	@ 0x237
 800c120:	483e      	ldr	r0, [pc, #248]	@ (800c21c <__mdiff+0x124>)
 800c122:	f001 fa95 	bl	800d650 <__assert_func>
 800c126:	2301      	movs	r3, #1
 800c128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c12c:	4610      	mov	r0, r2
 800c12e:	b003      	add	sp, #12
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	bfbc      	itt	lt
 800c136:	464b      	movlt	r3, r9
 800c138:	46a1      	movlt	r9, r4
 800c13a:	4630      	mov	r0, r6
 800c13c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c140:	bfba      	itte	lt
 800c142:	461c      	movlt	r4, r3
 800c144:	2501      	movlt	r5, #1
 800c146:	2500      	movge	r5, #0
 800c148:	f7ff fcf6 	bl	800bb38 <_Balloc>
 800c14c:	4602      	mov	r2, r0
 800c14e:	b918      	cbnz	r0, 800c158 <__mdiff+0x60>
 800c150:	4b31      	ldr	r3, [pc, #196]	@ (800c218 <__mdiff+0x120>)
 800c152:	f240 2145 	movw	r1, #581	@ 0x245
 800c156:	e7e3      	b.n	800c120 <__mdiff+0x28>
 800c158:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c15c:	6926      	ldr	r6, [r4, #16]
 800c15e:	60c5      	str	r5, [r0, #12]
 800c160:	f109 0310 	add.w	r3, r9, #16
 800c164:	f109 0514 	add.w	r5, r9, #20
 800c168:	f104 0e14 	add.w	lr, r4, #20
 800c16c:	f100 0b14 	add.w	fp, r0, #20
 800c170:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c174:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	46d9      	mov	r9, fp
 800c17c:	f04f 0c00 	mov.w	ip, #0
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c186:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	fa1f f38a 	uxth.w	r3, sl
 800c190:	4619      	mov	r1, r3
 800c192:	b283      	uxth	r3, r0
 800c194:	1acb      	subs	r3, r1, r3
 800c196:	0c00      	lsrs	r0, r0, #16
 800c198:	4463      	add	r3, ip
 800c19a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c19e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1a8:	4576      	cmp	r6, lr
 800c1aa:	f849 3b04 	str.w	r3, [r9], #4
 800c1ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1b2:	d8e5      	bhi.n	800c180 <__mdiff+0x88>
 800c1b4:	1b33      	subs	r3, r6, r4
 800c1b6:	3b15      	subs	r3, #21
 800c1b8:	f023 0303 	bic.w	r3, r3, #3
 800c1bc:	3415      	adds	r4, #21
 800c1be:	3304      	adds	r3, #4
 800c1c0:	42a6      	cmp	r6, r4
 800c1c2:	bf38      	it	cc
 800c1c4:	2304      	movcc	r3, #4
 800c1c6:	441d      	add	r5, r3
 800c1c8:	445b      	add	r3, fp
 800c1ca:	461e      	mov	r6, r3
 800c1cc:	462c      	mov	r4, r5
 800c1ce:	4544      	cmp	r4, r8
 800c1d0:	d30e      	bcc.n	800c1f0 <__mdiff+0xf8>
 800c1d2:	f108 0103 	add.w	r1, r8, #3
 800c1d6:	1b49      	subs	r1, r1, r5
 800c1d8:	f021 0103 	bic.w	r1, r1, #3
 800c1dc:	3d03      	subs	r5, #3
 800c1de:	45a8      	cmp	r8, r5
 800c1e0:	bf38      	it	cc
 800c1e2:	2100      	movcc	r1, #0
 800c1e4:	440b      	add	r3, r1
 800c1e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1ea:	b191      	cbz	r1, 800c212 <__mdiff+0x11a>
 800c1ec:	6117      	str	r7, [r2, #16]
 800c1ee:	e79d      	b.n	800c12c <__mdiff+0x34>
 800c1f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1f4:	46e6      	mov	lr, ip
 800c1f6:	0c08      	lsrs	r0, r1, #16
 800c1f8:	fa1c fc81 	uxtah	ip, ip, r1
 800c1fc:	4471      	add	r1, lr
 800c1fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c202:	b289      	uxth	r1, r1
 800c204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c208:	f846 1b04 	str.w	r1, [r6], #4
 800c20c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c210:	e7dd      	b.n	800c1ce <__mdiff+0xd6>
 800c212:	3f01      	subs	r7, #1
 800c214:	e7e7      	b.n	800c1e6 <__mdiff+0xee>
 800c216:	bf00      	nop
 800c218:	0800f36d 	.word	0x0800f36d
 800c21c:	0800f37e 	.word	0x0800f37e

0800c220 <__ulp>:
 800c220:	b082      	sub	sp, #8
 800c222:	ed8d 0b00 	vstr	d0, [sp]
 800c226:	9a01      	ldr	r2, [sp, #4]
 800c228:	4b0f      	ldr	r3, [pc, #60]	@ (800c268 <__ulp+0x48>)
 800c22a:	4013      	ands	r3, r2
 800c22c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc08      	bgt.n	800c246 <__ulp+0x26>
 800c234:	425b      	negs	r3, r3
 800c236:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c23a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c23e:	da04      	bge.n	800c24a <__ulp+0x2a>
 800c240:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c244:	4113      	asrs	r3, r2
 800c246:	2200      	movs	r2, #0
 800c248:	e008      	b.n	800c25c <__ulp+0x3c>
 800c24a:	f1a2 0314 	sub.w	r3, r2, #20
 800c24e:	2b1e      	cmp	r3, #30
 800c250:	bfda      	itte	le
 800c252:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c256:	40da      	lsrle	r2, r3
 800c258:	2201      	movgt	r2, #1
 800c25a:	2300      	movs	r3, #0
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	ec41 0b10 	vmov	d0, r0, r1
 800c264:	b002      	add	sp, #8
 800c266:	4770      	bx	lr
 800c268:	7ff00000 	.word	0x7ff00000

0800c26c <__b2d>:
 800c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	6906      	ldr	r6, [r0, #16]
 800c272:	f100 0814 	add.w	r8, r0, #20
 800c276:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c27a:	1f37      	subs	r7, r6, #4
 800c27c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c280:	4610      	mov	r0, r2
 800c282:	f7ff fd4b 	bl	800bd1c <__hi0bits>
 800c286:	f1c0 0320 	rsb	r3, r0, #32
 800c28a:	280a      	cmp	r0, #10
 800c28c:	600b      	str	r3, [r1, #0]
 800c28e:	491b      	ldr	r1, [pc, #108]	@ (800c2fc <__b2d+0x90>)
 800c290:	dc15      	bgt.n	800c2be <__b2d+0x52>
 800c292:	f1c0 0c0b 	rsb	ip, r0, #11
 800c296:	fa22 f30c 	lsr.w	r3, r2, ip
 800c29a:	45b8      	cmp	r8, r7
 800c29c:	ea43 0501 	orr.w	r5, r3, r1
 800c2a0:	bf34      	ite	cc
 800c2a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2a6:	2300      	movcs	r3, #0
 800c2a8:	3015      	adds	r0, #21
 800c2aa:	fa02 f000 	lsl.w	r0, r2, r0
 800c2ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2b2:	4303      	orrs	r3, r0
 800c2b4:	461c      	mov	r4, r3
 800c2b6:	ec45 4b10 	vmov	d0, r4, r5
 800c2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2be:	45b8      	cmp	r8, r7
 800c2c0:	bf3a      	itte	cc
 800c2c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2ca:	2300      	movcs	r3, #0
 800c2cc:	380b      	subs	r0, #11
 800c2ce:	d012      	beq.n	800c2f6 <__b2d+0x8a>
 800c2d0:	f1c0 0120 	rsb	r1, r0, #32
 800c2d4:	fa23 f401 	lsr.w	r4, r3, r1
 800c2d8:	4082      	lsls	r2, r0
 800c2da:	4322      	orrs	r2, r4
 800c2dc:	4547      	cmp	r7, r8
 800c2de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c2e2:	bf8c      	ite	hi
 800c2e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c2e8:	2200      	movls	r2, #0
 800c2ea:	4083      	lsls	r3, r0
 800c2ec:	40ca      	lsrs	r2, r1
 800c2ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	e7de      	b.n	800c2b4 <__b2d+0x48>
 800c2f6:	ea42 0501 	orr.w	r5, r2, r1
 800c2fa:	e7db      	b.n	800c2b4 <__b2d+0x48>
 800c2fc:	3ff00000 	.word	0x3ff00000

0800c300 <__d2b>:
 800c300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c304:	460f      	mov	r7, r1
 800c306:	2101      	movs	r1, #1
 800c308:	ec59 8b10 	vmov	r8, r9, d0
 800c30c:	4616      	mov	r6, r2
 800c30e:	f7ff fc13 	bl	800bb38 <_Balloc>
 800c312:	4604      	mov	r4, r0
 800c314:	b930      	cbnz	r0, 800c324 <__d2b+0x24>
 800c316:	4602      	mov	r2, r0
 800c318:	4b23      	ldr	r3, [pc, #140]	@ (800c3a8 <__d2b+0xa8>)
 800c31a:	4824      	ldr	r0, [pc, #144]	@ (800c3ac <__d2b+0xac>)
 800c31c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c320:	f001 f996 	bl	800d650 <__assert_func>
 800c324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c32c:	b10d      	cbz	r5, 800c332 <__d2b+0x32>
 800c32e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	f1b8 0300 	subs.w	r3, r8, #0
 800c338:	d023      	beq.n	800c382 <__d2b+0x82>
 800c33a:	4668      	mov	r0, sp
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	f7ff fd0c 	bl	800bd5a <__lo0bits>
 800c342:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c346:	b1d0      	cbz	r0, 800c37e <__d2b+0x7e>
 800c348:	f1c0 0320 	rsb	r3, r0, #32
 800c34c:	fa02 f303 	lsl.w	r3, r2, r3
 800c350:	430b      	orrs	r3, r1
 800c352:	40c2      	lsrs	r2, r0
 800c354:	6163      	str	r3, [r4, #20]
 800c356:	9201      	str	r2, [sp, #4]
 800c358:	9b01      	ldr	r3, [sp, #4]
 800c35a:	61a3      	str	r3, [r4, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	bf0c      	ite	eq
 800c360:	2201      	moveq	r2, #1
 800c362:	2202      	movne	r2, #2
 800c364:	6122      	str	r2, [r4, #16]
 800c366:	b1a5      	cbz	r5, 800c392 <__d2b+0x92>
 800c368:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c36c:	4405      	add	r5, r0
 800c36e:	603d      	str	r5, [r7, #0]
 800c370:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c374:	6030      	str	r0, [r6, #0]
 800c376:	4620      	mov	r0, r4
 800c378:	b003      	add	sp, #12
 800c37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c37e:	6161      	str	r1, [r4, #20]
 800c380:	e7ea      	b.n	800c358 <__d2b+0x58>
 800c382:	a801      	add	r0, sp, #4
 800c384:	f7ff fce9 	bl	800bd5a <__lo0bits>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	6163      	str	r3, [r4, #20]
 800c38c:	3020      	adds	r0, #32
 800c38e:	2201      	movs	r2, #1
 800c390:	e7e8      	b.n	800c364 <__d2b+0x64>
 800c392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c396:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c39a:	6038      	str	r0, [r7, #0]
 800c39c:	6918      	ldr	r0, [r3, #16]
 800c39e:	f7ff fcbd 	bl	800bd1c <__hi0bits>
 800c3a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3a6:	e7e5      	b.n	800c374 <__d2b+0x74>
 800c3a8:	0800f36d 	.word	0x0800f36d
 800c3ac:	0800f37e 	.word	0x0800f37e

0800c3b0 <__ratio>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	b085      	sub	sp, #20
 800c3b6:	e9cd 1000 	strd	r1, r0, [sp]
 800c3ba:	a902      	add	r1, sp, #8
 800c3bc:	f7ff ff56 	bl	800c26c <__b2d>
 800c3c0:	9800      	ldr	r0, [sp, #0]
 800c3c2:	a903      	add	r1, sp, #12
 800c3c4:	ec55 4b10 	vmov	r4, r5, d0
 800c3c8:	f7ff ff50 	bl	800c26c <__b2d>
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	6919      	ldr	r1, [r3, #16]
 800c3d0:	9b00      	ldr	r3, [sp, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	1ac9      	subs	r1, r1, r3
 800c3d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3da:	1a9b      	subs	r3, r3, r2
 800c3dc:	ec5b ab10 	vmov	sl, fp, d0
 800c3e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfce      	itee	gt
 800c3e8:	462a      	movgt	r2, r5
 800c3ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3ee:	465a      	movle	r2, fp
 800c3f0:	462f      	mov	r7, r5
 800c3f2:	46d9      	mov	r9, fp
 800c3f4:	bfcc      	ite	gt
 800c3f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c3fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c3fe:	464b      	mov	r3, r9
 800c400:	4652      	mov	r2, sl
 800c402:	4620      	mov	r0, r4
 800c404:	4639      	mov	r1, r7
 800c406:	f7f4 fa29 	bl	800085c <__aeabi_ddiv>
 800c40a:	ec41 0b10 	vmov	d0, r0, r1
 800c40e:	b005      	add	sp, #20
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c414 <__copybits>:
 800c414:	3901      	subs	r1, #1
 800c416:	b570      	push	{r4, r5, r6, lr}
 800c418:	1149      	asrs	r1, r1, #5
 800c41a:	6914      	ldr	r4, [r2, #16]
 800c41c:	3101      	adds	r1, #1
 800c41e:	f102 0314 	add.w	r3, r2, #20
 800c422:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c426:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c42a:	1f05      	subs	r5, r0, #4
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	d30c      	bcc.n	800c44a <__copybits+0x36>
 800c430:	1aa3      	subs	r3, r4, r2
 800c432:	3b11      	subs	r3, #17
 800c434:	f023 0303 	bic.w	r3, r3, #3
 800c438:	3211      	adds	r2, #17
 800c43a:	42a2      	cmp	r2, r4
 800c43c:	bf88      	it	hi
 800c43e:	2300      	movhi	r3, #0
 800c440:	4418      	add	r0, r3
 800c442:	2300      	movs	r3, #0
 800c444:	4288      	cmp	r0, r1
 800c446:	d305      	bcc.n	800c454 <__copybits+0x40>
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c44e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c452:	e7eb      	b.n	800c42c <__copybits+0x18>
 800c454:	f840 3b04 	str.w	r3, [r0], #4
 800c458:	e7f4      	b.n	800c444 <__copybits+0x30>

0800c45a <__any_on>:
 800c45a:	f100 0214 	add.w	r2, r0, #20
 800c45e:	6900      	ldr	r0, [r0, #16]
 800c460:	114b      	asrs	r3, r1, #5
 800c462:	4298      	cmp	r0, r3
 800c464:	b510      	push	{r4, lr}
 800c466:	db11      	blt.n	800c48c <__any_on+0x32>
 800c468:	dd0a      	ble.n	800c480 <__any_on+0x26>
 800c46a:	f011 011f 	ands.w	r1, r1, #31
 800c46e:	d007      	beq.n	800c480 <__any_on+0x26>
 800c470:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c474:	fa24 f001 	lsr.w	r0, r4, r1
 800c478:	fa00 f101 	lsl.w	r1, r0, r1
 800c47c:	428c      	cmp	r4, r1
 800c47e:	d10b      	bne.n	800c498 <__any_on+0x3e>
 800c480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c484:	4293      	cmp	r3, r2
 800c486:	d803      	bhi.n	800c490 <__any_on+0x36>
 800c488:	2000      	movs	r0, #0
 800c48a:	bd10      	pop	{r4, pc}
 800c48c:	4603      	mov	r3, r0
 800c48e:	e7f7      	b.n	800c480 <__any_on+0x26>
 800c490:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c494:	2900      	cmp	r1, #0
 800c496:	d0f5      	beq.n	800c484 <__any_on+0x2a>
 800c498:	2001      	movs	r0, #1
 800c49a:	e7f6      	b.n	800c48a <__any_on+0x30>

0800c49c <sulp>:
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	4604      	mov	r4, r0
 800c4a0:	460d      	mov	r5, r1
 800c4a2:	ec45 4b10 	vmov	d0, r4, r5
 800c4a6:	4616      	mov	r6, r2
 800c4a8:	f7ff feba 	bl	800c220 <__ulp>
 800c4ac:	ec51 0b10 	vmov	r0, r1, d0
 800c4b0:	b17e      	cbz	r6, 800c4d2 <sulp+0x36>
 800c4b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd09      	ble.n	800c4d2 <sulp+0x36>
 800c4be:	051b      	lsls	r3, r3, #20
 800c4c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c4c4:	2400      	movs	r4, #0
 800c4c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	462b      	mov	r3, r5
 800c4ce:	f7f4 f89b 	bl	8000608 <__aeabi_dmul>
 800c4d2:	ec41 0b10 	vmov	d0, r0, r1
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}

0800c4d8 <_strtod_l>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	b09f      	sub	sp, #124	@ 0x7c
 800c4de:	460c      	mov	r4, r1
 800c4e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4e6:	9005      	str	r0, [sp, #20]
 800c4e8:	f04f 0a00 	mov.w	sl, #0
 800c4ec:	f04f 0b00 	mov.w	fp, #0
 800c4f0:	460a      	mov	r2, r1
 800c4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4f4:	7811      	ldrb	r1, [r2, #0]
 800c4f6:	292b      	cmp	r1, #43	@ 0x2b
 800c4f8:	d04a      	beq.n	800c590 <_strtod_l+0xb8>
 800c4fa:	d838      	bhi.n	800c56e <_strtod_l+0x96>
 800c4fc:	290d      	cmp	r1, #13
 800c4fe:	d832      	bhi.n	800c566 <_strtod_l+0x8e>
 800c500:	2908      	cmp	r1, #8
 800c502:	d832      	bhi.n	800c56a <_strtod_l+0x92>
 800c504:	2900      	cmp	r1, #0
 800c506:	d03b      	beq.n	800c580 <_strtod_l+0xa8>
 800c508:	2200      	movs	r2, #0
 800c50a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c50c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c50e:	782a      	ldrb	r2, [r5, #0]
 800c510:	2a30      	cmp	r2, #48	@ 0x30
 800c512:	f040 80b3 	bne.w	800c67c <_strtod_l+0x1a4>
 800c516:	786a      	ldrb	r2, [r5, #1]
 800c518:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c51c:	2a58      	cmp	r2, #88	@ 0x58
 800c51e:	d16e      	bne.n	800c5fe <_strtod_l+0x126>
 800c520:	9302      	str	r3, [sp, #8]
 800c522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	ab1a      	add	r3, sp, #104	@ 0x68
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	4a8e      	ldr	r2, [pc, #568]	@ (800c764 <_strtod_l+0x28c>)
 800c52c:	9805      	ldr	r0, [sp, #20]
 800c52e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c530:	a919      	add	r1, sp, #100	@ 0x64
 800c532:	f001 f927 	bl	800d784 <__gethex>
 800c536:	f010 060f 	ands.w	r6, r0, #15
 800c53a:	4604      	mov	r4, r0
 800c53c:	d005      	beq.n	800c54a <_strtod_l+0x72>
 800c53e:	2e06      	cmp	r6, #6
 800c540:	d128      	bne.n	800c594 <_strtod_l+0xbc>
 800c542:	3501      	adds	r5, #1
 800c544:	2300      	movs	r3, #0
 800c546:	9519      	str	r5, [sp, #100]	@ 0x64
 800c548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c54a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f040 858e 	bne.w	800d06e <_strtod_l+0xb96>
 800c552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c554:	b1cb      	cbz	r3, 800c58a <_strtod_l+0xb2>
 800c556:	4652      	mov	r2, sl
 800c558:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c55c:	ec43 2b10 	vmov	d0, r2, r3
 800c560:	b01f      	add	sp, #124	@ 0x7c
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c566:	2920      	cmp	r1, #32
 800c568:	d1ce      	bne.n	800c508 <_strtod_l+0x30>
 800c56a:	3201      	adds	r2, #1
 800c56c:	e7c1      	b.n	800c4f2 <_strtod_l+0x1a>
 800c56e:	292d      	cmp	r1, #45	@ 0x2d
 800c570:	d1ca      	bne.n	800c508 <_strtod_l+0x30>
 800c572:	2101      	movs	r1, #1
 800c574:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c576:	1c51      	adds	r1, r2, #1
 800c578:	9119      	str	r1, [sp, #100]	@ 0x64
 800c57a:	7852      	ldrb	r2, [r2, #1]
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	d1c5      	bne.n	800c50c <_strtod_l+0x34>
 800c580:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c582:	9419      	str	r4, [sp, #100]	@ 0x64
 800c584:	2b00      	cmp	r3, #0
 800c586:	f040 8570 	bne.w	800d06a <_strtod_l+0xb92>
 800c58a:	4652      	mov	r2, sl
 800c58c:	465b      	mov	r3, fp
 800c58e:	e7e5      	b.n	800c55c <_strtod_l+0x84>
 800c590:	2100      	movs	r1, #0
 800c592:	e7ef      	b.n	800c574 <_strtod_l+0x9c>
 800c594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c596:	b13a      	cbz	r2, 800c5a8 <_strtod_l+0xd0>
 800c598:	2135      	movs	r1, #53	@ 0x35
 800c59a:	a81c      	add	r0, sp, #112	@ 0x70
 800c59c:	f7ff ff3a 	bl	800c414 <__copybits>
 800c5a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5a2:	9805      	ldr	r0, [sp, #20]
 800c5a4:	f7ff fb08 	bl	800bbb8 <_Bfree>
 800c5a8:	3e01      	subs	r6, #1
 800c5aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c5ac:	2e04      	cmp	r6, #4
 800c5ae:	d806      	bhi.n	800c5be <_strtod_l+0xe6>
 800c5b0:	e8df f006 	tbb	[pc, r6]
 800c5b4:	201d0314 	.word	0x201d0314
 800c5b8:	14          	.byte	0x14
 800c5b9:	00          	.byte	0x00
 800c5ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c5be:	05e1      	lsls	r1, r4, #23
 800c5c0:	bf48      	it	mi
 800c5c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c5c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5ca:	0d1b      	lsrs	r3, r3, #20
 800c5cc:	051b      	lsls	r3, r3, #20
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1bb      	bne.n	800c54a <_strtod_l+0x72>
 800c5d2:	f7fe fb31 	bl	800ac38 <__errno>
 800c5d6:	2322      	movs	r3, #34	@ 0x22
 800c5d8:	6003      	str	r3, [r0, #0]
 800c5da:	e7b6      	b.n	800c54a <_strtod_l+0x72>
 800c5dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5ec:	e7e7      	b.n	800c5be <_strtod_l+0xe6>
 800c5ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c76c <_strtod_l+0x294>
 800c5f2:	e7e4      	b.n	800c5be <_strtod_l+0xe6>
 800c5f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5f8:	f04f 3aff 	mov.w	sl, #4294967295
 800c5fc:	e7df      	b.n	800c5be <_strtod_l+0xe6>
 800c5fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	9219      	str	r2, [sp, #100]	@ 0x64
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2b30      	cmp	r3, #48	@ 0x30
 800c608:	d0f9      	beq.n	800c5fe <_strtod_l+0x126>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d09d      	beq.n	800c54a <_strtod_l+0x72>
 800c60e:	2301      	movs	r3, #1
 800c610:	9309      	str	r3, [sp, #36]	@ 0x24
 800c612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c614:	930c      	str	r3, [sp, #48]	@ 0x30
 800c616:	2300      	movs	r3, #0
 800c618:	9308      	str	r3, [sp, #32]
 800c61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c61c:	461f      	mov	r7, r3
 800c61e:	220a      	movs	r2, #10
 800c620:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c622:	7805      	ldrb	r5, [r0, #0]
 800c624:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c628:	b2d9      	uxtb	r1, r3
 800c62a:	2909      	cmp	r1, #9
 800c62c:	d928      	bls.n	800c680 <_strtod_l+0x1a8>
 800c62e:	494e      	ldr	r1, [pc, #312]	@ (800c768 <_strtod_l+0x290>)
 800c630:	2201      	movs	r2, #1
 800c632:	f000 ffd5 	bl	800d5e0 <strncmp>
 800c636:	2800      	cmp	r0, #0
 800c638:	d032      	beq.n	800c6a0 <_strtod_l+0x1c8>
 800c63a:	2000      	movs	r0, #0
 800c63c:	462a      	mov	r2, r5
 800c63e:	4681      	mov	r9, r0
 800c640:	463d      	mov	r5, r7
 800c642:	4603      	mov	r3, r0
 800c644:	2a65      	cmp	r2, #101	@ 0x65
 800c646:	d001      	beq.n	800c64c <_strtod_l+0x174>
 800c648:	2a45      	cmp	r2, #69	@ 0x45
 800c64a:	d114      	bne.n	800c676 <_strtod_l+0x19e>
 800c64c:	b91d      	cbnz	r5, 800c656 <_strtod_l+0x17e>
 800c64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c650:	4302      	orrs	r2, r0
 800c652:	d095      	beq.n	800c580 <_strtod_l+0xa8>
 800c654:	2500      	movs	r5, #0
 800c656:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c658:	1c62      	adds	r2, r4, #1
 800c65a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c65c:	7862      	ldrb	r2, [r4, #1]
 800c65e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c660:	d077      	beq.n	800c752 <_strtod_l+0x27a>
 800c662:	2a2d      	cmp	r2, #45	@ 0x2d
 800c664:	d07b      	beq.n	800c75e <_strtod_l+0x286>
 800c666:	f04f 0c00 	mov.w	ip, #0
 800c66a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c66e:	2909      	cmp	r1, #9
 800c670:	f240 8082 	bls.w	800c778 <_strtod_l+0x2a0>
 800c674:	9419      	str	r4, [sp, #100]	@ 0x64
 800c676:	f04f 0800 	mov.w	r8, #0
 800c67a:	e0a2      	b.n	800c7c2 <_strtod_l+0x2ea>
 800c67c:	2300      	movs	r3, #0
 800c67e:	e7c7      	b.n	800c610 <_strtod_l+0x138>
 800c680:	2f08      	cmp	r7, #8
 800c682:	bfd5      	itete	le
 800c684:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c686:	9908      	ldrgt	r1, [sp, #32]
 800c688:	fb02 3301 	mlale	r3, r2, r1, r3
 800c68c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c690:	f100 0001 	add.w	r0, r0, #1
 800c694:	bfd4      	ite	le
 800c696:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c698:	9308      	strgt	r3, [sp, #32]
 800c69a:	3701      	adds	r7, #1
 800c69c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c69e:	e7bf      	b.n	800c620 <_strtod_l+0x148>
 800c6a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6a6:	785a      	ldrb	r2, [r3, #1]
 800c6a8:	b37f      	cbz	r7, 800c70a <_strtod_l+0x232>
 800c6aa:	4681      	mov	r9, r0
 800c6ac:	463d      	mov	r5, r7
 800c6ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	d912      	bls.n	800c6dc <_strtod_l+0x204>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e7c4      	b.n	800c644 <_strtod_l+0x16c>
 800c6ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6c0:	785a      	ldrb	r2, [r3, #1]
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	2a30      	cmp	r2, #48	@ 0x30
 800c6c6:	d0f8      	beq.n	800c6ba <_strtod_l+0x1e2>
 800c6c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6cc:	2b08      	cmp	r3, #8
 800c6ce:	f200 84d3 	bhi.w	800d078 <_strtod_l+0xba0>
 800c6d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6d6:	4681      	mov	r9, r0
 800c6d8:	2000      	movs	r0, #0
 800c6da:	4605      	mov	r5, r0
 800c6dc:	3a30      	subs	r2, #48	@ 0x30
 800c6de:	f100 0301 	add.w	r3, r0, #1
 800c6e2:	d02a      	beq.n	800c73a <_strtod_l+0x262>
 800c6e4:	4499      	add	r9, r3
 800c6e6:	eb00 0c05 	add.w	ip, r0, r5
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	210a      	movs	r1, #10
 800c6ee:	4563      	cmp	r3, ip
 800c6f0:	d10d      	bne.n	800c70e <_strtod_l+0x236>
 800c6f2:	1c69      	adds	r1, r5, #1
 800c6f4:	4401      	add	r1, r0
 800c6f6:	4428      	add	r0, r5
 800c6f8:	2808      	cmp	r0, #8
 800c6fa:	dc16      	bgt.n	800c72a <_strtod_l+0x252>
 800c6fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6fe:	230a      	movs	r3, #10
 800c700:	fb03 2300 	mla	r3, r3, r0, r2
 800c704:	930a      	str	r3, [sp, #40]	@ 0x28
 800c706:	2300      	movs	r3, #0
 800c708:	e018      	b.n	800c73c <_strtod_l+0x264>
 800c70a:	4638      	mov	r0, r7
 800c70c:	e7da      	b.n	800c6c4 <_strtod_l+0x1ec>
 800c70e:	2b08      	cmp	r3, #8
 800c710:	f103 0301 	add.w	r3, r3, #1
 800c714:	dc03      	bgt.n	800c71e <_strtod_l+0x246>
 800c716:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c718:	434e      	muls	r6, r1
 800c71a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c71c:	e7e7      	b.n	800c6ee <_strtod_l+0x216>
 800c71e:	2b10      	cmp	r3, #16
 800c720:	bfde      	ittt	le
 800c722:	9e08      	ldrle	r6, [sp, #32]
 800c724:	434e      	mulle	r6, r1
 800c726:	9608      	strle	r6, [sp, #32]
 800c728:	e7e1      	b.n	800c6ee <_strtod_l+0x216>
 800c72a:	280f      	cmp	r0, #15
 800c72c:	dceb      	bgt.n	800c706 <_strtod_l+0x22e>
 800c72e:	9808      	ldr	r0, [sp, #32]
 800c730:	230a      	movs	r3, #10
 800c732:	fb03 2300 	mla	r3, r3, r0, r2
 800c736:	9308      	str	r3, [sp, #32]
 800c738:	e7e5      	b.n	800c706 <_strtod_l+0x22e>
 800c73a:	4629      	mov	r1, r5
 800c73c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c73e:	1c50      	adds	r0, r2, #1
 800c740:	9019      	str	r0, [sp, #100]	@ 0x64
 800c742:	7852      	ldrb	r2, [r2, #1]
 800c744:	4618      	mov	r0, r3
 800c746:	460d      	mov	r5, r1
 800c748:	e7b1      	b.n	800c6ae <_strtod_l+0x1d6>
 800c74a:	f04f 0900 	mov.w	r9, #0
 800c74e:	2301      	movs	r3, #1
 800c750:	e77d      	b.n	800c64e <_strtod_l+0x176>
 800c752:	f04f 0c00 	mov.w	ip, #0
 800c756:	1ca2      	adds	r2, r4, #2
 800c758:	9219      	str	r2, [sp, #100]	@ 0x64
 800c75a:	78a2      	ldrb	r2, [r4, #2]
 800c75c:	e785      	b.n	800c66a <_strtod_l+0x192>
 800c75e:	f04f 0c01 	mov.w	ip, #1
 800c762:	e7f8      	b.n	800c756 <_strtod_l+0x27e>
 800c764:	0800f4f0 	.word	0x0800f4f0
 800c768:	0800f4d8 	.word	0x0800f4d8
 800c76c:	7ff00000 	.word	0x7ff00000
 800c770:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c772:	1c51      	adds	r1, r2, #1
 800c774:	9119      	str	r1, [sp, #100]	@ 0x64
 800c776:	7852      	ldrb	r2, [r2, #1]
 800c778:	2a30      	cmp	r2, #48	@ 0x30
 800c77a:	d0f9      	beq.n	800c770 <_strtod_l+0x298>
 800c77c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c780:	2908      	cmp	r1, #8
 800c782:	f63f af78 	bhi.w	800c676 <_strtod_l+0x19e>
 800c786:	3a30      	subs	r2, #48	@ 0x30
 800c788:	920e      	str	r2, [sp, #56]	@ 0x38
 800c78a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c78c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c78e:	f04f 080a 	mov.w	r8, #10
 800c792:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c794:	1c56      	adds	r6, r2, #1
 800c796:	9619      	str	r6, [sp, #100]	@ 0x64
 800c798:	7852      	ldrb	r2, [r2, #1]
 800c79a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c79e:	f1be 0f09 	cmp.w	lr, #9
 800c7a2:	d939      	bls.n	800c818 <_strtod_l+0x340>
 800c7a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c7a6:	1a76      	subs	r6, r6, r1
 800c7a8:	2e08      	cmp	r6, #8
 800c7aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c7ae:	dc03      	bgt.n	800c7b8 <_strtod_l+0x2e0>
 800c7b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7b2:	4588      	cmp	r8, r1
 800c7b4:	bfa8      	it	ge
 800c7b6:	4688      	movge	r8, r1
 800c7b8:	f1bc 0f00 	cmp.w	ip, #0
 800c7bc:	d001      	beq.n	800c7c2 <_strtod_l+0x2ea>
 800c7be:	f1c8 0800 	rsb	r8, r8, #0
 800c7c2:	2d00      	cmp	r5, #0
 800c7c4:	d14e      	bne.n	800c864 <_strtod_l+0x38c>
 800c7c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7c8:	4308      	orrs	r0, r1
 800c7ca:	f47f aebe 	bne.w	800c54a <_strtod_l+0x72>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f47f aed6 	bne.w	800c580 <_strtod_l+0xa8>
 800c7d4:	2a69      	cmp	r2, #105	@ 0x69
 800c7d6:	d028      	beq.n	800c82a <_strtod_l+0x352>
 800c7d8:	dc25      	bgt.n	800c826 <_strtod_l+0x34e>
 800c7da:	2a49      	cmp	r2, #73	@ 0x49
 800c7dc:	d025      	beq.n	800c82a <_strtod_l+0x352>
 800c7de:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7e0:	f47f aece 	bne.w	800c580 <_strtod_l+0xa8>
 800c7e4:	499b      	ldr	r1, [pc, #620]	@ (800ca54 <_strtod_l+0x57c>)
 800c7e6:	a819      	add	r0, sp, #100	@ 0x64
 800c7e8:	f001 f9ee 	bl	800dbc8 <__match>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f43f aec7 	beq.w	800c580 <_strtod_l+0xa8>
 800c7f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b28      	cmp	r3, #40	@ 0x28
 800c7f8:	d12e      	bne.n	800c858 <_strtod_l+0x380>
 800c7fa:	4997      	ldr	r1, [pc, #604]	@ (800ca58 <_strtod_l+0x580>)
 800c7fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7fe:	a819      	add	r0, sp, #100	@ 0x64
 800c800:	f001 f9f6 	bl	800dbf0 <__hexnan>
 800c804:	2805      	cmp	r0, #5
 800c806:	d127      	bne.n	800c858 <_strtod_l+0x380>
 800c808:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c80a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c80e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c812:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c816:	e698      	b.n	800c54a <_strtod_l+0x72>
 800c818:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c81a:	fb08 2101 	mla	r1, r8, r1, r2
 800c81e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c822:	920e      	str	r2, [sp, #56]	@ 0x38
 800c824:	e7b5      	b.n	800c792 <_strtod_l+0x2ba>
 800c826:	2a6e      	cmp	r2, #110	@ 0x6e
 800c828:	e7da      	b.n	800c7e0 <_strtod_l+0x308>
 800c82a:	498c      	ldr	r1, [pc, #560]	@ (800ca5c <_strtod_l+0x584>)
 800c82c:	a819      	add	r0, sp, #100	@ 0x64
 800c82e:	f001 f9cb 	bl	800dbc8 <__match>
 800c832:	2800      	cmp	r0, #0
 800c834:	f43f aea4 	beq.w	800c580 <_strtod_l+0xa8>
 800c838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c83a:	4989      	ldr	r1, [pc, #548]	@ (800ca60 <_strtod_l+0x588>)
 800c83c:	3b01      	subs	r3, #1
 800c83e:	a819      	add	r0, sp, #100	@ 0x64
 800c840:	9319      	str	r3, [sp, #100]	@ 0x64
 800c842:	f001 f9c1 	bl	800dbc8 <__match>
 800c846:	b910      	cbnz	r0, 800c84e <_strtod_l+0x376>
 800c848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c84a:	3301      	adds	r3, #1
 800c84c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c84e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca70 <_strtod_l+0x598>
 800c852:	f04f 0a00 	mov.w	sl, #0
 800c856:	e678      	b.n	800c54a <_strtod_l+0x72>
 800c858:	4882      	ldr	r0, [pc, #520]	@ (800ca64 <_strtod_l+0x58c>)
 800c85a:	f000 fef1 	bl	800d640 <nan>
 800c85e:	ec5b ab10 	vmov	sl, fp, d0
 800c862:	e672      	b.n	800c54a <_strtod_l+0x72>
 800c864:	eba8 0309 	sub.w	r3, r8, r9
 800c868:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c86c:	2f00      	cmp	r7, #0
 800c86e:	bf08      	it	eq
 800c870:	462f      	moveq	r7, r5
 800c872:	2d10      	cmp	r5, #16
 800c874:	462c      	mov	r4, r5
 800c876:	bfa8      	it	ge
 800c878:	2410      	movge	r4, #16
 800c87a:	f7f3 fe4b 	bl	8000514 <__aeabi_ui2d>
 800c87e:	2d09      	cmp	r5, #9
 800c880:	4682      	mov	sl, r0
 800c882:	468b      	mov	fp, r1
 800c884:	dc13      	bgt.n	800c8ae <_strtod_l+0x3d6>
 800c886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f43f ae5e 	beq.w	800c54a <_strtod_l+0x72>
 800c88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c890:	dd78      	ble.n	800c984 <_strtod_l+0x4ac>
 800c892:	2b16      	cmp	r3, #22
 800c894:	dc5f      	bgt.n	800c956 <_strtod_l+0x47e>
 800c896:	4974      	ldr	r1, [pc, #464]	@ (800ca68 <_strtod_l+0x590>)
 800c898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a0:	4652      	mov	r2, sl
 800c8a2:	465b      	mov	r3, fp
 800c8a4:	f7f3 feb0 	bl	8000608 <__aeabi_dmul>
 800c8a8:	4682      	mov	sl, r0
 800c8aa:	468b      	mov	fp, r1
 800c8ac:	e64d      	b.n	800c54a <_strtod_l+0x72>
 800c8ae:	4b6e      	ldr	r3, [pc, #440]	@ (800ca68 <_strtod_l+0x590>)
 800c8b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c8b8:	f7f3 fea6 	bl	8000608 <__aeabi_dmul>
 800c8bc:	4682      	mov	sl, r0
 800c8be:	9808      	ldr	r0, [sp, #32]
 800c8c0:	468b      	mov	fp, r1
 800c8c2:	f7f3 fe27 	bl	8000514 <__aeabi_ui2d>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4650      	mov	r0, sl
 800c8cc:	4659      	mov	r1, fp
 800c8ce:	f7f3 fce5 	bl	800029c <__adddf3>
 800c8d2:	2d0f      	cmp	r5, #15
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	468b      	mov	fp, r1
 800c8d8:	ddd5      	ble.n	800c886 <_strtod_l+0x3ae>
 800c8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8dc:	1b2c      	subs	r4, r5, r4
 800c8de:	441c      	add	r4, r3
 800c8e0:	2c00      	cmp	r4, #0
 800c8e2:	f340 8096 	ble.w	800ca12 <_strtod_l+0x53a>
 800c8e6:	f014 030f 	ands.w	r3, r4, #15
 800c8ea:	d00a      	beq.n	800c902 <_strtod_l+0x42a>
 800c8ec:	495e      	ldr	r1, [pc, #376]	@ (800ca68 <_strtod_l+0x590>)
 800c8ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8f2:	4652      	mov	r2, sl
 800c8f4:	465b      	mov	r3, fp
 800c8f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8fa:	f7f3 fe85 	bl	8000608 <__aeabi_dmul>
 800c8fe:	4682      	mov	sl, r0
 800c900:	468b      	mov	fp, r1
 800c902:	f034 040f 	bics.w	r4, r4, #15
 800c906:	d073      	beq.n	800c9f0 <_strtod_l+0x518>
 800c908:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c90c:	dd48      	ble.n	800c9a0 <_strtod_l+0x4c8>
 800c90e:	2400      	movs	r4, #0
 800c910:	46a0      	mov	r8, r4
 800c912:	940a      	str	r4, [sp, #40]	@ 0x28
 800c914:	46a1      	mov	r9, r4
 800c916:	9a05      	ldr	r2, [sp, #20]
 800c918:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca70 <_strtod_l+0x598>
 800c91c:	2322      	movs	r3, #34	@ 0x22
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	f04f 0a00 	mov.w	sl, #0
 800c924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c926:	2b00      	cmp	r3, #0
 800c928:	f43f ae0f 	beq.w	800c54a <_strtod_l+0x72>
 800c92c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c92e:	9805      	ldr	r0, [sp, #20]
 800c930:	f7ff f942 	bl	800bbb8 <_Bfree>
 800c934:	9805      	ldr	r0, [sp, #20]
 800c936:	4649      	mov	r1, r9
 800c938:	f7ff f93e 	bl	800bbb8 <_Bfree>
 800c93c:	9805      	ldr	r0, [sp, #20]
 800c93e:	4641      	mov	r1, r8
 800c940:	f7ff f93a 	bl	800bbb8 <_Bfree>
 800c944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	f7ff f936 	bl	800bbb8 <_Bfree>
 800c94c:	9805      	ldr	r0, [sp, #20]
 800c94e:	4621      	mov	r1, r4
 800c950:	f7ff f932 	bl	800bbb8 <_Bfree>
 800c954:	e5f9      	b.n	800c54a <_strtod_l+0x72>
 800c956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c958:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c95c:	4293      	cmp	r3, r2
 800c95e:	dbbc      	blt.n	800c8da <_strtod_l+0x402>
 800c960:	4c41      	ldr	r4, [pc, #260]	@ (800ca68 <_strtod_l+0x590>)
 800c962:	f1c5 050f 	rsb	r5, r5, #15
 800c966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c96a:	4652      	mov	r2, sl
 800c96c:	465b      	mov	r3, fp
 800c96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c972:	f7f3 fe49 	bl	8000608 <__aeabi_dmul>
 800c976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c978:	1b5d      	subs	r5, r3, r5
 800c97a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c97e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c982:	e78f      	b.n	800c8a4 <_strtod_l+0x3cc>
 800c984:	3316      	adds	r3, #22
 800c986:	dba8      	blt.n	800c8da <_strtod_l+0x402>
 800c988:	4b37      	ldr	r3, [pc, #220]	@ (800ca68 <_strtod_l+0x590>)
 800c98a:	eba9 0808 	sub.w	r8, r9, r8
 800c98e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c992:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c996:	4650      	mov	r0, sl
 800c998:	4659      	mov	r1, fp
 800c99a:	f7f3 ff5f 	bl	800085c <__aeabi_ddiv>
 800c99e:	e783      	b.n	800c8a8 <_strtod_l+0x3d0>
 800c9a0:	4b32      	ldr	r3, [pc, #200]	@ (800ca6c <_strtod_l+0x594>)
 800c9a2:	9308      	str	r3, [sp, #32]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	1124      	asrs	r4, r4, #4
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	4659      	mov	r1, fp
 800c9ac:	461e      	mov	r6, r3
 800c9ae:	2c01      	cmp	r4, #1
 800c9b0:	dc21      	bgt.n	800c9f6 <_strtod_l+0x51e>
 800c9b2:	b10b      	cbz	r3, 800c9b8 <_strtod_l+0x4e0>
 800c9b4:	4682      	mov	sl, r0
 800c9b6:	468b      	mov	fp, r1
 800c9b8:	492c      	ldr	r1, [pc, #176]	@ (800ca6c <_strtod_l+0x594>)
 800c9ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c9be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ca:	f7f3 fe1d 	bl	8000608 <__aeabi_dmul>
 800c9ce:	4b28      	ldr	r3, [pc, #160]	@ (800ca70 <_strtod_l+0x598>)
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	400b      	ands	r3, r1
 800c9d4:	4927      	ldr	r1, [pc, #156]	@ (800ca74 <_strtod_l+0x59c>)
 800c9d6:	428b      	cmp	r3, r1
 800c9d8:	4682      	mov	sl, r0
 800c9da:	d898      	bhi.n	800c90e <_strtod_l+0x436>
 800c9dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf86      	itte	hi
 800c9e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca78 <_strtod_l+0x5a0>
 800c9e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9308      	str	r3, [sp, #32]
 800c9f4:	e07a      	b.n	800caec <_strtod_l+0x614>
 800c9f6:	07e2      	lsls	r2, r4, #31
 800c9f8:	d505      	bpl.n	800ca06 <_strtod_l+0x52e>
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fe02 	bl	8000608 <__aeabi_dmul>
 800ca04:	2301      	movs	r3, #1
 800ca06:	9a08      	ldr	r2, [sp, #32]
 800ca08:	3208      	adds	r2, #8
 800ca0a:	3601      	adds	r6, #1
 800ca0c:	1064      	asrs	r4, r4, #1
 800ca0e:	9208      	str	r2, [sp, #32]
 800ca10:	e7cd      	b.n	800c9ae <_strtod_l+0x4d6>
 800ca12:	d0ed      	beq.n	800c9f0 <_strtod_l+0x518>
 800ca14:	4264      	negs	r4, r4
 800ca16:	f014 020f 	ands.w	r2, r4, #15
 800ca1a:	d00a      	beq.n	800ca32 <_strtod_l+0x55a>
 800ca1c:	4b12      	ldr	r3, [pc, #72]	@ (800ca68 <_strtod_l+0x590>)
 800ca1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca22:	4650      	mov	r0, sl
 800ca24:	4659      	mov	r1, fp
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	f7f3 ff17 	bl	800085c <__aeabi_ddiv>
 800ca2e:	4682      	mov	sl, r0
 800ca30:	468b      	mov	fp, r1
 800ca32:	1124      	asrs	r4, r4, #4
 800ca34:	d0dc      	beq.n	800c9f0 <_strtod_l+0x518>
 800ca36:	2c1f      	cmp	r4, #31
 800ca38:	dd20      	ble.n	800ca7c <_strtod_l+0x5a4>
 800ca3a:	2400      	movs	r4, #0
 800ca3c:	46a0      	mov	r8, r4
 800ca3e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca40:	46a1      	mov	r9, r4
 800ca42:	9a05      	ldr	r2, [sp, #20]
 800ca44:	2322      	movs	r3, #34	@ 0x22
 800ca46:	f04f 0a00 	mov.w	sl, #0
 800ca4a:	f04f 0b00 	mov.w	fp, #0
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	e768      	b.n	800c924 <_strtod_l+0x44c>
 800ca52:	bf00      	nop
 800ca54:	0800f2c5 	.word	0x0800f2c5
 800ca58:	0800f4dc 	.word	0x0800f4dc
 800ca5c:	0800f2bd 	.word	0x0800f2bd
 800ca60:	0800f2f4 	.word	0x0800f2f4
 800ca64:	0800f685 	.word	0x0800f685
 800ca68:	0800f410 	.word	0x0800f410
 800ca6c:	0800f3e8 	.word	0x0800f3e8
 800ca70:	7ff00000 	.word	0x7ff00000
 800ca74:	7ca00000 	.word	0x7ca00000
 800ca78:	7fefffff 	.word	0x7fefffff
 800ca7c:	f014 0310 	ands.w	r3, r4, #16
 800ca80:	bf18      	it	ne
 800ca82:	236a      	movne	r3, #106	@ 0x6a
 800ca84:	4ea9      	ldr	r6, [pc, #676]	@ (800cd2c <_strtod_l+0x854>)
 800ca86:	9308      	str	r3, [sp, #32]
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	07e2      	lsls	r2, r4, #31
 800ca90:	d504      	bpl.n	800ca9c <_strtod_l+0x5c4>
 800ca92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca96:	f7f3 fdb7 	bl	8000608 <__aeabi_dmul>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	1064      	asrs	r4, r4, #1
 800ca9e:	f106 0608 	add.w	r6, r6, #8
 800caa2:	d1f4      	bne.n	800ca8e <_strtod_l+0x5b6>
 800caa4:	b10b      	cbz	r3, 800caaa <_strtod_l+0x5d2>
 800caa6:	4682      	mov	sl, r0
 800caa8:	468b      	mov	fp, r1
 800caaa:	9b08      	ldr	r3, [sp, #32]
 800caac:	b1b3      	cbz	r3, 800cadc <_strtod_l+0x604>
 800caae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cab2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	4659      	mov	r1, fp
 800caba:	dd0f      	ble.n	800cadc <_strtod_l+0x604>
 800cabc:	2b1f      	cmp	r3, #31
 800cabe:	dd55      	ble.n	800cb6c <_strtod_l+0x694>
 800cac0:	2b34      	cmp	r3, #52	@ 0x34
 800cac2:	bfde      	ittt	le
 800cac4:	f04f 33ff 	movle.w	r3, #4294967295
 800cac8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cacc:	4093      	lslle	r3, r2
 800cace:	f04f 0a00 	mov.w	sl, #0
 800cad2:	bfcc      	ite	gt
 800cad4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cad8:	ea03 0b01 	andle.w	fp, r3, r1
 800cadc:	2200      	movs	r2, #0
 800cade:	2300      	movs	r3, #0
 800cae0:	4650      	mov	r0, sl
 800cae2:	4659      	mov	r1, fp
 800cae4:	f7f3 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d1a6      	bne.n	800ca3a <_strtod_l+0x562>
 800caec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800caf2:	9805      	ldr	r0, [sp, #20]
 800caf4:	462b      	mov	r3, r5
 800caf6:	463a      	mov	r2, r7
 800caf8:	f7ff f8c6 	bl	800bc88 <__s2b>
 800cafc:	900a      	str	r0, [sp, #40]	@ 0x28
 800cafe:	2800      	cmp	r0, #0
 800cb00:	f43f af05 	beq.w	800c90e <_strtod_l+0x436>
 800cb04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	eba9 0308 	sub.w	r3, r9, r8
 800cb0c:	bfa8      	it	ge
 800cb0e:	2300      	movge	r3, #0
 800cb10:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb12:	2400      	movs	r4, #0
 800cb14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb18:	9316      	str	r3, [sp, #88]	@ 0x58
 800cb1a:	46a0      	mov	r8, r4
 800cb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb1e:	9805      	ldr	r0, [sp, #20]
 800cb20:	6859      	ldr	r1, [r3, #4]
 800cb22:	f7ff f809 	bl	800bb38 <_Balloc>
 800cb26:	4681      	mov	r9, r0
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	f43f aef4 	beq.w	800c916 <_strtod_l+0x43e>
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb30:	691a      	ldr	r2, [r3, #16]
 800cb32:	3202      	adds	r2, #2
 800cb34:	f103 010c 	add.w	r1, r3, #12
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	300c      	adds	r0, #12
 800cb3c:	f000 fd72 	bl	800d624 <memcpy>
 800cb40:	ec4b ab10 	vmov	d0, sl, fp
 800cb44:	9805      	ldr	r0, [sp, #20]
 800cb46:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb48:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb4e:	f7ff fbd7 	bl	800c300 <__d2b>
 800cb52:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb54:	2800      	cmp	r0, #0
 800cb56:	f43f aede 	beq.w	800c916 <_strtod_l+0x43e>
 800cb5a:	9805      	ldr	r0, [sp, #20]
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	f7ff f929 	bl	800bdb4 <__i2b>
 800cb62:	4680      	mov	r8, r0
 800cb64:	b948      	cbnz	r0, 800cb7a <_strtod_l+0x6a2>
 800cb66:	f04f 0800 	mov.w	r8, #0
 800cb6a:	e6d4      	b.n	800c916 <_strtod_l+0x43e>
 800cb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb70:	fa02 f303 	lsl.w	r3, r2, r3
 800cb74:	ea03 0a0a 	and.w	sl, r3, sl
 800cb78:	e7b0      	b.n	800cadc <_strtod_l+0x604>
 800cb7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb7e:	2d00      	cmp	r5, #0
 800cb80:	bfab      	itete	ge
 800cb82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb8a:	bfac      	ite	ge
 800cb8c:	18ef      	addge	r7, r5, r3
 800cb8e:	1b5e      	sublt	r6, r3, r5
 800cb90:	9b08      	ldr	r3, [sp, #32]
 800cb92:	1aed      	subs	r5, r5, r3
 800cb94:	4415      	add	r5, r2
 800cb96:	4b66      	ldr	r3, [pc, #408]	@ (800cd30 <_strtod_l+0x858>)
 800cb98:	3d01      	subs	r5, #1
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cba0:	da50      	bge.n	800cc44 <_strtod_l+0x76c>
 800cba2:	1b5b      	subs	r3, r3, r5
 800cba4:	2b1f      	cmp	r3, #31
 800cba6:	eba2 0203 	sub.w	r2, r2, r3
 800cbaa:	f04f 0101 	mov.w	r1, #1
 800cbae:	dc3d      	bgt.n	800cc2c <_strtod_l+0x754>
 800cbb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbba:	18bd      	adds	r5, r7, r2
 800cbbc:	9b08      	ldr	r3, [sp, #32]
 800cbbe:	42af      	cmp	r7, r5
 800cbc0:	4416      	add	r6, r2
 800cbc2:	441e      	add	r6, r3
 800cbc4:	463b      	mov	r3, r7
 800cbc6:	bfa8      	it	ge
 800cbc8:	462b      	movge	r3, r5
 800cbca:	42b3      	cmp	r3, r6
 800cbcc:	bfa8      	it	ge
 800cbce:	4633      	movge	r3, r6
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bfc2      	ittt	gt
 800cbd4:	1aed      	subgt	r5, r5, r3
 800cbd6:	1af6      	subgt	r6, r6, r3
 800cbd8:	1aff      	subgt	r7, r7, r3
 800cbda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dd16      	ble.n	800cc0e <_strtod_l+0x736>
 800cbe0:	4641      	mov	r1, r8
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f7ff f9a5 	bl	800bf34 <__pow5mult>
 800cbea:	4680      	mov	r8, r0
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d0ba      	beq.n	800cb66 <_strtod_l+0x68e>
 800cbf0:	4601      	mov	r1, r0
 800cbf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbf4:	9805      	ldr	r0, [sp, #20]
 800cbf6:	f7ff f8f3 	bl	800bde0 <__multiply>
 800cbfa:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	f43f ae8a 	beq.w	800c916 <_strtod_l+0x43e>
 800cc02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc04:	9805      	ldr	r0, [sp, #20]
 800cc06:	f7fe ffd7 	bl	800bbb8 <_Bfree>
 800cc0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	dc1d      	bgt.n	800cc4e <_strtod_l+0x776>
 800cc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd23      	ble.n	800cc60 <_strtod_l+0x788>
 800cc18:	4649      	mov	r1, r9
 800cc1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cc1c:	9805      	ldr	r0, [sp, #20]
 800cc1e:	f7ff f989 	bl	800bf34 <__pow5mult>
 800cc22:	4681      	mov	r9, r0
 800cc24:	b9e0      	cbnz	r0, 800cc60 <_strtod_l+0x788>
 800cc26:	f04f 0900 	mov.w	r9, #0
 800cc2a:	e674      	b.n	800c916 <_strtod_l+0x43e>
 800cc2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc38:	35e2      	adds	r5, #226	@ 0xe2
 800cc3a:	fa01 f305 	lsl.w	r3, r1, r5
 800cc3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc40:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc42:	e7ba      	b.n	800cbba <_strtod_l+0x6e2>
 800cc44:	2300      	movs	r3, #0
 800cc46:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc48:	2301      	movs	r3, #1
 800cc4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc4c:	e7b5      	b.n	800cbba <_strtod_l+0x6e2>
 800cc4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc50:	9805      	ldr	r0, [sp, #20]
 800cc52:	462a      	mov	r2, r5
 800cc54:	f7ff f9c8 	bl	800bfe8 <__lshift>
 800cc58:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d1d9      	bne.n	800cc12 <_strtod_l+0x73a>
 800cc5e:	e65a      	b.n	800c916 <_strtod_l+0x43e>
 800cc60:	2e00      	cmp	r6, #0
 800cc62:	dd07      	ble.n	800cc74 <_strtod_l+0x79c>
 800cc64:	4649      	mov	r1, r9
 800cc66:	9805      	ldr	r0, [sp, #20]
 800cc68:	4632      	mov	r2, r6
 800cc6a:	f7ff f9bd 	bl	800bfe8 <__lshift>
 800cc6e:	4681      	mov	r9, r0
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d0d8      	beq.n	800cc26 <_strtod_l+0x74e>
 800cc74:	2f00      	cmp	r7, #0
 800cc76:	dd08      	ble.n	800cc8a <_strtod_l+0x7b2>
 800cc78:	4641      	mov	r1, r8
 800cc7a:	9805      	ldr	r0, [sp, #20]
 800cc7c:	463a      	mov	r2, r7
 800cc7e:	f7ff f9b3 	bl	800bfe8 <__lshift>
 800cc82:	4680      	mov	r8, r0
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f43f ae46 	beq.w	800c916 <_strtod_l+0x43e>
 800cc8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc8c:	9805      	ldr	r0, [sp, #20]
 800cc8e:	464a      	mov	r2, r9
 800cc90:	f7ff fa32 	bl	800c0f8 <__mdiff>
 800cc94:	4604      	mov	r4, r0
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f43f ae3d 	beq.w	800c916 <_strtod_l+0x43e>
 800cc9c:	68c3      	ldr	r3, [r0, #12]
 800cc9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cca0:	2300      	movs	r3, #0
 800cca2:	60c3      	str	r3, [r0, #12]
 800cca4:	4641      	mov	r1, r8
 800cca6:	f7ff fa0b 	bl	800c0c0 <__mcmp>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	da46      	bge.n	800cd3c <_strtod_l+0x864>
 800ccae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccb0:	ea53 030a 	orrs.w	r3, r3, sl
 800ccb4:	d16c      	bne.n	800cd90 <_strtod_l+0x8b8>
 800ccb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d168      	bne.n	800cd90 <_strtod_l+0x8b8>
 800ccbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccc2:	0d1b      	lsrs	r3, r3, #20
 800ccc4:	051b      	lsls	r3, r3, #20
 800ccc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccca:	d961      	bls.n	800cd90 <_strtod_l+0x8b8>
 800cccc:	6963      	ldr	r3, [r4, #20]
 800ccce:	b913      	cbnz	r3, 800ccd6 <_strtod_l+0x7fe>
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	dd5c      	ble.n	800cd90 <_strtod_l+0x8b8>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	2201      	movs	r2, #1
 800ccda:	9805      	ldr	r0, [sp, #20]
 800ccdc:	f7ff f984 	bl	800bfe8 <__lshift>
 800cce0:	4641      	mov	r1, r8
 800cce2:	4604      	mov	r4, r0
 800cce4:	f7ff f9ec 	bl	800c0c0 <__mcmp>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	dd51      	ble.n	800cd90 <_strtod_l+0x8b8>
 800ccec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccf0:	9a08      	ldr	r2, [sp, #32]
 800ccf2:	0d1b      	lsrs	r3, r3, #20
 800ccf4:	051b      	lsls	r3, r3, #20
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	d06b      	beq.n	800cdd2 <_strtod_l+0x8fa>
 800ccfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccfe:	d868      	bhi.n	800cdd2 <_strtod_l+0x8fa>
 800cd00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cd04:	f67f ae9d 	bls.w	800ca42 <_strtod_l+0x56a>
 800cd08:	4b0a      	ldr	r3, [pc, #40]	@ (800cd34 <_strtod_l+0x85c>)
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	4659      	mov	r1, fp
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f7f3 fc7a 	bl	8000608 <__aeabi_dmul>
 800cd14:	4b08      	ldr	r3, [pc, #32]	@ (800cd38 <_strtod_l+0x860>)
 800cd16:	400b      	ands	r3, r1
 800cd18:	4682      	mov	sl, r0
 800cd1a:	468b      	mov	fp, r1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f47f ae05 	bne.w	800c92c <_strtod_l+0x454>
 800cd22:	9a05      	ldr	r2, [sp, #20]
 800cd24:	2322      	movs	r3, #34	@ 0x22
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	e600      	b.n	800c92c <_strtod_l+0x454>
 800cd2a:	bf00      	nop
 800cd2c:	0800f508 	.word	0x0800f508
 800cd30:	fffffc02 	.word	0xfffffc02
 800cd34:	39500000 	.word	0x39500000
 800cd38:	7ff00000 	.word	0x7ff00000
 800cd3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd40:	d165      	bne.n	800ce0e <_strtod_l+0x936>
 800cd42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd48:	b35a      	cbz	r2, 800cda2 <_strtod_l+0x8ca>
 800cd4a:	4a9f      	ldr	r2, [pc, #636]	@ (800cfc8 <_strtod_l+0xaf0>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d12b      	bne.n	800cda8 <_strtod_l+0x8d0>
 800cd50:	9b08      	ldr	r3, [sp, #32]
 800cd52:	4651      	mov	r1, sl
 800cd54:	b303      	cbz	r3, 800cd98 <_strtod_l+0x8c0>
 800cd56:	4b9d      	ldr	r3, [pc, #628]	@ (800cfcc <_strtod_l+0xaf4>)
 800cd58:	465a      	mov	r2, fp
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295
 800cd64:	d81b      	bhi.n	800cd9e <_strtod_l+0x8c6>
 800cd66:	0d1b      	lsrs	r3, r3, #20
 800cd68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd70:	4299      	cmp	r1, r3
 800cd72:	d119      	bne.n	800cda8 <_strtod_l+0x8d0>
 800cd74:	4b96      	ldr	r3, [pc, #600]	@ (800cfd0 <_strtod_l+0xaf8>)
 800cd76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d102      	bne.n	800cd82 <_strtod_l+0x8aa>
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	f43f adca 	beq.w	800c916 <_strtod_l+0x43e>
 800cd82:	4b92      	ldr	r3, [pc, #584]	@ (800cfcc <_strtod_l+0xaf4>)
 800cd84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd86:	401a      	ands	r2, r3
 800cd88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd8c:	f04f 0a00 	mov.w	sl, #0
 800cd90:	9b08      	ldr	r3, [sp, #32]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1b8      	bne.n	800cd08 <_strtod_l+0x830>
 800cd96:	e5c9      	b.n	800c92c <_strtod_l+0x454>
 800cd98:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9c:	e7e8      	b.n	800cd70 <_strtod_l+0x898>
 800cd9e:	4613      	mov	r3, r2
 800cda0:	e7e6      	b.n	800cd70 <_strtod_l+0x898>
 800cda2:	ea53 030a 	orrs.w	r3, r3, sl
 800cda6:	d0a1      	beq.n	800ccec <_strtod_l+0x814>
 800cda8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdaa:	b1db      	cbz	r3, 800cde4 <_strtod_l+0x90c>
 800cdac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdae:	4213      	tst	r3, r2
 800cdb0:	d0ee      	beq.n	800cd90 <_strtod_l+0x8b8>
 800cdb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdb4:	9a08      	ldr	r2, [sp, #32]
 800cdb6:	4650      	mov	r0, sl
 800cdb8:	4659      	mov	r1, fp
 800cdba:	b1bb      	cbz	r3, 800cdec <_strtod_l+0x914>
 800cdbc:	f7ff fb6e 	bl	800c49c <sulp>
 800cdc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdc4:	ec53 2b10 	vmov	r2, r3, d0
 800cdc8:	f7f3 fa68 	bl	800029c <__adddf3>
 800cdcc:	4682      	mov	sl, r0
 800cdce:	468b      	mov	fp, r1
 800cdd0:	e7de      	b.n	800cd90 <_strtod_l+0x8b8>
 800cdd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdde:	f04f 3aff 	mov.w	sl, #4294967295
 800cde2:	e7d5      	b.n	800cd90 <_strtod_l+0x8b8>
 800cde4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cde6:	ea13 0f0a 	tst.w	r3, sl
 800cdea:	e7e1      	b.n	800cdb0 <_strtod_l+0x8d8>
 800cdec:	f7ff fb56 	bl	800c49c <sulp>
 800cdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdf4:	ec53 2b10 	vmov	r2, r3, d0
 800cdf8:	f7f3 fa4e 	bl	8000298 <__aeabi_dsub>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	4682      	mov	sl, r0
 800ce02:	468b      	mov	fp, r1
 800ce04:	f7f3 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d0c1      	beq.n	800cd90 <_strtod_l+0x8b8>
 800ce0c:	e619      	b.n	800ca42 <_strtod_l+0x56a>
 800ce0e:	4641      	mov	r1, r8
 800ce10:	4620      	mov	r0, r4
 800ce12:	f7ff facd 	bl	800c3b0 <__ratio>
 800ce16:	ec57 6b10 	vmov	r6, r7, d0
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fe6c 	bl	8000b00 <__aeabi_dcmple>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d06f      	beq.n	800cf0c <_strtod_l+0xa34>
 800ce2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d17a      	bne.n	800cf28 <_strtod_l+0xa50>
 800ce32:	f1ba 0f00 	cmp.w	sl, #0
 800ce36:	d158      	bne.n	800ceea <_strtod_l+0xa12>
 800ce38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d15a      	bne.n	800cef8 <_strtod_l+0xa20>
 800ce42:	4b64      	ldr	r3, [pc, #400]	@ (800cfd4 <_strtod_l+0xafc>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	f7f3 fe4f 	bl	8000aec <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d159      	bne.n	800cf06 <_strtod_l+0xa2e>
 800ce52:	4630      	mov	r0, r6
 800ce54:	4639      	mov	r1, r7
 800ce56:	4b60      	ldr	r3, [pc, #384]	@ (800cfd8 <_strtod_l+0xb00>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f7f3 fbd5 	bl	8000608 <__aeabi_dmul>
 800ce5e:	4606      	mov	r6, r0
 800ce60:	460f      	mov	r7, r1
 800ce62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce66:	9606      	str	r6, [sp, #24]
 800ce68:	9307      	str	r3, [sp, #28]
 800ce6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce6e:	4d57      	ldr	r5, [pc, #348]	@ (800cfcc <_strtod_l+0xaf4>)
 800ce70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce76:	401d      	ands	r5, r3
 800ce78:	4b58      	ldr	r3, [pc, #352]	@ (800cfdc <_strtod_l+0xb04>)
 800ce7a:	429d      	cmp	r5, r3
 800ce7c:	f040 80b2 	bne.w	800cfe4 <_strtod_l+0xb0c>
 800ce80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce86:	ec4b ab10 	vmov	d0, sl, fp
 800ce8a:	f7ff f9c9 	bl	800c220 <__ulp>
 800ce8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce92:	ec51 0b10 	vmov	r0, r1, d0
 800ce96:	f7f3 fbb7 	bl	8000608 <__aeabi_dmul>
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	465b      	mov	r3, fp
 800ce9e:	f7f3 f9fd 	bl	800029c <__adddf3>
 800cea2:	460b      	mov	r3, r1
 800cea4:	4949      	ldr	r1, [pc, #292]	@ (800cfcc <_strtod_l+0xaf4>)
 800cea6:	4a4e      	ldr	r2, [pc, #312]	@ (800cfe0 <_strtod_l+0xb08>)
 800cea8:	4019      	ands	r1, r3
 800ceaa:	4291      	cmp	r1, r2
 800ceac:	4682      	mov	sl, r0
 800ceae:	d942      	bls.n	800cf36 <_strtod_l+0xa5e>
 800ceb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ceb2:	4b47      	ldr	r3, [pc, #284]	@ (800cfd0 <_strtod_l+0xaf8>)
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d103      	bne.n	800cec0 <_strtod_l+0x9e8>
 800ceb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceba:	3301      	adds	r3, #1
 800cebc:	f43f ad2b 	beq.w	800c916 <_strtod_l+0x43e>
 800cec0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfd0 <_strtod_l+0xaf8>
 800cec4:	f04f 3aff 	mov.w	sl, #4294967295
 800cec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceca:	9805      	ldr	r0, [sp, #20]
 800cecc:	f7fe fe74 	bl	800bbb8 <_Bfree>
 800ced0:	9805      	ldr	r0, [sp, #20]
 800ced2:	4649      	mov	r1, r9
 800ced4:	f7fe fe70 	bl	800bbb8 <_Bfree>
 800ced8:	9805      	ldr	r0, [sp, #20]
 800ceda:	4641      	mov	r1, r8
 800cedc:	f7fe fe6c 	bl	800bbb8 <_Bfree>
 800cee0:	9805      	ldr	r0, [sp, #20]
 800cee2:	4621      	mov	r1, r4
 800cee4:	f7fe fe68 	bl	800bbb8 <_Bfree>
 800cee8:	e618      	b.n	800cb1c <_strtod_l+0x644>
 800ceea:	f1ba 0f01 	cmp.w	sl, #1
 800ceee:	d103      	bne.n	800cef8 <_strtod_l+0xa20>
 800cef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f43f ada5 	beq.w	800ca42 <_strtod_l+0x56a>
 800cef8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cfa8 <_strtod_l+0xad0>
 800cefc:	4f35      	ldr	r7, [pc, #212]	@ (800cfd4 <_strtod_l+0xafc>)
 800cefe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf02:	2600      	movs	r6, #0
 800cf04:	e7b1      	b.n	800ce6a <_strtod_l+0x992>
 800cf06:	4f34      	ldr	r7, [pc, #208]	@ (800cfd8 <_strtod_l+0xb00>)
 800cf08:	2600      	movs	r6, #0
 800cf0a:	e7aa      	b.n	800ce62 <_strtod_l+0x98a>
 800cf0c:	4b32      	ldr	r3, [pc, #200]	@ (800cfd8 <_strtod_l+0xb00>)
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	2200      	movs	r2, #0
 800cf14:	f7f3 fb78 	bl	8000608 <__aeabi_dmul>
 800cf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	460f      	mov	r7, r1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d09f      	beq.n	800ce62 <_strtod_l+0x98a>
 800cf22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf26:	e7a0      	b.n	800ce6a <_strtod_l+0x992>
 800cf28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cfb0 <_strtod_l+0xad8>
 800cf2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf30:	ec57 6b17 	vmov	r6, r7, d7
 800cf34:	e799      	b.n	800ce6a <_strtod_l+0x992>
 800cf36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf3a:	9b08      	ldr	r3, [sp, #32]
 800cf3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1c1      	bne.n	800cec8 <_strtod_l+0x9f0>
 800cf44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf48:	0d1b      	lsrs	r3, r3, #20
 800cf4a:	051b      	lsls	r3, r3, #20
 800cf4c:	429d      	cmp	r5, r3
 800cf4e:	d1bb      	bne.n	800cec8 <_strtod_l+0x9f0>
 800cf50:	4630      	mov	r0, r6
 800cf52:	4639      	mov	r1, r7
 800cf54:	f7f3 feb8 	bl	8000cc8 <__aeabi_d2lz>
 800cf58:	f7f3 fb28 	bl	80005ac <__aeabi_l2d>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	f7f3 f998 	bl	8000298 <__aeabi_dsub>
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf76:	ea46 060a 	orr.w	r6, r6, sl
 800cf7a:	431e      	orrs	r6, r3
 800cf7c:	d06f      	beq.n	800d05e <_strtod_l+0xb86>
 800cf7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfb8 <_strtod_l+0xae0>)
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	f7f3 fdb2 	bl	8000aec <__aeabi_dcmplt>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	f47f accf 	bne.w	800c92c <_strtod_l+0x454>
 800cf8e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cfc0 <_strtod_l+0xae8>)
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf98:	f7f3 fdc6 	bl	8000b28 <__aeabi_dcmpgt>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d093      	beq.n	800cec8 <_strtod_l+0x9f0>
 800cfa0:	e4c4      	b.n	800c92c <_strtod_l+0x454>
 800cfa2:	bf00      	nop
 800cfa4:	f3af 8000 	nop.w
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	bff00000 	.word	0xbff00000
 800cfb0:	00000000 	.word	0x00000000
 800cfb4:	3ff00000 	.word	0x3ff00000
 800cfb8:	94a03595 	.word	0x94a03595
 800cfbc:	3fdfffff 	.word	0x3fdfffff
 800cfc0:	35afe535 	.word	0x35afe535
 800cfc4:	3fe00000 	.word	0x3fe00000
 800cfc8:	000fffff 	.word	0x000fffff
 800cfcc:	7ff00000 	.word	0x7ff00000
 800cfd0:	7fefffff 	.word	0x7fefffff
 800cfd4:	3ff00000 	.word	0x3ff00000
 800cfd8:	3fe00000 	.word	0x3fe00000
 800cfdc:	7fe00000 	.word	0x7fe00000
 800cfe0:	7c9fffff 	.word	0x7c9fffff
 800cfe4:	9b08      	ldr	r3, [sp, #32]
 800cfe6:	b323      	cbz	r3, 800d032 <_strtod_l+0xb5a>
 800cfe8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfec:	d821      	bhi.n	800d032 <_strtod_l+0xb5a>
 800cfee:	a328      	add	r3, pc, #160	@ (adr r3, 800d090 <_strtod_l+0xbb8>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	4630      	mov	r0, r6
 800cff6:	4639      	mov	r1, r7
 800cff8:	f7f3 fd82 	bl	8000b00 <__aeabi_dcmple>
 800cffc:	b1a0      	cbz	r0, 800d028 <_strtod_l+0xb50>
 800cffe:	4639      	mov	r1, r7
 800d000:	4630      	mov	r0, r6
 800d002:	f7f3 fdd9 	bl	8000bb8 <__aeabi_d2uiz>
 800d006:	2801      	cmp	r0, #1
 800d008:	bf38      	it	cc
 800d00a:	2001      	movcc	r0, #1
 800d00c:	f7f3 fa82 	bl	8000514 <__aeabi_ui2d>
 800d010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d012:	4606      	mov	r6, r0
 800d014:	460f      	mov	r7, r1
 800d016:	b9fb      	cbnz	r3, 800d058 <_strtod_l+0xb80>
 800d018:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d01c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d01e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d020:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d024:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d02a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d02e:	1b5b      	subs	r3, r3, r5
 800d030:	9311      	str	r3, [sp, #68]	@ 0x44
 800d032:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d036:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d03a:	f7ff f8f1 	bl	800c220 <__ulp>
 800d03e:	4650      	mov	r0, sl
 800d040:	ec53 2b10 	vmov	r2, r3, d0
 800d044:	4659      	mov	r1, fp
 800d046:	f7f3 fadf 	bl	8000608 <__aeabi_dmul>
 800d04a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d04e:	f7f3 f925 	bl	800029c <__adddf3>
 800d052:	4682      	mov	sl, r0
 800d054:	468b      	mov	fp, r1
 800d056:	e770      	b.n	800cf3a <_strtod_l+0xa62>
 800d058:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d05c:	e7e0      	b.n	800d020 <_strtod_l+0xb48>
 800d05e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d098 <_strtod_l+0xbc0>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 fd42 	bl	8000aec <__aeabi_dcmplt>
 800d068:	e798      	b.n	800cf9c <_strtod_l+0xac4>
 800d06a:	2300      	movs	r3, #0
 800d06c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d06e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	f7ff ba6d 	b.w	800c552 <_strtod_l+0x7a>
 800d078:	2a65      	cmp	r2, #101	@ 0x65
 800d07a:	f43f ab66 	beq.w	800c74a <_strtod_l+0x272>
 800d07e:	2a45      	cmp	r2, #69	@ 0x45
 800d080:	f43f ab63 	beq.w	800c74a <_strtod_l+0x272>
 800d084:	2301      	movs	r3, #1
 800d086:	f7ff bb9e 	b.w	800c7c6 <_strtod_l+0x2ee>
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w
 800d090:	ffc00000 	.word	0xffc00000
 800d094:	41dfffff 	.word	0x41dfffff
 800d098:	94a03595 	.word	0x94a03595
 800d09c:	3fcfffff 	.word	0x3fcfffff

0800d0a0 <_strtod_r>:
 800d0a0:	4b01      	ldr	r3, [pc, #4]	@ (800d0a8 <_strtod_r+0x8>)
 800d0a2:	f7ff ba19 	b.w	800c4d8 <_strtod_l>
 800d0a6:	bf00      	nop
 800d0a8:	20000158 	.word	0x20000158

0800d0ac <_strtol_l.constprop.0>:
 800d0ac:	2b24      	cmp	r3, #36	@ 0x24
 800d0ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b2:	4686      	mov	lr, r0
 800d0b4:	4690      	mov	r8, r2
 800d0b6:	d801      	bhi.n	800d0bc <_strtol_l.constprop.0+0x10>
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d106      	bne.n	800d0ca <_strtol_l.constprop.0+0x1e>
 800d0bc:	f7fd fdbc 	bl	800ac38 <__errno>
 800d0c0:	2316      	movs	r3, #22
 800d0c2:	6003      	str	r3, [r0, #0]
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ca:	4834      	ldr	r0, [pc, #208]	@ (800d19c <_strtol_l.constprop.0+0xf0>)
 800d0cc:	460d      	mov	r5, r1
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0d4:	5d06      	ldrb	r6, [r0, r4]
 800d0d6:	f016 0608 	ands.w	r6, r6, #8
 800d0da:	d1f8      	bne.n	800d0ce <_strtol_l.constprop.0+0x22>
 800d0dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0de:	d12d      	bne.n	800d13c <_strtol_l.constprop.0+0x90>
 800d0e0:	782c      	ldrb	r4, [r5, #0]
 800d0e2:	2601      	movs	r6, #1
 800d0e4:	1c95      	adds	r5, r2, #2
 800d0e6:	f033 0210 	bics.w	r2, r3, #16
 800d0ea:	d109      	bne.n	800d100 <_strtol_l.constprop.0+0x54>
 800d0ec:	2c30      	cmp	r4, #48	@ 0x30
 800d0ee:	d12a      	bne.n	800d146 <_strtol_l.constprop.0+0x9a>
 800d0f0:	782a      	ldrb	r2, [r5, #0]
 800d0f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0f6:	2a58      	cmp	r2, #88	@ 0x58
 800d0f8:	d125      	bne.n	800d146 <_strtol_l.constprop.0+0x9a>
 800d0fa:	786c      	ldrb	r4, [r5, #1]
 800d0fc:	2310      	movs	r3, #16
 800d0fe:	3502      	adds	r5, #2
 800d100:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d104:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d108:	2200      	movs	r2, #0
 800d10a:	fbbc f9f3 	udiv	r9, ip, r3
 800d10e:	4610      	mov	r0, r2
 800d110:	fb03 ca19 	mls	sl, r3, r9, ip
 800d114:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d118:	2f09      	cmp	r7, #9
 800d11a:	d81b      	bhi.n	800d154 <_strtol_l.constprop.0+0xa8>
 800d11c:	463c      	mov	r4, r7
 800d11e:	42a3      	cmp	r3, r4
 800d120:	dd27      	ble.n	800d172 <_strtol_l.constprop.0+0xc6>
 800d122:	1c57      	adds	r7, r2, #1
 800d124:	d007      	beq.n	800d136 <_strtol_l.constprop.0+0x8a>
 800d126:	4581      	cmp	r9, r0
 800d128:	d320      	bcc.n	800d16c <_strtol_l.constprop.0+0xc0>
 800d12a:	d101      	bne.n	800d130 <_strtol_l.constprop.0+0x84>
 800d12c:	45a2      	cmp	sl, r4
 800d12e:	db1d      	blt.n	800d16c <_strtol_l.constprop.0+0xc0>
 800d130:	fb00 4003 	mla	r0, r0, r3, r4
 800d134:	2201      	movs	r2, #1
 800d136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d13a:	e7eb      	b.n	800d114 <_strtol_l.constprop.0+0x68>
 800d13c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d13e:	bf04      	itt	eq
 800d140:	782c      	ldrbeq	r4, [r5, #0]
 800d142:	1c95      	addeq	r5, r2, #2
 800d144:	e7cf      	b.n	800d0e6 <_strtol_l.constprop.0+0x3a>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1da      	bne.n	800d100 <_strtol_l.constprop.0+0x54>
 800d14a:	2c30      	cmp	r4, #48	@ 0x30
 800d14c:	bf0c      	ite	eq
 800d14e:	2308      	moveq	r3, #8
 800d150:	230a      	movne	r3, #10
 800d152:	e7d5      	b.n	800d100 <_strtol_l.constprop.0+0x54>
 800d154:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d158:	2f19      	cmp	r7, #25
 800d15a:	d801      	bhi.n	800d160 <_strtol_l.constprop.0+0xb4>
 800d15c:	3c37      	subs	r4, #55	@ 0x37
 800d15e:	e7de      	b.n	800d11e <_strtol_l.constprop.0+0x72>
 800d160:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d164:	2f19      	cmp	r7, #25
 800d166:	d804      	bhi.n	800d172 <_strtol_l.constprop.0+0xc6>
 800d168:	3c57      	subs	r4, #87	@ 0x57
 800d16a:	e7d8      	b.n	800d11e <_strtol_l.constprop.0+0x72>
 800d16c:	f04f 32ff 	mov.w	r2, #4294967295
 800d170:	e7e1      	b.n	800d136 <_strtol_l.constprop.0+0x8a>
 800d172:	1c53      	adds	r3, r2, #1
 800d174:	d108      	bne.n	800d188 <_strtol_l.constprop.0+0xdc>
 800d176:	2322      	movs	r3, #34	@ 0x22
 800d178:	f8ce 3000 	str.w	r3, [lr]
 800d17c:	4660      	mov	r0, ip
 800d17e:	f1b8 0f00 	cmp.w	r8, #0
 800d182:	d0a0      	beq.n	800d0c6 <_strtol_l.constprop.0+0x1a>
 800d184:	1e69      	subs	r1, r5, #1
 800d186:	e006      	b.n	800d196 <_strtol_l.constprop.0+0xea>
 800d188:	b106      	cbz	r6, 800d18c <_strtol_l.constprop.0+0xe0>
 800d18a:	4240      	negs	r0, r0
 800d18c:	f1b8 0f00 	cmp.w	r8, #0
 800d190:	d099      	beq.n	800d0c6 <_strtol_l.constprop.0+0x1a>
 800d192:	2a00      	cmp	r2, #0
 800d194:	d1f6      	bne.n	800d184 <_strtol_l.constprop.0+0xd8>
 800d196:	f8c8 1000 	str.w	r1, [r8]
 800d19a:	e794      	b.n	800d0c6 <_strtol_l.constprop.0+0x1a>
 800d19c:	0800f531 	.word	0x0800f531

0800d1a0 <_strtol_r>:
 800d1a0:	f7ff bf84 	b.w	800d0ac <_strtol_l.constprop.0>

0800d1a4 <__ssputs_r>:
 800d1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	688e      	ldr	r6, [r1, #8]
 800d1aa:	461f      	mov	r7, r3
 800d1ac:	42be      	cmp	r6, r7
 800d1ae:	680b      	ldr	r3, [r1, #0]
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	4690      	mov	r8, r2
 800d1b6:	d82d      	bhi.n	800d214 <__ssputs_r+0x70>
 800d1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1c0:	d026      	beq.n	800d210 <__ssputs_r+0x6c>
 800d1c2:	6965      	ldr	r5, [r4, #20]
 800d1c4:	6909      	ldr	r1, [r1, #16]
 800d1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ca:	eba3 0901 	sub.w	r9, r3, r1
 800d1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1d2:	1c7b      	adds	r3, r7, #1
 800d1d4:	444b      	add	r3, r9
 800d1d6:	106d      	asrs	r5, r5, #1
 800d1d8:	429d      	cmp	r5, r3
 800d1da:	bf38      	it	cc
 800d1dc:	461d      	movcc	r5, r3
 800d1de:	0553      	lsls	r3, r2, #21
 800d1e0:	d527      	bpl.n	800d232 <__ssputs_r+0x8e>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7fe fc1c 	bl	800ba20 <_malloc_r>
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	b360      	cbz	r0, 800d246 <__ssputs_r+0xa2>
 800d1ec:	6921      	ldr	r1, [r4, #16]
 800d1ee:	464a      	mov	r2, r9
 800d1f0:	f000 fa18 	bl	800d624 <memcpy>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	6126      	str	r6, [r4, #16]
 800d202:	6165      	str	r5, [r4, #20]
 800d204:	444e      	add	r6, r9
 800d206:	eba5 0509 	sub.w	r5, r5, r9
 800d20a:	6026      	str	r6, [r4, #0]
 800d20c:	60a5      	str	r5, [r4, #8]
 800d20e:	463e      	mov	r6, r7
 800d210:	42be      	cmp	r6, r7
 800d212:	d900      	bls.n	800d216 <__ssputs_r+0x72>
 800d214:	463e      	mov	r6, r7
 800d216:	6820      	ldr	r0, [r4, #0]
 800d218:	4632      	mov	r2, r6
 800d21a:	4641      	mov	r1, r8
 800d21c:	f000 f9c6 	bl	800d5ac <memmove>
 800d220:	68a3      	ldr	r3, [r4, #8]
 800d222:	1b9b      	subs	r3, r3, r6
 800d224:	60a3      	str	r3, [r4, #8]
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	4433      	add	r3, r6
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	2000      	movs	r0, #0
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	462a      	mov	r2, r5
 800d234:	f000 fd89 	bl	800dd4a <_realloc_r>
 800d238:	4606      	mov	r6, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d1e0      	bne.n	800d200 <__ssputs_r+0x5c>
 800d23e:	6921      	ldr	r1, [r4, #16]
 800d240:	4650      	mov	r0, sl
 800d242:	f7fe fb79 	bl	800b938 <_free_r>
 800d246:	230c      	movs	r3, #12
 800d248:	f8ca 3000 	str.w	r3, [sl]
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	e7e9      	b.n	800d22e <__ssputs_r+0x8a>
	...

0800d25c <_svfiprintf_r>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4698      	mov	r8, r3
 800d262:	898b      	ldrh	r3, [r1, #12]
 800d264:	061b      	lsls	r3, r3, #24
 800d266:	b09d      	sub	sp, #116	@ 0x74
 800d268:	4607      	mov	r7, r0
 800d26a:	460d      	mov	r5, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	d510      	bpl.n	800d292 <_svfiprintf_r+0x36>
 800d270:	690b      	ldr	r3, [r1, #16]
 800d272:	b973      	cbnz	r3, 800d292 <_svfiprintf_r+0x36>
 800d274:	2140      	movs	r1, #64	@ 0x40
 800d276:	f7fe fbd3 	bl	800ba20 <_malloc_r>
 800d27a:	6028      	str	r0, [r5, #0]
 800d27c:	6128      	str	r0, [r5, #16]
 800d27e:	b930      	cbnz	r0, 800d28e <_svfiprintf_r+0x32>
 800d280:	230c      	movs	r3, #12
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	b01d      	add	sp, #116	@ 0x74
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	2340      	movs	r3, #64	@ 0x40
 800d290:	616b      	str	r3, [r5, #20]
 800d292:	2300      	movs	r3, #0
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	2320      	movs	r3, #32
 800d298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a0:	2330      	movs	r3, #48	@ 0x30
 800d2a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d440 <_svfiprintf_r+0x1e4>
 800d2a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2aa:	f04f 0901 	mov.w	r9, #1
 800d2ae:	4623      	mov	r3, r4
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b6:	b10a      	cbz	r2, 800d2bc <_svfiprintf_r+0x60>
 800d2b8:	2a25      	cmp	r2, #37	@ 0x25
 800d2ba:	d1f9      	bne.n	800d2b0 <_svfiprintf_r+0x54>
 800d2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c0:	d00b      	beq.n	800d2da <_svfiprintf_r+0x7e>
 800d2c2:	465b      	mov	r3, fp
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7ff ff6b 	bl	800d1a4 <__ssputs_r>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	f000 80a7 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d6:	445a      	add	r2, fp
 800d2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2da:	f89a 3000 	ldrb.w	r3, [sl]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 809f 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ee:	f10a 0a01 	add.w	sl, sl, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	9307      	str	r3, [sp, #28]
 800d2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2fc:	4654      	mov	r4, sl
 800d2fe:	2205      	movs	r2, #5
 800d300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d304:	484e      	ldr	r0, [pc, #312]	@ (800d440 <_svfiprintf_r+0x1e4>)
 800d306:	f7f2 ff6b 	bl	80001e0 <memchr>
 800d30a:	9a04      	ldr	r2, [sp, #16]
 800d30c:	b9d8      	cbnz	r0, 800d346 <_svfiprintf_r+0xea>
 800d30e:	06d0      	lsls	r0, r2, #27
 800d310:	bf44      	itt	mi
 800d312:	2320      	movmi	r3, #32
 800d314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d318:	0711      	lsls	r1, r2, #28
 800d31a:	bf44      	itt	mi
 800d31c:	232b      	movmi	r3, #43	@ 0x2b
 800d31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d322:	f89a 3000 	ldrb.w	r3, [sl]
 800d326:	2b2a      	cmp	r3, #42	@ 0x2a
 800d328:	d015      	beq.n	800d356 <_svfiprintf_r+0xfa>
 800d32a:	9a07      	ldr	r2, [sp, #28]
 800d32c:	4654      	mov	r4, sl
 800d32e:	2000      	movs	r0, #0
 800d330:	f04f 0c0a 	mov.w	ip, #10
 800d334:	4621      	mov	r1, r4
 800d336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d33a:	3b30      	subs	r3, #48	@ 0x30
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	d94b      	bls.n	800d3d8 <_svfiprintf_r+0x17c>
 800d340:	b1b0      	cbz	r0, 800d370 <_svfiprintf_r+0x114>
 800d342:	9207      	str	r2, [sp, #28]
 800d344:	e014      	b.n	800d370 <_svfiprintf_r+0x114>
 800d346:	eba0 0308 	sub.w	r3, r0, r8
 800d34a:	fa09 f303 	lsl.w	r3, r9, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	46a2      	mov	sl, r4
 800d354:	e7d2      	b.n	800d2fc <_svfiprintf_r+0xa0>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	1d19      	adds	r1, r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	9103      	str	r1, [sp, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbb      	ittet	lt
 800d362:	425b      	neglt	r3, r3
 800d364:	f042 0202 	orrlt.w	r2, r2, #2
 800d368:	9307      	strge	r3, [sp, #28]
 800d36a:	9307      	strlt	r3, [sp, #28]
 800d36c:	bfb8      	it	lt
 800d36e:	9204      	strlt	r2, [sp, #16]
 800d370:	7823      	ldrb	r3, [r4, #0]
 800d372:	2b2e      	cmp	r3, #46	@ 0x2e
 800d374:	d10a      	bne.n	800d38c <_svfiprintf_r+0x130>
 800d376:	7863      	ldrb	r3, [r4, #1]
 800d378:	2b2a      	cmp	r3, #42	@ 0x2a
 800d37a:	d132      	bne.n	800d3e2 <_svfiprintf_r+0x186>
 800d37c:	9b03      	ldr	r3, [sp, #12]
 800d37e:	1d1a      	adds	r2, r3, #4
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	9203      	str	r2, [sp, #12]
 800d384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d388:	3402      	adds	r4, #2
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d450 <_svfiprintf_r+0x1f4>
 800d390:	7821      	ldrb	r1, [r4, #0]
 800d392:	2203      	movs	r2, #3
 800d394:	4650      	mov	r0, sl
 800d396:	f7f2 ff23 	bl	80001e0 <memchr>
 800d39a:	b138      	cbz	r0, 800d3ac <_svfiprintf_r+0x150>
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	eba0 000a 	sub.w	r0, r0, sl
 800d3a2:	2240      	movs	r2, #64	@ 0x40
 800d3a4:	4082      	lsls	r2, r0
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b0:	4824      	ldr	r0, [pc, #144]	@ (800d444 <_svfiprintf_r+0x1e8>)
 800d3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3b6:	2206      	movs	r2, #6
 800d3b8:	f7f2 ff12 	bl	80001e0 <memchr>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d036      	beq.n	800d42e <_svfiprintf_r+0x1d2>
 800d3c0:	4b21      	ldr	r3, [pc, #132]	@ (800d448 <_svfiprintf_r+0x1ec>)
 800d3c2:	bb1b      	cbnz	r3, 800d40c <_svfiprintf_r+0x1b0>
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	3307      	adds	r3, #7
 800d3c8:	f023 0307 	bic.w	r3, r3, #7
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d2:	4433      	add	r3, r6
 800d3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d6:	e76a      	b.n	800d2ae <_svfiprintf_r+0x52>
 800d3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3dc:	460c      	mov	r4, r1
 800d3de:	2001      	movs	r0, #1
 800d3e0:	e7a8      	b.n	800d334 <_svfiprintf_r+0xd8>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	3401      	adds	r4, #1
 800d3e6:	9305      	str	r3, [sp, #20]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f04f 0c0a 	mov.w	ip, #10
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f4:	3a30      	subs	r2, #48	@ 0x30
 800d3f6:	2a09      	cmp	r2, #9
 800d3f8:	d903      	bls.n	800d402 <_svfiprintf_r+0x1a6>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0c6      	beq.n	800d38c <_svfiprintf_r+0x130>
 800d3fe:	9105      	str	r1, [sp, #20]
 800d400:	e7c4      	b.n	800d38c <_svfiprintf_r+0x130>
 800d402:	fb0c 2101 	mla	r1, ip, r1, r2
 800d406:	4604      	mov	r4, r0
 800d408:	2301      	movs	r3, #1
 800d40a:	e7f0      	b.n	800d3ee <_svfiprintf_r+0x192>
 800d40c:	ab03      	add	r3, sp, #12
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	462a      	mov	r2, r5
 800d412:	4b0e      	ldr	r3, [pc, #56]	@ (800d44c <_svfiprintf_r+0x1f0>)
 800d414:	a904      	add	r1, sp, #16
 800d416:	4638      	mov	r0, r7
 800d418:	f7fc fcca 	bl	8009db0 <_printf_float>
 800d41c:	1c42      	adds	r2, r0, #1
 800d41e:	4606      	mov	r6, r0
 800d420:	d1d6      	bne.n	800d3d0 <_svfiprintf_r+0x174>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	065b      	lsls	r3, r3, #25
 800d426:	f53f af2d 	bmi.w	800d284 <_svfiprintf_r+0x28>
 800d42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42c:	e72c      	b.n	800d288 <_svfiprintf_r+0x2c>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <_svfiprintf_r+0x1f0>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4638      	mov	r0, r7
 800d43a:	f7fc ff51 	bl	800a2e0 <_printf_i>
 800d43e:	e7ed      	b.n	800d41c <_svfiprintf_r+0x1c0>
 800d440:	0800f631 	.word	0x0800f631
 800d444:	0800f63b 	.word	0x0800f63b
 800d448:	08009db1 	.word	0x08009db1
 800d44c:	0800d1a5 	.word	0x0800d1a5
 800d450:	0800f637 	.word	0x0800f637

0800d454 <__sflush_r>:
 800d454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	0716      	lsls	r6, r2, #28
 800d45e:	4605      	mov	r5, r0
 800d460:	460c      	mov	r4, r1
 800d462:	d454      	bmi.n	800d50e <__sflush_r+0xba>
 800d464:	684b      	ldr	r3, [r1, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	dc02      	bgt.n	800d470 <__sflush_r+0x1c>
 800d46a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dd48      	ble.n	800d502 <__sflush_r+0xae>
 800d470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d472:	2e00      	cmp	r6, #0
 800d474:	d045      	beq.n	800d502 <__sflush_r+0xae>
 800d476:	2300      	movs	r3, #0
 800d478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d47c:	682f      	ldr	r7, [r5, #0]
 800d47e:	6a21      	ldr	r1, [r4, #32]
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	d030      	beq.n	800d4e6 <__sflush_r+0x92>
 800d484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d486:	89a3      	ldrh	r3, [r4, #12]
 800d488:	0759      	lsls	r1, r3, #29
 800d48a:	d505      	bpl.n	800d498 <__sflush_r+0x44>
 800d48c:	6863      	ldr	r3, [r4, #4]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d492:	b10b      	cbz	r3, 800d498 <__sflush_r+0x44>
 800d494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d496:	1ad2      	subs	r2, r2, r3
 800d498:	2300      	movs	r3, #0
 800d49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d49c:	6a21      	ldr	r1, [r4, #32]
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b0      	blx	r6
 800d4a2:	1c43      	adds	r3, r0, #1
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	d106      	bne.n	800d4b6 <__sflush_r+0x62>
 800d4a8:	6829      	ldr	r1, [r5, #0]
 800d4aa:	291d      	cmp	r1, #29
 800d4ac:	d82b      	bhi.n	800d506 <__sflush_r+0xb2>
 800d4ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d558 <__sflush_r+0x104>)
 800d4b0:	410a      	asrs	r2, r1
 800d4b2:	07d6      	lsls	r6, r2, #31
 800d4b4:	d427      	bmi.n	800d506 <__sflush_r+0xb2>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	6062      	str	r2, [r4, #4]
 800d4ba:	04d9      	lsls	r1, r3, #19
 800d4bc:	6922      	ldr	r2, [r4, #16]
 800d4be:	6022      	str	r2, [r4, #0]
 800d4c0:	d504      	bpl.n	800d4cc <__sflush_r+0x78>
 800d4c2:	1c42      	adds	r2, r0, #1
 800d4c4:	d101      	bne.n	800d4ca <__sflush_r+0x76>
 800d4c6:	682b      	ldr	r3, [r5, #0]
 800d4c8:	b903      	cbnz	r3, 800d4cc <__sflush_r+0x78>
 800d4ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4ce:	602f      	str	r7, [r5, #0]
 800d4d0:	b1b9      	cbz	r1, 800d502 <__sflush_r+0xae>
 800d4d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4d6:	4299      	cmp	r1, r3
 800d4d8:	d002      	beq.n	800d4e0 <__sflush_r+0x8c>
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f7fe fa2c 	bl	800b938 <_free_r>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4e4:	e00d      	b.n	800d502 <__sflush_r+0xae>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b0      	blx	r6
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	1c50      	adds	r0, r2, #1
 800d4f0:	d1c9      	bne.n	800d486 <__sflush_r+0x32>
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d0c6      	beq.n	800d486 <__sflush_r+0x32>
 800d4f8:	2b1d      	cmp	r3, #29
 800d4fa:	d001      	beq.n	800d500 <__sflush_r+0xac>
 800d4fc:	2b16      	cmp	r3, #22
 800d4fe:	d11e      	bne.n	800d53e <__sflush_r+0xea>
 800d500:	602f      	str	r7, [r5, #0]
 800d502:	2000      	movs	r0, #0
 800d504:	e022      	b.n	800d54c <__sflush_r+0xf8>
 800d506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d50a:	b21b      	sxth	r3, r3
 800d50c:	e01b      	b.n	800d546 <__sflush_r+0xf2>
 800d50e:	690f      	ldr	r7, [r1, #16]
 800d510:	2f00      	cmp	r7, #0
 800d512:	d0f6      	beq.n	800d502 <__sflush_r+0xae>
 800d514:	0793      	lsls	r3, r2, #30
 800d516:	680e      	ldr	r6, [r1, #0]
 800d518:	bf08      	it	eq
 800d51a:	694b      	ldreq	r3, [r1, #20]
 800d51c:	600f      	str	r7, [r1, #0]
 800d51e:	bf18      	it	ne
 800d520:	2300      	movne	r3, #0
 800d522:	eba6 0807 	sub.w	r8, r6, r7
 800d526:	608b      	str	r3, [r1, #8]
 800d528:	f1b8 0f00 	cmp.w	r8, #0
 800d52c:	dde9      	ble.n	800d502 <__sflush_r+0xae>
 800d52e:	6a21      	ldr	r1, [r4, #32]
 800d530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d532:	4643      	mov	r3, r8
 800d534:	463a      	mov	r2, r7
 800d536:	4628      	mov	r0, r5
 800d538:	47b0      	blx	r6
 800d53a:	2800      	cmp	r0, #0
 800d53c:	dc08      	bgt.n	800d550 <__sflush_r+0xfc>
 800d53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d546:	81a3      	strh	r3, [r4, #12]
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d550:	4407      	add	r7, r0
 800d552:	eba8 0800 	sub.w	r8, r8, r0
 800d556:	e7e7      	b.n	800d528 <__sflush_r+0xd4>
 800d558:	dfbffffe 	.word	0xdfbffffe

0800d55c <_fflush_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	690b      	ldr	r3, [r1, #16]
 800d560:	4605      	mov	r5, r0
 800d562:	460c      	mov	r4, r1
 800d564:	b913      	cbnz	r3, 800d56c <_fflush_r+0x10>
 800d566:	2500      	movs	r5, #0
 800d568:	4628      	mov	r0, r5
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	b118      	cbz	r0, 800d576 <_fflush_r+0x1a>
 800d56e:	6a03      	ldr	r3, [r0, #32]
 800d570:	b90b      	cbnz	r3, 800d576 <_fflush_r+0x1a>
 800d572:	f7fd fa75 	bl	800aa60 <__sinit>
 800d576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0f3      	beq.n	800d566 <_fflush_r+0xa>
 800d57e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d580:	07d0      	lsls	r0, r2, #31
 800d582:	d404      	bmi.n	800d58e <_fflush_r+0x32>
 800d584:	0599      	lsls	r1, r3, #22
 800d586:	d402      	bmi.n	800d58e <_fflush_r+0x32>
 800d588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d58a:	f7fd fb80 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800d58e:	4628      	mov	r0, r5
 800d590:	4621      	mov	r1, r4
 800d592:	f7ff ff5f 	bl	800d454 <__sflush_r>
 800d596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d598:	07da      	lsls	r2, r3, #31
 800d59a:	4605      	mov	r5, r0
 800d59c:	d4e4      	bmi.n	800d568 <_fflush_r+0xc>
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	059b      	lsls	r3, r3, #22
 800d5a2:	d4e1      	bmi.n	800d568 <_fflush_r+0xc>
 800d5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5a6:	f7fd fb73 	bl	800ac90 <__retarget_lock_release_recursive>
 800d5aa:	e7dd      	b.n	800d568 <_fflush_r+0xc>

0800d5ac <memmove>:
 800d5ac:	4288      	cmp	r0, r1
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	eb01 0402 	add.w	r4, r1, r2
 800d5b4:	d902      	bls.n	800d5bc <memmove+0x10>
 800d5b6:	4284      	cmp	r4, r0
 800d5b8:	4623      	mov	r3, r4
 800d5ba:	d807      	bhi.n	800d5cc <memmove+0x20>
 800d5bc:	1e43      	subs	r3, r0, #1
 800d5be:	42a1      	cmp	r1, r4
 800d5c0:	d008      	beq.n	800d5d4 <memmove+0x28>
 800d5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5ca:	e7f8      	b.n	800d5be <memmove+0x12>
 800d5cc:	4402      	add	r2, r0
 800d5ce:	4601      	mov	r1, r0
 800d5d0:	428a      	cmp	r2, r1
 800d5d2:	d100      	bne.n	800d5d6 <memmove+0x2a>
 800d5d4:	bd10      	pop	{r4, pc}
 800d5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5de:	e7f7      	b.n	800d5d0 <memmove+0x24>

0800d5e0 <strncmp>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	b16a      	cbz	r2, 800d600 <strncmp+0x20>
 800d5e4:	3901      	subs	r1, #1
 800d5e6:	1884      	adds	r4, r0, r2
 800d5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d103      	bne.n	800d5fc <strncmp+0x1c>
 800d5f4:	42a0      	cmp	r0, r4
 800d5f6:	d001      	beq.n	800d5fc <strncmp+0x1c>
 800d5f8:	2a00      	cmp	r2, #0
 800d5fa:	d1f5      	bne.n	800d5e8 <strncmp+0x8>
 800d5fc:	1ad0      	subs	r0, r2, r3
 800d5fe:	bd10      	pop	{r4, pc}
 800d600:	4610      	mov	r0, r2
 800d602:	e7fc      	b.n	800d5fe <strncmp+0x1e>

0800d604 <_sbrk_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4d06      	ldr	r5, [pc, #24]	@ (800d620 <_sbrk_r+0x1c>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	602b      	str	r3, [r5, #0]
 800d610:	f7f4 fad8 	bl	8001bc4 <_sbrk>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	d102      	bne.n	800d61e <_sbrk_r+0x1a>
 800d618:	682b      	ldr	r3, [r5, #0]
 800d61a:	b103      	cbz	r3, 800d61e <_sbrk_r+0x1a>
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	2000219c 	.word	0x2000219c

0800d624 <memcpy>:
 800d624:	440a      	add	r2, r1
 800d626:	4291      	cmp	r1, r2
 800d628:	f100 33ff 	add.w	r3, r0, #4294967295
 800d62c:	d100      	bne.n	800d630 <memcpy+0xc>
 800d62e:	4770      	bx	lr
 800d630:	b510      	push	{r4, lr}
 800d632:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d63a:	4291      	cmp	r1, r2
 800d63c:	d1f9      	bne.n	800d632 <memcpy+0xe>
 800d63e:	bd10      	pop	{r4, pc}

0800d640 <nan>:
 800d640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d648 <nan+0x8>
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	00000000 	.word	0x00000000
 800d64c:	7ff80000 	.word	0x7ff80000

0800d650 <__assert_func>:
 800d650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d652:	4614      	mov	r4, r2
 800d654:	461a      	mov	r2, r3
 800d656:	4b09      	ldr	r3, [pc, #36]	@ (800d67c <__assert_func+0x2c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4605      	mov	r5, r0
 800d65c:	68d8      	ldr	r0, [r3, #12]
 800d65e:	b954      	cbnz	r4, 800d676 <__assert_func+0x26>
 800d660:	4b07      	ldr	r3, [pc, #28]	@ (800d680 <__assert_func+0x30>)
 800d662:	461c      	mov	r4, r3
 800d664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d668:	9100      	str	r1, [sp, #0]
 800d66a:	462b      	mov	r3, r5
 800d66c:	4905      	ldr	r1, [pc, #20]	@ (800d684 <__assert_func+0x34>)
 800d66e:	f000 fba7 	bl	800ddc0 <fiprintf>
 800d672:	f000 fbb7 	bl	800dde4 <abort>
 800d676:	4b04      	ldr	r3, [pc, #16]	@ (800d688 <__assert_func+0x38>)
 800d678:	e7f4      	b.n	800d664 <__assert_func+0x14>
 800d67a:	bf00      	nop
 800d67c:	20000108 	.word	0x20000108
 800d680:	0800f685 	.word	0x0800f685
 800d684:	0800f657 	.word	0x0800f657
 800d688:	0800f64a 	.word	0x0800f64a

0800d68c <_calloc_r>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	fba1 5402 	umull	r5, r4, r1, r2
 800d692:	b93c      	cbnz	r4, 800d6a4 <_calloc_r+0x18>
 800d694:	4629      	mov	r1, r5
 800d696:	f7fe f9c3 	bl	800ba20 <_malloc_r>
 800d69a:	4606      	mov	r6, r0
 800d69c:	b928      	cbnz	r0, 800d6aa <_calloc_r+0x1e>
 800d69e:	2600      	movs	r6, #0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	220c      	movs	r2, #12
 800d6a6:	6002      	str	r2, [r0, #0]
 800d6a8:	e7f9      	b.n	800d69e <_calloc_r+0x12>
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f7fd fa70 	bl	800ab92 <memset>
 800d6b2:	e7f5      	b.n	800d6a0 <_calloc_r+0x14>

0800d6b4 <rshift>:
 800d6b4:	6903      	ldr	r3, [r0, #16]
 800d6b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6c2:	f100 0414 	add.w	r4, r0, #20
 800d6c6:	dd45      	ble.n	800d754 <rshift+0xa0>
 800d6c8:	f011 011f 	ands.w	r1, r1, #31
 800d6cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6d4:	d10c      	bne.n	800d6f0 <rshift+0x3c>
 800d6d6:	f100 0710 	add.w	r7, r0, #16
 800d6da:	4629      	mov	r1, r5
 800d6dc:	42b1      	cmp	r1, r6
 800d6de:	d334      	bcc.n	800d74a <rshift+0x96>
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	1eea      	subs	r2, r5, #3
 800d6e6:	4296      	cmp	r6, r2
 800d6e8:	bf38      	it	cc
 800d6ea:	2300      	movcc	r3, #0
 800d6ec:	4423      	add	r3, r4
 800d6ee:	e015      	b.n	800d71c <rshift+0x68>
 800d6f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6f4:	f1c1 0820 	rsb	r8, r1, #32
 800d6f8:	40cf      	lsrs	r7, r1
 800d6fa:	f105 0e04 	add.w	lr, r5, #4
 800d6fe:	46a1      	mov	r9, r4
 800d700:	4576      	cmp	r6, lr
 800d702:	46f4      	mov	ip, lr
 800d704:	d815      	bhi.n	800d732 <rshift+0x7e>
 800d706:	1a9a      	subs	r2, r3, r2
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	3a04      	subs	r2, #4
 800d70c:	3501      	adds	r5, #1
 800d70e:	42ae      	cmp	r6, r5
 800d710:	bf38      	it	cc
 800d712:	2200      	movcc	r2, #0
 800d714:	18a3      	adds	r3, r4, r2
 800d716:	50a7      	str	r7, [r4, r2]
 800d718:	b107      	cbz	r7, 800d71c <rshift+0x68>
 800d71a:	3304      	adds	r3, #4
 800d71c:	1b1a      	subs	r2, r3, r4
 800d71e:	42a3      	cmp	r3, r4
 800d720:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d724:	bf08      	it	eq
 800d726:	2300      	moveq	r3, #0
 800d728:	6102      	str	r2, [r0, #16]
 800d72a:	bf08      	it	eq
 800d72c:	6143      	streq	r3, [r0, #20]
 800d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d732:	f8dc c000 	ldr.w	ip, [ip]
 800d736:	fa0c fc08 	lsl.w	ip, ip, r8
 800d73a:	ea4c 0707 	orr.w	r7, ip, r7
 800d73e:	f849 7b04 	str.w	r7, [r9], #4
 800d742:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d746:	40cf      	lsrs	r7, r1
 800d748:	e7da      	b.n	800d700 <rshift+0x4c>
 800d74a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d74e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d752:	e7c3      	b.n	800d6dc <rshift+0x28>
 800d754:	4623      	mov	r3, r4
 800d756:	e7e1      	b.n	800d71c <rshift+0x68>

0800d758 <__hexdig_fun>:
 800d758:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d75c:	2b09      	cmp	r3, #9
 800d75e:	d802      	bhi.n	800d766 <__hexdig_fun+0xe>
 800d760:	3820      	subs	r0, #32
 800d762:	b2c0      	uxtb	r0, r0
 800d764:	4770      	bx	lr
 800d766:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d801      	bhi.n	800d772 <__hexdig_fun+0x1a>
 800d76e:	3847      	subs	r0, #71	@ 0x47
 800d770:	e7f7      	b.n	800d762 <__hexdig_fun+0xa>
 800d772:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d776:	2b05      	cmp	r3, #5
 800d778:	d801      	bhi.n	800d77e <__hexdig_fun+0x26>
 800d77a:	3827      	subs	r0, #39	@ 0x27
 800d77c:	e7f1      	b.n	800d762 <__hexdig_fun+0xa>
 800d77e:	2000      	movs	r0, #0
 800d780:	4770      	bx	lr
	...

0800d784 <__gethex>:
 800d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	b085      	sub	sp, #20
 800d78a:	468a      	mov	sl, r1
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	680b      	ldr	r3, [r1, #0]
 800d790:	9001      	str	r0, [sp, #4]
 800d792:	4690      	mov	r8, r2
 800d794:	1c9c      	adds	r4, r3, #2
 800d796:	46a1      	mov	r9, r4
 800d798:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d79c:	2830      	cmp	r0, #48	@ 0x30
 800d79e:	d0fa      	beq.n	800d796 <__gethex+0x12>
 800d7a0:	eba9 0303 	sub.w	r3, r9, r3
 800d7a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d7a8:	f7ff ffd6 	bl	800d758 <__hexdig_fun>
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d168      	bne.n	800d884 <__gethex+0x100>
 800d7b2:	49a0      	ldr	r1, [pc, #640]	@ (800da34 <__gethex+0x2b0>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f7ff ff12 	bl	800d5e0 <strncmp>
 800d7bc:	4607      	mov	r7, r0
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d167      	bne.n	800d892 <__gethex+0x10e>
 800d7c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7c6:	4626      	mov	r6, r4
 800d7c8:	f7ff ffc6 	bl	800d758 <__hexdig_fun>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d062      	beq.n	800d896 <__gethex+0x112>
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	7818      	ldrb	r0, [r3, #0]
 800d7d4:	2830      	cmp	r0, #48	@ 0x30
 800d7d6:	4699      	mov	r9, r3
 800d7d8:	f103 0301 	add.w	r3, r3, #1
 800d7dc:	d0f9      	beq.n	800d7d2 <__gethex+0x4e>
 800d7de:	f7ff ffbb 	bl	800d758 <__hexdig_fun>
 800d7e2:	fab0 f580 	clz	r5, r0
 800d7e6:	096d      	lsrs	r5, r5, #5
 800d7e8:	f04f 0b01 	mov.w	fp, #1
 800d7ec:	464a      	mov	r2, r9
 800d7ee:	4616      	mov	r6, r2
 800d7f0:	3201      	adds	r2, #1
 800d7f2:	7830      	ldrb	r0, [r6, #0]
 800d7f4:	f7ff ffb0 	bl	800d758 <__hexdig_fun>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d1f8      	bne.n	800d7ee <__gethex+0x6a>
 800d7fc:	498d      	ldr	r1, [pc, #564]	@ (800da34 <__gethex+0x2b0>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	4630      	mov	r0, r6
 800d802:	f7ff feed 	bl	800d5e0 <strncmp>
 800d806:	2800      	cmp	r0, #0
 800d808:	d13f      	bne.n	800d88a <__gethex+0x106>
 800d80a:	b944      	cbnz	r4, 800d81e <__gethex+0x9a>
 800d80c:	1c74      	adds	r4, r6, #1
 800d80e:	4622      	mov	r2, r4
 800d810:	4616      	mov	r6, r2
 800d812:	3201      	adds	r2, #1
 800d814:	7830      	ldrb	r0, [r6, #0]
 800d816:	f7ff ff9f 	bl	800d758 <__hexdig_fun>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d1f8      	bne.n	800d810 <__gethex+0x8c>
 800d81e:	1ba4      	subs	r4, r4, r6
 800d820:	00a7      	lsls	r7, r4, #2
 800d822:	7833      	ldrb	r3, [r6, #0]
 800d824:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d828:	2b50      	cmp	r3, #80	@ 0x50
 800d82a:	d13e      	bne.n	800d8aa <__gethex+0x126>
 800d82c:	7873      	ldrb	r3, [r6, #1]
 800d82e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d830:	d033      	beq.n	800d89a <__gethex+0x116>
 800d832:	2b2d      	cmp	r3, #45	@ 0x2d
 800d834:	d034      	beq.n	800d8a0 <__gethex+0x11c>
 800d836:	1c71      	adds	r1, r6, #1
 800d838:	2400      	movs	r4, #0
 800d83a:	7808      	ldrb	r0, [r1, #0]
 800d83c:	f7ff ff8c 	bl	800d758 <__hexdig_fun>
 800d840:	1e43      	subs	r3, r0, #1
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b18      	cmp	r3, #24
 800d846:	d830      	bhi.n	800d8aa <__gethex+0x126>
 800d848:	f1a0 0210 	sub.w	r2, r0, #16
 800d84c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d850:	f7ff ff82 	bl	800d758 <__hexdig_fun>
 800d854:	f100 3cff 	add.w	ip, r0, #4294967295
 800d858:	fa5f fc8c 	uxtb.w	ip, ip
 800d85c:	f1bc 0f18 	cmp.w	ip, #24
 800d860:	f04f 030a 	mov.w	r3, #10
 800d864:	d91e      	bls.n	800d8a4 <__gethex+0x120>
 800d866:	b104      	cbz	r4, 800d86a <__gethex+0xe6>
 800d868:	4252      	negs	r2, r2
 800d86a:	4417      	add	r7, r2
 800d86c:	f8ca 1000 	str.w	r1, [sl]
 800d870:	b1ed      	cbz	r5, 800d8ae <__gethex+0x12a>
 800d872:	f1bb 0f00 	cmp.w	fp, #0
 800d876:	bf0c      	ite	eq
 800d878:	2506      	moveq	r5, #6
 800d87a:	2500      	movne	r5, #0
 800d87c:	4628      	mov	r0, r5
 800d87e:	b005      	add	sp, #20
 800d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d884:	2500      	movs	r5, #0
 800d886:	462c      	mov	r4, r5
 800d888:	e7b0      	b.n	800d7ec <__gethex+0x68>
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	d1c7      	bne.n	800d81e <__gethex+0x9a>
 800d88e:	4627      	mov	r7, r4
 800d890:	e7c7      	b.n	800d822 <__gethex+0x9e>
 800d892:	464e      	mov	r6, r9
 800d894:	462f      	mov	r7, r5
 800d896:	2501      	movs	r5, #1
 800d898:	e7c3      	b.n	800d822 <__gethex+0x9e>
 800d89a:	2400      	movs	r4, #0
 800d89c:	1cb1      	adds	r1, r6, #2
 800d89e:	e7cc      	b.n	800d83a <__gethex+0xb6>
 800d8a0:	2401      	movs	r4, #1
 800d8a2:	e7fb      	b.n	800d89c <__gethex+0x118>
 800d8a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d8a8:	e7ce      	b.n	800d848 <__gethex+0xc4>
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	e7de      	b.n	800d86c <__gethex+0xe8>
 800d8ae:	eba6 0309 	sub.w	r3, r6, r9
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	2b07      	cmp	r3, #7
 800d8b8:	dc0a      	bgt.n	800d8d0 <__gethex+0x14c>
 800d8ba:	9801      	ldr	r0, [sp, #4]
 800d8bc:	f7fe f93c 	bl	800bb38 <_Balloc>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	b940      	cbnz	r0, 800d8d6 <__gethex+0x152>
 800d8c4:	4b5c      	ldr	r3, [pc, #368]	@ (800da38 <__gethex+0x2b4>)
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	21e4      	movs	r1, #228	@ 0xe4
 800d8ca:	485c      	ldr	r0, [pc, #368]	@ (800da3c <__gethex+0x2b8>)
 800d8cc:	f7ff fec0 	bl	800d650 <__assert_func>
 800d8d0:	3101      	adds	r1, #1
 800d8d2:	105b      	asrs	r3, r3, #1
 800d8d4:	e7ef      	b.n	800d8b6 <__gethex+0x132>
 800d8d6:	f100 0a14 	add.w	sl, r0, #20
 800d8da:	2300      	movs	r3, #0
 800d8dc:	4655      	mov	r5, sl
 800d8de:	469b      	mov	fp, r3
 800d8e0:	45b1      	cmp	r9, r6
 800d8e2:	d337      	bcc.n	800d954 <__gethex+0x1d0>
 800d8e4:	f845 bb04 	str.w	fp, [r5], #4
 800d8e8:	eba5 050a 	sub.w	r5, r5, sl
 800d8ec:	10ad      	asrs	r5, r5, #2
 800d8ee:	6125      	str	r5, [r4, #16]
 800d8f0:	4658      	mov	r0, fp
 800d8f2:	f7fe fa13 	bl	800bd1c <__hi0bits>
 800d8f6:	016d      	lsls	r5, r5, #5
 800d8f8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8fc:	1a2d      	subs	r5, r5, r0
 800d8fe:	42b5      	cmp	r5, r6
 800d900:	dd54      	ble.n	800d9ac <__gethex+0x228>
 800d902:	1bad      	subs	r5, r5, r6
 800d904:	4629      	mov	r1, r5
 800d906:	4620      	mov	r0, r4
 800d908:	f7fe fda7 	bl	800c45a <__any_on>
 800d90c:	4681      	mov	r9, r0
 800d90e:	b178      	cbz	r0, 800d930 <__gethex+0x1ac>
 800d910:	1e6b      	subs	r3, r5, #1
 800d912:	1159      	asrs	r1, r3, #5
 800d914:	f003 021f 	and.w	r2, r3, #31
 800d918:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d91c:	f04f 0901 	mov.w	r9, #1
 800d920:	fa09 f202 	lsl.w	r2, r9, r2
 800d924:	420a      	tst	r2, r1
 800d926:	d003      	beq.n	800d930 <__gethex+0x1ac>
 800d928:	454b      	cmp	r3, r9
 800d92a:	dc36      	bgt.n	800d99a <__gethex+0x216>
 800d92c:	f04f 0902 	mov.w	r9, #2
 800d930:	4629      	mov	r1, r5
 800d932:	4620      	mov	r0, r4
 800d934:	f7ff febe 	bl	800d6b4 <rshift>
 800d938:	442f      	add	r7, r5
 800d93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d93e:	42bb      	cmp	r3, r7
 800d940:	da42      	bge.n	800d9c8 <__gethex+0x244>
 800d942:	9801      	ldr	r0, [sp, #4]
 800d944:	4621      	mov	r1, r4
 800d946:	f7fe f937 	bl	800bbb8 <_Bfree>
 800d94a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d94c:	2300      	movs	r3, #0
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	25a3      	movs	r5, #163	@ 0xa3
 800d952:	e793      	b.n	800d87c <__gethex+0xf8>
 800d954:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d958:	2a2e      	cmp	r2, #46	@ 0x2e
 800d95a:	d012      	beq.n	800d982 <__gethex+0x1fe>
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d104      	bne.n	800d96a <__gethex+0x1e6>
 800d960:	f845 bb04 	str.w	fp, [r5], #4
 800d964:	f04f 0b00 	mov.w	fp, #0
 800d968:	465b      	mov	r3, fp
 800d96a:	7830      	ldrb	r0, [r6, #0]
 800d96c:	9303      	str	r3, [sp, #12]
 800d96e:	f7ff fef3 	bl	800d758 <__hexdig_fun>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	f000 000f 	and.w	r0, r0, #15
 800d978:	4098      	lsls	r0, r3
 800d97a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d97e:	3304      	adds	r3, #4
 800d980:	e7ae      	b.n	800d8e0 <__gethex+0x15c>
 800d982:	45b1      	cmp	r9, r6
 800d984:	d8ea      	bhi.n	800d95c <__gethex+0x1d8>
 800d986:	492b      	ldr	r1, [pc, #172]	@ (800da34 <__gethex+0x2b0>)
 800d988:	9303      	str	r3, [sp, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	4630      	mov	r0, r6
 800d98e:	f7ff fe27 	bl	800d5e0 <strncmp>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	2800      	cmp	r0, #0
 800d996:	d1e1      	bne.n	800d95c <__gethex+0x1d8>
 800d998:	e7a2      	b.n	800d8e0 <__gethex+0x15c>
 800d99a:	1ea9      	subs	r1, r5, #2
 800d99c:	4620      	mov	r0, r4
 800d99e:	f7fe fd5c 	bl	800c45a <__any_on>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0c2      	beq.n	800d92c <__gethex+0x1a8>
 800d9a6:	f04f 0903 	mov.w	r9, #3
 800d9aa:	e7c1      	b.n	800d930 <__gethex+0x1ac>
 800d9ac:	da09      	bge.n	800d9c2 <__gethex+0x23e>
 800d9ae:	1b75      	subs	r5, r6, r5
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	9801      	ldr	r0, [sp, #4]
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	f7fe fb17 	bl	800bfe8 <__lshift>
 800d9ba:	1b7f      	subs	r7, r7, r5
 800d9bc:	4604      	mov	r4, r0
 800d9be:	f100 0a14 	add.w	sl, r0, #20
 800d9c2:	f04f 0900 	mov.w	r9, #0
 800d9c6:	e7b8      	b.n	800d93a <__gethex+0x1b6>
 800d9c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9cc:	42bd      	cmp	r5, r7
 800d9ce:	dd6f      	ble.n	800dab0 <__gethex+0x32c>
 800d9d0:	1bed      	subs	r5, r5, r7
 800d9d2:	42ae      	cmp	r6, r5
 800d9d4:	dc34      	bgt.n	800da40 <__gethex+0x2bc>
 800d9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d022      	beq.n	800da24 <__gethex+0x2a0>
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d024      	beq.n	800da2c <__gethex+0x2a8>
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d115      	bne.n	800da12 <__gethex+0x28e>
 800d9e6:	42ae      	cmp	r6, r5
 800d9e8:	d113      	bne.n	800da12 <__gethex+0x28e>
 800d9ea:	2e01      	cmp	r6, #1
 800d9ec:	d10b      	bne.n	800da06 <__gethex+0x282>
 800d9ee:	9a02      	ldr	r2, [sp, #8]
 800d9f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	6123      	str	r3, [r4, #16]
 800d9fa:	f8ca 3000 	str.w	r3, [sl]
 800d9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da00:	2562      	movs	r5, #98	@ 0x62
 800da02:	601c      	str	r4, [r3, #0]
 800da04:	e73a      	b.n	800d87c <__gethex+0xf8>
 800da06:	1e71      	subs	r1, r6, #1
 800da08:	4620      	mov	r0, r4
 800da0a:	f7fe fd26 	bl	800c45a <__any_on>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d1ed      	bne.n	800d9ee <__gethex+0x26a>
 800da12:	9801      	ldr	r0, [sp, #4]
 800da14:	4621      	mov	r1, r4
 800da16:	f7fe f8cf 	bl	800bbb8 <_Bfree>
 800da1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da1c:	2300      	movs	r3, #0
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	2550      	movs	r5, #80	@ 0x50
 800da22:	e72b      	b.n	800d87c <__gethex+0xf8>
 800da24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1f3      	bne.n	800da12 <__gethex+0x28e>
 800da2a:	e7e0      	b.n	800d9ee <__gethex+0x26a>
 800da2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1dd      	bne.n	800d9ee <__gethex+0x26a>
 800da32:	e7ee      	b.n	800da12 <__gethex+0x28e>
 800da34:	0800f4d8 	.word	0x0800f4d8
 800da38:	0800f36d 	.word	0x0800f36d
 800da3c:	0800f686 	.word	0x0800f686
 800da40:	1e6f      	subs	r7, r5, #1
 800da42:	f1b9 0f00 	cmp.w	r9, #0
 800da46:	d130      	bne.n	800daaa <__gethex+0x326>
 800da48:	b127      	cbz	r7, 800da54 <__gethex+0x2d0>
 800da4a:	4639      	mov	r1, r7
 800da4c:	4620      	mov	r0, r4
 800da4e:	f7fe fd04 	bl	800c45a <__any_on>
 800da52:	4681      	mov	r9, r0
 800da54:	117a      	asrs	r2, r7, #5
 800da56:	2301      	movs	r3, #1
 800da58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da5c:	f007 071f 	and.w	r7, r7, #31
 800da60:	40bb      	lsls	r3, r7
 800da62:	4213      	tst	r3, r2
 800da64:	4629      	mov	r1, r5
 800da66:	4620      	mov	r0, r4
 800da68:	bf18      	it	ne
 800da6a:	f049 0902 	orrne.w	r9, r9, #2
 800da6e:	f7ff fe21 	bl	800d6b4 <rshift>
 800da72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da76:	1b76      	subs	r6, r6, r5
 800da78:	2502      	movs	r5, #2
 800da7a:	f1b9 0f00 	cmp.w	r9, #0
 800da7e:	d047      	beq.n	800db10 <__gethex+0x38c>
 800da80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da84:	2b02      	cmp	r3, #2
 800da86:	d015      	beq.n	800dab4 <__gethex+0x330>
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d017      	beq.n	800dabc <__gethex+0x338>
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d109      	bne.n	800daa4 <__gethex+0x320>
 800da90:	f019 0f02 	tst.w	r9, #2
 800da94:	d006      	beq.n	800daa4 <__gethex+0x320>
 800da96:	f8da 3000 	ldr.w	r3, [sl]
 800da9a:	ea49 0903 	orr.w	r9, r9, r3
 800da9e:	f019 0f01 	tst.w	r9, #1
 800daa2:	d10e      	bne.n	800dac2 <__gethex+0x33e>
 800daa4:	f045 0510 	orr.w	r5, r5, #16
 800daa8:	e032      	b.n	800db10 <__gethex+0x38c>
 800daaa:	f04f 0901 	mov.w	r9, #1
 800daae:	e7d1      	b.n	800da54 <__gethex+0x2d0>
 800dab0:	2501      	movs	r5, #1
 800dab2:	e7e2      	b.n	800da7a <__gethex+0x2f6>
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	f1c3 0301 	rsb	r3, r3, #1
 800daba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0f0      	beq.n	800daa4 <__gethex+0x320>
 800dac2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dac6:	f104 0314 	add.w	r3, r4, #20
 800daca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dace:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dad2:	f04f 0c00 	mov.w	ip, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dadc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dae0:	d01b      	beq.n	800db1a <__gethex+0x396>
 800dae2:	3201      	adds	r2, #1
 800dae4:	6002      	str	r2, [r0, #0]
 800dae6:	2d02      	cmp	r5, #2
 800dae8:	f104 0314 	add.w	r3, r4, #20
 800daec:	d13c      	bne.n	800db68 <__gethex+0x3e4>
 800daee:	f8d8 2000 	ldr.w	r2, [r8]
 800daf2:	3a01      	subs	r2, #1
 800daf4:	42b2      	cmp	r2, r6
 800daf6:	d109      	bne.n	800db0c <__gethex+0x388>
 800daf8:	1171      	asrs	r1, r6, #5
 800dafa:	2201      	movs	r2, #1
 800dafc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db00:	f006 061f 	and.w	r6, r6, #31
 800db04:	fa02 f606 	lsl.w	r6, r2, r6
 800db08:	421e      	tst	r6, r3
 800db0a:	d13a      	bne.n	800db82 <__gethex+0x3fe>
 800db0c:	f045 0520 	orr.w	r5, r5, #32
 800db10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db12:	601c      	str	r4, [r3, #0]
 800db14:	9b02      	ldr	r3, [sp, #8]
 800db16:	601f      	str	r7, [r3, #0]
 800db18:	e6b0      	b.n	800d87c <__gethex+0xf8>
 800db1a:	4299      	cmp	r1, r3
 800db1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db20:	d8d9      	bhi.n	800dad6 <__gethex+0x352>
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	459b      	cmp	fp, r3
 800db26:	db17      	blt.n	800db58 <__gethex+0x3d4>
 800db28:	6861      	ldr	r1, [r4, #4]
 800db2a:	9801      	ldr	r0, [sp, #4]
 800db2c:	3101      	adds	r1, #1
 800db2e:	f7fe f803 	bl	800bb38 <_Balloc>
 800db32:	4681      	mov	r9, r0
 800db34:	b918      	cbnz	r0, 800db3e <__gethex+0x3ba>
 800db36:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <__gethex+0x41c>)
 800db38:	4602      	mov	r2, r0
 800db3a:	2184      	movs	r1, #132	@ 0x84
 800db3c:	e6c5      	b.n	800d8ca <__gethex+0x146>
 800db3e:	6922      	ldr	r2, [r4, #16]
 800db40:	3202      	adds	r2, #2
 800db42:	f104 010c 	add.w	r1, r4, #12
 800db46:	0092      	lsls	r2, r2, #2
 800db48:	300c      	adds	r0, #12
 800db4a:	f7ff fd6b 	bl	800d624 <memcpy>
 800db4e:	4621      	mov	r1, r4
 800db50:	9801      	ldr	r0, [sp, #4]
 800db52:	f7fe f831 	bl	800bbb8 <_Bfree>
 800db56:	464c      	mov	r4, r9
 800db58:	6923      	ldr	r3, [r4, #16]
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db60:	6122      	str	r2, [r4, #16]
 800db62:	2201      	movs	r2, #1
 800db64:	615a      	str	r2, [r3, #20]
 800db66:	e7be      	b.n	800dae6 <__gethex+0x362>
 800db68:	6922      	ldr	r2, [r4, #16]
 800db6a:	455a      	cmp	r2, fp
 800db6c:	dd0b      	ble.n	800db86 <__gethex+0x402>
 800db6e:	2101      	movs	r1, #1
 800db70:	4620      	mov	r0, r4
 800db72:	f7ff fd9f 	bl	800d6b4 <rshift>
 800db76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db7a:	3701      	adds	r7, #1
 800db7c:	42bb      	cmp	r3, r7
 800db7e:	f6ff aee0 	blt.w	800d942 <__gethex+0x1be>
 800db82:	2501      	movs	r5, #1
 800db84:	e7c2      	b.n	800db0c <__gethex+0x388>
 800db86:	f016 061f 	ands.w	r6, r6, #31
 800db8a:	d0fa      	beq.n	800db82 <__gethex+0x3fe>
 800db8c:	4453      	add	r3, sl
 800db8e:	f1c6 0620 	rsb	r6, r6, #32
 800db92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db96:	f7fe f8c1 	bl	800bd1c <__hi0bits>
 800db9a:	42b0      	cmp	r0, r6
 800db9c:	dbe7      	blt.n	800db6e <__gethex+0x3ea>
 800db9e:	e7f0      	b.n	800db82 <__gethex+0x3fe>
 800dba0:	0800f36d 	.word	0x0800f36d

0800dba4 <L_shift>:
 800dba4:	f1c2 0208 	rsb	r2, r2, #8
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	f1c2 0620 	rsb	r6, r2, #32
 800dbb0:	6843      	ldr	r3, [r0, #4]
 800dbb2:	6804      	ldr	r4, [r0, #0]
 800dbb4:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb8:	432c      	orrs	r4, r5
 800dbba:	40d3      	lsrs	r3, r2
 800dbbc:	6004      	str	r4, [r0, #0]
 800dbbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbc2:	4288      	cmp	r0, r1
 800dbc4:	d3f4      	bcc.n	800dbb0 <L_shift+0xc>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}

0800dbc8 <__match>:
 800dbc8:	b530      	push	{r4, r5, lr}
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd2:	b914      	cbnz	r4, 800dbda <__match+0x12>
 800dbd4:	6003      	str	r3, [r0, #0]
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	bd30      	pop	{r4, r5, pc}
 800dbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbe2:	2d19      	cmp	r5, #25
 800dbe4:	bf98      	it	ls
 800dbe6:	3220      	addls	r2, #32
 800dbe8:	42a2      	cmp	r2, r4
 800dbea:	d0f0      	beq.n	800dbce <__match+0x6>
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7f3      	b.n	800dbd8 <__match+0x10>

0800dbf0 <__hexnan>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	680b      	ldr	r3, [r1, #0]
 800dbf6:	6801      	ldr	r1, [r0, #0]
 800dbf8:	115e      	asrs	r6, r3, #5
 800dbfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbfe:	f013 031f 	ands.w	r3, r3, #31
 800dc02:	b087      	sub	sp, #28
 800dc04:	bf18      	it	ne
 800dc06:	3604      	addne	r6, #4
 800dc08:	2500      	movs	r5, #0
 800dc0a:	1f37      	subs	r7, r6, #4
 800dc0c:	4682      	mov	sl, r0
 800dc0e:	4690      	mov	r8, r2
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc16:	46b9      	mov	r9, r7
 800dc18:	463c      	mov	r4, r7
 800dc1a:	9502      	str	r5, [sp, #8]
 800dc1c:	46ab      	mov	fp, r5
 800dc1e:	784a      	ldrb	r2, [r1, #1]
 800dc20:	1c4b      	adds	r3, r1, #1
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	b342      	cbz	r2, 800dc78 <__hexnan+0x88>
 800dc26:	4610      	mov	r0, r2
 800dc28:	9105      	str	r1, [sp, #20]
 800dc2a:	9204      	str	r2, [sp, #16]
 800dc2c:	f7ff fd94 	bl	800d758 <__hexdig_fun>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d151      	bne.n	800dcd8 <__hexnan+0xe8>
 800dc34:	9a04      	ldr	r2, [sp, #16]
 800dc36:	9905      	ldr	r1, [sp, #20]
 800dc38:	2a20      	cmp	r2, #32
 800dc3a:	d818      	bhi.n	800dc6e <__hexnan+0x7e>
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	459b      	cmp	fp, r3
 800dc40:	dd13      	ble.n	800dc6a <__hexnan+0x7a>
 800dc42:	454c      	cmp	r4, r9
 800dc44:	d206      	bcs.n	800dc54 <__hexnan+0x64>
 800dc46:	2d07      	cmp	r5, #7
 800dc48:	dc04      	bgt.n	800dc54 <__hexnan+0x64>
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7ff ffa8 	bl	800dba4 <L_shift>
 800dc54:	4544      	cmp	r4, r8
 800dc56:	d952      	bls.n	800dcfe <__hexnan+0x10e>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc62:	f8cd b008 	str.w	fp, [sp, #8]
 800dc66:	464c      	mov	r4, r9
 800dc68:	461d      	mov	r5, r3
 800dc6a:	9903      	ldr	r1, [sp, #12]
 800dc6c:	e7d7      	b.n	800dc1e <__hexnan+0x2e>
 800dc6e:	2a29      	cmp	r2, #41	@ 0x29
 800dc70:	d157      	bne.n	800dd22 <__hexnan+0x132>
 800dc72:	3102      	adds	r1, #2
 800dc74:	f8ca 1000 	str.w	r1, [sl]
 800dc78:	f1bb 0f00 	cmp.w	fp, #0
 800dc7c:	d051      	beq.n	800dd22 <__hexnan+0x132>
 800dc7e:	454c      	cmp	r4, r9
 800dc80:	d206      	bcs.n	800dc90 <__hexnan+0xa0>
 800dc82:	2d07      	cmp	r5, #7
 800dc84:	dc04      	bgt.n	800dc90 <__hexnan+0xa0>
 800dc86:	462a      	mov	r2, r5
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7ff ff8a 	bl	800dba4 <L_shift>
 800dc90:	4544      	cmp	r4, r8
 800dc92:	d936      	bls.n	800dd02 <__hexnan+0x112>
 800dc94:	f1a8 0204 	sub.w	r2, r8, #4
 800dc98:	4623      	mov	r3, r4
 800dc9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dca2:	429f      	cmp	r7, r3
 800dca4:	d2f9      	bcs.n	800dc9a <__hexnan+0xaa>
 800dca6:	1b3b      	subs	r3, r7, r4
 800dca8:	f023 0303 	bic.w	r3, r3, #3
 800dcac:	3304      	adds	r3, #4
 800dcae:	3401      	adds	r4, #1
 800dcb0:	3e03      	subs	r6, #3
 800dcb2:	42b4      	cmp	r4, r6
 800dcb4:	bf88      	it	hi
 800dcb6:	2304      	movhi	r3, #4
 800dcb8:	4443      	add	r3, r8
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f843 2b04 	str.w	r2, [r3], #4
 800dcc0:	429f      	cmp	r7, r3
 800dcc2:	d2fb      	bcs.n	800dcbc <__hexnan+0xcc>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	b91b      	cbnz	r3, 800dcd0 <__hexnan+0xe0>
 800dcc8:	4547      	cmp	r7, r8
 800dcca:	d128      	bne.n	800dd1e <__hexnan+0x12e>
 800dccc:	2301      	movs	r3, #1
 800dcce:	603b      	str	r3, [r7, #0]
 800dcd0:	2005      	movs	r0, #5
 800dcd2:	b007      	add	sp, #28
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	3501      	adds	r5, #1
 800dcda:	2d08      	cmp	r5, #8
 800dcdc:	f10b 0b01 	add.w	fp, fp, #1
 800dce0:	dd06      	ble.n	800dcf0 <__hexnan+0x100>
 800dce2:	4544      	cmp	r4, r8
 800dce4:	d9c1      	bls.n	800dc6a <__hexnan+0x7a>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcec:	2501      	movs	r5, #1
 800dcee:	3c04      	subs	r4, #4
 800dcf0:	6822      	ldr	r2, [r4, #0]
 800dcf2:	f000 000f 	and.w	r0, r0, #15
 800dcf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcfa:	6020      	str	r0, [r4, #0]
 800dcfc:	e7b5      	b.n	800dc6a <__hexnan+0x7a>
 800dcfe:	2508      	movs	r5, #8
 800dd00:	e7b3      	b.n	800dc6a <__hexnan+0x7a>
 800dd02:	9b01      	ldr	r3, [sp, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0dd      	beq.n	800dcc4 <__hexnan+0xd4>
 800dd08:	f1c3 0320 	rsb	r3, r3, #32
 800dd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd10:	40da      	lsrs	r2, r3
 800dd12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd16:	4013      	ands	r3, r2
 800dd18:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd1c:	e7d2      	b.n	800dcc4 <__hexnan+0xd4>
 800dd1e:	3f04      	subs	r7, #4
 800dd20:	e7d0      	b.n	800dcc4 <__hexnan+0xd4>
 800dd22:	2004      	movs	r0, #4
 800dd24:	e7d5      	b.n	800dcd2 <__hexnan+0xe2>

0800dd26 <__ascii_mbtowc>:
 800dd26:	b082      	sub	sp, #8
 800dd28:	b901      	cbnz	r1, 800dd2c <__ascii_mbtowc+0x6>
 800dd2a:	a901      	add	r1, sp, #4
 800dd2c:	b142      	cbz	r2, 800dd40 <__ascii_mbtowc+0x1a>
 800dd2e:	b14b      	cbz	r3, 800dd44 <__ascii_mbtowc+0x1e>
 800dd30:	7813      	ldrb	r3, [r2, #0]
 800dd32:	600b      	str	r3, [r1, #0]
 800dd34:	7812      	ldrb	r2, [r2, #0]
 800dd36:	1e10      	subs	r0, r2, #0
 800dd38:	bf18      	it	ne
 800dd3a:	2001      	movne	r0, #1
 800dd3c:	b002      	add	sp, #8
 800dd3e:	4770      	bx	lr
 800dd40:	4610      	mov	r0, r2
 800dd42:	e7fb      	b.n	800dd3c <__ascii_mbtowc+0x16>
 800dd44:	f06f 0001 	mvn.w	r0, #1
 800dd48:	e7f8      	b.n	800dd3c <__ascii_mbtowc+0x16>

0800dd4a <_realloc_r>:
 800dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	4680      	mov	r8, r0
 800dd50:	4615      	mov	r5, r2
 800dd52:	460c      	mov	r4, r1
 800dd54:	b921      	cbnz	r1, 800dd60 <_realloc_r+0x16>
 800dd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	f7fd be60 	b.w	800ba20 <_malloc_r>
 800dd60:	b92a      	cbnz	r2, 800dd6e <_realloc_r+0x24>
 800dd62:	f7fd fde9 	bl	800b938 <_free_r>
 800dd66:	2400      	movs	r4, #0
 800dd68:	4620      	mov	r0, r4
 800dd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6e:	f000 f840 	bl	800ddf2 <_malloc_usable_size_r>
 800dd72:	4285      	cmp	r5, r0
 800dd74:	4606      	mov	r6, r0
 800dd76:	d802      	bhi.n	800dd7e <_realloc_r+0x34>
 800dd78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd7c:	d8f4      	bhi.n	800dd68 <_realloc_r+0x1e>
 800dd7e:	4629      	mov	r1, r5
 800dd80:	4640      	mov	r0, r8
 800dd82:	f7fd fe4d 	bl	800ba20 <_malloc_r>
 800dd86:	4607      	mov	r7, r0
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d0ec      	beq.n	800dd66 <_realloc_r+0x1c>
 800dd8c:	42b5      	cmp	r5, r6
 800dd8e:	462a      	mov	r2, r5
 800dd90:	4621      	mov	r1, r4
 800dd92:	bf28      	it	cs
 800dd94:	4632      	movcs	r2, r6
 800dd96:	f7ff fc45 	bl	800d624 <memcpy>
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	f7fd fdcb 	bl	800b938 <_free_r>
 800dda2:	463c      	mov	r4, r7
 800dda4:	e7e0      	b.n	800dd68 <_realloc_r+0x1e>

0800dda6 <__ascii_wctomb>:
 800dda6:	4603      	mov	r3, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	b141      	cbz	r1, 800ddbe <__ascii_wctomb+0x18>
 800ddac:	2aff      	cmp	r2, #255	@ 0xff
 800ddae:	d904      	bls.n	800ddba <__ascii_wctomb+0x14>
 800ddb0:	228a      	movs	r2, #138	@ 0x8a
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	4770      	bx	lr
 800ddba:	700a      	strb	r2, [r1, #0]
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	4770      	bx	lr

0800ddc0 <fiprintf>:
 800ddc0:	b40e      	push	{r1, r2, r3}
 800ddc2:	b503      	push	{r0, r1, lr}
 800ddc4:	4601      	mov	r1, r0
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	4805      	ldr	r0, [pc, #20]	@ (800dde0 <fiprintf+0x20>)
 800ddca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddce:	6800      	ldr	r0, [r0, #0]
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	f000 f83f 	bl	800de54 <_vfiprintf_r>
 800ddd6:	b002      	add	sp, #8
 800ddd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dddc:	b003      	add	sp, #12
 800ddde:	4770      	bx	lr
 800dde0:	20000108 	.word	0x20000108

0800dde4 <abort>:
 800dde4:	b508      	push	{r3, lr}
 800dde6:	2006      	movs	r0, #6
 800dde8:	f000 fa08 	bl	800e1fc <raise>
 800ddec:	2001      	movs	r0, #1
 800ddee:	f7f3 fe71 	bl	8001ad4 <_exit>

0800ddf2 <_malloc_usable_size_r>:
 800ddf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf6:	1f18      	subs	r0, r3, #4
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	bfbc      	itt	lt
 800ddfc:	580b      	ldrlt	r3, [r1, r0]
 800ddfe:	18c0      	addlt	r0, r0, r3
 800de00:	4770      	bx	lr

0800de02 <__sfputc_r>:
 800de02:	6893      	ldr	r3, [r2, #8]
 800de04:	3b01      	subs	r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	b410      	push	{r4}
 800de0a:	6093      	str	r3, [r2, #8]
 800de0c:	da08      	bge.n	800de20 <__sfputc_r+0x1e>
 800de0e:	6994      	ldr	r4, [r2, #24]
 800de10:	42a3      	cmp	r3, r4
 800de12:	db01      	blt.n	800de18 <__sfputc_r+0x16>
 800de14:	290a      	cmp	r1, #10
 800de16:	d103      	bne.n	800de20 <__sfputc_r+0x1e>
 800de18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1c:	f000 b932 	b.w	800e084 <__swbuf_r>
 800de20:	6813      	ldr	r3, [r2, #0]
 800de22:	1c58      	adds	r0, r3, #1
 800de24:	6010      	str	r0, [r2, #0]
 800de26:	7019      	strb	r1, [r3, #0]
 800de28:	4608      	mov	r0, r1
 800de2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <__sfputs_r>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	4606      	mov	r6, r0
 800de34:	460f      	mov	r7, r1
 800de36:	4614      	mov	r4, r2
 800de38:	18d5      	adds	r5, r2, r3
 800de3a:	42ac      	cmp	r4, r5
 800de3c:	d101      	bne.n	800de42 <__sfputs_r+0x12>
 800de3e:	2000      	movs	r0, #0
 800de40:	e007      	b.n	800de52 <__sfputs_r+0x22>
 800de42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de46:	463a      	mov	r2, r7
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff ffda 	bl	800de02 <__sfputc_r>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	d1f3      	bne.n	800de3a <__sfputs_r+0xa>
 800de52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de54 <_vfiprintf_r>:
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	460d      	mov	r5, r1
 800de5a:	b09d      	sub	sp, #116	@ 0x74
 800de5c:	4614      	mov	r4, r2
 800de5e:	4698      	mov	r8, r3
 800de60:	4606      	mov	r6, r0
 800de62:	b118      	cbz	r0, 800de6c <_vfiprintf_r+0x18>
 800de64:	6a03      	ldr	r3, [r0, #32]
 800de66:	b90b      	cbnz	r3, 800de6c <_vfiprintf_r+0x18>
 800de68:	f7fc fdfa 	bl	800aa60 <__sinit>
 800de6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de6e:	07d9      	lsls	r1, r3, #31
 800de70:	d405      	bmi.n	800de7e <_vfiprintf_r+0x2a>
 800de72:	89ab      	ldrh	r3, [r5, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d402      	bmi.n	800de7e <_vfiprintf_r+0x2a>
 800de78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7a:	f7fc ff08 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800de7e:	89ab      	ldrh	r3, [r5, #12]
 800de80:	071b      	lsls	r3, r3, #28
 800de82:	d501      	bpl.n	800de88 <_vfiprintf_r+0x34>
 800de84:	692b      	ldr	r3, [r5, #16]
 800de86:	b99b      	cbnz	r3, 800deb0 <_vfiprintf_r+0x5c>
 800de88:	4629      	mov	r1, r5
 800de8a:	4630      	mov	r0, r6
 800de8c:	f000 f938 	bl	800e100 <__swsetup_r>
 800de90:	b170      	cbz	r0, 800deb0 <_vfiprintf_r+0x5c>
 800de92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de94:	07dc      	lsls	r4, r3, #31
 800de96:	d504      	bpl.n	800dea2 <_vfiprintf_r+0x4e>
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	b01d      	add	sp, #116	@ 0x74
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	0598      	lsls	r0, r3, #22
 800dea6:	d4f7      	bmi.n	800de98 <_vfiprintf_r+0x44>
 800dea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deaa:	f7fc fef1 	bl	800ac90 <__retarget_lock_release_recursive>
 800deae:	e7f3      	b.n	800de98 <_vfiprintf_r+0x44>
 800deb0:	2300      	movs	r3, #0
 800deb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb4:	2320      	movs	r3, #32
 800deb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deba:	f8cd 800c 	str.w	r8, [sp, #12]
 800debe:	2330      	movs	r3, #48	@ 0x30
 800dec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e070 <_vfiprintf_r+0x21c>
 800dec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dec8:	f04f 0901 	mov.w	r9, #1
 800decc:	4623      	mov	r3, r4
 800dece:	469a      	mov	sl, r3
 800ded0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded4:	b10a      	cbz	r2, 800deda <_vfiprintf_r+0x86>
 800ded6:	2a25      	cmp	r2, #37	@ 0x25
 800ded8:	d1f9      	bne.n	800dece <_vfiprintf_r+0x7a>
 800deda:	ebba 0b04 	subs.w	fp, sl, r4
 800dede:	d00b      	beq.n	800def8 <_vfiprintf_r+0xa4>
 800dee0:	465b      	mov	r3, fp
 800dee2:	4622      	mov	r2, r4
 800dee4:	4629      	mov	r1, r5
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7ff ffa2 	bl	800de30 <__sfputs_r>
 800deec:	3001      	adds	r0, #1
 800deee:	f000 80a7 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800def2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def4:	445a      	add	r2, fp
 800def6:	9209      	str	r2, [sp, #36]	@ 0x24
 800def8:	f89a 3000 	ldrb.w	r3, [sl]
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 809f 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800df02:	2300      	movs	r3, #0
 800df04:	f04f 32ff 	mov.w	r2, #4294967295
 800df08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df0c:	f10a 0a01 	add.w	sl, sl, #1
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	9307      	str	r3, [sp, #28]
 800df14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df18:	931a      	str	r3, [sp, #104]	@ 0x68
 800df1a:	4654      	mov	r4, sl
 800df1c:	2205      	movs	r2, #5
 800df1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df22:	4853      	ldr	r0, [pc, #332]	@ (800e070 <_vfiprintf_r+0x21c>)
 800df24:	f7f2 f95c 	bl	80001e0 <memchr>
 800df28:	9a04      	ldr	r2, [sp, #16]
 800df2a:	b9d8      	cbnz	r0, 800df64 <_vfiprintf_r+0x110>
 800df2c:	06d1      	lsls	r1, r2, #27
 800df2e:	bf44      	itt	mi
 800df30:	2320      	movmi	r3, #32
 800df32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df36:	0713      	lsls	r3, r2, #28
 800df38:	bf44      	itt	mi
 800df3a:	232b      	movmi	r3, #43	@ 0x2b
 800df3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df40:	f89a 3000 	ldrb.w	r3, [sl]
 800df44:	2b2a      	cmp	r3, #42	@ 0x2a
 800df46:	d015      	beq.n	800df74 <_vfiprintf_r+0x120>
 800df48:	9a07      	ldr	r2, [sp, #28]
 800df4a:	4654      	mov	r4, sl
 800df4c:	2000      	movs	r0, #0
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	4621      	mov	r1, r4
 800df54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df58:	3b30      	subs	r3, #48	@ 0x30
 800df5a:	2b09      	cmp	r3, #9
 800df5c:	d94b      	bls.n	800dff6 <_vfiprintf_r+0x1a2>
 800df5e:	b1b0      	cbz	r0, 800df8e <_vfiprintf_r+0x13a>
 800df60:	9207      	str	r2, [sp, #28]
 800df62:	e014      	b.n	800df8e <_vfiprintf_r+0x13a>
 800df64:	eba0 0308 	sub.w	r3, r0, r8
 800df68:	fa09 f303 	lsl.w	r3, r9, r3
 800df6c:	4313      	orrs	r3, r2
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	46a2      	mov	sl, r4
 800df72:	e7d2      	b.n	800df1a <_vfiprintf_r+0xc6>
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	1d19      	adds	r1, r3, #4
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	9103      	str	r1, [sp, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfbb      	ittet	lt
 800df80:	425b      	neglt	r3, r3
 800df82:	f042 0202 	orrlt.w	r2, r2, #2
 800df86:	9307      	strge	r3, [sp, #28]
 800df88:	9307      	strlt	r3, [sp, #28]
 800df8a:	bfb8      	it	lt
 800df8c:	9204      	strlt	r2, [sp, #16]
 800df8e:	7823      	ldrb	r3, [r4, #0]
 800df90:	2b2e      	cmp	r3, #46	@ 0x2e
 800df92:	d10a      	bne.n	800dfaa <_vfiprintf_r+0x156>
 800df94:	7863      	ldrb	r3, [r4, #1]
 800df96:	2b2a      	cmp	r3, #42	@ 0x2a
 800df98:	d132      	bne.n	800e000 <_vfiprintf_r+0x1ac>
 800df9a:	9b03      	ldr	r3, [sp, #12]
 800df9c:	1d1a      	adds	r2, r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	9203      	str	r2, [sp, #12]
 800dfa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfa6:	3402      	adds	r4, #2
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e080 <_vfiprintf_r+0x22c>
 800dfae:	7821      	ldrb	r1, [r4, #0]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	f7f2 f914 	bl	80001e0 <memchr>
 800dfb8:	b138      	cbz	r0, 800dfca <_vfiprintf_r+0x176>
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	eba0 000a 	sub.w	r0, r0, sl
 800dfc0:	2240      	movs	r2, #64	@ 0x40
 800dfc2:	4082      	lsls	r2, r0
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	3401      	adds	r4, #1
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfce:	4829      	ldr	r0, [pc, #164]	@ (800e074 <_vfiprintf_r+0x220>)
 800dfd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd4:	2206      	movs	r2, #6
 800dfd6:	f7f2 f903 	bl	80001e0 <memchr>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d03f      	beq.n	800e05e <_vfiprintf_r+0x20a>
 800dfde:	4b26      	ldr	r3, [pc, #152]	@ (800e078 <_vfiprintf_r+0x224>)
 800dfe0:	bb1b      	cbnz	r3, 800e02a <_vfiprintf_r+0x1d6>
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	3307      	adds	r3, #7
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	3308      	adds	r3, #8
 800dfec:	9303      	str	r3, [sp, #12]
 800dfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff0:	443b      	add	r3, r7
 800dff2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff4:	e76a      	b.n	800decc <_vfiprintf_r+0x78>
 800dff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dffa:	460c      	mov	r4, r1
 800dffc:	2001      	movs	r0, #1
 800dffe:	e7a8      	b.n	800df52 <_vfiprintf_r+0xfe>
 800e000:	2300      	movs	r3, #0
 800e002:	3401      	adds	r4, #1
 800e004:	9305      	str	r3, [sp, #20]
 800e006:	4619      	mov	r1, r3
 800e008:	f04f 0c0a 	mov.w	ip, #10
 800e00c:	4620      	mov	r0, r4
 800e00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e012:	3a30      	subs	r2, #48	@ 0x30
 800e014:	2a09      	cmp	r2, #9
 800e016:	d903      	bls.n	800e020 <_vfiprintf_r+0x1cc>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d0c6      	beq.n	800dfaa <_vfiprintf_r+0x156>
 800e01c:	9105      	str	r1, [sp, #20]
 800e01e:	e7c4      	b.n	800dfaa <_vfiprintf_r+0x156>
 800e020:	fb0c 2101 	mla	r1, ip, r1, r2
 800e024:	4604      	mov	r4, r0
 800e026:	2301      	movs	r3, #1
 800e028:	e7f0      	b.n	800e00c <_vfiprintf_r+0x1b8>
 800e02a:	ab03      	add	r3, sp, #12
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	462a      	mov	r2, r5
 800e030:	4b12      	ldr	r3, [pc, #72]	@ (800e07c <_vfiprintf_r+0x228>)
 800e032:	a904      	add	r1, sp, #16
 800e034:	4630      	mov	r0, r6
 800e036:	f7fb febb 	bl	8009db0 <_printf_float>
 800e03a:	4607      	mov	r7, r0
 800e03c:	1c78      	adds	r0, r7, #1
 800e03e:	d1d6      	bne.n	800dfee <_vfiprintf_r+0x19a>
 800e040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e042:	07d9      	lsls	r1, r3, #31
 800e044:	d405      	bmi.n	800e052 <_vfiprintf_r+0x1fe>
 800e046:	89ab      	ldrh	r3, [r5, #12]
 800e048:	059a      	lsls	r2, r3, #22
 800e04a:	d402      	bmi.n	800e052 <_vfiprintf_r+0x1fe>
 800e04c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e04e:	f7fc fe1f 	bl	800ac90 <__retarget_lock_release_recursive>
 800e052:	89ab      	ldrh	r3, [r5, #12]
 800e054:	065b      	lsls	r3, r3, #25
 800e056:	f53f af1f 	bmi.w	800de98 <_vfiprintf_r+0x44>
 800e05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e05c:	e71e      	b.n	800de9c <_vfiprintf_r+0x48>
 800e05e:	ab03      	add	r3, sp, #12
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	462a      	mov	r2, r5
 800e064:	4b05      	ldr	r3, [pc, #20]	@ (800e07c <_vfiprintf_r+0x228>)
 800e066:	a904      	add	r1, sp, #16
 800e068:	4630      	mov	r0, r6
 800e06a:	f7fc f939 	bl	800a2e0 <_printf_i>
 800e06e:	e7e4      	b.n	800e03a <_vfiprintf_r+0x1e6>
 800e070:	0800f631 	.word	0x0800f631
 800e074:	0800f63b 	.word	0x0800f63b
 800e078:	08009db1 	.word	0x08009db1
 800e07c:	0800de31 	.word	0x0800de31
 800e080:	0800f637 	.word	0x0800f637

0800e084 <__swbuf_r>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	460e      	mov	r6, r1
 800e088:	4614      	mov	r4, r2
 800e08a:	4605      	mov	r5, r0
 800e08c:	b118      	cbz	r0, 800e096 <__swbuf_r+0x12>
 800e08e:	6a03      	ldr	r3, [r0, #32]
 800e090:	b90b      	cbnz	r3, 800e096 <__swbuf_r+0x12>
 800e092:	f7fc fce5 	bl	800aa60 <__sinit>
 800e096:	69a3      	ldr	r3, [r4, #24]
 800e098:	60a3      	str	r3, [r4, #8]
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	071a      	lsls	r2, r3, #28
 800e09e:	d501      	bpl.n	800e0a4 <__swbuf_r+0x20>
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	b943      	cbnz	r3, 800e0b6 <__swbuf_r+0x32>
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 f82a 	bl	800e100 <__swsetup_r>
 800e0ac:	b118      	cbz	r0, 800e0b6 <__swbuf_r+0x32>
 800e0ae:	f04f 37ff 	mov.w	r7, #4294967295
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	6922      	ldr	r2, [r4, #16]
 800e0ba:	1a98      	subs	r0, r3, r2
 800e0bc:	6963      	ldr	r3, [r4, #20]
 800e0be:	b2f6      	uxtb	r6, r6
 800e0c0:	4283      	cmp	r3, r0
 800e0c2:	4637      	mov	r7, r6
 800e0c4:	dc05      	bgt.n	800e0d2 <__swbuf_r+0x4e>
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f7ff fa47 	bl	800d55c <_fflush_r>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d1ed      	bne.n	800e0ae <__swbuf_r+0x2a>
 800e0d2:	68a3      	ldr	r3, [r4, #8]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	6022      	str	r2, [r4, #0]
 800e0de:	701e      	strb	r6, [r3, #0]
 800e0e0:	6962      	ldr	r2, [r4, #20]
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d004      	beq.n	800e0f2 <__swbuf_r+0x6e>
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	07db      	lsls	r3, r3, #31
 800e0ec:	d5e1      	bpl.n	800e0b2 <__swbuf_r+0x2e>
 800e0ee:	2e0a      	cmp	r6, #10
 800e0f0:	d1df      	bne.n	800e0b2 <__swbuf_r+0x2e>
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f7ff fa31 	bl	800d55c <_fflush_r>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d0d9      	beq.n	800e0b2 <__swbuf_r+0x2e>
 800e0fe:	e7d6      	b.n	800e0ae <__swbuf_r+0x2a>

0800e100 <__swsetup_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4b29      	ldr	r3, [pc, #164]	@ (800e1a8 <__swsetup_r+0xa8>)
 800e104:	4605      	mov	r5, r0
 800e106:	6818      	ldr	r0, [r3, #0]
 800e108:	460c      	mov	r4, r1
 800e10a:	b118      	cbz	r0, 800e114 <__swsetup_r+0x14>
 800e10c:	6a03      	ldr	r3, [r0, #32]
 800e10e:	b90b      	cbnz	r3, 800e114 <__swsetup_r+0x14>
 800e110:	f7fc fca6 	bl	800aa60 <__sinit>
 800e114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e118:	0719      	lsls	r1, r3, #28
 800e11a:	d422      	bmi.n	800e162 <__swsetup_r+0x62>
 800e11c:	06da      	lsls	r2, r3, #27
 800e11e:	d407      	bmi.n	800e130 <__swsetup_r+0x30>
 800e120:	2209      	movs	r2, #9
 800e122:	602a      	str	r2, [r5, #0]
 800e124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	e033      	b.n	800e198 <__swsetup_r+0x98>
 800e130:	0758      	lsls	r0, r3, #29
 800e132:	d512      	bpl.n	800e15a <__swsetup_r+0x5a>
 800e134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e136:	b141      	cbz	r1, 800e14a <__swsetup_r+0x4a>
 800e138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e13c:	4299      	cmp	r1, r3
 800e13e:	d002      	beq.n	800e146 <__swsetup_r+0x46>
 800e140:	4628      	mov	r0, r5
 800e142:	f7fd fbf9 	bl	800b938 <_free_r>
 800e146:	2300      	movs	r3, #0
 800e148:	6363      	str	r3, [r4, #52]	@ 0x34
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	2300      	movs	r3, #0
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	f043 0308 	orr.w	r3, r3, #8
 800e160:	81a3      	strh	r3, [r4, #12]
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	b94b      	cbnz	r3, 800e17a <__swsetup_r+0x7a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e170:	d003      	beq.n	800e17a <__swsetup_r+0x7a>
 800e172:	4621      	mov	r1, r4
 800e174:	4628      	mov	r0, r5
 800e176:	f000 f883 	bl	800e280 <__smakebuf_r>
 800e17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e17e:	f013 0201 	ands.w	r2, r3, #1
 800e182:	d00a      	beq.n	800e19a <__swsetup_r+0x9a>
 800e184:	2200      	movs	r2, #0
 800e186:	60a2      	str	r2, [r4, #8]
 800e188:	6962      	ldr	r2, [r4, #20]
 800e18a:	4252      	negs	r2, r2
 800e18c:	61a2      	str	r2, [r4, #24]
 800e18e:	6922      	ldr	r2, [r4, #16]
 800e190:	b942      	cbnz	r2, 800e1a4 <__swsetup_r+0xa4>
 800e192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e196:	d1c5      	bne.n	800e124 <__swsetup_r+0x24>
 800e198:	bd38      	pop	{r3, r4, r5, pc}
 800e19a:	0799      	lsls	r1, r3, #30
 800e19c:	bf58      	it	pl
 800e19e:	6962      	ldrpl	r2, [r4, #20]
 800e1a0:	60a2      	str	r2, [r4, #8]
 800e1a2:	e7f4      	b.n	800e18e <__swsetup_r+0x8e>
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e7f7      	b.n	800e198 <__swsetup_r+0x98>
 800e1a8:	20000108 	.word	0x20000108

0800e1ac <_raise_r>:
 800e1ac:	291f      	cmp	r1, #31
 800e1ae:	b538      	push	{r3, r4, r5, lr}
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	d904      	bls.n	800e1c0 <_raise_r+0x14>
 800e1b6:	2316      	movs	r3, #22
 800e1b8:	6003      	str	r3, [r0, #0]
 800e1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1c2:	b112      	cbz	r2, 800e1ca <_raise_r+0x1e>
 800e1c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1c8:	b94b      	cbnz	r3, 800e1de <_raise_r+0x32>
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f000 f830 	bl	800e230 <_getpid_r>
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1da:	f000 b817 	b.w	800e20c <_kill_r>
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d00a      	beq.n	800e1f8 <_raise_r+0x4c>
 800e1e2:	1c59      	adds	r1, r3, #1
 800e1e4:	d103      	bne.n	800e1ee <_raise_r+0x42>
 800e1e6:	2316      	movs	r3, #22
 800e1e8:	6003      	str	r3, [r0, #0]
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	e7e7      	b.n	800e1be <_raise_r+0x12>
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4798      	blx	r3
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e7e0      	b.n	800e1be <_raise_r+0x12>

0800e1fc <raise>:
 800e1fc:	4b02      	ldr	r3, [pc, #8]	@ (800e208 <raise+0xc>)
 800e1fe:	4601      	mov	r1, r0
 800e200:	6818      	ldr	r0, [r3, #0]
 800e202:	f7ff bfd3 	b.w	800e1ac <_raise_r>
 800e206:	bf00      	nop
 800e208:	20000108 	.word	0x20000108

0800e20c <_kill_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d07      	ldr	r5, [pc, #28]	@ (800e22c <_kill_r+0x20>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	4611      	mov	r1, r2
 800e218:	602b      	str	r3, [r5, #0]
 800e21a:	f7f3 fc4b 	bl	8001ab4 <_kill>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	d102      	bne.n	800e228 <_kill_r+0x1c>
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	b103      	cbz	r3, 800e228 <_kill_r+0x1c>
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	bd38      	pop	{r3, r4, r5, pc}
 800e22a:	bf00      	nop
 800e22c:	2000219c 	.word	0x2000219c

0800e230 <_getpid_r>:
 800e230:	f7f3 bc38 	b.w	8001aa4 <_getpid>

0800e234 <__swhatbuf_r>:
 800e234:	b570      	push	{r4, r5, r6, lr}
 800e236:	460c      	mov	r4, r1
 800e238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e23c:	2900      	cmp	r1, #0
 800e23e:	b096      	sub	sp, #88	@ 0x58
 800e240:	4615      	mov	r5, r2
 800e242:	461e      	mov	r6, r3
 800e244:	da0d      	bge.n	800e262 <__swhatbuf_r+0x2e>
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e24c:	f04f 0100 	mov.w	r1, #0
 800e250:	bf14      	ite	ne
 800e252:	2340      	movne	r3, #64	@ 0x40
 800e254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e258:	2000      	movs	r0, #0
 800e25a:	6031      	str	r1, [r6, #0]
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	b016      	add	sp, #88	@ 0x58
 800e260:	bd70      	pop	{r4, r5, r6, pc}
 800e262:	466a      	mov	r2, sp
 800e264:	f000 f848 	bl	800e2f8 <_fstat_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	dbec      	blt.n	800e246 <__swhatbuf_r+0x12>
 800e26c:	9901      	ldr	r1, [sp, #4]
 800e26e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e276:	4259      	negs	r1, r3
 800e278:	4159      	adcs	r1, r3
 800e27a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e27e:	e7eb      	b.n	800e258 <__swhatbuf_r+0x24>

0800e280 <__smakebuf_r>:
 800e280:	898b      	ldrh	r3, [r1, #12]
 800e282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e284:	079d      	lsls	r5, r3, #30
 800e286:	4606      	mov	r6, r0
 800e288:	460c      	mov	r4, r1
 800e28a:	d507      	bpl.n	800e29c <__smakebuf_r+0x1c>
 800e28c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	6123      	str	r3, [r4, #16]
 800e294:	2301      	movs	r3, #1
 800e296:	6163      	str	r3, [r4, #20]
 800e298:	b003      	add	sp, #12
 800e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e29c:	ab01      	add	r3, sp, #4
 800e29e:	466a      	mov	r2, sp
 800e2a0:	f7ff ffc8 	bl	800e234 <__swhatbuf_r>
 800e2a4:	9f00      	ldr	r7, [sp, #0]
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7fd fbb8 	bl	800ba20 <_malloc_r>
 800e2b0:	b948      	cbnz	r0, 800e2c6 <__smakebuf_r+0x46>
 800e2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b6:	059a      	lsls	r2, r3, #22
 800e2b8:	d4ee      	bmi.n	800e298 <__smakebuf_r+0x18>
 800e2ba:	f023 0303 	bic.w	r3, r3, #3
 800e2be:	f043 0302 	orr.w	r3, r3, #2
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	e7e2      	b.n	800e28c <__smakebuf_r+0xc>
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	6020      	str	r0, [r4, #0]
 800e2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2ce:	81a3      	strh	r3, [r4, #12]
 800e2d0:	9b01      	ldr	r3, [sp, #4]
 800e2d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2d6:	b15b      	cbz	r3, 800e2f0 <__smakebuf_r+0x70>
 800e2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f000 f81d 	bl	800e31c <_isatty_r>
 800e2e2:	b128      	cbz	r0, 800e2f0 <__smakebuf_r+0x70>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	f043 0301 	orr.w	r3, r3, #1
 800e2ee:	81a3      	strh	r3, [r4, #12]
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	431d      	orrs	r5, r3
 800e2f4:	81a5      	strh	r5, [r4, #12]
 800e2f6:	e7cf      	b.n	800e298 <__smakebuf_r+0x18>

0800e2f8 <_fstat_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4d07      	ldr	r5, [pc, #28]	@ (800e318 <_fstat_r+0x20>)
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	4604      	mov	r4, r0
 800e300:	4608      	mov	r0, r1
 800e302:	4611      	mov	r1, r2
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	f7f3 fc35 	bl	8001b74 <_fstat>
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	d102      	bne.n	800e314 <_fstat_r+0x1c>
 800e30e:	682b      	ldr	r3, [r5, #0]
 800e310:	b103      	cbz	r3, 800e314 <_fstat_r+0x1c>
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	bd38      	pop	{r3, r4, r5, pc}
 800e316:	bf00      	nop
 800e318:	2000219c 	.word	0x2000219c

0800e31c <_isatty_r>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	4d06      	ldr	r5, [pc, #24]	@ (800e338 <_isatty_r+0x1c>)
 800e320:	2300      	movs	r3, #0
 800e322:	4604      	mov	r4, r0
 800e324:	4608      	mov	r0, r1
 800e326:	602b      	str	r3, [r5, #0]
 800e328:	f7f3 fc34 	bl	8001b94 <_isatty>
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	d102      	bne.n	800e336 <_isatty_r+0x1a>
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	b103      	cbz	r3, 800e336 <_isatty_r+0x1a>
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	bd38      	pop	{r3, r4, r5, pc}
 800e338:	2000219c 	.word	0x2000219c

0800e33c <pow>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	ed2d 8b02 	vpush	{d8}
 800e342:	eeb0 8a40 	vmov.f32	s16, s0
 800e346:	eef0 8a60 	vmov.f32	s17, s1
 800e34a:	ec55 4b11 	vmov	r4, r5, d1
 800e34e:	f000 f873 	bl	800e438 <__ieee754_pow>
 800e352:	4622      	mov	r2, r4
 800e354:	462b      	mov	r3, r5
 800e356:	4620      	mov	r0, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	ec57 6b10 	vmov	r6, r7, d0
 800e35e:	f7f2 fbed 	bl	8000b3c <__aeabi_dcmpun>
 800e362:	2800      	cmp	r0, #0
 800e364:	d13b      	bne.n	800e3de <pow+0xa2>
 800e366:	ec51 0b18 	vmov	r0, r1, d8
 800e36a:	2200      	movs	r2, #0
 800e36c:	2300      	movs	r3, #0
 800e36e:	f7f2 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800e372:	b1b8      	cbz	r0, 800e3a4 <pow+0x68>
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	4620      	mov	r0, r4
 800e37a:	4629      	mov	r1, r5
 800e37c:	f7f2 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 800e380:	2800      	cmp	r0, #0
 800e382:	d146      	bne.n	800e412 <pow+0xd6>
 800e384:	ec45 4b10 	vmov	d0, r4, r5
 800e388:	f000 f848 	bl	800e41c <finite>
 800e38c:	b338      	cbz	r0, 800e3de <pow+0xa2>
 800e38e:	2200      	movs	r2, #0
 800e390:	2300      	movs	r3, #0
 800e392:	4620      	mov	r0, r4
 800e394:	4629      	mov	r1, r5
 800e396:	f7f2 fba9 	bl	8000aec <__aeabi_dcmplt>
 800e39a:	b300      	cbz	r0, 800e3de <pow+0xa2>
 800e39c:	f7fc fc4c 	bl	800ac38 <__errno>
 800e3a0:	2322      	movs	r3, #34	@ 0x22
 800e3a2:	e01b      	b.n	800e3dc <pow+0xa0>
 800e3a4:	ec47 6b10 	vmov	d0, r6, r7
 800e3a8:	f000 f838 	bl	800e41c <finite>
 800e3ac:	b9e0      	cbnz	r0, 800e3e8 <pow+0xac>
 800e3ae:	eeb0 0a48 	vmov.f32	s0, s16
 800e3b2:	eef0 0a68 	vmov.f32	s1, s17
 800e3b6:	f000 f831 	bl	800e41c <finite>
 800e3ba:	b1a8      	cbz	r0, 800e3e8 <pow+0xac>
 800e3bc:	ec45 4b10 	vmov	d0, r4, r5
 800e3c0:	f000 f82c 	bl	800e41c <finite>
 800e3c4:	b180      	cbz	r0, 800e3e8 <pow+0xac>
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f2 fbb5 	bl	8000b3c <__aeabi_dcmpun>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d0e2      	beq.n	800e39c <pow+0x60>
 800e3d6:	f7fc fc2f 	bl	800ac38 <__errno>
 800e3da:	2321      	movs	r3, #33	@ 0x21
 800e3dc:	6003      	str	r3, [r0, #0]
 800e3de:	ecbd 8b02 	vpop	{d8}
 800e3e2:	ec47 6b10 	vmov	d0, r6, r7
 800e3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	f7f2 fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d0f2      	beq.n	800e3de <pow+0xa2>
 800e3f8:	eeb0 0a48 	vmov.f32	s0, s16
 800e3fc:	eef0 0a68 	vmov.f32	s1, s17
 800e400:	f000 f80c 	bl	800e41c <finite>
 800e404:	2800      	cmp	r0, #0
 800e406:	d0ea      	beq.n	800e3de <pow+0xa2>
 800e408:	ec45 4b10 	vmov	d0, r4, r5
 800e40c:	f000 f806 	bl	800e41c <finite>
 800e410:	e7c3      	b.n	800e39a <pow+0x5e>
 800e412:	4f01      	ldr	r7, [pc, #4]	@ (800e418 <pow+0xdc>)
 800e414:	2600      	movs	r6, #0
 800e416:	e7e2      	b.n	800e3de <pow+0xa2>
 800e418:	3ff00000 	.word	0x3ff00000

0800e41c <finite>:
 800e41c:	b082      	sub	sp, #8
 800e41e:	ed8d 0b00 	vstr	d0, [sp]
 800e422:	9801      	ldr	r0, [sp, #4]
 800e424:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e428:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e42c:	0fc0      	lsrs	r0, r0, #31
 800e42e:	b002      	add	sp, #8
 800e430:	4770      	bx	lr
 800e432:	0000      	movs	r0, r0
 800e434:	0000      	movs	r0, r0
	...

0800e438 <__ieee754_pow>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	b091      	sub	sp, #68	@ 0x44
 800e43e:	ed8d 1b00 	vstr	d1, [sp]
 800e442:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e446:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e44a:	ea5a 0001 	orrs.w	r0, sl, r1
 800e44e:	ec57 6b10 	vmov	r6, r7, d0
 800e452:	d113      	bne.n	800e47c <__ieee754_pow+0x44>
 800e454:	19b3      	adds	r3, r6, r6
 800e456:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e45a:	4152      	adcs	r2, r2
 800e45c:	4298      	cmp	r0, r3
 800e45e:	4b98      	ldr	r3, [pc, #608]	@ (800e6c0 <__ieee754_pow+0x288>)
 800e460:	4193      	sbcs	r3, r2
 800e462:	f080 84ea 	bcs.w	800ee3a <__ieee754_pow+0xa02>
 800e466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e46a:	4630      	mov	r0, r6
 800e46c:	4639      	mov	r1, r7
 800e46e:	f7f1 ff15 	bl	800029c <__adddf3>
 800e472:	ec41 0b10 	vmov	d0, r0, r1
 800e476:	b011      	add	sp, #68	@ 0x44
 800e478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47c:	4a91      	ldr	r2, [pc, #580]	@ (800e6c4 <__ieee754_pow+0x28c>)
 800e47e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e482:	4590      	cmp	r8, r2
 800e484:	463d      	mov	r5, r7
 800e486:	4633      	mov	r3, r6
 800e488:	d806      	bhi.n	800e498 <__ieee754_pow+0x60>
 800e48a:	d101      	bne.n	800e490 <__ieee754_pow+0x58>
 800e48c:	2e00      	cmp	r6, #0
 800e48e:	d1ea      	bne.n	800e466 <__ieee754_pow+0x2e>
 800e490:	4592      	cmp	sl, r2
 800e492:	d801      	bhi.n	800e498 <__ieee754_pow+0x60>
 800e494:	d10e      	bne.n	800e4b4 <__ieee754_pow+0x7c>
 800e496:	b169      	cbz	r1, 800e4b4 <__ieee754_pow+0x7c>
 800e498:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e49c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e4a0:	431d      	orrs	r5, r3
 800e4a2:	d1e0      	bne.n	800e466 <__ieee754_pow+0x2e>
 800e4a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e4a8:	18db      	adds	r3, r3, r3
 800e4aa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e4ae:	4152      	adcs	r2, r2
 800e4b0:	429d      	cmp	r5, r3
 800e4b2:	e7d4      	b.n	800e45e <__ieee754_pow+0x26>
 800e4b4:	2d00      	cmp	r5, #0
 800e4b6:	46c3      	mov	fp, r8
 800e4b8:	da3a      	bge.n	800e530 <__ieee754_pow+0xf8>
 800e4ba:	4a83      	ldr	r2, [pc, #524]	@ (800e6c8 <__ieee754_pow+0x290>)
 800e4bc:	4592      	cmp	sl, r2
 800e4be:	d84d      	bhi.n	800e55c <__ieee754_pow+0x124>
 800e4c0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e4c4:	4592      	cmp	sl, r2
 800e4c6:	f240 84c7 	bls.w	800ee58 <__ieee754_pow+0xa20>
 800e4ca:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e4ce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e4d2:	2a14      	cmp	r2, #20
 800e4d4:	dd0f      	ble.n	800e4f6 <__ieee754_pow+0xbe>
 800e4d6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e4da:	fa21 f402 	lsr.w	r4, r1, r2
 800e4de:	fa04 f202 	lsl.w	r2, r4, r2
 800e4e2:	428a      	cmp	r2, r1
 800e4e4:	f040 84b8 	bne.w	800ee58 <__ieee754_pow+0xa20>
 800e4e8:	f004 0401 	and.w	r4, r4, #1
 800e4ec:	f1c4 0402 	rsb	r4, r4, #2
 800e4f0:	2900      	cmp	r1, #0
 800e4f2:	d158      	bne.n	800e5a6 <__ieee754_pow+0x16e>
 800e4f4:	e00e      	b.n	800e514 <__ieee754_pow+0xdc>
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	d154      	bne.n	800e5a4 <__ieee754_pow+0x16c>
 800e4fa:	f1c2 0214 	rsb	r2, r2, #20
 800e4fe:	fa4a f402 	asr.w	r4, sl, r2
 800e502:	fa04 f202 	lsl.w	r2, r4, r2
 800e506:	4552      	cmp	r2, sl
 800e508:	f040 84a3 	bne.w	800ee52 <__ieee754_pow+0xa1a>
 800e50c:	f004 0401 	and.w	r4, r4, #1
 800e510:	f1c4 0402 	rsb	r4, r4, #2
 800e514:	4a6d      	ldr	r2, [pc, #436]	@ (800e6cc <__ieee754_pow+0x294>)
 800e516:	4592      	cmp	sl, r2
 800e518:	d12e      	bne.n	800e578 <__ieee754_pow+0x140>
 800e51a:	f1b9 0f00 	cmp.w	r9, #0
 800e51e:	f280 8494 	bge.w	800ee4a <__ieee754_pow+0xa12>
 800e522:	496a      	ldr	r1, [pc, #424]	@ (800e6cc <__ieee754_pow+0x294>)
 800e524:	4632      	mov	r2, r6
 800e526:	463b      	mov	r3, r7
 800e528:	2000      	movs	r0, #0
 800e52a:	f7f2 f997 	bl	800085c <__aeabi_ddiv>
 800e52e:	e7a0      	b.n	800e472 <__ieee754_pow+0x3a>
 800e530:	2400      	movs	r4, #0
 800e532:	bbc1      	cbnz	r1, 800e5a6 <__ieee754_pow+0x16e>
 800e534:	4a63      	ldr	r2, [pc, #396]	@ (800e6c4 <__ieee754_pow+0x28c>)
 800e536:	4592      	cmp	sl, r2
 800e538:	d1ec      	bne.n	800e514 <__ieee754_pow+0xdc>
 800e53a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e53e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e542:	431a      	orrs	r2, r3
 800e544:	f000 8479 	beq.w	800ee3a <__ieee754_pow+0xa02>
 800e548:	4b61      	ldr	r3, [pc, #388]	@ (800e6d0 <__ieee754_pow+0x298>)
 800e54a:	4598      	cmp	r8, r3
 800e54c:	d908      	bls.n	800e560 <__ieee754_pow+0x128>
 800e54e:	f1b9 0f00 	cmp.w	r9, #0
 800e552:	f2c0 8476 	blt.w	800ee42 <__ieee754_pow+0xa0a>
 800e556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e55a:	e78a      	b.n	800e472 <__ieee754_pow+0x3a>
 800e55c:	2402      	movs	r4, #2
 800e55e:	e7e8      	b.n	800e532 <__ieee754_pow+0xfa>
 800e560:	f1b9 0f00 	cmp.w	r9, #0
 800e564:	f04f 0000 	mov.w	r0, #0
 800e568:	f04f 0100 	mov.w	r1, #0
 800e56c:	da81      	bge.n	800e472 <__ieee754_pow+0x3a>
 800e56e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e572:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e576:	e77c      	b.n	800e472 <__ieee754_pow+0x3a>
 800e578:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e57c:	d106      	bne.n	800e58c <__ieee754_pow+0x154>
 800e57e:	4632      	mov	r2, r6
 800e580:	463b      	mov	r3, r7
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7f2 f83f 	bl	8000608 <__aeabi_dmul>
 800e58a:	e772      	b.n	800e472 <__ieee754_pow+0x3a>
 800e58c:	4a51      	ldr	r2, [pc, #324]	@ (800e6d4 <__ieee754_pow+0x29c>)
 800e58e:	4591      	cmp	r9, r2
 800e590:	d109      	bne.n	800e5a6 <__ieee754_pow+0x16e>
 800e592:	2d00      	cmp	r5, #0
 800e594:	db07      	blt.n	800e5a6 <__ieee754_pow+0x16e>
 800e596:	ec47 6b10 	vmov	d0, r6, r7
 800e59a:	b011      	add	sp, #68	@ 0x44
 800e59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a0:	f000 bd52 	b.w	800f048 <__ieee754_sqrt>
 800e5a4:	2400      	movs	r4, #0
 800e5a6:	ec47 6b10 	vmov	d0, r6, r7
 800e5aa:	9302      	str	r3, [sp, #8]
 800e5ac:	f000 fc88 	bl	800eec0 <fabs>
 800e5b0:	9b02      	ldr	r3, [sp, #8]
 800e5b2:	ec51 0b10 	vmov	r0, r1, d0
 800e5b6:	bb53      	cbnz	r3, 800e60e <__ieee754_pow+0x1d6>
 800e5b8:	4b44      	ldr	r3, [pc, #272]	@ (800e6cc <__ieee754_pow+0x294>)
 800e5ba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d002      	beq.n	800e5c8 <__ieee754_pow+0x190>
 800e5c2:	f1b8 0f00 	cmp.w	r8, #0
 800e5c6:	d122      	bne.n	800e60e <__ieee754_pow+0x1d6>
 800e5c8:	f1b9 0f00 	cmp.w	r9, #0
 800e5cc:	da05      	bge.n	800e5da <__ieee754_pow+0x1a2>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	493d      	ldr	r1, [pc, #244]	@ (800e6cc <__ieee754_pow+0x294>)
 800e5d6:	f7f2 f941 	bl	800085c <__aeabi_ddiv>
 800e5da:	2d00      	cmp	r5, #0
 800e5dc:	f6bf af49 	bge.w	800e472 <__ieee754_pow+0x3a>
 800e5e0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e5e4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e5e8:	ea58 0804 	orrs.w	r8, r8, r4
 800e5ec:	d108      	bne.n	800e600 <__ieee754_pow+0x1c8>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	f7f1 fe4f 	bl	8000298 <__aeabi_dsub>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	e794      	b.n	800e52a <__ieee754_pow+0xf2>
 800e600:	2c01      	cmp	r4, #1
 800e602:	f47f af36 	bne.w	800e472 <__ieee754_pow+0x3a>
 800e606:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e60a:	4619      	mov	r1, r3
 800e60c:	e731      	b.n	800e472 <__ieee754_pow+0x3a>
 800e60e:	0feb      	lsrs	r3, r5, #31
 800e610:	3b01      	subs	r3, #1
 800e612:	ea53 0204 	orrs.w	r2, r3, r4
 800e616:	d102      	bne.n	800e61e <__ieee754_pow+0x1e6>
 800e618:	4632      	mov	r2, r6
 800e61a:	463b      	mov	r3, r7
 800e61c:	e7e9      	b.n	800e5f2 <__ieee754_pow+0x1ba>
 800e61e:	3c01      	subs	r4, #1
 800e620:	431c      	orrs	r4, r3
 800e622:	d016      	beq.n	800e652 <__ieee754_pow+0x21a>
 800e624:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e6b0 <__ieee754_pow+0x278>
 800e628:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e62c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e630:	f240 8112 	bls.w	800e858 <__ieee754_pow+0x420>
 800e634:	4b28      	ldr	r3, [pc, #160]	@ (800e6d8 <__ieee754_pow+0x2a0>)
 800e636:	459a      	cmp	sl, r3
 800e638:	4b25      	ldr	r3, [pc, #148]	@ (800e6d0 <__ieee754_pow+0x298>)
 800e63a:	d916      	bls.n	800e66a <__ieee754_pow+0x232>
 800e63c:	4598      	cmp	r8, r3
 800e63e:	d80b      	bhi.n	800e658 <__ieee754_pow+0x220>
 800e640:	f1b9 0f00 	cmp.w	r9, #0
 800e644:	da0b      	bge.n	800e65e <__ieee754_pow+0x226>
 800e646:	2000      	movs	r0, #0
 800e648:	b011      	add	sp, #68	@ 0x44
 800e64a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64e:	f000 bcf3 	b.w	800f038 <__math_oflow>
 800e652:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e6b8 <__ieee754_pow+0x280>
 800e656:	e7e7      	b.n	800e628 <__ieee754_pow+0x1f0>
 800e658:	f1b9 0f00 	cmp.w	r9, #0
 800e65c:	dcf3      	bgt.n	800e646 <__ieee754_pow+0x20e>
 800e65e:	2000      	movs	r0, #0
 800e660:	b011      	add	sp, #68	@ 0x44
 800e662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	f000 bcdf 	b.w	800f028 <__math_uflow>
 800e66a:	4598      	cmp	r8, r3
 800e66c:	d20c      	bcs.n	800e688 <__ieee754_pow+0x250>
 800e66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e672:	2200      	movs	r2, #0
 800e674:	2300      	movs	r3, #0
 800e676:	f7f2 fa39 	bl	8000aec <__aeabi_dcmplt>
 800e67a:	3800      	subs	r0, #0
 800e67c:	bf18      	it	ne
 800e67e:	2001      	movne	r0, #1
 800e680:	f1b9 0f00 	cmp.w	r9, #0
 800e684:	daec      	bge.n	800e660 <__ieee754_pow+0x228>
 800e686:	e7df      	b.n	800e648 <__ieee754_pow+0x210>
 800e688:	4b10      	ldr	r3, [pc, #64]	@ (800e6cc <__ieee754_pow+0x294>)
 800e68a:	4598      	cmp	r8, r3
 800e68c:	f04f 0200 	mov.w	r2, #0
 800e690:	d924      	bls.n	800e6dc <__ieee754_pow+0x2a4>
 800e692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e696:	2300      	movs	r3, #0
 800e698:	f7f2 fa28 	bl	8000aec <__aeabi_dcmplt>
 800e69c:	3800      	subs	r0, #0
 800e69e:	bf18      	it	ne
 800e6a0:	2001      	movne	r0, #1
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	dccf      	bgt.n	800e648 <__ieee754_pow+0x210>
 800e6a8:	e7da      	b.n	800e660 <__ieee754_pow+0x228>
 800e6aa:	bf00      	nop
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	00000000 	.word	0x00000000
 800e6b4:	3ff00000 	.word	0x3ff00000
 800e6b8:	00000000 	.word	0x00000000
 800e6bc:	bff00000 	.word	0xbff00000
 800e6c0:	fff00000 	.word	0xfff00000
 800e6c4:	7ff00000 	.word	0x7ff00000
 800e6c8:	433fffff 	.word	0x433fffff
 800e6cc:	3ff00000 	.word	0x3ff00000
 800e6d0:	3fefffff 	.word	0x3fefffff
 800e6d4:	3fe00000 	.word	0x3fe00000
 800e6d8:	43f00000 	.word	0x43f00000
 800e6dc:	4b5a      	ldr	r3, [pc, #360]	@ (800e848 <__ieee754_pow+0x410>)
 800e6de:	f7f1 fddb 	bl	8000298 <__aeabi_dsub>
 800e6e2:	a351      	add	r3, pc, #324	@ (adr r3, 800e828 <__ieee754_pow+0x3f0>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	f7f1 ff8c 	bl	8000608 <__aeabi_dmul>
 800e6f0:	a34f      	add	r3, pc, #316	@ (adr r3, 800e830 <__ieee754_pow+0x3f8>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7f1 ff83 	bl	8000608 <__aeabi_dmul>
 800e702:	4b52      	ldr	r3, [pc, #328]	@ (800e84c <__ieee754_pow+0x414>)
 800e704:	4682      	mov	sl, r0
 800e706:	468b      	mov	fp, r1
 800e708:	2200      	movs	r2, #0
 800e70a:	4620      	mov	r0, r4
 800e70c:	4629      	mov	r1, r5
 800e70e:	f7f1 ff7b 	bl	8000608 <__aeabi_dmul>
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	a148      	add	r1, pc, #288	@ (adr r1, 800e838 <__ieee754_pow+0x400>)
 800e718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e71c:	f7f1 fdbc 	bl	8000298 <__aeabi_dsub>
 800e720:	4622      	mov	r2, r4
 800e722:	462b      	mov	r3, r5
 800e724:	f7f1 ff70 	bl	8000608 <__aeabi_dmul>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	2000      	movs	r0, #0
 800e72e:	4948      	ldr	r1, [pc, #288]	@ (800e850 <__ieee754_pow+0x418>)
 800e730:	f7f1 fdb2 	bl	8000298 <__aeabi_dsub>
 800e734:	4622      	mov	r2, r4
 800e736:	4680      	mov	r8, r0
 800e738:	4689      	mov	r9, r1
 800e73a:	462b      	mov	r3, r5
 800e73c:	4620      	mov	r0, r4
 800e73e:	4629      	mov	r1, r5
 800e740:	f7f1 ff62 	bl	8000608 <__aeabi_dmul>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f1 ff5c 	bl	8000608 <__aeabi_dmul>
 800e750:	a33b      	add	r3, pc, #236	@ (adr r3, 800e840 <__ieee754_pow+0x408>)
 800e752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e756:	f7f1 ff57 	bl	8000608 <__aeabi_dmul>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4650      	mov	r0, sl
 800e760:	4659      	mov	r1, fp
 800e762:	f7f1 fd99 	bl	8000298 <__aeabi_dsub>
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	4680      	mov	r8, r0
 800e76c:	4689      	mov	r9, r1
 800e76e:	4630      	mov	r0, r6
 800e770:	4639      	mov	r1, r7
 800e772:	f7f1 fd93 	bl	800029c <__adddf3>
 800e776:	2400      	movs	r4, #0
 800e778:	4632      	mov	r2, r6
 800e77a:	463b      	mov	r3, r7
 800e77c:	4620      	mov	r0, r4
 800e77e:	460d      	mov	r5, r1
 800e780:	f7f1 fd8a 	bl	8000298 <__aeabi_dsub>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f1 fd84 	bl	8000298 <__aeabi_dsub>
 800e790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e794:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e798:	2300      	movs	r3, #0
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	460f      	mov	r7, r1
 800e7a4:	4652      	mov	r2, sl
 800e7a6:	465b      	mov	r3, fp
 800e7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7ac:	f7f1 fd74 	bl	8000298 <__aeabi_dsub>
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	f7f1 ff28 	bl	8000608 <__aeabi_dmul>
 800e7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7bc:	4680      	mov	r8, r0
 800e7be:	4689      	mov	r9, r1
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	f7f1 ff20 	bl	8000608 <__aeabi_dmul>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f1 fd64 	bl	800029c <__adddf3>
 800e7d4:	4652      	mov	r2, sl
 800e7d6:	465b      	mov	r3, fp
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7f1 ff12 	bl	8000608 <__aeabi_dmul>
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4680      	mov	r8, r0
 800e7ea:	4689      	mov	r9, r1
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	4639      	mov	r1, r7
 800e7f0:	f7f1 fd54 	bl	800029c <__adddf3>
 800e7f4:	4b17      	ldr	r3, [pc, #92]	@ (800e854 <__ieee754_pow+0x41c>)
 800e7f6:	4299      	cmp	r1, r3
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	468a      	mov	sl, r1
 800e7fe:	468b      	mov	fp, r1
 800e800:	f340 82ef 	ble.w	800ede2 <__ieee754_pow+0x9aa>
 800e804:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e808:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e80c:	4303      	orrs	r3, r0
 800e80e:	f000 81e8 	beq.w	800ebe2 <__ieee754_pow+0x7aa>
 800e812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e816:	2200      	movs	r2, #0
 800e818:	2300      	movs	r3, #0
 800e81a:	f7f2 f967 	bl	8000aec <__aeabi_dcmplt>
 800e81e:	3800      	subs	r0, #0
 800e820:	bf18      	it	ne
 800e822:	2001      	movne	r0, #1
 800e824:	e710      	b.n	800e648 <__ieee754_pow+0x210>
 800e826:	bf00      	nop
 800e828:	60000000 	.word	0x60000000
 800e82c:	3ff71547 	.word	0x3ff71547
 800e830:	f85ddf44 	.word	0xf85ddf44
 800e834:	3e54ae0b 	.word	0x3e54ae0b
 800e838:	55555555 	.word	0x55555555
 800e83c:	3fd55555 	.word	0x3fd55555
 800e840:	652b82fe 	.word	0x652b82fe
 800e844:	3ff71547 	.word	0x3ff71547
 800e848:	3ff00000 	.word	0x3ff00000
 800e84c:	3fd00000 	.word	0x3fd00000
 800e850:	3fe00000 	.word	0x3fe00000
 800e854:	408fffff 	.word	0x408fffff
 800e858:	4bd5      	ldr	r3, [pc, #852]	@ (800ebb0 <__ieee754_pow+0x778>)
 800e85a:	402b      	ands	r3, r5
 800e85c:	2200      	movs	r2, #0
 800e85e:	b92b      	cbnz	r3, 800e86c <__ieee754_pow+0x434>
 800e860:	4bd4      	ldr	r3, [pc, #848]	@ (800ebb4 <__ieee754_pow+0x77c>)
 800e862:	f7f1 fed1 	bl	8000608 <__aeabi_dmul>
 800e866:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e86a:	468b      	mov	fp, r1
 800e86c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e870:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e874:	4413      	add	r3, r2
 800e876:	930a      	str	r3, [sp, #40]	@ 0x28
 800e878:	4bcf      	ldr	r3, [pc, #828]	@ (800ebb8 <__ieee754_pow+0x780>)
 800e87a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e87e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e882:	459b      	cmp	fp, r3
 800e884:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e888:	dd08      	ble.n	800e89c <__ieee754_pow+0x464>
 800e88a:	4bcc      	ldr	r3, [pc, #816]	@ (800ebbc <__ieee754_pow+0x784>)
 800e88c:	459b      	cmp	fp, r3
 800e88e:	f340 81a5 	ble.w	800ebdc <__ieee754_pow+0x7a4>
 800e892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e894:	3301      	adds	r3, #1
 800e896:	930a      	str	r3, [sp, #40]	@ 0x28
 800e898:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e89c:	f04f 0a00 	mov.w	sl, #0
 800e8a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8a6:	4bc6      	ldr	r3, [pc, #792]	@ (800ebc0 <__ieee754_pow+0x788>)
 800e8a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e8ac:	ed93 7b00 	vldr	d7, [r3]
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	ec53 2b17 	vmov	r2, r3, d7
 800e8b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e8ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8be:	f7f1 fceb 	bl	8000298 <__aeabi_dsub>
 800e8c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	460f      	mov	r7, r1
 800e8ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8ce:	f7f1 fce5 	bl	800029c <__adddf3>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	49ba      	ldr	r1, [pc, #744]	@ (800ebc4 <__ieee754_pow+0x78c>)
 800e8da:	f7f1 ffbf 	bl	800085c <__aeabi_ddiv>
 800e8de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	f7f1 fe8d 	bl	8000608 <__aeabi_dmul>
 800e8ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e8f6:	106d      	asrs	r5, r5, #1
 800e8f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e8fc:	f04f 0b00 	mov.w	fp, #0
 800e900:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e904:	4661      	mov	r1, ip
 800e906:	2200      	movs	r2, #0
 800e908:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e90c:	4658      	mov	r0, fp
 800e90e:	46e1      	mov	r9, ip
 800e910:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e914:	4614      	mov	r4, r2
 800e916:	461d      	mov	r5, r3
 800e918:	f7f1 fe76 	bl	8000608 <__aeabi_dmul>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f7f1 fcb8 	bl	8000298 <__aeabi_dsub>
 800e928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e92c:	4606      	mov	r6, r0
 800e92e:	460f      	mov	r7, r1
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	f7f1 fcb0 	bl	8000298 <__aeabi_dsub>
 800e938:	4602      	mov	r2, r0
 800e93a:	460b      	mov	r3, r1
 800e93c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e940:	f7f1 fcaa 	bl	8000298 <__aeabi_dsub>
 800e944:	465a      	mov	r2, fp
 800e946:	464b      	mov	r3, r9
 800e948:	f7f1 fe5e 	bl	8000608 <__aeabi_dmul>
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f1 fca0 	bl	8000298 <__aeabi_dsub>
 800e958:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e95c:	f7f1 fe54 	bl	8000608 <__aeabi_dmul>
 800e960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e964:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e968:	4610      	mov	r0, r2
 800e96a:	4619      	mov	r1, r3
 800e96c:	f7f1 fe4c 	bl	8000608 <__aeabi_dmul>
 800e970:	a37d      	add	r3, pc, #500	@ (adr r3, 800eb68 <__ieee754_pow+0x730>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	f7f1 fe45 	bl	8000608 <__aeabi_dmul>
 800e97e:	a37c      	add	r3, pc, #496	@ (adr r3, 800eb70 <__ieee754_pow+0x738>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fc8a 	bl	800029c <__adddf3>
 800e988:	4622      	mov	r2, r4
 800e98a:	462b      	mov	r3, r5
 800e98c:	f7f1 fe3c 	bl	8000608 <__aeabi_dmul>
 800e990:	a379      	add	r3, pc, #484	@ (adr r3, 800eb78 <__ieee754_pow+0x740>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	f7f1 fc81 	bl	800029c <__adddf3>
 800e99a:	4622      	mov	r2, r4
 800e99c:	462b      	mov	r3, r5
 800e99e:	f7f1 fe33 	bl	8000608 <__aeabi_dmul>
 800e9a2:	a377      	add	r3, pc, #476	@ (adr r3, 800eb80 <__ieee754_pow+0x748>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fc78 	bl	800029c <__adddf3>
 800e9ac:	4622      	mov	r2, r4
 800e9ae:	462b      	mov	r3, r5
 800e9b0:	f7f1 fe2a 	bl	8000608 <__aeabi_dmul>
 800e9b4:	a374      	add	r3, pc, #464	@ (adr r3, 800eb88 <__ieee754_pow+0x750>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fc6f 	bl	800029c <__adddf3>
 800e9be:	4622      	mov	r2, r4
 800e9c0:	462b      	mov	r3, r5
 800e9c2:	f7f1 fe21 	bl	8000608 <__aeabi_dmul>
 800e9c6:	a372      	add	r3, pc, #456	@ (adr r3, 800eb90 <__ieee754_pow+0x758>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fc66 	bl	800029c <__adddf3>
 800e9d0:	4622      	mov	r2, r4
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	462b      	mov	r3, r5
 800e9d8:	4620      	mov	r0, r4
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7f1 fe14 	bl	8000608 <__aeabi_dmul>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f1 fe0e 	bl	8000608 <__aeabi_dmul>
 800e9ec:	465a      	mov	r2, fp
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	460d      	mov	r5, r1
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9f8:	f7f1 fc50 	bl	800029c <__adddf3>
 800e9fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea00:	f7f1 fe02 	bl	8000608 <__aeabi_dmul>
 800ea04:	4622      	mov	r2, r4
 800ea06:	462b      	mov	r3, r5
 800ea08:	f7f1 fc48 	bl	800029c <__adddf3>
 800ea0c:	465a      	mov	r2, fp
 800ea0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea12:	464b      	mov	r3, r9
 800ea14:	4658      	mov	r0, fp
 800ea16:	4649      	mov	r1, r9
 800ea18:	f7f1 fdf6 	bl	8000608 <__aeabi_dmul>
 800ea1c:	4b6a      	ldr	r3, [pc, #424]	@ (800ebc8 <__ieee754_pow+0x790>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	4606      	mov	r6, r0
 800ea22:	460f      	mov	r7, r1
 800ea24:	f7f1 fc3a 	bl	800029c <__adddf3>
 800ea28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea2c:	f7f1 fc36 	bl	800029c <__adddf3>
 800ea30:	46d8      	mov	r8, fp
 800ea32:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ea36:	460d      	mov	r5, r1
 800ea38:	465a      	mov	r2, fp
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	4649      	mov	r1, r9
 800ea40:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ea44:	f7f1 fde0 	bl	8000608 <__aeabi_dmul>
 800ea48:	465c      	mov	r4, fp
 800ea4a:	4680      	mov	r8, r0
 800ea4c:	4689      	mov	r9, r1
 800ea4e:	4b5e      	ldr	r3, [pc, #376]	@ (800ebc8 <__ieee754_pow+0x790>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f7f1 fc1f 	bl	8000298 <__aeabi_dsub>
 800ea5a:	4632      	mov	r2, r6
 800ea5c:	463b      	mov	r3, r7
 800ea5e:	f7f1 fc1b 	bl	8000298 <__aeabi_dsub>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea6a:	f7f1 fc15 	bl	8000298 <__aeabi_dsub>
 800ea6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea72:	f7f1 fdc9 	bl	8000608 <__aeabi_dmul>
 800ea76:	4622      	mov	r2, r4
 800ea78:	4606      	mov	r6, r0
 800ea7a:	460f      	mov	r7, r1
 800ea7c:	462b      	mov	r3, r5
 800ea7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea82:	f7f1 fdc1 	bl	8000608 <__aeabi_dmul>
 800ea86:	4602      	mov	r2, r0
 800ea88:	460b      	mov	r3, r1
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	4639      	mov	r1, r7
 800ea8e:	f7f1 fc05 	bl	800029c <__adddf3>
 800ea92:	4606      	mov	r6, r0
 800ea94:	460f      	mov	r7, r1
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	4649      	mov	r1, r9
 800ea9e:	f7f1 fbfd 	bl	800029c <__adddf3>
 800eaa2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800eaa6:	a33c      	add	r3, pc, #240	@ (adr r3, 800eb98 <__ieee754_pow+0x760>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	4658      	mov	r0, fp
 800eaae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800eab2:	460d      	mov	r5, r1
 800eab4:	f7f1 fda8 	bl	8000608 <__aeabi_dmul>
 800eab8:	465c      	mov	r4, fp
 800eaba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eabe:	4642      	mov	r2, r8
 800eac0:	464b      	mov	r3, r9
 800eac2:	4620      	mov	r0, r4
 800eac4:	4629      	mov	r1, r5
 800eac6:	f7f1 fbe7 	bl	8000298 <__aeabi_dsub>
 800eaca:	4602      	mov	r2, r0
 800eacc:	460b      	mov	r3, r1
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fbe1 	bl	8000298 <__aeabi_dsub>
 800ead6:	a332      	add	r3, pc, #200	@ (adr r3, 800eba0 <__ieee754_pow+0x768>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f7f1 fd94 	bl	8000608 <__aeabi_dmul>
 800eae0:	a331      	add	r3, pc, #196	@ (adr r3, 800eba8 <__ieee754_pow+0x770>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	4606      	mov	r6, r0
 800eae8:	460f      	mov	r7, r1
 800eaea:	4620      	mov	r0, r4
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7f1 fd8b 	bl	8000608 <__aeabi_dmul>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f1 fbcf 	bl	800029c <__adddf3>
 800eafe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb00:	4b32      	ldr	r3, [pc, #200]	@ (800ebcc <__ieee754_pow+0x794>)
 800eb02:	4413      	add	r3, r2
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	f7f1 fbc8 	bl	800029c <__adddf3>
 800eb0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb12:	f7f1 fd0f 	bl	8000534 <__aeabi_i2d>
 800eb16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb18:	4b2d      	ldr	r3, [pc, #180]	@ (800ebd0 <__ieee754_pow+0x798>)
 800eb1a:	4413      	add	r3, r2
 800eb1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb20:	4606      	mov	r6, r0
 800eb22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb26:	460f      	mov	r7, r1
 800eb28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb2c:	f7f1 fbb6 	bl	800029c <__adddf3>
 800eb30:	4642      	mov	r2, r8
 800eb32:	464b      	mov	r3, r9
 800eb34:	f7f1 fbb2 	bl	800029c <__adddf3>
 800eb38:	4632      	mov	r2, r6
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	f7f1 fbae 	bl	800029c <__adddf3>
 800eb40:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800eb44:	4632      	mov	r2, r6
 800eb46:	463b      	mov	r3, r7
 800eb48:	4658      	mov	r0, fp
 800eb4a:	460d      	mov	r5, r1
 800eb4c:	f7f1 fba4 	bl	8000298 <__aeabi_dsub>
 800eb50:	4642      	mov	r2, r8
 800eb52:	464b      	mov	r3, r9
 800eb54:	f7f1 fba0 	bl	8000298 <__aeabi_dsub>
 800eb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb5c:	f7f1 fb9c 	bl	8000298 <__aeabi_dsub>
 800eb60:	465c      	mov	r4, fp
 800eb62:	4602      	mov	r2, r0
 800eb64:	e036      	b.n	800ebd4 <__ieee754_pow+0x79c>
 800eb66:	bf00      	nop
 800eb68:	4a454eef 	.word	0x4a454eef
 800eb6c:	3fca7e28 	.word	0x3fca7e28
 800eb70:	93c9db65 	.word	0x93c9db65
 800eb74:	3fcd864a 	.word	0x3fcd864a
 800eb78:	a91d4101 	.word	0xa91d4101
 800eb7c:	3fd17460 	.word	0x3fd17460
 800eb80:	518f264d 	.word	0x518f264d
 800eb84:	3fd55555 	.word	0x3fd55555
 800eb88:	db6fabff 	.word	0xdb6fabff
 800eb8c:	3fdb6db6 	.word	0x3fdb6db6
 800eb90:	33333303 	.word	0x33333303
 800eb94:	3fe33333 	.word	0x3fe33333
 800eb98:	e0000000 	.word	0xe0000000
 800eb9c:	3feec709 	.word	0x3feec709
 800eba0:	dc3a03fd 	.word	0xdc3a03fd
 800eba4:	3feec709 	.word	0x3feec709
 800eba8:	145b01f5 	.word	0x145b01f5
 800ebac:	be3e2fe0 	.word	0xbe3e2fe0
 800ebb0:	7ff00000 	.word	0x7ff00000
 800ebb4:	43400000 	.word	0x43400000
 800ebb8:	0003988e 	.word	0x0003988e
 800ebbc:	000bb679 	.word	0x000bb679
 800ebc0:	0800f708 	.word	0x0800f708
 800ebc4:	3ff00000 	.word	0x3ff00000
 800ebc8:	40080000 	.word	0x40080000
 800ebcc:	0800f6e8 	.word	0x0800f6e8
 800ebd0:	0800f6f8 	.word	0x0800f6f8
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebda:	e5d7      	b.n	800e78c <__ieee754_pow+0x354>
 800ebdc:	f04f 0a01 	mov.w	sl, #1
 800ebe0:	e65e      	b.n	800e8a0 <__ieee754_pow+0x468>
 800ebe2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800eeb4 <__ieee754_pow+0xa7c>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	4630      	mov	r0, r6
 800ebea:	4639      	mov	r1, r7
 800ebec:	f7f1 fb56 	bl	800029c <__adddf3>
 800ebf0:	4642      	mov	r2, r8
 800ebf2:	e9cd 0100 	strd	r0, r1, [sp]
 800ebf6:	464b      	mov	r3, r9
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	f7f1 fb4c 	bl	8000298 <__aeabi_dsub>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec08:	f7f1 ff8e 	bl	8000b28 <__aeabi_dcmpgt>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	f47f ae00 	bne.w	800e812 <__ieee754_pow+0x3da>
 800ec12:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ec16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ec1a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ec1e:	fa43 fa0a 	asr.w	sl, r3, sl
 800ec22:	44da      	add	sl, fp
 800ec24:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ec28:	489d      	ldr	r0, [pc, #628]	@ (800eea0 <__ieee754_pow+0xa68>)
 800ec2a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ec2e:	4108      	asrs	r0, r1
 800ec30:	ea00 030a 	and.w	r3, r0, sl
 800ec34:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ec38:	f1c1 0114 	rsb	r1, r1, #20
 800ec3c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ec40:	fa4a fa01 	asr.w	sl, sl, r1
 800ec44:	f1bb 0f00 	cmp.w	fp, #0
 800ec48:	4640      	mov	r0, r8
 800ec4a:	4649      	mov	r1, r9
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	bfb8      	it	lt
 800ec52:	f1ca 0a00 	rsblt	sl, sl, #0
 800ec56:	f7f1 fb1f 	bl	8000298 <__aeabi_dsub>
 800ec5a:	4680      	mov	r8, r0
 800ec5c:	4689      	mov	r9, r1
 800ec5e:	4632      	mov	r2, r6
 800ec60:	463b      	mov	r3, r7
 800ec62:	4640      	mov	r0, r8
 800ec64:	4649      	mov	r1, r9
 800ec66:	f7f1 fb19 	bl	800029c <__adddf3>
 800ec6a:	2400      	movs	r4, #0
 800ec6c:	a37c      	add	r3, pc, #496	@ (adr r3, 800ee60 <__ieee754_pow+0xa28>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	4620      	mov	r0, r4
 800ec74:	460d      	mov	r5, r1
 800ec76:	f7f1 fcc7 	bl	8000608 <__aeabi_dmul>
 800ec7a:	4642      	mov	r2, r8
 800ec7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ec80:	464b      	mov	r3, r9
 800ec82:	4620      	mov	r0, r4
 800ec84:	4629      	mov	r1, r5
 800ec86:	f7f1 fb07 	bl	8000298 <__aeabi_dsub>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4630      	mov	r0, r6
 800ec90:	4639      	mov	r1, r7
 800ec92:	f7f1 fb01 	bl	8000298 <__aeabi_dsub>
 800ec96:	a374      	add	r3, pc, #464	@ (adr r3, 800ee68 <__ieee754_pow+0xa30>)
 800ec98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9c:	f7f1 fcb4 	bl	8000608 <__aeabi_dmul>
 800eca0:	a373      	add	r3, pc, #460	@ (adr r3, 800ee70 <__ieee754_pow+0xa38>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	4680      	mov	r8, r0
 800eca8:	4689      	mov	r9, r1
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7f1 fcab 	bl	8000608 <__aeabi_dmul>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	4649      	mov	r1, r9
 800ecba:	f7f1 faef 	bl	800029c <__adddf3>
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecca:	f7f1 fae7 	bl	800029c <__adddf3>
 800ecce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	4689      	mov	r9, r1
 800ecd6:	f7f1 fadf 	bl	8000298 <__aeabi_dsub>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4620      	mov	r0, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 fad9 	bl	8000298 <__aeabi_dsub>
 800ece6:	4642      	mov	r2, r8
 800ece8:	4606      	mov	r6, r0
 800ecea:	460f      	mov	r7, r1
 800ecec:	464b      	mov	r3, r9
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 fc89 	bl	8000608 <__aeabi_dmul>
 800ecf6:	a360      	add	r3, pc, #384	@ (adr r3, 800ee78 <__ieee754_pow+0xa40>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	460d      	mov	r5, r1
 800ed00:	f7f1 fc82 	bl	8000608 <__aeabi_dmul>
 800ed04:	a35e      	add	r3, pc, #376	@ (adr r3, 800ee80 <__ieee754_pow+0xa48>)
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	f7f1 fac5 	bl	8000298 <__aeabi_dsub>
 800ed0e:	4622      	mov	r2, r4
 800ed10:	462b      	mov	r3, r5
 800ed12:	f7f1 fc79 	bl	8000608 <__aeabi_dmul>
 800ed16:	a35c      	add	r3, pc, #368	@ (adr r3, 800ee88 <__ieee754_pow+0xa50>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	f7f1 fabe 	bl	800029c <__adddf3>
 800ed20:	4622      	mov	r2, r4
 800ed22:	462b      	mov	r3, r5
 800ed24:	f7f1 fc70 	bl	8000608 <__aeabi_dmul>
 800ed28:	a359      	add	r3, pc, #356	@ (adr r3, 800ee90 <__ieee754_pow+0xa58>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	f7f1 fab3 	bl	8000298 <__aeabi_dsub>
 800ed32:	4622      	mov	r2, r4
 800ed34:	462b      	mov	r3, r5
 800ed36:	f7f1 fc67 	bl	8000608 <__aeabi_dmul>
 800ed3a:	a357      	add	r3, pc, #348	@ (adr r3, 800ee98 <__ieee754_pow+0xa60>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	f7f1 faac 	bl	800029c <__adddf3>
 800ed44:	4622      	mov	r2, r4
 800ed46:	462b      	mov	r3, r5
 800ed48:	f7f1 fc5e 	bl	8000608 <__aeabi_dmul>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4640      	mov	r0, r8
 800ed52:	4649      	mov	r1, r9
 800ed54:	f7f1 faa0 	bl	8000298 <__aeabi_dsub>
 800ed58:	4604      	mov	r4, r0
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4640      	mov	r0, r8
 800ed62:	4649      	mov	r1, r9
 800ed64:	f7f1 fc50 	bl	8000608 <__aeabi_dmul>
 800ed68:	2200      	movs	r2, #0
 800ed6a:	e9cd 0100 	strd	r0, r1, [sp]
 800ed6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ed72:	4620      	mov	r0, r4
 800ed74:	4629      	mov	r1, r5
 800ed76:	f7f1 fa8f 	bl	8000298 <__aeabi_dsub>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed82:	f7f1 fd6b 	bl	800085c <__aeabi_ddiv>
 800ed86:	4632      	mov	r2, r6
 800ed88:	4604      	mov	r4, r0
 800ed8a:	460d      	mov	r5, r1
 800ed8c:	463b      	mov	r3, r7
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 fc39 	bl	8000608 <__aeabi_dmul>
 800ed96:	4632      	mov	r2, r6
 800ed98:	463b      	mov	r3, r7
 800ed9a:	f7f1 fa7f 	bl	800029c <__adddf3>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	f7f1 fa77 	bl	8000298 <__aeabi_dsub>
 800edaa:	4642      	mov	r2, r8
 800edac:	464b      	mov	r3, r9
 800edae:	f7f1 fa73 	bl	8000298 <__aeabi_dsub>
 800edb2:	460b      	mov	r3, r1
 800edb4:	4602      	mov	r2, r0
 800edb6:	493b      	ldr	r1, [pc, #236]	@ (800eea4 <__ieee754_pow+0xa6c>)
 800edb8:	2000      	movs	r0, #0
 800edba:	f7f1 fa6d 	bl	8000298 <__aeabi_dsub>
 800edbe:	ec41 0b10 	vmov	d0, r0, r1
 800edc2:	ee10 3a90 	vmov	r3, s1
 800edc6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800edca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800edce:	da30      	bge.n	800ee32 <__ieee754_pow+0x9fa>
 800edd0:	4650      	mov	r0, sl
 800edd2:	f000 f87d 	bl	800eed0 <scalbn>
 800edd6:	ec51 0b10 	vmov	r0, r1, d0
 800edda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edde:	f7ff bbd2 	b.w	800e586 <__ieee754_pow+0x14e>
 800ede2:	4c31      	ldr	r4, [pc, #196]	@ (800eea8 <__ieee754_pow+0xa70>)
 800ede4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ede8:	42a3      	cmp	r3, r4
 800edea:	d91a      	bls.n	800ee22 <__ieee754_pow+0x9ea>
 800edec:	4b2f      	ldr	r3, [pc, #188]	@ (800eeac <__ieee754_pow+0xa74>)
 800edee:	440b      	add	r3, r1
 800edf0:	4303      	orrs	r3, r0
 800edf2:	d009      	beq.n	800ee08 <__ieee754_pow+0x9d0>
 800edf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edf8:	2200      	movs	r2, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	f7f1 fe76 	bl	8000aec <__aeabi_dcmplt>
 800ee00:	3800      	subs	r0, #0
 800ee02:	bf18      	it	ne
 800ee04:	2001      	movne	r0, #1
 800ee06:	e42b      	b.n	800e660 <__ieee754_pow+0x228>
 800ee08:	4642      	mov	r2, r8
 800ee0a:	464b      	mov	r3, r9
 800ee0c:	f7f1 fa44 	bl	8000298 <__aeabi_dsub>
 800ee10:	4632      	mov	r2, r6
 800ee12:	463b      	mov	r3, r7
 800ee14:	f7f1 fe7e 	bl	8000b14 <__aeabi_dcmpge>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d1eb      	bne.n	800edf4 <__ieee754_pow+0x9bc>
 800ee1c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800eebc <__ieee754_pow+0xa84>
 800ee20:	e6f7      	b.n	800ec12 <__ieee754_pow+0x7da>
 800ee22:	469a      	mov	sl, r3
 800ee24:	4b22      	ldr	r3, [pc, #136]	@ (800eeb0 <__ieee754_pow+0xa78>)
 800ee26:	459a      	cmp	sl, r3
 800ee28:	f63f aef3 	bhi.w	800ec12 <__ieee754_pow+0x7da>
 800ee2c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ee30:	e715      	b.n	800ec5e <__ieee754_pow+0x826>
 800ee32:	ec51 0b10 	vmov	r0, r1, d0
 800ee36:	4619      	mov	r1, r3
 800ee38:	e7cf      	b.n	800edda <__ieee754_pow+0x9a2>
 800ee3a:	491a      	ldr	r1, [pc, #104]	@ (800eea4 <__ieee754_pow+0xa6c>)
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f7ff bb18 	b.w	800e472 <__ieee754_pow+0x3a>
 800ee42:	2000      	movs	r0, #0
 800ee44:	2100      	movs	r1, #0
 800ee46:	f7ff bb14 	b.w	800e472 <__ieee754_pow+0x3a>
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	4639      	mov	r1, r7
 800ee4e:	f7ff bb10 	b.w	800e472 <__ieee754_pow+0x3a>
 800ee52:	460c      	mov	r4, r1
 800ee54:	f7ff bb5e 	b.w	800e514 <__ieee754_pow+0xdc>
 800ee58:	2400      	movs	r4, #0
 800ee5a:	f7ff bb49 	b.w	800e4f0 <__ieee754_pow+0xb8>
 800ee5e:	bf00      	nop
 800ee60:	00000000 	.word	0x00000000
 800ee64:	3fe62e43 	.word	0x3fe62e43
 800ee68:	fefa39ef 	.word	0xfefa39ef
 800ee6c:	3fe62e42 	.word	0x3fe62e42
 800ee70:	0ca86c39 	.word	0x0ca86c39
 800ee74:	be205c61 	.word	0xbe205c61
 800ee78:	72bea4d0 	.word	0x72bea4d0
 800ee7c:	3e663769 	.word	0x3e663769
 800ee80:	c5d26bf1 	.word	0xc5d26bf1
 800ee84:	3ebbbd41 	.word	0x3ebbbd41
 800ee88:	af25de2c 	.word	0xaf25de2c
 800ee8c:	3f11566a 	.word	0x3f11566a
 800ee90:	16bebd93 	.word	0x16bebd93
 800ee94:	3f66c16c 	.word	0x3f66c16c
 800ee98:	5555553e 	.word	0x5555553e
 800ee9c:	3fc55555 	.word	0x3fc55555
 800eea0:	fff00000 	.word	0xfff00000
 800eea4:	3ff00000 	.word	0x3ff00000
 800eea8:	4090cbff 	.word	0x4090cbff
 800eeac:	3f6f3400 	.word	0x3f6f3400
 800eeb0:	3fe00000 	.word	0x3fe00000
 800eeb4:	652b82fe 	.word	0x652b82fe
 800eeb8:	3c971547 	.word	0x3c971547
 800eebc:	4090cc00 	.word	0x4090cc00

0800eec0 <fabs>:
 800eec0:	ec51 0b10 	vmov	r0, r1, d0
 800eec4:	4602      	mov	r2, r0
 800eec6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eeca:	ec43 2b10 	vmov	d0, r2, r3
 800eece:	4770      	bx	lr

0800eed0 <scalbn>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	ec55 4b10 	vmov	r4, r5, d0
 800eed6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eeda:	4606      	mov	r6, r0
 800eedc:	462b      	mov	r3, r5
 800eede:	b991      	cbnz	r1, 800ef06 <scalbn+0x36>
 800eee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800eee4:	4323      	orrs	r3, r4
 800eee6:	d03d      	beq.n	800ef64 <scalbn+0x94>
 800eee8:	4b35      	ldr	r3, [pc, #212]	@ (800efc0 <scalbn+0xf0>)
 800eeea:	4620      	mov	r0, r4
 800eeec:	4629      	mov	r1, r5
 800eeee:	2200      	movs	r2, #0
 800eef0:	f7f1 fb8a 	bl	8000608 <__aeabi_dmul>
 800eef4:	4b33      	ldr	r3, [pc, #204]	@ (800efc4 <scalbn+0xf4>)
 800eef6:	429e      	cmp	r6, r3
 800eef8:	4604      	mov	r4, r0
 800eefa:	460d      	mov	r5, r1
 800eefc:	da0f      	bge.n	800ef1e <scalbn+0x4e>
 800eefe:	a328      	add	r3, pc, #160	@ (adr r3, 800efa0 <scalbn+0xd0>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	e01e      	b.n	800ef44 <scalbn+0x74>
 800ef06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	d10b      	bne.n	800ef26 <scalbn+0x56>
 800ef0e:	4622      	mov	r2, r4
 800ef10:	4620      	mov	r0, r4
 800ef12:	4629      	mov	r1, r5
 800ef14:	f7f1 f9c2 	bl	800029c <__adddf3>
 800ef18:	4604      	mov	r4, r0
 800ef1a:	460d      	mov	r5, r1
 800ef1c:	e022      	b.n	800ef64 <scalbn+0x94>
 800ef1e:	460b      	mov	r3, r1
 800ef20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ef24:	3936      	subs	r1, #54	@ 0x36
 800ef26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ef2a:	4296      	cmp	r6, r2
 800ef2c:	dd0d      	ble.n	800ef4a <scalbn+0x7a>
 800ef2e:	2d00      	cmp	r5, #0
 800ef30:	a11d      	add	r1, pc, #116	@ (adr r1, 800efa8 <scalbn+0xd8>)
 800ef32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef36:	da02      	bge.n	800ef3e <scalbn+0x6e>
 800ef38:	a11d      	add	r1, pc, #116	@ (adr r1, 800efb0 <scalbn+0xe0>)
 800ef3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef3e:	a31a      	add	r3, pc, #104	@ (adr r3, 800efa8 <scalbn+0xd8>)
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f7f1 fb60 	bl	8000608 <__aeabi_dmul>
 800ef48:	e7e6      	b.n	800ef18 <scalbn+0x48>
 800ef4a:	1872      	adds	r2, r6, r1
 800ef4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ef50:	428a      	cmp	r2, r1
 800ef52:	dcec      	bgt.n	800ef2e <scalbn+0x5e>
 800ef54:	2a00      	cmp	r2, #0
 800ef56:	dd08      	ble.n	800ef6a <scalbn+0x9a>
 800ef58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ef60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef64:	ec45 4b10 	vmov	d0, r4, r5
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
 800ef6a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ef6e:	da08      	bge.n	800ef82 <scalbn+0xb2>
 800ef70:	2d00      	cmp	r5, #0
 800ef72:	a10b      	add	r1, pc, #44	@ (adr r1, 800efa0 <scalbn+0xd0>)
 800ef74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef78:	dac1      	bge.n	800eefe <scalbn+0x2e>
 800ef7a:	a10f      	add	r1, pc, #60	@ (adr r1, 800efb8 <scalbn+0xe8>)
 800ef7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef80:	e7bd      	b.n	800eefe <scalbn+0x2e>
 800ef82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef86:	3236      	adds	r2, #54	@ 0x36
 800ef88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ef8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef90:	4620      	mov	r0, r4
 800ef92:	4b0d      	ldr	r3, [pc, #52]	@ (800efc8 <scalbn+0xf8>)
 800ef94:	4629      	mov	r1, r5
 800ef96:	2200      	movs	r2, #0
 800ef98:	e7d4      	b.n	800ef44 <scalbn+0x74>
 800ef9a:	bf00      	nop
 800ef9c:	f3af 8000 	nop.w
 800efa0:	c2f8f359 	.word	0xc2f8f359
 800efa4:	01a56e1f 	.word	0x01a56e1f
 800efa8:	8800759c 	.word	0x8800759c
 800efac:	7e37e43c 	.word	0x7e37e43c
 800efb0:	8800759c 	.word	0x8800759c
 800efb4:	fe37e43c 	.word	0xfe37e43c
 800efb8:	c2f8f359 	.word	0xc2f8f359
 800efbc:	81a56e1f 	.word	0x81a56e1f
 800efc0:	43500000 	.word	0x43500000
 800efc4:	ffff3cb0 	.word	0xffff3cb0
 800efc8:	3c900000 	.word	0x3c900000

0800efcc <with_errno>:
 800efcc:	b510      	push	{r4, lr}
 800efce:	ed2d 8b02 	vpush	{d8}
 800efd2:	eeb0 8a40 	vmov.f32	s16, s0
 800efd6:	eef0 8a60 	vmov.f32	s17, s1
 800efda:	4604      	mov	r4, r0
 800efdc:	f7fb fe2c 	bl	800ac38 <__errno>
 800efe0:	eeb0 0a48 	vmov.f32	s0, s16
 800efe4:	eef0 0a68 	vmov.f32	s1, s17
 800efe8:	ecbd 8b02 	vpop	{d8}
 800efec:	6004      	str	r4, [r0, #0]
 800efee:	bd10      	pop	{r4, pc}

0800eff0 <xflow>:
 800eff0:	4603      	mov	r3, r0
 800eff2:	b507      	push	{r0, r1, r2, lr}
 800eff4:	ec51 0b10 	vmov	r0, r1, d0
 800eff8:	b183      	cbz	r3, 800f01c <xflow+0x2c>
 800effa:	4602      	mov	r2, r0
 800effc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f000:	e9cd 2300 	strd	r2, r3, [sp]
 800f004:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f008:	f7f1 fafe 	bl	8000608 <__aeabi_dmul>
 800f00c:	ec41 0b10 	vmov	d0, r0, r1
 800f010:	2022      	movs	r0, #34	@ 0x22
 800f012:	b003      	add	sp, #12
 800f014:	f85d eb04 	ldr.w	lr, [sp], #4
 800f018:	f7ff bfd8 	b.w	800efcc <with_errno>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	e7ee      	b.n	800f000 <xflow+0x10>
 800f022:	0000      	movs	r0, r0
 800f024:	0000      	movs	r0, r0
	...

0800f028 <__math_uflow>:
 800f028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f030 <__math_uflow+0x8>
 800f02c:	f7ff bfe0 	b.w	800eff0 <xflow>
 800f030:	00000000 	.word	0x00000000
 800f034:	10000000 	.word	0x10000000

0800f038 <__math_oflow>:
 800f038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f040 <__math_oflow+0x8>
 800f03c:	f7ff bfd8 	b.w	800eff0 <xflow>
 800f040:	00000000 	.word	0x00000000
 800f044:	70000000 	.word	0x70000000

0800f048 <__ieee754_sqrt>:
 800f048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04c:	4a68      	ldr	r2, [pc, #416]	@ (800f1f0 <__ieee754_sqrt+0x1a8>)
 800f04e:	ec55 4b10 	vmov	r4, r5, d0
 800f052:	43aa      	bics	r2, r5
 800f054:	462b      	mov	r3, r5
 800f056:	4621      	mov	r1, r4
 800f058:	d110      	bne.n	800f07c <__ieee754_sqrt+0x34>
 800f05a:	4622      	mov	r2, r4
 800f05c:	4620      	mov	r0, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	f7f1 fad2 	bl	8000608 <__aeabi_dmul>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	4620      	mov	r0, r4
 800f06a:	4629      	mov	r1, r5
 800f06c:	f7f1 f916 	bl	800029c <__adddf3>
 800f070:	4604      	mov	r4, r0
 800f072:	460d      	mov	r5, r1
 800f074:	ec45 4b10 	vmov	d0, r4, r5
 800f078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	2d00      	cmp	r5, #0
 800f07e:	dc0e      	bgt.n	800f09e <__ieee754_sqrt+0x56>
 800f080:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f084:	4322      	orrs	r2, r4
 800f086:	d0f5      	beq.n	800f074 <__ieee754_sqrt+0x2c>
 800f088:	b19d      	cbz	r5, 800f0b2 <__ieee754_sqrt+0x6a>
 800f08a:	4622      	mov	r2, r4
 800f08c:	4620      	mov	r0, r4
 800f08e:	4629      	mov	r1, r5
 800f090:	f7f1 f902 	bl	8000298 <__aeabi_dsub>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	f7f1 fbe0 	bl	800085c <__aeabi_ddiv>
 800f09c:	e7e8      	b.n	800f070 <__ieee754_sqrt+0x28>
 800f09e:	152a      	asrs	r2, r5, #20
 800f0a0:	d115      	bne.n	800f0ce <__ieee754_sqrt+0x86>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	e009      	b.n	800f0ba <__ieee754_sqrt+0x72>
 800f0a6:	0acb      	lsrs	r3, r1, #11
 800f0a8:	3a15      	subs	r2, #21
 800f0aa:	0549      	lsls	r1, r1, #21
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d0fa      	beq.n	800f0a6 <__ieee754_sqrt+0x5e>
 800f0b0:	e7f7      	b.n	800f0a2 <__ieee754_sqrt+0x5a>
 800f0b2:	462a      	mov	r2, r5
 800f0b4:	e7fa      	b.n	800f0ac <__ieee754_sqrt+0x64>
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	02dc      	lsls	r4, r3, #11
 800f0bc:	d5fb      	bpl.n	800f0b6 <__ieee754_sqrt+0x6e>
 800f0be:	1e44      	subs	r4, r0, #1
 800f0c0:	1b12      	subs	r2, r2, r4
 800f0c2:	f1c0 0420 	rsb	r4, r0, #32
 800f0c6:	fa21 f404 	lsr.w	r4, r1, r4
 800f0ca:	4323      	orrs	r3, r4
 800f0cc:	4081      	lsls	r1, r0
 800f0ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f0d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f0da:	07d2      	lsls	r2, r2, #31
 800f0dc:	bf5c      	itt	pl
 800f0de:	005b      	lslpl	r3, r3, #1
 800f0e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f0e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0e8:	bf58      	it	pl
 800f0ea:	0049      	lslpl	r1, r1, #1
 800f0ec:	2600      	movs	r6, #0
 800f0ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f0f2:	106d      	asrs	r5, r5, #1
 800f0f4:	0049      	lsls	r1, r1, #1
 800f0f6:	2016      	movs	r0, #22
 800f0f8:	4632      	mov	r2, r6
 800f0fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f0fe:	1917      	adds	r7, r2, r4
 800f100:	429f      	cmp	r7, r3
 800f102:	bfde      	ittt	le
 800f104:	193a      	addle	r2, r7, r4
 800f106:	1bdb      	suble	r3, r3, r7
 800f108:	1936      	addle	r6, r6, r4
 800f10a:	0fcf      	lsrs	r7, r1, #31
 800f10c:	3801      	subs	r0, #1
 800f10e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f112:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f116:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f11a:	d1f0      	bne.n	800f0fe <__ieee754_sqrt+0xb6>
 800f11c:	4604      	mov	r4, r0
 800f11e:	2720      	movs	r7, #32
 800f120:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f124:	429a      	cmp	r2, r3
 800f126:	eb00 0e0c 	add.w	lr, r0, ip
 800f12a:	db02      	blt.n	800f132 <__ieee754_sqrt+0xea>
 800f12c:	d113      	bne.n	800f156 <__ieee754_sqrt+0x10e>
 800f12e:	458e      	cmp	lr, r1
 800f130:	d811      	bhi.n	800f156 <__ieee754_sqrt+0x10e>
 800f132:	f1be 0f00 	cmp.w	lr, #0
 800f136:	eb0e 000c 	add.w	r0, lr, ip
 800f13a:	da42      	bge.n	800f1c2 <__ieee754_sqrt+0x17a>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	db40      	blt.n	800f1c2 <__ieee754_sqrt+0x17a>
 800f140:	f102 0801 	add.w	r8, r2, #1
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	458e      	cmp	lr, r1
 800f148:	bf88      	it	hi
 800f14a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f14e:	eba1 010e 	sub.w	r1, r1, lr
 800f152:	4464      	add	r4, ip
 800f154:	4642      	mov	r2, r8
 800f156:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f15a:	3f01      	subs	r7, #1
 800f15c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f160:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f164:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f168:	d1dc      	bne.n	800f124 <__ieee754_sqrt+0xdc>
 800f16a:	4319      	orrs	r1, r3
 800f16c:	d01b      	beq.n	800f1a6 <__ieee754_sqrt+0x15e>
 800f16e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f1f4 <__ieee754_sqrt+0x1ac>
 800f172:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f1f8 <__ieee754_sqrt+0x1b0>
 800f176:	e9da 0100 	ldrd	r0, r1, [sl]
 800f17a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f17e:	f7f1 f88b 	bl	8000298 <__aeabi_dsub>
 800f182:	e9da 8900 	ldrd	r8, r9, [sl]
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	4640      	mov	r0, r8
 800f18c:	4649      	mov	r1, r9
 800f18e:	f7f1 fcb7 	bl	8000b00 <__aeabi_dcmple>
 800f192:	b140      	cbz	r0, 800f1a6 <__ieee754_sqrt+0x15e>
 800f194:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f198:	e9da 0100 	ldrd	r0, r1, [sl]
 800f19c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1a0:	d111      	bne.n	800f1c6 <__ieee754_sqrt+0x17e>
 800f1a2:	3601      	adds	r6, #1
 800f1a4:	463c      	mov	r4, r7
 800f1a6:	1072      	asrs	r2, r6, #1
 800f1a8:	0863      	lsrs	r3, r4, #1
 800f1aa:	07f1      	lsls	r1, r6, #31
 800f1ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f1b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f1b4:	bf48      	it	mi
 800f1b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f1ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f1be:	4618      	mov	r0, r3
 800f1c0:	e756      	b.n	800f070 <__ieee754_sqrt+0x28>
 800f1c2:	4690      	mov	r8, r2
 800f1c4:	e7be      	b.n	800f144 <__ieee754_sqrt+0xfc>
 800f1c6:	f7f1 f869 	bl	800029c <__adddf3>
 800f1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	4649      	mov	r1, r9
 800f1d6:	f7f1 fc89 	bl	8000aec <__aeabi_dcmplt>
 800f1da:	b120      	cbz	r0, 800f1e6 <__ieee754_sqrt+0x19e>
 800f1dc:	1ca0      	adds	r0, r4, #2
 800f1de:	bf08      	it	eq
 800f1e0:	3601      	addeq	r6, #1
 800f1e2:	3402      	adds	r4, #2
 800f1e4:	e7df      	b.n	800f1a6 <__ieee754_sqrt+0x15e>
 800f1e6:	1c63      	adds	r3, r4, #1
 800f1e8:	f023 0401 	bic.w	r4, r3, #1
 800f1ec:	e7db      	b.n	800f1a6 <__ieee754_sqrt+0x15e>
 800f1ee:	bf00      	nop
 800f1f0:	7ff00000 	.word	0x7ff00000
 800f1f4:	200002d0 	.word	0x200002d0
 800f1f8:	200002c8 	.word	0x200002c8

0800f1fc <_init>:
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	bf00      	nop
 800f200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f202:	bc08      	pop	{r3}
 800f204:	469e      	mov	lr, r3
 800f206:	4770      	bx	lr

0800f208 <_fini>:
 800f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20a:	bf00      	nop
 800f20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f20e:	bc08      	pop	{r3}
 800f210:	469e      	mov	lr, r3
 800f212:	4770      	bx	lr
