
FREQUENCIMETRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08008968  08008968  00009968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e00  08008e00  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e00  08008e00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e08  08008e08  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e08  08008e08  00009e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e0c  08008e0c  00009e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008e10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d8  08008fe4  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08008fe4  0000a40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c462  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc9  00000000  00000000  00016666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00018430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a44  00000000  00000000  00019158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175bb  00000000  00000000  00019b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f786  00000000  00000000  00031157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090631  00000000  00000000  000408dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0f0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  000d0f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d5bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800894c 	.word	0x0800894c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800894c 	.word	0x0800894c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <lcd_send_nibble>:
#include "string.h"

extern I2C_HandleTypeDef hi2c1;

void lcd_send_nibble(char nibble)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t dado_t[2];
	dado_t[0]=(nibble | 0x0C);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f043 030c 	orr.w	r3, r3, #12
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	dado_t[1]=(nibble | 0x08);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,END_I2C<<1,dado_t, 2, 100);
 8001012:	f107 020c 	add.w	r2, r7, #12
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	214e      	movs	r1, #78	@ 0x4e
 800101e:	4803      	ldr	r0, [pc, #12]	@ (800102c <lcd_send_nibble+0x38>)
 8001020:	f001 fa20 	bl	8002464 <HAL_I2C_Master_Transmit>
	
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001f4 	.word	0x200001f4

08001030 <lcd_send_cmd>:
void lcd_send_cmd (char cmd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]

	uint8_t dado_t[4];
	char dado_l, dado_u;
	dado_u=cmd & 0xF0;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f023 030f 	bic.w	r3, r3, #15
 8001040:	73fb      	strb	r3, [r7, #15]
	dado_l=(cmd<<4) & 0xF0;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	73bb      	strb	r3, [r7, #14]
	dado_t[0]=dado_u | 0x0C;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 030c 	orr.w	r3, r3, #12
 800104e:	b2db      	uxtb	r3, r3
 8001050:	723b      	strb	r3, [r7, #8]
	dado_t[1]=dado_u | 0x08;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	727b      	strb	r3, [r7, #9]
	dado_t[2]=dado_l | 0x0C;
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	f043 030c 	orr.w	r3, r3, #12
 8001062:	b2db      	uxtb	r3, r3
 8001064:	72bb      	strb	r3, [r7, #10]
	dado_t[3]=dado_l | 0x08;
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	b2db      	uxtb	r3, r3
 800106e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, END_I2C<<1,dado_t, 4, 100);
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2304      	movs	r3, #4
 800107a:	214e      	movs	r1, #78	@ 0x4e
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <lcd_send_cmd+0x5c>)
 800107e:	f001 f9f1 	bl	8002464 <HAL_I2C_Master_Transmit>

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f4 	.word	0x200001f4

08001090 <lcd_send_dado>:
void lcd_send_dado (char dado)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]

	uint8_t dado_t[4];
	char dado_l, dado_u;
	dado_u=dado & 0xF0;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	73fb      	strb	r3, [r7, #15]
	dado_l=(dado<<4) & 0xF0;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	73bb      	strb	r3, [r7, #14]
	dado_t[0]=dado_u | 0x0D;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f043 030d 	orr.w	r3, r3, #13
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	dado_t[1]=dado_u | 0x09;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f043 0309 	orr.w	r3, r3, #9
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	dado_t[2]=dado_l | 0x0D;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 030d 	orr.w	r3, r3, #13
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72bb      	strb	r3, [r7, #10]
	dado_t[3]=dado_l | 0x09;
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f043 0309 	orr.w	r3, r3, #9
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, END_I2C<<1,dado_t, 4, 100);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	2364      	movs	r3, #100	@ 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2304      	movs	r3, #4
 80010da:	214e      	movs	r1, #78	@ 0x4e
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <lcd_send_dado+0x5c>)
 80010de:	f001 f9c1 	bl	8002464 <HAL_I2C_Master_Transmit>
	
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001f4 	.word	0x200001f4

080010f0 <lcd_init>:
void lcd_init (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 80010f4:	2032      	movs	r0, #50	@ 0x32
 80010f6:	f000 fdb7 	bl	8001c68 <HAL_Delay>
	  lcd_send_nibble(0x30);
 80010fa:	2030      	movs	r0, #48	@ 0x30
 80010fc:	f7ff ff7a 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f000 fdb1 	bl	8001c68 <HAL_Delay>
	  lcd_send_nibble(0x30);
 8001106:	2030      	movs	r0, #48	@ 0x30
 8001108:	f7ff ff74 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fdab 	bl	8001c68 <HAL_Delay>
	  lcd_send_nibble(0x30);
 8001112:	2030      	movs	r0, #48	@ 0x30
 8001114:	f7ff ff6e 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fda5 	bl	8001c68 <HAL_Delay>
	  lcd_send_nibble(0x20);
 800111e:	2020      	movs	r0, #32
 8001120:	f7ff ff68 	bl	8000ff4 <lcd_send_nibble>
	  HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fd9f 	bl	8001c68 <HAL_Delay>

	  lcd_send_cmd(0x28);
 800112a:	2028      	movs	r0, #40	@ 0x28
 800112c:	f7ff ff80 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fd99 	bl	8001c68 <HAL_Delay>
	  lcd_send_cmd(0x06);
 8001136:	2006      	movs	r0, #6
 8001138:	f7ff ff7a 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fd93 	bl	8001c68 <HAL_Delay>
	  lcd_send_cmd(0x0C);
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff ff74 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 fd8d 	bl	8001c68 <HAL_Delay>
	  lcd_send_cmd(0x01);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff ff6e 	bl	8001030 <lcd_send_cmd>
	  HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fd87 	bl	8001c68 <HAL_Delay>

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <lcd_send_string>:

void lcd_send_string(char *str)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	while(*str) lcd_send_dado(*str++);
 8001166:	e006      	b.n	8001176 <lcd_send_string+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff8d 	bl	8001090 <lcd_send_dado>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f4      	bne.n	8001168 <lcd_send_string+0xa>
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lcd_clear>:


void lcd_clear(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff4f 	bl	8001030 <lcd_send_cmd>
    HAL_Delay(2);
 8001192:	2002      	movs	r0, #2
 8001194:	f000 fd68 	bl	8001c68 <HAL_Delay>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	0000      	movs	r0, r0
	...

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f000 fcee 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f948 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f000 fa4c 	bl	8001648 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011b0:	f000 f9da 	bl	8001568 <MX_TIM2_Init>
  MX_I2C1_Init();
 80011b4:	f000 f9aa 	bl	800150c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 80011b8:	f7ff ff9a 	bl	80010f0 <lcd_init>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	488e      	ldr	r0, [pc, #568]	@ (80013f8 <main+0x258>)
 80011c0:	f002 f996 	bl	80034f0 <HAL_TIM_IC_Start_IT>
	CLOCK = HAL_RCC_GetSysClockFreq();
 80011c4:	f002 f806 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a8c      	ldr	r2, [pc, #560]	@ (80013fc <main+0x25c>)
 80011cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		lcd_send_cmd(Linha_1);
 80011ce:	2080      	movs	r0, #128	@ 0x80
 80011d0:	f7ff ff2e 	bl	8001030 <lcd_send_cmd>
		lcd_send_string("Freq =");
 80011d4:	488a      	ldr	r0, [pc, #552]	@ (8001400 <main+0x260>)
 80011d6:	f7ff ffc2 	bl	800115e <lcd_send_string>

		if (frequencia < 1000) {
 80011da:	4b8a      	ldr	r3, [pc, #552]	@ (8001404 <main+0x264>)
 80011dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <main+0x268>)
 80011e6:	f7ff fc81 	bl	8000aec <__aeabi_dcmplt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d012      	beq.n	8001216 <main+0x76>
			sprintf(valor_string, "%.1f", frequencia);
 80011f0:	4b84      	ldr	r3, [pc, #528]	@ (8001404 <main+0x264>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	4985      	ldr	r1, [pc, #532]	@ (800140c <main+0x26c>)
 80011f8:	4885      	ldr	r0, [pc, #532]	@ (8001410 <main+0x270>)
 80011fa:	f003 ff6d 	bl	80050d8 <siprintf>
			lcd_send_cmd(Linha_1 + 7);
 80011fe:	2087      	movs	r0, #135	@ 0x87
 8001200:	f7ff ff16 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(valor_string);
 8001204:	4882      	ldr	r0, [pc, #520]	@ (8001410 <main+0x270>)
 8001206:	f7ff ffaa 	bl	800115e <lcd_send_string>
			lcd_send_cmd(Linha_1 + 12);
 800120a:	208c      	movs	r0, #140	@ 0x8c
 800120c:	f7ff ff10 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(" [Hz]");
 8001210:	4880      	ldr	r0, [pc, #512]	@ (8001414 <main+0x274>)
 8001212:	f7ff ffa4 	bl	800115e <lcd_send_string>
		}

		if ((frequencia >= 1000) & (frequencia <= 9999)) {
 8001216:	4b7b      	ldr	r3, [pc, #492]	@ (8001404 <main+0x264>)
 8001218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800121c:	2301      	movs	r3, #1
 800121e:	461c      	mov	r4, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b78      	ldr	r3, [pc, #480]	@ (8001408 <main+0x268>)
 8001226:	f7ff fc75 	bl	8000b14 <__aeabi_dcmpge>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <main+0x94>
 8001230:	2300      	movs	r3, #0
 8001232:	461c      	mov	r4, r3
 8001234:	b2e4      	uxtb	r4, r4
 8001236:	4b73      	ldr	r3, [pc, #460]	@ (8001404 <main+0x264>)
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	2301      	movs	r3, #1
 800123e:	461d      	mov	r5, r3
 8001240:	a365      	add	r3, pc, #404	@ (adr r3, 80013d8 <main+0x238>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff fc5b 	bl	8000b00 <__aeabi_dcmple>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <main+0xb4>
 8001250:	2300      	movs	r3, #0
 8001252:	461d      	mov	r5, r3
 8001254:	b2eb      	uxtb	r3, r5
 8001256:	4023      	ands	r3, r4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d019      	beq.n	8001292 <main+0xf2>
			sprintf(valor_string, "%.3f", frequencia / 1000);
 800125e:	4b69      	ldr	r3, [pc, #420]	@ (8001404 <main+0x264>)
 8001260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <main+0x268>)
 800126a:	f7ff faf7 	bl	800085c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4969      	ldr	r1, [pc, #420]	@ (8001418 <main+0x278>)
 8001274:	4866      	ldr	r0, [pc, #408]	@ (8001410 <main+0x270>)
 8001276:	f003 ff2f 	bl	80050d8 <siprintf>
			lcd_send_cmd(Linha_1 + 7);
 800127a:	2087      	movs	r0, #135	@ 0x87
 800127c:	f7ff fed8 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(valor_string);
 8001280:	4863      	ldr	r0, [pc, #396]	@ (8001410 <main+0x270>)
 8001282:	f7ff ff6c 	bl	800115e <lcd_send_string>
			lcd_send_cmd(Linha_1 + 12);
 8001286:	208c      	movs	r0, #140	@ 0x8c
 8001288:	f7ff fed2 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(" [KHz]");
 800128c:	4863      	ldr	r0, [pc, #396]	@ (800141c <main+0x27c>)
 800128e:	f7ff ff66 	bl	800115e <lcd_send_string>
		}

		if ((frequencia >= 10000) & (frequencia <= 99999)) {
 8001292:	4b5c      	ldr	r3, [pc, #368]	@ (8001404 <main+0x264>)
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	2301      	movs	r3, #1
 800129a:	461c      	mov	r4, r3
 800129c:	a350      	add	r3, pc, #320	@ (adr r3, 80013e0 <main+0x240>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff fc37 	bl	8000b14 <__aeabi_dcmpge>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <main+0x110>
 80012ac:	2300      	movs	r3, #0
 80012ae:	461c      	mov	r4, r3
 80012b0:	b2e4      	uxtb	r4, r4
 80012b2:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <main+0x264>)
 80012b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b8:	2301      	movs	r3, #1
 80012ba:	461d      	mov	r5, r3
 80012bc:	a34a      	add	r3, pc, #296	@ (adr r3, 80013e8 <main+0x248>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fc1d 	bl	8000b00 <__aeabi_dcmple>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <main+0x130>
 80012cc:	2300      	movs	r3, #0
 80012ce:	461d      	mov	r5, r3
 80012d0:	b2eb      	uxtb	r3, r5
 80012d2:	4023      	ands	r3, r4
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d019      	beq.n	800130e <main+0x16e>
			sprintf(valor_string, "%.3f", frequencia / 1000);
 80012da:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <main+0x264>)
 80012dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <main+0x268>)
 80012e6:	f7ff fab9 	bl	800085c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	494a      	ldr	r1, [pc, #296]	@ (8001418 <main+0x278>)
 80012f0:	4847      	ldr	r0, [pc, #284]	@ (8001410 <main+0x270>)
 80012f2:	f003 fef1 	bl	80050d8 <siprintf>
			lcd_send_cmd(Linha_1 + 7);
 80012f6:	2087      	movs	r0, #135	@ 0x87
 80012f8:	f7ff fe9a 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(valor_string);
 80012fc:	4844      	ldr	r0, [pc, #272]	@ (8001410 <main+0x270>)
 80012fe:	f7ff ff2e 	bl	800115e <lcd_send_string>
			lcd_send_cmd(Linha_1 + 13);
 8001302:	208d      	movs	r0, #141	@ 0x8d
 8001304:	f7ff fe94 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(" [KHz]");
 8001308:	4844      	ldr	r0, [pc, #272]	@ (800141c <main+0x27c>)
 800130a:	f7ff ff28 	bl	800115e <lcd_send_string>
		}

		if (frequencia >= 100000) {
 800130e:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <main+0x264>)
 8001310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001314:	a336      	add	r3, pc, #216	@ (adr r3, 80013f0 <main+0x250>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fbfb 	bl	8000b14 <__aeabi_dcmpge>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d019      	beq.n	8001358 <main+0x1b8>
			sprintf(valor_string, "%.1f", frequencia / 1000);
 8001324:	4b37      	ldr	r3, [pc, #220]	@ (8001404 <main+0x264>)
 8001326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <main+0x268>)
 8001330:	f7ff fa94 	bl	800085c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4934      	ldr	r1, [pc, #208]	@ (800140c <main+0x26c>)
 800133a:	4835      	ldr	r0, [pc, #212]	@ (8001410 <main+0x270>)
 800133c:	f003 fecc 	bl	80050d8 <siprintf>
			lcd_send_cmd(Linha_1 + 7);
 8001340:	2087      	movs	r0, #135	@ 0x87
 8001342:	f7ff fe75 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(valor_string);
 8001346:	4832      	ldr	r0, [pc, #200]	@ (8001410 <main+0x270>)
 8001348:	f7ff ff09 	bl	800115e <lcd_send_string>
			lcd_send_cmd(Linha_1 + 13);
 800134c:	208d      	movs	r0, #141	@ 0x8d
 800134e:	f7ff fe6f 	bl	8001030 <lcd_send_cmd>
			lcd_send_string(" [KHz]");
 8001352:	4832      	ldr	r0, [pc, #200]	@ (800141c <main+0x27c>)
 8001354:	f7ff ff03 	bl	800115e <lcd_send_string>
		}

		lcd_send_cmd(Linha_3);
 8001358:	2094      	movs	r0, #148	@ 0x94
 800135a:	f7ff fe69 	bl	8001030 <lcd_send_cmd>
		lcd_send_string("T = ");
 800135e:	4830      	ldr	r0, [pc, #192]	@ (8001420 <main+0x280>)
 8001360:	f7ff fefd 	bl	800115e <lcd_send_string>
		sprintf(valor_string, "%li", diferenca);
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <main+0x284>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	492f      	ldr	r1, [pc, #188]	@ (8001428 <main+0x288>)
 800136c:	4828      	ldr	r0, [pc, #160]	@ (8001410 <main+0x270>)
 800136e:	f003 feb3 	bl	80050d8 <siprintf>
		lcd_send_cmd(Linha_3 + 4);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff fe5c 	bl	8001030 <lcd_send_cmd>
		lcd_send_string(valor_string);
 8001378:	4825      	ldr	r0, [pc, #148]	@ (8001410 <main+0x270>)
 800137a:	f7ff fef0 	bl	800115e <lcd_send_string>
		lcd_send_cmd(Linha_3 + 12);
 800137e:	20a0      	movs	r0, #160	@ 0xa0
 8001380:	f7ff fe56 	bl	8001030 <lcd_send_cmd>
		lcd_send_string("Ciclos");
 8001384:	4829      	ldr	r0, [pc, #164]	@ (800142c <main+0x28c>)
 8001386:	f7ff feea 	bl	800115e <lcd_send_string>

		lcd_send_cmd(Linha_4);
 800138a:	20d4      	movs	r0, #212	@ 0xd4
 800138c:	f7ff fe50 	bl	8001030 <lcd_send_cmd>
		lcd_send_string("Clock = ");
 8001390:	4827      	ldr	r0, [pc, #156]	@ (8001430 <main+0x290>)
 8001392:	f7ff fee4 	bl	800115e <lcd_send_string>
		lcd_send_cmd(Linha_4 + 8);
 8001396:	20dc      	movs	r0, #220	@ 0xdc
 8001398:	f7ff fe4a 	bl	8001030 <lcd_send_cmd>
		sprintf(valor_string, "%li", CLOCK / 1000000);
 800139c:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <main+0x25c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a24      	ldr	r2, [pc, #144]	@ (8001434 <main+0x294>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	461a      	mov	r2, r3
 80013aa:	491f      	ldr	r1, [pc, #124]	@ (8001428 <main+0x288>)
 80013ac:	4818      	ldr	r0, [pc, #96]	@ (8001410 <main+0x270>)
 80013ae:	f003 fe93 	bl	80050d8 <siprintf>
		lcd_send_string(valor_string);
 80013b2:	4817      	ldr	r0, [pc, #92]	@ (8001410 <main+0x270>)
 80013b4:	f7ff fed3 	bl	800115e <lcd_send_string>
		lcd_send_string(" [MHz]");
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <main+0x298>)
 80013ba:	f7ff fed0 	bl	800115e <lcd_send_string>
		lcd_send_cmd(Linha_4 + 12);
 80013be:	20e0      	movs	r0, #224	@ 0xe0
 80013c0:	f7ff fe36 	bl	8001030 <lcd_send_cmd>

		HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f000 fc4e 	bl	8001c68 <HAL_Delay>

		lcd_clear();
 80013cc:	f7ff fedc 	bl	8001188 <lcd_clear>
		lcd_send_cmd(Linha_1);
 80013d0:	e6fd      	b.n	80011ce <main+0x2e>
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40c38780 	.word	0x40c38780
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40c38800 	.word	0x40c38800
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40f869f0 	.word	0x40f869f0
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40f86a00 	.word	0x40f86a00
 80013f8:	20000248 	.word	0x20000248
 80013fc:	2000029c 	.word	0x2000029c
 8001400:	08008968 	.word	0x08008968
 8001404:	200002b0 	.word	0x200002b0
 8001408:	408f4000 	.word	0x408f4000
 800140c:	08008970 	.word	0x08008970
 8001410:	200002a4 	.word	0x200002a4
 8001414:	08008978 	.word	0x08008978
 8001418:	08008980 	.word	0x08008980
 800141c:	08008988 	.word	0x08008988
 8001420:	08008990 	.word	0x08008990
 8001424:	20000298 	.word	0x20000298
 8001428:	08008998 	.word	0x08008998
 800142c:	0800899c 	.word	0x0800899c
 8001430:	080089a4 	.word	0x080089a4
 8001434:	431bde83 	.word	0x431bde83
 8001438:	080089b0 	.word	0x080089b0

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2230      	movs	r2, #48	@ 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fea7 	bl	800519e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <SystemClock_Config+0xc8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <SystemClock_Config+0xc8>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <SystemClock_Config+0xc8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <SystemClock_Config+0xcc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a20      	ldr	r2, [pc, #128]	@ (8001508 <SystemClock_Config+0xcc>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <SystemClock_Config+0xcc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001498:	2301      	movs	r3, #1
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014ac:	230c      	movs	r3, #12
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014b0:	2360      	movs	r3, #96	@ 0x60
 80014b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fb29 	bl	8002b18 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014cc:	f000 f95a 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2103      	movs	r1, #3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fd8b 	bl	8003008 <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014f8:	f000 f944 	bl	8001784 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	@ 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_I2C1_Init+0x50>)
 800154a:	f000 fe47 	bl	80021dc <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f916 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200001f4 	.word	0x200001f4
 8001560:	40005400 	.word	0x40005400
 8001564:	000186a0 	.word	0x000186a0

08001568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001592:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <MX_TIM2_Init+0xdc>)
 8001594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <MX_TIM2_Init+0xdc>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ba:	4822      	ldr	r0, [pc, #136]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015bc:	f001 fef0 	bl	80033a0 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80015c6:	f000 f8dd 	bl	8001784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	4619      	mov	r1, r3
 80015d6:	481b      	ldr	r0, [pc, #108]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015d8:	f002 fa30 	bl	8003a3c <HAL_TIM_ConfigClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015e2:	f000 f8cf 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015e6:	4817      	ldr	r0, [pc, #92]	@ (8001644 <MX_TIM2_Init+0xdc>)
 80015e8:	f001 ff29 	bl	800343e <HAL_TIM_IC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015f2:	f000 f8c7 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4619      	mov	r1, r3
 8001604:	480f      	ldr	r0, [pc, #60]	@ (8001644 <MX_TIM2_Init+0xdc>)
 8001606:	f002 fdb7 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001610:	f000 f8b8 	bl	8001784 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MX_TIM2_Init+0xdc>)
 800162c:	f002 f96a 	bl	8003904 <HAL_TIM_IC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001636:	f000 f8a5 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000248 	.word	0x20000248

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <MX_GPIO_Init+0x68>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_GPIO_Init+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a08      	ldr	r2, [pc, #32]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_GPIO_Init+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7f1b      	ldrb	r3, [r3, #28]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d14e      	bne.n	8001762 <HAL_TIM_IC_CaptureCallback+0xae>
		switch (flag) {
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_TIM_IC_CaptureCallback+0x1e>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d00b      	beq.n	80016e8 <HAL_TIM_IC_CaptureCallback+0x34>
 80016d0:	e02f      	b.n	8001732 <HAL_TIM_IC_CaptureCallback+0x7e>
		case 0:
			CCR_anter = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016d2:	2100      	movs	r1, #0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f002 fa79 	bl	8003bcc <HAL_TIM_ReadCapturedValue>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80016de:	6013      	str	r3, [r2, #0]
			flag = 1;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
			break;
 80016e6:	e025      	b.n	8001734 <HAL_TIM_IC_CaptureCallback+0x80>
		case 1:
			CCR_atual = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f002 fa6e 	bl	8003bcc <HAL_TIM_ReadCapturedValue>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a20      	ldr	r2, [pc, #128]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80016f4:	6013      	str	r3, [r2, #0]
			if (CCR_atual > CCR_anter)
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d907      	bls.n	8001712 <HAL_TIM_IC_CaptureCallback+0x5e>
				diferenca = CCR_atual - CCR_anter;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e007      	b.n	8001722 <HAL_TIM_IC_CaptureCallback+0x6e>
			else
				diferenca = ((0xFFFFFFFF - CCR_anter) + CCR_atual);
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001720:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
			flag = 0;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
			break;
 8001730:	e000      	b.n	8001734 <HAL_TIM_IC_CaptureCallback+0x80>
		default:
			__NOP();
 8001732:	bf00      	nop
		}

		frequencia = ((double) CLOCK / (double) diferenca);
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe feeb 	bl	8000514 <__aeabi_ui2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fee4 	bl	8000514 <__aeabi_ui2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7ff f882 	bl	800085c <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4908      	ldr	r1, [pc, #32]	@ (8001780 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800175e:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	200002a0 	.word	0x200002a0
 8001770:	20000290 	.word	0x20000290
 8001774:	20000294 	.word	0x20000294
 8001778:	20000298 	.word	0x20000298
 800177c:	2000029c 	.word	0x2000029c
 8001780:	200002b0 	.word	0x200002b0

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_I2C_MspInit+0x84>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12b      	bne.n	800185a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <HAL_I2C_MspInit+0x8c>)
 800183a:	f000 fb4b 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001890:	d133      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_TIM_Base_MspInit+0x94>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ca:	2301      	movs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018da:	2301      	movs	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4808      	ldr	r0, [pc, #32]	@ (8001908 <HAL_TIM_Base_MspInit+0x98>)
 80018e6:	f000 faf5 	bl	8001ed4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 fab9 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f4:	201c      	movs	r0, #28
 80018f6:	f000 fad2 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	@ 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 f961 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM2_IRQHandler+0x10>)
 8001972:	f001 fed7 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000248 	.word	0x20000248

08001980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_kill>:

int _kill(int pid, int sig)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199a:	f003 fc53 	bl	8005244 <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	2216      	movs	r2, #22
 80019a2:	601a      	str	r2, [r3, #0]
  return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe7 	bl	8001990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c2:	bf00      	nop
 80019c4:	e7fd      	b.n	80019c2 <_exit+0x12>

080019c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e00a      	b.n	80019ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d8:	f3af 8000 	nop.w
 80019dc:	4601      	mov	r1, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dbf0      	blt.n	80019d8 <_read+0x12>
  }

  return len;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e009      	b.n	8001a26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbf1      	blt.n	8001a12 <_write+0x12>
  }
  return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_close>:

int _close(int file)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a60:	605a      	str	r2, [r3, #4]
  return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_isatty>:

int _isatty(int file)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f003 fbb8 	bl	8005244 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20020000 	.word	0x20020000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	200002b8 	.word	0x200002b8
 8001b08:	20000410 	.word	0x20000410

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b34:	f7ff ffea 	bl	8001b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f003 fb77 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7ff fb1d 	bl	80011a0 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b74:	08008e10 	.word	0x08008e10
  ldr r2, =_sbss
 8001b78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b7c:	2000040c 	.word	0x2000040c

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f94f 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fdea 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f967 	bl	8001eba <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f92f 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	200002bc 	.word	0x200002bc

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200002bc 	.word	0x200002bc

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	@ 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff29 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff3e 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff8e 	bl	8001da4 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff31 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e159      	b.n	80021a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8148 	bne.w	800219e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a2 	beq.w	800219e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <HAL_GPIO_Init+0x2e8>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4a56      	ldr	r2, [pc, #344]	@ (80021bc <HAL_GPIO_Init+0x2e8>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002068:	6453      	str	r3, [r2, #68]	@ 0x44
 800206a:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <HAL_GPIO_Init+0x2e8>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a52      	ldr	r2, [pc, #328]	@ (80021c0 <HAL_GPIO_Init+0x2ec>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a49      	ldr	r2, [pc, #292]	@ (80021c4 <HAL_GPIO_Init+0x2f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x202>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a48      	ldr	r2, [pc, #288]	@ (80021c8 <HAL_GPIO_Init+0x2f4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x1fe>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a47      	ldr	r2, [pc, #284]	@ (80021cc <HAL_GPIO_Init+0x2f8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x1fa>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a46      	ldr	r2, [pc, #280]	@ (80021d0 <HAL_GPIO_Init+0x2fc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x1f6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a45      	ldr	r2, [pc, #276]	@ (80021d4 <HAL_GPIO_Init+0x300>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x1f2>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	@ (80021c0 <HAL_GPIO_Init+0x2ec>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a2f      	ldr	r2, [pc, #188]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a24      	ldr	r2, [pc, #144]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216e:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002198:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f aea2 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e12b      	b.n	8002446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff faec 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800222e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800223e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002240:	f001 f89a 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a81      	ldr	r2, [pc, #516]	@ (8002450 <HAL_I2C_Init+0x274>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d807      	bhi.n	8002260 <HAL_I2C_Init+0x84>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a80      	ldr	r2, [pc, #512]	@ (8002454 <HAL_I2C_Init+0x278>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e006      	b.n	800226e <HAL_I2C_Init+0x92>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a7d      	ldr	r2, [pc, #500]	@ (8002458 <HAL_I2C_Init+0x27c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e7      	b.n	8002446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a78      	ldr	r2, [pc, #480]	@ (800245c <HAL_I2C_Init+0x280>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002450 <HAL_I2C_Init+0x274>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d802      	bhi.n	80022b0 <HAL_I2C_Init+0xd4>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	e009      	b.n	80022c4 <HAL_I2C_Init+0xe8>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a69      	ldr	r2, [pc, #420]	@ (8002460 <HAL_I2C_Init+0x284>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	3301      	adds	r3, #1
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	495c      	ldr	r1, [pc, #368]	@ (8002450 <HAL_I2C_Init+0x274>)
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d819      	bhi.n	8002318 <HAL_I2C_Init+0x13c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e59      	subs	r1, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022f8:	400b      	ands	r3, r1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_I2C_Init+0x138>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fbb1 f3f3 	udiv	r3, r1, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	e051      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002314:	2304      	movs	r3, #4
 8002316:	e04f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_I2C_Init+0x168>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e012      	b.n	800236a <HAL_I2C_Init+0x18e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x196>
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <HAL_I2C_Init+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e58      	subs	r0, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	fbb0 f3f3 	udiv	r3, r0, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002396:	e00f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6809      	ldr	r1, [r1, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6911      	ldr	r1, [r2, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	000186a0 	.word	0x000186a0
 8002454:	001e847f 	.word	0x001e847f
 8002458:	003d08ff 	.word	0x003d08ff
 800245c:	431bde83 	.word	0x431bde83
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
 8002474:	4613      	mov	r3, r2
 8002476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fbea 	bl	8001c50 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 80e0 	bne.w	800264c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	4970      	ldr	r1, [pc, #448]	@ (8002658 <HAL_I2C_Master_Transmit+0x1f4>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f964 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0d3      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x50>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0cc      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d007      	beq.n	80024da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2221      	movs	r2, #33	@ 0x21
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2210      	movs	r2, #16
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	893a      	ldrh	r2, [r7, #8]
 800250a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a50      	ldr	r2, [pc, #320]	@ (800265c <HAL_I2C_Master_Transmit+0x1f8>)
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f89c 	bl	8002660 <I2C_MasterRequestWrite>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08d      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002548:	e066      	b.n	8002618 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	6a39      	ldr	r1, [r7, #32]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fa22 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	2b04      	cmp	r3, #4
 8002560:	d107      	bne.n	8002572 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d11b      	bne.n	80025ec <HAL_I2C_Master_Transmit+0x188>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6a39      	ldr	r1, [r7, #32]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fa19 	bl	8002a28 <I2C_WaitOnBTFFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002612:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e01a      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d194      	bne.n	800254a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	00100002 	.word	0x00100002
 800265c:	ffff0000 	.word	0xffff0000

08002660 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d006      	beq.n	800268a <I2C_MasterRequestWrite+0x2a>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d003      	beq.n	800268a <I2C_MasterRequestWrite+0x2a>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002688:	d108      	bne.n	800269c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e00b      	b.n	80026b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d107      	bne.n	80026b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f84f 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026da:	d103      	bne.n	80026e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e035      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026f0:	d108      	bne.n	8002704 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	e01b      	b.n	800273c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	11db      	asrs	r3, r3, #7
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 030f 	orn	r3, r3, #15
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <I2C_MasterRequestWrite+0xfc>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f898 	bl	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e010      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4907      	ldr	r1, [pc, #28]	@ (8002760 <I2C_MasterRequestWrite+0x100>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f888 	bl	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	00010008 	.word	0x00010008
 8002760:	00010002 	.word	0x00010002

08002764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	e048      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d044      	beq.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff fa67 	bl	8001c50 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d139      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	e00c      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d116      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e023      	b.n	8002850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10d      	bne.n	800282e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	e00c      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	43da      	mvns	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	429a      	cmp	r2, r3
 800284c:	d093      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002866:	e071      	b.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002876:	d123      	bne.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e067      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d041      	beq.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7ff f9c2 	bl	8001c50 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d136      	bne.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10c      	bne.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	e00b      	b.n	800291a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	43da      	mvns	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e021      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10c      	bne.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e00b      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	f47f af6d 	bne.w	8002868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	e034      	b.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f886 	bl	8002ab8 <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e034      	b.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d028      	beq.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f947 	bl	8001c50 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11d      	bne.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b80      	cmp	r3, #128	@ 0x80
 80029e0:	d016      	beq.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d1c3      	bne.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a34:	e034      	b.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f83e 	bl	8002ab8 <I2C_IsAcknowledgeFailed>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e034      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d028      	beq.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7ff f8ff 	bl	8001c50 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11d      	bne.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d016      	beq.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e007      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d1c3      	bne.n	8002a36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ace:	d11b      	bne.n	8002b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e267      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d075      	beq.n	8002c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b36:	4b88      	ldr	r3, [pc, #544]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d00c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b85      	ldr	r3, [pc, #532]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d112      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4b82      	ldr	r3, [pc, #520]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05b      	beq.n	8002c20 <HAL_RCC_OscConfig+0x108>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d157      	bne.n	8002c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e242      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCC_OscConfig+0x74>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xb0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x98>
 8002b96:	4b70      	ldr	r3, [pc, #448]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xb0>
 8002bb0:	4b69      	ldr	r3, [pc, #420]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b66      	ldr	r3, [pc, #408]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a65      	ldr	r2, [pc, #404]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f83e 	bl	8001c50 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f83a 	bl	8001c50 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e207      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b5b      	ldr	r3, [pc, #364]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f82a 	bl	8001c50 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff f826 	bl	8001c50 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1f3      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	4b51      	ldr	r3, [pc, #324]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0xe8>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b44      	ldr	r3, [pc, #272]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x152>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e1c7      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4937      	ldr	r1, [pc, #220]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	e03a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCC_OscConfig+0x244>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe ffdf 	bl	8001c50 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe ffdb 	bl	8001c50 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1a8      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4925      	ldr	r1, [pc, #148]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_OscConfig+0x244>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe ffbe 	bl	8001c50 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe ffba 	bl	8001c50 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e187      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_RCC_OscConfig+0x248>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe ff9e 	bl	8001c50 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe ff9a 	bl	8001c50 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e167      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x200>
 8002d36:	e01b      	b.n	8002d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_RCC_OscConfig+0x248>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe ff87 	bl	8001c50 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00e      	b.n	8002d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe ff83 	bl	8001c50 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d907      	bls.n	8002d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e150      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
 8002d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	4b88      	ldr	r3, [pc, #544]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ea      	bne.n	8002d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8097 	beq.w	8002eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b81      	ldr	r3, [pc, #516]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b7d      	ldr	r3, [pc, #500]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a7c      	ldr	r2, [pc, #496]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4b77      	ldr	r3, [pc, #476]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4b74      	ldr	r3, [pc, #464]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a73      	ldr	r2, [pc, #460]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ff43 	bl	8001c50 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe ff3f 	bl	8001c50 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e10c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f8c <HAL_RCC_OscConfig+0x474>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ea>
 8002df4:	4b64      	ldr	r3, [pc, #400]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a63      	ldr	r2, [pc, #396]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x324>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x30c>
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	4b5c      	ldr	r3, [pc, #368]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0x324>
 8002e24:	4b58      	ldr	r3, [pc, #352]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a57      	ldr	r2, [pc, #348]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e30:	4b55      	ldr	r3, [pc, #340]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	4a54      	ldr	r2, [pc, #336]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f023 0304 	bic.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe ff04 	bl	8001c50 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe ff00 	bl	8001c50 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0cb      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ee      	beq.n	8002e4c <HAL_RCC_OscConfig+0x334>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe feee 	bl	8001c50 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe feea 	bl	8001c50 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0b5      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ee      	bne.n	8002e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	4a38      	ldr	r2, [pc, #224]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a1 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb6:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d05c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d141      	bne.n	8002f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe febe 	bl	8001c50 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe feba 	bl	8001c50 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e087      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	491b      	ldr	r1, [pc, #108]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fe93 	bl	8001c50 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe fe8f 	bl	8001c50 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e05c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x416>
 8002f4c:	e054      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_RCC_OscConfig+0x478>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fe7c 	bl	8001c50 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fe78 	bl	8001c50 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e045      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_OscConfig+0x470>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x444>
 8002f7a:	e03d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e038      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x4ec>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d028      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fdaa 	bl	8001c50 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fda6 	bl	8001c50 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fd0a 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	080089b8 	.word	0x080089b8
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b090      	sub	sp, #64	@ 0x40
 80031da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e4:	2300      	movs	r3, #0
 80031e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d00d      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x40>
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	f200 80a1 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x16c>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x34>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x3a>
 8003206:	e09b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b53      	ldr	r3, [pc, #332]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x184>)
 800320a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800320c:	e09b      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320e:	4b53      	ldr	r3, [pc, #332]	@ (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003212:	e098      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4b4f      	ldr	r3, [pc, #316]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321e:	4b4d      	ldr	r3, [pc, #308]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	623b      	str	r3, [r7, #32]
 8003234:	627a      	str	r2, [r7, #36]	@ 0x24
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800323c:	2100      	movs	r1, #0
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 8003240:	fb03 f201 	mul.w	r2, r3, r1
 8003244:	2300      	movs	r3, #0
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	4413      	add	r3, r2
 800324c:	4a43      	ldr	r2, [pc, #268]	@ (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 800324e:	fba0 1202 	umull	r1, r2, r0, r2
 8003252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003254:	460a      	mov	r2, r1
 8003256:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800325a:	4413      	add	r3, r2
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	2200      	movs	r2, #0
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	61fa      	str	r2, [r7, #28]
 8003266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800326a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800326e:	f7fd fd13 	bl	8000c98 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4613      	mov	r3, r2
 8003278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800327a:	e053      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327c:	4b35      	ldr	r3, [pc, #212]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	2200      	movs	r2, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	617a      	str	r2, [r7, #20]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800328e:	f04f 0b00 	mov.w	fp, #0
 8003292:	4652      	mov	r2, sl
 8003294:	465b      	mov	r3, fp
 8003296:	f04f 0000 	mov.w	r0, #0
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	0159      	lsls	r1, r3, #5
 80032a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a4:	0150      	lsls	r0, r2, #5
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	ebb2 080a 	subs.w	r8, r2, sl
 80032ae:	eb63 090b 	sbc.w	r9, r3, fp
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032c6:	ebb2 0408 	subs.w	r4, r2, r8
 80032ca:	eb63 0509 	sbc.w	r5, r3, r9
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	00eb      	lsls	r3, r5, #3
 80032d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	eb14 030a 	adds.w	r3, r4, sl
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	eb45 030b 	adc.w	r3, r5, fp
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	2200      	movs	r2, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	60fa      	str	r2, [r7, #12]
 8003314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003318:	f7fd fcbe 	bl	8000c98 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003334:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x184>)
 8003342:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003348:	4618      	mov	r0, r3
 800334a:	3740      	adds	r7, #64	@ 0x40
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	017d7840 	.word	0x017d7840

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	080089c8 	.word	0x080089c8

080033a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e041      	b.n	8003436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe fa52 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 fc60 	bl	8003ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e041      	b.n	80034d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f839 	bl	80034dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 fc11 	bl	8003ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <HAL_TIM_IC_Start_IT+0x1e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e013      	b.n	8003536 <HAL_TIM_IC_Start_IT+0x46>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d104      	bne.n	800351e <HAL_TIM_IC_Start_IT+0x2e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800351a:	b2db      	uxtb	r3, r3
 800351c:	e00b      	b.n	8003536 <HAL_TIM_IC_Start_IT+0x46>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d104      	bne.n	800352e <HAL_TIM_IC_Start_IT+0x3e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e003      	b.n	8003536 <HAL_TIM_IC_Start_IT+0x46>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_TIM_IC_Start_IT+0x58>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e013      	b.n	8003570 <HAL_TIM_IC_Start_IT+0x80>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b04      	cmp	r3, #4
 800354c:	d104      	bne.n	8003558 <HAL_TIM_IC_Start_IT+0x68>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e00b      	b.n	8003570 <HAL_TIM_IC_Start_IT+0x80>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d104      	bne.n	8003568 <HAL_TIM_IC_Start_IT+0x78>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e003      	b.n	8003570 <HAL_TIM_IC_Start_IT+0x80>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356e:	b2db      	uxtb	r3, r3
 8003570:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003578:	7b7b      	ldrb	r3, [r7, #13]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0c2      	b.n	8003708 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0xa2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003590:	e013      	b.n	80035ba <HAL_TIM_IC_Start_IT+0xca>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0xb2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_IC_Start_IT+0xca>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0xc2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b0:	e003      	b.n	80035ba <HAL_TIM_IC_Start_IT+0xca>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_IC_Start_IT+0xda>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c8:	e013      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x102>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_IC_Start_IT+0xea>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035d8:	e00b      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x102>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0xfa>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e8:	e003      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x102>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d841      	bhi.n	800367c <HAL_TIM_IC_Start_IT+0x18c>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_TIM_IC_Start_IT+0x110>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003635 	.word	0x08003635
 8003604:	0800367d 	.word	0x0800367d
 8003608:	0800367d 	.word	0x0800367d
 800360c:	0800367d 	.word	0x0800367d
 8003610:	08003647 	.word	0x08003647
 8003614:	0800367d 	.word	0x0800367d
 8003618:	0800367d 	.word	0x0800367d
 800361c:	0800367d 	.word	0x0800367d
 8003620:	08003659 	.word	0x08003659
 8003624:	0800367d 	.word	0x0800367d
 8003628:	0800367d 	.word	0x0800367d
 800362c:	0800367d 	.word	0x0800367d
 8003630:	0800366b 	.word	0x0800366b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0202 	orr.w	r2, r2, #2
 8003642:	60da      	str	r2, [r3, #12]
      break;
 8003644:	e01d      	b.n	8003682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0204 	orr.w	r2, r2, #4
 8003654:	60da      	str	r2, [r3, #12]
      break;
 8003656:	e014      	b.n	8003682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	60da      	str	r2, [r3, #12]
      break;
 8003668:	e00b      	b.n	8003682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0210 	orr.w	r2, r2, #16
 8003678:	60da      	str	r2, [r3, #12]
      break;
 800367a:	e002      	b.n	8003682 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	bf00      	nop
  }

  if (status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d13e      	bne.n	8003706 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fd4b 	bl	800412c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <HAL_TIM_IC_Start_IT+0x220>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d013      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_TIM_IC_Start_IT+0x224>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_TIM_IC_Start_IT+0x228>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_TIM_IC_Start_IT+0x22c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x1e2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <HAL_TIM_IC_Start_IT+0x230>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d010      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	e007      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40014000 	.word	0x40014000

08003724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0202 	mvn.w	r2, #2
 8003758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd ffa0 	bl	80016b4 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa76 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fa7d 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d020      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0204 	mvn.w	r2, #4
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd ff7a 	bl	80016b4 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa50 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa57 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd ff54 	bl	80016b4 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa2a 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa31 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2208      	movs	r2, #8
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd ff2e 	bl	80016b4 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa04 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fa0b 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9e2 	bl	8003c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fcda 	bl	8004268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9dc 	bl	8003c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0220 	mvn.w	r2, #32
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fcac 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_TIM_IC_ConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e088      	b.n	8003a34 <HAL_TIM_IC_ConfigChannel+0x130>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003940:	f000 fa3c 	bl	8003dbc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020c 	bic.w	r2, r2, #12
 8003952:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e060      	b.n	8003a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d11c      	bne.n	80039a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800397e:	f000 fab4 	bl	8003eea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003990:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6999      	ldr	r1, [r3, #24]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
 80039a6:	e040      	b.n	8003a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d11b      	bne.n	80039e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039be:	f000 fb01 	bl	8003fc4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 020c 	bic.w	r2, r2, #12
 80039d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69d9      	ldr	r1, [r3, #28]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	61da      	str	r2, [r3, #28]
 80039e4:	e021      	b.n	8003a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d11c      	bne.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039fc:	f000 fb1e 	bl	800403c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69d9      	ldr	r1, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021a      	lsls	r2, r3, #8
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]
 8003a24:	e001      	b.n	8003a2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_ConfigClockSource+0x1c>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0b4      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x186>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a90:	d03e      	beq.n	8003b10 <HAL_TIM_ConfigClockSource+0xd4>
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a96:	f200 8087 	bhi.w	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	f000 8086 	beq.w	8003bae <HAL_TIM_ConfigClockSource+0x172>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d87f      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b70      	cmp	r3, #112	@ 0x70
 8003aaa:	d01a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8003aac:	2b70      	cmp	r3, #112	@ 0x70
 8003aae:	d87b      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b60      	cmp	r3, #96	@ 0x60
 8003ab2:	d050      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x11a>
 8003ab4:	2b60      	cmp	r3, #96	@ 0x60
 8003ab6:	d877      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b50      	cmp	r3, #80	@ 0x50
 8003aba:	d03c      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0xfa>
 8003abc:	2b50      	cmp	r3, #80	@ 0x50
 8003abe:	d873      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d058      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x13a>
 8003ac4:	2b40      	cmp	r3, #64	@ 0x40
 8003ac6:	d86f      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b30      	cmp	r3, #48	@ 0x30
 8003aca:	d064      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b30      	cmp	r3, #48	@ 0x30
 8003ace:	d86b      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d060      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d867      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d05a      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ae0:	e062      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003af2:	f000 fafb 	bl	80040ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	609a      	str	r2, [r3, #8]
      break;
 8003b0e:	e04f      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b20:	f000 fae4 	bl	80040ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b32:	609a      	str	r2, [r3, #8]
      break;
 8003b34:	e03c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 f9a2 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2150      	movs	r1, #80	@ 0x50
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fab1 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e02c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 f9fe 	bl	8003f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2160      	movs	r1, #96	@ 0x60
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 faa1 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e01c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 f982 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2140      	movs	r1, #64	@ 0x40
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fa91 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f000 fa88 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d831      	bhi.n	8003c44 <HAL_TIM_ReadCapturedValue+0x78>
 8003be0:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c45 	.word	0x08003c45
 8003bf0:	08003c45 	.word	0x08003c45
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c45 	.word	0x08003c45
 8003c00:	08003c45 	.word	0x08003c45
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c31 	.word	0x08003c31
 8003c0c:	08003c45 	.word	0x08003c45
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c3b 	.word	0x08003c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	60fb      	str	r3, [r7, #12]

      break;
 8003c24:	e00f      	b.n	8003c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	60fb      	str	r3, [r7, #12]

      break;
 8003c2e:	e00a      	b.n	8003c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	60fb      	str	r3, [r7, #12]

      break;
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	60fb      	str	r3, [r7, #12]

      break;
 8003c42:	e000      	b.n	8003c46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c44:	bf00      	nop
  }

  return tmpreg;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003da0 <TIM_Base_SetConfig+0xfc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00f      	beq.n	8003cdc <TIM_Base_SetConfig+0x38>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc2:	d00b      	beq.n	8003cdc <TIM_Base_SetConfig+0x38>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <TIM_Base_SetConfig+0x100>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d007      	beq.n	8003cdc <TIM_Base_SetConfig+0x38>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a36      	ldr	r2, [pc, #216]	@ (8003da8 <TIM_Base_SetConfig+0x104>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0x38>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a35      	ldr	r2, [pc, #212]	@ (8003dac <TIM_Base_SetConfig+0x108>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8003da0 <TIM_Base_SetConfig+0xfc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01b      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfc:	d017      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a28      	ldr	r2, [pc, #160]	@ (8003da4 <TIM_Base_SetConfig+0x100>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a27      	ldr	r2, [pc, #156]	@ (8003da8 <TIM_Base_SetConfig+0x104>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00f      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <TIM_Base_SetConfig+0x108>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a25      	ldr	r2, [pc, #148]	@ (8003db0 <TIM_Base_SetConfig+0x10c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <TIM_Base_SetConfig+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a23      	ldr	r2, [pc, #140]	@ (8003db8 <TIM_Base_SetConfig+0x114>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <TIM_Base_SetConfig+0xfc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f023 0201 	bic.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]
  }
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800

08003dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f023 0201 	bic.w	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a24      	ldr	r2, [pc, #144]	@ (8003e78 <TIM_TI1_SetConfig+0xbc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <TIM_TI1_SetConfig+0x56>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d00f      	beq.n	8003e12 <TIM_TI1_SetConfig+0x56>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a21      	ldr	r2, [pc, #132]	@ (8003e7c <TIM_TI1_SetConfig+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <TIM_TI1_SetConfig+0x56>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	@ (8003e80 <TIM_TI1_SetConfig+0xc4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <TIM_TI1_SetConfig+0x56>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	@ (8003e84 <TIM_TI1_SetConfig+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_TI1_SetConfig+0x56>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e88 <TIM_TI1_SetConfig+0xcc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <TIM_TI1_SetConfig+0x5a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <TIM_TI1_SetConfig+0x5c>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e003      	b.n	8003e36 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 030a 	and.w	r3, r3, #10
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40014000 	.word	0x40014000

08003e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f023 030a 	bic.w	r3, r3, #10
 8003ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b087      	sub	sp, #28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	031b      	lsls	r3, r3, #12
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0210 	bic.w	r2, r3, #16
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	031b      	lsls	r3, r3, #12
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004000:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	b2db      	uxtb	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004014:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004068:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	031b      	lsls	r3, r3, #12
 8004080:	b29b      	uxth	r3, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800408e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	031b      	lsls	r3, r3, #12
 8004094:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e050      	b.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d013      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a18      	ldr	r2, [pc, #96]	@ (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	@ (800424c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10c      	bne.n	8004220 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800420c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40014000 	.word	0x40014000

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <__cvt>:
 800427c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	ec57 6b10 	vmov	r6, r7, d0
 8004284:	2f00      	cmp	r7, #0
 8004286:	460c      	mov	r4, r1
 8004288:	4619      	mov	r1, r3
 800428a:	463b      	mov	r3, r7
 800428c:	bfbb      	ittet	lt
 800428e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004292:	461f      	movlt	r7, r3
 8004294:	2300      	movge	r3, #0
 8004296:	232d      	movlt	r3, #45	@ 0x2d
 8004298:	700b      	strb	r3, [r1, #0]
 800429a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800429c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80042a0:	4691      	mov	r9, r2
 80042a2:	f023 0820 	bic.w	r8, r3, #32
 80042a6:	bfbc      	itt	lt
 80042a8:	4632      	movlt	r2, r6
 80042aa:	4616      	movlt	r6, r2
 80042ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042b0:	d005      	beq.n	80042be <__cvt+0x42>
 80042b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80042b6:	d100      	bne.n	80042ba <__cvt+0x3e>
 80042b8:	3401      	adds	r4, #1
 80042ba:	2102      	movs	r1, #2
 80042bc:	e000      	b.n	80042c0 <__cvt+0x44>
 80042be:	2103      	movs	r1, #3
 80042c0:	ab03      	add	r3, sp, #12
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	ab02      	add	r3, sp, #8
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	ec47 6b10 	vmov	d0, r6, r7
 80042cc:	4653      	mov	r3, sl
 80042ce:	4622      	mov	r2, r4
 80042d0:	f001 f876 	bl	80053c0 <_dtoa_r>
 80042d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042d8:	4605      	mov	r5, r0
 80042da:	d119      	bne.n	8004310 <__cvt+0x94>
 80042dc:	f019 0f01 	tst.w	r9, #1
 80042e0:	d00e      	beq.n	8004300 <__cvt+0x84>
 80042e2:	eb00 0904 	add.w	r9, r0, r4
 80042e6:	2200      	movs	r2, #0
 80042e8:	2300      	movs	r3, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fc fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80042f2:	b108      	cbz	r0, 80042f8 <__cvt+0x7c>
 80042f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042f8:	2230      	movs	r2, #48	@ 0x30
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	454b      	cmp	r3, r9
 80042fe:	d31e      	bcc.n	800433e <__cvt+0xc2>
 8004300:	9b03      	ldr	r3, [sp, #12]
 8004302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004304:	1b5b      	subs	r3, r3, r5
 8004306:	4628      	mov	r0, r5
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	b004      	add	sp, #16
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004314:	eb00 0904 	add.w	r9, r0, r4
 8004318:	d1e5      	bne.n	80042e6 <__cvt+0x6a>
 800431a:	7803      	ldrb	r3, [r0, #0]
 800431c:	2b30      	cmp	r3, #48	@ 0x30
 800431e:	d10a      	bne.n	8004336 <__cvt+0xba>
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fc fbd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800432c:	b918      	cbnz	r0, 8004336 <__cvt+0xba>
 800432e:	f1c4 0401 	rsb	r4, r4, #1
 8004332:	f8ca 4000 	str.w	r4, [sl]
 8004336:	f8da 3000 	ldr.w	r3, [sl]
 800433a:	4499      	add	r9, r3
 800433c:	e7d3      	b.n	80042e6 <__cvt+0x6a>
 800433e:	1c59      	adds	r1, r3, #1
 8004340:	9103      	str	r1, [sp, #12]
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e7d9      	b.n	80042fa <__cvt+0x7e>

08004346 <__exponent>:
 8004346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004348:	2900      	cmp	r1, #0
 800434a:	bfba      	itte	lt
 800434c:	4249      	neglt	r1, r1
 800434e:	232d      	movlt	r3, #45	@ 0x2d
 8004350:	232b      	movge	r3, #43	@ 0x2b
 8004352:	2909      	cmp	r1, #9
 8004354:	7002      	strb	r2, [r0, #0]
 8004356:	7043      	strb	r3, [r0, #1]
 8004358:	dd29      	ble.n	80043ae <__exponent+0x68>
 800435a:	f10d 0307 	add.w	r3, sp, #7
 800435e:	461d      	mov	r5, r3
 8004360:	270a      	movs	r7, #10
 8004362:	461a      	mov	r2, r3
 8004364:	fbb1 f6f7 	udiv	r6, r1, r7
 8004368:	fb07 1416 	mls	r4, r7, r6, r1
 800436c:	3430      	adds	r4, #48	@ 0x30
 800436e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004372:	460c      	mov	r4, r1
 8004374:	2c63      	cmp	r4, #99	@ 0x63
 8004376:	f103 33ff 	add.w	r3, r3, #4294967295
 800437a:	4631      	mov	r1, r6
 800437c:	dcf1      	bgt.n	8004362 <__exponent+0x1c>
 800437e:	3130      	adds	r1, #48	@ 0x30
 8004380:	1e94      	subs	r4, r2, #2
 8004382:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004386:	1c41      	adds	r1, r0, #1
 8004388:	4623      	mov	r3, r4
 800438a:	42ab      	cmp	r3, r5
 800438c:	d30a      	bcc.n	80043a4 <__exponent+0x5e>
 800438e:	f10d 0309 	add.w	r3, sp, #9
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	42ac      	cmp	r4, r5
 8004396:	bf88      	it	hi
 8004398:	2300      	movhi	r3, #0
 800439a:	3302      	adds	r3, #2
 800439c:	4403      	add	r3, r0
 800439e:	1a18      	subs	r0, r3, r0
 80043a0:	b003      	add	sp, #12
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80043a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80043ac:	e7ed      	b.n	800438a <__exponent+0x44>
 80043ae:	2330      	movs	r3, #48	@ 0x30
 80043b0:	3130      	adds	r1, #48	@ 0x30
 80043b2:	7083      	strb	r3, [r0, #2]
 80043b4:	70c1      	strb	r1, [r0, #3]
 80043b6:	1d03      	adds	r3, r0, #4
 80043b8:	e7f1      	b.n	800439e <__exponent+0x58>
	...

080043bc <_printf_float>:
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	b08d      	sub	sp, #52	@ 0x34
 80043c2:	460c      	mov	r4, r1
 80043c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80043c8:	4616      	mov	r6, r2
 80043ca:	461f      	mov	r7, r3
 80043cc:	4605      	mov	r5, r0
 80043ce:	f000 feef 	bl	80051b0 <_localeconv_r>
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	9304      	str	r3, [sp, #16]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fb ff52 	bl	8000280 <strlen>
 80043dc:	2300      	movs	r3, #0
 80043de:	930a      	str	r3, [sp, #40]	@ 0x28
 80043e0:	f8d8 3000 	ldr.w	r3, [r8]
 80043e4:	9005      	str	r0, [sp, #20]
 80043e6:	3307      	adds	r3, #7
 80043e8:	f023 0307 	bic.w	r3, r3, #7
 80043ec:	f103 0208 	add.w	r2, r3, #8
 80043f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043f4:	f8d4 b000 	ldr.w	fp, [r4]
 80043f8:	f8c8 2000 	str.w	r2, [r8]
 80043fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004400:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004404:	9307      	str	r3, [sp, #28]
 8004406:	f8cd 8018 	str.w	r8, [sp, #24]
 800440a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800440e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004412:	4b9c      	ldr	r3, [pc, #624]	@ (8004684 <_printf_float+0x2c8>)
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	f7fc fb90 	bl	8000b3c <__aeabi_dcmpun>
 800441c:	bb70      	cbnz	r0, 800447c <_printf_float+0xc0>
 800441e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004422:	4b98      	ldr	r3, [pc, #608]	@ (8004684 <_printf_float+0x2c8>)
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	f7fc fb6a 	bl	8000b00 <__aeabi_dcmple>
 800442c:	bb30      	cbnz	r0, 800447c <_printf_float+0xc0>
 800442e:	2200      	movs	r2, #0
 8004430:	2300      	movs	r3, #0
 8004432:	4640      	mov	r0, r8
 8004434:	4649      	mov	r1, r9
 8004436:	f7fc fb59 	bl	8000aec <__aeabi_dcmplt>
 800443a:	b110      	cbz	r0, 8004442 <_printf_float+0x86>
 800443c:	232d      	movs	r3, #45	@ 0x2d
 800443e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004442:	4a91      	ldr	r2, [pc, #580]	@ (8004688 <_printf_float+0x2cc>)
 8004444:	4b91      	ldr	r3, [pc, #580]	@ (800468c <_printf_float+0x2d0>)
 8004446:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800444a:	bf94      	ite	ls
 800444c:	4690      	movls	r8, r2
 800444e:	4698      	movhi	r8, r3
 8004450:	2303      	movs	r3, #3
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	f02b 0304 	bic.w	r3, fp, #4
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	f04f 0900 	mov.w	r9, #0
 800445e:	9700      	str	r7, [sp, #0]
 8004460:	4633      	mov	r3, r6
 8004462:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004464:	4621      	mov	r1, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f9d2 	bl	8004810 <_printf_common>
 800446c:	3001      	adds	r0, #1
 800446e:	f040 808d 	bne.w	800458c <_printf_float+0x1d0>
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	b00d      	add	sp, #52	@ 0x34
 8004478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	4640      	mov	r0, r8
 8004482:	4649      	mov	r1, r9
 8004484:	f7fc fb5a 	bl	8000b3c <__aeabi_dcmpun>
 8004488:	b140      	cbz	r0, 800449c <_printf_float+0xe0>
 800448a:	464b      	mov	r3, r9
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfbc      	itt	lt
 8004490:	232d      	movlt	r3, #45	@ 0x2d
 8004492:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004496:	4a7e      	ldr	r2, [pc, #504]	@ (8004690 <_printf_float+0x2d4>)
 8004498:	4b7e      	ldr	r3, [pc, #504]	@ (8004694 <_printf_float+0x2d8>)
 800449a:	e7d4      	b.n	8004446 <_printf_float+0x8a>
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80044a2:	9206      	str	r2, [sp, #24]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	d13b      	bne.n	8004520 <_printf_float+0x164>
 80044a8:	2306      	movs	r3, #6
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80044b0:	2300      	movs	r3, #0
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	9303      	str	r3, [sp, #12]
 80044b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80044b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80044bc:	ab09      	add	r3, sp, #36	@ 0x24
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	6861      	ldr	r1, [r4, #4]
 80044c2:	ec49 8b10 	vmov	d0, r8, r9
 80044c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80044ca:	4628      	mov	r0, r5
 80044cc:	f7ff fed6 	bl	800427c <__cvt>
 80044d0:	9b06      	ldr	r3, [sp, #24]
 80044d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80044d4:	2b47      	cmp	r3, #71	@ 0x47
 80044d6:	4680      	mov	r8, r0
 80044d8:	d129      	bne.n	800452e <_printf_float+0x172>
 80044da:	1cc8      	adds	r0, r1, #3
 80044dc:	db02      	blt.n	80044e4 <_printf_float+0x128>
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	4299      	cmp	r1, r3
 80044e2:	dd41      	ble.n	8004568 <_printf_float+0x1ac>
 80044e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80044e8:	fa5f fa8a 	uxtb.w	sl, sl
 80044ec:	3901      	subs	r1, #1
 80044ee:	4652      	mov	r2, sl
 80044f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80044f6:	f7ff ff26 	bl	8004346 <__exponent>
 80044fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044fc:	1813      	adds	r3, r2, r0
 80044fe:	2a01      	cmp	r2, #1
 8004500:	4681      	mov	r9, r0
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	dc02      	bgt.n	800450c <_printf_float+0x150>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	07d2      	lsls	r2, r2, #31
 800450a:	d501      	bpl.n	8004510 <_printf_float+0x154>
 800450c:	3301      	adds	r3, #1
 800450e:	6123      	str	r3, [r4, #16]
 8004510:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0a2      	beq.n	800445e <_printf_float+0xa2>
 8004518:	232d      	movs	r3, #45	@ 0x2d
 800451a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800451e:	e79e      	b.n	800445e <_printf_float+0xa2>
 8004520:	9a06      	ldr	r2, [sp, #24]
 8004522:	2a47      	cmp	r2, #71	@ 0x47
 8004524:	d1c2      	bne.n	80044ac <_printf_float+0xf0>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1c0      	bne.n	80044ac <_printf_float+0xf0>
 800452a:	2301      	movs	r3, #1
 800452c:	e7bd      	b.n	80044aa <_printf_float+0xee>
 800452e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004532:	d9db      	bls.n	80044ec <_printf_float+0x130>
 8004534:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004538:	d118      	bne.n	800456c <_printf_float+0x1b0>
 800453a:	2900      	cmp	r1, #0
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	dd0b      	ble.n	8004558 <_printf_float+0x19c>
 8004540:	6121      	str	r1, [r4, #16]
 8004542:	b913      	cbnz	r3, 800454a <_printf_float+0x18e>
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	07d0      	lsls	r0, r2, #31
 8004548:	d502      	bpl.n	8004550 <_printf_float+0x194>
 800454a:	3301      	adds	r3, #1
 800454c:	440b      	add	r3, r1
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004552:	f04f 0900 	mov.w	r9, #0
 8004556:	e7db      	b.n	8004510 <_printf_float+0x154>
 8004558:	b913      	cbnz	r3, 8004560 <_printf_float+0x1a4>
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	07d2      	lsls	r2, r2, #31
 800455e:	d501      	bpl.n	8004564 <_printf_float+0x1a8>
 8004560:	3302      	adds	r3, #2
 8004562:	e7f4      	b.n	800454e <_printf_float+0x192>
 8004564:	2301      	movs	r3, #1
 8004566:	e7f2      	b.n	800454e <_printf_float+0x192>
 8004568:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800456c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800456e:	4299      	cmp	r1, r3
 8004570:	db05      	blt.n	800457e <_printf_float+0x1c2>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	6121      	str	r1, [r4, #16]
 8004576:	07d8      	lsls	r0, r3, #31
 8004578:	d5ea      	bpl.n	8004550 <_printf_float+0x194>
 800457a:	1c4b      	adds	r3, r1, #1
 800457c:	e7e7      	b.n	800454e <_printf_float+0x192>
 800457e:	2900      	cmp	r1, #0
 8004580:	bfd4      	ite	le
 8004582:	f1c1 0202 	rsble	r2, r1, #2
 8004586:	2201      	movgt	r2, #1
 8004588:	4413      	add	r3, r2
 800458a:	e7e0      	b.n	800454e <_printf_float+0x192>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	055a      	lsls	r2, r3, #21
 8004590:	d407      	bmi.n	80045a2 <_printf_float+0x1e6>
 8004592:	6923      	ldr	r3, [r4, #16]
 8004594:	4642      	mov	r2, r8
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	d12b      	bne.n	80045f8 <_printf_float+0x23c>
 80045a0:	e767      	b.n	8004472 <_printf_float+0xb6>
 80045a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045a6:	f240 80dd 	bls.w	8004764 <_printf_float+0x3a8>
 80045aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	f7fc fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d033      	beq.n	8004622 <_printf_float+0x266>
 80045ba:	4a37      	ldr	r2, [pc, #220]	@ (8004698 <_printf_float+0x2dc>)
 80045bc:	2301      	movs	r3, #1
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	f43f af54 	beq.w	8004472 <_printf_float+0xb6>
 80045ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80045ce:	4543      	cmp	r3, r8
 80045d0:	db02      	blt.n	80045d8 <_printf_float+0x21c>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	07d8      	lsls	r0, r3, #31
 80045d6:	d50f      	bpl.n	80045f8 <_printf_float+0x23c>
 80045d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	f43f af45 	beq.w	8004472 <_printf_float+0xb6>
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80045f0:	f104 0a1a 	add.w	sl, r4, #26
 80045f4:	45c8      	cmp	r8, r9
 80045f6:	dc09      	bgt.n	800460c <_printf_float+0x250>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	079b      	lsls	r3, r3, #30
 80045fc:	f100 8103 	bmi.w	8004806 <_printf_float+0x44a>
 8004600:	68e0      	ldr	r0, [r4, #12]
 8004602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004604:	4298      	cmp	r0, r3
 8004606:	bfb8      	it	lt
 8004608:	4618      	movlt	r0, r3
 800460a:	e734      	b.n	8004476 <_printf_float+0xba>
 800460c:	2301      	movs	r3, #1
 800460e:	4652      	mov	r2, sl
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f af2b 	beq.w	8004472 <_printf_float+0xb6>
 800461c:	f109 0901 	add.w	r9, r9, #1
 8004620:	e7e8      	b.n	80045f4 <_printf_float+0x238>
 8004622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	dc39      	bgt.n	800469c <_printf_float+0x2e0>
 8004628:	4a1b      	ldr	r2, [pc, #108]	@ (8004698 <_printf_float+0x2dc>)
 800462a:	2301      	movs	r3, #1
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	47b8      	blx	r7
 8004632:	3001      	adds	r0, #1
 8004634:	f43f af1d 	beq.w	8004472 <_printf_float+0xb6>
 8004638:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800463c:	ea59 0303 	orrs.w	r3, r9, r3
 8004640:	d102      	bne.n	8004648 <_printf_float+0x28c>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	07d9      	lsls	r1, r3, #31
 8004646:	d5d7      	bpl.n	80045f8 <_printf_float+0x23c>
 8004648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f af0d 	beq.w	8004472 <_printf_float+0xb6>
 8004658:	f04f 0a00 	mov.w	sl, #0
 800465c:	f104 0b1a 	add.w	fp, r4, #26
 8004660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004662:	425b      	negs	r3, r3
 8004664:	4553      	cmp	r3, sl
 8004666:	dc01      	bgt.n	800466c <_printf_float+0x2b0>
 8004668:	464b      	mov	r3, r9
 800466a:	e793      	b.n	8004594 <_printf_float+0x1d8>
 800466c:	2301      	movs	r3, #1
 800466e:	465a      	mov	r2, fp
 8004670:	4631      	mov	r1, r6
 8004672:	4628      	mov	r0, r5
 8004674:	47b8      	blx	r7
 8004676:	3001      	adds	r0, #1
 8004678:	f43f aefb 	beq.w	8004472 <_printf_float+0xb6>
 800467c:	f10a 0a01 	add.w	sl, sl, #1
 8004680:	e7ee      	b.n	8004660 <_printf_float+0x2a4>
 8004682:	bf00      	nop
 8004684:	7fefffff 	.word	0x7fefffff
 8004688:	080089d0 	.word	0x080089d0
 800468c:	080089d4 	.word	0x080089d4
 8004690:	080089d8 	.word	0x080089d8
 8004694:	080089dc 	.word	0x080089dc
 8004698:	080089e0 	.word	0x080089e0
 800469c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800469e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80046a2:	4553      	cmp	r3, sl
 80046a4:	bfa8      	it	ge
 80046a6:	4653      	movge	r3, sl
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	4699      	mov	r9, r3
 80046ac:	dc36      	bgt.n	800471c <_printf_float+0x360>
 80046ae:	f04f 0b00 	mov.w	fp, #0
 80046b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b6:	f104 021a 	add.w	r2, r4, #26
 80046ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046bc:	9306      	str	r3, [sp, #24]
 80046be:	eba3 0309 	sub.w	r3, r3, r9
 80046c2:	455b      	cmp	r3, fp
 80046c4:	dc31      	bgt.n	800472a <_printf_float+0x36e>
 80046c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c8:	459a      	cmp	sl, r3
 80046ca:	dc3a      	bgt.n	8004742 <_printf_float+0x386>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d437      	bmi.n	8004742 <_printf_float+0x386>
 80046d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046d4:	ebaa 0903 	sub.w	r9, sl, r3
 80046d8:	9b06      	ldr	r3, [sp, #24]
 80046da:	ebaa 0303 	sub.w	r3, sl, r3
 80046de:	4599      	cmp	r9, r3
 80046e0:	bfa8      	it	ge
 80046e2:	4699      	movge	r9, r3
 80046e4:	f1b9 0f00 	cmp.w	r9, #0
 80046e8:	dc33      	bgt.n	8004752 <_printf_float+0x396>
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046f2:	f104 0b1a 	add.w	fp, r4, #26
 80046f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f8:	ebaa 0303 	sub.w	r3, sl, r3
 80046fc:	eba3 0309 	sub.w	r3, r3, r9
 8004700:	4543      	cmp	r3, r8
 8004702:	f77f af79 	ble.w	80045f8 <_printf_float+0x23c>
 8004706:	2301      	movs	r3, #1
 8004708:	465a      	mov	r2, fp
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	f43f aeae 	beq.w	8004472 <_printf_float+0xb6>
 8004716:	f108 0801 	add.w	r8, r8, #1
 800471a:	e7ec      	b.n	80046f6 <_printf_float+0x33a>
 800471c:	4642      	mov	r2, r8
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	d1c2      	bne.n	80046ae <_printf_float+0x2f2>
 8004728:	e6a3      	b.n	8004472 <_printf_float+0xb6>
 800472a:	2301      	movs	r3, #1
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	9206      	str	r2, [sp, #24]
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f ae9c 	beq.w	8004472 <_printf_float+0xb6>
 800473a:	9a06      	ldr	r2, [sp, #24]
 800473c:	f10b 0b01 	add.w	fp, fp, #1
 8004740:	e7bb      	b.n	80046ba <_printf_float+0x2fe>
 8004742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	d1c0      	bne.n	80046d2 <_printf_float+0x316>
 8004750:	e68f      	b.n	8004472 <_printf_float+0xb6>
 8004752:	9a06      	ldr	r2, [sp, #24]
 8004754:	464b      	mov	r3, r9
 8004756:	4442      	add	r2, r8
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	d1c3      	bne.n	80046ea <_printf_float+0x32e>
 8004762:	e686      	b.n	8004472 <_printf_float+0xb6>
 8004764:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004768:	f1ba 0f01 	cmp.w	sl, #1
 800476c:	dc01      	bgt.n	8004772 <_printf_float+0x3b6>
 800476e:	07db      	lsls	r3, r3, #31
 8004770:	d536      	bpl.n	80047e0 <_printf_float+0x424>
 8004772:	2301      	movs	r3, #1
 8004774:	4642      	mov	r2, r8
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f ae78 	beq.w	8004472 <_printf_float+0xb6>
 8004782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	f43f ae70 	beq.w	8004472 <_printf_float+0xb6>
 8004792:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004796:	2200      	movs	r2, #0
 8004798:	2300      	movs	r3, #0
 800479a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800479e:	f7fc f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 80047a2:	b9c0      	cbnz	r0, 80047d6 <_printf_float+0x41a>
 80047a4:	4653      	mov	r3, sl
 80047a6:	f108 0201 	add.w	r2, r8, #1
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	d10c      	bne.n	80047ce <_printf_float+0x412>
 80047b4:	e65d      	b.n	8004472 <_printf_float+0xb6>
 80047b6:	2301      	movs	r3, #1
 80047b8:	465a      	mov	r2, fp
 80047ba:	4631      	mov	r1, r6
 80047bc:	4628      	mov	r0, r5
 80047be:	47b8      	blx	r7
 80047c0:	3001      	adds	r0, #1
 80047c2:	f43f ae56 	beq.w	8004472 <_printf_float+0xb6>
 80047c6:	f108 0801 	add.w	r8, r8, #1
 80047ca:	45d0      	cmp	r8, sl
 80047cc:	dbf3      	blt.n	80047b6 <_printf_float+0x3fa>
 80047ce:	464b      	mov	r3, r9
 80047d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80047d4:	e6df      	b.n	8004596 <_printf_float+0x1da>
 80047d6:	f04f 0800 	mov.w	r8, #0
 80047da:	f104 0b1a 	add.w	fp, r4, #26
 80047de:	e7f4      	b.n	80047ca <_printf_float+0x40e>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4642      	mov	r2, r8
 80047e4:	e7e1      	b.n	80047aa <_printf_float+0x3ee>
 80047e6:	2301      	movs	r3, #1
 80047e8:	464a      	mov	r2, r9
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f ae3e 	beq.w	8004472 <_printf_float+0xb6>
 80047f6:	f108 0801 	add.w	r8, r8, #1
 80047fa:	68e3      	ldr	r3, [r4, #12]
 80047fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047fe:	1a5b      	subs	r3, r3, r1
 8004800:	4543      	cmp	r3, r8
 8004802:	dcf0      	bgt.n	80047e6 <_printf_float+0x42a>
 8004804:	e6fc      	b.n	8004600 <_printf_float+0x244>
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	f104 0919 	add.w	r9, r4, #25
 800480e:	e7f4      	b.n	80047fa <_printf_float+0x43e>

08004810 <_printf_common>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	4616      	mov	r6, r2
 8004816:	4698      	mov	r8, r3
 8004818:	688a      	ldr	r2, [r1, #8]
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004820:	4293      	cmp	r3, r2
 8004822:	bfb8      	it	lt
 8004824:	4613      	movlt	r3, r2
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800482c:	4607      	mov	r7, r0
 800482e:	460c      	mov	r4, r1
 8004830:	b10a      	cbz	r2, 8004836 <_printf_common+0x26>
 8004832:	3301      	adds	r3, #1
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	0699      	lsls	r1, r3, #26
 800483a:	bf42      	ittt	mi
 800483c:	6833      	ldrmi	r3, [r6, #0]
 800483e:	3302      	addmi	r3, #2
 8004840:	6033      	strmi	r3, [r6, #0]
 8004842:	6825      	ldr	r5, [r4, #0]
 8004844:	f015 0506 	ands.w	r5, r5, #6
 8004848:	d106      	bne.n	8004858 <_printf_common+0x48>
 800484a:	f104 0a19 	add.w	sl, r4, #25
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	6832      	ldr	r2, [r6, #0]
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	42ab      	cmp	r3, r5
 8004856:	dc26      	bgt.n	80048a6 <_printf_common+0x96>
 8004858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	3b00      	subs	r3, #0
 8004860:	bf18      	it	ne
 8004862:	2301      	movne	r3, #1
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	d42b      	bmi.n	80048c0 <_printf_common+0xb0>
 8004868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800486c:	4641      	mov	r1, r8
 800486e:	4638      	mov	r0, r7
 8004870:	47c8      	blx	r9
 8004872:	3001      	adds	r0, #1
 8004874:	d01e      	beq.n	80048b4 <_printf_common+0xa4>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	2b04      	cmp	r3, #4
 8004880:	bf02      	ittt	eq
 8004882:	68e5      	ldreq	r5, [r4, #12]
 8004884:	6833      	ldreq	r3, [r6, #0]
 8004886:	1aed      	subeq	r5, r5, r3
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	bf0c      	ite	eq
 800488c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004890:	2500      	movne	r5, #0
 8004892:	4293      	cmp	r3, r2
 8004894:	bfc4      	itt	gt
 8004896:	1a9b      	subgt	r3, r3, r2
 8004898:	18ed      	addgt	r5, r5, r3
 800489a:	2600      	movs	r6, #0
 800489c:	341a      	adds	r4, #26
 800489e:	42b5      	cmp	r5, r6
 80048a0:	d11a      	bne.n	80048d8 <_printf_common+0xc8>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e008      	b.n	80048b8 <_printf_common+0xa8>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4652      	mov	r2, sl
 80048aa:	4641      	mov	r1, r8
 80048ac:	4638      	mov	r0, r7
 80048ae:	47c8      	blx	r9
 80048b0:	3001      	adds	r0, #1
 80048b2:	d103      	bne.n	80048bc <_printf_common+0xac>
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	3501      	adds	r5, #1
 80048be:	e7c6      	b.n	800484e <_printf_common+0x3e>
 80048c0:	18e1      	adds	r1, r4, r3
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	2030      	movs	r0, #48	@ 0x30
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ca:	4422      	add	r2, r4
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048d4:	3302      	adds	r3, #2
 80048d6:	e7c7      	b.n	8004868 <_printf_common+0x58>
 80048d8:	2301      	movs	r3, #1
 80048da:	4622      	mov	r2, r4
 80048dc:	4641      	mov	r1, r8
 80048de:	4638      	mov	r0, r7
 80048e0:	47c8      	blx	r9
 80048e2:	3001      	adds	r0, #1
 80048e4:	d0e6      	beq.n	80048b4 <_printf_common+0xa4>
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7d9      	b.n	800489e <_printf_common+0x8e>
	...

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	7e0f      	ldrb	r7, [r1, #24]
 80048f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048f4:	2f78      	cmp	r7, #120	@ 0x78
 80048f6:	4691      	mov	r9, r2
 80048f8:	4680      	mov	r8, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	469a      	mov	sl, r3
 80048fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	@ 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d2 	beq.w	8004ab2 <_printf_i+0x1c6>
 800490e:	2f58      	cmp	r7, #88	@ 0x58
 8004910:	f000 80b9 	beq.w	8004a86 <_printf_i+0x19a>
 8004914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a101      	add	r1, pc, #4	@ (adr r1, 800492c <_printf_i+0x40>)
 8004928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004a99 	.word	0x08004a99
 800495c:	080049c3 	.word	0x080049c3
 8004960:	08004a53 	.word	0x08004a53
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004abb 	.word	0x08004abb
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c3 	.word	0x080049c3
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a5b 	.word	0x08004a5b
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e09d      	b.n	8004ad4 <_printf_i+0x1e8>
 8004998:	6833      	ldr	r3, [r6, #0]
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0xbc>
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	e003      	b.n	80049b0 <_printf_i+0xc4>
 80049a8:	0645      	lsls	r5, r0, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0xb8>
 80049ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	da03      	bge.n	80049bc <_printf_i+0xd0>
 80049b4:	232d      	movs	r3, #45	@ 0x2d
 80049b6:	426d      	negs	r5, r5
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049bc:	4859      	ldr	r0, [pc, #356]	@ (8004b24 <_printf_i+0x238>)
 80049be:	230a      	movs	r3, #10
 80049c0:	e011      	b.n	80049e6 <_printf_i+0xfa>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	0608      	lsls	r0, r1, #24
 80049c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80049cc:	d402      	bmi.n	80049d4 <_printf_i+0xe8>
 80049ce:	0649      	lsls	r1, r1, #25
 80049d0:	bf48      	it	mi
 80049d2:	b2ad      	uxthmi	r5, r5
 80049d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049d6:	4853      	ldr	r0, [pc, #332]	@ (8004b24 <_printf_i+0x238>)
 80049d8:	6033      	str	r3, [r6, #0]
 80049da:	bf14      	ite	ne
 80049dc:	230a      	movne	r3, #10
 80049de:	2308      	moveq	r3, #8
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049e6:	6866      	ldr	r6, [r4, #4]
 80049e8:	60a6      	str	r6, [r4, #8]
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	bfa2      	ittt	ge
 80049ee:	6821      	ldrge	r1, [r4, #0]
 80049f0:	f021 0104 	bicge.w	r1, r1, #4
 80049f4:	6021      	strge	r1, [r4, #0]
 80049f6:	b90d      	cbnz	r5, 80049fc <_printf_i+0x110>
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	d04b      	beq.n	8004a94 <_printf_i+0x1a8>
 80049fc:	4616      	mov	r6, r2
 80049fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a02:	fb03 5711 	mls	r7, r3, r1, r5
 8004a06:	5dc7      	ldrb	r7, [r0, r7]
 8004a08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a0c:	462f      	mov	r7, r5
 8004a0e:	42bb      	cmp	r3, r7
 8004a10:	460d      	mov	r5, r1
 8004a12:	d9f4      	bls.n	80049fe <_printf_i+0x112>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d10b      	bne.n	8004a30 <_printf_i+0x144>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	07df      	lsls	r7, r3, #31
 8004a1c:	d508      	bpl.n	8004a30 <_printf_i+0x144>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	6861      	ldr	r1, [r4, #4]
 8004a22:	4299      	cmp	r1, r3
 8004a24:	bfde      	ittt	le
 8004a26:	2330      	movle	r3, #48	@ 0x30
 8004a28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a30:	1b92      	subs	r2, r2, r6
 8004a32:	6122      	str	r2, [r4, #16]
 8004a34:	f8cd a000 	str.w	sl, [sp]
 8004a38:	464b      	mov	r3, r9
 8004a3a:	aa03      	add	r2, sp, #12
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f7ff fee6 	bl	8004810 <_printf_common>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d14a      	bne.n	8004ade <_printf_i+0x1f2>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	b004      	add	sp, #16
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f043 0320 	orr.w	r3, r3, #32
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	4833      	ldr	r0, [pc, #204]	@ (8004b28 <_printf_i+0x23c>)
 8004a5c:	2778      	movs	r7, #120	@ 0x78
 8004a5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	6831      	ldr	r1, [r6, #0]
 8004a66:	061f      	lsls	r7, r3, #24
 8004a68:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a6c:	d402      	bmi.n	8004a74 <_printf_i+0x188>
 8004a6e:	065f      	lsls	r7, r3, #25
 8004a70:	bf48      	it	mi
 8004a72:	b2ad      	uxthmi	r5, r5
 8004a74:	6031      	str	r1, [r6, #0]
 8004a76:	07d9      	lsls	r1, r3, #31
 8004a78:	bf44      	itt	mi
 8004a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7e:	6023      	strmi	r3, [r4, #0]
 8004a80:	b11d      	cbz	r5, 8004a8a <_printf_i+0x19e>
 8004a82:	2310      	movs	r3, #16
 8004a84:	e7ac      	b.n	80049e0 <_printf_i+0xf4>
 8004a86:	4827      	ldr	r0, [pc, #156]	@ (8004b24 <_printf_i+0x238>)
 8004a88:	e7e9      	b.n	8004a5e <_printf_i+0x172>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f023 0320 	bic.w	r3, r3, #32
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	e7f6      	b.n	8004a82 <_printf_i+0x196>
 8004a94:	4616      	mov	r6, r2
 8004a96:	e7bd      	b.n	8004a14 <_printf_i+0x128>
 8004a98:	6833      	ldr	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	6961      	ldr	r1, [r4, #20]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6030      	str	r0, [r6, #0]
 8004aa2:	062e      	lsls	r6, r5, #24
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0x1c0>
 8004aa8:	6019      	str	r1, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0x1c6>
 8004aac:	0668      	lsls	r0, r5, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0x1bc>
 8004ab0:	8019      	strh	r1, [r3, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	4616      	mov	r6, r2
 8004ab8:	e7bc      	b.n	8004a34 <_printf_i+0x148>
 8004aba:	6833      	ldr	r3, [r6, #0]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	6032      	str	r2, [r6, #0]
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7fb fb8a 	bl	80001e0 <memchr>
 8004acc:	b108      	cbz	r0, 8004ad2 <_printf_i+0x1e6>
 8004ace:	1b80      	subs	r0, r0, r6
 8004ad0:	6060      	str	r0, [r4, #4]
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004adc:	e7aa      	b.n	8004a34 <_printf_i+0x148>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0ad      	beq.n	8004a48 <_printf_i+0x15c>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d413      	bmi.n	8004b1a <_printf_i+0x22e>
 8004af2:	68e0      	ldr	r0, [r4, #12]
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	4298      	cmp	r0, r3
 8004af8:	bfb8      	it	lt
 8004afa:	4618      	movlt	r0, r3
 8004afc:	e7a6      	b.n	8004a4c <_printf_i+0x160>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4632      	mov	r2, r6
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	47d0      	blx	sl
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d09d      	beq.n	8004a48 <_printf_i+0x15c>
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	9903      	ldr	r1, [sp, #12]
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dcf2      	bgt.n	8004afe <_printf_i+0x212>
 8004b18:	e7eb      	b.n	8004af2 <_printf_i+0x206>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	f104 0619 	add.w	r6, r4, #25
 8004b20:	e7f5      	b.n	8004b0e <_printf_i+0x222>
 8004b22:	bf00      	nop
 8004b24:	080089e2 	.word	0x080089e2
 8004b28:	080089f3 	.word	0x080089f3

08004b2c <_scanf_float>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b087      	sub	sp, #28
 8004b32:	4617      	mov	r7, r2
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	688b      	ldr	r3, [r1, #8]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004b3e:	bf81      	itttt	hi
 8004b40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004b44:	eb03 0b05 	addhi.w	fp, r3, r5
 8004b48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004b4c:	608b      	strhi	r3, [r1, #8]
 8004b4e:	680b      	ldr	r3, [r1, #0]
 8004b50:	460a      	mov	r2, r1
 8004b52:	f04f 0500 	mov.w	r5, #0
 8004b56:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004b5a:	f842 3b1c 	str.w	r3, [r2], #28
 8004b5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b62:	4680      	mov	r8, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	bf98      	it	ls
 8004b68:	f04f 0b00 	movls.w	fp, #0
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	4616      	mov	r6, r2
 8004b70:	46aa      	mov	sl, r5
 8004b72:	46a9      	mov	r9, r5
 8004b74:	9502      	str	r5, [sp, #8]
 8004b76:	68a2      	ldr	r2, [r4, #8]
 8004b78:	b152      	cbz	r2, 8004b90 <_scanf_float+0x64>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004b80:	d864      	bhi.n	8004c4c <_scanf_float+0x120>
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d83c      	bhi.n	8004c00 <_scanf_float+0xd4>
 8004b86:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004b8a:	b2c8      	uxtb	r0, r1
 8004b8c:	280e      	cmp	r0, #14
 8004b8e:	d93a      	bls.n	8004c06 <_scanf_float+0xda>
 8004b90:	f1b9 0f00 	cmp.w	r9, #0
 8004b94:	d003      	beq.n	8004b9e <_scanf_float+0x72>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ba2:	f1ba 0f01 	cmp.w	sl, #1
 8004ba6:	f200 8117 	bhi.w	8004dd8 <_scanf_float+0x2ac>
 8004baa:	9b01      	ldr	r3, [sp, #4]
 8004bac:	429e      	cmp	r6, r3
 8004bae:	f200 8108 	bhi.w	8004dc2 <_scanf_float+0x296>
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	b007      	add	sp, #28
 8004bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004bbe:	2a0d      	cmp	r2, #13
 8004bc0:	d8e6      	bhi.n	8004b90 <_scanf_float+0x64>
 8004bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bc8 <_scanf_float+0x9c>)
 8004bc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bc8:	08004d0f 	.word	0x08004d0f
 8004bcc:	08004b91 	.word	0x08004b91
 8004bd0:	08004b91 	.word	0x08004b91
 8004bd4:	08004b91 	.word	0x08004b91
 8004bd8:	08004d6f 	.word	0x08004d6f
 8004bdc:	08004d47 	.word	0x08004d47
 8004be0:	08004b91 	.word	0x08004b91
 8004be4:	08004b91 	.word	0x08004b91
 8004be8:	08004d1d 	.word	0x08004d1d
 8004bec:	08004b91 	.word	0x08004b91
 8004bf0:	08004b91 	.word	0x08004b91
 8004bf4:	08004b91 	.word	0x08004b91
 8004bf8:	08004b91 	.word	0x08004b91
 8004bfc:	08004cd5 	.word	0x08004cd5
 8004c00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004c04:	e7db      	b.n	8004bbe <_scanf_float+0x92>
 8004c06:	290e      	cmp	r1, #14
 8004c08:	d8c2      	bhi.n	8004b90 <_scanf_float+0x64>
 8004c0a:	a001      	add	r0, pc, #4	@ (adr r0, 8004c10 <_scanf_float+0xe4>)
 8004c0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c10:	08004cc5 	.word	0x08004cc5
 8004c14:	08004b91 	.word	0x08004b91
 8004c18:	08004cc5 	.word	0x08004cc5
 8004c1c:	08004d5b 	.word	0x08004d5b
 8004c20:	08004b91 	.word	0x08004b91
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004cab 	.word	0x08004cab
 8004c2c:	08004cab 	.word	0x08004cab
 8004c30:	08004cab 	.word	0x08004cab
 8004c34:	08004cab 	.word	0x08004cab
 8004c38:	08004cab 	.word	0x08004cab
 8004c3c:	08004cab 	.word	0x08004cab
 8004c40:	08004cab 	.word	0x08004cab
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004cab 	.word	0x08004cab
 8004c4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004c4e:	d809      	bhi.n	8004c64 <_scanf_float+0x138>
 8004c50:	2b60      	cmp	r3, #96	@ 0x60
 8004c52:	d8b2      	bhi.n	8004bba <_scanf_float+0x8e>
 8004c54:	2b54      	cmp	r3, #84	@ 0x54
 8004c56:	d07b      	beq.n	8004d50 <_scanf_float+0x224>
 8004c58:	2b59      	cmp	r3, #89	@ 0x59
 8004c5a:	d199      	bne.n	8004b90 <_scanf_float+0x64>
 8004c5c:	2d07      	cmp	r5, #7
 8004c5e:	d197      	bne.n	8004b90 <_scanf_float+0x64>
 8004c60:	2508      	movs	r5, #8
 8004c62:	e02c      	b.n	8004cbe <_scanf_float+0x192>
 8004c64:	2b74      	cmp	r3, #116	@ 0x74
 8004c66:	d073      	beq.n	8004d50 <_scanf_float+0x224>
 8004c68:	2b79      	cmp	r3, #121	@ 0x79
 8004c6a:	e7f6      	b.n	8004c5a <_scanf_float+0x12e>
 8004c6c:	6821      	ldr	r1, [r4, #0]
 8004c6e:	05c8      	lsls	r0, r1, #23
 8004c70:	d51b      	bpl.n	8004caa <_scanf_float+0x17e>
 8004c72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004c76:	6021      	str	r1, [r4, #0]
 8004c78:	f109 0901 	add.w	r9, r9, #1
 8004c7c:	f1bb 0f00 	cmp.w	fp, #0
 8004c80:	d003      	beq.n	8004c8a <_scanf_float+0x15e>
 8004c82:	3201      	adds	r2, #1
 8004c84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c88:	60a2      	str	r2, [r4, #8]
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	60a3      	str	r3, [r4, #8]
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	3301      	adds	r3, #1
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	f340 8087 	ble.w	8004db0 <_scanf_float+0x284>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	e765      	b.n	8004b76 <_scanf_float+0x4a>
 8004caa:	eb1a 0105 	adds.w	r1, sl, r5
 8004cae:	f47f af6f 	bne.w	8004b90 <_scanf_float+0x64>
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004cb8:	6022      	str	r2, [r4, #0]
 8004cba:	460d      	mov	r5, r1
 8004cbc:	468a      	mov	sl, r1
 8004cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8004cc2:	e7e2      	b.n	8004c8a <_scanf_float+0x15e>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	0610      	lsls	r0, r2, #24
 8004cc8:	f57f af62 	bpl.w	8004b90 <_scanf_float+0x64>
 8004ccc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	e7f4      	b.n	8004cbe <_scanf_float+0x192>
 8004cd4:	f1ba 0f00 	cmp.w	sl, #0
 8004cd8:	d10e      	bne.n	8004cf8 <_scanf_float+0x1cc>
 8004cda:	f1b9 0f00 	cmp.w	r9, #0
 8004cde:	d10e      	bne.n	8004cfe <_scanf_float+0x1d2>
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ce6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004cea:	d108      	bne.n	8004cfe <_scanf_float+0x1d2>
 8004cec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	f04f 0a01 	mov.w	sl, #1
 8004cf6:	e7e2      	b.n	8004cbe <_scanf_float+0x192>
 8004cf8:	f1ba 0f02 	cmp.w	sl, #2
 8004cfc:	d055      	beq.n	8004daa <_scanf_float+0x27e>
 8004cfe:	2d01      	cmp	r5, #1
 8004d00:	d002      	beq.n	8004d08 <_scanf_float+0x1dc>
 8004d02:	2d04      	cmp	r5, #4
 8004d04:	f47f af44 	bne.w	8004b90 <_scanf_float+0x64>
 8004d08:	3501      	adds	r5, #1
 8004d0a:	b2ed      	uxtb	r5, r5
 8004d0c:	e7d7      	b.n	8004cbe <_scanf_float+0x192>
 8004d0e:	f1ba 0f01 	cmp.w	sl, #1
 8004d12:	f47f af3d 	bne.w	8004b90 <_scanf_float+0x64>
 8004d16:	f04f 0a02 	mov.w	sl, #2
 8004d1a:	e7d0      	b.n	8004cbe <_scanf_float+0x192>
 8004d1c:	b97d      	cbnz	r5, 8004d3e <_scanf_float+0x212>
 8004d1e:	f1b9 0f00 	cmp.w	r9, #0
 8004d22:	f47f af38 	bne.w	8004b96 <_scanf_float+0x6a>
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004d2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004d30:	f040 8108 	bne.w	8004f44 <_scanf_float+0x418>
 8004d34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	2501      	movs	r5, #1
 8004d3c:	e7bf      	b.n	8004cbe <_scanf_float+0x192>
 8004d3e:	2d03      	cmp	r5, #3
 8004d40:	d0e2      	beq.n	8004d08 <_scanf_float+0x1dc>
 8004d42:	2d05      	cmp	r5, #5
 8004d44:	e7de      	b.n	8004d04 <_scanf_float+0x1d8>
 8004d46:	2d02      	cmp	r5, #2
 8004d48:	f47f af22 	bne.w	8004b90 <_scanf_float+0x64>
 8004d4c:	2503      	movs	r5, #3
 8004d4e:	e7b6      	b.n	8004cbe <_scanf_float+0x192>
 8004d50:	2d06      	cmp	r5, #6
 8004d52:	f47f af1d 	bne.w	8004b90 <_scanf_float+0x64>
 8004d56:	2507      	movs	r5, #7
 8004d58:	e7b1      	b.n	8004cbe <_scanf_float+0x192>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	0591      	lsls	r1, r2, #22
 8004d5e:	f57f af17 	bpl.w	8004b90 <_scanf_float+0x64>
 8004d62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004d66:	6022      	str	r2, [r4, #0]
 8004d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d6c:	e7a7      	b.n	8004cbe <_scanf_float+0x192>
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004d74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004d78:	d006      	beq.n	8004d88 <_scanf_float+0x25c>
 8004d7a:	0550      	lsls	r0, r2, #21
 8004d7c:	f57f af08 	bpl.w	8004b90 <_scanf_float+0x64>
 8004d80:	f1b9 0f00 	cmp.w	r9, #0
 8004d84:	f000 80de 	beq.w	8004f44 <_scanf_float+0x418>
 8004d88:	0591      	lsls	r1, r2, #22
 8004d8a:	bf58      	it	pl
 8004d8c:	9902      	ldrpl	r1, [sp, #8]
 8004d8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d92:	bf58      	it	pl
 8004d94:	eba9 0101 	subpl.w	r1, r9, r1
 8004d98:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004d9c:	bf58      	it	pl
 8004d9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	f04f 0900 	mov.w	r9, #0
 8004da8:	e789      	b.n	8004cbe <_scanf_float+0x192>
 8004daa:	f04f 0a03 	mov.w	sl, #3
 8004dae:	e786      	b.n	8004cbe <_scanf_float+0x192>
 8004db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004db4:	4639      	mov	r1, r7
 8004db6:	4640      	mov	r0, r8
 8004db8:	4798      	blx	r3
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	f43f aedb 	beq.w	8004b76 <_scanf_float+0x4a>
 8004dc0:	e6e6      	b.n	8004b90 <_scanf_float+0x64>
 8004dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dca:	463a      	mov	r2, r7
 8004dcc:	4640      	mov	r0, r8
 8004dce:	4798      	blx	r3
 8004dd0:	6923      	ldr	r3, [r4, #16]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	e6e8      	b.n	8004baa <_scanf_float+0x7e>
 8004dd8:	1e6b      	subs	r3, r5, #1
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d824      	bhi.n	8004e28 <_scanf_float+0x2fc>
 8004dde:	2d02      	cmp	r5, #2
 8004de0:	d836      	bhi.n	8004e50 <_scanf_float+0x324>
 8004de2:	9b01      	ldr	r3, [sp, #4]
 8004de4:	429e      	cmp	r6, r3
 8004de6:	f67f aee4 	bls.w	8004bb2 <_scanf_float+0x86>
 8004dea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004dee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004df2:	463a      	mov	r2, r7
 8004df4:	4640      	mov	r0, r8
 8004df6:	4798      	blx	r3
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	e7f0      	b.n	8004de2 <_scanf_float+0x2b6>
 8004e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004e08:	463a      	mov	r2, r7
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4798      	blx	r3
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e18:	fa5f fa8a 	uxtb.w	sl, sl
 8004e1c:	f1ba 0f02 	cmp.w	sl, #2
 8004e20:	d1ee      	bne.n	8004e00 <_scanf_float+0x2d4>
 8004e22:	3d03      	subs	r5, #3
 8004e24:	b2ed      	uxtb	r5, r5
 8004e26:	1b76      	subs	r6, r6, r5
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	05da      	lsls	r2, r3, #23
 8004e2c:	d530      	bpl.n	8004e90 <_scanf_float+0x364>
 8004e2e:	055b      	lsls	r3, r3, #21
 8004e30:	d511      	bpl.n	8004e56 <_scanf_float+0x32a>
 8004e32:	9b01      	ldr	r3, [sp, #4]
 8004e34:	429e      	cmp	r6, r3
 8004e36:	f67f aebc 	bls.w	8004bb2 <_scanf_float+0x86>
 8004e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e42:	463a      	mov	r2, r7
 8004e44:	4640      	mov	r0, r8
 8004e46:	4798      	blx	r3
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	e7f0      	b.n	8004e32 <_scanf_float+0x306>
 8004e50:	46aa      	mov	sl, r5
 8004e52:	46b3      	mov	fp, r6
 8004e54:	e7de      	b.n	8004e14 <_scanf_float+0x2e8>
 8004e56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	2965      	cmp	r1, #101	@ 0x65
 8004e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e62:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	d00c      	beq.n	8004e84 <_scanf_float+0x358>
 8004e6a:	2945      	cmp	r1, #69	@ 0x45
 8004e6c:	d00a      	beq.n	8004e84 <_scanf_float+0x358>
 8004e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e72:	463a      	mov	r2, r7
 8004e74:	4640      	mov	r0, r8
 8004e76:	4798      	blx	r3
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	1eb5      	subs	r5, r6, #2
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e88:	463a      	mov	r2, r7
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4798      	blx	r3
 8004e8e:	462e      	mov	r6, r5
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	f012 0210 	ands.w	r2, r2, #16
 8004e96:	d001      	beq.n	8004e9c <_scanf_float+0x370>
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e68b      	b.n	8004bb4 <_scanf_float+0x88>
 8004e9c:	7032      	strb	r2, [r6, #0]
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	d11c      	bne.n	8004ee4 <_scanf_float+0x3b8>
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	454b      	cmp	r3, r9
 8004eae:	eba3 0209 	sub.w	r2, r3, r9
 8004eb2:	d123      	bne.n	8004efc <_scanf_float+0x3d0>
 8004eb4:	9901      	ldr	r1, [sp, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4640      	mov	r0, r8
 8004eba:	f002 fbf9 	bl	80076b0 <_strtod_r>
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	6821      	ldr	r1, [r4, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f011 0f02 	tst.w	r1, #2
 8004ec8:	ec57 6b10 	vmov	r6, r7, d0
 8004ecc:	f103 0204 	add.w	r2, r3, #4
 8004ed0:	d01f      	beq.n	8004f12 <_scanf_float+0x3e6>
 8004ed2:	9903      	ldr	r1, [sp, #12]
 8004ed4:	600a      	str	r2, [r1, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e9c3 6700 	strd	r6, r7, [r3]
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60e3      	str	r3, [r4, #12]
 8004ee2:	e7d9      	b.n	8004e98 <_scanf_float+0x36c>
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0e4      	beq.n	8004eb4 <_scanf_float+0x388>
 8004eea:	9905      	ldr	r1, [sp, #20]
 8004eec:	230a      	movs	r3, #10
 8004eee:	3101      	adds	r1, #1
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	f002 fc5d 	bl	80077b0 <_strtol_r>
 8004ef6:	9b04      	ldr	r3, [sp, #16]
 8004ef8:	9e05      	ldr	r6, [sp, #20]
 8004efa:	1ac2      	subs	r2, r0, r3
 8004efc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004f00:	429e      	cmp	r6, r3
 8004f02:	bf28      	it	cs
 8004f04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004f08:	4910      	ldr	r1, [pc, #64]	@ (8004f4c <_scanf_float+0x420>)
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 f8e4 	bl	80050d8 <siprintf>
 8004f10:	e7d0      	b.n	8004eb4 <_scanf_float+0x388>
 8004f12:	f011 0f04 	tst.w	r1, #4
 8004f16:	9903      	ldr	r1, [sp, #12]
 8004f18:	600a      	str	r2, [r1, #0]
 8004f1a:	d1dc      	bne.n	8004ed6 <_scanf_float+0x3aa>
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	4632      	mov	r2, r6
 8004f20:	463b      	mov	r3, r7
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	f7fb fe09 	bl	8000b3c <__aeabi_dcmpun>
 8004f2a:	b128      	cbz	r0, 8004f38 <_scanf_float+0x40c>
 8004f2c:	4808      	ldr	r0, [pc, #32]	@ (8004f50 <_scanf_float+0x424>)
 8004f2e:	f000 f9b7 	bl	80052a0 <nanf>
 8004f32:	ed85 0a00 	vstr	s0, [r5]
 8004f36:	e7d1      	b.n	8004edc <_scanf_float+0x3b0>
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb fe5c 	bl	8000bf8 <__aeabi_d2f>
 8004f40:	6028      	str	r0, [r5, #0]
 8004f42:	e7cb      	b.n	8004edc <_scanf_float+0x3b0>
 8004f44:	f04f 0900 	mov.w	r9, #0
 8004f48:	e629      	b.n	8004b9e <_scanf_float+0x72>
 8004f4a:	bf00      	nop
 8004f4c:	08008a04 	.word	0x08008a04
 8004f50:	08008d9d 	.word	0x08008d9d

08004f54 <std>:
 8004f54:	2300      	movs	r3, #0
 8004f56:	b510      	push	{r4, lr}
 8004f58:	4604      	mov	r4, r0
 8004f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f62:	6083      	str	r3, [r0, #8]
 8004f64:	8181      	strh	r1, [r0, #12]
 8004f66:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f68:	81c2      	strh	r2, [r0, #14]
 8004f6a:	6183      	str	r3, [r0, #24]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	2208      	movs	r2, #8
 8004f70:	305c      	adds	r0, #92	@ 0x5c
 8004f72:	f000 f914 	bl	800519e <memset>
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x58>)
 8004f78:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <std+0x5c>)
 8004f7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x60>)
 8004f80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f82:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <std+0x64>)
 8004f84:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f86:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <std+0x68>)
 8004f88:	6224      	str	r4, [r4, #32]
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d006      	beq.n	8004f9c <std+0x48>
 8004f8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f92:	4294      	cmp	r4, r2
 8004f94:	d002      	beq.n	8004f9c <std+0x48>
 8004f96:	33d0      	adds	r3, #208	@ 0xd0
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	d105      	bne.n	8004fa8 <std+0x54>
 8004f9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa4:	f000 b978 	b.w	8005298 <__retarget_lock_init_recursive>
 8004fa8:	bd10      	pop	{r4, pc}
 8004faa:	bf00      	nop
 8004fac:	08005119 	.word	0x08005119
 8004fb0:	0800513b 	.word	0x0800513b
 8004fb4:	08005173 	.word	0x08005173
 8004fb8:	08005197 	.word	0x08005197
 8004fbc:	200002c0 	.word	0x200002c0

08004fc0 <stdio_exit_handler>:
 8004fc0:	4a02      	ldr	r2, [pc, #8]	@ (8004fcc <stdio_exit_handler+0xc>)
 8004fc2:	4903      	ldr	r1, [pc, #12]	@ (8004fd0 <stdio_exit_handler+0x10>)
 8004fc4:	4803      	ldr	r0, [pc, #12]	@ (8004fd4 <stdio_exit_handler+0x14>)
 8004fc6:	f000 b869 	b.w	800509c <_fwalk_sglue>
 8004fca:	bf00      	nop
 8004fcc:	2000000c 	.word	0x2000000c
 8004fd0:	08007b6d 	.word	0x08007b6d
 8004fd4:	2000001c 	.word	0x2000001c

08004fd8 <cleanup_stdio>:
 8004fd8:	6841      	ldr	r1, [r0, #4]
 8004fda:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <cleanup_stdio+0x34>)
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	d001      	beq.n	8004fe8 <cleanup_stdio+0x10>
 8004fe4:	f002 fdc2 	bl	8007b6c <_fflush_r>
 8004fe8:	68a1      	ldr	r1, [r4, #8]
 8004fea:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <cleanup_stdio+0x38>)
 8004fec:	4299      	cmp	r1, r3
 8004fee:	d002      	beq.n	8004ff6 <cleanup_stdio+0x1e>
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f002 fdbb 	bl	8007b6c <_fflush_r>
 8004ff6:	68e1      	ldr	r1, [r4, #12]
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <cleanup_stdio+0x3c>)
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d004      	beq.n	8005008 <cleanup_stdio+0x30>
 8004ffe:	4620      	mov	r0, r4
 8005000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005004:	f002 bdb2 	b.w	8007b6c <_fflush_r>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	bf00      	nop
 800500c:	200002c0 	.word	0x200002c0
 8005010:	20000328 	.word	0x20000328
 8005014:	20000390 	.word	0x20000390

08005018 <global_stdio_init.part.0>:
 8005018:	b510      	push	{r4, lr}
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <global_stdio_init.part.0+0x30>)
 800501c:	4c0b      	ldr	r4, [pc, #44]	@ (800504c <global_stdio_init.part.0+0x34>)
 800501e:	4a0c      	ldr	r2, [pc, #48]	@ (8005050 <global_stdio_init.part.0+0x38>)
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	4620      	mov	r0, r4
 8005024:	2200      	movs	r2, #0
 8005026:	2104      	movs	r1, #4
 8005028:	f7ff ff94 	bl	8004f54 <std>
 800502c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005030:	2201      	movs	r2, #1
 8005032:	2109      	movs	r1, #9
 8005034:	f7ff ff8e 	bl	8004f54 <std>
 8005038:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800503c:	2202      	movs	r2, #2
 800503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005042:	2112      	movs	r1, #18
 8005044:	f7ff bf86 	b.w	8004f54 <std>
 8005048:	200003f8 	.word	0x200003f8
 800504c:	200002c0 	.word	0x200002c0
 8005050:	08004fc1 	.word	0x08004fc1

08005054 <__sfp_lock_acquire>:
 8005054:	4801      	ldr	r0, [pc, #4]	@ (800505c <__sfp_lock_acquire+0x8>)
 8005056:	f000 b920 	b.w	800529a <__retarget_lock_acquire_recursive>
 800505a:	bf00      	nop
 800505c:	20000401 	.word	0x20000401

08005060 <__sfp_lock_release>:
 8005060:	4801      	ldr	r0, [pc, #4]	@ (8005068 <__sfp_lock_release+0x8>)
 8005062:	f000 b91b 	b.w	800529c <__retarget_lock_release_recursive>
 8005066:	bf00      	nop
 8005068:	20000401 	.word	0x20000401

0800506c <__sinit>:
 800506c:	b510      	push	{r4, lr}
 800506e:	4604      	mov	r4, r0
 8005070:	f7ff fff0 	bl	8005054 <__sfp_lock_acquire>
 8005074:	6a23      	ldr	r3, [r4, #32]
 8005076:	b11b      	cbz	r3, 8005080 <__sinit+0x14>
 8005078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507c:	f7ff bff0 	b.w	8005060 <__sfp_lock_release>
 8005080:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <__sinit+0x28>)
 8005082:	6223      	str	r3, [r4, #32]
 8005084:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <__sinit+0x2c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f5      	bne.n	8005078 <__sinit+0xc>
 800508c:	f7ff ffc4 	bl	8005018 <global_stdio_init.part.0>
 8005090:	e7f2      	b.n	8005078 <__sinit+0xc>
 8005092:	bf00      	nop
 8005094:	08004fd9 	.word	0x08004fd9
 8005098:	200003f8 	.word	0x200003f8

0800509c <_fwalk_sglue>:
 800509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a0:	4607      	mov	r7, r0
 80050a2:	4688      	mov	r8, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	2600      	movs	r6, #0
 80050a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050ac:	f1b9 0901 	subs.w	r9, r9, #1
 80050b0:	d505      	bpl.n	80050be <_fwalk_sglue+0x22>
 80050b2:	6824      	ldr	r4, [r4, #0]
 80050b4:	2c00      	cmp	r4, #0
 80050b6:	d1f7      	bne.n	80050a8 <_fwalk_sglue+0xc>
 80050b8:	4630      	mov	r0, r6
 80050ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050be:	89ab      	ldrh	r3, [r5, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d907      	bls.n	80050d4 <_fwalk_sglue+0x38>
 80050c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c8:	3301      	adds	r3, #1
 80050ca:	d003      	beq.n	80050d4 <_fwalk_sglue+0x38>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	4306      	orrs	r6, r0
 80050d4:	3568      	adds	r5, #104	@ 0x68
 80050d6:	e7e9      	b.n	80050ac <_fwalk_sglue+0x10>

080050d8 <siprintf>:
 80050d8:	b40e      	push	{r1, r2, r3}
 80050da:	b500      	push	{lr}
 80050dc:	b09c      	sub	sp, #112	@ 0x70
 80050de:	ab1d      	add	r3, sp, #116	@ 0x74
 80050e0:	9002      	str	r0, [sp, #8]
 80050e2:	9006      	str	r0, [sp, #24]
 80050e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050e8:	4809      	ldr	r0, [pc, #36]	@ (8005110 <siprintf+0x38>)
 80050ea:	9107      	str	r1, [sp, #28]
 80050ec:	9104      	str	r1, [sp, #16]
 80050ee:	4909      	ldr	r1, [pc, #36]	@ (8005114 <siprintf+0x3c>)
 80050f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f4:	9105      	str	r1, [sp, #20]
 80050f6:	6800      	ldr	r0, [r0, #0]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	a902      	add	r1, sp, #8
 80050fc:	f002 fbb6 	bl	800786c <_svfiprintf_r>
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	b01c      	add	sp, #112	@ 0x70
 8005108:	f85d eb04 	ldr.w	lr, [sp], #4
 800510c:	b003      	add	sp, #12
 800510e:	4770      	bx	lr
 8005110:	20000018 	.word	0x20000018
 8005114:	ffff0208 	.word	0xffff0208

08005118 <__sread>:
 8005118:	b510      	push	{r4, lr}
 800511a:	460c      	mov	r4, r1
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	f000 f86c 	bl	80051fc <_read_r>
 8005124:	2800      	cmp	r0, #0
 8005126:	bfab      	itete	ge
 8005128:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800512a:	89a3      	ldrhlt	r3, [r4, #12]
 800512c:	181b      	addge	r3, r3, r0
 800512e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005132:	bfac      	ite	ge
 8005134:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005136:	81a3      	strhlt	r3, [r4, #12]
 8005138:	bd10      	pop	{r4, pc}

0800513a <__swrite>:
 800513a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	461f      	mov	r7, r3
 8005140:	898b      	ldrh	r3, [r1, #12]
 8005142:	05db      	lsls	r3, r3, #23
 8005144:	4605      	mov	r5, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4616      	mov	r6, r2
 800514a:	d505      	bpl.n	8005158 <__swrite+0x1e>
 800514c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005150:	2302      	movs	r3, #2
 8005152:	2200      	movs	r2, #0
 8005154:	f000 f840 	bl	80051d8 <_lseek_r>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	4632      	mov	r2, r6
 8005166:	463b      	mov	r3, r7
 8005168:	4628      	mov	r0, r5
 800516a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516e:	f000 b857 	b.w	8005220 <_write_r>

08005172 <__sseek>:
 8005172:	b510      	push	{r4, lr}
 8005174:	460c      	mov	r4, r1
 8005176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517a:	f000 f82d 	bl	80051d8 <_lseek_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	bf15      	itete	ne
 8005184:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005186:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800518a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800518e:	81a3      	strheq	r3, [r4, #12]
 8005190:	bf18      	it	ne
 8005192:	81a3      	strhne	r3, [r4, #12]
 8005194:	bd10      	pop	{r4, pc}

08005196 <__sclose>:
 8005196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519a:	f000 b80d 	b.w	80051b8 <_close_r>

0800519e <memset>:
 800519e:	4402      	add	r2, r0
 80051a0:	4603      	mov	r3, r0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d100      	bne.n	80051a8 <memset+0xa>
 80051a6:	4770      	bx	lr
 80051a8:	f803 1b01 	strb.w	r1, [r3], #1
 80051ac:	e7f9      	b.n	80051a2 <memset+0x4>
	...

080051b0 <_localeconv_r>:
 80051b0:	4800      	ldr	r0, [pc, #0]	@ (80051b4 <_localeconv_r+0x4>)
 80051b2:	4770      	bx	lr
 80051b4:	20000158 	.word	0x20000158

080051b8 <_close_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d06      	ldr	r5, [pc, #24]	@ (80051d4 <_close_r+0x1c>)
 80051bc:	2300      	movs	r3, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	f7fc fc38 	bl	8001a38 <_close>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_close_r+0x1a>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_close_r+0x1a>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	200003fc 	.word	0x200003fc

080051d8 <_lseek_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4d07      	ldr	r5, [pc, #28]	@ (80051f8 <_lseek_r+0x20>)
 80051dc:	4604      	mov	r4, r0
 80051de:	4608      	mov	r0, r1
 80051e0:	4611      	mov	r1, r2
 80051e2:	2200      	movs	r2, #0
 80051e4:	602a      	str	r2, [r5, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f7fc fc4d 	bl	8001a86 <_lseek>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_lseek_r+0x1e>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_lseek_r+0x1e>
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	200003fc 	.word	0x200003fc

080051fc <_read_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4d07      	ldr	r5, [pc, #28]	@ (800521c <_read_r+0x20>)
 8005200:	4604      	mov	r4, r0
 8005202:	4608      	mov	r0, r1
 8005204:	4611      	mov	r1, r2
 8005206:	2200      	movs	r2, #0
 8005208:	602a      	str	r2, [r5, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f7fc fbdb 	bl	80019c6 <_read>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_read_r+0x1e>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_read_r+0x1e>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	200003fc 	.word	0x200003fc

08005220 <_write_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d07      	ldr	r5, [pc, #28]	@ (8005240 <_write_r+0x20>)
 8005224:	4604      	mov	r4, r0
 8005226:	4608      	mov	r0, r1
 8005228:	4611      	mov	r1, r2
 800522a:	2200      	movs	r2, #0
 800522c:	602a      	str	r2, [r5, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f7fc fbe6 	bl	8001a00 <_write>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_write_r+0x1e>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_write_r+0x1e>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	200003fc 	.word	0x200003fc

08005244 <__errno>:
 8005244:	4b01      	ldr	r3, [pc, #4]	@ (800524c <__errno+0x8>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000018 	.word	0x20000018

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4d0d      	ldr	r5, [pc, #52]	@ (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	@ (800528c <__libc_init_array+0x3c>)
 8005256:	1b64      	subs	r4, r4, r5
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2600      	movs	r6, #0
 800525c:	42a6      	cmp	r6, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4d0b      	ldr	r5, [pc, #44]	@ (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	@ (8005294 <__libc_init_array+0x44>)
 8005264:	f003 fb72 	bl	800894c <_init>
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2600      	movs	r6, #0
 800526e:	42a6      	cmp	r6, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f855 3b04 	ldr.w	r3, [r5], #4
 8005278:	4798      	blx	r3
 800527a:	3601      	adds	r6, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005282:	4798      	blx	r3
 8005284:	3601      	adds	r6, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	08008e08 	.word	0x08008e08
 800528c:	08008e08 	.word	0x08008e08
 8005290:	08008e08 	.word	0x08008e08
 8005294:	08008e0c 	.word	0x08008e0c

08005298 <__retarget_lock_init_recursive>:
 8005298:	4770      	bx	lr

0800529a <__retarget_lock_acquire_recursive>:
 800529a:	4770      	bx	lr

0800529c <__retarget_lock_release_recursive>:
 800529c:	4770      	bx	lr
	...

080052a0 <nanf>:
 80052a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80052a8 <nanf+0x8>
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	7fc00000 	.word	0x7fc00000

080052ac <quorem>:
 80052ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	6903      	ldr	r3, [r0, #16]
 80052b2:	690c      	ldr	r4, [r1, #16]
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	4607      	mov	r7, r0
 80052b8:	db7e      	blt.n	80053b8 <quorem+0x10c>
 80052ba:	3c01      	subs	r4, #1
 80052bc:	f101 0814 	add.w	r8, r1, #20
 80052c0:	00a3      	lsls	r3, r4, #2
 80052c2:	f100 0514 	add.w	r5, r0, #20
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d6:	3301      	adds	r3, #1
 80052d8:	429a      	cmp	r2, r3
 80052da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052de:	fbb2 f6f3 	udiv	r6, r2, r3
 80052e2:	d32e      	bcc.n	8005342 <quorem+0x96>
 80052e4:	f04f 0a00 	mov.w	sl, #0
 80052e8:	46c4      	mov	ip, r8
 80052ea:	46ae      	mov	lr, r5
 80052ec:	46d3      	mov	fp, sl
 80052ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052f2:	b298      	uxth	r0, r3
 80052f4:	fb06 a000 	mla	r0, r6, r0, sl
 80052f8:	0c02      	lsrs	r2, r0, #16
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	fb06 2303 	mla	r3, r6, r3, r2
 8005300:	f8de 2000 	ldr.w	r2, [lr]
 8005304:	b280      	uxth	r0, r0
 8005306:	b292      	uxth	r2, r2
 8005308:	1a12      	subs	r2, r2, r0
 800530a:	445a      	add	r2, fp
 800530c:	f8de 0000 	ldr.w	r0, [lr]
 8005310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005314:	b29b      	uxth	r3, r3
 8005316:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800531a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800531e:	b292      	uxth	r2, r2
 8005320:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005324:	45e1      	cmp	r9, ip
 8005326:	f84e 2b04 	str.w	r2, [lr], #4
 800532a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800532e:	d2de      	bcs.n	80052ee <quorem+0x42>
 8005330:	9b00      	ldr	r3, [sp, #0]
 8005332:	58eb      	ldr	r3, [r5, r3]
 8005334:	b92b      	cbnz	r3, 8005342 <quorem+0x96>
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	3b04      	subs	r3, #4
 800533a:	429d      	cmp	r5, r3
 800533c:	461a      	mov	r2, r3
 800533e:	d32f      	bcc.n	80053a0 <quorem+0xf4>
 8005340:	613c      	str	r4, [r7, #16]
 8005342:	4638      	mov	r0, r7
 8005344:	f001 f9c4 	bl	80066d0 <__mcmp>
 8005348:	2800      	cmp	r0, #0
 800534a:	db25      	blt.n	8005398 <quorem+0xec>
 800534c:	4629      	mov	r1, r5
 800534e:	2000      	movs	r0, #0
 8005350:	f858 2b04 	ldr.w	r2, [r8], #4
 8005354:	f8d1 c000 	ldr.w	ip, [r1]
 8005358:	fa1f fe82 	uxth.w	lr, r2
 800535c:	fa1f f38c 	uxth.w	r3, ip
 8005360:	eba3 030e 	sub.w	r3, r3, lr
 8005364:	4403      	add	r3, r0
 8005366:	0c12      	lsrs	r2, r2, #16
 8005368:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800536c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005370:	b29b      	uxth	r3, r3
 8005372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005376:	45c1      	cmp	r9, r8
 8005378:	f841 3b04 	str.w	r3, [r1], #4
 800537c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005380:	d2e6      	bcs.n	8005350 <quorem+0xa4>
 8005382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800538a:	b922      	cbnz	r2, 8005396 <quorem+0xea>
 800538c:	3b04      	subs	r3, #4
 800538e:	429d      	cmp	r5, r3
 8005390:	461a      	mov	r2, r3
 8005392:	d30b      	bcc.n	80053ac <quorem+0x100>
 8005394:	613c      	str	r4, [r7, #16]
 8005396:	3601      	adds	r6, #1
 8005398:	4630      	mov	r0, r6
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	3b04      	subs	r3, #4
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	d1cb      	bne.n	8005340 <quorem+0x94>
 80053a8:	3c01      	subs	r4, #1
 80053aa:	e7c6      	b.n	800533a <quorem+0x8e>
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	3b04      	subs	r3, #4
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	d1ef      	bne.n	8005394 <quorem+0xe8>
 80053b4:	3c01      	subs	r4, #1
 80053b6:	e7ea      	b.n	800538e <quorem+0xe2>
 80053b8:	2000      	movs	r0, #0
 80053ba:	e7ee      	b.n	800539a <quorem+0xee>
 80053bc:	0000      	movs	r0, r0
	...

080053c0 <_dtoa_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	69c7      	ldr	r7, [r0, #28]
 80053c6:	b099      	sub	sp, #100	@ 0x64
 80053c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053cc:	ec55 4b10 	vmov	r4, r5, d0
 80053d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80053d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80053d4:	4683      	mov	fp, r0
 80053d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80053d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053da:	b97f      	cbnz	r7, 80053fc <_dtoa_r+0x3c>
 80053dc:	2010      	movs	r0, #16
 80053de:	f000 fdfd 	bl	8005fdc <malloc>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80053e8:	b920      	cbnz	r0, 80053f4 <_dtoa_r+0x34>
 80053ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005688 <_dtoa_r+0x2c8>)
 80053ec:	21ef      	movs	r1, #239	@ 0xef
 80053ee:	48a7      	ldr	r0, [pc, #668]	@ (800568c <_dtoa_r+0x2cc>)
 80053f0:	f002 fc36 	bl	8007c60 <__assert_func>
 80053f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053f8:	6007      	str	r7, [r0, #0]
 80053fa:	60c7      	str	r7, [r0, #12]
 80053fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	b159      	cbz	r1, 800541c <_dtoa_r+0x5c>
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	604a      	str	r2, [r1, #4]
 8005408:	2301      	movs	r3, #1
 800540a:	4093      	lsls	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
 800540e:	4658      	mov	r0, fp
 8005410:	f000 feda 	bl	80061c8 <_Bfree>
 8005414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	1e2b      	subs	r3, r5, #0
 800541e:	bfb9      	ittee	lt
 8005420:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005424:	9303      	strlt	r3, [sp, #12]
 8005426:	2300      	movge	r3, #0
 8005428:	6033      	strge	r3, [r6, #0]
 800542a:	9f03      	ldr	r7, [sp, #12]
 800542c:	4b98      	ldr	r3, [pc, #608]	@ (8005690 <_dtoa_r+0x2d0>)
 800542e:	bfbc      	itt	lt
 8005430:	2201      	movlt	r2, #1
 8005432:	6032      	strlt	r2, [r6, #0]
 8005434:	43bb      	bics	r3, r7
 8005436:	d112      	bne.n	800545e <_dtoa_r+0x9e>
 8005438:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800543a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005444:	4323      	orrs	r3, r4
 8005446:	f000 854d 	beq.w	8005ee4 <_dtoa_r+0xb24>
 800544a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800544c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80056a4 <_dtoa_r+0x2e4>
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 854f 	beq.w	8005ef4 <_dtoa_r+0xb34>
 8005456:	f10a 0303 	add.w	r3, sl, #3
 800545a:	f000 bd49 	b.w	8005ef0 <_dtoa_r+0xb30>
 800545e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005462:	2200      	movs	r2, #0
 8005464:	ec51 0b17 	vmov	r0, r1, d7
 8005468:	2300      	movs	r3, #0
 800546a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800546e:	f7fb fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 8005472:	4680      	mov	r8, r0
 8005474:	b158      	cbz	r0, 800548e <_dtoa_r+0xce>
 8005476:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005478:	2301      	movs	r3, #1
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800547e:	b113      	cbz	r3, 8005486 <_dtoa_r+0xc6>
 8005480:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005482:	4b84      	ldr	r3, [pc, #528]	@ (8005694 <_dtoa_r+0x2d4>)
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80056a8 <_dtoa_r+0x2e8>
 800548a:	f000 bd33 	b.w	8005ef4 <_dtoa_r+0xb34>
 800548e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005492:	aa16      	add	r2, sp, #88	@ 0x58
 8005494:	a917      	add	r1, sp, #92	@ 0x5c
 8005496:	4658      	mov	r0, fp
 8005498:	f001 fa3a 	bl	8006910 <__d2b>
 800549c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054a0:	4681      	mov	r9, r0
 80054a2:	2e00      	cmp	r6, #0
 80054a4:	d077      	beq.n	8005596 <_dtoa_r+0x1d6>
 80054a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80054ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054c0:	4619      	mov	r1, r3
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b74      	ldr	r3, [pc, #464]	@ (8005698 <_dtoa_r+0x2d8>)
 80054c6:	f7fa fee7 	bl	8000298 <__aeabi_dsub>
 80054ca:	a369      	add	r3, pc, #420	@ (adr r3, 8005670 <_dtoa_r+0x2b0>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fb f89a 	bl	8000608 <__aeabi_dmul>
 80054d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005678 <_dtoa_r+0x2b8>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fa fedf 	bl	800029c <__adddf3>
 80054de:	4604      	mov	r4, r0
 80054e0:	4630      	mov	r0, r6
 80054e2:	460d      	mov	r5, r1
 80054e4:	f7fb f826 	bl	8000534 <__aeabi_i2d>
 80054e8:	a365      	add	r3, pc, #404	@ (adr r3, 8005680 <_dtoa_r+0x2c0>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f7fb f88b 	bl	8000608 <__aeabi_dmul>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fa fecf 	bl	800029c <__adddf3>
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	f7fb fb31 	bl	8000b68 <__aeabi_d2iz>
 8005506:	2200      	movs	r2, #0
 8005508:	4607      	mov	r7, r0
 800550a:	2300      	movs	r3, #0
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fb faec 	bl	8000aec <__aeabi_dcmplt>
 8005514:	b140      	cbz	r0, 8005528 <_dtoa_r+0x168>
 8005516:	4638      	mov	r0, r7
 8005518:	f7fb f80c 	bl	8000534 <__aeabi_i2d>
 800551c:	4622      	mov	r2, r4
 800551e:	462b      	mov	r3, r5
 8005520:	f7fb fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8005524:	b900      	cbnz	r0, 8005528 <_dtoa_r+0x168>
 8005526:	3f01      	subs	r7, #1
 8005528:	2f16      	cmp	r7, #22
 800552a:	d851      	bhi.n	80055d0 <_dtoa_r+0x210>
 800552c:	4b5b      	ldr	r3, [pc, #364]	@ (800569c <_dtoa_r+0x2dc>)
 800552e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800553a:	f7fb fad7 	bl	8000aec <__aeabi_dcmplt>
 800553e:	2800      	cmp	r0, #0
 8005540:	d048      	beq.n	80055d4 <_dtoa_r+0x214>
 8005542:	3f01      	subs	r7, #1
 8005544:	2300      	movs	r3, #0
 8005546:	9312      	str	r3, [sp, #72]	@ 0x48
 8005548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800554a:	1b9b      	subs	r3, r3, r6
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	bf44      	itt	mi
 8005550:	f1c3 0801 	rsbmi	r8, r3, #1
 8005554:	2300      	movmi	r3, #0
 8005556:	9208      	str	r2, [sp, #32]
 8005558:	bf54      	ite	pl
 800555a:	f04f 0800 	movpl.w	r8, #0
 800555e:	9308      	strmi	r3, [sp, #32]
 8005560:	2f00      	cmp	r7, #0
 8005562:	db39      	blt.n	80055d8 <_dtoa_r+0x218>
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005568:	443b      	add	r3, r7
 800556a:	9308      	str	r3, [sp, #32]
 800556c:	2300      	movs	r3, #0
 800556e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005572:	2b09      	cmp	r3, #9
 8005574:	d864      	bhi.n	8005640 <_dtoa_r+0x280>
 8005576:	2b05      	cmp	r3, #5
 8005578:	bfc4      	itt	gt
 800557a:	3b04      	subgt	r3, #4
 800557c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800557e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005580:	f1a3 0302 	sub.w	r3, r3, #2
 8005584:	bfcc      	ite	gt
 8005586:	2400      	movgt	r4, #0
 8005588:	2401      	movle	r4, #1
 800558a:	2b03      	cmp	r3, #3
 800558c:	d863      	bhi.n	8005656 <_dtoa_r+0x296>
 800558e:	e8df f003 	tbb	[pc, r3]
 8005592:	372a      	.short	0x372a
 8005594:	5535      	.short	0x5535
 8005596:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800559a:	441e      	add	r6, r3
 800559c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	bfc1      	itttt	gt
 80055a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055a8:	409f      	lslgt	r7, r3
 80055aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055b2:	bfd6      	itet	le
 80055b4:	f1c3 0320 	rsble	r3, r3, #32
 80055b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80055bc:	fa04 f003 	lslle.w	r0, r4, r3
 80055c0:	f7fa ffa8 	bl	8000514 <__aeabi_ui2d>
 80055c4:	2201      	movs	r2, #1
 80055c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055ca:	3e01      	subs	r6, #1
 80055cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80055ce:	e777      	b.n	80054c0 <_dtoa_r+0x100>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e7b8      	b.n	8005546 <_dtoa_r+0x186>
 80055d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80055d6:	e7b7      	b.n	8005548 <_dtoa_r+0x188>
 80055d8:	427b      	negs	r3, r7
 80055da:	930a      	str	r3, [sp, #40]	@ 0x28
 80055dc:	2300      	movs	r3, #0
 80055de:	eba8 0807 	sub.w	r8, r8, r7
 80055e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055e4:	e7c4      	b.n	8005570 <_dtoa_r+0x1b0>
 80055e6:	2300      	movs	r3, #0
 80055e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dc35      	bgt.n	800565c <_dtoa_r+0x29c>
 80055f0:	2301      	movs	r3, #1
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	9307      	str	r3, [sp, #28]
 80055f6:	461a      	mov	r2, r3
 80055f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80055fa:	e00b      	b.n	8005614 <_dtoa_r+0x254>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e7f3      	b.n	80055e8 <_dtoa_r+0x228>
 8005600:	2300      	movs	r3, #0
 8005602:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	9307      	str	r3, [sp, #28]
 8005610:	bfb8      	it	lt
 8005612:	2301      	movlt	r3, #1
 8005614:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005618:	2100      	movs	r1, #0
 800561a:	2204      	movs	r2, #4
 800561c:	f102 0514 	add.w	r5, r2, #20
 8005620:	429d      	cmp	r5, r3
 8005622:	d91f      	bls.n	8005664 <_dtoa_r+0x2a4>
 8005624:	6041      	str	r1, [r0, #4]
 8005626:	4658      	mov	r0, fp
 8005628:	f000 fd8e 	bl	8006148 <_Balloc>
 800562c:	4682      	mov	sl, r0
 800562e:	2800      	cmp	r0, #0
 8005630:	d13c      	bne.n	80056ac <_dtoa_r+0x2ec>
 8005632:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <_dtoa_r+0x2e0>)
 8005634:	4602      	mov	r2, r0
 8005636:	f240 11af 	movw	r1, #431	@ 0x1af
 800563a:	e6d8      	b.n	80053ee <_dtoa_r+0x2e>
 800563c:	2301      	movs	r3, #1
 800563e:	e7e0      	b.n	8005602 <_dtoa_r+0x242>
 8005640:	2401      	movs	r4, #1
 8005642:	2300      	movs	r3, #0
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	2200      	movs	r2, #0
 8005652:	2312      	movs	r3, #18
 8005654:	e7d0      	b.n	80055f8 <_dtoa_r+0x238>
 8005656:	2301      	movs	r3, #1
 8005658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800565a:	e7f5      	b.n	8005648 <_dtoa_r+0x288>
 800565c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	e7d7      	b.n	8005614 <_dtoa_r+0x254>
 8005664:	3101      	adds	r1, #1
 8005666:	0052      	lsls	r2, r2, #1
 8005668:	e7d8      	b.n	800561c <_dtoa_r+0x25c>
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	08008a16 	.word	0x08008a16
 800568c:	08008a2d 	.word	0x08008a2d
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	080089e1 	.word	0x080089e1
 8005698:	3ff80000 	.word	0x3ff80000
 800569c:	08008b28 	.word	0x08008b28
 80056a0:	08008a85 	.word	0x08008a85
 80056a4:	08008a12 	.word	0x08008a12
 80056a8:	080089e0 	.word	0x080089e0
 80056ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056b0:	6018      	str	r0, [r3, #0]
 80056b2:	9b07      	ldr	r3, [sp, #28]
 80056b4:	2b0e      	cmp	r3, #14
 80056b6:	f200 80a4 	bhi.w	8005802 <_dtoa_r+0x442>
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	f000 80a1 	beq.w	8005802 <_dtoa_r+0x442>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	dd33      	ble.n	800572c <_dtoa_r+0x36c>
 80056c4:	4bad      	ldr	r3, [pc, #692]	@ (800597c <_dtoa_r+0x5bc>)
 80056c6:	f007 020f 	and.w	r2, r7, #15
 80056ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ce:	ed93 7b00 	vldr	d7, [r3]
 80056d2:	05f8      	lsls	r0, r7, #23
 80056d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80056d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056dc:	d516      	bpl.n	800570c <_dtoa_r+0x34c>
 80056de:	4ba8      	ldr	r3, [pc, #672]	@ (8005980 <_dtoa_r+0x5c0>)
 80056e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056e8:	f7fb f8b8 	bl	800085c <__aeabi_ddiv>
 80056ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f0:	f004 040f 	and.w	r4, r4, #15
 80056f4:	2603      	movs	r6, #3
 80056f6:	4da2      	ldr	r5, [pc, #648]	@ (8005980 <_dtoa_r+0x5c0>)
 80056f8:	b954      	cbnz	r4, 8005710 <_dtoa_r+0x350>
 80056fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005702:	f7fb f8ab 	bl	800085c <__aeabi_ddiv>
 8005706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800570a:	e028      	b.n	800575e <_dtoa_r+0x39e>
 800570c:	2602      	movs	r6, #2
 800570e:	e7f2      	b.n	80056f6 <_dtoa_r+0x336>
 8005710:	07e1      	lsls	r1, r4, #31
 8005712:	d508      	bpl.n	8005726 <_dtoa_r+0x366>
 8005714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005718:	e9d5 2300 	ldrd	r2, r3, [r5]
 800571c:	f7fa ff74 	bl	8000608 <__aeabi_dmul>
 8005720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005724:	3601      	adds	r6, #1
 8005726:	1064      	asrs	r4, r4, #1
 8005728:	3508      	adds	r5, #8
 800572a:	e7e5      	b.n	80056f8 <_dtoa_r+0x338>
 800572c:	f000 80d2 	beq.w	80058d4 <_dtoa_r+0x514>
 8005730:	427c      	negs	r4, r7
 8005732:	4b92      	ldr	r3, [pc, #584]	@ (800597c <_dtoa_r+0x5bc>)
 8005734:	4d92      	ldr	r5, [pc, #584]	@ (8005980 <_dtoa_r+0x5c0>)
 8005736:	f004 020f 	and.w	r2, r4, #15
 800573a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005746:	f7fa ff5f 	bl	8000608 <__aeabi_dmul>
 800574a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574e:	1124      	asrs	r4, r4, #4
 8005750:	2300      	movs	r3, #0
 8005752:	2602      	movs	r6, #2
 8005754:	2c00      	cmp	r4, #0
 8005756:	f040 80b2 	bne.w	80058be <_dtoa_r+0x4fe>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1d3      	bne.n	8005706 <_dtoa_r+0x346>
 800575e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005760:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80b7 	beq.w	80058d8 <_dtoa_r+0x518>
 800576a:	4b86      	ldr	r3, [pc, #536]	@ (8005984 <_dtoa_r+0x5c4>)
 800576c:	2200      	movs	r2, #0
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f9bb 	bl	8000aec <__aeabi_dcmplt>
 8005776:	2800      	cmp	r0, #0
 8005778:	f000 80ae 	beq.w	80058d8 <_dtoa_r+0x518>
 800577c:	9b07      	ldr	r3, [sp, #28]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 80aa 	beq.w	80058d8 <_dtoa_r+0x518>
 8005784:	9b00      	ldr	r3, [sp, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd37      	ble.n	80057fa <_dtoa_r+0x43a>
 800578a:	1e7b      	subs	r3, r7, #1
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	4620      	mov	r0, r4
 8005790:	4b7d      	ldr	r3, [pc, #500]	@ (8005988 <_dtoa_r+0x5c8>)
 8005792:	2200      	movs	r2, #0
 8005794:	4629      	mov	r1, r5
 8005796:	f7fa ff37 	bl	8000608 <__aeabi_dmul>
 800579a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800579e:	9c00      	ldr	r4, [sp, #0]
 80057a0:	3601      	adds	r6, #1
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7fa fec6 	bl	8000534 <__aeabi_i2d>
 80057a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ac:	f7fa ff2c 	bl	8000608 <__aeabi_dmul>
 80057b0:	4b76      	ldr	r3, [pc, #472]	@ (800598c <_dtoa_r+0x5cc>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	f7fa fd72 	bl	800029c <__adddf3>
 80057b8:	4605      	mov	r5, r0
 80057ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057be:	2c00      	cmp	r4, #0
 80057c0:	f040 808d 	bne.w	80058de <_dtoa_r+0x51e>
 80057c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c8:	4b71      	ldr	r3, [pc, #452]	@ (8005990 <_dtoa_r+0x5d0>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f7fa fd64 	bl	8000298 <__aeabi_dsub>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057d8:	462a      	mov	r2, r5
 80057da:	4633      	mov	r3, r6
 80057dc:	f7fb f9a4 	bl	8000b28 <__aeabi_dcmpgt>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f040 828b 	bne.w	8005cfc <_dtoa_r+0x93c>
 80057e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ea:	462a      	mov	r2, r5
 80057ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057f0:	f7fb f97c 	bl	8000aec <__aeabi_dcmplt>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	f040 8128 	bne.w	8005a4a <_dtoa_r+0x68a>
 80057fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005802:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005804:	2b00      	cmp	r3, #0
 8005806:	f2c0 815a 	blt.w	8005abe <_dtoa_r+0x6fe>
 800580a:	2f0e      	cmp	r7, #14
 800580c:	f300 8157 	bgt.w	8005abe <_dtoa_r+0x6fe>
 8005810:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <_dtoa_r+0x5bc>)
 8005812:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005816:	ed93 7b00 	vldr	d7, [r3]
 800581a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	ed8d 7b00 	vstr	d7, [sp]
 8005822:	da03      	bge.n	800582c <_dtoa_r+0x46c>
 8005824:	9b07      	ldr	r3, [sp, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f340 8101 	ble.w	8005a2e <_dtoa_r+0x66e>
 800582c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005830:	4656      	mov	r6, sl
 8005832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb f80f 	bl	800085c <__aeabi_ddiv>
 800583e:	f7fb f993 	bl	8000b68 <__aeabi_d2iz>
 8005842:	4680      	mov	r8, r0
 8005844:	f7fa fe76 	bl	8000534 <__aeabi_i2d>
 8005848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800584c:	f7fa fedc 	bl	8000608 <__aeabi_dmul>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4620      	mov	r0, r4
 8005856:	4629      	mov	r1, r5
 8005858:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800585c:	f7fa fd1c 	bl	8000298 <__aeabi_dsub>
 8005860:	f806 4b01 	strb.w	r4, [r6], #1
 8005864:	9d07      	ldr	r5, [sp, #28]
 8005866:	eba6 040a 	sub.w	r4, r6, sl
 800586a:	42a5      	cmp	r5, r4
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	f040 8117 	bne.w	8005aa2 <_dtoa_r+0x6e2>
 8005874:	f7fa fd12 	bl	800029c <__adddf3>
 8005878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	f7fb f952 	bl	8000b28 <__aeabi_dcmpgt>
 8005884:	2800      	cmp	r0, #0
 8005886:	f040 80f9 	bne.w	8005a7c <_dtoa_r+0x6bc>
 800588a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fb f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8005896:	b118      	cbz	r0, 80058a0 <_dtoa_r+0x4e0>
 8005898:	f018 0f01 	tst.w	r8, #1
 800589c:	f040 80ee 	bne.w	8005a7c <_dtoa_r+0x6bc>
 80058a0:	4649      	mov	r1, r9
 80058a2:	4658      	mov	r0, fp
 80058a4:	f000 fc90 	bl	80061c8 <_Bfree>
 80058a8:	2300      	movs	r3, #0
 80058aa:	7033      	strb	r3, [r6, #0]
 80058ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058ae:	3701      	adds	r7, #1
 80058b0:	601f      	str	r7, [r3, #0]
 80058b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 831d 	beq.w	8005ef4 <_dtoa_r+0xb34>
 80058ba:	601e      	str	r6, [r3, #0]
 80058bc:	e31a      	b.n	8005ef4 <_dtoa_r+0xb34>
 80058be:	07e2      	lsls	r2, r4, #31
 80058c0:	d505      	bpl.n	80058ce <_dtoa_r+0x50e>
 80058c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058c6:	f7fa fe9f 	bl	8000608 <__aeabi_dmul>
 80058ca:	3601      	adds	r6, #1
 80058cc:	2301      	movs	r3, #1
 80058ce:	1064      	asrs	r4, r4, #1
 80058d0:	3508      	adds	r5, #8
 80058d2:	e73f      	b.n	8005754 <_dtoa_r+0x394>
 80058d4:	2602      	movs	r6, #2
 80058d6:	e742      	b.n	800575e <_dtoa_r+0x39e>
 80058d8:	9c07      	ldr	r4, [sp, #28]
 80058da:	9704      	str	r7, [sp, #16]
 80058dc:	e761      	b.n	80057a2 <_dtoa_r+0x3e2>
 80058de:	4b27      	ldr	r3, [pc, #156]	@ (800597c <_dtoa_r+0x5bc>)
 80058e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ea:	4454      	add	r4, sl
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d053      	beq.n	8005998 <_dtoa_r+0x5d8>
 80058f0:	4928      	ldr	r1, [pc, #160]	@ (8005994 <_dtoa_r+0x5d4>)
 80058f2:	2000      	movs	r0, #0
 80058f4:	f7fa ffb2 	bl	800085c <__aeabi_ddiv>
 80058f8:	4633      	mov	r3, r6
 80058fa:	462a      	mov	r2, r5
 80058fc:	f7fa fccc 	bl	8000298 <__aeabi_dsub>
 8005900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005904:	4656      	mov	r6, sl
 8005906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590a:	f7fb f92d 	bl	8000b68 <__aeabi_d2iz>
 800590e:	4605      	mov	r5, r0
 8005910:	f7fa fe10 	bl	8000534 <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800591c:	f7fa fcbc 	bl	8000298 <__aeabi_dsub>
 8005920:	3530      	adds	r5, #48	@ 0x30
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800592a:	f806 5b01 	strb.w	r5, [r6], #1
 800592e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005932:	f7fb f8db 	bl	8000aec <__aeabi_dcmplt>
 8005936:	2800      	cmp	r0, #0
 8005938:	d171      	bne.n	8005a1e <_dtoa_r+0x65e>
 800593a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800593e:	4911      	ldr	r1, [pc, #68]	@ (8005984 <_dtoa_r+0x5c4>)
 8005940:	2000      	movs	r0, #0
 8005942:	f7fa fca9 	bl	8000298 <__aeabi_dsub>
 8005946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800594a:	f7fb f8cf 	bl	8000aec <__aeabi_dcmplt>
 800594e:	2800      	cmp	r0, #0
 8005950:	f040 8095 	bne.w	8005a7e <_dtoa_r+0x6be>
 8005954:	42a6      	cmp	r6, r4
 8005956:	f43f af50 	beq.w	80057fa <_dtoa_r+0x43a>
 800595a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800595e:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <_dtoa_r+0x5c8>)
 8005960:	2200      	movs	r2, #0
 8005962:	f7fa fe51 	bl	8000608 <__aeabi_dmul>
 8005966:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <_dtoa_r+0x5c8>)
 8005968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800596c:	2200      	movs	r2, #0
 800596e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005972:	f7fa fe49 	bl	8000608 <__aeabi_dmul>
 8005976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800597a:	e7c4      	b.n	8005906 <_dtoa_r+0x546>
 800597c:	08008b28 	.word	0x08008b28
 8005980:	08008b00 	.word	0x08008b00
 8005984:	3ff00000 	.word	0x3ff00000
 8005988:	40240000 	.word	0x40240000
 800598c:	401c0000 	.word	0x401c0000
 8005990:	40140000 	.word	0x40140000
 8005994:	3fe00000 	.word	0x3fe00000
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	f7fa fe34 	bl	8000608 <__aeabi_dmul>
 80059a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80059a6:	4656      	mov	r6, sl
 80059a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ac:	f7fb f8dc 	bl	8000b68 <__aeabi_d2iz>
 80059b0:	4605      	mov	r5, r0
 80059b2:	f7fa fdbf 	bl	8000534 <__aeabi_i2d>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059be:	f7fa fc6b 	bl	8000298 <__aeabi_dsub>
 80059c2:	3530      	adds	r5, #48	@ 0x30
 80059c4:	f806 5b01 	strb.w	r5, [r6], #1
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	42a6      	cmp	r6, r4
 80059ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	d124      	bne.n	8005a22 <_dtoa_r+0x662>
 80059d8:	4bac      	ldr	r3, [pc, #688]	@ (8005c8c <_dtoa_r+0x8cc>)
 80059da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059de:	f7fa fc5d 	bl	800029c <__adddf3>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ea:	f7fb f89d 	bl	8000b28 <__aeabi_dcmpgt>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d145      	bne.n	8005a7e <_dtoa_r+0x6be>
 80059f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059f6:	49a5      	ldr	r1, [pc, #660]	@ (8005c8c <_dtoa_r+0x8cc>)
 80059f8:	2000      	movs	r0, #0
 80059fa:	f7fa fc4d 	bl	8000298 <__aeabi_dsub>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a06:	f7fb f871 	bl	8000aec <__aeabi_dcmplt>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f43f aef5 	beq.w	80057fa <_dtoa_r+0x43a>
 8005a10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005a12:	1e73      	subs	r3, r6, #1
 8005a14:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a1a:	2b30      	cmp	r3, #48	@ 0x30
 8005a1c:	d0f8      	beq.n	8005a10 <_dtoa_r+0x650>
 8005a1e:	9f04      	ldr	r7, [sp, #16]
 8005a20:	e73e      	b.n	80058a0 <_dtoa_r+0x4e0>
 8005a22:	4b9b      	ldr	r3, [pc, #620]	@ (8005c90 <_dtoa_r+0x8d0>)
 8005a24:	f7fa fdf0 	bl	8000608 <__aeabi_dmul>
 8005a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2c:	e7bc      	b.n	80059a8 <_dtoa_r+0x5e8>
 8005a2e:	d10c      	bne.n	8005a4a <_dtoa_r+0x68a>
 8005a30:	4b98      	ldr	r3, [pc, #608]	@ (8005c94 <_dtoa_r+0x8d4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a38:	f7fa fde6 	bl	8000608 <__aeabi_dmul>
 8005a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a40:	f7fb f868 	bl	8000b14 <__aeabi_dcmpge>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f000 8157 	beq.w	8005cf8 <_dtoa_r+0x938>
 8005a4a:	2400      	movs	r4, #0
 8005a4c:	4625      	mov	r5, r4
 8005a4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a50:	43db      	mvns	r3, r3
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	4656      	mov	r6, sl
 8005a56:	2700      	movs	r7, #0
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4658      	mov	r0, fp
 8005a5c:	f000 fbb4 	bl	80061c8 <_Bfree>
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	d0dc      	beq.n	8005a1e <_dtoa_r+0x65e>
 8005a64:	b12f      	cbz	r7, 8005a72 <_dtoa_r+0x6b2>
 8005a66:	42af      	cmp	r7, r5
 8005a68:	d003      	beq.n	8005a72 <_dtoa_r+0x6b2>
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 fbab 	bl	80061c8 <_Bfree>
 8005a72:	4629      	mov	r1, r5
 8005a74:	4658      	mov	r0, fp
 8005a76:	f000 fba7 	bl	80061c8 <_Bfree>
 8005a7a:	e7d0      	b.n	8005a1e <_dtoa_r+0x65e>
 8005a7c:	9704      	str	r7, [sp, #16]
 8005a7e:	4633      	mov	r3, r6
 8005a80:	461e      	mov	r6, r3
 8005a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a86:	2a39      	cmp	r2, #57	@ 0x39
 8005a88:	d107      	bne.n	8005a9a <_dtoa_r+0x6da>
 8005a8a:	459a      	cmp	sl, r3
 8005a8c:	d1f8      	bne.n	8005a80 <_dtoa_r+0x6c0>
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	3201      	adds	r2, #1
 8005a92:	9204      	str	r2, [sp, #16]
 8005a94:	2230      	movs	r2, #48	@ 0x30
 8005a96:	f88a 2000 	strb.w	r2, [sl]
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e7bd      	b.n	8005a1e <_dtoa_r+0x65e>
 8005aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8005c90 <_dtoa_r+0x8d0>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f7fa fdaf 	bl	8000608 <__aeabi_dmul>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	f7fb f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f43f aebb 	beq.w	8005832 <_dtoa_r+0x472>
 8005abc:	e6f0      	b.n	80058a0 <_dtoa_r+0x4e0>
 8005abe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	f000 80db 	beq.w	8005c7c <_dtoa_r+0x8bc>
 8005ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac8:	2a01      	cmp	r2, #1
 8005aca:	f300 80bf 	bgt.w	8005c4c <_dtoa_r+0x88c>
 8005ace:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	f000 80b7 	beq.w	8005c44 <_dtoa_r+0x884>
 8005ad6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ada:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005adc:	4646      	mov	r6, r8
 8005ade:	9a08      	ldr	r2, [sp, #32]
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	441a      	add	r2, r3
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	4498      	add	r8, r3
 8005ae8:	9208      	str	r2, [sp, #32]
 8005aea:	f000 fc6b 	bl	80063c4 <__i2b>
 8005aee:	4605      	mov	r5, r0
 8005af0:	b15e      	cbz	r6, 8005b0a <_dtoa_r+0x74a>
 8005af2:	9b08      	ldr	r3, [sp, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dd08      	ble.n	8005b0a <_dtoa_r+0x74a>
 8005af8:	42b3      	cmp	r3, r6
 8005afa:	9a08      	ldr	r2, [sp, #32]
 8005afc:	bfa8      	it	ge
 8005afe:	4633      	movge	r3, r6
 8005b00:	eba8 0803 	sub.w	r8, r8, r3
 8005b04:	1af6      	subs	r6, r6, r3
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	9308      	str	r3, [sp, #32]
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b0c:	b1f3      	cbz	r3, 8005b4c <_dtoa_r+0x78c>
 8005b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80b7 	beq.w	8005c84 <_dtoa_r+0x8c4>
 8005b16:	b18c      	cbz	r4, 8005b3c <_dtoa_r+0x77c>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4658      	mov	r0, fp
 8005b1e:	f000 fd11 	bl	8006544 <__pow5mult>
 8005b22:	464a      	mov	r2, r9
 8005b24:	4601      	mov	r1, r0
 8005b26:	4605      	mov	r5, r0
 8005b28:	4658      	mov	r0, fp
 8005b2a:	f000 fc61 	bl	80063f0 <__multiply>
 8005b2e:	4649      	mov	r1, r9
 8005b30:	9004      	str	r0, [sp, #16]
 8005b32:	4658      	mov	r0, fp
 8005b34:	f000 fb48 	bl	80061c8 <_Bfree>
 8005b38:	9b04      	ldr	r3, [sp, #16]
 8005b3a:	4699      	mov	r9, r3
 8005b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b3e:	1b1a      	subs	r2, r3, r4
 8005b40:	d004      	beq.n	8005b4c <_dtoa_r+0x78c>
 8005b42:	4649      	mov	r1, r9
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 fcfd 	bl	8006544 <__pow5mult>
 8005b4a:	4681      	mov	r9, r0
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4658      	mov	r0, fp
 8005b50:	f000 fc38 	bl	80063c4 <__i2b>
 8005b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b56:	4604      	mov	r4, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 81cf 	beq.w	8005efc <_dtoa_r+0xb3c>
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4601      	mov	r1, r0
 8005b62:	4658      	mov	r0, fp
 8005b64:	f000 fcee 	bl	8006544 <__pow5mult>
 8005b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	f300 8095 	bgt.w	8005c9c <_dtoa_r+0x8dc>
 8005b72:	9b02      	ldr	r3, [sp, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 8087 	bne.w	8005c88 <_dtoa_r+0x8c8>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 8089 	bne.w	8005c98 <_dtoa_r+0x8d8>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	051b      	lsls	r3, r3, #20
 8005b90:	b12b      	cbz	r3, 8005b9e <_dtoa_r+0x7de>
 8005b92:	9b08      	ldr	r3, [sp, #32]
 8005b94:	3301      	adds	r3, #1
 8005b96:	9308      	str	r3, [sp, #32]
 8005b98:	f108 0801 	add.w	r8, r8, #1
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 81b0 	beq.w	8005f08 <_dtoa_r+0xb48>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bae:	6918      	ldr	r0, [r3, #16]
 8005bb0:	f000 fbbc 	bl	800632c <__hi0bits>
 8005bb4:	f1c0 0020 	rsb	r0, r0, #32
 8005bb8:	9b08      	ldr	r3, [sp, #32]
 8005bba:	4418      	add	r0, r3
 8005bbc:	f010 001f 	ands.w	r0, r0, #31
 8005bc0:	d077      	beq.n	8005cb2 <_dtoa_r+0x8f2>
 8005bc2:	f1c0 0320 	rsb	r3, r0, #32
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	dd6b      	ble.n	8005ca2 <_dtoa_r+0x8e2>
 8005bca:	9b08      	ldr	r3, [sp, #32]
 8005bcc:	f1c0 001c 	rsb	r0, r0, #28
 8005bd0:	4403      	add	r3, r0
 8005bd2:	4480      	add	r8, r0
 8005bd4:	4406      	add	r6, r0
 8005bd6:	9308      	str	r3, [sp, #32]
 8005bd8:	f1b8 0f00 	cmp.w	r8, #0
 8005bdc:	dd05      	ble.n	8005bea <_dtoa_r+0x82a>
 8005bde:	4649      	mov	r1, r9
 8005be0:	4642      	mov	r2, r8
 8005be2:	4658      	mov	r0, fp
 8005be4:	f000 fd08 	bl	80065f8 <__lshift>
 8005be8:	4681      	mov	r9, r0
 8005bea:	9b08      	ldr	r3, [sp, #32]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dd05      	ble.n	8005bfc <_dtoa_r+0x83c>
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4658      	mov	r0, fp
 8005bf6:	f000 fcff 	bl	80065f8 <__lshift>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d059      	beq.n	8005cb6 <_dtoa_r+0x8f6>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4648      	mov	r0, r9
 8005c06:	f000 fd63 	bl	80066d0 <__mcmp>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	da53      	bge.n	8005cb6 <_dtoa_r+0x8f6>
 8005c0e:	1e7b      	subs	r3, r7, #1
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	4649      	mov	r1, r9
 8005c14:	2300      	movs	r3, #0
 8005c16:	220a      	movs	r2, #10
 8005c18:	4658      	mov	r0, fp
 8005c1a:	f000 faf7 	bl	800620c <__multadd>
 8005c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c20:	4681      	mov	r9, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8172 	beq.w	8005f0c <_dtoa_r+0xb4c>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	220a      	movs	r2, #10
 8005c2e:	4658      	mov	r0, fp
 8005c30:	f000 faec 	bl	800620c <__multadd>
 8005c34:	9b00      	ldr	r3, [sp, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	4605      	mov	r5, r0
 8005c3a:	dc67      	bgt.n	8005d0c <_dtoa_r+0x94c>
 8005c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	dc41      	bgt.n	8005cc6 <_dtoa_r+0x906>
 8005c42:	e063      	b.n	8005d0c <_dtoa_r+0x94c>
 8005c44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c4a:	e746      	b.n	8005ada <_dtoa_r+0x71a>
 8005c4c:	9b07      	ldr	r3, [sp, #28]
 8005c4e:	1e5c      	subs	r4, r3, #1
 8005c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	bfbf      	itttt	lt
 8005c56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c5c:	1ae3      	sublt	r3, r4, r3
 8005c5e:	bfb4      	ite	lt
 8005c60:	18d2      	addlt	r2, r2, r3
 8005c62:	1b1c      	subge	r4, r3, r4
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	bfbc      	itt	lt
 8005c68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c6a:	2400      	movlt	r4, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfb5      	itete	lt
 8005c70:	eba8 0603 	sublt.w	r6, r8, r3
 8005c74:	9b07      	ldrge	r3, [sp, #28]
 8005c76:	2300      	movlt	r3, #0
 8005c78:	4646      	movge	r6, r8
 8005c7a:	e730      	b.n	8005ade <_dtoa_r+0x71e>
 8005c7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c80:	4646      	mov	r6, r8
 8005c82:	e735      	b.n	8005af0 <_dtoa_r+0x730>
 8005c84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c86:	e75c      	b.n	8005b42 <_dtoa_r+0x782>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e788      	b.n	8005b9e <_dtoa_r+0x7de>
 8005c8c:	3fe00000 	.word	0x3fe00000
 8005c90:	40240000 	.word	0x40240000
 8005c94:	40140000 	.word	0x40140000
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	e780      	b.n	8005b9e <_dtoa_r+0x7de>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ca0:	e782      	b.n	8005ba8 <_dtoa_r+0x7e8>
 8005ca2:	d099      	beq.n	8005bd8 <_dtoa_r+0x818>
 8005ca4:	9a08      	ldr	r2, [sp, #32]
 8005ca6:	331c      	adds	r3, #28
 8005ca8:	441a      	add	r2, r3
 8005caa:	4498      	add	r8, r3
 8005cac:	441e      	add	r6, r3
 8005cae:	9208      	str	r2, [sp, #32]
 8005cb0:	e792      	b.n	8005bd8 <_dtoa_r+0x818>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	e7f6      	b.n	8005ca4 <_dtoa_r+0x8e4>
 8005cb6:	9b07      	ldr	r3, [sp, #28]
 8005cb8:	9704      	str	r7, [sp, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dc20      	bgt.n	8005d00 <_dtoa_r+0x940>
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	dd1e      	ble.n	8005d04 <_dtoa_r+0x944>
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f aec0 	bne.w	8005a4e <_dtoa_r+0x68e>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fa9a 	bl	800620c <__multadd>
 8005cd8:	4601      	mov	r1, r0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4648      	mov	r0, r9
 8005cde:	f000 fcf7 	bl	80066d0 <__mcmp>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f77f aeb3 	ble.w	8005a4e <_dtoa_r+0x68e>
 8005ce8:	4656      	mov	r6, sl
 8005cea:	2331      	movs	r3, #49	@ 0x31
 8005cec:	f806 3b01 	strb.w	r3, [r6], #1
 8005cf0:	9b04      	ldr	r3, [sp, #16]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	e6ae      	b.n	8005a56 <_dtoa_r+0x696>
 8005cf8:	9c07      	ldr	r4, [sp, #28]
 8005cfa:	9704      	str	r7, [sp, #16]
 8005cfc:	4625      	mov	r5, r4
 8005cfe:	e7f3      	b.n	8005ce8 <_dtoa_r+0x928>
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8104 	beq.w	8005f14 <_dtoa_r+0xb54>
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	dd05      	ble.n	8005d1c <_dtoa_r+0x95c>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4632      	mov	r2, r6
 8005d14:	4658      	mov	r0, fp
 8005d16:	f000 fc6f 	bl	80065f8 <__lshift>
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d05a      	beq.n	8005dd8 <_dtoa_r+0xa18>
 8005d22:	6869      	ldr	r1, [r5, #4]
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fa0f 	bl	8006148 <_Balloc>
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	b928      	cbnz	r0, 8005d3a <_dtoa_r+0x97a>
 8005d2e:	4b84      	ldr	r3, [pc, #528]	@ (8005f40 <_dtoa_r+0xb80>)
 8005d30:	4602      	mov	r2, r0
 8005d32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d36:	f7ff bb5a 	b.w	80053ee <_dtoa_r+0x2e>
 8005d3a:	692a      	ldr	r2, [r5, #16]
 8005d3c:	3202      	adds	r2, #2
 8005d3e:	0092      	lsls	r2, r2, #2
 8005d40:	f105 010c 	add.w	r1, r5, #12
 8005d44:	300c      	adds	r0, #12
 8005d46:	f001 ff75 	bl	8007c34 <memcpy>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4658      	mov	r0, fp
 8005d50:	f000 fc52 	bl	80065f8 <__lshift>
 8005d54:	f10a 0301 	add.w	r3, sl, #1
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	4453      	add	r3, sl
 8005d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d60:	9b02      	ldr	r3, [sp, #8]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	462f      	mov	r7, r5
 8005d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4648      	mov	r0, r9
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	f7ff fa99 	bl	80052ac <quorem>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d82:	4648      	mov	r0, r9
 8005d84:	f000 fca4 	bl	80066d0 <__mcmp>
 8005d88:	462a      	mov	r2, r5
 8005d8a:	9008      	str	r0, [sp, #32]
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f000 fcba 	bl	8006708 <__mdiff>
 8005d94:	68c2      	ldr	r2, [r0, #12]
 8005d96:	4606      	mov	r6, r0
 8005d98:	bb02      	cbnz	r2, 8005ddc <_dtoa_r+0xa1c>
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	4648      	mov	r0, r9
 8005d9e:	f000 fc97 	bl	80066d0 <__mcmp>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4631      	mov	r1, r6
 8005da6:	4658      	mov	r0, fp
 8005da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005daa:	f000 fa0d 	bl	80061c8 <_Bfree>
 8005dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005db2:	9e07      	ldr	r6, [sp, #28]
 8005db4:	ea43 0102 	orr.w	r1, r3, r2
 8005db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dba:	4319      	orrs	r1, r3
 8005dbc:	d110      	bne.n	8005de0 <_dtoa_r+0xa20>
 8005dbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dc2:	d029      	beq.n	8005e18 <_dtoa_r+0xa58>
 8005dc4:	9b08      	ldr	r3, [sp, #32]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd02      	ble.n	8005dd0 <_dtoa_r+0xa10>
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	f883 8000 	strb.w	r8, [r3]
 8005dd6:	e63f      	b.n	8005a58 <_dtoa_r+0x698>
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e7bb      	b.n	8005d54 <_dtoa_r+0x994>
 8005ddc:	2201      	movs	r2, #1
 8005dde:	e7e1      	b.n	8005da4 <_dtoa_r+0x9e4>
 8005de0:	9b08      	ldr	r3, [sp, #32]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	db04      	blt.n	8005df0 <_dtoa_r+0xa30>
 8005de6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005de8:	430b      	orrs	r3, r1
 8005dea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dec:	430b      	orrs	r3, r1
 8005dee:	d120      	bne.n	8005e32 <_dtoa_r+0xa72>
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	dded      	ble.n	8005dd0 <_dtoa_r+0xa10>
 8005df4:	4649      	mov	r1, r9
 8005df6:	2201      	movs	r2, #1
 8005df8:	4658      	mov	r0, fp
 8005dfa:	f000 fbfd 	bl	80065f8 <__lshift>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4681      	mov	r9, r0
 8005e02:	f000 fc65 	bl	80066d0 <__mcmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	dc03      	bgt.n	8005e12 <_dtoa_r+0xa52>
 8005e0a:	d1e1      	bne.n	8005dd0 <_dtoa_r+0xa10>
 8005e0c:	f018 0f01 	tst.w	r8, #1
 8005e10:	d0de      	beq.n	8005dd0 <_dtoa_r+0xa10>
 8005e12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e16:	d1d8      	bne.n	8005dca <_dtoa_r+0xa0a>
 8005e18:	9a00      	ldr	r2, [sp, #0]
 8005e1a:	2339      	movs	r3, #57	@ 0x39
 8005e1c:	7013      	strb	r3, [r2, #0]
 8005e1e:	4633      	mov	r3, r6
 8005e20:	461e      	mov	r6, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e28:	2a39      	cmp	r2, #57	@ 0x39
 8005e2a:	d052      	beq.n	8005ed2 <_dtoa_r+0xb12>
 8005e2c:	3201      	adds	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e612      	b.n	8005a58 <_dtoa_r+0x698>
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	dd07      	ble.n	8005e46 <_dtoa_r+0xa86>
 8005e36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e3a:	d0ed      	beq.n	8005e18 <_dtoa_r+0xa58>
 8005e3c:	9a00      	ldr	r2, [sp, #0]
 8005e3e:	f108 0301 	add.w	r3, r8, #1
 8005e42:	7013      	strb	r3, [r2, #0]
 8005e44:	e608      	b.n	8005a58 <_dtoa_r+0x698>
 8005e46:	9b07      	ldr	r3, [sp, #28]
 8005e48:	9a07      	ldr	r2, [sp, #28]
 8005e4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d028      	beq.n	8005ea6 <_dtoa_r+0xae6>
 8005e54:	4649      	mov	r1, r9
 8005e56:	2300      	movs	r3, #0
 8005e58:	220a      	movs	r2, #10
 8005e5a:	4658      	mov	r0, fp
 8005e5c:	f000 f9d6 	bl	800620c <__multadd>
 8005e60:	42af      	cmp	r7, r5
 8005e62:	4681      	mov	r9, r0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 020a 	mov.w	r2, #10
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4658      	mov	r0, fp
 8005e70:	d107      	bne.n	8005e82 <_dtoa_r+0xac2>
 8005e72:	f000 f9cb 	bl	800620c <__multadd>
 8005e76:	4607      	mov	r7, r0
 8005e78:	4605      	mov	r5, r0
 8005e7a:	9b07      	ldr	r3, [sp, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	e774      	b.n	8005d6c <_dtoa_r+0x9ac>
 8005e82:	f000 f9c3 	bl	800620c <__multadd>
 8005e86:	4629      	mov	r1, r5
 8005e88:	4607      	mov	r7, r0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f000 f9bc 	bl	800620c <__multadd>
 8005e94:	4605      	mov	r5, r0
 8005e96:	e7f0      	b.n	8005e7a <_dtoa_r+0xaba>
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfcc      	ite	gt
 8005e9e:	461e      	movgt	r6, r3
 8005ea0:	2601      	movle	r6, #1
 8005ea2:	4456      	add	r6, sl
 8005ea4:	2700      	movs	r7, #0
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4658      	mov	r0, fp
 8005eac:	f000 fba4 	bl	80065f8 <__lshift>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4681      	mov	r9, r0
 8005eb4:	f000 fc0c 	bl	80066d0 <__mcmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	dcb0      	bgt.n	8005e1e <_dtoa_r+0xa5e>
 8005ebc:	d102      	bne.n	8005ec4 <_dtoa_r+0xb04>
 8005ebe:	f018 0f01 	tst.w	r8, #1
 8005ec2:	d1ac      	bne.n	8005e1e <_dtoa_r+0xa5e>
 8005ec4:	4633      	mov	r3, r6
 8005ec6:	461e      	mov	r6, r3
 8005ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ecc:	2a30      	cmp	r2, #48	@ 0x30
 8005ece:	d0fa      	beq.n	8005ec6 <_dtoa_r+0xb06>
 8005ed0:	e5c2      	b.n	8005a58 <_dtoa_r+0x698>
 8005ed2:	459a      	cmp	sl, r3
 8005ed4:	d1a4      	bne.n	8005e20 <_dtoa_r+0xa60>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	2331      	movs	r3, #49	@ 0x31
 8005ede:	f88a 3000 	strb.w	r3, [sl]
 8005ee2:	e5b9      	b.n	8005a58 <_dtoa_r+0x698>
 8005ee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ee6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f44 <_dtoa_r+0xb84>
 8005eea:	b11b      	cbz	r3, 8005ef4 <_dtoa_r+0xb34>
 8005eec:	f10a 0308 	add.w	r3, sl, #8
 8005ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	b019      	add	sp, #100	@ 0x64
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	f77f ae37 	ble.w	8005b72 <_dtoa_r+0x7b2>
 8005f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f08:	2001      	movs	r0, #1
 8005f0a:	e655      	b.n	8005bb8 <_dtoa_r+0x7f8>
 8005f0c:	9b00      	ldr	r3, [sp, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f77f aed6 	ble.w	8005cc0 <_dtoa_r+0x900>
 8005f14:	4656      	mov	r6, sl
 8005f16:	4621      	mov	r1, r4
 8005f18:	4648      	mov	r0, r9
 8005f1a:	f7ff f9c7 	bl	80052ac <quorem>
 8005f1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f22:	f806 8b01 	strb.w	r8, [r6], #1
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	eba6 020a 	sub.w	r2, r6, sl
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	ddb3      	ble.n	8005e98 <_dtoa_r+0xad8>
 8005f30:	4649      	mov	r1, r9
 8005f32:	2300      	movs	r3, #0
 8005f34:	220a      	movs	r2, #10
 8005f36:	4658      	mov	r0, fp
 8005f38:	f000 f968 	bl	800620c <__multadd>
 8005f3c:	4681      	mov	r9, r0
 8005f3e:	e7ea      	b.n	8005f16 <_dtoa_r+0xb56>
 8005f40:	08008a85 	.word	0x08008a85
 8005f44:	08008a09 	.word	0x08008a09

08005f48 <_free_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d041      	beq.n	8005fd4 <_free_r+0x8c>
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f0c      	subs	r4, r1, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	18e4      	addlt	r4, r4, r3
 8005f5c:	f000 f8e8 	bl	8006130 <__malloc_lock>
 8005f60:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <_free_r+0x90>)
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	b933      	cbnz	r3, 8005f74 <_free_r+0x2c>
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6014      	str	r4, [r2, #0]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f70:	f000 b8e4 	b.w	800613c <__malloc_unlock>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d908      	bls.n	8005f8a <_free_r+0x42>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	1821      	adds	r1, r4, r0
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf01      	itttt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	1809      	addeq	r1, r1, r0
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	e7ed      	b.n	8005f66 <_free_r+0x1e>
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b10b      	cbz	r3, 8005f94 <_free_r+0x4c>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d9fa      	bls.n	8005f8a <_free_r+0x42>
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	1850      	adds	r0, r2, r1
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d10b      	bne.n	8005fb4 <_free_r+0x6c>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	1850      	adds	r0, r2, r1
 8005fa2:	4283      	cmp	r3, r0
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	d1e0      	bne.n	8005f6a <_free_r+0x22>
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	6053      	str	r3, [r2, #4]
 8005fae:	4408      	add	r0, r1
 8005fb0:	6010      	str	r0, [r2, #0]
 8005fb2:	e7da      	b.n	8005f6a <_free_r+0x22>
 8005fb4:	d902      	bls.n	8005fbc <_free_r+0x74>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	e7d6      	b.n	8005f6a <_free_r+0x22>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	1821      	adds	r1, r4, r0
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	bf04      	itt	eq
 8005fc4:	6819      	ldreq	r1, [r3, #0]
 8005fc6:	685b      	ldreq	r3, [r3, #4]
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	bf04      	itt	eq
 8005fcc:	1809      	addeq	r1, r1, r0
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	6054      	str	r4, [r2, #4]
 8005fd2:	e7ca      	b.n	8005f6a <_free_r+0x22>
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000408 	.word	0x20000408

08005fdc <malloc>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	@ (8005fe8 <malloc+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f000 b825 	b.w	8006030 <_malloc_r>
 8005fe6:	bf00      	nop
 8005fe8:	20000018 	.word	0x20000018

08005fec <sbrk_aligned>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4e0f      	ldr	r6, [pc, #60]	@ (800602c <sbrk_aligned+0x40>)
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6831      	ldr	r1, [r6, #0]
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	b911      	cbnz	r1, 8005ffe <sbrk_aligned+0x12>
 8005ff8:	f001 fe0c 	bl	8007c14 <_sbrk_r>
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f001 fe07 	bl	8007c14 <_sbrk_r>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d103      	bne.n	8006012 <sbrk_aligned+0x26>
 800600a:	f04f 34ff 	mov.w	r4, #4294967295
 800600e:	4620      	mov	r0, r4
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	1cc4      	adds	r4, r0, #3
 8006014:	f024 0403 	bic.w	r4, r4, #3
 8006018:	42a0      	cmp	r0, r4
 800601a:	d0f8      	beq.n	800600e <sbrk_aligned+0x22>
 800601c:	1a21      	subs	r1, r4, r0
 800601e:	4628      	mov	r0, r5
 8006020:	f001 fdf8 	bl	8007c14 <_sbrk_r>
 8006024:	3001      	adds	r0, #1
 8006026:	d1f2      	bne.n	800600e <sbrk_aligned+0x22>
 8006028:	e7ef      	b.n	800600a <sbrk_aligned+0x1e>
 800602a:	bf00      	nop
 800602c:	20000404 	.word	0x20000404

08006030 <_malloc_r>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	1ccd      	adds	r5, r1, #3
 8006036:	f025 0503 	bic.w	r5, r5, #3
 800603a:	3508      	adds	r5, #8
 800603c:	2d0c      	cmp	r5, #12
 800603e:	bf38      	it	cc
 8006040:	250c      	movcc	r5, #12
 8006042:	2d00      	cmp	r5, #0
 8006044:	4606      	mov	r6, r0
 8006046:	db01      	blt.n	800604c <_malloc_r+0x1c>
 8006048:	42a9      	cmp	r1, r5
 800604a:	d904      	bls.n	8006056 <_malloc_r+0x26>
 800604c:	230c      	movs	r3, #12
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	2000      	movs	r0, #0
 8006052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800612c <_malloc_r+0xfc>
 800605a:	f000 f869 	bl	8006130 <__malloc_lock>
 800605e:	f8d8 3000 	ldr.w	r3, [r8]
 8006062:	461c      	mov	r4, r3
 8006064:	bb44      	cbnz	r4, 80060b8 <_malloc_r+0x88>
 8006066:	4629      	mov	r1, r5
 8006068:	4630      	mov	r0, r6
 800606a:	f7ff ffbf 	bl	8005fec <sbrk_aligned>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	4604      	mov	r4, r0
 8006072:	d158      	bne.n	8006126 <_malloc_r+0xf6>
 8006074:	f8d8 4000 	ldr.w	r4, [r8]
 8006078:	4627      	mov	r7, r4
 800607a:	2f00      	cmp	r7, #0
 800607c:	d143      	bne.n	8006106 <_malloc_r+0xd6>
 800607e:	2c00      	cmp	r4, #0
 8006080:	d04b      	beq.n	800611a <_malloc_r+0xea>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	4639      	mov	r1, r7
 8006086:	4630      	mov	r0, r6
 8006088:	eb04 0903 	add.w	r9, r4, r3
 800608c:	f001 fdc2 	bl	8007c14 <_sbrk_r>
 8006090:	4581      	cmp	r9, r0
 8006092:	d142      	bne.n	800611a <_malloc_r+0xea>
 8006094:	6821      	ldr	r1, [r4, #0]
 8006096:	1a6d      	subs	r5, r5, r1
 8006098:	4629      	mov	r1, r5
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ffa6 	bl	8005fec <sbrk_aligned>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d03a      	beq.n	800611a <_malloc_r+0xea>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	442b      	add	r3, r5
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	f8d8 3000 	ldr.w	r3, [r8]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	bb62      	cbnz	r2, 800610c <_malloc_r+0xdc>
 80060b2:	f8c8 7000 	str.w	r7, [r8]
 80060b6:	e00f      	b.n	80060d8 <_malloc_r+0xa8>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	1b52      	subs	r2, r2, r5
 80060bc:	d420      	bmi.n	8006100 <_malloc_r+0xd0>
 80060be:	2a0b      	cmp	r2, #11
 80060c0:	d917      	bls.n	80060f2 <_malloc_r+0xc2>
 80060c2:	1961      	adds	r1, r4, r5
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	6025      	str	r5, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	6059      	strne	r1, [r3, #4]
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	bf08      	it	eq
 80060d0:	f8c8 1000 	streq.w	r1, [r8]
 80060d4:	5162      	str	r2, [r4, r5]
 80060d6:	604b      	str	r3, [r1, #4]
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 f82f 	bl	800613c <__malloc_unlock>
 80060de:	f104 000b 	add.w	r0, r4, #11
 80060e2:	1d23      	adds	r3, r4, #4
 80060e4:	f020 0007 	bic.w	r0, r0, #7
 80060e8:	1ac2      	subs	r2, r0, r3
 80060ea:	bf1c      	itt	ne
 80060ec:	1a1b      	subne	r3, r3, r0
 80060ee:	50a3      	strne	r3, [r4, r2]
 80060f0:	e7af      	b.n	8006052 <_malloc_r+0x22>
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	bf0c      	ite	eq
 80060f8:	f8c8 2000 	streq.w	r2, [r8]
 80060fc:	605a      	strne	r2, [r3, #4]
 80060fe:	e7eb      	b.n	80060d8 <_malloc_r+0xa8>
 8006100:	4623      	mov	r3, r4
 8006102:	6864      	ldr	r4, [r4, #4]
 8006104:	e7ae      	b.n	8006064 <_malloc_r+0x34>
 8006106:	463c      	mov	r4, r7
 8006108:	687f      	ldr	r7, [r7, #4]
 800610a:	e7b6      	b.n	800607a <_malloc_r+0x4a>
 800610c:	461a      	mov	r2, r3
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	42a3      	cmp	r3, r4
 8006112:	d1fb      	bne.n	800610c <_malloc_r+0xdc>
 8006114:	2300      	movs	r3, #0
 8006116:	6053      	str	r3, [r2, #4]
 8006118:	e7de      	b.n	80060d8 <_malloc_r+0xa8>
 800611a:	230c      	movs	r3, #12
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	4630      	mov	r0, r6
 8006120:	f000 f80c 	bl	800613c <__malloc_unlock>
 8006124:	e794      	b.n	8006050 <_malloc_r+0x20>
 8006126:	6005      	str	r5, [r0, #0]
 8006128:	e7d6      	b.n	80060d8 <_malloc_r+0xa8>
 800612a:	bf00      	nop
 800612c:	20000408 	.word	0x20000408

08006130 <__malloc_lock>:
 8006130:	4801      	ldr	r0, [pc, #4]	@ (8006138 <__malloc_lock+0x8>)
 8006132:	f7ff b8b2 	b.w	800529a <__retarget_lock_acquire_recursive>
 8006136:	bf00      	nop
 8006138:	20000400 	.word	0x20000400

0800613c <__malloc_unlock>:
 800613c:	4801      	ldr	r0, [pc, #4]	@ (8006144 <__malloc_unlock+0x8>)
 800613e:	f7ff b8ad 	b.w	800529c <__retarget_lock_release_recursive>
 8006142:	bf00      	nop
 8006144:	20000400 	.word	0x20000400

08006148 <_Balloc>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	69c6      	ldr	r6, [r0, #28]
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	b976      	cbnz	r6, 8006170 <_Balloc+0x28>
 8006152:	2010      	movs	r0, #16
 8006154:	f7ff ff42 	bl	8005fdc <malloc>
 8006158:	4602      	mov	r2, r0
 800615a:	61e0      	str	r0, [r4, #28]
 800615c:	b920      	cbnz	r0, 8006168 <_Balloc+0x20>
 800615e:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <_Balloc+0x78>)
 8006160:	4818      	ldr	r0, [pc, #96]	@ (80061c4 <_Balloc+0x7c>)
 8006162:	216b      	movs	r1, #107	@ 0x6b
 8006164:	f001 fd7c 	bl	8007c60 <__assert_func>
 8006168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800616c:	6006      	str	r6, [r0, #0]
 800616e:	60c6      	str	r6, [r0, #12]
 8006170:	69e6      	ldr	r6, [r4, #28]
 8006172:	68f3      	ldr	r3, [r6, #12]
 8006174:	b183      	cbz	r3, 8006198 <_Balloc+0x50>
 8006176:	69e3      	ldr	r3, [r4, #28]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800617e:	b9b8      	cbnz	r0, 80061b0 <_Balloc+0x68>
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f605 	lsl.w	r6, r1, r5
 8006186:	1d72      	adds	r2, r6, #5
 8006188:	0092      	lsls	r2, r2, #2
 800618a:	4620      	mov	r0, r4
 800618c:	f001 fd86 	bl	8007c9c <_calloc_r>
 8006190:	b160      	cbz	r0, 80061ac <_Balloc+0x64>
 8006192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006196:	e00e      	b.n	80061b6 <_Balloc+0x6e>
 8006198:	2221      	movs	r2, #33	@ 0x21
 800619a:	2104      	movs	r1, #4
 800619c:	4620      	mov	r0, r4
 800619e:	f001 fd7d 	bl	8007c9c <_calloc_r>
 80061a2:	69e3      	ldr	r3, [r4, #28]
 80061a4:	60f0      	str	r0, [r6, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e4      	bne.n	8006176 <_Balloc+0x2e>
 80061ac:	2000      	movs	r0, #0
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	6802      	ldr	r2, [r0, #0]
 80061b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061b6:	2300      	movs	r3, #0
 80061b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061bc:	e7f7      	b.n	80061ae <_Balloc+0x66>
 80061be:	bf00      	nop
 80061c0:	08008a16 	.word	0x08008a16
 80061c4:	08008a96 	.word	0x08008a96

080061c8 <_Bfree>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	69c6      	ldr	r6, [r0, #28]
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	b976      	cbnz	r6, 80061f0 <_Bfree+0x28>
 80061d2:	2010      	movs	r0, #16
 80061d4:	f7ff ff02 	bl	8005fdc <malloc>
 80061d8:	4602      	mov	r2, r0
 80061da:	61e8      	str	r0, [r5, #28]
 80061dc:	b920      	cbnz	r0, 80061e8 <_Bfree+0x20>
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <_Bfree+0x3c>)
 80061e0:	4809      	ldr	r0, [pc, #36]	@ (8006208 <_Bfree+0x40>)
 80061e2:	218f      	movs	r1, #143	@ 0x8f
 80061e4:	f001 fd3c 	bl	8007c60 <__assert_func>
 80061e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061ec:	6006      	str	r6, [r0, #0]
 80061ee:	60c6      	str	r6, [r0, #12]
 80061f0:	b13c      	cbz	r4, 8006202 <_Bfree+0x3a>
 80061f2:	69eb      	ldr	r3, [r5, #28]
 80061f4:	6862      	ldr	r2, [r4, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061fc:	6021      	str	r1, [r4, #0]
 80061fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	08008a16 	.word	0x08008a16
 8006208:	08008a96 	.word	0x08008a96

0800620c <__multadd>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	690d      	ldr	r5, [r1, #16]
 8006212:	4607      	mov	r7, r0
 8006214:	460c      	mov	r4, r1
 8006216:	461e      	mov	r6, r3
 8006218:	f101 0c14 	add.w	ip, r1, #20
 800621c:	2000      	movs	r0, #0
 800621e:	f8dc 3000 	ldr.w	r3, [ip]
 8006222:	b299      	uxth	r1, r3
 8006224:	fb02 6101 	mla	r1, r2, r1, r6
 8006228:	0c1e      	lsrs	r6, r3, #16
 800622a:	0c0b      	lsrs	r3, r1, #16
 800622c:	fb02 3306 	mla	r3, r2, r6, r3
 8006230:	b289      	uxth	r1, r1
 8006232:	3001      	adds	r0, #1
 8006234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006238:	4285      	cmp	r5, r0
 800623a:	f84c 1b04 	str.w	r1, [ip], #4
 800623e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006242:	dcec      	bgt.n	800621e <__multadd+0x12>
 8006244:	b30e      	cbz	r6, 800628a <__multadd+0x7e>
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	42ab      	cmp	r3, r5
 800624a:	dc19      	bgt.n	8006280 <__multadd+0x74>
 800624c:	6861      	ldr	r1, [r4, #4]
 800624e:	4638      	mov	r0, r7
 8006250:	3101      	adds	r1, #1
 8006252:	f7ff ff79 	bl	8006148 <_Balloc>
 8006256:	4680      	mov	r8, r0
 8006258:	b928      	cbnz	r0, 8006266 <__multadd+0x5a>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <__multadd+0x84>)
 800625e:	480d      	ldr	r0, [pc, #52]	@ (8006294 <__multadd+0x88>)
 8006260:	21ba      	movs	r1, #186	@ 0xba
 8006262:	f001 fcfd 	bl	8007c60 <__assert_func>
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	3202      	adds	r2, #2
 800626a:	f104 010c 	add.w	r1, r4, #12
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	300c      	adds	r0, #12
 8006272:	f001 fcdf 	bl	8007c34 <memcpy>
 8006276:	4621      	mov	r1, r4
 8006278:	4638      	mov	r0, r7
 800627a:	f7ff ffa5 	bl	80061c8 <_Bfree>
 800627e:	4644      	mov	r4, r8
 8006280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006284:	3501      	adds	r5, #1
 8006286:	615e      	str	r6, [r3, #20]
 8006288:	6125      	str	r5, [r4, #16]
 800628a:	4620      	mov	r0, r4
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	08008a85 	.word	0x08008a85
 8006294:	08008a96 	.word	0x08008a96

08006298 <__s2b>:
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	4615      	mov	r5, r2
 80062a0:	461f      	mov	r7, r3
 80062a2:	2209      	movs	r2, #9
 80062a4:	3308      	adds	r3, #8
 80062a6:	4606      	mov	r6, r0
 80062a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ac:	2100      	movs	r1, #0
 80062ae:	2201      	movs	r2, #1
 80062b0:	429a      	cmp	r2, r3
 80062b2:	db09      	blt.n	80062c8 <__s2b+0x30>
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7ff ff47 	bl	8006148 <_Balloc>
 80062ba:	b940      	cbnz	r0, 80062ce <__s2b+0x36>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <__s2b+0x8c>)
 80062c0:	4819      	ldr	r0, [pc, #100]	@ (8006328 <__s2b+0x90>)
 80062c2:	21d3      	movs	r1, #211	@ 0xd3
 80062c4:	f001 fccc 	bl	8007c60 <__assert_func>
 80062c8:	0052      	lsls	r2, r2, #1
 80062ca:	3101      	adds	r1, #1
 80062cc:	e7f0      	b.n	80062b0 <__s2b+0x18>
 80062ce:	9b08      	ldr	r3, [sp, #32]
 80062d0:	6143      	str	r3, [r0, #20]
 80062d2:	2d09      	cmp	r5, #9
 80062d4:	f04f 0301 	mov.w	r3, #1
 80062d8:	6103      	str	r3, [r0, #16]
 80062da:	dd16      	ble.n	800630a <__s2b+0x72>
 80062dc:	f104 0909 	add.w	r9, r4, #9
 80062e0:	46c8      	mov	r8, r9
 80062e2:	442c      	add	r4, r5
 80062e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80062e8:	4601      	mov	r1, r0
 80062ea:	3b30      	subs	r3, #48	@ 0x30
 80062ec:	220a      	movs	r2, #10
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7ff ff8c 	bl	800620c <__multadd>
 80062f4:	45a0      	cmp	r8, r4
 80062f6:	d1f5      	bne.n	80062e4 <__s2b+0x4c>
 80062f8:	f1a5 0408 	sub.w	r4, r5, #8
 80062fc:	444c      	add	r4, r9
 80062fe:	1b2d      	subs	r5, r5, r4
 8006300:	1963      	adds	r3, r4, r5
 8006302:	42bb      	cmp	r3, r7
 8006304:	db04      	blt.n	8006310 <__s2b+0x78>
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	340a      	adds	r4, #10
 800630c:	2509      	movs	r5, #9
 800630e:	e7f6      	b.n	80062fe <__s2b+0x66>
 8006310:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006314:	4601      	mov	r1, r0
 8006316:	3b30      	subs	r3, #48	@ 0x30
 8006318:	220a      	movs	r2, #10
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff76 	bl	800620c <__multadd>
 8006320:	e7ee      	b.n	8006300 <__s2b+0x68>
 8006322:	bf00      	nop
 8006324:	08008a85 	.word	0x08008a85
 8006328:	08008a96 	.word	0x08008a96

0800632c <__hi0bits>:
 800632c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006330:	4603      	mov	r3, r0
 8006332:	bf36      	itet	cc
 8006334:	0403      	lslcc	r3, r0, #16
 8006336:	2000      	movcs	r0, #0
 8006338:	2010      	movcc	r0, #16
 800633a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800633e:	bf3c      	itt	cc
 8006340:	021b      	lslcc	r3, r3, #8
 8006342:	3008      	addcc	r0, #8
 8006344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006348:	bf3c      	itt	cc
 800634a:	011b      	lslcc	r3, r3, #4
 800634c:	3004      	addcc	r0, #4
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006352:	bf3c      	itt	cc
 8006354:	009b      	lslcc	r3, r3, #2
 8006356:	3002      	addcc	r0, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	db05      	blt.n	8006368 <__hi0bits+0x3c>
 800635c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006360:	f100 0001 	add.w	r0, r0, #1
 8006364:	bf08      	it	eq
 8006366:	2020      	moveq	r0, #32
 8006368:	4770      	bx	lr

0800636a <__lo0bits>:
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	4602      	mov	r2, r0
 800636e:	f013 0007 	ands.w	r0, r3, #7
 8006372:	d00b      	beq.n	800638c <__lo0bits+0x22>
 8006374:	07d9      	lsls	r1, r3, #31
 8006376:	d421      	bmi.n	80063bc <__lo0bits+0x52>
 8006378:	0798      	lsls	r0, r3, #30
 800637a:	bf49      	itett	mi
 800637c:	085b      	lsrmi	r3, r3, #1
 800637e:	089b      	lsrpl	r3, r3, #2
 8006380:	2001      	movmi	r0, #1
 8006382:	6013      	strmi	r3, [r2, #0]
 8006384:	bf5c      	itt	pl
 8006386:	6013      	strpl	r3, [r2, #0]
 8006388:	2002      	movpl	r0, #2
 800638a:	4770      	bx	lr
 800638c:	b299      	uxth	r1, r3
 800638e:	b909      	cbnz	r1, 8006394 <__lo0bits+0x2a>
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	2010      	movs	r0, #16
 8006394:	b2d9      	uxtb	r1, r3
 8006396:	b909      	cbnz	r1, 800639c <__lo0bits+0x32>
 8006398:	3008      	adds	r0, #8
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	bf04      	itt	eq
 80063a0:	091b      	lsreq	r3, r3, #4
 80063a2:	3004      	addeq	r0, #4
 80063a4:	0799      	lsls	r1, r3, #30
 80063a6:	bf04      	itt	eq
 80063a8:	089b      	lsreq	r3, r3, #2
 80063aa:	3002      	addeq	r0, #2
 80063ac:	07d9      	lsls	r1, r3, #31
 80063ae:	d403      	bmi.n	80063b8 <__lo0bits+0x4e>
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f100 0001 	add.w	r0, r0, #1
 80063b6:	d003      	beq.n	80063c0 <__lo0bits+0x56>
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4770      	bx	lr
 80063bc:	2000      	movs	r0, #0
 80063be:	4770      	bx	lr
 80063c0:	2020      	movs	r0, #32
 80063c2:	4770      	bx	lr

080063c4 <__i2b>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	2101      	movs	r1, #1
 80063ca:	f7ff febd 	bl	8006148 <_Balloc>
 80063ce:	4602      	mov	r2, r0
 80063d0:	b928      	cbnz	r0, 80063de <__i2b+0x1a>
 80063d2:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <__i2b+0x24>)
 80063d4:	4805      	ldr	r0, [pc, #20]	@ (80063ec <__i2b+0x28>)
 80063d6:	f240 1145 	movw	r1, #325	@ 0x145
 80063da:	f001 fc41 	bl	8007c60 <__assert_func>
 80063de:	2301      	movs	r3, #1
 80063e0:	6144      	str	r4, [r0, #20]
 80063e2:	6103      	str	r3, [r0, #16]
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	bf00      	nop
 80063e8:	08008a85 	.word	0x08008a85
 80063ec:	08008a96 	.word	0x08008a96

080063f0 <__multiply>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	4614      	mov	r4, r2
 80063f6:	690a      	ldr	r2, [r1, #16]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	bfa8      	it	ge
 80063fe:	4623      	movge	r3, r4
 8006400:	460f      	mov	r7, r1
 8006402:	bfa4      	itt	ge
 8006404:	460c      	movge	r4, r1
 8006406:	461f      	movge	r7, r3
 8006408:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800640c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	6861      	ldr	r1, [r4, #4]
 8006414:	eb0a 0609 	add.w	r6, sl, r9
 8006418:	42b3      	cmp	r3, r6
 800641a:	b085      	sub	sp, #20
 800641c:	bfb8      	it	lt
 800641e:	3101      	addlt	r1, #1
 8006420:	f7ff fe92 	bl	8006148 <_Balloc>
 8006424:	b930      	cbnz	r0, 8006434 <__multiply+0x44>
 8006426:	4602      	mov	r2, r0
 8006428:	4b44      	ldr	r3, [pc, #272]	@ (800653c <__multiply+0x14c>)
 800642a:	4845      	ldr	r0, [pc, #276]	@ (8006540 <__multiply+0x150>)
 800642c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006430:	f001 fc16 	bl	8007c60 <__assert_func>
 8006434:	f100 0514 	add.w	r5, r0, #20
 8006438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800643c:	462b      	mov	r3, r5
 800643e:	2200      	movs	r2, #0
 8006440:	4543      	cmp	r3, r8
 8006442:	d321      	bcc.n	8006488 <__multiply+0x98>
 8006444:	f107 0114 	add.w	r1, r7, #20
 8006448:	f104 0214 	add.w	r2, r4, #20
 800644c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006450:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	1b13      	subs	r3, r2, r4
 8006458:	3b15      	subs	r3, #21
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	3304      	adds	r3, #4
 8006460:	f104 0715 	add.w	r7, r4, #21
 8006464:	42ba      	cmp	r2, r7
 8006466:	bf38      	it	cc
 8006468:	2304      	movcc	r3, #4
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	428b      	cmp	r3, r1
 8006472:	d80c      	bhi.n	800648e <__multiply+0x9e>
 8006474:	2e00      	cmp	r6, #0
 8006476:	dd03      	ble.n	8006480 <__multiply+0x90>
 8006478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800647c:	2b00      	cmp	r3, #0
 800647e:	d05b      	beq.n	8006538 <__multiply+0x148>
 8006480:	6106      	str	r6, [r0, #16]
 8006482:	b005      	add	sp, #20
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	f843 2b04 	str.w	r2, [r3], #4
 800648c:	e7d8      	b.n	8006440 <__multiply+0x50>
 800648e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006492:	f1ba 0f00 	cmp.w	sl, #0
 8006496:	d024      	beq.n	80064e2 <__multiply+0xf2>
 8006498:	f104 0e14 	add.w	lr, r4, #20
 800649c:	46a9      	mov	r9, r5
 800649e:	f04f 0c00 	mov.w	ip, #0
 80064a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80064a6:	f8d9 3000 	ldr.w	r3, [r9]
 80064aa:	fa1f fb87 	uxth.w	fp, r7
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80064b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80064b8:	f8d9 7000 	ldr.w	r7, [r9]
 80064bc:	4463      	add	r3, ip
 80064be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80064c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064d0:	4572      	cmp	r2, lr
 80064d2:	f849 3b04 	str.w	r3, [r9], #4
 80064d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064da:	d8e2      	bhi.n	80064a2 <__multiply+0xb2>
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	f845 c003 	str.w	ip, [r5, r3]
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064e8:	3104      	adds	r1, #4
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	d021      	beq.n	8006534 <__multiply+0x144>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	f104 0c14 	add.w	ip, r4, #20
 80064f6:	46ae      	mov	lr, r5
 80064f8:	f04f 0a00 	mov.w	sl, #0
 80064fc:	f8bc b000 	ldrh.w	fp, [ip]
 8006500:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006504:	fb09 770b 	mla	r7, r9, fp, r7
 8006508:	4457      	add	r7, sl
 800650a:	b29b      	uxth	r3, r3
 800650c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006510:	f84e 3b04 	str.w	r3, [lr], #4
 8006514:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800651c:	f8be 3000 	ldrh.w	r3, [lr]
 8006520:	fb09 330a 	mla	r3, r9, sl, r3
 8006524:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006528:	4562      	cmp	r2, ip
 800652a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800652e:	d8e5      	bhi.n	80064fc <__multiply+0x10c>
 8006530:	9f01      	ldr	r7, [sp, #4]
 8006532:	51eb      	str	r3, [r5, r7]
 8006534:	3504      	adds	r5, #4
 8006536:	e799      	b.n	800646c <__multiply+0x7c>
 8006538:	3e01      	subs	r6, #1
 800653a:	e79b      	b.n	8006474 <__multiply+0x84>
 800653c:	08008a85 	.word	0x08008a85
 8006540:	08008a96 	.word	0x08008a96

08006544 <__pow5mult>:
 8006544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006548:	4615      	mov	r5, r2
 800654a:	f012 0203 	ands.w	r2, r2, #3
 800654e:	4607      	mov	r7, r0
 8006550:	460e      	mov	r6, r1
 8006552:	d007      	beq.n	8006564 <__pow5mult+0x20>
 8006554:	4c25      	ldr	r4, [pc, #148]	@ (80065ec <__pow5mult+0xa8>)
 8006556:	3a01      	subs	r2, #1
 8006558:	2300      	movs	r3, #0
 800655a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800655e:	f7ff fe55 	bl	800620c <__multadd>
 8006562:	4606      	mov	r6, r0
 8006564:	10ad      	asrs	r5, r5, #2
 8006566:	d03d      	beq.n	80065e4 <__pow5mult+0xa0>
 8006568:	69fc      	ldr	r4, [r7, #28]
 800656a:	b97c      	cbnz	r4, 800658c <__pow5mult+0x48>
 800656c:	2010      	movs	r0, #16
 800656e:	f7ff fd35 	bl	8005fdc <malloc>
 8006572:	4602      	mov	r2, r0
 8006574:	61f8      	str	r0, [r7, #28]
 8006576:	b928      	cbnz	r0, 8006584 <__pow5mult+0x40>
 8006578:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <__pow5mult+0xac>)
 800657a:	481e      	ldr	r0, [pc, #120]	@ (80065f4 <__pow5mult+0xb0>)
 800657c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006580:	f001 fb6e 	bl	8007c60 <__assert_func>
 8006584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006588:	6004      	str	r4, [r0, #0]
 800658a:	60c4      	str	r4, [r0, #12]
 800658c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006594:	b94c      	cbnz	r4, 80065aa <__pow5mult+0x66>
 8006596:	f240 2171 	movw	r1, #625	@ 0x271
 800659a:	4638      	mov	r0, r7
 800659c:	f7ff ff12 	bl	80063c4 <__i2b>
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80065a6:	4604      	mov	r4, r0
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	07eb      	lsls	r3, r5, #31
 80065b0:	d50a      	bpl.n	80065c8 <__pow5mult+0x84>
 80065b2:	4631      	mov	r1, r6
 80065b4:	4622      	mov	r2, r4
 80065b6:	4638      	mov	r0, r7
 80065b8:	f7ff ff1a 	bl	80063f0 <__multiply>
 80065bc:	4631      	mov	r1, r6
 80065be:	4680      	mov	r8, r0
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff fe01 	bl	80061c8 <_Bfree>
 80065c6:	4646      	mov	r6, r8
 80065c8:	106d      	asrs	r5, r5, #1
 80065ca:	d00b      	beq.n	80065e4 <__pow5mult+0xa0>
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	b938      	cbnz	r0, 80065e0 <__pow5mult+0x9c>
 80065d0:	4622      	mov	r2, r4
 80065d2:	4621      	mov	r1, r4
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7ff ff0b 	bl	80063f0 <__multiply>
 80065da:	6020      	str	r0, [r4, #0]
 80065dc:	f8c0 9000 	str.w	r9, [r0]
 80065e0:	4604      	mov	r4, r0
 80065e2:	e7e4      	b.n	80065ae <__pow5mult+0x6a>
 80065e4:	4630      	mov	r0, r6
 80065e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ea:	bf00      	nop
 80065ec:	08008af0 	.word	0x08008af0
 80065f0:	08008a16 	.word	0x08008a16
 80065f4:	08008a96 	.word	0x08008a96

080065f8 <__lshift>:
 80065f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	460c      	mov	r4, r1
 80065fe:	6849      	ldr	r1, [r1, #4]
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006606:	68a3      	ldr	r3, [r4, #8]
 8006608:	4607      	mov	r7, r0
 800660a:	4691      	mov	r9, r2
 800660c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006610:	f108 0601 	add.w	r6, r8, #1
 8006614:	42b3      	cmp	r3, r6
 8006616:	db0b      	blt.n	8006630 <__lshift+0x38>
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff fd95 	bl	8006148 <_Balloc>
 800661e:	4605      	mov	r5, r0
 8006620:	b948      	cbnz	r0, 8006636 <__lshift+0x3e>
 8006622:	4602      	mov	r2, r0
 8006624:	4b28      	ldr	r3, [pc, #160]	@ (80066c8 <__lshift+0xd0>)
 8006626:	4829      	ldr	r0, [pc, #164]	@ (80066cc <__lshift+0xd4>)
 8006628:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800662c:	f001 fb18 	bl	8007c60 <__assert_func>
 8006630:	3101      	adds	r1, #1
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	e7ee      	b.n	8006614 <__lshift+0x1c>
 8006636:	2300      	movs	r3, #0
 8006638:	f100 0114 	add.w	r1, r0, #20
 800663c:	f100 0210 	add.w	r2, r0, #16
 8006640:	4618      	mov	r0, r3
 8006642:	4553      	cmp	r3, sl
 8006644:	db33      	blt.n	80066ae <__lshift+0xb6>
 8006646:	6920      	ldr	r0, [r4, #16]
 8006648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800664c:	f104 0314 	add.w	r3, r4, #20
 8006650:	f019 091f 	ands.w	r9, r9, #31
 8006654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006658:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800665c:	d02b      	beq.n	80066b6 <__lshift+0xbe>
 800665e:	f1c9 0e20 	rsb	lr, r9, #32
 8006662:	468a      	mov	sl, r1
 8006664:	2200      	movs	r2, #0
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	fa00 f009 	lsl.w	r0, r0, r9
 800666c:	4310      	orrs	r0, r2
 800666e:	f84a 0b04 	str.w	r0, [sl], #4
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	459c      	cmp	ip, r3
 8006678:	fa22 f20e 	lsr.w	r2, r2, lr
 800667c:	d8f3      	bhi.n	8006666 <__lshift+0x6e>
 800667e:	ebac 0304 	sub.w	r3, ip, r4
 8006682:	3b15      	subs	r3, #21
 8006684:	f023 0303 	bic.w	r3, r3, #3
 8006688:	3304      	adds	r3, #4
 800668a:	f104 0015 	add.w	r0, r4, #21
 800668e:	4584      	cmp	ip, r0
 8006690:	bf38      	it	cc
 8006692:	2304      	movcc	r3, #4
 8006694:	50ca      	str	r2, [r1, r3]
 8006696:	b10a      	cbz	r2, 800669c <__lshift+0xa4>
 8006698:	f108 0602 	add.w	r6, r8, #2
 800669c:	3e01      	subs	r6, #1
 800669e:	4638      	mov	r0, r7
 80066a0:	612e      	str	r6, [r5, #16]
 80066a2:	4621      	mov	r1, r4
 80066a4:	f7ff fd90 	bl	80061c8 <_Bfree>
 80066a8:	4628      	mov	r0, r5
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80066b2:	3301      	adds	r3, #1
 80066b4:	e7c5      	b.n	8006642 <__lshift+0x4a>
 80066b6:	3904      	subs	r1, #4
 80066b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80066c0:	459c      	cmp	ip, r3
 80066c2:	d8f9      	bhi.n	80066b8 <__lshift+0xc0>
 80066c4:	e7ea      	b.n	800669c <__lshift+0xa4>
 80066c6:	bf00      	nop
 80066c8:	08008a85 	.word	0x08008a85
 80066cc:	08008a96 	.word	0x08008a96

080066d0 <__mcmp>:
 80066d0:	690a      	ldr	r2, [r1, #16]
 80066d2:	4603      	mov	r3, r0
 80066d4:	6900      	ldr	r0, [r0, #16]
 80066d6:	1a80      	subs	r0, r0, r2
 80066d8:	b530      	push	{r4, r5, lr}
 80066da:	d10e      	bne.n	80066fa <__mcmp+0x2a>
 80066dc:	3314      	adds	r3, #20
 80066de:	3114      	adds	r1, #20
 80066e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066f0:	4295      	cmp	r5, r2
 80066f2:	d003      	beq.n	80066fc <__mcmp+0x2c>
 80066f4:	d205      	bcs.n	8006702 <__mcmp+0x32>
 80066f6:	f04f 30ff 	mov.w	r0, #4294967295
 80066fa:	bd30      	pop	{r4, r5, pc}
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d3f3      	bcc.n	80066e8 <__mcmp+0x18>
 8006700:	e7fb      	b.n	80066fa <__mcmp+0x2a>
 8006702:	2001      	movs	r0, #1
 8006704:	e7f9      	b.n	80066fa <__mcmp+0x2a>
	...

08006708 <__mdiff>:
 8006708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	4689      	mov	r9, r1
 800670e:	4606      	mov	r6, r0
 8006710:	4611      	mov	r1, r2
 8006712:	4648      	mov	r0, r9
 8006714:	4614      	mov	r4, r2
 8006716:	f7ff ffdb 	bl	80066d0 <__mcmp>
 800671a:	1e05      	subs	r5, r0, #0
 800671c:	d112      	bne.n	8006744 <__mdiff+0x3c>
 800671e:	4629      	mov	r1, r5
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff fd11 	bl	8006148 <_Balloc>
 8006726:	4602      	mov	r2, r0
 8006728:	b928      	cbnz	r0, 8006736 <__mdiff+0x2e>
 800672a:	4b3f      	ldr	r3, [pc, #252]	@ (8006828 <__mdiff+0x120>)
 800672c:	f240 2137 	movw	r1, #567	@ 0x237
 8006730:	483e      	ldr	r0, [pc, #248]	@ (800682c <__mdiff+0x124>)
 8006732:	f001 fa95 	bl	8007c60 <__assert_func>
 8006736:	2301      	movs	r3, #1
 8006738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800673c:	4610      	mov	r0, r2
 800673e:	b003      	add	sp, #12
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	bfbc      	itt	lt
 8006746:	464b      	movlt	r3, r9
 8006748:	46a1      	movlt	r9, r4
 800674a:	4630      	mov	r0, r6
 800674c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006750:	bfba      	itte	lt
 8006752:	461c      	movlt	r4, r3
 8006754:	2501      	movlt	r5, #1
 8006756:	2500      	movge	r5, #0
 8006758:	f7ff fcf6 	bl	8006148 <_Balloc>
 800675c:	4602      	mov	r2, r0
 800675e:	b918      	cbnz	r0, 8006768 <__mdiff+0x60>
 8006760:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <__mdiff+0x120>)
 8006762:	f240 2145 	movw	r1, #581	@ 0x245
 8006766:	e7e3      	b.n	8006730 <__mdiff+0x28>
 8006768:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800676c:	6926      	ldr	r6, [r4, #16]
 800676e:	60c5      	str	r5, [r0, #12]
 8006770:	f109 0310 	add.w	r3, r9, #16
 8006774:	f109 0514 	add.w	r5, r9, #20
 8006778:	f104 0e14 	add.w	lr, r4, #20
 800677c:	f100 0b14 	add.w	fp, r0, #20
 8006780:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006784:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	46d9      	mov	r9, fp
 800678c:	f04f 0c00 	mov.w	ip, #0
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006796:	f853 af04 	ldr.w	sl, [r3, #4]!
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	fa1f f38a 	uxth.w	r3, sl
 80067a0:	4619      	mov	r1, r3
 80067a2:	b283      	uxth	r3, r0
 80067a4:	1acb      	subs	r3, r1, r3
 80067a6:	0c00      	lsrs	r0, r0, #16
 80067a8:	4463      	add	r3, ip
 80067aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067b8:	4576      	cmp	r6, lr
 80067ba:	f849 3b04 	str.w	r3, [r9], #4
 80067be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067c2:	d8e5      	bhi.n	8006790 <__mdiff+0x88>
 80067c4:	1b33      	subs	r3, r6, r4
 80067c6:	3b15      	subs	r3, #21
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	3415      	adds	r4, #21
 80067ce:	3304      	adds	r3, #4
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	bf38      	it	cc
 80067d4:	2304      	movcc	r3, #4
 80067d6:	441d      	add	r5, r3
 80067d8:	445b      	add	r3, fp
 80067da:	461e      	mov	r6, r3
 80067dc:	462c      	mov	r4, r5
 80067de:	4544      	cmp	r4, r8
 80067e0:	d30e      	bcc.n	8006800 <__mdiff+0xf8>
 80067e2:	f108 0103 	add.w	r1, r8, #3
 80067e6:	1b49      	subs	r1, r1, r5
 80067e8:	f021 0103 	bic.w	r1, r1, #3
 80067ec:	3d03      	subs	r5, #3
 80067ee:	45a8      	cmp	r8, r5
 80067f0:	bf38      	it	cc
 80067f2:	2100      	movcc	r1, #0
 80067f4:	440b      	add	r3, r1
 80067f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067fa:	b191      	cbz	r1, 8006822 <__mdiff+0x11a>
 80067fc:	6117      	str	r7, [r2, #16]
 80067fe:	e79d      	b.n	800673c <__mdiff+0x34>
 8006800:	f854 1b04 	ldr.w	r1, [r4], #4
 8006804:	46e6      	mov	lr, ip
 8006806:	0c08      	lsrs	r0, r1, #16
 8006808:	fa1c fc81 	uxtah	ip, ip, r1
 800680c:	4471      	add	r1, lr
 800680e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006812:	b289      	uxth	r1, r1
 8006814:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006818:	f846 1b04 	str.w	r1, [r6], #4
 800681c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006820:	e7dd      	b.n	80067de <__mdiff+0xd6>
 8006822:	3f01      	subs	r7, #1
 8006824:	e7e7      	b.n	80067f6 <__mdiff+0xee>
 8006826:	bf00      	nop
 8006828:	08008a85 	.word	0x08008a85
 800682c:	08008a96 	.word	0x08008a96

08006830 <__ulp>:
 8006830:	b082      	sub	sp, #8
 8006832:	ed8d 0b00 	vstr	d0, [sp]
 8006836:	9a01      	ldr	r2, [sp, #4]
 8006838:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <__ulp+0x48>)
 800683a:	4013      	ands	r3, r2
 800683c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc08      	bgt.n	8006856 <__ulp+0x26>
 8006844:	425b      	negs	r3, r3
 8006846:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800684a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800684e:	da04      	bge.n	800685a <__ulp+0x2a>
 8006850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006854:	4113      	asrs	r3, r2
 8006856:	2200      	movs	r2, #0
 8006858:	e008      	b.n	800686c <__ulp+0x3c>
 800685a:	f1a2 0314 	sub.w	r3, r2, #20
 800685e:	2b1e      	cmp	r3, #30
 8006860:	bfda      	itte	le
 8006862:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006866:	40da      	lsrle	r2, r3
 8006868:	2201      	movgt	r2, #1
 800686a:	2300      	movs	r3, #0
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	ec41 0b10 	vmov	d0, r0, r1
 8006874:	b002      	add	sp, #8
 8006876:	4770      	bx	lr
 8006878:	7ff00000 	.word	0x7ff00000

0800687c <__b2d>:
 800687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006880:	6906      	ldr	r6, [r0, #16]
 8006882:	f100 0814 	add.w	r8, r0, #20
 8006886:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800688a:	1f37      	subs	r7, r6, #4
 800688c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006890:	4610      	mov	r0, r2
 8006892:	f7ff fd4b 	bl	800632c <__hi0bits>
 8006896:	f1c0 0320 	rsb	r3, r0, #32
 800689a:	280a      	cmp	r0, #10
 800689c:	600b      	str	r3, [r1, #0]
 800689e:	491b      	ldr	r1, [pc, #108]	@ (800690c <__b2d+0x90>)
 80068a0:	dc15      	bgt.n	80068ce <__b2d+0x52>
 80068a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80068a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80068aa:	45b8      	cmp	r8, r7
 80068ac:	ea43 0501 	orr.w	r5, r3, r1
 80068b0:	bf34      	ite	cc
 80068b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068b6:	2300      	movcs	r3, #0
 80068b8:	3015      	adds	r0, #21
 80068ba:	fa02 f000 	lsl.w	r0, r2, r0
 80068be:	fa23 f30c 	lsr.w	r3, r3, ip
 80068c2:	4303      	orrs	r3, r0
 80068c4:	461c      	mov	r4, r3
 80068c6:	ec45 4b10 	vmov	d0, r4, r5
 80068ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ce:	45b8      	cmp	r8, r7
 80068d0:	bf3a      	itte	cc
 80068d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80068da:	2300      	movcs	r3, #0
 80068dc:	380b      	subs	r0, #11
 80068de:	d012      	beq.n	8006906 <__b2d+0x8a>
 80068e0:	f1c0 0120 	rsb	r1, r0, #32
 80068e4:	fa23 f401 	lsr.w	r4, r3, r1
 80068e8:	4082      	lsls	r2, r0
 80068ea:	4322      	orrs	r2, r4
 80068ec:	4547      	cmp	r7, r8
 80068ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80068f2:	bf8c      	ite	hi
 80068f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80068f8:	2200      	movls	r2, #0
 80068fa:	4083      	lsls	r3, r0
 80068fc:	40ca      	lsrs	r2, r1
 80068fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006902:	4313      	orrs	r3, r2
 8006904:	e7de      	b.n	80068c4 <__b2d+0x48>
 8006906:	ea42 0501 	orr.w	r5, r2, r1
 800690a:	e7db      	b.n	80068c4 <__b2d+0x48>
 800690c:	3ff00000 	.word	0x3ff00000

08006910 <__d2b>:
 8006910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006914:	460f      	mov	r7, r1
 8006916:	2101      	movs	r1, #1
 8006918:	ec59 8b10 	vmov	r8, r9, d0
 800691c:	4616      	mov	r6, r2
 800691e:	f7ff fc13 	bl	8006148 <_Balloc>
 8006922:	4604      	mov	r4, r0
 8006924:	b930      	cbnz	r0, 8006934 <__d2b+0x24>
 8006926:	4602      	mov	r2, r0
 8006928:	4b23      	ldr	r3, [pc, #140]	@ (80069b8 <__d2b+0xa8>)
 800692a:	4824      	ldr	r0, [pc, #144]	@ (80069bc <__d2b+0xac>)
 800692c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006930:	f001 f996 	bl	8007c60 <__assert_func>
 8006934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800693c:	b10d      	cbz	r5, 8006942 <__d2b+0x32>
 800693e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f1b8 0300 	subs.w	r3, r8, #0
 8006948:	d023      	beq.n	8006992 <__d2b+0x82>
 800694a:	4668      	mov	r0, sp
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f7ff fd0c 	bl	800636a <__lo0bits>
 8006952:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006956:	b1d0      	cbz	r0, 800698e <__d2b+0x7e>
 8006958:	f1c0 0320 	rsb	r3, r0, #32
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	430b      	orrs	r3, r1
 8006962:	40c2      	lsrs	r2, r0
 8006964:	6163      	str	r3, [r4, #20]
 8006966:	9201      	str	r2, [sp, #4]
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf0c      	ite	eq
 8006970:	2201      	moveq	r2, #1
 8006972:	2202      	movne	r2, #2
 8006974:	6122      	str	r2, [r4, #16]
 8006976:	b1a5      	cbz	r5, 80069a2 <__d2b+0x92>
 8006978:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800697c:	4405      	add	r5, r0
 800697e:	603d      	str	r5, [r7, #0]
 8006980:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006984:	6030      	str	r0, [r6, #0]
 8006986:	4620      	mov	r0, r4
 8006988:	b003      	add	sp, #12
 800698a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800698e:	6161      	str	r1, [r4, #20]
 8006990:	e7ea      	b.n	8006968 <__d2b+0x58>
 8006992:	a801      	add	r0, sp, #4
 8006994:	f7ff fce9 	bl	800636a <__lo0bits>
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	6163      	str	r3, [r4, #20]
 800699c:	3020      	adds	r0, #32
 800699e:	2201      	movs	r2, #1
 80069a0:	e7e8      	b.n	8006974 <__d2b+0x64>
 80069a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069aa:	6038      	str	r0, [r7, #0]
 80069ac:	6918      	ldr	r0, [r3, #16]
 80069ae:	f7ff fcbd 	bl	800632c <__hi0bits>
 80069b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069b6:	e7e5      	b.n	8006984 <__d2b+0x74>
 80069b8:	08008a85 	.word	0x08008a85
 80069bc:	08008a96 	.word	0x08008a96

080069c0 <__ratio>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	b085      	sub	sp, #20
 80069c6:	e9cd 1000 	strd	r1, r0, [sp]
 80069ca:	a902      	add	r1, sp, #8
 80069cc:	f7ff ff56 	bl	800687c <__b2d>
 80069d0:	9800      	ldr	r0, [sp, #0]
 80069d2:	a903      	add	r1, sp, #12
 80069d4:	ec55 4b10 	vmov	r4, r5, d0
 80069d8:	f7ff ff50 	bl	800687c <__b2d>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	6919      	ldr	r1, [r3, #16]
 80069e0:	9b00      	ldr	r3, [sp, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	1ac9      	subs	r1, r1, r3
 80069e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	ec5b ab10 	vmov	sl, fp, d0
 80069f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bfce      	itee	gt
 80069f8:	462a      	movgt	r2, r5
 80069fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80069fe:	465a      	movle	r2, fp
 8006a00:	462f      	mov	r7, r5
 8006a02:	46d9      	mov	r9, fp
 8006a04:	bfcc      	ite	gt
 8006a06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006a0e:	464b      	mov	r3, r9
 8006a10:	4652      	mov	r2, sl
 8006a12:	4620      	mov	r0, r4
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7f9 ff21 	bl	800085c <__aeabi_ddiv>
 8006a1a:	ec41 0b10 	vmov	d0, r0, r1
 8006a1e:	b005      	add	sp, #20
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a24 <__copybits>:
 8006a24:	3901      	subs	r1, #1
 8006a26:	b570      	push	{r4, r5, r6, lr}
 8006a28:	1149      	asrs	r1, r1, #5
 8006a2a:	6914      	ldr	r4, [r2, #16]
 8006a2c:	3101      	adds	r1, #1
 8006a2e:	f102 0314 	add.w	r3, r2, #20
 8006a32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a3a:	1f05      	subs	r5, r0, #4
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d30c      	bcc.n	8006a5a <__copybits+0x36>
 8006a40:	1aa3      	subs	r3, r4, r2
 8006a42:	3b11      	subs	r3, #17
 8006a44:	f023 0303 	bic.w	r3, r3, #3
 8006a48:	3211      	adds	r2, #17
 8006a4a:	42a2      	cmp	r2, r4
 8006a4c:	bf88      	it	hi
 8006a4e:	2300      	movhi	r3, #0
 8006a50:	4418      	add	r0, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	4288      	cmp	r0, r1
 8006a56:	d305      	bcc.n	8006a64 <__copybits+0x40>
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a62:	e7eb      	b.n	8006a3c <__copybits+0x18>
 8006a64:	f840 3b04 	str.w	r3, [r0], #4
 8006a68:	e7f4      	b.n	8006a54 <__copybits+0x30>

08006a6a <__any_on>:
 8006a6a:	f100 0214 	add.w	r2, r0, #20
 8006a6e:	6900      	ldr	r0, [r0, #16]
 8006a70:	114b      	asrs	r3, r1, #5
 8006a72:	4298      	cmp	r0, r3
 8006a74:	b510      	push	{r4, lr}
 8006a76:	db11      	blt.n	8006a9c <__any_on+0x32>
 8006a78:	dd0a      	ble.n	8006a90 <__any_on+0x26>
 8006a7a:	f011 011f 	ands.w	r1, r1, #31
 8006a7e:	d007      	beq.n	8006a90 <__any_on+0x26>
 8006a80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a84:	fa24 f001 	lsr.w	r0, r4, r1
 8006a88:	fa00 f101 	lsl.w	r1, r0, r1
 8006a8c:	428c      	cmp	r4, r1
 8006a8e:	d10b      	bne.n	8006aa8 <__any_on+0x3e>
 8006a90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d803      	bhi.n	8006aa0 <__any_on+0x36>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	bd10      	pop	{r4, pc}
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	e7f7      	b.n	8006a90 <__any_on+0x26>
 8006aa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	d0f5      	beq.n	8006a94 <__any_on+0x2a>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	e7f6      	b.n	8006a9a <__any_on+0x30>

08006aac <sulp>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4604      	mov	r4, r0
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	ec45 4b10 	vmov	d0, r4, r5
 8006ab6:	4616      	mov	r6, r2
 8006ab8:	f7ff feba 	bl	8006830 <__ulp>
 8006abc:	ec51 0b10 	vmov	r0, r1, d0
 8006ac0:	b17e      	cbz	r6, 8006ae2 <sulp+0x36>
 8006ac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ac6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dd09      	ble.n	8006ae2 <sulp+0x36>
 8006ace:	051b      	lsls	r3, r3, #20
 8006ad0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006ada:	4622      	mov	r2, r4
 8006adc:	462b      	mov	r3, r5
 8006ade:	f7f9 fd93 	bl	8000608 <__aeabi_dmul>
 8006ae2:	ec41 0b10 	vmov	d0, r0, r1
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}

08006ae8 <_strtod_l>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	b09f      	sub	sp, #124	@ 0x7c
 8006aee:	460c      	mov	r4, r1
 8006af0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006af2:	2200      	movs	r2, #0
 8006af4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006af6:	9005      	str	r0, [sp, #20]
 8006af8:	f04f 0a00 	mov.w	sl, #0
 8006afc:	f04f 0b00 	mov.w	fp, #0
 8006b00:	460a      	mov	r2, r1
 8006b02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b04:	7811      	ldrb	r1, [r2, #0]
 8006b06:	292b      	cmp	r1, #43	@ 0x2b
 8006b08:	d04a      	beq.n	8006ba0 <_strtod_l+0xb8>
 8006b0a:	d838      	bhi.n	8006b7e <_strtod_l+0x96>
 8006b0c:	290d      	cmp	r1, #13
 8006b0e:	d832      	bhi.n	8006b76 <_strtod_l+0x8e>
 8006b10:	2908      	cmp	r1, #8
 8006b12:	d832      	bhi.n	8006b7a <_strtod_l+0x92>
 8006b14:	2900      	cmp	r1, #0
 8006b16:	d03b      	beq.n	8006b90 <_strtod_l+0xa8>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b1e:	782a      	ldrb	r2, [r5, #0]
 8006b20:	2a30      	cmp	r2, #48	@ 0x30
 8006b22:	f040 80b3 	bne.w	8006c8c <_strtod_l+0x1a4>
 8006b26:	786a      	ldrb	r2, [r5, #1]
 8006b28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b2c:	2a58      	cmp	r2, #88	@ 0x58
 8006b2e:	d16e      	bne.n	8006c0e <_strtod_l+0x126>
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4a8e      	ldr	r2, [pc, #568]	@ (8006d74 <_strtod_l+0x28c>)
 8006b3c:	9805      	ldr	r0, [sp, #20]
 8006b3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b40:	a919      	add	r1, sp, #100	@ 0x64
 8006b42:	f001 f927 	bl	8007d94 <__gethex>
 8006b46:	f010 060f 	ands.w	r6, r0, #15
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	d005      	beq.n	8006b5a <_strtod_l+0x72>
 8006b4e:	2e06      	cmp	r6, #6
 8006b50:	d128      	bne.n	8006ba4 <_strtod_l+0xbc>
 8006b52:	3501      	adds	r5, #1
 8006b54:	2300      	movs	r3, #0
 8006b56:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 858e 	bne.w	800767e <_strtod_l+0xb96>
 8006b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b64:	b1cb      	cbz	r3, 8006b9a <_strtod_l+0xb2>
 8006b66:	4652      	mov	r2, sl
 8006b68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b6c:	ec43 2b10 	vmov	d0, r2, r3
 8006b70:	b01f      	add	sp, #124	@ 0x7c
 8006b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b76:	2920      	cmp	r1, #32
 8006b78:	d1ce      	bne.n	8006b18 <_strtod_l+0x30>
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	e7c1      	b.n	8006b02 <_strtod_l+0x1a>
 8006b7e:	292d      	cmp	r1, #45	@ 0x2d
 8006b80:	d1ca      	bne.n	8006b18 <_strtod_l+0x30>
 8006b82:	2101      	movs	r1, #1
 8006b84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b86:	1c51      	adds	r1, r2, #1
 8006b88:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b8a:	7852      	ldrb	r2, [r2, #1]
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	d1c5      	bne.n	8006b1c <_strtod_l+0x34>
 8006b90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b92:	9419      	str	r4, [sp, #100]	@ 0x64
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 8570 	bne.w	800767a <_strtod_l+0xb92>
 8006b9a:	4652      	mov	r2, sl
 8006b9c:	465b      	mov	r3, fp
 8006b9e:	e7e5      	b.n	8006b6c <_strtod_l+0x84>
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	e7ef      	b.n	8006b84 <_strtod_l+0x9c>
 8006ba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ba6:	b13a      	cbz	r2, 8006bb8 <_strtod_l+0xd0>
 8006ba8:	2135      	movs	r1, #53	@ 0x35
 8006baa:	a81c      	add	r0, sp, #112	@ 0x70
 8006bac:	f7ff ff3a 	bl	8006a24 <__copybits>
 8006bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bb2:	9805      	ldr	r0, [sp, #20]
 8006bb4:	f7ff fb08 	bl	80061c8 <_Bfree>
 8006bb8:	3e01      	subs	r6, #1
 8006bba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bbc:	2e04      	cmp	r6, #4
 8006bbe:	d806      	bhi.n	8006bce <_strtod_l+0xe6>
 8006bc0:	e8df f006 	tbb	[pc, r6]
 8006bc4:	201d0314 	.word	0x201d0314
 8006bc8:	14          	.byte	0x14
 8006bc9:	00          	.byte	0x00
 8006bca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006bce:	05e1      	lsls	r1, r4, #23
 8006bd0:	bf48      	it	mi
 8006bd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bda:	0d1b      	lsrs	r3, r3, #20
 8006bdc:	051b      	lsls	r3, r3, #20
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1bb      	bne.n	8006b5a <_strtod_l+0x72>
 8006be2:	f7fe fb2f 	bl	8005244 <__errno>
 8006be6:	2322      	movs	r3, #34	@ 0x22
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	e7b6      	b.n	8006b5a <_strtod_l+0x72>
 8006bec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006bf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006bf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006bf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006bfc:	e7e7      	b.n	8006bce <_strtod_l+0xe6>
 8006bfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006d7c <_strtod_l+0x294>
 8006c02:	e7e4      	b.n	8006bce <_strtod_l+0xe6>
 8006c04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c08:	f04f 3aff 	mov.w	sl, #4294967295
 8006c0c:	e7df      	b.n	8006bce <_strtod_l+0xe6>
 8006c0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b30      	cmp	r3, #48	@ 0x30
 8006c18:	d0f9      	beq.n	8006c0e <_strtod_l+0x126>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d09d      	beq.n	8006b5a <_strtod_l+0x72>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c24:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c26:	2300      	movs	r3, #0
 8006c28:	9308      	str	r3, [sp, #32]
 8006c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c2c:	461f      	mov	r7, r3
 8006c2e:	220a      	movs	r2, #10
 8006c30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c32:	7805      	ldrb	r5, [r0, #0]
 8006c34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c38:	b2d9      	uxtb	r1, r3
 8006c3a:	2909      	cmp	r1, #9
 8006c3c:	d928      	bls.n	8006c90 <_strtod_l+0x1a8>
 8006c3e:	494e      	ldr	r1, [pc, #312]	@ (8006d78 <_strtod_l+0x290>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	f000 ffd5 	bl	8007bf0 <strncmp>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d032      	beq.n	8006cb0 <_strtod_l+0x1c8>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4681      	mov	r9, r0
 8006c50:	463d      	mov	r5, r7
 8006c52:	4603      	mov	r3, r0
 8006c54:	2a65      	cmp	r2, #101	@ 0x65
 8006c56:	d001      	beq.n	8006c5c <_strtod_l+0x174>
 8006c58:	2a45      	cmp	r2, #69	@ 0x45
 8006c5a:	d114      	bne.n	8006c86 <_strtod_l+0x19e>
 8006c5c:	b91d      	cbnz	r5, 8006c66 <_strtod_l+0x17e>
 8006c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c60:	4302      	orrs	r2, r0
 8006c62:	d095      	beq.n	8006b90 <_strtod_l+0xa8>
 8006c64:	2500      	movs	r5, #0
 8006c66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c68:	1c62      	adds	r2, r4, #1
 8006c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c6c:	7862      	ldrb	r2, [r4, #1]
 8006c6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c70:	d077      	beq.n	8006d62 <_strtod_l+0x27a>
 8006c72:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c74:	d07b      	beq.n	8006d6e <_strtod_l+0x286>
 8006c76:	f04f 0c00 	mov.w	ip, #0
 8006c7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c7e:	2909      	cmp	r1, #9
 8006c80:	f240 8082 	bls.w	8006d88 <_strtod_l+0x2a0>
 8006c84:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	e0a2      	b.n	8006dd2 <_strtod_l+0x2ea>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e7c7      	b.n	8006c20 <_strtod_l+0x138>
 8006c90:	2f08      	cmp	r7, #8
 8006c92:	bfd5      	itete	le
 8006c94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006c96:	9908      	ldrgt	r1, [sp, #32]
 8006c98:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ca0:	f100 0001 	add.w	r0, r0, #1
 8006ca4:	bfd4      	ite	le
 8006ca6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ca8:	9308      	strgt	r3, [sp, #32]
 8006caa:	3701      	adds	r7, #1
 8006cac:	9019      	str	r0, [sp, #100]	@ 0x64
 8006cae:	e7bf      	b.n	8006c30 <_strtod_l+0x148>
 8006cb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cb6:	785a      	ldrb	r2, [r3, #1]
 8006cb8:	b37f      	cbz	r7, 8006d1a <_strtod_l+0x232>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	463d      	mov	r5, r7
 8006cbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d912      	bls.n	8006cec <_strtod_l+0x204>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7c4      	b.n	8006c54 <_strtod_l+0x16c>
 8006cca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cd0:	785a      	ldrb	r2, [r3, #1]
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	2a30      	cmp	r2, #48	@ 0x30
 8006cd6:	d0f8      	beq.n	8006cca <_strtod_l+0x1e2>
 8006cd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	f200 84d3 	bhi.w	8007688 <_strtod_l+0xba0>
 8006ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ce6:	4681      	mov	r9, r0
 8006ce8:	2000      	movs	r0, #0
 8006cea:	4605      	mov	r5, r0
 8006cec:	3a30      	subs	r2, #48	@ 0x30
 8006cee:	f100 0301 	add.w	r3, r0, #1
 8006cf2:	d02a      	beq.n	8006d4a <_strtod_l+0x262>
 8006cf4:	4499      	add	r9, r3
 8006cf6:	eb00 0c05 	add.w	ip, r0, r5
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	210a      	movs	r1, #10
 8006cfe:	4563      	cmp	r3, ip
 8006d00:	d10d      	bne.n	8006d1e <_strtod_l+0x236>
 8006d02:	1c69      	adds	r1, r5, #1
 8006d04:	4401      	add	r1, r0
 8006d06:	4428      	add	r0, r5
 8006d08:	2808      	cmp	r0, #8
 8006d0a:	dc16      	bgt.n	8006d3a <_strtod_l+0x252>
 8006d0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d0e:	230a      	movs	r3, #10
 8006d10:	fb03 2300 	mla	r3, r3, r0, r2
 8006d14:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d16:	2300      	movs	r3, #0
 8006d18:	e018      	b.n	8006d4c <_strtod_l+0x264>
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	e7da      	b.n	8006cd4 <_strtod_l+0x1ec>
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	f103 0301 	add.w	r3, r3, #1
 8006d24:	dc03      	bgt.n	8006d2e <_strtod_l+0x246>
 8006d26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d28:	434e      	muls	r6, r1
 8006d2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d2c:	e7e7      	b.n	8006cfe <_strtod_l+0x216>
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	bfde      	ittt	le
 8006d32:	9e08      	ldrle	r6, [sp, #32]
 8006d34:	434e      	mulle	r6, r1
 8006d36:	9608      	strle	r6, [sp, #32]
 8006d38:	e7e1      	b.n	8006cfe <_strtod_l+0x216>
 8006d3a:	280f      	cmp	r0, #15
 8006d3c:	dceb      	bgt.n	8006d16 <_strtod_l+0x22e>
 8006d3e:	9808      	ldr	r0, [sp, #32]
 8006d40:	230a      	movs	r3, #10
 8006d42:	fb03 2300 	mla	r3, r3, r0, r2
 8006d46:	9308      	str	r3, [sp, #32]
 8006d48:	e7e5      	b.n	8006d16 <_strtod_l+0x22e>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d4e:	1c50      	adds	r0, r2, #1
 8006d50:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d52:	7852      	ldrb	r2, [r2, #1]
 8006d54:	4618      	mov	r0, r3
 8006d56:	460d      	mov	r5, r1
 8006d58:	e7b1      	b.n	8006cbe <_strtod_l+0x1d6>
 8006d5a:	f04f 0900 	mov.w	r9, #0
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e77d      	b.n	8006c5e <_strtod_l+0x176>
 8006d62:	f04f 0c00 	mov.w	ip, #0
 8006d66:	1ca2      	adds	r2, r4, #2
 8006d68:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d6a:	78a2      	ldrb	r2, [r4, #2]
 8006d6c:	e785      	b.n	8006c7a <_strtod_l+0x192>
 8006d6e:	f04f 0c01 	mov.w	ip, #1
 8006d72:	e7f8      	b.n	8006d66 <_strtod_l+0x27e>
 8006d74:	08008c08 	.word	0x08008c08
 8006d78:	08008bf0 	.word	0x08008bf0
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d82:	1c51      	adds	r1, r2, #1
 8006d84:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d86:	7852      	ldrb	r2, [r2, #1]
 8006d88:	2a30      	cmp	r2, #48	@ 0x30
 8006d8a:	d0f9      	beq.n	8006d80 <_strtod_l+0x298>
 8006d8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006d90:	2908      	cmp	r1, #8
 8006d92:	f63f af78 	bhi.w	8006c86 <_strtod_l+0x19e>
 8006d96:	3a30      	subs	r2, #48	@ 0x30
 8006d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006d9e:	f04f 080a 	mov.w	r8, #10
 8006da2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006da4:	1c56      	adds	r6, r2, #1
 8006da6:	9619      	str	r6, [sp, #100]	@ 0x64
 8006da8:	7852      	ldrb	r2, [r2, #1]
 8006daa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006dae:	f1be 0f09 	cmp.w	lr, #9
 8006db2:	d939      	bls.n	8006e28 <_strtod_l+0x340>
 8006db4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006db6:	1a76      	subs	r6, r6, r1
 8006db8:	2e08      	cmp	r6, #8
 8006dba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006dbe:	dc03      	bgt.n	8006dc8 <_strtod_l+0x2e0>
 8006dc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006dc2:	4588      	cmp	r8, r1
 8006dc4:	bfa8      	it	ge
 8006dc6:	4688      	movge	r8, r1
 8006dc8:	f1bc 0f00 	cmp.w	ip, #0
 8006dcc:	d001      	beq.n	8006dd2 <_strtod_l+0x2ea>
 8006dce:	f1c8 0800 	rsb	r8, r8, #0
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	d14e      	bne.n	8006e74 <_strtod_l+0x38c>
 8006dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dd8:	4308      	orrs	r0, r1
 8006dda:	f47f aebe 	bne.w	8006b5a <_strtod_l+0x72>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f aed6 	bne.w	8006b90 <_strtod_l+0xa8>
 8006de4:	2a69      	cmp	r2, #105	@ 0x69
 8006de6:	d028      	beq.n	8006e3a <_strtod_l+0x352>
 8006de8:	dc25      	bgt.n	8006e36 <_strtod_l+0x34e>
 8006dea:	2a49      	cmp	r2, #73	@ 0x49
 8006dec:	d025      	beq.n	8006e3a <_strtod_l+0x352>
 8006dee:	2a4e      	cmp	r2, #78	@ 0x4e
 8006df0:	f47f aece 	bne.w	8006b90 <_strtod_l+0xa8>
 8006df4:	499b      	ldr	r1, [pc, #620]	@ (8007064 <_strtod_l+0x57c>)
 8006df6:	a819      	add	r0, sp, #100	@ 0x64
 8006df8:	f001 f9ee 	bl	80081d8 <__match>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f43f aec7 	beq.w	8006b90 <_strtod_l+0xa8>
 8006e02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b28      	cmp	r3, #40	@ 0x28
 8006e08:	d12e      	bne.n	8006e68 <_strtod_l+0x380>
 8006e0a:	4997      	ldr	r1, [pc, #604]	@ (8007068 <_strtod_l+0x580>)
 8006e0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e0e:	a819      	add	r0, sp, #100	@ 0x64
 8006e10:	f001 f9f6 	bl	8008200 <__hexnan>
 8006e14:	2805      	cmp	r0, #5
 8006e16:	d127      	bne.n	8006e68 <_strtod_l+0x380>
 8006e18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e26:	e698      	b.n	8006b5a <_strtod_l+0x72>
 8006e28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e2a:	fb08 2101 	mla	r1, r8, r1, r2
 8006e2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e32:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e34:	e7b5      	b.n	8006da2 <_strtod_l+0x2ba>
 8006e36:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e38:	e7da      	b.n	8006df0 <_strtod_l+0x308>
 8006e3a:	498c      	ldr	r1, [pc, #560]	@ (800706c <_strtod_l+0x584>)
 8006e3c:	a819      	add	r0, sp, #100	@ 0x64
 8006e3e:	f001 f9cb 	bl	80081d8 <__match>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f43f aea4 	beq.w	8006b90 <_strtod_l+0xa8>
 8006e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e4a:	4989      	ldr	r1, [pc, #548]	@ (8007070 <_strtod_l+0x588>)
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	a819      	add	r0, sp, #100	@ 0x64
 8006e50:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e52:	f001 f9c1 	bl	80081d8 <__match>
 8006e56:	b910      	cbnz	r0, 8006e5e <_strtod_l+0x376>
 8006e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007080 <_strtod_l+0x598>
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	e678      	b.n	8006b5a <_strtod_l+0x72>
 8006e68:	4882      	ldr	r0, [pc, #520]	@ (8007074 <_strtod_l+0x58c>)
 8006e6a:	f000 fef1 	bl	8007c50 <nan>
 8006e6e:	ec5b ab10 	vmov	sl, fp, d0
 8006e72:	e672      	b.n	8006b5a <_strtod_l+0x72>
 8006e74:	eba8 0309 	sub.w	r3, r8, r9
 8006e78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	bf08      	it	eq
 8006e80:	462f      	moveq	r7, r5
 8006e82:	2d10      	cmp	r5, #16
 8006e84:	462c      	mov	r4, r5
 8006e86:	bfa8      	it	ge
 8006e88:	2410      	movge	r4, #16
 8006e8a:	f7f9 fb43 	bl	8000514 <__aeabi_ui2d>
 8006e8e:	2d09      	cmp	r5, #9
 8006e90:	4682      	mov	sl, r0
 8006e92:	468b      	mov	fp, r1
 8006e94:	dc13      	bgt.n	8006ebe <_strtod_l+0x3d6>
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f43f ae5e 	beq.w	8006b5a <_strtod_l+0x72>
 8006e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea0:	dd78      	ble.n	8006f94 <_strtod_l+0x4ac>
 8006ea2:	2b16      	cmp	r3, #22
 8006ea4:	dc5f      	bgt.n	8006f66 <_strtod_l+0x47e>
 8006ea6:	4974      	ldr	r1, [pc, #464]	@ (8007078 <_strtod_l+0x590>)
 8006ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	f7f9 fba8 	bl	8000608 <__aeabi_dmul>
 8006eb8:	4682      	mov	sl, r0
 8006eba:	468b      	mov	fp, r1
 8006ebc:	e64d      	b.n	8006b5a <_strtod_l+0x72>
 8006ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8007078 <_strtod_l+0x590>)
 8006ec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ec4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ec8:	f7f9 fb9e 	bl	8000608 <__aeabi_dmul>
 8006ecc:	4682      	mov	sl, r0
 8006ece:	9808      	ldr	r0, [sp, #32]
 8006ed0:	468b      	mov	fp, r1
 8006ed2:	f7f9 fb1f 	bl	8000514 <__aeabi_ui2d>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4650      	mov	r0, sl
 8006edc:	4659      	mov	r1, fp
 8006ede:	f7f9 f9dd 	bl	800029c <__adddf3>
 8006ee2:	2d0f      	cmp	r5, #15
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	ddd5      	ble.n	8006e96 <_strtod_l+0x3ae>
 8006eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eec:	1b2c      	subs	r4, r5, r4
 8006eee:	441c      	add	r4, r3
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	f340 8096 	ble.w	8007022 <_strtod_l+0x53a>
 8006ef6:	f014 030f 	ands.w	r3, r4, #15
 8006efa:	d00a      	beq.n	8006f12 <_strtod_l+0x42a>
 8006efc:	495e      	ldr	r1, [pc, #376]	@ (8007078 <_strtod_l+0x590>)
 8006efe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f0a:	f7f9 fb7d 	bl	8000608 <__aeabi_dmul>
 8006f0e:	4682      	mov	sl, r0
 8006f10:	468b      	mov	fp, r1
 8006f12:	f034 040f 	bics.w	r4, r4, #15
 8006f16:	d073      	beq.n	8007000 <_strtod_l+0x518>
 8006f18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f1c:	dd48      	ble.n	8006fb0 <_strtod_l+0x4c8>
 8006f1e:	2400      	movs	r4, #0
 8006f20:	46a0      	mov	r8, r4
 8006f22:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f24:	46a1      	mov	r9, r4
 8006f26:	9a05      	ldr	r2, [sp, #20]
 8006f28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007080 <_strtod_l+0x598>
 8006f2c:	2322      	movs	r3, #34	@ 0x22
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	f04f 0a00 	mov.w	sl, #0
 8006f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f43f ae0f 	beq.w	8006b5a <_strtod_l+0x72>
 8006f3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f3e:	9805      	ldr	r0, [sp, #20]
 8006f40:	f7ff f942 	bl	80061c8 <_Bfree>
 8006f44:	9805      	ldr	r0, [sp, #20]
 8006f46:	4649      	mov	r1, r9
 8006f48:	f7ff f93e 	bl	80061c8 <_Bfree>
 8006f4c:	9805      	ldr	r0, [sp, #20]
 8006f4e:	4641      	mov	r1, r8
 8006f50:	f7ff f93a 	bl	80061c8 <_Bfree>
 8006f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f56:	9805      	ldr	r0, [sp, #20]
 8006f58:	f7ff f936 	bl	80061c8 <_Bfree>
 8006f5c:	9805      	ldr	r0, [sp, #20]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	f7ff f932 	bl	80061c8 <_Bfree>
 8006f64:	e5f9      	b.n	8006b5a <_strtod_l+0x72>
 8006f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	dbbc      	blt.n	8006eea <_strtod_l+0x402>
 8006f70:	4c41      	ldr	r4, [pc, #260]	@ (8007078 <_strtod_l+0x590>)
 8006f72:	f1c5 050f 	rsb	r5, r5, #15
 8006f76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f82:	f7f9 fb41 	bl	8000608 <__aeabi_dmul>
 8006f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f88:	1b5d      	subs	r5, r3, r5
 8006f8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f92:	e78f      	b.n	8006eb4 <_strtod_l+0x3cc>
 8006f94:	3316      	adds	r3, #22
 8006f96:	dba8      	blt.n	8006eea <_strtod_l+0x402>
 8006f98:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <_strtod_l+0x590>)
 8006f9a:	eba9 0808 	sub.w	r8, r9, r8
 8006f9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006fa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	4659      	mov	r1, fp
 8006faa:	f7f9 fc57 	bl	800085c <__aeabi_ddiv>
 8006fae:	e783      	b.n	8006eb8 <_strtod_l+0x3d0>
 8006fb0:	4b32      	ldr	r3, [pc, #200]	@ (800707c <_strtod_l+0x594>)
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	1124      	asrs	r4, r4, #4
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	461e      	mov	r6, r3
 8006fbe:	2c01      	cmp	r4, #1
 8006fc0:	dc21      	bgt.n	8007006 <_strtod_l+0x51e>
 8006fc2:	b10b      	cbz	r3, 8006fc8 <_strtod_l+0x4e0>
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	492c      	ldr	r1, [pc, #176]	@ (800707c <_strtod_l+0x594>)
 8006fca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006fce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fda:	f7f9 fb15 	bl	8000608 <__aeabi_dmul>
 8006fde:	4b28      	ldr	r3, [pc, #160]	@ (8007080 <_strtod_l+0x598>)
 8006fe0:	460a      	mov	r2, r1
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	4927      	ldr	r1, [pc, #156]	@ (8007084 <_strtod_l+0x59c>)
 8006fe6:	428b      	cmp	r3, r1
 8006fe8:	4682      	mov	sl, r0
 8006fea:	d898      	bhi.n	8006f1e <_strtod_l+0x436>
 8006fec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf86      	itte	hi
 8006ff4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007088 <_strtod_l+0x5a0>
 8006ff8:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ffc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007000:	2300      	movs	r3, #0
 8007002:	9308      	str	r3, [sp, #32]
 8007004:	e07a      	b.n	80070fc <_strtod_l+0x614>
 8007006:	07e2      	lsls	r2, r4, #31
 8007008:	d505      	bpl.n	8007016 <_strtod_l+0x52e>
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f7f9 fafa 	bl	8000608 <__aeabi_dmul>
 8007014:	2301      	movs	r3, #1
 8007016:	9a08      	ldr	r2, [sp, #32]
 8007018:	3208      	adds	r2, #8
 800701a:	3601      	adds	r6, #1
 800701c:	1064      	asrs	r4, r4, #1
 800701e:	9208      	str	r2, [sp, #32]
 8007020:	e7cd      	b.n	8006fbe <_strtod_l+0x4d6>
 8007022:	d0ed      	beq.n	8007000 <_strtod_l+0x518>
 8007024:	4264      	negs	r4, r4
 8007026:	f014 020f 	ands.w	r2, r4, #15
 800702a:	d00a      	beq.n	8007042 <_strtod_l+0x55a>
 800702c:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <_strtod_l+0x590>)
 800702e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007032:	4650      	mov	r0, sl
 8007034:	4659      	mov	r1, fp
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 fc0f 	bl	800085c <__aeabi_ddiv>
 800703e:	4682      	mov	sl, r0
 8007040:	468b      	mov	fp, r1
 8007042:	1124      	asrs	r4, r4, #4
 8007044:	d0dc      	beq.n	8007000 <_strtod_l+0x518>
 8007046:	2c1f      	cmp	r4, #31
 8007048:	dd20      	ble.n	800708c <_strtod_l+0x5a4>
 800704a:	2400      	movs	r4, #0
 800704c:	46a0      	mov	r8, r4
 800704e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007050:	46a1      	mov	r9, r4
 8007052:	9a05      	ldr	r2, [sp, #20]
 8007054:	2322      	movs	r3, #34	@ 0x22
 8007056:	f04f 0a00 	mov.w	sl, #0
 800705a:	f04f 0b00 	mov.w	fp, #0
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e768      	b.n	8006f34 <_strtod_l+0x44c>
 8007062:	bf00      	nop
 8007064:	080089dd 	.word	0x080089dd
 8007068:	08008bf4 	.word	0x08008bf4
 800706c:	080089d5 	.word	0x080089d5
 8007070:	08008a0c 	.word	0x08008a0c
 8007074:	08008d9d 	.word	0x08008d9d
 8007078:	08008b28 	.word	0x08008b28
 800707c:	08008b00 	.word	0x08008b00
 8007080:	7ff00000 	.word	0x7ff00000
 8007084:	7ca00000 	.word	0x7ca00000
 8007088:	7fefffff 	.word	0x7fefffff
 800708c:	f014 0310 	ands.w	r3, r4, #16
 8007090:	bf18      	it	ne
 8007092:	236a      	movne	r3, #106	@ 0x6a
 8007094:	4ea9      	ldr	r6, [pc, #676]	@ (800733c <_strtod_l+0x854>)
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	4650      	mov	r0, sl
 800709a:	4659      	mov	r1, fp
 800709c:	2300      	movs	r3, #0
 800709e:	07e2      	lsls	r2, r4, #31
 80070a0:	d504      	bpl.n	80070ac <_strtod_l+0x5c4>
 80070a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070a6:	f7f9 faaf 	bl	8000608 <__aeabi_dmul>
 80070aa:	2301      	movs	r3, #1
 80070ac:	1064      	asrs	r4, r4, #1
 80070ae:	f106 0608 	add.w	r6, r6, #8
 80070b2:	d1f4      	bne.n	800709e <_strtod_l+0x5b6>
 80070b4:	b10b      	cbz	r3, 80070ba <_strtod_l+0x5d2>
 80070b6:	4682      	mov	sl, r0
 80070b8:	468b      	mov	fp, r1
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	b1b3      	cbz	r3, 80070ec <_strtod_l+0x604>
 80070be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	4659      	mov	r1, fp
 80070ca:	dd0f      	ble.n	80070ec <_strtod_l+0x604>
 80070cc:	2b1f      	cmp	r3, #31
 80070ce:	dd55      	ble.n	800717c <_strtod_l+0x694>
 80070d0:	2b34      	cmp	r3, #52	@ 0x34
 80070d2:	bfde      	ittt	le
 80070d4:	f04f 33ff 	movle.w	r3, #4294967295
 80070d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070dc:	4093      	lslle	r3, r2
 80070de:	f04f 0a00 	mov.w	sl, #0
 80070e2:	bfcc      	ite	gt
 80070e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80070e8:	ea03 0b01 	andle.w	fp, r3, r1
 80070ec:	2200      	movs	r2, #0
 80070ee:	2300      	movs	r3, #0
 80070f0:	4650      	mov	r0, sl
 80070f2:	4659      	mov	r1, fp
 80070f4:	f7f9 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d1a6      	bne.n	800704a <_strtod_l+0x562>
 80070fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007102:	9805      	ldr	r0, [sp, #20]
 8007104:	462b      	mov	r3, r5
 8007106:	463a      	mov	r2, r7
 8007108:	f7ff f8c6 	bl	8006298 <__s2b>
 800710c:	900a      	str	r0, [sp, #40]	@ 0x28
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f af05 	beq.w	8006f1e <_strtod_l+0x436>
 8007114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007116:	2a00      	cmp	r2, #0
 8007118:	eba9 0308 	sub.w	r3, r9, r8
 800711c:	bfa8      	it	ge
 800711e:	2300      	movge	r3, #0
 8007120:	9312      	str	r3, [sp, #72]	@ 0x48
 8007122:	2400      	movs	r4, #0
 8007124:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007128:	9316      	str	r3, [sp, #88]	@ 0x58
 800712a:	46a0      	mov	r8, r4
 800712c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712e:	9805      	ldr	r0, [sp, #20]
 8007130:	6859      	ldr	r1, [r3, #4]
 8007132:	f7ff f809 	bl	8006148 <_Balloc>
 8007136:	4681      	mov	r9, r0
 8007138:	2800      	cmp	r0, #0
 800713a:	f43f aef4 	beq.w	8006f26 <_strtod_l+0x43e>
 800713e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	3202      	adds	r2, #2
 8007144:	f103 010c 	add.w	r1, r3, #12
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	300c      	adds	r0, #12
 800714c:	f000 fd72 	bl	8007c34 <memcpy>
 8007150:	ec4b ab10 	vmov	d0, sl, fp
 8007154:	9805      	ldr	r0, [sp, #20]
 8007156:	aa1c      	add	r2, sp, #112	@ 0x70
 8007158:	a91b      	add	r1, sp, #108	@ 0x6c
 800715a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800715e:	f7ff fbd7 	bl	8006910 <__d2b>
 8007162:	901a      	str	r0, [sp, #104]	@ 0x68
 8007164:	2800      	cmp	r0, #0
 8007166:	f43f aede 	beq.w	8006f26 <_strtod_l+0x43e>
 800716a:	9805      	ldr	r0, [sp, #20]
 800716c:	2101      	movs	r1, #1
 800716e:	f7ff f929 	bl	80063c4 <__i2b>
 8007172:	4680      	mov	r8, r0
 8007174:	b948      	cbnz	r0, 800718a <_strtod_l+0x6a2>
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	e6d4      	b.n	8006f26 <_strtod_l+0x43e>
 800717c:	f04f 32ff 	mov.w	r2, #4294967295
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	ea03 0a0a 	and.w	sl, r3, sl
 8007188:	e7b0      	b.n	80070ec <_strtod_l+0x604>
 800718a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800718c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800718e:	2d00      	cmp	r5, #0
 8007190:	bfab      	itete	ge
 8007192:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007194:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007196:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007198:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800719a:	bfac      	ite	ge
 800719c:	18ef      	addge	r7, r5, r3
 800719e:	1b5e      	sublt	r6, r3, r5
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	1aed      	subs	r5, r5, r3
 80071a4:	4415      	add	r5, r2
 80071a6:	4b66      	ldr	r3, [pc, #408]	@ (8007340 <_strtod_l+0x858>)
 80071a8:	3d01      	subs	r5, #1
 80071aa:	429d      	cmp	r5, r3
 80071ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071b0:	da50      	bge.n	8007254 <_strtod_l+0x76c>
 80071b2:	1b5b      	subs	r3, r3, r5
 80071b4:	2b1f      	cmp	r3, #31
 80071b6:	eba2 0203 	sub.w	r2, r2, r3
 80071ba:	f04f 0101 	mov.w	r1, #1
 80071be:	dc3d      	bgt.n	800723c <_strtod_l+0x754>
 80071c0:	fa01 f303 	lsl.w	r3, r1, r3
 80071c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071c6:	2300      	movs	r3, #0
 80071c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80071ca:	18bd      	adds	r5, r7, r2
 80071cc:	9b08      	ldr	r3, [sp, #32]
 80071ce:	42af      	cmp	r7, r5
 80071d0:	4416      	add	r6, r2
 80071d2:	441e      	add	r6, r3
 80071d4:	463b      	mov	r3, r7
 80071d6:	bfa8      	it	ge
 80071d8:	462b      	movge	r3, r5
 80071da:	42b3      	cmp	r3, r6
 80071dc:	bfa8      	it	ge
 80071de:	4633      	movge	r3, r6
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfc2      	ittt	gt
 80071e4:	1aed      	subgt	r5, r5, r3
 80071e6:	1af6      	subgt	r6, r6, r3
 80071e8:	1aff      	subgt	r7, r7, r3
 80071ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dd16      	ble.n	800721e <_strtod_l+0x736>
 80071f0:	4641      	mov	r1, r8
 80071f2:	9805      	ldr	r0, [sp, #20]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f7ff f9a5 	bl	8006544 <__pow5mult>
 80071fa:	4680      	mov	r8, r0
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0ba      	beq.n	8007176 <_strtod_l+0x68e>
 8007200:	4601      	mov	r1, r0
 8007202:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007204:	9805      	ldr	r0, [sp, #20]
 8007206:	f7ff f8f3 	bl	80063f0 <__multiply>
 800720a:	900e      	str	r0, [sp, #56]	@ 0x38
 800720c:	2800      	cmp	r0, #0
 800720e:	f43f ae8a 	beq.w	8006f26 <_strtod_l+0x43e>
 8007212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007214:	9805      	ldr	r0, [sp, #20]
 8007216:	f7fe ffd7 	bl	80061c8 <_Bfree>
 800721a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800721c:	931a      	str	r3, [sp, #104]	@ 0x68
 800721e:	2d00      	cmp	r5, #0
 8007220:	dc1d      	bgt.n	800725e <_strtod_l+0x776>
 8007222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd23      	ble.n	8007270 <_strtod_l+0x788>
 8007228:	4649      	mov	r1, r9
 800722a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800722c:	9805      	ldr	r0, [sp, #20]
 800722e:	f7ff f989 	bl	8006544 <__pow5mult>
 8007232:	4681      	mov	r9, r0
 8007234:	b9e0      	cbnz	r0, 8007270 <_strtod_l+0x788>
 8007236:	f04f 0900 	mov.w	r9, #0
 800723a:	e674      	b.n	8006f26 <_strtod_l+0x43e>
 800723c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007240:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007244:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007248:	35e2      	adds	r5, #226	@ 0xe2
 800724a:	fa01 f305 	lsl.w	r3, r1, r5
 800724e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007250:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007252:	e7ba      	b.n	80071ca <_strtod_l+0x6e2>
 8007254:	2300      	movs	r3, #0
 8007256:	9310      	str	r3, [sp, #64]	@ 0x40
 8007258:	2301      	movs	r3, #1
 800725a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800725c:	e7b5      	b.n	80071ca <_strtod_l+0x6e2>
 800725e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007260:	9805      	ldr	r0, [sp, #20]
 8007262:	462a      	mov	r2, r5
 8007264:	f7ff f9c8 	bl	80065f8 <__lshift>
 8007268:	901a      	str	r0, [sp, #104]	@ 0x68
 800726a:	2800      	cmp	r0, #0
 800726c:	d1d9      	bne.n	8007222 <_strtod_l+0x73a>
 800726e:	e65a      	b.n	8006f26 <_strtod_l+0x43e>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd07      	ble.n	8007284 <_strtod_l+0x79c>
 8007274:	4649      	mov	r1, r9
 8007276:	9805      	ldr	r0, [sp, #20]
 8007278:	4632      	mov	r2, r6
 800727a:	f7ff f9bd 	bl	80065f8 <__lshift>
 800727e:	4681      	mov	r9, r0
 8007280:	2800      	cmp	r0, #0
 8007282:	d0d8      	beq.n	8007236 <_strtod_l+0x74e>
 8007284:	2f00      	cmp	r7, #0
 8007286:	dd08      	ble.n	800729a <_strtod_l+0x7b2>
 8007288:	4641      	mov	r1, r8
 800728a:	9805      	ldr	r0, [sp, #20]
 800728c:	463a      	mov	r2, r7
 800728e:	f7ff f9b3 	bl	80065f8 <__lshift>
 8007292:	4680      	mov	r8, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	f43f ae46 	beq.w	8006f26 <_strtod_l+0x43e>
 800729a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800729c:	9805      	ldr	r0, [sp, #20]
 800729e:	464a      	mov	r2, r9
 80072a0:	f7ff fa32 	bl	8006708 <__mdiff>
 80072a4:	4604      	mov	r4, r0
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f ae3d 	beq.w	8006f26 <_strtod_l+0x43e>
 80072ac:	68c3      	ldr	r3, [r0, #12]
 80072ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072b0:	2300      	movs	r3, #0
 80072b2:	60c3      	str	r3, [r0, #12]
 80072b4:	4641      	mov	r1, r8
 80072b6:	f7ff fa0b 	bl	80066d0 <__mcmp>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	da46      	bge.n	800734c <_strtod_l+0x864>
 80072be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072c0:	ea53 030a 	orrs.w	r3, r3, sl
 80072c4:	d16c      	bne.n	80073a0 <_strtod_l+0x8b8>
 80072c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d168      	bne.n	80073a0 <_strtod_l+0x8b8>
 80072ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072d2:	0d1b      	lsrs	r3, r3, #20
 80072d4:	051b      	lsls	r3, r3, #20
 80072d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072da:	d961      	bls.n	80073a0 <_strtod_l+0x8b8>
 80072dc:	6963      	ldr	r3, [r4, #20]
 80072de:	b913      	cbnz	r3, 80072e6 <_strtod_l+0x7fe>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	dd5c      	ble.n	80073a0 <_strtod_l+0x8b8>
 80072e6:	4621      	mov	r1, r4
 80072e8:	2201      	movs	r2, #1
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	f7ff f984 	bl	80065f8 <__lshift>
 80072f0:	4641      	mov	r1, r8
 80072f2:	4604      	mov	r4, r0
 80072f4:	f7ff f9ec 	bl	80066d0 <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dd51      	ble.n	80073a0 <_strtod_l+0x8b8>
 80072fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007300:	9a08      	ldr	r2, [sp, #32]
 8007302:	0d1b      	lsrs	r3, r3, #20
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	2a00      	cmp	r2, #0
 8007308:	d06b      	beq.n	80073e2 <_strtod_l+0x8fa>
 800730a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800730e:	d868      	bhi.n	80073e2 <_strtod_l+0x8fa>
 8007310:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007314:	f67f ae9d 	bls.w	8007052 <_strtod_l+0x56a>
 8007318:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <_strtod_l+0x85c>)
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	2200      	movs	r2, #0
 8007320:	f7f9 f972 	bl	8000608 <__aeabi_dmul>
 8007324:	4b08      	ldr	r3, [pc, #32]	@ (8007348 <_strtod_l+0x860>)
 8007326:	400b      	ands	r3, r1
 8007328:	4682      	mov	sl, r0
 800732a:	468b      	mov	fp, r1
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f ae05 	bne.w	8006f3c <_strtod_l+0x454>
 8007332:	9a05      	ldr	r2, [sp, #20]
 8007334:	2322      	movs	r3, #34	@ 0x22
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e600      	b.n	8006f3c <_strtod_l+0x454>
 800733a:	bf00      	nop
 800733c:	08008c20 	.word	0x08008c20
 8007340:	fffffc02 	.word	0xfffffc02
 8007344:	39500000 	.word	0x39500000
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007350:	d165      	bne.n	800741e <_strtod_l+0x936>
 8007352:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007358:	b35a      	cbz	r2, 80073b2 <_strtod_l+0x8ca>
 800735a:	4a9f      	ldr	r2, [pc, #636]	@ (80075d8 <_strtod_l+0xaf0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d12b      	bne.n	80073b8 <_strtod_l+0x8d0>
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	4651      	mov	r1, sl
 8007364:	b303      	cbz	r3, 80073a8 <_strtod_l+0x8c0>
 8007366:	4b9d      	ldr	r3, [pc, #628]	@ (80075dc <_strtod_l+0xaf4>)
 8007368:	465a      	mov	r2, fp
 800736a:	4013      	ands	r3, r2
 800736c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	d81b      	bhi.n	80073ae <_strtod_l+0x8c6>
 8007376:	0d1b      	lsrs	r3, r3, #20
 8007378:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	4299      	cmp	r1, r3
 8007382:	d119      	bne.n	80073b8 <_strtod_l+0x8d0>
 8007384:	4b96      	ldr	r3, [pc, #600]	@ (80075e0 <_strtod_l+0xaf8>)
 8007386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007388:	429a      	cmp	r2, r3
 800738a:	d102      	bne.n	8007392 <_strtod_l+0x8aa>
 800738c:	3101      	adds	r1, #1
 800738e:	f43f adca 	beq.w	8006f26 <_strtod_l+0x43e>
 8007392:	4b92      	ldr	r3, [pc, #584]	@ (80075dc <_strtod_l+0xaf4>)
 8007394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007396:	401a      	ands	r2, r3
 8007398:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800739c:	f04f 0a00 	mov.w	sl, #0
 80073a0:	9b08      	ldr	r3, [sp, #32]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1b8      	bne.n	8007318 <_strtod_l+0x830>
 80073a6:	e5c9      	b.n	8006f3c <_strtod_l+0x454>
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	e7e8      	b.n	8007380 <_strtod_l+0x898>
 80073ae:	4613      	mov	r3, r2
 80073b0:	e7e6      	b.n	8007380 <_strtod_l+0x898>
 80073b2:	ea53 030a 	orrs.w	r3, r3, sl
 80073b6:	d0a1      	beq.n	80072fc <_strtod_l+0x814>
 80073b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073ba:	b1db      	cbz	r3, 80073f4 <_strtod_l+0x90c>
 80073bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073be:	4213      	tst	r3, r2
 80073c0:	d0ee      	beq.n	80073a0 <_strtod_l+0x8b8>
 80073c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073c4:	9a08      	ldr	r2, [sp, #32]
 80073c6:	4650      	mov	r0, sl
 80073c8:	4659      	mov	r1, fp
 80073ca:	b1bb      	cbz	r3, 80073fc <_strtod_l+0x914>
 80073cc:	f7ff fb6e 	bl	8006aac <sulp>
 80073d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073d4:	ec53 2b10 	vmov	r2, r3, d0
 80073d8:	f7f8 ff60 	bl	800029c <__adddf3>
 80073dc:	4682      	mov	sl, r0
 80073de:	468b      	mov	fp, r1
 80073e0:	e7de      	b.n	80073a0 <_strtod_l+0x8b8>
 80073e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80073e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073ee:	f04f 3aff 	mov.w	sl, #4294967295
 80073f2:	e7d5      	b.n	80073a0 <_strtod_l+0x8b8>
 80073f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073f6:	ea13 0f0a 	tst.w	r3, sl
 80073fa:	e7e1      	b.n	80073c0 <_strtod_l+0x8d8>
 80073fc:	f7ff fb56 	bl	8006aac <sulp>
 8007400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007404:	ec53 2b10 	vmov	r2, r3, d0
 8007408:	f7f8 ff46 	bl	8000298 <__aeabi_dsub>
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4682      	mov	sl, r0
 8007412:	468b      	mov	fp, r1
 8007414:	f7f9 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8007418:	2800      	cmp	r0, #0
 800741a:	d0c1      	beq.n	80073a0 <_strtod_l+0x8b8>
 800741c:	e619      	b.n	8007052 <_strtod_l+0x56a>
 800741e:	4641      	mov	r1, r8
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff facd 	bl	80069c0 <__ratio>
 8007426:	ec57 6b10 	vmov	r6, r7, d0
 800742a:	2200      	movs	r2, #0
 800742c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 fb64 	bl	8000b00 <__aeabi_dcmple>
 8007438:	2800      	cmp	r0, #0
 800743a:	d06f      	beq.n	800751c <_strtod_l+0xa34>
 800743c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d17a      	bne.n	8007538 <_strtod_l+0xa50>
 8007442:	f1ba 0f00 	cmp.w	sl, #0
 8007446:	d158      	bne.n	80074fa <_strtod_l+0xa12>
 8007448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800744a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800744e:	2b00      	cmp	r3, #0
 8007450:	d15a      	bne.n	8007508 <_strtod_l+0xa20>
 8007452:	4b64      	ldr	r3, [pc, #400]	@ (80075e4 <_strtod_l+0xafc>)
 8007454:	2200      	movs	r2, #0
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	f7f9 fb47 	bl	8000aec <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	d159      	bne.n	8007516 <_strtod_l+0xa2e>
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	4b60      	ldr	r3, [pc, #384]	@ (80075e8 <_strtod_l+0xb00>)
 8007468:	2200      	movs	r2, #0
 800746a:	f7f9 f8cd 	bl	8000608 <__aeabi_dmul>
 800746e:	4606      	mov	r6, r0
 8007470:	460f      	mov	r7, r1
 8007472:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007476:	9606      	str	r6, [sp, #24]
 8007478:	9307      	str	r3, [sp, #28]
 800747a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747e:	4d57      	ldr	r5, [pc, #348]	@ (80075dc <_strtod_l+0xaf4>)
 8007480:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007486:	401d      	ands	r5, r3
 8007488:	4b58      	ldr	r3, [pc, #352]	@ (80075ec <_strtod_l+0xb04>)
 800748a:	429d      	cmp	r5, r3
 800748c:	f040 80b2 	bne.w	80075f4 <_strtod_l+0xb0c>
 8007490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007492:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007496:	ec4b ab10 	vmov	d0, sl, fp
 800749a:	f7ff f9c9 	bl	8006830 <__ulp>
 800749e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074a2:	ec51 0b10 	vmov	r0, r1, d0
 80074a6:	f7f9 f8af 	bl	8000608 <__aeabi_dmul>
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	f7f8 fef5 	bl	800029c <__adddf3>
 80074b2:	460b      	mov	r3, r1
 80074b4:	4949      	ldr	r1, [pc, #292]	@ (80075dc <_strtod_l+0xaf4>)
 80074b6:	4a4e      	ldr	r2, [pc, #312]	@ (80075f0 <_strtod_l+0xb08>)
 80074b8:	4019      	ands	r1, r3
 80074ba:	4291      	cmp	r1, r2
 80074bc:	4682      	mov	sl, r0
 80074be:	d942      	bls.n	8007546 <_strtod_l+0xa5e>
 80074c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074c2:	4b47      	ldr	r3, [pc, #284]	@ (80075e0 <_strtod_l+0xaf8>)
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d103      	bne.n	80074d0 <_strtod_l+0x9e8>
 80074c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ca:	3301      	adds	r3, #1
 80074cc:	f43f ad2b 	beq.w	8006f26 <_strtod_l+0x43e>
 80074d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80075e0 <_strtod_l+0xaf8>
 80074d4:	f04f 3aff 	mov.w	sl, #4294967295
 80074d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074da:	9805      	ldr	r0, [sp, #20]
 80074dc:	f7fe fe74 	bl	80061c8 <_Bfree>
 80074e0:	9805      	ldr	r0, [sp, #20]
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7fe fe70 	bl	80061c8 <_Bfree>
 80074e8:	9805      	ldr	r0, [sp, #20]
 80074ea:	4641      	mov	r1, r8
 80074ec:	f7fe fe6c 	bl	80061c8 <_Bfree>
 80074f0:	9805      	ldr	r0, [sp, #20]
 80074f2:	4621      	mov	r1, r4
 80074f4:	f7fe fe68 	bl	80061c8 <_Bfree>
 80074f8:	e618      	b.n	800712c <_strtod_l+0x644>
 80074fa:	f1ba 0f01 	cmp.w	sl, #1
 80074fe:	d103      	bne.n	8007508 <_strtod_l+0xa20>
 8007500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007502:	2b00      	cmp	r3, #0
 8007504:	f43f ada5 	beq.w	8007052 <_strtod_l+0x56a>
 8007508:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075b8 <_strtod_l+0xad0>
 800750c:	4f35      	ldr	r7, [pc, #212]	@ (80075e4 <_strtod_l+0xafc>)
 800750e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007512:	2600      	movs	r6, #0
 8007514:	e7b1      	b.n	800747a <_strtod_l+0x992>
 8007516:	4f34      	ldr	r7, [pc, #208]	@ (80075e8 <_strtod_l+0xb00>)
 8007518:	2600      	movs	r6, #0
 800751a:	e7aa      	b.n	8007472 <_strtod_l+0x98a>
 800751c:	4b32      	ldr	r3, [pc, #200]	@ (80075e8 <_strtod_l+0xb00>)
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	2200      	movs	r2, #0
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d09f      	beq.n	8007472 <_strtod_l+0x98a>
 8007532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007536:	e7a0      	b.n	800747a <_strtod_l+0x992>
 8007538:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075c0 <_strtod_l+0xad8>
 800753c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007540:	ec57 6b17 	vmov	r6, r7, d7
 8007544:	e799      	b.n	800747a <_strtod_l+0x992>
 8007546:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1c1      	bne.n	80074d8 <_strtod_l+0x9f0>
 8007554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007558:	0d1b      	lsrs	r3, r3, #20
 800755a:	051b      	lsls	r3, r3, #20
 800755c:	429d      	cmp	r5, r3
 800755e:	d1bb      	bne.n	80074d8 <_strtod_l+0x9f0>
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fbb0 	bl	8000cc8 <__aeabi_d2lz>
 8007568:	f7f9 f820 	bl	80005ac <__aeabi_l2d>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f8 fe90 	bl	8000298 <__aeabi_dsub>
 8007578:	460b      	mov	r3, r1
 800757a:	4602      	mov	r2, r0
 800757c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007580:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007586:	ea46 060a 	orr.w	r6, r6, sl
 800758a:	431e      	orrs	r6, r3
 800758c:	d06f      	beq.n	800766e <_strtod_l+0xb86>
 800758e:	a30e      	add	r3, pc, #56	@ (adr r3, 80075c8 <_strtod_l+0xae0>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f7f9 faaa 	bl	8000aec <__aeabi_dcmplt>
 8007598:	2800      	cmp	r0, #0
 800759a:	f47f accf 	bne.w	8006f3c <_strtod_l+0x454>
 800759e:	a30c      	add	r3, pc, #48	@ (adr r3, 80075d0 <_strtod_l+0xae8>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075a8:	f7f9 fabe 	bl	8000b28 <__aeabi_dcmpgt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d093      	beq.n	80074d8 <_strtod_l+0x9f0>
 80075b0:	e4c4      	b.n	8006f3c <_strtod_l+0x454>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
 80075b8:	00000000 	.word	0x00000000
 80075bc:	bff00000 	.word	0xbff00000
 80075c0:	00000000 	.word	0x00000000
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	94a03595 	.word	0x94a03595
 80075cc:	3fdfffff 	.word	0x3fdfffff
 80075d0:	35afe535 	.word	0x35afe535
 80075d4:	3fe00000 	.word	0x3fe00000
 80075d8:	000fffff 	.word	0x000fffff
 80075dc:	7ff00000 	.word	0x7ff00000
 80075e0:	7fefffff 	.word	0x7fefffff
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	7fe00000 	.word	0x7fe00000
 80075f0:	7c9fffff 	.word	0x7c9fffff
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	b323      	cbz	r3, 8007642 <_strtod_l+0xb5a>
 80075f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80075fc:	d821      	bhi.n	8007642 <_strtod_l+0xb5a>
 80075fe:	a328      	add	r3, pc, #160	@ (adr r3, 80076a0 <_strtod_l+0xbb8>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f9 fa7a 	bl	8000b00 <__aeabi_dcmple>
 800760c:	b1a0      	cbz	r0, 8007638 <_strtod_l+0xb50>
 800760e:	4639      	mov	r1, r7
 8007610:	4630      	mov	r0, r6
 8007612:	f7f9 fad1 	bl	8000bb8 <__aeabi_d2uiz>
 8007616:	2801      	cmp	r0, #1
 8007618:	bf38      	it	cc
 800761a:	2001      	movcc	r0, #1
 800761c:	f7f8 ff7a 	bl	8000514 <__aeabi_ui2d>
 8007620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	b9fb      	cbnz	r3, 8007668 <_strtod_l+0xb80>
 8007628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800762c:	9014      	str	r0, [sp, #80]	@ 0x50
 800762e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007630:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007634:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800763a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800763e:	1b5b      	subs	r3, r3, r5
 8007640:	9311      	str	r3, [sp, #68]	@ 0x44
 8007642:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007646:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800764a:	f7ff f8f1 	bl	8006830 <__ulp>
 800764e:	4650      	mov	r0, sl
 8007650:	ec53 2b10 	vmov	r2, r3, d0
 8007654:	4659      	mov	r1, fp
 8007656:	f7f8 ffd7 	bl	8000608 <__aeabi_dmul>
 800765a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800765e:	f7f8 fe1d 	bl	800029c <__adddf3>
 8007662:	4682      	mov	sl, r0
 8007664:	468b      	mov	fp, r1
 8007666:	e770      	b.n	800754a <_strtod_l+0xa62>
 8007668:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800766c:	e7e0      	b.n	8007630 <_strtod_l+0xb48>
 800766e:	a30e      	add	r3, pc, #56	@ (adr r3, 80076a8 <_strtod_l+0xbc0>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f9 fa3a 	bl	8000aec <__aeabi_dcmplt>
 8007678:	e798      	b.n	80075ac <_strtod_l+0xac4>
 800767a:	2300      	movs	r3, #0
 800767c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f7ff ba6d 	b.w	8006b62 <_strtod_l+0x7a>
 8007688:	2a65      	cmp	r2, #101	@ 0x65
 800768a:	f43f ab66 	beq.w	8006d5a <_strtod_l+0x272>
 800768e:	2a45      	cmp	r2, #69	@ 0x45
 8007690:	f43f ab63 	beq.w	8006d5a <_strtod_l+0x272>
 8007694:	2301      	movs	r3, #1
 8007696:	f7ff bb9e 	b.w	8006dd6 <_strtod_l+0x2ee>
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w
 80076a0:	ffc00000 	.word	0xffc00000
 80076a4:	41dfffff 	.word	0x41dfffff
 80076a8:	94a03595 	.word	0x94a03595
 80076ac:	3fcfffff 	.word	0x3fcfffff

080076b0 <_strtod_r>:
 80076b0:	4b01      	ldr	r3, [pc, #4]	@ (80076b8 <_strtod_r+0x8>)
 80076b2:	f7ff ba19 	b.w	8006ae8 <_strtod_l>
 80076b6:	bf00      	nop
 80076b8:	20000068 	.word	0x20000068

080076bc <_strtol_l.constprop.0>:
 80076bc:	2b24      	cmp	r3, #36	@ 0x24
 80076be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c2:	4686      	mov	lr, r0
 80076c4:	4690      	mov	r8, r2
 80076c6:	d801      	bhi.n	80076cc <_strtol_l.constprop.0+0x10>
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <_strtol_l.constprop.0+0x1e>
 80076cc:	f7fd fdba 	bl	8005244 <__errno>
 80076d0:	2316      	movs	r3, #22
 80076d2:	6003      	str	r3, [r0, #0]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	4834      	ldr	r0, [pc, #208]	@ (80077ac <_strtol_l.constprop.0+0xf0>)
 80076dc:	460d      	mov	r5, r1
 80076de:	462a      	mov	r2, r5
 80076e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076e4:	5d06      	ldrb	r6, [r0, r4]
 80076e6:	f016 0608 	ands.w	r6, r6, #8
 80076ea:	d1f8      	bne.n	80076de <_strtol_l.constprop.0+0x22>
 80076ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80076ee:	d12d      	bne.n	800774c <_strtol_l.constprop.0+0x90>
 80076f0:	782c      	ldrb	r4, [r5, #0]
 80076f2:	2601      	movs	r6, #1
 80076f4:	1c95      	adds	r5, r2, #2
 80076f6:	f033 0210 	bics.w	r2, r3, #16
 80076fa:	d109      	bne.n	8007710 <_strtol_l.constprop.0+0x54>
 80076fc:	2c30      	cmp	r4, #48	@ 0x30
 80076fe:	d12a      	bne.n	8007756 <_strtol_l.constprop.0+0x9a>
 8007700:	782a      	ldrb	r2, [r5, #0]
 8007702:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007706:	2a58      	cmp	r2, #88	@ 0x58
 8007708:	d125      	bne.n	8007756 <_strtol_l.constprop.0+0x9a>
 800770a:	786c      	ldrb	r4, [r5, #1]
 800770c:	2310      	movs	r3, #16
 800770e:	3502      	adds	r5, #2
 8007710:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007714:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007718:	2200      	movs	r2, #0
 800771a:	fbbc f9f3 	udiv	r9, ip, r3
 800771e:	4610      	mov	r0, r2
 8007720:	fb03 ca19 	mls	sl, r3, r9, ip
 8007724:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007728:	2f09      	cmp	r7, #9
 800772a:	d81b      	bhi.n	8007764 <_strtol_l.constprop.0+0xa8>
 800772c:	463c      	mov	r4, r7
 800772e:	42a3      	cmp	r3, r4
 8007730:	dd27      	ble.n	8007782 <_strtol_l.constprop.0+0xc6>
 8007732:	1c57      	adds	r7, r2, #1
 8007734:	d007      	beq.n	8007746 <_strtol_l.constprop.0+0x8a>
 8007736:	4581      	cmp	r9, r0
 8007738:	d320      	bcc.n	800777c <_strtol_l.constprop.0+0xc0>
 800773a:	d101      	bne.n	8007740 <_strtol_l.constprop.0+0x84>
 800773c:	45a2      	cmp	sl, r4
 800773e:	db1d      	blt.n	800777c <_strtol_l.constprop.0+0xc0>
 8007740:	fb00 4003 	mla	r0, r0, r3, r4
 8007744:	2201      	movs	r2, #1
 8007746:	f815 4b01 	ldrb.w	r4, [r5], #1
 800774a:	e7eb      	b.n	8007724 <_strtol_l.constprop.0+0x68>
 800774c:	2c2b      	cmp	r4, #43	@ 0x2b
 800774e:	bf04      	itt	eq
 8007750:	782c      	ldrbeq	r4, [r5, #0]
 8007752:	1c95      	addeq	r5, r2, #2
 8007754:	e7cf      	b.n	80076f6 <_strtol_l.constprop.0+0x3a>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1da      	bne.n	8007710 <_strtol_l.constprop.0+0x54>
 800775a:	2c30      	cmp	r4, #48	@ 0x30
 800775c:	bf0c      	ite	eq
 800775e:	2308      	moveq	r3, #8
 8007760:	230a      	movne	r3, #10
 8007762:	e7d5      	b.n	8007710 <_strtol_l.constprop.0+0x54>
 8007764:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007768:	2f19      	cmp	r7, #25
 800776a:	d801      	bhi.n	8007770 <_strtol_l.constprop.0+0xb4>
 800776c:	3c37      	subs	r4, #55	@ 0x37
 800776e:	e7de      	b.n	800772e <_strtol_l.constprop.0+0x72>
 8007770:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007774:	2f19      	cmp	r7, #25
 8007776:	d804      	bhi.n	8007782 <_strtol_l.constprop.0+0xc6>
 8007778:	3c57      	subs	r4, #87	@ 0x57
 800777a:	e7d8      	b.n	800772e <_strtol_l.constprop.0+0x72>
 800777c:	f04f 32ff 	mov.w	r2, #4294967295
 8007780:	e7e1      	b.n	8007746 <_strtol_l.constprop.0+0x8a>
 8007782:	1c53      	adds	r3, r2, #1
 8007784:	d108      	bne.n	8007798 <_strtol_l.constprop.0+0xdc>
 8007786:	2322      	movs	r3, #34	@ 0x22
 8007788:	f8ce 3000 	str.w	r3, [lr]
 800778c:	4660      	mov	r0, ip
 800778e:	f1b8 0f00 	cmp.w	r8, #0
 8007792:	d0a0      	beq.n	80076d6 <_strtol_l.constprop.0+0x1a>
 8007794:	1e69      	subs	r1, r5, #1
 8007796:	e006      	b.n	80077a6 <_strtol_l.constprop.0+0xea>
 8007798:	b106      	cbz	r6, 800779c <_strtol_l.constprop.0+0xe0>
 800779a:	4240      	negs	r0, r0
 800779c:	f1b8 0f00 	cmp.w	r8, #0
 80077a0:	d099      	beq.n	80076d6 <_strtol_l.constprop.0+0x1a>
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d1f6      	bne.n	8007794 <_strtol_l.constprop.0+0xd8>
 80077a6:	f8c8 1000 	str.w	r1, [r8]
 80077aa:	e794      	b.n	80076d6 <_strtol_l.constprop.0+0x1a>
 80077ac:	08008c49 	.word	0x08008c49

080077b0 <_strtol_r>:
 80077b0:	f7ff bf84 	b.w	80076bc <_strtol_l.constprop.0>

080077b4 <__ssputs_r>:
 80077b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	688e      	ldr	r6, [r1, #8]
 80077ba:	461f      	mov	r7, r3
 80077bc:	42be      	cmp	r6, r7
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	4682      	mov	sl, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	4690      	mov	r8, r2
 80077c6:	d82d      	bhi.n	8007824 <__ssputs_r+0x70>
 80077c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077d0:	d026      	beq.n	8007820 <__ssputs_r+0x6c>
 80077d2:	6965      	ldr	r5, [r4, #20]
 80077d4:	6909      	ldr	r1, [r1, #16]
 80077d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077da:	eba3 0901 	sub.w	r9, r3, r1
 80077de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077e2:	1c7b      	adds	r3, r7, #1
 80077e4:	444b      	add	r3, r9
 80077e6:	106d      	asrs	r5, r5, #1
 80077e8:	429d      	cmp	r5, r3
 80077ea:	bf38      	it	cc
 80077ec:	461d      	movcc	r5, r3
 80077ee:	0553      	lsls	r3, r2, #21
 80077f0:	d527      	bpl.n	8007842 <__ssputs_r+0x8e>
 80077f2:	4629      	mov	r1, r5
 80077f4:	f7fe fc1c 	bl	8006030 <_malloc_r>
 80077f8:	4606      	mov	r6, r0
 80077fa:	b360      	cbz	r0, 8007856 <__ssputs_r+0xa2>
 80077fc:	6921      	ldr	r1, [r4, #16]
 80077fe:	464a      	mov	r2, r9
 8007800:	f000 fa18 	bl	8007c34 <memcpy>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800780a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	6126      	str	r6, [r4, #16]
 8007812:	6165      	str	r5, [r4, #20]
 8007814:	444e      	add	r6, r9
 8007816:	eba5 0509 	sub.w	r5, r5, r9
 800781a:	6026      	str	r6, [r4, #0]
 800781c:	60a5      	str	r5, [r4, #8]
 800781e:	463e      	mov	r6, r7
 8007820:	42be      	cmp	r6, r7
 8007822:	d900      	bls.n	8007826 <__ssputs_r+0x72>
 8007824:	463e      	mov	r6, r7
 8007826:	6820      	ldr	r0, [r4, #0]
 8007828:	4632      	mov	r2, r6
 800782a:	4641      	mov	r1, r8
 800782c:	f000 f9c6 	bl	8007bbc <memmove>
 8007830:	68a3      	ldr	r3, [r4, #8]
 8007832:	1b9b      	subs	r3, r3, r6
 8007834:	60a3      	str	r3, [r4, #8]
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	4433      	add	r3, r6
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	2000      	movs	r0, #0
 800783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007842:	462a      	mov	r2, r5
 8007844:	f000 fd89 	bl	800835a <_realloc_r>
 8007848:	4606      	mov	r6, r0
 800784a:	2800      	cmp	r0, #0
 800784c:	d1e0      	bne.n	8007810 <__ssputs_r+0x5c>
 800784e:	6921      	ldr	r1, [r4, #16]
 8007850:	4650      	mov	r0, sl
 8007852:	f7fe fb79 	bl	8005f48 <_free_r>
 8007856:	230c      	movs	r3, #12
 8007858:	f8ca 3000 	str.w	r3, [sl]
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	e7e9      	b.n	800783e <__ssputs_r+0x8a>
	...

0800786c <_svfiprintf_r>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	4698      	mov	r8, r3
 8007872:	898b      	ldrh	r3, [r1, #12]
 8007874:	061b      	lsls	r3, r3, #24
 8007876:	b09d      	sub	sp, #116	@ 0x74
 8007878:	4607      	mov	r7, r0
 800787a:	460d      	mov	r5, r1
 800787c:	4614      	mov	r4, r2
 800787e:	d510      	bpl.n	80078a2 <_svfiprintf_r+0x36>
 8007880:	690b      	ldr	r3, [r1, #16]
 8007882:	b973      	cbnz	r3, 80078a2 <_svfiprintf_r+0x36>
 8007884:	2140      	movs	r1, #64	@ 0x40
 8007886:	f7fe fbd3 	bl	8006030 <_malloc_r>
 800788a:	6028      	str	r0, [r5, #0]
 800788c:	6128      	str	r0, [r5, #16]
 800788e:	b930      	cbnz	r0, 800789e <_svfiprintf_r+0x32>
 8007890:	230c      	movs	r3, #12
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b01d      	add	sp, #116	@ 0x74
 800789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789e:	2340      	movs	r3, #64	@ 0x40
 80078a0:	616b      	str	r3, [r5, #20]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a6:	2320      	movs	r3, #32
 80078a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b0:	2330      	movs	r3, #48	@ 0x30
 80078b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a50 <_svfiprintf_r+0x1e4>
 80078b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078ba:	f04f 0901 	mov.w	r9, #1
 80078be:	4623      	mov	r3, r4
 80078c0:	469a      	mov	sl, r3
 80078c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c6:	b10a      	cbz	r2, 80078cc <_svfiprintf_r+0x60>
 80078c8:	2a25      	cmp	r2, #37	@ 0x25
 80078ca:	d1f9      	bne.n	80078c0 <_svfiprintf_r+0x54>
 80078cc:	ebba 0b04 	subs.w	fp, sl, r4
 80078d0:	d00b      	beq.n	80078ea <_svfiprintf_r+0x7e>
 80078d2:	465b      	mov	r3, fp
 80078d4:	4622      	mov	r2, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	4638      	mov	r0, r7
 80078da:	f7ff ff6b 	bl	80077b4 <__ssputs_r>
 80078de:	3001      	adds	r0, #1
 80078e0:	f000 80a7 	beq.w	8007a32 <_svfiprintf_r+0x1c6>
 80078e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e6:	445a      	add	r2, fp
 80078e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ea:	f89a 3000 	ldrb.w	r3, [sl]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 809f 	beq.w	8007a32 <_svfiprintf_r+0x1c6>
 80078f4:	2300      	movs	r3, #0
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078fe:	f10a 0a01 	add.w	sl, sl, #1
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	9307      	str	r3, [sp, #28]
 8007906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800790a:	931a      	str	r3, [sp, #104]	@ 0x68
 800790c:	4654      	mov	r4, sl
 800790e:	2205      	movs	r2, #5
 8007910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007914:	484e      	ldr	r0, [pc, #312]	@ (8007a50 <_svfiprintf_r+0x1e4>)
 8007916:	f7f8 fc63 	bl	80001e0 <memchr>
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	b9d8      	cbnz	r0, 8007956 <_svfiprintf_r+0xea>
 800791e:	06d0      	lsls	r0, r2, #27
 8007920:	bf44      	itt	mi
 8007922:	2320      	movmi	r3, #32
 8007924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007928:	0711      	lsls	r1, r2, #28
 800792a:	bf44      	itt	mi
 800792c:	232b      	movmi	r3, #43	@ 0x2b
 800792e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007932:	f89a 3000 	ldrb.w	r3, [sl]
 8007936:	2b2a      	cmp	r3, #42	@ 0x2a
 8007938:	d015      	beq.n	8007966 <_svfiprintf_r+0xfa>
 800793a:	9a07      	ldr	r2, [sp, #28]
 800793c:	4654      	mov	r4, sl
 800793e:	2000      	movs	r0, #0
 8007940:	f04f 0c0a 	mov.w	ip, #10
 8007944:	4621      	mov	r1, r4
 8007946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800794a:	3b30      	subs	r3, #48	@ 0x30
 800794c:	2b09      	cmp	r3, #9
 800794e:	d94b      	bls.n	80079e8 <_svfiprintf_r+0x17c>
 8007950:	b1b0      	cbz	r0, 8007980 <_svfiprintf_r+0x114>
 8007952:	9207      	str	r2, [sp, #28]
 8007954:	e014      	b.n	8007980 <_svfiprintf_r+0x114>
 8007956:	eba0 0308 	sub.w	r3, r0, r8
 800795a:	fa09 f303 	lsl.w	r3, r9, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	46a2      	mov	sl, r4
 8007964:	e7d2      	b.n	800790c <_svfiprintf_r+0xa0>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	1d19      	adds	r1, r3, #4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	9103      	str	r1, [sp, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfbb      	ittet	lt
 8007972:	425b      	neglt	r3, r3
 8007974:	f042 0202 	orrlt.w	r2, r2, #2
 8007978:	9307      	strge	r3, [sp, #28]
 800797a:	9307      	strlt	r3, [sp, #28]
 800797c:	bfb8      	it	lt
 800797e:	9204      	strlt	r2, [sp, #16]
 8007980:	7823      	ldrb	r3, [r4, #0]
 8007982:	2b2e      	cmp	r3, #46	@ 0x2e
 8007984:	d10a      	bne.n	800799c <_svfiprintf_r+0x130>
 8007986:	7863      	ldrb	r3, [r4, #1]
 8007988:	2b2a      	cmp	r3, #42	@ 0x2a
 800798a:	d132      	bne.n	80079f2 <_svfiprintf_r+0x186>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	9203      	str	r2, [sp, #12]
 8007994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007998:	3402      	adds	r4, #2
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a60 <_svfiprintf_r+0x1f4>
 80079a0:	7821      	ldrb	r1, [r4, #0]
 80079a2:	2203      	movs	r2, #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	f7f8 fc1b 	bl	80001e0 <memchr>
 80079aa:	b138      	cbz	r0, 80079bc <_svfiprintf_r+0x150>
 80079ac:	9b04      	ldr	r3, [sp, #16]
 80079ae:	eba0 000a 	sub.w	r0, r0, sl
 80079b2:	2240      	movs	r2, #64	@ 0x40
 80079b4:	4082      	lsls	r2, r0
 80079b6:	4313      	orrs	r3, r2
 80079b8:	3401      	adds	r4, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c0:	4824      	ldr	r0, [pc, #144]	@ (8007a54 <_svfiprintf_r+0x1e8>)
 80079c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079c6:	2206      	movs	r2, #6
 80079c8:	f7f8 fc0a 	bl	80001e0 <memchr>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d036      	beq.n	8007a3e <_svfiprintf_r+0x1d2>
 80079d0:	4b21      	ldr	r3, [pc, #132]	@ (8007a58 <_svfiprintf_r+0x1ec>)
 80079d2:	bb1b      	cbnz	r3, 8007a1c <_svfiprintf_r+0x1b0>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	3307      	adds	r3, #7
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	3308      	adds	r3, #8
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e2:	4433      	add	r3, r6
 80079e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e6:	e76a      	b.n	80078be <_svfiprintf_r+0x52>
 80079e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ec:	460c      	mov	r4, r1
 80079ee:	2001      	movs	r0, #1
 80079f0:	e7a8      	b.n	8007944 <_svfiprintf_r+0xd8>
 80079f2:	2300      	movs	r3, #0
 80079f4:	3401      	adds	r4, #1
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	4619      	mov	r1, r3
 80079fa:	f04f 0c0a 	mov.w	ip, #10
 80079fe:	4620      	mov	r0, r4
 8007a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a04:	3a30      	subs	r2, #48	@ 0x30
 8007a06:	2a09      	cmp	r2, #9
 8007a08:	d903      	bls.n	8007a12 <_svfiprintf_r+0x1a6>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0c6      	beq.n	800799c <_svfiprintf_r+0x130>
 8007a0e:	9105      	str	r1, [sp, #20]
 8007a10:	e7c4      	b.n	800799c <_svfiprintf_r+0x130>
 8007a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a16:	4604      	mov	r4, r0
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e7f0      	b.n	80079fe <_svfiprintf_r+0x192>
 8007a1c:	ab03      	add	r3, sp, #12
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	462a      	mov	r2, r5
 8007a22:	4b0e      	ldr	r3, [pc, #56]	@ (8007a5c <_svfiprintf_r+0x1f0>)
 8007a24:	a904      	add	r1, sp, #16
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7fc fcc8 	bl	80043bc <_printf_float>
 8007a2c:	1c42      	adds	r2, r0, #1
 8007a2e:	4606      	mov	r6, r0
 8007a30:	d1d6      	bne.n	80079e0 <_svfiprintf_r+0x174>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	065b      	lsls	r3, r3, #25
 8007a36:	f53f af2d 	bmi.w	8007894 <_svfiprintf_r+0x28>
 8007a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a3c:	e72c      	b.n	8007898 <_svfiprintf_r+0x2c>
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	462a      	mov	r2, r5
 8007a44:	4b05      	ldr	r3, [pc, #20]	@ (8007a5c <_svfiprintf_r+0x1f0>)
 8007a46:	a904      	add	r1, sp, #16
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7fc ff4f 	bl	80048ec <_printf_i>
 8007a4e:	e7ed      	b.n	8007a2c <_svfiprintf_r+0x1c0>
 8007a50:	08008d49 	.word	0x08008d49
 8007a54:	08008d53 	.word	0x08008d53
 8007a58:	080043bd 	.word	0x080043bd
 8007a5c:	080077b5 	.word	0x080077b5
 8007a60:	08008d4f 	.word	0x08008d4f

08007a64 <__sflush_r>:
 8007a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	0716      	lsls	r6, r2, #28
 8007a6e:	4605      	mov	r5, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	d454      	bmi.n	8007b1e <__sflush_r+0xba>
 8007a74:	684b      	ldr	r3, [r1, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc02      	bgt.n	8007a80 <__sflush_r+0x1c>
 8007a7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd48      	ble.n	8007b12 <__sflush_r+0xae>
 8007a80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d045      	beq.n	8007b12 <__sflush_r+0xae>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a8c:	682f      	ldr	r7, [r5, #0]
 8007a8e:	6a21      	ldr	r1, [r4, #32]
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	d030      	beq.n	8007af6 <__sflush_r+0x92>
 8007a94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	0759      	lsls	r1, r3, #29
 8007a9a:	d505      	bpl.n	8007aa8 <__sflush_r+0x44>
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aa2:	b10b      	cbz	r3, 8007aa8 <__sflush_r+0x44>
 8007aa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	d106      	bne.n	8007ac6 <__sflush_r+0x62>
 8007ab8:	6829      	ldr	r1, [r5, #0]
 8007aba:	291d      	cmp	r1, #29
 8007abc:	d82b      	bhi.n	8007b16 <__sflush_r+0xb2>
 8007abe:	4a2a      	ldr	r2, [pc, #168]	@ (8007b68 <__sflush_r+0x104>)
 8007ac0:	410a      	asrs	r2, r1
 8007ac2:	07d6      	lsls	r6, r2, #31
 8007ac4:	d427      	bmi.n	8007b16 <__sflush_r+0xb2>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6062      	str	r2, [r4, #4]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	d504      	bpl.n	8007adc <__sflush_r+0x78>
 8007ad2:	1c42      	adds	r2, r0, #1
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0x76>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b903      	cbnz	r3, 8007adc <__sflush_r+0x78>
 8007ada:	6560      	str	r0, [r4, #84]	@ 0x54
 8007adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	b1b9      	cbz	r1, 8007b12 <__sflush_r+0xae>
 8007ae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d002      	beq.n	8007af0 <__sflush_r+0x8c>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7fe fa2c 	bl	8005f48 <_free_r>
 8007af0:	2300      	movs	r3, #0
 8007af2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007af4:	e00d      	b.n	8007b12 <__sflush_r+0xae>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	4602      	mov	r2, r0
 8007afe:	1c50      	adds	r0, r2, #1
 8007b00:	d1c9      	bne.n	8007a96 <__sflush_r+0x32>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0c6      	beq.n	8007a96 <__sflush_r+0x32>
 8007b08:	2b1d      	cmp	r3, #29
 8007b0a:	d001      	beq.n	8007b10 <__sflush_r+0xac>
 8007b0c:	2b16      	cmp	r3, #22
 8007b0e:	d11e      	bne.n	8007b4e <__sflush_r+0xea>
 8007b10:	602f      	str	r7, [r5, #0]
 8007b12:	2000      	movs	r0, #0
 8007b14:	e022      	b.n	8007b5c <__sflush_r+0xf8>
 8007b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	e01b      	b.n	8007b56 <__sflush_r+0xf2>
 8007b1e:	690f      	ldr	r7, [r1, #16]
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	d0f6      	beq.n	8007b12 <__sflush_r+0xae>
 8007b24:	0793      	lsls	r3, r2, #30
 8007b26:	680e      	ldr	r6, [r1, #0]
 8007b28:	bf08      	it	eq
 8007b2a:	694b      	ldreq	r3, [r1, #20]
 8007b2c:	600f      	str	r7, [r1, #0]
 8007b2e:	bf18      	it	ne
 8007b30:	2300      	movne	r3, #0
 8007b32:	eba6 0807 	sub.w	r8, r6, r7
 8007b36:	608b      	str	r3, [r1, #8]
 8007b38:	f1b8 0f00 	cmp.w	r8, #0
 8007b3c:	dde9      	ble.n	8007b12 <__sflush_r+0xae>
 8007b3e:	6a21      	ldr	r1, [r4, #32]
 8007b40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b42:	4643      	mov	r3, r8
 8007b44:	463a      	mov	r2, r7
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b0      	blx	r6
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	dc08      	bgt.n	8007b60 <__sflush_r+0xfc>
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	4407      	add	r7, r0
 8007b62:	eba8 0800 	sub.w	r8, r8, r0
 8007b66:	e7e7      	b.n	8007b38 <__sflush_r+0xd4>
 8007b68:	dfbffffe 	.word	0xdfbffffe

08007b6c <_fflush_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b913      	cbnz	r3, 8007b7c <_fflush_r+0x10>
 8007b76:	2500      	movs	r5, #0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	b118      	cbz	r0, 8007b86 <_fflush_r+0x1a>
 8007b7e:	6a03      	ldr	r3, [r0, #32]
 8007b80:	b90b      	cbnz	r3, 8007b86 <_fflush_r+0x1a>
 8007b82:	f7fd fa73 	bl	800506c <__sinit>
 8007b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f3      	beq.n	8007b76 <_fflush_r+0xa>
 8007b8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	d404      	bmi.n	8007b9e <_fflush_r+0x32>
 8007b94:	0599      	lsls	r1, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_fflush_r+0x32>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f7fd fb7e 	bl	800529a <__retarget_lock_acquire_recursive>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f7ff ff5f 	bl	8007a64 <__sflush_r>
 8007ba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ba8:	07da      	lsls	r2, r3, #31
 8007baa:	4605      	mov	r5, r0
 8007bac:	d4e4      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	059b      	lsls	r3, r3, #22
 8007bb2:	d4e1      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bb6:	f7fd fb71 	bl	800529c <__retarget_lock_release_recursive>
 8007bba:	e7dd      	b.n	8007b78 <_fflush_r+0xc>

08007bbc <memmove>:
 8007bbc:	4288      	cmp	r0, r1
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	eb01 0402 	add.w	r4, r1, r2
 8007bc4:	d902      	bls.n	8007bcc <memmove+0x10>
 8007bc6:	4284      	cmp	r4, r0
 8007bc8:	4623      	mov	r3, r4
 8007bca:	d807      	bhi.n	8007bdc <memmove+0x20>
 8007bcc:	1e43      	subs	r3, r0, #1
 8007bce:	42a1      	cmp	r1, r4
 8007bd0:	d008      	beq.n	8007be4 <memmove+0x28>
 8007bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bda:	e7f8      	b.n	8007bce <memmove+0x12>
 8007bdc:	4402      	add	r2, r0
 8007bde:	4601      	mov	r1, r0
 8007be0:	428a      	cmp	r2, r1
 8007be2:	d100      	bne.n	8007be6 <memmove+0x2a>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bee:	e7f7      	b.n	8007be0 <memmove+0x24>

08007bf0 <strncmp>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	b16a      	cbz	r2, 8007c10 <strncmp+0x20>
 8007bf4:	3901      	subs	r1, #1
 8007bf6:	1884      	adds	r4, r0, r2
 8007bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d103      	bne.n	8007c0c <strncmp+0x1c>
 8007c04:	42a0      	cmp	r0, r4
 8007c06:	d001      	beq.n	8007c0c <strncmp+0x1c>
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	d1f5      	bne.n	8007bf8 <strncmp+0x8>
 8007c0c:	1ad0      	subs	r0, r2, r3
 8007c0e:	bd10      	pop	{r4, pc}
 8007c10:	4610      	mov	r0, r2
 8007c12:	e7fc      	b.n	8007c0e <strncmp+0x1e>

08007c14 <_sbrk_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d06      	ldr	r5, [pc, #24]	@ (8007c30 <_sbrk_r+0x1c>)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	602b      	str	r3, [r5, #0]
 8007c20:	f7f9 ff3e 	bl	8001aa0 <_sbrk>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_sbrk_r+0x1a>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_sbrk_r+0x1a>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	200003fc 	.word	0x200003fc

08007c34 <memcpy>:
 8007c34:	440a      	add	r2, r1
 8007c36:	4291      	cmp	r1, r2
 8007c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c3c:	d100      	bne.n	8007c40 <memcpy+0xc>
 8007c3e:	4770      	bx	lr
 8007c40:	b510      	push	{r4, lr}
 8007c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c4a:	4291      	cmp	r1, r2
 8007c4c:	d1f9      	bne.n	8007c42 <memcpy+0xe>
 8007c4e:	bd10      	pop	{r4, pc}

08007c50 <nan>:
 8007c50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c58 <nan+0x8>
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	7ff80000 	.word	0x7ff80000

08007c60 <__assert_func>:
 8007c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c62:	4614      	mov	r4, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <__assert_func+0x2c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	68d8      	ldr	r0, [r3, #12]
 8007c6e:	b954      	cbnz	r4, 8007c86 <__assert_func+0x26>
 8007c70:	4b07      	ldr	r3, [pc, #28]	@ (8007c90 <__assert_func+0x30>)
 8007c72:	461c      	mov	r4, r3
 8007c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c78:	9100      	str	r1, [sp, #0]
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	4905      	ldr	r1, [pc, #20]	@ (8007c94 <__assert_func+0x34>)
 8007c7e:	f000 fba7 	bl	80083d0 <fiprintf>
 8007c82:	f000 fbb7 	bl	80083f4 <abort>
 8007c86:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <__assert_func+0x38>)
 8007c88:	e7f4      	b.n	8007c74 <__assert_func+0x14>
 8007c8a:	bf00      	nop
 8007c8c:	20000018 	.word	0x20000018
 8007c90:	08008d9d 	.word	0x08008d9d
 8007c94:	08008d6f 	.word	0x08008d6f
 8007c98:	08008d62 	.word	0x08008d62

08007c9c <_calloc_r>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8007ca2:	b93c      	cbnz	r4, 8007cb4 <_calloc_r+0x18>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7fe f9c3 	bl	8006030 <_malloc_r>
 8007caa:	4606      	mov	r6, r0
 8007cac:	b928      	cbnz	r0, 8007cba <_calloc_r+0x1e>
 8007cae:	2600      	movs	r6, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	220c      	movs	r2, #12
 8007cb6:	6002      	str	r2, [r0, #0]
 8007cb8:	e7f9      	b.n	8007cae <_calloc_r+0x12>
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f7fd fa6e 	bl	800519e <memset>
 8007cc2:	e7f5      	b.n	8007cb0 <_calloc_r+0x14>

08007cc4 <rshift>:
 8007cc4:	6903      	ldr	r3, [r0, #16]
 8007cc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007cd2:	f100 0414 	add.w	r4, r0, #20
 8007cd6:	dd45      	ble.n	8007d64 <rshift+0xa0>
 8007cd8:	f011 011f 	ands.w	r1, r1, #31
 8007cdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ce0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ce4:	d10c      	bne.n	8007d00 <rshift+0x3c>
 8007ce6:	f100 0710 	add.w	r7, r0, #16
 8007cea:	4629      	mov	r1, r5
 8007cec:	42b1      	cmp	r1, r6
 8007cee:	d334      	bcc.n	8007d5a <rshift+0x96>
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	1eea      	subs	r2, r5, #3
 8007cf6:	4296      	cmp	r6, r2
 8007cf8:	bf38      	it	cc
 8007cfa:	2300      	movcc	r3, #0
 8007cfc:	4423      	add	r3, r4
 8007cfe:	e015      	b.n	8007d2c <rshift+0x68>
 8007d00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d04:	f1c1 0820 	rsb	r8, r1, #32
 8007d08:	40cf      	lsrs	r7, r1
 8007d0a:	f105 0e04 	add.w	lr, r5, #4
 8007d0e:	46a1      	mov	r9, r4
 8007d10:	4576      	cmp	r6, lr
 8007d12:	46f4      	mov	ip, lr
 8007d14:	d815      	bhi.n	8007d42 <rshift+0x7e>
 8007d16:	1a9a      	subs	r2, r3, r2
 8007d18:	0092      	lsls	r2, r2, #2
 8007d1a:	3a04      	subs	r2, #4
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	42ae      	cmp	r6, r5
 8007d20:	bf38      	it	cc
 8007d22:	2200      	movcc	r2, #0
 8007d24:	18a3      	adds	r3, r4, r2
 8007d26:	50a7      	str	r7, [r4, r2]
 8007d28:	b107      	cbz	r7, 8007d2c <rshift+0x68>
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	1b1a      	subs	r2, r3, r4
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d34:	bf08      	it	eq
 8007d36:	2300      	moveq	r3, #0
 8007d38:	6102      	str	r2, [r0, #16]
 8007d3a:	bf08      	it	eq
 8007d3c:	6143      	streq	r3, [r0, #20]
 8007d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d42:	f8dc c000 	ldr.w	ip, [ip]
 8007d46:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d4a:	ea4c 0707 	orr.w	r7, ip, r7
 8007d4e:	f849 7b04 	str.w	r7, [r9], #4
 8007d52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d56:	40cf      	lsrs	r7, r1
 8007d58:	e7da      	b.n	8007d10 <rshift+0x4c>
 8007d5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d62:	e7c3      	b.n	8007cec <rshift+0x28>
 8007d64:	4623      	mov	r3, r4
 8007d66:	e7e1      	b.n	8007d2c <rshift+0x68>

08007d68 <__hexdig_fun>:
 8007d68:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	d802      	bhi.n	8007d76 <__hexdig_fun+0xe>
 8007d70:	3820      	subs	r0, #32
 8007d72:	b2c0      	uxtb	r0, r0
 8007d74:	4770      	bx	lr
 8007d76:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d801      	bhi.n	8007d82 <__hexdig_fun+0x1a>
 8007d7e:	3847      	subs	r0, #71	@ 0x47
 8007d80:	e7f7      	b.n	8007d72 <__hexdig_fun+0xa>
 8007d82:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007d86:	2b05      	cmp	r3, #5
 8007d88:	d801      	bhi.n	8007d8e <__hexdig_fun+0x26>
 8007d8a:	3827      	subs	r0, #39	@ 0x27
 8007d8c:	e7f1      	b.n	8007d72 <__hexdig_fun+0xa>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	4770      	bx	lr
	...

08007d94 <__gethex>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	468a      	mov	sl, r1
 8007d9c:	9302      	str	r3, [sp, #8]
 8007d9e:	680b      	ldr	r3, [r1, #0]
 8007da0:	9001      	str	r0, [sp, #4]
 8007da2:	4690      	mov	r8, r2
 8007da4:	1c9c      	adds	r4, r3, #2
 8007da6:	46a1      	mov	r9, r4
 8007da8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007dac:	2830      	cmp	r0, #48	@ 0x30
 8007dae:	d0fa      	beq.n	8007da6 <__gethex+0x12>
 8007db0:	eba9 0303 	sub.w	r3, r9, r3
 8007db4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007db8:	f7ff ffd6 	bl	8007d68 <__hexdig_fun>
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d168      	bne.n	8007e94 <__gethex+0x100>
 8007dc2:	49a0      	ldr	r1, [pc, #640]	@ (8008044 <__gethex+0x2b0>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4648      	mov	r0, r9
 8007dc8:	f7ff ff12 	bl	8007bf0 <strncmp>
 8007dcc:	4607      	mov	r7, r0
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d167      	bne.n	8007ea2 <__gethex+0x10e>
 8007dd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007dd6:	4626      	mov	r6, r4
 8007dd8:	f7ff ffc6 	bl	8007d68 <__hexdig_fun>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d062      	beq.n	8007ea6 <__gethex+0x112>
 8007de0:	4623      	mov	r3, r4
 8007de2:	7818      	ldrb	r0, [r3, #0]
 8007de4:	2830      	cmp	r0, #48	@ 0x30
 8007de6:	4699      	mov	r9, r3
 8007de8:	f103 0301 	add.w	r3, r3, #1
 8007dec:	d0f9      	beq.n	8007de2 <__gethex+0x4e>
 8007dee:	f7ff ffbb 	bl	8007d68 <__hexdig_fun>
 8007df2:	fab0 f580 	clz	r5, r0
 8007df6:	096d      	lsrs	r5, r5, #5
 8007df8:	f04f 0b01 	mov.w	fp, #1
 8007dfc:	464a      	mov	r2, r9
 8007dfe:	4616      	mov	r6, r2
 8007e00:	3201      	adds	r2, #1
 8007e02:	7830      	ldrb	r0, [r6, #0]
 8007e04:	f7ff ffb0 	bl	8007d68 <__hexdig_fun>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d1f8      	bne.n	8007dfe <__gethex+0x6a>
 8007e0c:	498d      	ldr	r1, [pc, #564]	@ (8008044 <__gethex+0x2b0>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7ff feed 	bl	8007bf0 <strncmp>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d13f      	bne.n	8007e9a <__gethex+0x106>
 8007e1a:	b944      	cbnz	r4, 8007e2e <__gethex+0x9a>
 8007e1c:	1c74      	adds	r4, r6, #1
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4616      	mov	r6, r2
 8007e22:	3201      	adds	r2, #1
 8007e24:	7830      	ldrb	r0, [r6, #0]
 8007e26:	f7ff ff9f 	bl	8007d68 <__hexdig_fun>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1f8      	bne.n	8007e20 <__gethex+0x8c>
 8007e2e:	1ba4      	subs	r4, r4, r6
 8007e30:	00a7      	lsls	r7, r4, #2
 8007e32:	7833      	ldrb	r3, [r6, #0]
 8007e34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007e38:	2b50      	cmp	r3, #80	@ 0x50
 8007e3a:	d13e      	bne.n	8007eba <__gethex+0x126>
 8007e3c:	7873      	ldrb	r3, [r6, #1]
 8007e3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007e40:	d033      	beq.n	8007eaa <__gethex+0x116>
 8007e42:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e44:	d034      	beq.n	8007eb0 <__gethex+0x11c>
 8007e46:	1c71      	adds	r1, r6, #1
 8007e48:	2400      	movs	r4, #0
 8007e4a:	7808      	ldrb	r0, [r1, #0]
 8007e4c:	f7ff ff8c 	bl	8007d68 <__hexdig_fun>
 8007e50:	1e43      	subs	r3, r0, #1
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b18      	cmp	r3, #24
 8007e56:	d830      	bhi.n	8007eba <__gethex+0x126>
 8007e58:	f1a0 0210 	sub.w	r2, r0, #16
 8007e5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e60:	f7ff ff82 	bl	8007d68 <__hexdig_fun>
 8007e64:	f100 3cff 	add.w	ip, r0, #4294967295
 8007e68:	fa5f fc8c 	uxtb.w	ip, ip
 8007e6c:	f1bc 0f18 	cmp.w	ip, #24
 8007e70:	f04f 030a 	mov.w	r3, #10
 8007e74:	d91e      	bls.n	8007eb4 <__gethex+0x120>
 8007e76:	b104      	cbz	r4, 8007e7a <__gethex+0xe6>
 8007e78:	4252      	negs	r2, r2
 8007e7a:	4417      	add	r7, r2
 8007e7c:	f8ca 1000 	str.w	r1, [sl]
 8007e80:	b1ed      	cbz	r5, 8007ebe <__gethex+0x12a>
 8007e82:	f1bb 0f00 	cmp.w	fp, #0
 8007e86:	bf0c      	ite	eq
 8007e88:	2506      	moveq	r5, #6
 8007e8a:	2500      	movne	r5, #0
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	b005      	add	sp, #20
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	2500      	movs	r5, #0
 8007e96:	462c      	mov	r4, r5
 8007e98:	e7b0      	b.n	8007dfc <__gethex+0x68>
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d1c7      	bne.n	8007e2e <__gethex+0x9a>
 8007e9e:	4627      	mov	r7, r4
 8007ea0:	e7c7      	b.n	8007e32 <__gethex+0x9e>
 8007ea2:	464e      	mov	r6, r9
 8007ea4:	462f      	mov	r7, r5
 8007ea6:	2501      	movs	r5, #1
 8007ea8:	e7c3      	b.n	8007e32 <__gethex+0x9e>
 8007eaa:	2400      	movs	r4, #0
 8007eac:	1cb1      	adds	r1, r6, #2
 8007eae:	e7cc      	b.n	8007e4a <__gethex+0xb6>
 8007eb0:	2401      	movs	r4, #1
 8007eb2:	e7fb      	b.n	8007eac <__gethex+0x118>
 8007eb4:	fb03 0002 	mla	r0, r3, r2, r0
 8007eb8:	e7ce      	b.n	8007e58 <__gethex+0xc4>
 8007eba:	4631      	mov	r1, r6
 8007ebc:	e7de      	b.n	8007e7c <__gethex+0xe8>
 8007ebe:	eba6 0309 	sub.w	r3, r6, r9
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	dc0a      	bgt.n	8007ee0 <__gethex+0x14c>
 8007eca:	9801      	ldr	r0, [sp, #4]
 8007ecc:	f7fe f93c 	bl	8006148 <_Balloc>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	b940      	cbnz	r0, 8007ee6 <__gethex+0x152>
 8007ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8008048 <__gethex+0x2b4>)
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	21e4      	movs	r1, #228	@ 0xe4
 8007eda:	485c      	ldr	r0, [pc, #368]	@ (800804c <__gethex+0x2b8>)
 8007edc:	f7ff fec0 	bl	8007c60 <__assert_func>
 8007ee0:	3101      	adds	r1, #1
 8007ee2:	105b      	asrs	r3, r3, #1
 8007ee4:	e7ef      	b.n	8007ec6 <__gethex+0x132>
 8007ee6:	f100 0a14 	add.w	sl, r0, #20
 8007eea:	2300      	movs	r3, #0
 8007eec:	4655      	mov	r5, sl
 8007eee:	469b      	mov	fp, r3
 8007ef0:	45b1      	cmp	r9, r6
 8007ef2:	d337      	bcc.n	8007f64 <__gethex+0x1d0>
 8007ef4:	f845 bb04 	str.w	fp, [r5], #4
 8007ef8:	eba5 050a 	sub.w	r5, r5, sl
 8007efc:	10ad      	asrs	r5, r5, #2
 8007efe:	6125      	str	r5, [r4, #16]
 8007f00:	4658      	mov	r0, fp
 8007f02:	f7fe fa13 	bl	800632c <__hi0bits>
 8007f06:	016d      	lsls	r5, r5, #5
 8007f08:	f8d8 6000 	ldr.w	r6, [r8]
 8007f0c:	1a2d      	subs	r5, r5, r0
 8007f0e:	42b5      	cmp	r5, r6
 8007f10:	dd54      	ble.n	8007fbc <__gethex+0x228>
 8007f12:	1bad      	subs	r5, r5, r6
 8007f14:	4629      	mov	r1, r5
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7fe fda7 	bl	8006a6a <__any_on>
 8007f1c:	4681      	mov	r9, r0
 8007f1e:	b178      	cbz	r0, 8007f40 <__gethex+0x1ac>
 8007f20:	1e6b      	subs	r3, r5, #1
 8007f22:	1159      	asrs	r1, r3, #5
 8007f24:	f003 021f 	and.w	r2, r3, #31
 8007f28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f2c:	f04f 0901 	mov.w	r9, #1
 8007f30:	fa09 f202 	lsl.w	r2, r9, r2
 8007f34:	420a      	tst	r2, r1
 8007f36:	d003      	beq.n	8007f40 <__gethex+0x1ac>
 8007f38:	454b      	cmp	r3, r9
 8007f3a:	dc36      	bgt.n	8007faa <__gethex+0x216>
 8007f3c:	f04f 0902 	mov.w	r9, #2
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7ff febe 	bl	8007cc4 <rshift>
 8007f48:	442f      	add	r7, r5
 8007f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f4e:	42bb      	cmp	r3, r7
 8007f50:	da42      	bge.n	8007fd8 <__gethex+0x244>
 8007f52:	9801      	ldr	r0, [sp, #4]
 8007f54:	4621      	mov	r1, r4
 8007f56:	f7fe f937 	bl	80061c8 <_Bfree>
 8007f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	25a3      	movs	r5, #163	@ 0xa3
 8007f62:	e793      	b.n	8007e8c <__gethex+0xf8>
 8007f64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007f68:	2a2e      	cmp	r2, #46	@ 0x2e
 8007f6a:	d012      	beq.n	8007f92 <__gethex+0x1fe>
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d104      	bne.n	8007f7a <__gethex+0x1e6>
 8007f70:	f845 bb04 	str.w	fp, [r5], #4
 8007f74:	f04f 0b00 	mov.w	fp, #0
 8007f78:	465b      	mov	r3, fp
 8007f7a:	7830      	ldrb	r0, [r6, #0]
 8007f7c:	9303      	str	r3, [sp, #12]
 8007f7e:	f7ff fef3 	bl	8007d68 <__hexdig_fun>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	f000 000f 	and.w	r0, r0, #15
 8007f88:	4098      	lsls	r0, r3
 8007f8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007f8e:	3304      	adds	r3, #4
 8007f90:	e7ae      	b.n	8007ef0 <__gethex+0x15c>
 8007f92:	45b1      	cmp	r9, r6
 8007f94:	d8ea      	bhi.n	8007f6c <__gethex+0x1d8>
 8007f96:	492b      	ldr	r1, [pc, #172]	@ (8008044 <__gethex+0x2b0>)
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff fe27 	bl	8007bf0 <strncmp>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d1e1      	bne.n	8007f6c <__gethex+0x1d8>
 8007fa8:	e7a2      	b.n	8007ef0 <__gethex+0x15c>
 8007faa:	1ea9      	subs	r1, r5, #2
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7fe fd5c 	bl	8006a6a <__any_on>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0c2      	beq.n	8007f3c <__gethex+0x1a8>
 8007fb6:	f04f 0903 	mov.w	r9, #3
 8007fba:	e7c1      	b.n	8007f40 <__gethex+0x1ac>
 8007fbc:	da09      	bge.n	8007fd2 <__gethex+0x23e>
 8007fbe:	1b75      	subs	r5, r6, r5
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	9801      	ldr	r0, [sp, #4]
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	f7fe fb17 	bl	80065f8 <__lshift>
 8007fca:	1b7f      	subs	r7, r7, r5
 8007fcc:	4604      	mov	r4, r0
 8007fce:	f100 0a14 	add.w	sl, r0, #20
 8007fd2:	f04f 0900 	mov.w	r9, #0
 8007fd6:	e7b8      	b.n	8007f4a <__gethex+0x1b6>
 8007fd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fdc:	42bd      	cmp	r5, r7
 8007fde:	dd6f      	ble.n	80080c0 <__gethex+0x32c>
 8007fe0:	1bed      	subs	r5, r5, r7
 8007fe2:	42ae      	cmp	r6, r5
 8007fe4:	dc34      	bgt.n	8008050 <__gethex+0x2bc>
 8007fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d022      	beq.n	8008034 <__gethex+0x2a0>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d024      	beq.n	800803c <__gethex+0x2a8>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d115      	bne.n	8008022 <__gethex+0x28e>
 8007ff6:	42ae      	cmp	r6, r5
 8007ff8:	d113      	bne.n	8008022 <__gethex+0x28e>
 8007ffa:	2e01      	cmp	r6, #1
 8007ffc:	d10b      	bne.n	8008016 <__gethex+0x282>
 8007ffe:	9a02      	ldr	r2, [sp, #8]
 8008000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	2301      	movs	r3, #1
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	f8ca 3000 	str.w	r3, [sl]
 800800e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008010:	2562      	movs	r5, #98	@ 0x62
 8008012:	601c      	str	r4, [r3, #0]
 8008014:	e73a      	b.n	8007e8c <__gethex+0xf8>
 8008016:	1e71      	subs	r1, r6, #1
 8008018:	4620      	mov	r0, r4
 800801a:	f7fe fd26 	bl	8006a6a <__any_on>
 800801e:	2800      	cmp	r0, #0
 8008020:	d1ed      	bne.n	8007ffe <__gethex+0x26a>
 8008022:	9801      	ldr	r0, [sp, #4]
 8008024:	4621      	mov	r1, r4
 8008026:	f7fe f8cf 	bl	80061c8 <_Bfree>
 800802a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800802c:	2300      	movs	r3, #0
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	2550      	movs	r5, #80	@ 0x50
 8008032:	e72b      	b.n	8007e8c <__gethex+0xf8>
 8008034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1f3      	bne.n	8008022 <__gethex+0x28e>
 800803a:	e7e0      	b.n	8007ffe <__gethex+0x26a>
 800803c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1dd      	bne.n	8007ffe <__gethex+0x26a>
 8008042:	e7ee      	b.n	8008022 <__gethex+0x28e>
 8008044:	08008bf0 	.word	0x08008bf0
 8008048:	08008a85 	.word	0x08008a85
 800804c:	08008d9e 	.word	0x08008d9e
 8008050:	1e6f      	subs	r7, r5, #1
 8008052:	f1b9 0f00 	cmp.w	r9, #0
 8008056:	d130      	bne.n	80080ba <__gethex+0x326>
 8008058:	b127      	cbz	r7, 8008064 <__gethex+0x2d0>
 800805a:	4639      	mov	r1, r7
 800805c:	4620      	mov	r0, r4
 800805e:	f7fe fd04 	bl	8006a6a <__any_on>
 8008062:	4681      	mov	r9, r0
 8008064:	117a      	asrs	r2, r7, #5
 8008066:	2301      	movs	r3, #1
 8008068:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800806c:	f007 071f 	and.w	r7, r7, #31
 8008070:	40bb      	lsls	r3, r7
 8008072:	4213      	tst	r3, r2
 8008074:	4629      	mov	r1, r5
 8008076:	4620      	mov	r0, r4
 8008078:	bf18      	it	ne
 800807a:	f049 0902 	orrne.w	r9, r9, #2
 800807e:	f7ff fe21 	bl	8007cc4 <rshift>
 8008082:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008086:	1b76      	subs	r6, r6, r5
 8008088:	2502      	movs	r5, #2
 800808a:	f1b9 0f00 	cmp.w	r9, #0
 800808e:	d047      	beq.n	8008120 <__gethex+0x38c>
 8008090:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d015      	beq.n	80080c4 <__gethex+0x330>
 8008098:	2b03      	cmp	r3, #3
 800809a:	d017      	beq.n	80080cc <__gethex+0x338>
 800809c:	2b01      	cmp	r3, #1
 800809e:	d109      	bne.n	80080b4 <__gethex+0x320>
 80080a0:	f019 0f02 	tst.w	r9, #2
 80080a4:	d006      	beq.n	80080b4 <__gethex+0x320>
 80080a6:	f8da 3000 	ldr.w	r3, [sl]
 80080aa:	ea49 0903 	orr.w	r9, r9, r3
 80080ae:	f019 0f01 	tst.w	r9, #1
 80080b2:	d10e      	bne.n	80080d2 <__gethex+0x33e>
 80080b4:	f045 0510 	orr.w	r5, r5, #16
 80080b8:	e032      	b.n	8008120 <__gethex+0x38c>
 80080ba:	f04f 0901 	mov.w	r9, #1
 80080be:	e7d1      	b.n	8008064 <__gethex+0x2d0>
 80080c0:	2501      	movs	r5, #1
 80080c2:	e7e2      	b.n	800808a <__gethex+0x2f6>
 80080c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c6:	f1c3 0301 	rsb	r3, r3, #1
 80080ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <__gethex+0x320>
 80080d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080d6:	f104 0314 	add.w	r3, r4, #20
 80080da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080e2:	f04f 0c00 	mov.w	ip, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080f0:	d01b      	beq.n	800812a <__gethex+0x396>
 80080f2:	3201      	adds	r2, #1
 80080f4:	6002      	str	r2, [r0, #0]
 80080f6:	2d02      	cmp	r5, #2
 80080f8:	f104 0314 	add.w	r3, r4, #20
 80080fc:	d13c      	bne.n	8008178 <__gethex+0x3e4>
 80080fe:	f8d8 2000 	ldr.w	r2, [r8]
 8008102:	3a01      	subs	r2, #1
 8008104:	42b2      	cmp	r2, r6
 8008106:	d109      	bne.n	800811c <__gethex+0x388>
 8008108:	1171      	asrs	r1, r6, #5
 800810a:	2201      	movs	r2, #1
 800810c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008110:	f006 061f 	and.w	r6, r6, #31
 8008114:	fa02 f606 	lsl.w	r6, r2, r6
 8008118:	421e      	tst	r6, r3
 800811a:	d13a      	bne.n	8008192 <__gethex+0x3fe>
 800811c:	f045 0520 	orr.w	r5, r5, #32
 8008120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008122:	601c      	str	r4, [r3, #0]
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	601f      	str	r7, [r3, #0]
 8008128:	e6b0      	b.n	8007e8c <__gethex+0xf8>
 800812a:	4299      	cmp	r1, r3
 800812c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008130:	d8d9      	bhi.n	80080e6 <__gethex+0x352>
 8008132:	68a3      	ldr	r3, [r4, #8]
 8008134:	459b      	cmp	fp, r3
 8008136:	db17      	blt.n	8008168 <__gethex+0x3d4>
 8008138:	6861      	ldr	r1, [r4, #4]
 800813a:	9801      	ldr	r0, [sp, #4]
 800813c:	3101      	adds	r1, #1
 800813e:	f7fe f803 	bl	8006148 <_Balloc>
 8008142:	4681      	mov	r9, r0
 8008144:	b918      	cbnz	r0, 800814e <__gethex+0x3ba>
 8008146:	4b1a      	ldr	r3, [pc, #104]	@ (80081b0 <__gethex+0x41c>)
 8008148:	4602      	mov	r2, r0
 800814a:	2184      	movs	r1, #132	@ 0x84
 800814c:	e6c5      	b.n	8007eda <__gethex+0x146>
 800814e:	6922      	ldr	r2, [r4, #16]
 8008150:	3202      	adds	r2, #2
 8008152:	f104 010c 	add.w	r1, r4, #12
 8008156:	0092      	lsls	r2, r2, #2
 8008158:	300c      	adds	r0, #12
 800815a:	f7ff fd6b 	bl	8007c34 <memcpy>
 800815e:	4621      	mov	r1, r4
 8008160:	9801      	ldr	r0, [sp, #4]
 8008162:	f7fe f831 	bl	80061c8 <_Bfree>
 8008166:	464c      	mov	r4, r9
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008170:	6122      	str	r2, [r4, #16]
 8008172:	2201      	movs	r2, #1
 8008174:	615a      	str	r2, [r3, #20]
 8008176:	e7be      	b.n	80080f6 <__gethex+0x362>
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	455a      	cmp	r2, fp
 800817c:	dd0b      	ble.n	8008196 <__gethex+0x402>
 800817e:	2101      	movs	r1, #1
 8008180:	4620      	mov	r0, r4
 8008182:	f7ff fd9f 	bl	8007cc4 <rshift>
 8008186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800818a:	3701      	adds	r7, #1
 800818c:	42bb      	cmp	r3, r7
 800818e:	f6ff aee0 	blt.w	8007f52 <__gethex+0x1be>
 8008192:	2501      	movs	r5, #1
 8008194:	e7c2      	b.n	800811c <__gethex+0x388>
 8008196:	f016 061f 	ands.w	r6, r6, #31
 800819a:	d0fa      	beq.n	8008192 <__gethex+0x3fe>
 800819c:	4453      	add	r3, sl
 800819e:	f1c6 0620 	rsb	r6, r6, #32
 80081a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80081a6:	f7fe f8c1 	bl	800632c <__hi0bits>
 80081aa:	42b0      	cmp	r0, r6
 80081ac:	dbe7      	blt.n	800817e <__gethex+0x3ea>
 80081ae:	e7f0      	b.n	8008192 <__gethex+0x3fe>
 80081b0:	08008a85 	.word	0x08008a85

080081b4 <L_shift>:
 80081b4:	f1c2 0208 	rsb	r2, r2, #8
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	b570      	push	{r4, r5, r6, lr}
 80081bc:	f1c2 0620 	rsb	r6, r2, #32
 80081c0:	6843      	ldr	r3, [r0, #4]
 80081c2:	6804      	ldr	r4, [r0, #0]
 80081c4:	fa03 f506 	lsl.w	r5, r3, r6
 80081c8:	432c      	orrs	r4, r5
 80081ca:	40d3      	lsrs	r3, r2
 80081cc:	6004      	str	r4, [r0, #0]
 80081ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80081d2:	4288      	cmp	r0, r1
 80081d4:	d3f4      	bcc.n	80081c0 <L_shift+0xc>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}

080081d8 <__match>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	6803      	ldr	r3, [r0, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e2:	b914      	cbnz	r4, 80081ea <__match+0x12>
 80081e4:	6003      	str	r3, [r0, #0]
 80081e6:	2001      	movs	r0, #1
 80081e8:	bd30      	pop	{r4, r5, pc}
 80081ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80081f2:	2d19      	cmp	r5, #25
 80081f4:	bf98      	it	ls
 80081f6:	3220      	addls	r2, #32
 80081f8:	42a2      	cmp	r2, r4
 80081fa:	d0f0      	beq.n	80081de <__match+0x6>
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7f3      	b.n	80081e8 <__match+0x10>

08008200 <__hexnan>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	6801      	ldr	r1, [r0, #0]
 8008208:	115e      	asrs	r6, r3, #5
 800820a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800820e:	f013 031f 	ands.w	r3, r3, #31
 8008212:	b087      	sub	sp, #28
 8008214:	bf18      	it	ne
 8008216:	3604      	addne	r6, #4
 8008218:	2500      	movs	r5, #0
 800821a:	1f37      	subs	r7, r6, #4
 800821c:	4682      	mov	sl, r0
 800821e:	4690      	mov	r8, r2
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	f846 5c04 	str.w	r5, [r6, #-4]
 8008226:	46b9      	mov	r9, r7
 8008228:	463c      	mov	r4, r7
 800822a:	9502      	str	r5, [sp, #8]
 800822c:	46ab      	mov	fp, r5
 800822e:	784a      	ldrb	r2, [r1, #1]
 8008230:	1c4b      	adds	r3, r1, #1
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	b342      	cbz	r2, 8008288 <__hexnan+0x88>
 8008236:	4610      	mov	r0, r2
 8008238:	9105      	str	r1, [sp, #20]
 800823a:	9204      	str	r2, [sp, #16]
 800823c:	f7ff fd94 	bl	8007d68 <__hexdig_fun>
 8008240:	2800      	cmp	r0, #0
 8008242:	d151      	bne.n	80082e8 <__hexnan+0xe8>
 8008244:	9a04      	ldr	r2, [sp, #16]
 8008246:	9905      	ldr	r1, [sp, #20]
 8008248:	2a20      	cmp	r2, #32
 800824a:	d818      	bhi.n	800827e <__hexnan+0x7e>
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	459b      	cmp	fp, r3
 8008250:	dd13      	ble.n	800827a <__hexnan+0x7a>
 8008252:	454c      	cmp	r4, r9
 8008254:	d206      	bcs.n	8008264 <__hexnan+0x64>
 8008256:	2d07      	cmp	r5, #7
 8008258:	dc04      	bgt.n	8008264 <__hexnan+0x64>
 800825a:	462a      	mov	r2, r5
 800825c:	4649      	mov	r1, r9
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff ffa8 	bl	80081b4 <L_shift>
 8008264:	4544      	cmp	r4, r8
 8008266:	d952      	bls.n	800830e <__hexnan+0x10e>
 8008268:	2300      	movs	r3, #0
 800826a:	f1a4 0904 	sub.w	r9, r4, #4
 800826e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008272:	f8cd b008 	str.w	fp, [sp, #8]
 8008276:	464c      	mov	r4, r9
 8008278:	461d      	mov	r5, r3
 800827a:	9903      	ldr	r1, [sp, #12]
 800827c:	e7d7      	b.n	800822e <__hexnan+0x2e>
 800827e:	2a29      	cmp	r2, #41	@ 0x29
 8008280:	d157      	bne.n	8008332 <__hexnan+0x132>
 8008282:	3102      	adds	r1, #2
 8008284:	f8ca 1000 	str.w	r1, [sl]
 8008288:	f1bb 0f00 	cmp.w	fp, #0
 800828c:	d051      	beq.n	8008332 <__hexnan+0x132>
 800828e:	454c      	cmp	r4, r9
 8008290:	d206      	bcs.n	80082a0 <__hexnan+0xa0>
 8008292:	2d07      	cmp	r5, #7
 8008294:	dc04      	bgt.n	80082a0 <__hexnan+0xa0>
 8008296:	462a      	mov	r2, r5
 8008298:	4649      	mov	r1, r9
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff ff8a 	bl	80081b4 <L_shift>
 80082a0:	4544      	cmp	r4, r8
 80082a2:	d936      	bls.n	8008312 <__hexnan+0x112>
 80082a4:	f1a8 0204 	sub.w	r2, r8, #4
 80082a8:	4623      	mov	r3, r4
 80082aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80082ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80082b2:	429f      	cmp	r7, r3
 80082b4:	d2f9      	bcs.n	80082aa <__hexnan+0xaa>
 80082b6:	1b3b      	subs	r3, r7, r4
 80082b8:	f023 0303 	bic.w	r3, r3, #3
 80082bc:	3304      	adds	r3, #4
 80082be:	3401      	adds	r4, #1
 80082c0:	3e03      	subs	r6, #3
 80082c2:	42b4      	cmp	r4, r6
 80082c4:	bf88      	it	hi
 80082c6:	2304      	movhi	r3, #4
 80082c8:	4443      	add	r3, r8
 80082ca:	2200      	movs	r2, #0
 80082cc:	f843 2b04 	str.w	r2, [r3], #4
 80082d0:	429f      	cmp	r7, r3
 80082d2:	d2fb      	bcs.n	80082cc <__hexnan+0xcc>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	b91b      	cbnz	r3, 80082e0 <__hexnan+0xe0>
 80082d8:	4547      	cmp	r7, r8
 80082da:	d128      	bne.n	800832e <__hexnan+0x12e>
 80082dc:	2301      	movs	r3, #1
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	2005      	movs	r0, #5
 80082e2:	b007      	add	sp, #28
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	3501      	adds	r5, #1
 80082ea:	2d08      	cmp	r5, #8
 80082ec:	f10b 0b01 	add.w	fp, fp, #1
 80082f0:	dd06      	ble.n	8008300 <__hexnan+0x100>
 80082f2:	4544      	cmp	r4, r8
 80082f4:	d9c1      	bls.n	800827a <__hexnan+0x7a>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80082fc:	2501      	movs	r5, #1
 80082fe:	3c04      	subs	r4, #4
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	f000 000f 	and.w	r0, r0, #15
 8008306:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800830a:	6020      	str	r0, [r4, #0]
 800830c:	e7b5      	b.n	800827a <__hexnan+0x7a>
 800830e:	2508      	movs	r5, #8
 8008310:	e7b3      	b.n	800827a <__hexnan+0x7a>
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0dd      	beq.n	80082d4 <__hexnan+0xd4>
 8008318:	f1c3 0320 	rsb	r3, r3, #32
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	40da      	lsrs	r2, r3
 8008322:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008326:	4013      	ands	r3, r2
 8008328:	f846 3c04 	str.w	r3, [r6, #-4]
 800832c:	e7d2      	b.n	80082d4 <__hexnan+0xd4>
 800832e:	3f04      	subs	r7, #4
 8008330:	e7d0      	b.n	80082d4 <__hexnan+0xd4>
 8008332:	2004      	movs	r0, #4
 8008334:	e7d5      	b.n	80082e2 <__hexnan+0xe2>

08008336 <__ascii_mbtowc>:
 8008336:	b082      	sub	sp, #8
 8008338:	b901      	cbnz	r1, 800833c <__ascii_mbtowc+0x6>
 800833a:	a901      	add	r1, sp, #4
 800833c:	b142      	cbz	r2, 8008350 <__ascii_mbtowc+0x1a>
 800833e:	b14b      	cbz	r3, 8008354 <__ascii_mbtowc+0x1e>
 8008340:	7813      	ldrb	r3, [r2, #0]
 8008342:	600b      	str	r3, [r1, #0]
 8008344:	7812      	ldrb	r2, [r2, #0]
 8008346:	1e10      	subs	r0, r2, #0
 8008348:	bf18      	it	ne
 800834a:	2001      	movne	r0, #1
 800834c:	b002      	add	sp, #8
 800834e:	4770      	bx	lr
 8008350:	4610      	mov	r0, r2
 8008352:	e7fb      	b.n	800834c <__ascii_mbtowc+0x16>
 8008354:	f06f 0001 	mvn.w	r0, #1
 8008358:	e7f8      	b.n	800834c <__ascii_mbtowc+0x16>

0800835a <_realloc_r>:
 800835a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	4680      	mov	r8, r0
 8008360:	4615      	mov	r5, r2
 8008362:	460c      	mov	r4, r1
 8008364:	b921      	cbnz	r1, 8008370 <_realloc_r+0x16>
 8008366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800836a:	4611      	mov	r1, r2
 800836c:	f7fd be60 	b.w	8006030 <_malloc_r>
 8008370:	b92a      	cbnz	r2, 800837e <_realloc_r+0x24>
 8008372:	f7fd fde9 	bl	8005f48 <_free_r>
 8008376:	2400      	movs	r4, #0
 8008378:	4620      	mov	r0, r4
 800837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837e:	f000 f840 	bl	8008402 <_malloc_usable_size_r>
 8008382:	4285      	cmp	r5, r0
 8008384:	4606      	mov	r6, r0
 8008386:	d802      	bhi.n	800838e <_realloc_r+0x34>
 8008388:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800838c:	d8f4      	bhi.n	8008378 <_realloc_r+0x1e>
 800838e:	4629      	mov	r1, r5
 8008390:	4640      	mov	r0, r8
 8008392:	f7fd fe4d 	bl	8006030 <_malloc_r>
 8008396:	4607      	mov	r7, r0
 8008398:	2800      	cmp	r0, #0
 800839a:	d0ec      	beq.n	8008376 <_realloc_r+0x1c>
 800839c:	42b5      	cmp	r5, r6
 800839e:	462a      	mov	r2, r5
 80083a0:	4621      	mov	r1, r4
 80083a2:	bf28      	it	cs
 80083a4:	4632      	movcs	r2, r6
 80083a6:	f7ff fc45 	bl	8007c34 <memcpy>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4640      	mov	r0, r8
 80083ae:	f7fd fdcb 	bl	8005f48 <_free_r>
 80083b2:	463c      	mov	r4, r7
 80083b4:	e7e0      	b.n	8008378 <_realloc_r+0x1e>

080083b6 <__ascii_wctomb>:
 80083b6:	4603      	mov	r3, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	b141      	cbz	r1, 80083ce <__ascii_wctomb+0x18>
 80083bc:	2aff      	cmp	r2, #255	@ 0xff
 80083be:	d904      	bls.n	80083ca <__ascii_wctomb+0x14>
 80083c0:	228a      	movs	r2, #138	@ 0x8a
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	4770      	bx	lr
 80083ca:	700a      	strb	r2, [r1, #0]
 80083cc:	2001      	movs	r0, #1
 80083ce:	4770      	bx	lr

080083d0 <fiprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b503      	push	{r0, r1, lr}
 80083d4:	4601      	mov	r1, r0
 80083d6:	ab03      	add	r3, sp, #12
 80083d8:	4805      	ldr	r0, [pc, #20]	@ (80083f0 <fiprintf+0x20>)
 80083da:	f853 2b04 	ldr.w	r2, [r3], #4
 80083de:	6800      	ldr	r0, [r0, #0]
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	f000 f83f 	bl	8008464 <_vfiprintf_r>
 80083e6:	b002      	add	sp, #8
 80083e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083ec:	b003      	add	sp, #12
 80083ee:	4770      	bx	lr
 80083f0:	20000018 	.word	0x20000018

080083f4 <abort>:
 80083f4:	b508      	push	{r3, lr}
 80083f6:	2006      	movs	r0, #6
 80083f8:	f000 fa08 	bl	800880c <raise>
 80083fc:	2001      	movs	r0, #1
 80083fe:	f7f9 fad7 	bl	80019b0 <_exit>

08008402 <_malloc_usable_size_r>:
 8008402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008406:	1f18      	subs	r0, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbc      	itt	lt
 800840c:	580b      	ldrlt	r3, [r1, r0]
 800840e:	18c0      	addlt	r0, r0, r3
 8008410:	4770      	bx	lr

08008412 <__sfputc_r>:
 8008412:	6893      	ldr	r3, [r2, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	b410      	push	{r4}
 800841a:	6093      	str	r3, [r2, #8]
 800841c:	da08      	bge.n	8008430 <__sfputc_r+0x1e>
 800841e:	6994      	ldr	r4, [r2, #24]
 8008420:	42a3      	cmp	r3, r4
 8008422:	db01      	blt.n	8008428 <__sfputc_r+0x16>
 8008424:	290a      	cmp	r1, #10
 8008426:	d103      	bne.n	8008430 <__sfputc_r+0x1e>
 8008428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800842c:	f000 b932 	b.w	8008694 <__swbuf_r>
 8008430:	6813      	ldr	r3, [r2, #0]
 8008432:	1c58      	adds	r0, r3, #1
 8008434:	6010      	str	r0, [r2, #0]
 8008436:	7019      	strb	r1, [r3, #0]
 8008438:	4608      	mov	r0, r1
 800843a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800843e:	4770      	bx	lr

08008440 <__sfputs_r>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	4614      	mov	r4, r2
 8008448:	18d5      	adds	r5, r2, r3
 800844a:	42ac      	cmp	r4, r5
 800844c:	d101      	bne.n	8008452 <__sfputs_r+0x12>
 800844e:	2000      	movs	r0, #0
 8008450:	e007      	b.n	8008462 <__sfputs_r+0x22>
 8008452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008456:	463a      	mov	r2, r7
 8008458:	4630      	mov	r0, r6
 800845a:	f7ff ffda 	bl	8008412 <__sfputc_r>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d1f3      	bne.n	800844a <__sfputs_r+0xa>
 8008462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008464 <_vfiprintf_r>:
 8008464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008468:	460d      	mov	r5, r1
 800846a:	b09d      	sub	sp, #116	@ 0x74
 800846c:	4614      	mov	r4, r2
 800846e:	4698      	mov	r8, r3
 8008470:	4606      	mov	r6, r0
 8008472:	b118      	cbz	r0, 800847c <_vfiprintf_r+0x18>
 8008474:	6a03      	ldr	r3, [r0, #32]
 8008476:	b90b      	cbnz	r3, 800847c <_vfiprintf_r+0x18>
 8008478:	f7fc fdf8 	bl	800506c <__sinit>
 800847c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800847e:	07d9      	lsls	r1, r3, #31
 8008480:	d405      	bmi.n	800848e <_vfiprintf_r+0x2a>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	059a      	lsls	r2, r3, #22
 8008486:	d402      	bmi.n	800848e <_vfiprintf_r+0x2a>
 8008488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800848a:	f7fc ff06 	bl	800529a <__retarget_lock_acquire_recursive>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	071b      	lsls	r3, r3, #28
 8008492:	d501      	bpl.n	8008498 <_vfiprintf_r+0x34>
 8008494:	692b      	ldr	r3, [r5, #16]
 8008496:	b99b      	cbnz	r3, 80084c0 <_vfiprintf_r+0x5c>
 8008498:	4629      	mov	r1, r5
 800849a:	4630      	mov	r0, r6
 800849c:	f000 f938 	bl	8008710 <__swsetup_r>
 80084a0:	b170      	cbz	r0, 80084c0 <_vfiprintf_r+0x5c>
 80084a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084a4:	07dc      	lsls	r4, r3, #31
 80084a6:	d504      	bpl.n	80084b2 <_vfiprintf_r+0x4e>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	b01d      	add	sp, #116	@ 0x74
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	0598      	lsls	r0, r3, #22
 80084b6:	d4f7      	bmi.n	80084a8 <_vfiprintf_r+0x44>
 80084b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ba:	f7fc feef 	bl	800529c <__retarget_lock_release_recursive>
 80084be:	e7f3      	b.n	80084a8 <_vfiprintf_r+0x44>
 80084c0:	2300      	movs	r3, #0
 80084c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c4:	2320      	movs	r3, #32
 80084c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ce:	2330      	movs	r3, #48	@ 0x30
 80084d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008680 <_vfiprintf_r+0x21c>
 80084d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084d8:	f04f 0901 	mov.w	r9, #1
 80084dc:	4623      	mov	r3, r4
 80084de:	469a      	mov	sl, r3
 80084e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e4:	b10a      	cbz	r2, 80084ea <_vfiprintf_r+0x86>
 80084e6:	2a25      	cmp	r2, #37	@ 0x25
 80084e8:	d1f9      	bne.n	80084de <_vfiprintf_r+0x7a>
 80084ea:	ebba 0b04 	subs.w	fp, sl, r4
 80084ee:	d00b      	beq.n	8008508 <_vfiprintf_r+0xa4>
 80084f0:	465b      	mov	r3, fp
 80084f2:	4622      	mov	r2, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7ff ffa2 	bl	8008440 <__sfputs_r>
 80084fc:	3001      	adds	r0, #1
 80084fe:	f000 80a7 	beq.w	8008650 <_vfiprintf_r+0x1ec>
 8008502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008504:	445a      	add	r2, fp
 8008506:	9209      	str	r2, [sp, #36]	@ 0x24
 8008508:	f89a 3000 	ldrb.w	r3, [sl]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 809f 	beq.w	8008650 <_vfiprintf_r+0x1ec>
 8008512:	2300      	movs	r3, #0
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800851c:	f10a 0a01 	add.w	sl, sl, #1
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	9307      	str	r3, [sp, #28]
 8008524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008528:	931a      	str	r3, [sp, #104]	@ 0x68
 800852a:	4654      	mov	r4, sl
 800852c:	2205      	movs	r2, #5
 800852e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008532:	4853      	ldr	r0, [pc, #332]	@ (8008680 <_vfiprintf_r+0x21c>)
 8008534:	f7f7 fe54 	bl	80001e0 <memchr>
 8008538:	9a04      	ldr	r2, [sp, #16]
 800853a:	b9d8      	cbnz	r0, 8008574 <_vfiprintf_r+0x110>
 800853c:	06d1      	lsls	r1, r2, #27
 800853e:	bf44      	itt	mi
 8008540:	2320      	movmi	r3, #32
 8008542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008546:	0713      	lsls	r3, r2, #28
 8008548:	bf44      	itt	mi
 800854a:	232b      	movmi	r3, #43	@ 0x2b
 800854c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008550:	f89a 3000 	ldrb.w	r3, [sl]
 8008554:	2b2a      	cmp	r3, #42	@ 0x2a
 8008556:	d015      	beq.n	8008584 <_vfiprintf_r+0x120>
 8008558:	9a07      	ldr	r2, [sp, #28]
 800855a:	4654      	mov	r4, sl
 800855c:	2000      	movs	r0, #0
 800855e:	f04f 0c0a 	mov.w	ip, #10
 8008562:	4621      	mov	r1, r4
 8008564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008568:	3b30      	subs	r3, #48	@ 0x30
 800856a:	2b09      	cmp	r3, #9
 800856c:	d94b      	bls.n	8008606 <_vfiprintf_r+0x1a2>
 800856e:	b1b0      	cbz	r0, 800859e <_vfiprintf_r+0x13a>
 8008570:	9207      	str	r2, [sp, #28]
 8008572:	e014      	b.n	800859e <_vfiprintf_r+0x13a>
 8008574:	eba0 0308 	sub.w	r3, r0, r8
 8008578:	fa09 f303 	lsl.w	r3, r9, r3
 800857c:	4313      	orrs	r3, r2
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	46a2      	mov	sl, r4
 8008582:	e7d2      	b.n	800852a <_vfiprintf_r+0xc6>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	1d19      	adds	r1, r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	9103      	str	r1, [sp, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfbb      	ittet	lt
 8008590:	425b      	neglt	r3, r3
 8008592:	f042 0202 	orrlt.w	r2, r2, #2
 8008596:	9307      	strge	r3, [sp, #28]
 8008598:	9307      	strlt	r3, [sp, #28]
 800859a:	bfb8      	it	lt
 800859c:	9204      	strlt	r2, [sp, #16]
 800859e:	7823      	ldrb	r3, [r4, #0]
 80085a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80085a2:	d10a      	bne.n	80085ba <_vfiprintf_r+0x156>
 80085a4:	7863      	ldrb	r3, [r4, #1]
 80085a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085a8:	d132      	bne.n	8008610 <_vfiprintf_r+0x1ac>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9203      	str	r2, [sp, #12]
 80085b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085b6:	3402      	adds	r4, #2
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008690 <_vfiprintf_r+0x22c>
 80085be:	7821      	ldrb	r1, [r4, #0]
 80085c0:	2203      	movs	r2, #3
 80085c2:	4650      	mov	r0, sl
 80085c4:	f7f7 fe0c 	bl	80001e0 <memchr>
 80085c8:	b138      	cbz	r0, 80085da <_vfiprintf_r+0x176>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	eba0 000a 	sub.w	r0, r0, sl
 80085d0:	2240      	movs	r2, #64	@ 0x40
 80085d2:	4082      	lsls	r2, r0
 80085d4:	4313      	orrs	r3, r2
 80085d6:	3401      	adds	r4, #1
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085de:	4829      	ldr	r0, [pc, #164]	@ (8008684 <_vfiprintf_r+0x220>)
 80085e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085e4:	2206      	movs	r2, #6
 80085e6:	f7f7 fdfb 	bl	80001e0 <memchr>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d03f      	beq.n	800866e <_vfiprintf_r+0x20a>
 80085ee:	4b26      	ldr	r3, [pc, #152]	@ (8008688 <_vfiprintf_r+0x224>)
 80085f0:	bb1b      	cbnz	r3, 800863a <_vfiprintf_r+0x1d6>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	3307      	adds	r3, #7
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	3308      	adds	r3, #8
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008600:	443b      	add	r3, r7
 8008602:	9309      	str	r3, [sp, #36]	@ 0x24
 8008604:	e76a      	b.n	80084dc <_vfiprintf_r+0x78>
 8008606:	fb0c 3202 	mla	r2, ip, r2, r3
 800860a:	460c      	mov	r4, r1
 800860c:	2001      	movs	r0, #1
 800860e:	e7a8      	b.n	8008562 <_vfiprintf_r+0xfe>
 8008610:	2300      	movs	r3, #0
 8008612:	3401      	adds	r4, #1
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	4619      	mov	r1, r3
 8008618:	f04f 0c0a 	mov.w	ip, #10
 800861c:	4620      	mov	r0, r4
 800861e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008622:	3a30      	subs	r2, #48	@ 0x30
 8008624:	2a09      	cmp	r2, #9
 8008626:	d903      	bls.n	8008630 <_vfiprintf_r+0x1cc>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0c6      	beq.n	80085ba <_vfiprintf_r+0x156>
 800862c:	9105      	str	r1, [sp, #20]
 800862e:	e7c4      	b.n	80085ba <_vfiprintf_r+0x156>
 8008630:	fb0c 2101 	mla	r1, ip, r1, r2
 8008634:	4604      	mov	r4, r0
 8008636:	2301      	movs	r3, #1
 8008638:	e7f0      	b.n	800861c <_vfiprintf_r+0x1b8>
 800863a:	ab03      	add	r3, sp, #12
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	462a      	mov	r2, r5
 8008640:	4b12      	ldr	r3, [pc, #72]	@ (800868c <_vfiprintf_r+0x228>)
 8008642:	a904      	add	r1, sp, #16
 8008644:	4630      	mov	r0, r6
 8008646:	f7fb feb9 	bl	80043bc <_printf_float>
 800864a:	4607      	mov	r7, r0
 800864c:	1c78      	adds	r0, r7, #1
 800864e:	d1d6      	bne.n	80085fe <_vfiprintf_r+0x19a>
 8008650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d405      	bmi.n	8008662 <_vfiprintf_r+0x1fe>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	059a      	lsls	r2, r3, #22
 800865a:	d402      	bmi.n	8008662 <_vfiprintf_r+0x1fe>
 800865c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800865e:	f7fc fe1d 	bl	800529c <__retarget_lock_release_recursive>
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	065b      	lsls	r3, r3, #25
 8008666:	f53f af1f 	bmi.w	80084a8 <_vfiprintf_r+0x44>
 800866a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800866c:	e71e      	b.n	80084ac <_vfiprintf_r+0x48>
 800866e:	ab03      	add	r3, sp, #12
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	462a      	mov	r2, r5
 8008674:	4b05      	ldr	r3, [pc, #20]	@ (800868c <_vfiprintf_r+0x228>)
 8008676:	a904      	add	r1, sp, #16
 8008678:	4630      	mov	r0, r6
 800867a:	f7fc f937 	bl	80048ec <_printf_i>
 800867e:	e7e4      	b.n	800864a <_vfiprintf_r+0x1e6>
 8008680:	08008d49 	.word	0x08008d49
 8008684:	08008d53 	.word	0x08008d53
 8008688:	080043bd 	.word	0x080043bd
 800868c:	08008441 	.word	0x08008441
 8008690:	08008d4f 	.word	0x08008d4f

08008694 <__swbuf_r>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	460e      	mov	r6, r1
 8008698:	4614      	mov	r4, r2
 800869a:	4605      	mov	r5, r0
 800869c:	b118      	cbz	r0, 80086a6 <__swbuf_r+0x12>
 800869e:	6a03      	ldr	r3, [r0, #32]
 80086a0:	b90b      	cbnz	r3, 80086a6 <__swbuf_r+0x12>
 80086a2:	f7fc fce3 	bl	800506c <__sinit>
 80086a6:	69a3      	ldr	r3, [r4, #24]
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	071a      	lsls	r2, r3, #28
 80086ae:	d501      	bpl.n	80086b4 <__swbuf_r+0x20>
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	b943      	cbnz	r3, 80086c6 <__swbuf_r+0x32>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 f82a 	bl	8008710 <__swsetup_r>
 80086bc:	b118      	cbz	r0, 80086c6 <__swbuf_r+0x32>
 80086be:	f04f 37ff 	mov.w	r7, #4294967295
 80086c2:	4638      	mov	r0, r7
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	1a98      	subs	r0, r3, r2
 80086cc:	6963      	ldr	r3, [r4, #20]
 80086ce:	b2f6      	uxtb	r6, r6
 80086d0:	4283      	cmp	r3, r0
 80086d2:	4637      	mov	r7, r6
 80086d4:	dc05      	bgt.n	80086e2 <__swbuf_r+0x4e>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f7ff fa47 	bl	8007b6c <_fflush_r>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d1ed      	bne.n	80086be <__swbuf_r+0x2a>
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	60a3      	str	r3, [r4, #8]
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	6022      	str	r2, [r4, #0]
 80086ee:	701e      	strb	r6, [r3, #0]
 80086f0:	6962      	ldr	r2, [r4, #20]
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d004      	beq.n	8008702 <__swbuf_r+0x6e>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	07db      	lsls	r3, r3, #31
 80086fc:	d5e1      	bpl.n	80086c2 <__swbuf_r+0x2e>
 80086fe:	2e0a      	cmp	r6, #10
 8008700:	d1df      	bne.n	80086c2 <__swbuf_r+0x2e>
 8008702:	4621      	mov	r1, r4
 8008704:	4628      	mov	r0, r5
 8008706:	f7ff fa31 	bl	8007b6c <_fflush_r>
 800870a:	2800      	cmp	r0, #0
 800870c:	d0d9      	beq.n	80086c2 <__swbuf_r+0x2e>
 800870e:	e7d6      	b.n	80086be <__swbuf_r+0x2a>

08008710 <__swsetup_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4b29      	ldr	r3, [pc, #164]	@ (80087b8 <__swsetup_r+0xa8>)
 8008714:	4605      	mov	r5, r0
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	460c      	mov	r4, r1
 800871a:	b118      	cbz	r0, 8008724 <__swsetup_r+0x14>
 800871c:	6a03      	ldr	r3, [r0, #32]
 800871e:	b90b      	cbnz	r3, 8008724 <__swsetup_r+0x14>
 8008720:	f7fc fca4 	bl	800506c <__sinit>
 8008724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008728:	0719      	lsls	r1, r3, #28
 800872a:	d422      	bmi.n	8008772 <__swsetup_r+0x62>
 800872c:	06da      	lsls	r2, r3, #27
 800872e:	d407      	bmi.n	8008740 <__swsetup_r+0x30>
 8008730:	2209      	movs	r2, #9
 8008732:	602a      	str	r2, [r5, #0]
 8008734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	e033      	b.n	80087a8 <__swsetup_r+0x98>
 8008740:	0758      	lsls	r0, r3, #29
 8008742:	d512      	bpl.n	800876a <__swsetup_r+0x5a>
 8008744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008746:	b141      	cbz	r1, 800875a <__swsetup_r+0x4a>
 8008748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800874c:	4299      	cmp	r1, r3
 800874e:	d002      	beq.n	8008756 <__swsetup_r+0x46>
 8008750:	4628      	mov	r0, r5
 8008752:	f7fd fbf9 	bl	8005f48 <_free_r>
 8008756:	2300      	movs	r3, #0
 8008758:	6363      	str	r3, [r4, #52]	@ 0x34
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	2300      	movs	r3, #0
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f043 0308 	orr.w	r3, r3, #8
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	b94b      	cbnz	r3, 800878a <__swsetup_r+0x7a>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800877c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008780:	d003      	beq.n	800878a <__swsetup_r+0x7a>
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 f883 	bl	8008890 <__smakebuf_r>
 800878a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878e:	f013 0201 	ands.w	r2, r3, #1
 8008792:	d00a      	beq.n	80087aa <__swsetup_r+0x9a>
 8008794:	2200      	movs	r2, #0
 8008796:	60a2      	str	r2, [r4, #8]
 8008798:	6962      	ldr	r2, [r4, #20]
 800879a:	4252      	negs	r2, r2
 800879c:	61a2      	str	r2, [r4, #24]
 800879e:	6922      	ldr	r2, [r4, #16]
 80087a0:	b942      	cbnz	r2, 80087b4 <__swsetup_r+0xa4>
 80087a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087a6:	d1c5      	bne.n	8008734 <__swsetup_r+0x24>
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	0799      	lsls	r1, r3, #30
 80087ac:	bf58      	it	pl
 80087ae:	6962      	ldrpl	r2, [r4, #20]
 80087b0:	60a2      	str	r2, [r4, #8]
 80087b2:	e7f4      	b.n	800879e <__swsetup_r+0x8e>
 80087b4:	2000      	movs	r0, #0
 80087b6:	e7f7      	b.n	80087a8 <__swsetup_r+0x98>
 80087b8:	20000018 	.word	0x20000018

080087bc <_raise_r>:
 80087bc:	291f      	cmp	r1, #31
 80087be:	b538      	push	{r3, r4, r5, lr}
 80087c0:	4605      	mov	r5, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	d904      	bls.n	80087d0 <_raise_r+0x14>
 80087c6:	2316      	movs	r3, #22
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087d2:	b112      	cbz	r2, 80087da <_raise_r+0x1e>
 80087d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d8:	b94b      	cbnz	r3, 80087ee <_raise_r+0x32>
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 f830 	bl	8008840 <_getpid_r>
 80087e0:	4622      	mov	r2, r4
 80087e2:	4601      	mov	r1, r0
 80087e4:	4628      	mov	r0, r5
 80087e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ea:	f000 b817 	b.w	800881c <_kill_r>
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d00a      	beq.n	8008808 <_raise_r+0x4c>
 80087f2:	1c59      	adds	r1, r3, #1
 80087f4:	d103      	bne.n	80087fe <_raise_r+0x42>
 80087f6:	2316      	movs	r3, #22
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	2001      	movs	r0, #1
 80087fc:	e7e7      	b.n	80087ce <_raise_r+0x12>
 80087fe:	2100      	movs	r1, #0
 8008800:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008804:	4620      	mov	r0, r4
 8008806:	4798      	blx	r3
 8008808:	2000      	movs	r0, #0
 800880a:	e7e0      	b.n	80087ce <_raise_r+0x12>

0800880c <raise>:
 800880c:	4b02      	ldr	r3, [pc, #8]	@ (8008818 <raise+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f7ff bfd3 	b.w	80087bc <_raise_r>
 8008816:	bf00      	nop
 8008818:	20000018 	.word	0x20000018

0800881c <_kill_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d07      	ldr	r5, [pc, #28]	@ (800883c <_kill_r+0x20>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	f7f9 f8b1 	bl	8001990 <_kill>
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	d102      	bne.n	8008838 <_kill_r+0x1c>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	b103      	cbz	r3, 8008838 <_kill_r+0x1c>
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	bf00      	nop
 800883c:	200003fc 	.word	0x200003fc

08008840 <_getpid_r>:
 8008840:	f7f9 b89e 	b.w	8001980 <_getpid>

08008844 <__swhatbuf_r>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	460c      	mov	r4, r1
 8008848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884c:	2900      	cmp	r1, #0
 800884e:	b096      	sub	sp, #88	@ 0x58
 8008850:	4615      	mov	r5, r2
 8008852:	461e      	mov	r6, r3
 8008854:	da0d      	bge.n	8008872 <__swhatbuf_r+0x2e>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800885c:	f04f 0100 	mov.w	r1, #0
 8008860:	bf14      	ite	ne
 8008862:	2340      	movne	r3, #64	@ 0x40
 8008864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008868:	2000      	movs	r0, #0
 800886a:	6031      	str	r1, [r6, #0]
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	b016      	add	sp, #88	@ 0x58
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	466a      	mov	r2, sp
 8008874:	f000 f848 	bl	8008908 <_fstat_r>
 8008878:	2800      	cmp	r0, #0
 800887a:	dbec      	blt.n	8008856 <__swhatbuf_r+0x12>
 800887c:	9901      	ldr	r1, [sp, #4]
 800887e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008886:	4259      	negs	r1, r3
 8008888:	4159      	adcs	r1, r3
 800888a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800888e:	e7eb      	b.n	8008868 <__swhatbuf_r+0x24>

08008890 <__smakebuf_r>:
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008894:	079d      	lsls	r5, r3, #30
 8008896:	4606      	mov	r6, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d507      	bpl.n	80088ac <__smakebuf_r+0x1c>
 800889c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	2301      	movs	r3, #1
 80088a6:	6163      	str	r3, [r4, #20]
 80088a8:	b003      	add	sp, #12
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ac:	ab01      	add	r3, sp, #4
 80088ae:	466a      	mov	r2, sp
 80088b0:	f7ff ffc8 	bl	8008844 <__swhatbuf_r>
 80088b4:	9f00      	ldr	r7, [sp, #0]
 80088b6:	4605      	mov	r5, r0
 80088b8:	4639      	mov	r1, r7
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7fd fbb8 	bl	8006030 <_malloc_r>
 80088c0:	b948      	cbnz	r0, 80088d6 <__smakebuf_r+0x46>
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	059a      	lsls	r2, r3, #22
 80088c8:	d4ee      	bmi.n	80088a8 <__smakebuf_r+0x18>
 80088ca:	f023 0303 	bic.w	r3, r3, #3
 80088ce:	f043 0302 	orr.w	r3, r3, #2
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	e7e2      	b.n	800889c <__smakebuf_r+0xc>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	6020      	str	r0, [r4, #0]
 80088da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088e6:	b15b      	cbz	r3, 8008900 <__smakebuf_r+0x70>
 80088e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ec:	4630      	mov	r0, r6
 80088ee:	f000 f81d 	bl	800892c <_isatty_r>
 80088f2:	b128      	cbz	r0, 8008900 <__smakebuf_r+0x70>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	431d      	orrs	r5, r3
 8008904:	81a5      	strh	r5, [r4, #12]
 8008906:	e7cf      	b.n	80088a8 <__smakebuf_r+0x18>

08008908 <_fstat_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d07      	ldr	r5, [pc, #28]	@ (8008928 <_fstat_r+0x20>)
 800890c:	2300      	movs	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	f7f9 f89b 	bl	8001a50 <_fstat>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	d102      	bne.n	8008924 <_fstat_r+0x1c>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	b103      	cbz	r3, 8008924 <_fstat_r+0x1c>
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	bd38      	pop	{r3, r4, r5, pc}
 8008926:	bf00      	nop
 8008928:	200003fc 	.word	0x200003fc

0800892c <_isatty_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	@ (8008948 <_isatty_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f9 f89a 	bl	8001a70 <_isatty>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_isatty_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_isatty_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	200003fc 	.word	0x200003fc

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
