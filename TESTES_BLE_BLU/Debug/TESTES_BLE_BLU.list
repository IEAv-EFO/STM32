
TESTES_BLE_BLU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d54  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007eec  08007eec  00008eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f54  08007f54  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f54  08007f54  00008f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f5c  08007f5c  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007f64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  200000fc  08008060  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d80  08008060  00009d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dea  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307d  00000000  00000000  0001af16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa5  00000000  00000000  0001edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018350  00000000  00000000  0001f855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013064  00000000  00000000  00037ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ae3  00000000  00000000  0004ac09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d46ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003968  00000000  00000000  000d4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007ed4 	.word	0x08007ed4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007ed4 	.word	0x08007ed4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80004dc:	f000 fa38 	bl	8000950 <HAL_Init>
  SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
  MX_GPIO_Init();
 80004e4:	f000 f8a2 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f006 ffca 	bl	8007480 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f874 	bl	80005d8 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rxBuffer, RX_BUFFER_SIZE);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4903      	ldr	r1, [pc, #12]	@ (8000500 <main+0x28>)
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <main+0x2c>)
 80004f6:	f002 fd6e 	bl	8002fd6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fa:	bf00      	nop
 80004fc:	e7fd      	b.n	80004fa <main+0x22>
 80004fe:	bf00      	nop
 8000500:	20000160 	.word	0x20000160
 8000504:	20000118 	.word	0x20000118

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f007 fc9c 	bl	8007e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a26      	ldr	r2, [pc, #152]	@ (80005d0 <SystemClock_Config+0xc8>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a20      	ldr	r2, [pc, #128]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000578:	230c      	movs	r3, #12
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800057c:	2360      	movs	r3, #96	@ 0x60
 800057e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 ffef 	bl	8002570 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f8dc 	bl	8000754 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fa51 	bl	8002a60 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c4:	f000 f8c6 	bl	8000754 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	@ 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <MX_USART1_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_USART1_UART_Init+0x4c>)
 8000610:	f002 fc06 	bl	8002e20 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800061a:	f000 f89b 	bl	8000754 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000118 	.word	0x20000118
 8000628:	40011000 	.word	0x40011000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_GPIO_Init+0x4c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <MX_GPIO_Init+0x4c>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_GPIO_Init+0x4c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_GPIO_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <MX_GPIO_Init+0x4c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_GPIO_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <HAL_UART_RxCpltCallback+0x9c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d13f      	bne.n	800070e <HAL_UART_RxCpltCallback+0x92>
        // Filtra o caractere de controle '\r'
        if (rxBuffer[0] != '\r') {
 800068e:	4b23      	ldr	r3, [pc, #140]	@ (800071c <HAL_UART_RxCpltCallback+0xa0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b0d      	cmp	r3, #13
 8000694:	d012      	beq.n	80006bc <HAL_UART_RxCpltCallback+0x40>
            // Adiciona o byte recebido ao buffer de montagem
            size_t len = strlen(assembledBuffer);
 8000696:	4822      	ldr	r0, [pc, #136]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 8000698:	f7ff fd9e 	bl	80001d8 <strlen>
 800069c:	60f8      	str	r0, [r7, #12]
            if (len < TX_BUFFER_SIZE - 1) {  // Garante espaço para mais um caractere e o terminador nulo
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b30      	cmp	r3, #48	@ 0x30
 80006a2:	d80b      	bhi.n	80006bc <HAL_UART_RxCpltCallback+0x40>
                assembledBuffer[len] = rxBuffer[0];
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <HAL_UART_RxCpltCallback+0xa0>)
 80006a6:	7819      	ldrb	r1, [r3, #0]
 80006a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	460a      	mov	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
                assembledBuffer[len + 1] = '\0';
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	54d1      	strb	r1, [r2, r3]
            }
        }

        // Verifica se o comando terminou com '\r'
        if (rxBuffer[0] == '\r') {
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <HAL_UART_RxCpltCallback+0xa0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b0d      	cmp	r3, #13
 80006c2:	d11f      	bne.n	8000704 <HAL_UART_RxCpltCallback+0x88>
            // Concatena "_rx\r\n" ao comando completo
            if (strlen(assembledBuffer) + 5 < TX_BUFFER_SIZE) {  // Garante espaço para "_rx\r\n"
 80006c4:	4816      	ldr	r0, [pc, #88]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006c6:	f7ff fd87 	bl	80001d8 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	3305      	adds	r3, #5
 80006ce:	2b31      	cmp	r3, #49	@ 0x31
 80006d0:	d80a      	bhi.n	80006e8 <HAL_UART_RxCpltCallback+0x6c>
                strncat(assembledBuffer, "_rx\r\n", TX_BUFFER_SIZE - strlen(assembledBuffer) - 1);
 80006d2:	4813      	ldr	r0, [pc, #76]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006d4:	f7ff fd80 	bl	80001d8 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	f1c3 0331 	rsb	r3, r3, #49	@ 0x31
 80006de:	461a      	mov	r2, r3
 80006e0:	4910      	ldr	r1, [pc, #64]	@ (8000724 <HAL_UART_RxCpltCallback+0xa8>)
 80006e2:	480f      	ldr	r0, [pc, #60]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006e4:	f007 fbbe 	bl	8007e64 <strncat>
            }

            // Transmite o comando modificado
            USART1_Transmit((uint8_t *)assembledBuffer, strlen(assembledBuffer));
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006ea:	f7ff fd75 	bl	80001d8 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	480a      	ldr	r0, [pc, #40]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 80006f6:	f000 f819 	bl	800072c <USART1_Transmit>

            // Limpa o buffer montado para a próxima mensagem
            memset(assembledBuffer, 0, TX_BUFFER_SIZE);
 80006fa:	2232      	movs	r2, #50	@ 0x32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4808      	ldr	r0, [pc, #32]	@ (8000720 <HAL_UART_RxCpltCallback+0xa4>)
 8000700:	f007 fba8 	bl	8007e54 <memset>
        }

        // Reinicia a recepção para o próximo byte
        HAL_UART_Receive_IT(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000704:	2201      	movs	r2, #1
 8000706:	4905      	ldr	r1, [pc, #20]	@ (800071c <HAL_UART_RxCpltCallback+0xa0>)
 8000708:	4807      	ldr	r0, [pc, #28]	@ (8000728 <HAL_UART_RxCpltCallback+0xac>)
 800070a:	f002 fc64 	bl	8002fd6 <HAL_UART_Receive_IT>
    }
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40011000 	.word	0x40011000
 800071c:	20000160 	.word	0x20000160
 8000720:	20000164 	.word	0x20000164
 8000724:	08007eec 	.word	0x08007eec
 8000728:	20000118 	.word	0x20000118

0800072c <USART1_Transmit>:

// Função para transmitir dados via USART1
void USART1_Transmit(uint8_t* data, uint16_t size) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart1, data, size, HAL_MAX_DELAY);
 8000738:	887a      	ldrh	r2, [r7, #2]
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <USART1_Transmit+0x24>)
 8000742:	f002 fbbd 	bl	8002ec0 <HAL_UART_Transmit>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000118 	.word	0x20000118

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  __disable_irq();
  while (1) {
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <HAL_UART_MspInit+0x94>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d134      	bne.n	800083c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <HAL_UART_MspInit+0x98>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <HAL_UART_MspInit+0x98>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <HAL_UART_MspInit+0x98>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <HAL_UART_MspInit+0x98>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <HAL_UART_MspInit+0x98>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_UART_MspInit+0x98>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800080a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800081c:	2307      	movs	r3, #7
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4809      	ldr	r0, [pc, #36]	@ (800084c <HAL_UART_MspInit+0x9c>)
 8000828:	f000 facc 	bl	8000dc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2025      	movs	r0, #37	@ 0x25
 8000832:	f000 f9fe 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000836:	2025      	movs	r0, #37	@ 0x25
 8000838:	f000 fa17 	bl	8000c6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40011000 	.word	0x40011000
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 f8a5 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f002 fbb3 	bl	8003020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000118 	.word	0x20000118

080008c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <OTG_FS_IRQHandler+0x10>)
 80008ca:	f000 fd43 	bl	8001354 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000167c 	.word	0x2000167c

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f007 faaf 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fdd3 	bl	80004d8 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000940:	08007f64 	.word	0x08007f64
  ldr r2, =_sbss
 8000944:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000948:	20001d80 	.word	0x20001d80

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f94f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff feec 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f967 	bl	8000c86 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f92f 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000198 	.word	0x20000198

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000198 	.word	0x20000198

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	@ (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	@ 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff feb6 	bl	8000a1c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d008      	beq.n	8000cd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e052      	b.n	8000d76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0216 	bic.w	r2, r2, #22
 8000cde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d103      	bne.n	8000d00 <HAL_DMA_Abort+0x62>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0208 	bic.w	r2, r2, #8
 8000d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d20:	e013      	b.n	8000d4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d22:	f7ff fe7b 	bl	8000a1c <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d90c      	bls.n	8000d4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2220      	movs	r2, #32
 8000d34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e015      	b.n	8000d76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e4      	bne.n	8000d22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d5c:	223f      	movs	r2, #63	@ 0x3f
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e00c      	b.n	8000db6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2205      	movs	r2, #5
 8000da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e159      	b.n	8001094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8148 	bne.w	800108e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a2 	beq.w	800108e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b57      	ldr	r3, [pc, #348]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a56      	ldr	r2, [pc, #344]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b54      	ldr	r3, [pc, #336]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a52      	ldr	r2, [pc, #328]	@ (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	@ (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	@ (80010b8 <HAL_GPIO_Init+0x2f4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fe>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	@ (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x1f6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <HAL_GPIO_Init+0x300>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x1f2>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a2f      	ldr	r2, [pc, #188]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a24      	ldr	r2, [pc, #144]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1a      	ldr	r2, [pc, #104]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f aea2 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e101      	b.n	80012e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d106      	bne.n	80010fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f006 fba1 	bl	8007840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800110c:	d102      	bne.n	8001114 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 ffee 	bl	80040fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7c1a      	ldrb	r2, [r3, #16]
 8001126:	f88d 2000 	strb.w	r2, [sp]
 800112a:	3304      	adds	r3, #4
 800112c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112e:	f002 fecd 	bl	8003ecc <USB_CoreInit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0ce      	b.n	80012e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ffe6 	bl	800411c <USB_SetCurrentMode>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0bf      	b.n	80012e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e04a      	b.n	80011fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3315      	adds	r3, #21
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	3314      	adds	r3, #20
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	b298      	uxth	r0, r3
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	332e      	adds	r3, #46	@ 0x2e
 80011a4:	4602      	mov	r2, r0
 80011a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3318      	adds	r3, #24
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	331c      	adds	r3, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3320      	adds	r3, #32
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	3324      	adds	r3, #36	@ 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	3301      	adds	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3af      	bcc.n	8001168 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e044      	b.n	8001298 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3b5      	bcc.n	800120e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7c1a      	ldrb	r2, [r3, #16]
 80012aa:	f88d 2000 	strb.w	r2, [sp]
 80012ae:	3304      	adds	r3, #4
 80012b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b2:	f002 ff7f 	bl	80041b4 <USB_DevInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00c      	b.n	80012e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 ffc9 	bl	8005272 <USB_DevDisconnect>

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_PCD_Start+0x1c>
 8001302:	2302      	movs	r3, #2
 8001304:	e022      	b.n	800134c <HAL_PCD_Start+0x62>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800131e:	2b01      	cmp	r3, #1
 8001320:	d105      	bne.n	800132e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001326:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fed0 	bl	80040d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 ff77 	bl	8005230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08d      	sub	sp, #52	@ 0x34
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f004 f835 	bl	80053da <USB_GetMode>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 848c 	bne.w	8001c90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f003 ff99 	bl	80052b4 <USB_ReadInterrupts>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8482 	beq.w	8001c8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 ff86 	bl	80052b4 <USB_ReadInterrupts>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d107      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f002 0202 	and.w	r2, r2, #2
 80013c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 ff74 	bl	80052b4 <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d161      	bne.n	800149a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0210 	bic.w	r2, r2, #16
 80013e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f003 020f 	and.w	r2, r3, #15
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	3304      	adds	r3, #4
 8001404:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	0c5b      	lsrs	r3, r3, #17
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	2b02      	cmp	r3, #2
 8001410:	d124      	bne.n	800145c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d035      	beq.n	800148a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	6a38      	ldr	r0, [r7, #32]
 8001432:	f003 fdab 	bl	8004f8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001442:	441a      	add	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001454:	441a      	add	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	e016      	b.n	800148a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	0c5b      	lsrs	r3, r3, #17
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	2b06      	cmp	r3, #6
 8001466:	d110      	bne.n	800148a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800146e:	2208      	movs	r2, #8
 8001470:	4619      	mov	r1, r3
 8001472:	6a38      	ldr	r0, [r7, #32]
 8001474:	f003 fd8a 	bl	8004f8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0210 	orr.w	r2, r2, #16
 8001498:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 ff08 	bl	80052b4 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80014ae:	f040 80a7 	bne.w	8001600 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 ff0d 	bl	80052da <USB_ReadDevAllOutEpInterrupt>
 80014c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80014c2:	e099      	b.n	80015f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 808e 	beq.w	80015ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 ff31 	bl	8005342 <USB_ReadDevOutEPInterrupt>
 80014e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00c      	beq.n	8001506 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f8:	461a      	mov	r2, r3
 80014fa:	2301      	movs	r3, #1
 80014fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fea3 	bl	800224c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	2308      	movs	r3, #8
 8001520:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 ff79 	bl	800241c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2310      	movs	r3, #16
 8001544:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d030      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001558:	2b80      	cmp	r3, #128	@ 0x80
 800155a:	d109      	bne.n	8001570 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	78db      	ldrb	r3, [r3, #3]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2200      	movs	r2, #0
 8001592:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f006 fa4c 	bl	8007a38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ac:	461a      	mov	r2, r3
 80015ae:	2302      	movs	r3, #2
 80015b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c8:	461a      	mov	r2, r3
 80015ca:	2320      	movs	r3, #32
 80015cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015e4:	461a      	mov	r2, r3
 80015e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f af62 	bne.w	80014c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fe55 	bl	80052b4 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001614:	f040 80db 	bne.w	80017ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fe76 	bl	800530e <USB_ReadDevAllInEpInterrupt>
 8001622:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001628:	e0cd      	b.n	80017c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80c2 	beq.w	80017ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fe9c 	bl	800537e <USB_ReadDevInEPInterrupt>
 8001646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d057      	beq.n	8001702 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	69f9      	ldr	r1, [r7, #28]
 800166e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001672:	4013      	ands	r3, r2
 8001674:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001682:	461a      	mov	r2, r3
 8001684:	2301      	movs	r3, #1
 8001686:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	799b      	ldrb	r3, [r3, #6]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d132      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3320      	adds	r3, #32
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4403      	add	r3, r0
 80016b0:	331c      	adds	r3, #28
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4419      	add	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4403      	add	r3, r0
 80016c4:	3320      	adds	r3, #32
 80016c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d113      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x3a2>
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3324      	adds	r3, #36	@ 0x24
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016ee:	461a      	mov	r2, r3
 80016f0:	2101      	movs	r1, #1
 80016f2:	f003 fea3 	bl	800543c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f006 f920 	bl	8007942 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	4413      	add	r3, r2
 8001714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001718:	461a      	mov	r2, r3
 800171a:	2308      	movs	r3, #8
 800171c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001734:	461a      	mov	r2, r3
 8001736:	2310      	movs	r3, #16
 8001738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	4413      	add	r3, r2
 800174c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001750:	461a      	mov	r2, r3
 8001752:	2340      	movs	r3, #64	@ 0x40
 8001754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001762:	6a38      	ldr	r0, [r7, #32]
 8001764:	f002 fe8a 	bl	800447c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3310      	adds	r3, #16
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2200      	movs	r2, #0
 8001788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f006 f963 	bl	8007a5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017a2:	461a      	mov	r2, r3
 80017a4:	2302      	movs	r3, #2
 80017a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fcbd 	bl	8002134 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f47f af2e 	bne.w	800162a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fd6e 	bl	80052b4 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017e2:	d122      	bne.n	800182a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fea3 	bl	8002558 <HAL_PCDEx_LPM_Callback>
 8001812:	e002      	b.n	800181a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f006 f901 	bl	8007a1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fd40 	bl	80052b4 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800183a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800183e:	d112      	bne.n	8001866 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f006 f8bd 	bl	80079d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001864:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fd22 	bl	80052b4 <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800187a:	f040 80b7 	bne.w	80019ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2110      	movs	r1, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fdef 	bl	800447c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018a2:	e046      	b.n	8001932 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018b0:	461a      	mov	r2, r3
 80018b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c8:	0151      	lsls	r1, r2, #5
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	440a      	add	r2, r1
 80018ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e4:	461a      	mov	r2, r3
 80018e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fc:	0151      	lsls	r1, r2, #5
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	440a      	add	r2, r1
 8001902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800190a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191c:	0151      	lsls	r1, r2, #5
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	440a      	add	r2, r1
 8001922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800192a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192e:	3301      	adds	r3, #1
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193a:	4293      	cmp	r3, r2
 800193c:	d3b2      	bcc.n	80018a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800194c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001950:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7bdb      	ldrb	r3, [r3, #15]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196a:	f043 030b 	orr.w	r3, r3, #11
 800196e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001980:	f043 030b 	orr.w	r3, r3, #11
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	e015      	b.n	80019b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001996:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800199a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800199e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ae:	f043 030b 	orr.w	r3, r3, #11
 80019b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019d6:	461a      	mov	r2, r3
 80019d8:	f003 fd30 	bl	800543c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fc5f 	bl	80052b4 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a00:	d123      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fcf5 	bl	80053f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fdac 	bl	800456e <USB_GetDevSpeed>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681c      	ldr	r4, [r3, #0]
 8001a22:	f001 f9c9 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8001a26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f002 fab0 	bl	8003f94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f005 ffac 	bl	8007992 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fc30 	bl	80052b4 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d10a      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f005 ff89 	bl	8007976 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f002 0208 	and.w	r2, r2, #8
 8001a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fc1b 	bl	80052b4 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a84:	2b80      	cmp	r3, #128	@ 0x80
 8001a86:	d123      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e014      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fb0a 	bl	80020d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d3e4      	bcc.n	8001a9a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fbed 	bl	80052b4 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ae4:	d13c      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	e02b      	b.n	8001b44 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3318      	adds	r3, #24
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d115      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da12      	bge.n	8001b3e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3317      	adds	r3, #23
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 faca 	bl	80020d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d3cd      	bcc.n	8001aec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fba5 	bl	80052b4 <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b74:	d156      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b76:	2301      	movs	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7a:	e045      	b.n	8001c08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d12e      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da2b      	bge.n	8001c02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001bb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d121      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfe:	6053      	str	r3, [r2, #4]
            break;
 8001c00:	e008      	b.n	8001c14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	3301      	adds	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d3b3      	bcc.n	8001b7c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fb43 	bl	80052b4 <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c38:	d10a      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 ff20 	bl	8007a80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fb2d 	bl	80052b4 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d115      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f005 ff10 	bl	8007a9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	e000      	b.n	8001c90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c8e:	bf00      	nop
    }
  }
}
 8001c90:	3734      	adds	r7, #52	@ 0x34
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}

08001c96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_SetAddress+0x1a>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e012      	b.n	8001cd6 <HAL_PCD_SetAddress+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fa8c 	bl	80051e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	4611      	mov	r1, r2
 8001cea:	461a      	mov	r2, r3
 8001cec:	4603      	mov	r3, r0
 8001cee:	70fb      	strb	r3, [r7, #3]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	803b      	strh	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da0f      	bge.n	8001d24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3310      	adds	r3, #16
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	e00f      	b.n	8001d44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d50:	883b      	ldrh	r3, [r7, #0]
 8001d52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	78ba      	ldrb	r2, [r7, #2]
 8001d5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d102      	bne.n	8001d7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Open+0xae>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Open+0xcc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fc0c 	bl	80045b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da0f      	bge.n	8001de6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	3310      	adds	r3, #16
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3304      	adds	r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	705a      	strb	r2, [r3, #1]
 8001de4:	e00f      	b.n	8001e06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_EP_Close+0x6e>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Close+0x8c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fc4a 	bl	80046c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	460b      	mov	r3, r1
 8001e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	799b      	ldrb	r3, [r3, #6]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	f002 fce7 	bl	8004880 <USB_EPStartXfer>

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	799b      	ldrb	r3, [r3, #6]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	799b      	ldrb	r3, [r3, #6]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6979      	ldr	r1, [r7, #20]
 8001f52:	f002 fc95 	bl	8004880 <USB_EPStartXfer>

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	7912      	ldrb	r2, [r2, #4]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e04f      	b.n	800201e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da0f      	bge.n	8001fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 020f 	and.w	r2, r3, #15
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3310      	adds	r3, #16
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	705a      	strb	r2, [r3, #1]
 8001fa4:	e00d      	b.n	8001fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_EP_SetStall+0x82>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e01d      	b.n	800201e <HAL_PCD_EP_SetStall+0xbe>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 f823 	bl	800503c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7999      	ldrb	r1, [r3, #6]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800200e:	461a      	mov	r2, r3
 8002010:	f003 fa14 	bl	800543c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	7912      	ldrb	r2, [r2, #4]
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e042      	b.n	80020ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da0f      	bge.n	800206c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3310      	adds	r3, #16
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e00f      	b.n	800208c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_EP_ClrStall+0x86>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e00e      	b.n	80020ca <HAL_PCD_EP_ClrStall+0xa4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f82c 	bl	8005118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da0c      	bge.n	8002100 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3310      	adds	r3, #16
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e00c      	b.n	800211a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	3304      	adds	r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fe4b 	bl	8004dbc <USB_EPStopXfer>
 8002126:	4603      	mov	r3, r0
 8002128:	72fb      	strb	r3, [r7, #11]

  return ret;
 800212a:	7afb      	ldrb	r3, [r7, #11]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	3310      	adds	r3, #16
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d901      	bls.n	800216c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e06b      	b.n	8002244 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d902      	bls.n	8002188 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3303      	adds	r3, #3
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002190:	e02a      	b.n	80021e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d902      	bls.n	80021ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3303      	adds	r3, #3
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f002 fea0 	bl	8004f10 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d809      	bhi.n	8002212 <PCD_WriteEmptyTxFifo+0xde>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002206:	429a      	cmp	r2, r3
 8002208:	d203      	bcs.n	8002212 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1bf      	bne.n	8002192 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	d811      	bhi.n	8002242 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	43db      	mvns	r3, r3
 8002238:	6939      	ldr	r1, [r7, #16]
 800223a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800223e:	4013      	ands	r3, r2
 8002240:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	333c      	adds	r3, #60	@ 0x3c
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	799b      	ldrb	r3, [r3, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d17b      	bne.n	800237a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4a61      	ldr	r2, [pc, #388]	@ (8002414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	f240 80b9 	bls.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80b3 	beq.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022b4:	6093      	str	r3, [r2, #8]
 80022b6:	e0a7      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	2320      	movs	r3, #32
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	e098      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8093 	bne.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d90f      	bls.n	800230a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e07e      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	0159      	lsls	r1, r3, #5
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	440b      	add	r3, r1
 800232c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	f003 f870 	bl	800543c <USB_EP0_OutStart>
 800235c:	e006      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f005 faca 	bl	800790c <HAL_PCD_DataOutStageCallback>
 8002378:	e046      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d124      	bne.n	80023cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	e032      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	2320      	movs	r3, #32
 80023bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 faa1 	bl	800790c <HAL_PCD_DataOutStageCallback>
 80023ca:	e01d      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d114      	bne.n	80023fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f4:	461a      	mov	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f003 f820 	bl	800543c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f005 fa82 	bl	800790c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	4f54300a 	.word	0x4f54300a
 8002418:	4f54310a 	.word	0x4f54310a

0800241c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	333c      	adds	r3, #60	@ 0x3c
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d90e      	bls.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800246e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f005 fa39 	bl	80078e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d90c      	bls.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	799b      	ldrb	r3, [r3, #6]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f002 ffd2 	bl	800543c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	4f54300a 	.word	0x4f54300a

080024a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
 80024b4:	4613      	mov	r3, r2
 80024b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024c6:	883b      	ldrh	r3, [r7, #0]
 80024c8:	0419      	lsls	r1, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024d4:	e028      	b.n	8002528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e00d      	b.n	8002506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3340      	adds	r3, #64	@ 0x40
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	3b01      	subs	r3, #1
 800250c:	429a      	cmp	r2, r3
 800250e:	d3ec      	bcc.n	80024ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002510:	883b      	ldrh	r3, [r7, #0]
 8002512:	0418      	lsls	r0, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	3b01      	subs	r3, #1
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4302      	orrs	r2, r0
 8002520:	3340      	adds	r3, #64	@ 0x40
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e267      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d075      	beq.n	800267a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800258e:	4b88      	ldr	r3, [pc, #544]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b85      	ldr	r3, [pc, #532]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b82      	ldr	r3, [pc, #520]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	4b7e      	ldr	r3, [pc, #504]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05b      	beq.n	8002678 <HAL_RCC_OscConfig+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d157      	bne.n	8002678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e242      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x74>
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x98>
 80025ee:	4b70      	ldr	r3, [pc, #448]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6f      	ldr	r2, [pc, #444]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6c      	ldr	r2, [pc, #432]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 8002608:	4b69      	ldr	r3, [pc, #420]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a68      	ldr	r2, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b66      	ldr	r3, [pc, #408]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a65      	ldr	r2, [pc, #404]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe f9f8 	bl	8000a1c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe f9f4 	bl	8000a1c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e207      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5b      	ldr	r3, [pc, #364]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xc0>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe f9e4 	bl	8000a1c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe f9e0 	bl	8000a1c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1f3      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0xe8>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c7      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4937      	ldr	r1, [pc, #220]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <HAL_RCC_OscConfig+0x244>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe f999 	bl	8000a1c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe f995 	bl	8000a1c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a8      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4925      	ldr	r1, [pc, #148]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_RCC_OscConfig+0x244>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe f978 	bl	8000a1c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe f974 	bl	8000a1c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e187      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe f958 	bl	8000a1c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe f954 	bl	8000a1c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e167      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x200>
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe f941 	bl	8000a1c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e00e      	b.n	80027bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe f93d 	bl	8000a1c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d907      	bls.n	80027bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e150      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ea      	bne.n	800279e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8097 	beq.w	8002904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b81      	ldr	r3, [pc, #516]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b7d      	ldr	r3, [pc, #500]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a7c      	ldr	r2, [pc, #496]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b7a      	ldr	r3, [pc, #488]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b77      	ldr	r3, [pc, #476]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b74      	ldr	r3, [pc, #464]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a73      	ldr	r2, [pc, #460]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe f8fd 	bl	8000a1c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe f8f9 	bl	8000a1c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e10c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x2ea>
 800284c:	4b64      	ldr	r3, [pc, #400]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a63      	ldr	r2, [pc, #396]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x30c>
 8002862:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a5e      	ldr	r2, [pc, #376]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	4b5c      	ldr	r3, [pc, #368]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a5b      	ldr	r2, [pc, #364]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800287c:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a57      	ldr	r2, [pc, #348]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	4b55      	ldr	r3, [pc, #340]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	4a54      	ldr	r2, [pc, #336]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe f8be 	bl	8000a1c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe f8ba 	bl	8000a1c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0cb      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	4b49      	ldr	r3, [pc, #292]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ee      	beq.n	80028a4 <HAL_RCC_OscConfig+0x334>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7fe f8a8 	bl	8000a1c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f8a4 	bl	8000a1c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0b5      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	4b3e      	ldr	r3, [pc, #248]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a1 	beq.w	8002a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b08      	cmp	r3, #8
 8002918:	d05c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d141      	bne.n	80029a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f878 	bl	8000a1c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe f874 	bl	8000a1c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e087      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	491b      	ldr	r1, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe f84d 	bl	8000a1c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe f849 	bl	8000a1c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e05c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x416>
 80029a4:	e054      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe f836 	bl	8000a1c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe f832 	bl	8000a1c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e045      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x444>
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e038      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_RCC_OscConfig+0x4ec>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d028      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d121      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b68      	ldr	r3, [pc, #416]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d90c      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b65      	ldr	r3, [pc, #404]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e067      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4934      	ldr	r1, [pc, #208]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fd ff64 	bl	8000a1c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fd ff60 	bl	8000a1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d20c      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fec4 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08007f3c 	.word	0x08007f3c
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b090      	sub	sp, #64	@ 0x40
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80a1 	bhi.w	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c64:	e09b      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c6a:	e098      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c94:	2100      	movs	r1, #0
 8002c96:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c98:	fb03 f201 	mul.w	r2, r3, r1
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8002caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cac:	460a      	mov	r2, r1
 8002cae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	61fa      	str	r2, [r7, #28]
 8002cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cc6:	f7fd fa8f 	bl	80001e8 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd2:	e053      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b35      	ldr	r3, [pc, #212]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	2200      	movs	r2, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	617a      	str	r2, [r7, #20]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ce6:	f04f 0b00 	mov.w	fp, #0
 8002cea:	4652      	mov	r2, sl
 8002cec:	465b      	mov	r3, fp
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfc:	0150      	lsls	r0, r2, #5
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ebb2 080a 	subs.w	r8, r2, sl
 8002d06:	eb63 090b 	sbc.w	r9, r3, fp
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d22:	eb63 0509 	sbc.w	r5, r3, r9
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	00eb      	lsls	r3, r5, #3
 8002d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d34:	00e2      	lsls	r2, r4, #3
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	eb14 030a 	adds.w	r3, r4, sl
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	eb45 030b 	adc.w	r3, r5, fp
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	028a      	lsls	r2, r1, #10
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d66:	2200      	movs	r2, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	60fa      	str	r2, [r7, #12]
 8002d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d70:	f7fd fa3a 	bl	80001e8 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3740      	adds	r7, #64	@ 0x40
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	016e3600 	.word	0x016e3600

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000000 	.word	0x20000000

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	08007f4c 	.word	0x08007f4c

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffdc 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0b5b      	lsrs	r3, r3, #13
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	08007f4c 	.word	0x08007f4c

08002e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e042      	b.n	8002eb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fcb2 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	@ 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fdbd 	bl	80039e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d175      	bne.n	8002fcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Transmit+0x2c>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e06e      	b.n	8002fce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2221      	movs	r2, #33	@ 0x21
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002efe:	f7fd fd8d 	bl	8000a1c <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f18:	d108      	bne.n	8002f2c <HAL_UART_Transmit+0x6c>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e003      	b.n	8002f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f34:	e02e      	b.n	8002f94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fb1f 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e03a      	b.n	8002fce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3302      	adds	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	e007      	b.n	8002f86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	3301      	adds	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1cb      	bne.n	8002f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	@ 0x40
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 faeb 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e006      	b.n	8002fce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d112      	bne.n	8003016 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_UART_Receive_IT+0x26>
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e00b      	b.n	8003018 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	461a      	mov	r2, r3
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fb12 	bl	8003636 <UART_Start_Receive_IT>
 8003012:	4603      	mov	r3, r0
 8003014:	e000      	b.n	8003018 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0ba      	sub	sp, #232	@ 0xe8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800305e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10f      	bne.n	8003086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_UART_IRQHandler+0x66>
 8003072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fbf2 	bl	8003868 <UART_Receive_IT>
      return;
 8003084:	e25b      	b.n	800353e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80de 	beq.w	800324c <HAL_UART_IRQHandler+0x22c>
 8003090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80d1 	beq.w	800324c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_UART_IRQHandler+0xae>
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xd2>
 80030da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0xf6>
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d011      	beq.n	8003146 <HAL_UART_IRQHandler+0x126>
 8003122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 81f2 	beq.w	8003534 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_UART_IRQHandler+0x14e>
 800315c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fb7d 	bl	8003868 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_UART_IRQHandler+0x17a>
 8003192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04f      	beq.n	800323a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa85 	bl	80036aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d141      	bne.n	8003232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1d9      	bne.n	80031ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d013      	beq.n	800322a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	4a7e      	ldr	r2, [pc, #504]	@ (8003400 <HAL_UART_IRQHandler+0x3e0>)
 8003208:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd fdb5 	bl	8000d7e <HAL_DMA_Abort_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003224:	4610      	mov	r0, r2
 8003226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00e      	b.n	8003248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f994 	bl	8003558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00a      	b.n	8003248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f990 	bl	8003558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e006      	b.n	8003248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f98c 	bl	8003558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003246:	e175      	b.n	8003534 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	bf00      	nop
    return;
 800324a:	e173      	b.n	8003534 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 814f 	bne.w	80034f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8148 	beq.w	80034f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8141 	beq.w	80034f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	f040 80b6 	bne.w	8003404 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8145 	beq.w	8003538 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f080 813e 	bcs.w	8003538 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ce:	f000 8088 	beq.w	80033e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800330a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1d9      	bne.n	80032d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3314      	adds	r3, #20
 8003324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800332e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003342:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003346:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800334a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e1      	bne.n	800331e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3314      	adds	r3, #20
 8003360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800336a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800336c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800337e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003380:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003384:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800338c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b2:	f023 0310 	bic.w	r3, r3, #16
 80033b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e3      	bne.n	80033a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fc5e 	bl	8000c9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f8b7 	bl	800356c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033fe:	e09b      	b.n	8003538 <HAL_UART_IRQHandler+0x518>
 8003400:	08003771 	.word	0x08003771
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 808e 	beq.w	800353c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8089 	beq.w	800353c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800343a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800344e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800345c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e3      	bne.n	800342a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	623b      	str	r3, [r7, #32]
   return(result);
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003486:	633a      	str	r2, [r7, #48]	@ 0x30
 8003488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800348c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e3      	bne.n	8003462 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0310 	bic.w	r3, r3, #16
 80034be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034cc:	61fa      	str	r2, [r7, #28]
 80034ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	617b      	str	r3, [r7, #20]
   return(result);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e3      	bne.n	80034a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f83d 	bl	800356c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f2:	e023      	b.n	800353c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_UART_IRQHandler+0x4f4>
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f943 	bl	8003798 <UART_Transmit_IT>
    return;
 8003512:	e014      	b.n	800353e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <HAL_UART_IRQHandler+0x51e>
 8003520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f983 	bl	8003838 <UART_EndTransmit_IT>
    return;
 8003532:	e004      	b.n	800353e <HAL_UART_IRQHandler+0x51e>
    return;
 8003534:	bf00      	nop
 8003536:	e002      	b.n	800353e <HAL_UART_IRQHandler+0x51e>
      return;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_UART_IRQHandler+0x51e>
      return;
 800353c:	bf00      	nop
  }
}
 800353e:	37e8      	adds	r7, #232	@ 0xe8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	e03b      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d037      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fd fa3d 	bl	8000a1c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e03a      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d023      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d020      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	d01d      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d116      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f857 	bl	80036aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2208      	movs	r2, #8
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d0b4      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	4613      	mov	r3, r2
 8003642:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2222      	movs	r2, #34	@ 0x22
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b095      	sub	sp, #84	@ 0x54
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80036d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800370c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	2b01      	cmp	r3, #1
 8003720:	d119      	bne.n	8003756 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	60bb      	str	r3, [r7, #8]
   return(result);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0310 	bic.w	r3, r3, #16
 8003738:	647b      	str	r3, [r7, #68]	@ 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003742:	61ba      	str	r2, [r7, #24]
 8003744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	613b      	str	r3, [r7, #16]
   return(result);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e5      	bne.n	8003722 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003764:	bf00      	nop
 8003766:	3754      	adds	r7, #84	@ 0x54
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fee4 	bl	8003558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b21      	cmp	r3, #33	@ 0x21
 80037aa:	d13e      	bne.n	800382a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d114      	bne.n	80037e0 <UART_Transmit_IT+0x48>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d110      	bne.n	80037e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	621a      	str	r2, [r3, #32]
 80037de:	e008      	b.n	80037f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6211      	str	r1, [r2, #32]
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4619      	mov	r1, r3
 8003800:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003814:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003824:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fe73 	bl	8003544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b22      	cmp	r3, #34	@ 0x22
 800387a:	f040 80ae 	bne.w	80039da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003886:	d117      	bne.n	80038b8 <UART_Receive_IT+0x50>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d113      	bne.n	80038b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b6:	e026      	b.n	8003906 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ca:	d007      	beq.n	80038dc <UART_Receive_IT+0x74>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <UART_Receive_IT+0x82>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e008      	b.n	80038fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4619      	mov	r1, r3
 8003914:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003916:	2b00      	cmp	r3, #0
 8003918:	d15d      	bne.n	80039d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0220 	bic.w	r2, r2, #32
 8003928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	2b01      	cmp	r3, #1
 800395e:	d135      	bne.n	80039cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f023 0310 	bic.w	r3, r3, #16
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	623a      	str	r2, [r7, #32]
 8003988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	61bb      	str	r3, [r7, #24]
   return(result);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d10a      	bne.n	80039be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fdd1 	bl	800356c <HAL_UARTEx_RxEventCallback>
 80039ca:	e002      	b.n	80039d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fc fe55 	bl	800067c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e002      	b.n	80039dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3730      	adds	r7, #48	@ 0x30
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e8:	b0c0      	sub	sp, #256	@ 0x100
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	68d9      	ldr	r1, [r3, #12]
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	ea40 0301 	orr.w	r3, r0, r1
 8003a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a3c:	f021 010c 	bic.w	r1, r1, #12
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5e:	6999      	ldr	r1, [r3, #24]
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	ea40 0301 	orr.w	r3, r0, r1
 8003a6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b8f      	ldr	r3, [pc, #572]	@ (8003cb0 <UART_SetConfig+0x2cc>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d005      	beq.n	8003a84 <UART_SetConfig+0xa0>
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb4 <UART_SetConfig+0x2d0>)
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d104      	bne.n	8003a8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff f9b8 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003a88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a8c:	e003      	b.n	8003a96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8e:	f7ff f99f 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003a92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	f040 810c 	bne.w	8003cbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ab2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	1891      	adds	r1, r2, r2
 8003abc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003abe:	415b      	adcs	r3, r3
 8003ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	eb12 0801 	adds.w	r8, r2, r1
 8003acc:	4629      	mov	r1, r5
 8003ace:	eb43 0901 	adc.w	r9, r3, r1
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ae6:	4690      	mov	r8, r2
 8003ae8:	4699      	mov	r9, r3
 8003aea:	4623      	mov	r3, r4
 8003aec:	eb18 0303 	adds.w	r3, r8, r3
 8003af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003af4:	462b      	mov	r3, r5
 8003af6:	eb49 0303 	adc.w	r3, r9, r3
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b12:	460b      	mov	r3, r1
 8003b14:	18db      	adds	r3, r3, r3
 8003b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b18:	4613      	mov	r3, r2
 8003b1a:	eb42 0303 	adc.w	r3, r2, r3
 8003b1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b28:	f7fc fb5e 	bl	80001e8 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4b61      	ldr	r3, [pc, #388]	@ (8003cb8 <UART_SetConfig+0x2d4>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	011c      	lsls	r4, r3, #4
 8003b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b54:	415b      	adcs	r3, r3
 8003b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb43 0b01 	adc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b7c:	4692      	mov	sl, r2
 8003b7e:	469b      	mov	fp, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	eb1a 0303 	adds.w	r3, sl, r3
 8003b86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ba0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ba4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	18db      	adds	r3, r3, r3
 8003bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bae:	4613      	mov	r3, r2
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bbe:	f7fc fb13 	bl	80001e8 <__aeabi_uldivmod>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <UART_SetConfig+0x2d4>)
 8003bca:	fba3 2301 	umull	r2, r3, r3, r1
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2264      	movs	r2, #100	@ 0x64
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	1acb      	subs	r3, r1, r3
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <UART_SetConfig+0x2d4>)
 8003be0:	fba3 2302 	umull	r2, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bec:	441c      	add	r4, r3
 8003bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	1891      	adds	r1, r2, r2
 8003c06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c08:	415b      	adcs	r3, r3
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c10:	4641      	mov	r1, r8
 8003c12:	1851      	adds	r1, r2, r1
 8003c14:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c16:	4649      	mov	r1, r9
 8003c18:	414b      	adcs	r3, r1
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c28:	4659      	mov	r1, fp
 8003c2a:	00cb      	lsls	r3, r1, #3
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c32:	4651      	mov	r1, sl
 8003c34:	00ca      	lsls	r2, r1, #3
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c44:	464b      	mov	r3, r9
 8003c46:	460a      	mov	r2, r1
 8003c48:	eb42 0303 	adc.w	r3, r2, r3
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c64:	460b      	mov	r3, r1
 8003c66:	18db      	adds	r3, r3, r3
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	eb42 0303 	adc.w	r3, r2, r3
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c7a:	f7fc fab5 	bl	80001e8 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <UART_SetConfig+0x2d4>)
 8003c84:	fba3 1302 	umull	r1, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2164      	movs	r1, #100	@ 0x64
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	3332      	adds	r3, #50	@ 0x32
 8003c96:	4a08      	ldr	r2, [pc, #32]	@ (8003cb8 <UART_SetConfig+0x2d4>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	f003 0207 	and.w	r2, r3, #7
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4422      	add	r2, r4
 8003caa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cac:	e106      	b.n	8003ebc <UART_SetConfig+0x4d8>
 8003cae:	bf00      	nop
 8003cb0:	40011000 	.word	0x40011000
 8003cb4:	40011400 	.word	0x40011400
 8003cb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	1891      	adds	r1, r2, r2
 8003cd4:	6239      	str	r1, [r7, #32]
 8003cd6:	415b      	adcs	r3, r3
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cde:	4641      	mov	r1, r8
 8003ce0:	1854      	adds	r4, r2, r1
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	eb43 0501 	adc.w	r5, r3, r1
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	00eb      	lsls	r3, r5, #3
 8003cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf6:	00e2      	lsls	r2, r4, #3
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	4643      	mov	r3, r8
 8003cfe:	18e3      	adds	r3, r4, r3
 8003d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d04:	464b      	mov	r3, r9
 8003d06:	eb45 0303 	adc.w	r3, r5, r3
 8003d0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	008b      	lsls	r3, r1, #2
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d34:	4621      	mov	r1, r4
 8003d36:	008a      	lsls	r2, r1, #2
 8003d38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d3c:	f7fc fa54 	bl	80001e8 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b60      	ldr	r3, [pc, #384]	@ (8003ec8 <UART_SetConfig+0x4e4>)
 8003d46:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	011c      	lsls	r4, r3, #4
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	61b9      	str	r1, [r7, #24]
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d70:	4641      	mov	r1, r8
 8003d72:	1851      	adds	r1, r2, r1
 8003d74:	6139      	str	r1, [r7, #16]
 8003d76:	4649      	mov	r1, r9
 8003d78:	414b      	adcs	r3, r1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d88:	4659      	mov	r1, fp
 8003d8a:	00cb      	lsls	r3, r1, #3
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d92:	4651      	mov	r1, sl
 8003d94:	00ca      	lsls	r2, r1, #3
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003da4:	464b      	mov	r3, r9
 8003da6:	460a      	mov	r2, r1
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003dc8:	4649      	mov	r1, r9
 8003dca:	008b      	lsls	r3, r1, #2
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	008a      	lsls	r2, r1, #2
 8003dd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dda:	f7fc fa05 	bl	80001e8 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <UART_SetConfig+0x4e4>)
 8003de6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2264      	movs	r2, #100	@ 0x64
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	1acb      	subs	r3, r1, r3
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	3332      	adds	r3, #50	@ 0x32
 8003df8:	4a33      	ldr	r2, [pc, #204]	@ (8003ec8 <UART_SetConfig+0x4e4>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e04:	441c      	add	r4, r3
 8003e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e24:	4641      	mov	r1, r8
 8003e26:	1851      	adds	r1, r2, r1
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	00cb      	lsls	r3, r1, #3
 8003e40:	4651      	mov	r1, sl
 8003e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e46:	4651      	mov	r1, sl
 8003e48:	00ca      	lsls	r2, r1, #3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4642      	mov	r2, r8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e56:	464b      	mov	r3, r9
 8003e58:	460a      	mov	r2, r1
 8003e5a:	eb42 0303 	adc.w	r3, r2, r3
 8003e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e78:	4649      	mov	r1, r9
 8003e7a:	008b      	lsls	r3, r1, #2
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e82:	4641      	mov	r1, r8
 8003e84:	008a      	lsls	r2, r1, #2
 8003e86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e8a:	f7fc f9ad 	bl	80001e8 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <UART_SetConfig+0x4e4>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	@ 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	3332      	adds	r3, #50	@ 0x32
 8003ea6:	4a08      	ldr	r2, [pc, #32]	@ (8003ec8 <UART_SetConfig+0x4e4>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4422      	add	r2, r4
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec8:	51eb851f 	.word	0x51eb851f

08003ecc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ecc:	b084      	sub	sp, #16
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	f107 001c 	add.w	r0, r7, #28
 8003eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ede:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d123      	bne.n	8003f2e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f001 fae8 	bl	80054f8 <USB_CoreReset>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e01b      	b.n	8003f66 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f001 fadc 	bl	80054f8 <USB_CoreReset>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f58:	e005      	b.n	8003f66 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f66:	7fbb      	ldrb	r3, [r7, #30]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10b      	bne.n	8003f84 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f043 0206 	orr.w	r2, r3, #6
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f90:	b004      	add	sp, #16
 8003f92:	4770      	bx	lr

08003f94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d165      	bne.n	8004074 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a41      	ldr	r2, [pc, #260]	@ (80040b0 <USB_SetTurnaroundTime+0x11c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d906      	bls.n	8003fbe <USB_SetTurnaroundTime+0x2a>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a40      	ldr	r2, [pc, #256]	@ (80040b4 <USB_SetTurnaroundTime+0x120>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d202      	bcs.n	8003fbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fb8:	230f      	movs	r3, #15
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e062      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80040b4 <USB_SetTurnaroundTime+0x120>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d306      	bcc.n	8003fd4 <USB_SetTurnaroundTime+0x40>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80040b8 <USB_SetTurnaroundTime+0x124>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d202      	bcs.n	8003fd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fce:	230e      	movs	r3, #14
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e057      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a38      	ldr	r2, [pc, #224]	@ (80040b8 <USB_SetTurnaroundTime+0x124>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d306      	bcc.n	8003fea <USB_SetTurnaroundTime+0x56>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a37      	ldr	r2, [pc, #220]	@ (80040bc <USB_SetTurnaroundTime+0x128>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d202      	bcs.n	8003fea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fe4:	230d      	movs	r3, #13
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e04c      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <USB_SetTurnaroundTime+0x128>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d306      	bcc.n	8004000 <USB_SetTurnaroundTime+0x6c>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <USB_SetTurnaroundTime+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d802      	bhi.n	8004000 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e041      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <USB_SetTurnaroundTime+0x12c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d906      	bls.n	8004016 <USB_SetTurnaroundTime+0x82>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <USB_SetTurnaroundTime+0x130>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d802      	bhi.n	8004016 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004010:	230b      	movs	r3, #11
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e036      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <USB_SetTurnaroundTime+0x130>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d906      	bls.n	800402c <USB_SetTurnaroundTime+0x98>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a29      	ldr	r2, [pc, #164]	@ (80040c8 <USB_SetTurnaroundTime+0x134>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d802      	bhi.n	800402c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004026:	230a      	movs	r3, #10
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e02b      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a26      	ldr	r2, [pc, #152]	@ (80040c8 <USB_SetTurnaroundTime+0x134>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d906      	bls.n	8004042 <USB_SetTurnaroundTime+0xae>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a25      	ldr	r2, [pc, #148]	@ (80040cc <USB_SetTurnaroundTime+0x138>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d202      	bcs.n	8004042 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800403c:	2309      	movs	r3, #9
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e020      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <USB_SetTurnaroundTime+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d306      	bcc.n	8004058 <USB_SetTurnaroundTime+0xc4>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4a20      	ldr	r2, [pc, #128]	@ (80040d0 <USB_SetTurnaroundTime+0x13c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d802      	bhi.n	8004058 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004052:	2308      	movs	r3, #8
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e015      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <USB_SetTurnaroundTime+0x13c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d906      	bls.n	800406e <USB_SetTurnaroundTime+0xda>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <USB_SetTurnaroundTime+0x140>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d202      	bcs.n	800406e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004068:	2307      	movs	r3, #7
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e00a      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800406e:	2306      	movs	r3, #6
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e007      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800407a:	2309      	movs	r3, #9
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e001      	b.n	8004084 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004080:	2309      	movs	r3, #9
 8004082:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	00d8acbf 	.word	0x00d8acbf
 80040b4:	00e4e1c0 	.word	0x00e4e1c0
 80040b8:	00f42400 	.word	0x00f42400
 80040bc:	01067380 	.word	0x01067380
 80040c0:	011a499f 	.word	0x011a499f
 80040c4:	01312cff 	.word	0x01312cff
 80040c8:	014ca43f 	.word	0x014ca43f
 80040cc:	016e3600 	.word	0x016e3600
 80040d0:	01a6ab1f 	.word	0x01a6ab1f
 80040d4:	01e84800 	.word	0x01e84800

080040d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f043 0201 	orr.w	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 0201 	bic.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d115      	bne.n	800416a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800414a:	200a      	movs	r0, #10
 800414c:	f7fc fc72 	bl	8000a34 <HAL_Delay>
      ms += 10U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	330a      	adds	r3, #10
 8004154:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f001 f93f 	bl	80053da <USB_GetMode>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d01e      	beq.n	80041a0 <USB_SetCurrentMode+0x84>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2bc7      	cmp	r3, #199	@ 0xc7
 8004166:	d9f0      	bls.n	800414a <USB_SetCurrentMode+0x2e>
 8004168:	e01a      	b.n	80041a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d115      	bne.n	800419c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800417c:	200a      	movs	r0, #10
 800417e:	f7fc fc59 	bl	8000a34 <HAL_Delay>
      ms += 10U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	330a      	adds	r3, #10
 8004186:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 f926 	bl	80053da <USB_GetMode>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <USB_SetCurrentMode+0x84>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2bc7      	cmp	r3, #199	@ 0xc7
 8004198:	d9f0      	bls.n	800417c <USB_SetCurrentMode+0x60>
 800419a:	e001      	b.n	80041a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e005      	b.n	80041ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80041a4:	d101      	bne.n	80041aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b4:	b084      	sub	sp, #16
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e009      	b.n	80041e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3340      	adds	r3, #64	@ 0x40
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3301      	adds	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0e      	cmp	r3, #14
 80041ec:	d9f2      	bls.n	80041d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11c      	bne.n	8004230 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
 800422e:	e00b      	b.n	8004248 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004254:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800425c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004264:	2100      	movs	r1, #0
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f968 	bl	800453c <USB_SetDevSpeed>
 800426c:	e008      	b.n	8004280 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800426e:	2101      	movs	r1, #1
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f963 	bl	800453c <USB_SetDevSpeed>
 8004276:	e003      	b.n	8004280 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004278:	2103      	movs	r1, #3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f95e 	bl	800453c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004280:	2110      	movs	r1, #16
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8fa 	bl	800447c <USB_FlushTxFifo>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f924 	bl	80044e0 <USB_FlushRxFifo>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e043      	b.n	8004354 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042e2:	d118      	bne.n	8004316 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f6:	461a      	mov	r2, r3
 80042f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e013      	b.n	8004328 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e008      	b.n	8004328 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2300      	movs	r3, #0
 8004338:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800434c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3301      	adds	r3, #1
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004358:	461a      	mov	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4293      	cmp	r3, r2
 800435e:	d3b5      	bcc.n	80042cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	e043      	b.n	80043ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800437c:	d118      	bne.n	80043b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e013      	b.n	80043c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e008      	b.n	80043c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3301      	adds	r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043f2:	461a      	mov	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d3b5      	bcc.n	8004366 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800440c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800441a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800441c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f043 0210 	orr.w	r2, r3, #16
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <USB_DevInit+0x2c4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800443c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f043 0208 	orr.w	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004450:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004474:	b004      	add	sp, #16
 8004476:	4770      	bx	lr
 8004478:	803c3800 	.word	0x803c3800

0800447c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004496:	d901      	bls.n	800449c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e01b      	b.n	80044d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	daf2      	bge.n	800448a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	019b      	lsls	r3, r3, #6
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044c0:	d901      	bls.n	80044c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e006      	b.n	80044d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d0f0      	beq.n	80044b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044f8:	d901      	bls.n	80044fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e018      	b.n	8004530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	daf2      	bge.n	80044ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2210      	movs	r2, #16
 800450e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800451c:	d901      	bls.n	8004522 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e006      	b.n	8004530 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d0f0      	beq.n	8004510 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
 8004592:	e00a      	b.n	80045aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d002      	beq.n	80045a0 <USB_GetDevSpeed+0x32>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d102      	bne.n	80045a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045a0:	2302      	movs	r3, #2
 80045a2:	75fb      	strb	r3, [r7, #23]
 80045a4:	e001      	b.n	80045aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045a6:	230f      	movs	r3, #15
 80045a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d13a      	bne.n	800464a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d155      	bne.n	80046b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	791b      	ldrb	r3, [r3, #4]
 8004626:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	059b      	lsls	r3, r3, #22
 800462e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004630:	4313      	orrs	r3, r2
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e036      	b.n	80046b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11a      	bne.n	80046b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800469e:	430b      	orrs	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d161      	bne.n	80047a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046fa:	d11f      	bne.n	800473c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004716:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800471a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004736:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800473a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800475c:	4013      	ands	r3, r2
 800475e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	b29b      	uxth	r3, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004780:	4013      	ands	r3, r2
 8004782:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0159      	lsls	r1, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	440b      	add	r3, r1
 800479a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479e:	4619      	mov	r1, r3
 80047a0:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <USB_DeactivateEndpoint+0x1b0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
 80047a6:	e060      	b.n	800486a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047be:	d11f      	bne.n	8004800 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80047de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	43db      	mvns	r3, r3
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004820:	4013      	ands	r3, r2
 8004822:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	43db      	mvns	r3, r3
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004844:	4013      	ands	r3, r2
 8004846:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0159      	lsls	r1, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	440b      	add	r3, r1
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	4619      	mov	r1, r3
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <USB_DeactivateEndpoint+0x1b4>)
 8004866:	4013      	ands	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	ec337800 	.word	0xec337800
 800487c:	eff37800 	.word	0xeff37800

08004880 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	@ 0x28
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b01      	cmp	r3, #1
 800489e:	f040 817f 	bne.w	8004ba0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d132      	bne.n	8004910 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004908:	0cdb      	lsrs	r3, r3, #19
 800490a:	04db      	lsls	r3, r3, #19
 800490c:	6113      	str	r3, [r2, #16]
 800490e:	e097      	b.n	8004a40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800492a:	0cdb      	lsrs	r3, r3, #19
 800492c:	04db      	lsls	r3, r3, #19
 800492e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800494a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800494e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004952:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11a      	bne.n	8004990 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	d903      	bls.n	800496e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800498c:	6113      	str	r3, [r2, #16]
 800498e:	e044      	b.n	8004a1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4413      	add	r3, r2
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	8afb      	ldrh	r3, [r7, #22]
 80049b6:	04d9      	lsls	r1, r3, #19
 80049b8:	4ba4      	ldr	r3, [pc, #656]	@ (8004c4c <USB_EPStartXfer+0x3cc>)
 80049ba:	400b      	ands	r3, r1
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	0148      	lsls	r0, r1, #5
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	4401      	add	r1, r0
 80049c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	791b      	ldrb	r3, [r3, #4]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d122      	bne.n	8004a1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80049f2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	8afb      	ldrh	r3, [r7, #22]
 8004a04:	075b      	lsls	r3, r3, #29
 8004a06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	0148      	lsls	r0, r1, #5
 8004a0e:	69f9      	ldr	r1, [r7, #28]
 8004a10:	4401      	add	r1, r0
 8004a12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a16:	4313      	orrs	r3, r2
 8004a18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	69b9      	ldr	r1, [r7, #24]
 8004a32:	0148      	lsls	r0, r1, #5
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	4401      	add	r1, r0
 8004a38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d14b      	bne.n	8004ade <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d128      	bne.n	8004abc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d110      	bne.n	8004a9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00f      	b.n	8004abc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e166      	b.n	8004dac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004afc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	791b      	ldrb	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d015      	beq.n	8004b32 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 814e 	beq.w	8004dac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004b30:	e13c      	b.n	8004dac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d110      	bne.n	8004b64 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00f      	b.n	8004b84 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	68d9      	ldr	r1, [r3, #12]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	b298      	uxth	r0, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4603      	mov	r3, r0
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f9b9 	bl	8004f10 <USB_WritePacket>
 8004b9e:	e105      	b.n	8004dac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bba:	0cdb      	lsrs	r3, r3, #19
 8004bbc:	04db      	lsls	r3, r3, #19
 8004bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004be2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d132      	bne.n	8004c50 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	0148      	lsls	r0, r1, #5
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	4401      	add	r1, r0
 8004c20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c46:	6113      	str	r3, [r2, #16]
 8004c48:	e062      	b.n	8004d10 <USB_EPStartXfer+0x490>
 8004c4a:	bf00      	nop
 8004c4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d123      	bne.n	8004ca0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	0148      	lsls	r0, r1, #5
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	4401      	add	r1, r0
 8004c76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c9c:	6113      	str	r3, [r2, #16]
 8004c9e:	e037      	b.n	8004d10 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	8afa      	ldrh	r2, [r7, #22]
 8004cbc:	fb03 f202 	mul.w	r2, r3, r2
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	04d9      	lsls	r1, r3, #19
 8004cd6:	4b38      	ldr	r3, [pc, #224]	@ (8004db8 <USB_EPStartXfer+0x538>)
 8004cd8:	400b      	ands	r3, r1
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	0148      	lsls	r0, r1, #5
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	4401      	add	r1, r0
 8004ce2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	0148      	lsls	r0, r1, #5
 8004d04:	69f9      	ldr	r1, [r7, #28]
 8004d06:	4401      	add	r1, r0
 8004d08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10d      	bne.n	8004d32 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68d9      	ldr	r1, [r3, #12]
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2e:	460a      	mov	r2, r1
 8004d30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	791b      	ldrb	r3, [r3, #4]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d128      	bne.n	8004d8c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d110      	bne.n	8004d6c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00f      	b.n	8004d8c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	1ff80000 	.word	0x1ff80000

08004dbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d14a      	bne.n	8004e70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df2:	f040 8086 	bne.w	8004f02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d902      	bls.n	8004e54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
          break;
 8004e52:	e056      	b.n	8004f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6c:	d0e7      	beq.n	8004e3e <USB_EPStopXfer+0x82>
 8004e6e:	e048      	b.n	8004f02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e88:	d13b      	bne.n	8004f02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004eac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d902      	bls.n	8004ee8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ee6:	e00c      	b.n	8004f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f00:	d0e7      	beq.n	8004ed2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	460b      	mov	r3, r1
 8004f20:	71fb      	strb	r3, [r7, #7]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d123      	bne.n	8004f7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f36:	88bb      	ldrh	r3, [r7, #4]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e018      	b.n	8004f76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	031a      	lsls	r2, r3, #12
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f50:	461a      	mov	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3301      	adds	r3, #1
 8004f62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3e2      	bcc.n	8004f44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3724      	adds	r7, #36	@ 0x24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b08b      	sub	sp, #44	@ 0x2c
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	e014      	b.n	8004fe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	3301      	adds	r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	3301      	adds	r3, #1
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	623b      	str	r3, [r7, #32]
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d3e6      	bcc.n	8004fb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fea:	8bfb      	ldrh	r3, [r7, #30]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01e      	beq.n	800502e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	b2da      	uxtb	r2, r3
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	701a      	strb	r2, [r3, #0]
      i++;
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	3301      	adds	r3, #1
 800501a:	623b      	str	r3, [r7, #32]
      pDest++;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	3301      	adds	r3, #1
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005022:	8bfb      	ldrh	r3, [r7, #30]
 8005024:	3b01      	subs	r3, #1
 8005026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005028:	8bfb      	ldrh	r3, [r7, #30]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1ea      	bne.n	8005004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005030:	4618      	mov	r0, r3
 8005032:	372c      	adds	r7, #44	@ 0x2c
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d12c      	bne.n	80050b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	db12      	blt.n	8005090 <USB_EPSetStall+0x54>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00f      	beq.n	8005090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800508a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800508e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e02b      	b.n	800510a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	db12      	blt.n	80050ea <USB_EPSetStall+0xae>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00f      	beq.n	80050ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005104:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d128      	bne.n	8005186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800514e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	791b      	ldrb	r3, [r3, #4]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d003      	beq.n	8005164 <USB_EPClearStall+0x4c>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	791b      	ldrb	r3, [r3, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d138      	bne.n	80051d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800517e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e027      	b.n	80051d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	791b      	ldrb	r3, [r3, #4]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d003      	beq.n	80051b6 <USB_EPClearStall+0x9e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d10f      	bne.n	80051d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005202:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525e:	f023 0302 	bic.w	r3, r3, #2
 8005262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800528c:	f023 0303 	bic.w	r3, r3, #3
 8005290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0c1b      	lsrs	r3, r3, #16
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	b29b      	uxth	r3, r3
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005370:	68bb      	ldr	r3, [r7, #8]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4013      	ands	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053cc:	68bb      	ldr	r3, [r7, #8]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0301 	and.w	r3, r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005410:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005414:	f023 0307 	bic.w	r3, r3, #7
 8005418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	460b      	mov	r3, r1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	333c      	adds	r3, #60	@ 0x3c
 8005452:	3304      	adds	r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4a26      	ldr	r2, [pc, #152]	@ (80054f4 <USB_EP0_OutStart+0xb8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d90a      	bls.n	8005476 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800546c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005470:	d101      	bne.n	8005476 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e037      	b.n	80054e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	2300      	movs	r3, #0
 8005480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a4:	f043 0318 	orr.w	r3, r3, #24
 80054a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80054bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054be:	7afb      	ldrb	r3, [r7, #11]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10f      	bne.n	80054e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ca:	461a      	mov	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80054e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	4f54300a 	.word	0x4f54300a

080054f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005510:	d901      	bls.n	8005516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e01b      	b.n	800554e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	daf2      	bge.n	8005504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3301      	adds	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800553a:	d901      	bls.n	8005540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d0f0      	beq.n	800552e <USB_CoreReset+0x36>

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005568:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800556c:	f002 fc2e 	bl	8007dcc <USBD_static_malloc>
 8005570:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	32b0      	adds	r2, #176	@ 0xb0
 8005582:	2100      	movs	r1, #0
 8005584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005588:	2302      	movs	r3, #2
 800558a:	e0d4      	b.n	8005736 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800558c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005590:	2100      	movs	r1, #0
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f002 fc5e 	bl	8007e54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32b0      	adds	r2, #176	@ 0xb0
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	32b0      	adds	r2, #176	@ 0xb0
 80055b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7c1b      	ldrb	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d138      	bne.n	8005636 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005740 <USBD_CDC_Init+0x1e4>)
 80055c6:	7819      	ldrb	r1, [r3, #0]
 80055c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055cc:	2202      	movs	r2, #2
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f002 fad9 	bl	8007b86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005740 <USBD_CDC_Init+0x1e4>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3324      	adds	r3, #36	@ 0x24
 80055ea:	2201      	movs	r2, #1
 80055ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055ee:	4b55      	ldr	r3, [pc, #340]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 80055f0:	7819      	ldrb	r1, [r3, #0]
 80055f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055f6:	2202      	movs	r2, #2
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f002 fac4 	bl	8007b86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055fe:	4b51      	ldr	r3, [pc, #324]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005616:	2201      	movs	r2, #1
 8005618:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800561a:	4b4b      	ldr	r3, [pc, #300]	@ (8005748 <USBD_CDC_Init+0x1ec>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3326      	adds	r3, #38	@ 0x26
 8005630:	2210      	movs	r2, #16
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e035      	b.n	80056a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005636:	4b42      	ldr	r3, [pc, #264]	@ (8005740 <USBD_CDC_Init+0x1e4>)
 8005638:	7819      	ldrb	r1, [r3, #0]
 800563a:	2340      	movs	r3, #64	@ 0x40
 800563c:	2202      	movs	r2, #2
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f002 faa1 	bl	8007b86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005644:	4b3e      	ldr	r3, [pc, #248]	@ (8005740 <USBD_CDC_Init+0x1e4>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3324      	adds	r3, #36	@ 0x24
 800565a:	2201      	movs	r2, #1
 800565c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800565e:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 8005660:	7819      	ldrb	r1, [r3, #0]
 8005662:	2340      	movs	r3, #64	@ 0x40
 8005664:	2202      	movs	r2, #2
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f002 fa8d 	bl	8007b86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800566c:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005684:	2201      	movs	r2, #1
 8005686:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005688:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <USBD_CDC_Init+0x1ec>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3326      	adds	r3, #38	@ 0x26
 800569e:	2210      	movs	r2, #16
 80056a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056a2:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <USBD_CDC_Init+0x1ec>)
 80056a4:	7819      	ldrb	r1, [r3, #0]
 80056a6:	2308      	movs	r3, #8
 80056a8:	2203      	movs	r2, #3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f002 fa6b 	bl	8007b86 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80056b0:	4b25      	ldr	r3, [pc, #148]	@ (8005748 <USBD_CDC_Init+0x1ec>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3324      	adds	r3, #36	@ 0x24
 80056c6:	2201      	movs	r2, #1
 80056c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	33b0      	adds	r3, #176	@ 0xb0
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005700:	2302      	movs	r3, #2
 8005702:	e018      	b.n	8005736 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7c1b      	ldrb	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800570c:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 800570e:	7819      	ldrb	r1, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 fb22 	bl	8007d64 <USBD_LL_PrepareReceive>
 8005720:	e008      	b.n	8005734 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005722:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <USBD_CDC_Init+0x1e8>)
 8005724:	7819      	ldrb	r1, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800572c:	2340      	movs	r3, #64	@ 0x40
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 fb18 	bl	8007d64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000093 	.word	0x20000093
 8005744:	20000094 	.word	0x20000094
 8005748:	20000095 	.word	0x20000095

0800574c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005758:	4b3a      	ldr	r3, [pc, #232]	@ (8005844 <USBD_CDC_DeInit+0xf8>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f002 fa37 	bl	8007bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005764:	4b37      	ldr	r3, [pc, #220]	@ (8005844 <USBD_CDC_DeInit+0xf8>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3324      	adds	r3, #36	@ 0x24
 800577a:	2200      	movs	r2, #0
 800577c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800577e:	4b32      	ldr	r3, [pc, #200]	@ (8005848 <USBD_CDC_DeInit+0xfc>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f002 fa24 	bl	8007bd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800578a:	4b2f      	ldr	r3, [pc, #188]	@ (8005848 <USBD_CDC_DeInit+0xfc>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057a2:	2200      	movs	r2, #0
 80057a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80057a6:	4b29      	ldr	r3, [pc, #164]	@ (800584c <USBD_CDC_DeInit+0x100>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f002 fa10 	bl	8007bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80057b2:	4b26      	ldr	r3, [pc, #152]	@ (800584c <USBD_CDC_DeInit+0x100>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3324      	adds	r3, #36	@ 0x24
 80057c8:	2200      	movs	r2, #0
 80057ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80057cc:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <USBD_CDC_DeInit+0x100>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3326      	adds	r3, #38	@ 0x26
 80057e2:	2200      	movs	r2, #0
 80057e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32b0      	adds	r2, #176	@ 0xb0
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01f      	beq.n	8005838 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	33b0      	adds	r3, #176	@ 0xb0
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	32b0      	adds	r2, #176	@ 0xb0
 8005816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581a:	4618      	mov	r0, r3
 800581c:	f002 fae4 	bl	8007de8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32b0      	adds	r2, #176	@ 0xb0
 800582a:	2100      	movs	r1, #0
 800582c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000093 	.word	0x20000093
 8005848:	20000094 	.word	0x20000094
 800584c:	20000095 	.word	0x20000095

08005850 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	32b0      	adds	r2, #176	@ 0xb0
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800587c:	2303      	movs	r3, #3
 800587e:	e0bf      	b.n	8005a00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005888:	2b00      	cmp	r3, #0
 800588a:	d050      	beq.n	800592e <USBD_CDC_Setup+0xde>
 800588c:	2b20      	cmp	r3, #32
 800588e:	f040 80af 	bne.w	80059f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d03a      	beq.n	8005910 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	da1b      	bge.n	80058dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	33b0      	adds	r3, #176	@ 0xb0
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80058ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	88d2      	ldrh	r2, [r2, #6]
 80058c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	88db      	ldrh	r3, [r3, #6]
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	bf28      	it	cs
 80058ca:	2307      	movcs	r3, #7
 80058cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	89fa      	ldrh	r2, [r7, #14]
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 fd53 	bl	8007380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80058da:	e090      	b.n	80059fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785a      	ldrb	r2, [r3, #1]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80058ec:	d803      	bhi.n	80058f6 <USBD_CDC_Setup+0xa6>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	88db      	ldrh	r3, [r3, #6]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	e000      	b.n	80058f8 <USBD_CDC_Setup+0xa8>
 80058f6:	2240      	movs	r2, #64	@ 0x40
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005906:	461a      	mov	r2, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fd65 	bl	80073d8 <USBD_CtlPrepareRx>
      break;
 800590e:	e076      	b.n	80059fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	33b0      	adds	r3, #176	@ 0xb0
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	7850      	ldrb	r0, [r2, #1]
 8005926:	2200      	movs	r2, #0
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4798      	blx	r3
      break;
 800592c:	e067      	b.n	80059fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b0b      	cmp	r3, #11
 8005934:	d851      	bhi.n	80059da <USBD_CDC_Setup+0x18a>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <USBD_CDC_Setup+0xec>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800596d 	.word	0x0800596d
 8005940:	080059e9 	.word	0x080059e9
 8005944:	080059db 	.word	0x080059db
 8005948:	080059db 	.word	0x080059db
 800594c:	080059db 	.word	0x080059db
 8005950:	080059db 	.word	0x080059db
 8005954:	080059db 	.word	0x080059db
 8005958:	080059db 	.word	0x080059db
 800595c:	080059db 	.word	0x080059db
 8005960:	080059db 	.word	0x080059db
 8005964:	08005997 	.word	0x08005997
 8005968:	080059c1 	.word	0x080059c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d107      	bne.n	8005988 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005978:	f107 030a 	add.w	r3, r7, #10
 800597c:	2202      	movs	r2, #2
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fcfd 	bl	8007380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005986:	e032      	b.n	80059ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fc7b 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8005990:	2303      	movs	r3, #3
 8005992:	75fb      	strb	r3, [r7, #23]
          break;
 8005994:	e02b      	b.n	80059ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d107      	bne.n	80059b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059a2:	f107 030d 	add.w	r3, r7, #13
 80059a6:	2201      	movs	r2, #1
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fce8 	bl	8007380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059b0:	e01d      	b.n	80059ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 fc66 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	75fb      	strb	r3, [r7, #23]
          break;
 80059be:	e016      	b.n	80059ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d00f      	beq.n	80059ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fc59 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059d8:	e008      	b.n	80059ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fc52 	bl	8007286 <USBD_CtlError>
          ret = USBD_FAIL;
 80059e2:	2303      	movs	r3, #3
 80059e4:	75fb      	strb	r3, [r7, #23]
          break;
 80059e6:	e002      	b.n	80059ee <USBD_CDC_Setup+0x19e>
          break;
 80059e8:	bf00      	nop
 80059ea:	e008      	b.n	80059fe <USBD_CDC_Setup+0x1ae>
          break;
 80059ec:	bf00      	nop
      }
      break;
 80059ee:	e006      	b.n	80059fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 fc47 	bl	8007286 <USBD_CtlError>
      ret = USBD_FAIL;
 80059f8:	2303      	movs	r3, #3
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005a1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	32b0      	adds	r2, #176	@ 0xb0
 8005a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e065      	b.n	8005afe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	32b0      	adds	r2, #176	@ 0xb0
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3318      	adds	r3, #24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02f      	beq.n	8005abc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3318      	adds	r3, #24
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	f003 010f 	and.w	r1, r3, #15
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4403      	add	r3, r0
 8005a84:	331c      	adds	r3, #28
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d112      	bne.n	8005abc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005aae:	78f9      	ldrb	r1, [r7, #3]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 f934 	bl	8007d22 <USBD_LL_Transmit>
 8005aba:	e01f      	b.n	8005afc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	33b0      	adds	r3, #176	@ 0xb0
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	33b0      	adds	r3, #176	@ 0xb0
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	32b0      	adds	r2, #176	@ 0xb0
 8005b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32b0      	adds	r2, #176	@ 0xb0
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e01a      	b.n	8005b6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 f932 	bl	8007da6 <USBD_LL_GetRxDataSize>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	33b0      	adds	r3, #176	@ 0xb0
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	32b0      	adds	r2, #176	@ 0xb0
 8005b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e024      	b.n	8005be2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	33b0      	adds	r3, #176	@ 0xb0
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d019      	beq.n	8005be0 <USBD_CDC_EP0_RxReady+0x6a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005bb2:	2bff      	cmp	r3, #255	@ 0xff
 8005bb4:	d014      	beq.n	8005be0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	33b0      	adds	r3, #176	@ 0xb0
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005bce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	22ff      	movs	r2, #255	@ 0xff
 8005bdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf4:	2182      	movs	r1, #130	@ 0x82
 8005bf6:	4818      	ldr	r0, [pc, #96]	@ (8005c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bf8:	f000 fd0f 	bl	800661a <USBD_GetEpDesc>
 8005bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4815      	ldr	r0, [pc, #84]	@ (8005c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c02:	f000 fd0a 	bl	800661a <USBD_GetEpDesc>
 8005c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c08:	2181      	movs	r1, #129	@ 0x81
 8005c0a:	4813      	ldr	r0, [pc, #76]	@ (8005c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c0c:	f000 fd05 	bl	800661a <USBD_GetEpDesc>
 8005c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c2c:	711a      	strb	r2, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c40:	711a      	strb	r2, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2243      	movs	r2, #67	@ 0x43
 8005c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c4c:	4b02      	ldr	r3, [pc, #8]	@ (8005c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000050 	.word	0x20000050

08005c5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c64:	2182      	movs	r1, #130	@ 0x82
 8005c66:	4818      	ldr	r0, [pc, #96]	@ (8005cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c68:	f000 fcd7 	bl	800661a <USBD_GetEpDesc>
 8005c6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4815      	ldr	r0, [pc, #84]	@ (8005cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c72:	f000 fcd2 	bl	800661a <USBD_GetEpDesc>
 8005c76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c78:	2181      	movs	r1, #129	@ 0x81
 8005c7a:	4813      	ldr	r0, [pc, #76]	@ (8005cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c7c:	f000 fccd 	bl	800661a <USBD_GetEpDesc>
 8005c80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2200      	movs	r2, #0
 8005c98:	711a      	strb	r2, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f042 0202 	orr.w	r2, r2, #2
 8005ca0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	711a      	strb	r2, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f042 0202 	orr.w	r2, r2, #2
 8005cb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2243      	movs	r2, #67	@ 0x43
 8005cba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cbc:	4b02      	ldr	r3, [pc, #8]	@ (8005cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000050 	.word	0x20000050

08005ccc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cd4:	2182      	movs	r1, #130	@ 0x82
 8005cd6:	4818      	ldr	r0, [pc, #96]	@ (8005d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cd8:	f000 fc9f 	bl	800661a <USBD_GetEpDesc>
 8005cdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4815      	ldr	r0, [pc, #84]	@ (8005d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ce2:	f000 fc9a 	bl	800661a <USBD_GetEpDesc>
 8005ce6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ce8:	2181      	movs	r1, #129	@ 0x81
 8005cea:	4813      	ldr	r0, [pc, #76]	@ (8005d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cec:	f000 fc95 	bl	800661a <USBD_GetEpDesc>
 8005cf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d0c:	711a      	strb	r2, [r3, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d006      	beq.n	8005d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d20:	711a      	strb	r2, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2243      	movs	r2, #67	@ 0x43
 8005d2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d2c:	4b02      	ldr	r3, [pc, #8]	@ (8005d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000050 	.word	0x20000050

08005d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	220a      	movs	r2, #10
 8005d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d4a:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	2000000c 	.word	0x2000000c

08005d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e009      	b.n	8005d84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	33b0      	adds	r3, #176	@ 0xb0
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	32b0      	adds	r2, #176	@ 0xb0
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e008      	b.n	8005dc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32b0      	adds	r2, #176	@ 0xb0
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e004      	b.n	8005e02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	32b0      	adds	r2, #176	@ 0xb0
 8005e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32b0      	adds	r2, #176	@ 0xb0
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e018      	b.n	8005e70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7c1b      	ldrb	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e46:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <USBD_CDC_ReceivePacket+0x68>)
 8005e48:	7819      	ldrb	r1, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 ff85 	bl	8007d64 <USBD_LL_PrepareReceive>
 8005e5a:	e008      	b.n	8005e6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <USBD_CDC_ReceivePacket+0x68>)
 8005e5e:	7819      	ldrb	r1, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e66:	2340      	movs	r3, #64	@ 0x40
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 ff7b 	bl	8007d64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000094 	.word	0x20000094

08005e7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e01f      	b.n	8005ed4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	79fa      	ldrb	r2, [r7, #7]
 8005ec6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f001 fdf5 	bl	8007ab8 <USBD_LL_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e025      	b.n	8005f40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32ae      	adds	r2, #174	@ 0xae
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32ae      	adds	r2, #174	@ 0xae
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f107 020e 	add.w	r2, r7, #14
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	4602      	mov	r2, r0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fdfd 	bl	8007b50 <USBD_LL_Start>
 8005f56:	4603      	mov	r3, r0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f90c 	bl	8007212 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b02      	cmp	r3, #2
 800601c:	d01a      	beq.n	8006054 <USBD_LL_SetupStage+0x72>
 800601e:	2b02      	cmp	r3, #2
 8006020:	d822      	bhi.n	8006068 <USBD_LL_SetupStage+0x86>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <USBD_LL_SetupStage+0x4a>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d00a      	beq.n	8006040 <USBD_LL_SetupStage+0x5e>
 800602a:	e01d      	b.n	8006068 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fb63 	bl	8006700 <USBD_StdDevReq>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
      break;
 800603e:	e020      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbcb 	bl	80067e4 <USBD_StdItfReq>
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
      break;
 8006052:	e016      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc2d 	bl	80068bc <USBD_StdEPReq>
 8006062:	4603      	mov	r3, r0
 8006064:	73fb      	strb	r3, [r7, #15]
      break;
 8006066:	e00c      	b.n	8006082 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800606e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006072:	b2db      	uxtb	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fdca 	bl	8007c10 <USBD_LL_StallEP>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	bf00      	nop
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	460b      	mov	r3, r1
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d16e      	bne.n	8006182 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80060aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f040 8098 	bne.w	80061e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d913      	bls.n	80060ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	1ad2      	subs	r2, r2, r3
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4293      	cmp	r3, r2
 80060dc:	bf28      	it	cs
 80060de:	4613      	movcs	r3, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f001 f994 	bl	8007412 <USBD_CtlContinueRx>
 80060ea:	e07d      	b.n	80061e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d014      	beq.n	8006124 <USBD_LL_DataOutStage+0x98>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d81d      	bhi.n	800613a <USBD_LL_DataOutStage+0xae>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <USBD_LL_DataOutStage+0x7c>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <USBD_LL_DataOutStage+0x82>
 8006106:	e018      	b.n	800613a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	75bb      	strb	r3, [r7, #22]
            break;
 800610c:	e018      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006114:	b2db      	uxtb	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa64 	bl	80065e6 <USBD_CoreFindIF>
 800611e:	4603      	mov	r3, r0
 8006120:	75bb      	strb	r3, [r7, #22]
            break;
 8006122:	e00d      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fa66 	bl	8006600 <USBD_CoreFindEP>
 8006134:	4603      	mov	r3, r0
 8006136:	75bb      	strb	r3, [r7, #22]
            break;
 8006138:	e002      	b.n	8006140 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	75bb      	strb	r3, [r7, #22]
            break;
 800613e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006140:	7dbb      	ldrb	r3, [r7, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d119      	bne.n	800617a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d113      	bne.n	800617a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006152:	7dba      	ldrb	r2, [r7, #22]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	32ae      	adds	r2, #174	@ 0xae
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006162:	7dba      	ldrb	r2, [r7, #22]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800616a:	7dba      	ldrb	r2, [r7, #22]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	32ae      	adds	r2, #174	@ 0xae
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f001 f95a 	bl	8007434 <USBD_CtlSendStatus>
 8006180:	e032      	b.n	80061e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006188:	b2db      	uxtb	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fa37 	bl	8006600 <USBD_CoreFindEP>
 8006192:	4603      	mov	r3, r0
 8006194:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006196:	7dbb      	ldrb	r3, [r7, #22]
 8006198:	2bff      	cmp	r3, #255	@ 0xff
 800619a:	d025      	beq.n	80061e8 <USBD_LL_DataOutStage+0x15c>
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d122      	bne.n	80061e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d117      	bne.n	80061de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061ae:	7dba      	ldrb	r2, [r7, #22]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	32ae      	adds	r2, #174	@ 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00f      	beq.n	80061de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061be:	7dba      	ldrb	r2, [r7, #22]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061c6:	7dba      	ldrb	r2, [r7, #22]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	32ae      	adds	r2, #174	@ 0xae
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	7afa      	ldrb	r2, [r7, #11]
 80061d4:	4611      	mov	r1, r2
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	4798      	blx	r3
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	e000      	b.n	80061ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	460b      	mov	r3, r1
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d16f      	bne.n	80062e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3314      	adds	r3, #20
 800620a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006212:	2b02      	cmp	r3, #2
 8006214:	d15a      	bne.n	80062cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	429a      	cmp	r2, r3
 8006220:	d914      	bls.n	800624c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	461a      	mov	r2, r3
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f001 f8bc 	bl	80073b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623e:	2300      	movs	r3, #0
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f001 fd8d 	bl	8007d64 <USBD_LL_PrepareReceive>
 800624a:	e03f      	b.n	80062cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	429a      	cmp	r2, r3
 8006256:	d11c      	bne.n	8006292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006260:	429a      	cmp	r2, r3
 8006262:	d316      	bcc.n	8006292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800626e:	429a      	cmp	r2, r3
 8006270:	d20f      	bcs.n	8006292 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 f89d 	bl	80073b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f001 fd6a 	bl	8007d64 <USBD_LL_PrepareReceive>
 8006290:	e01c      	b.n	80062cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d10f      	bne.n	80062be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062be:	2180      	movs	r1, #128	@ 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f001 fca5 	bl	8007c10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 f8c7 	bl	800745a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03a      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fe42 	bl	8005f60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80062e4:	e032      	b.n	800634c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f985 	bl	8006600 <USBD_CoreFindEP>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	2bff      	cmp	r3, #255	@ 0xff
 80062fe:	d025      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d122      	bne.n	800634c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d11c      	bne.n	800634c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006312:	7dfa      	ldrb	r2, [r7, #23]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	32ae      	adds	r2, #174	@ 0xae
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d014      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006322:	7dfa      	ldrb	r2, [r7, #23]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800632a:	7dfa      	ldrb	r2, [r7, #23]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	32ae      	adds	r2, #174	@ 0xae
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	7afa      	ldrb	r2, [r7, #11]
 8006338:	4611      	mov	r1, r2
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006342:	7dbb      	ldrb	r3, [r7, #22]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006348:	7dbb      	ldrb	r3, [r7, #22]
 800634a:	e000      	b.n	800634e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d014      	beq.n	80063bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	4611      	mov	r1, r2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063bc:	2340      	movs	r3, #64	@ 0x40
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fbdf 	bl	8007b86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d8:	2340      	movs	r3, #64	@ 0x40
 80063da:	2200      	movs	r2, #0
 80063dc:	2180      	movs	r1, #128	@ 0x80
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fbd1 	bl	8007b86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2240      	movs	r2, #64	@ 0x40
 80063ee:	621a      	str	r2, [r3, #32]

  return ret;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b04      	cmp	r3, #4
 800642c:	d006      	beq.n	800643c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006434:	b2da      	uxtb	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b04      	cmp	r3, #4
 8006464:	d106      	bne.n	8006474 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800646c:	b2da      	uxtb	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d110      	bne.n	80064b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	32ae      	adds	r2, #174	@ 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01c      	b.n	800651e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d115      	bne.n	800651c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	@ 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	32ae      	adds	r2, #174	@ 0xae
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	e01c      	b.n	8006582 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d115      	bne.n	8006580 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32ae      	adds	r2, #174	@ 0xae
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32ae      	adds	r2, #174	@ 0xae
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	4611      	mov	r1, r2
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6852      	ldr	r2, [r2, #4]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	4611      	mov	r1, r2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065d8:	2303      	movs	r3, #3
 80065da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800660c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	b29b      	uxth	r3, r3
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	4293      	cmp	r3, r2
 800663e:	d91f      	bls.n	8006680 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006646:	e013      	b.n	8006670 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006648:	f107 030a 	add.w	r3, r7, #10
 800664c:	4619      	mov	r1, r3
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f000 f81b 	bl	800668a <USBD_GetNextDesc>
 8006654:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b05      	cmp	r3, #5
 800665c:	d108      	bne.n	8006670 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	789b      	ldrb	r3, [r3, #2]
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	429a      	cmp	r2, r3
 800666a:	d008      	beq.n	800667e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	b29a      	uxth	r2, r3
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	429a      	cmp	r2, r3
 800667a:	d8e5      	bhi.n	8006648 <USBD_GetEpDesc+0x2e>
 800667c:	e000      	b.n	8006680 <USBD_GetEpDesc+0x66>
          break;
 800667e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006680:	693b      	ldr	r3, [r7, #16]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3301      	adds	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066e0:	8a3b      	ldrh	r3, [r7, #16]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	b21a      	sxth	r2, r3
 80066e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	b21b      	sxth	r3, r3
 80066ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066f0:	89fb      	ldrh	r3, [r7, #14]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d005      	beq.n	8006726 <USBD_StdDevReq+0x26>
 800671a:	2b40      	cmp	r3, #64	@ 0x40
 800671c:	d857      	bhi.n	80067ce <USBD_StdDevReq+0xce>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <USBD_StdDevReq+0x42>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d153      	bne.n	80067ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	@ 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e04a      	b.n	80067d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b09      	cmp	r3, #9
 8006748:	d83b      	bhi.n	80067c2 <USBD_StdDevReq+0xc2>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <USBD_StdDevReq+0x50>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	080067a5 	.word	0x080067a5
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067c3 	.word	0x080067c3
 800675c:	080067af 	.word	0x080067af
 8006760:	080067c3 	.word	0x080067c3
 8006764:	08006783 	.word	0x08006783
 8006768:	08006779 	.word	0x08006779
 800676c:	080067c3 	.word	0x080067c3
 8006770:	0800679b 	.word	0x0800679b
 8006774:	0800678d 	.word	0x0800678d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa3c 	bl	8006bf8 <USBD_GetDescriptor>
          break;
 8006780:	e024      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fba1 	bl	8006ecc <USBD_SetAddress>
          break;
 800678a:	e01f      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fbe0 	bl	8006f54 <USBD_SetConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
          break;
 8006798:	e018      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc83 	bl	80070a8 <USBD_GetConfig>
          break;
 80067a2:	e013      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fcb4 	bl	8007114 <USBD_GetStatus>
          break;
 80067ac:	e00e      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fce3 	bl	800717c <USBD_SetFeature>
          break;
 80067b6:	e009      	b.n	80067cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fd07 	bl	80071ce <USBD_ClrFeature>
          break;
 80067c0:	e004      	b.n	80067cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd5e 	bl	8007286 <USBD_CtlError>
          break;
 80067ca:	bf00      	nop
      }
      break;
 80067cc:	e004      	b.n	80067d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fd58 	bl	8007286 <USBD_CtlError>
      break;
 80067d6:	bf00      	nop
  }

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d005      	beq.n	800680a <USBD_StdItfReq+0x26>
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d852      	bhi.n	80068a8 <USBD_StdItfReq+0xc4>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <USBD_StdItfReq+0x26>
 8006806:	2b20      	cmp	r3, #32
 8006808:	d14e      	bne.n	80068a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	2b02      	cmp	r3, #2
 8006816:	d840      	bhi.n	800689a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	889b      	ldrh	r3, [r3, #4]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	d836      	bhi.n	8006890 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	889b      	ldrh	r3, [r3, #4]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fedb 	bl	80065e6 <USBD_CoreFindIF>
 8006830:	4603      	mov	r3, r0
 8006832:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2bff      	cmp	r3, #255	@ 0xff
 8006838:	d01d      	beq.n	8006876 <USBD_StdItfReq+0x92>
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11a      	bne.n	8006876 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006840:	7bba      	ldrb	r2, [r7, #14]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	32ae      	adds	r2, #174	@ 0xae
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006850:	7bba      	ldrb	r2, [r7, #14]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006858:	7bba      	ldrb	r2, [r7, #14]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	@ 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800686e:	e004      	b.n	800687a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006874:	e001      	b.n	800687a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	88db      	ldrh	r3, [r3, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d110      	bne.n	80068a4 <USBD_StdItfReq+0xc0>
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fdd3 	bl	8007434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800688e:	e009      	b.n	80068a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fcf7 	bl	8007286 <USBD_CtlError>
          break;
 8006898:	e004      	b.n	80068a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fcf2 	bl	8007286 <USBD_CtlError>
          break;
 80068a2:	e000      	b.n	80068a6 <USBD_StdItfReq+0xc2>
          break;
 80068a4:	bf00      	nop
      }
      break;
 80068a6:	e004      	b.n	80068b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fceb 	bl	8007286 <USBD_CtlError>
      break;
 80068b0:	bf00      	nop
  }

  return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	889b      	ldrh	r3, [r3, #4]
 80068ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068d8:	2b40      	cmp	r3, #64	@ 0x40
 80068da:	d007      	beq.n	80068ec <USBD_StdEPReq+0x30>
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	f200 817f 	bhi.w	8006be0 <USBD_StdEPReq+0x324>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02a      	beq.n	800693c <USBD_StdEPReq+0x80>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f040 817a 	bne.w	8006be0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fe85 	bl	8006600 <USBD_CoreFindEP>
 80068f6:	4603      	mov	r3, r0
 80068f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068fa:	7b7b      	ldrb	r3, [r7, #13]
 80068fc:	2bff      	cmp	r3, #255	@ 0xff
 80068fe:	f000 8174 	beq.w	8006bea <USBD_StdEPReq+0x32e>
 8006902:	7b7b      	ldrb	r3, [r7, #13]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 8170 	bne.w	8006bea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800690a:	7b7a      	ldrb	r2, [r7, #13]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006912:	7b7a      	ldrb	r2, [r7, #13]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	32ae      	adds	r2, #174	@ 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8163 	beq.w	8006bea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006924:	7b7a      	ldrb	r2, [r7, #13]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	@ 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800693a:	e156      	b.n	8006bea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d008      	beq.n	8006956 <USBD_StdEPReq+0x9a>
 8006944:	2b03      	cmp	r3, #3
 8006946:	f300 8145 	bgt.w	8006bd4 <USBD_StdEPReq+0x318>
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 809b 	beq.w	8006a86 <USBD_StdEPReq+0x1ca>
 8006950:	2b01      	cmp	r3, #1
 8006952:	d03c      	beq.n	80069ce <USBD_StdEPReq+0x112>
 8006954:	e13e      	b.n	8006bd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d002      	beq.n	8006968 <USBD_StdEPReq+0xac>
 8006962:	2b03      	cmp	r3, #3
 8006964:	d016      	beq.n	8006994 <USBD_StdEPReq+0xd8>
 8006966:	e02c      	b.n	80069c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <USBD_StdEPReq+0xce>
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b80      	cmp	r3, #128	@ 0x80
 8006972:	d00a      	beq.n	800698a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f949 	bl	8007c10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800697e:	2180      	movs	r1, #128	@ 0x80
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f945 	bl	8007c10 <USBD_LL_StallEP>
 8006986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006988:	e020      	b.n	80069cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc7a 	bl	8007286 <USBD_CtlError>
              break;
 8006992:	e01b      	b.n	80069cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10e      	bne.n	80069ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <USBD_StdEPReq+0xfe>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b80      	cmp	r3, #128	@ 0x80
 80069a6:	d008      	beq.n	80069ba <USBD_StdEPReq+0xfe>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	88db      	ldrh	r3, [r3, #6]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f92b 	bl	8007c10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fd3a 	bl	8007434 <USBD_CtlSendStatus>

              break;
 80069c0:	e004      	b.n	80069cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc5e 	bl	8007286 <USBD_CtlError>
              break;
 80069ca:	bf00      	nop
          }
          break;
 80069cc:	e107      	b.n	8006bde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d002      	beq.n	80069e0 <USBD_StdEPReq+0x124>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d016      	beq.n	8006a0c <USBD_StdEPReq+0x150>
 80069de:	e04b      	b.n	8006a78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <USBD_StdEPReq+0x146>
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	2b80      	cmp	r3, #128	@ 0x80
 80069ea:	d00a      	beq.n	8006a02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f90d 	bl	8007c10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069f6:	2180      	movs	r1, #128	@ 0x80
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f909 	bl	8007c10 <USBD_LL_StallEP>
 80069fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a00:	e040      	b.n	8006a84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fc3e 	bl	8007286 <USBD_CtlError>
              break;
 8006a0a:	e03b      	b.n	8006a84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d136      	bne.n	8006a82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f913 	bl	8007c4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd03 	bl	8007434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fde4 	bl	8006600 <USBD_CoreFindEP>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	2bff      	cmp	r3, #255	@ 0xff
 8006a40:	d01f      	beq.n	8006a82 <USBD_StdEPReq+0x1c6>
 8006a42:	7b7b      	ldrb	r3, [r7, #13]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11c      	bne.n	8006a82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a48:	7b7a      	ldrb	r2, [r7, #13]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a50:	7b7a      	ldrb	r2, [r7, #13]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32ae      	adds	r2, #174	@ 0xae
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a60:	7b7a      	ldrb	r2, [r7, #13]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32ae      	adds	r2, #174	@ 0xae
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a76:	e004      	b.n	8006a82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fc03 	bl	8007286 <USBD_CtlError>
              break;
 8006a80:	e000      	b.n	8006a84 <USBD_StdEPReq+0x1c8>
              break;
 8006a82:	bf00      	nop
          }
          break;
 8006a84:	e0ab      	b.n	8006bde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d002      	beq.n	8006a98 <USBD_StdEPReq+0x1dc>
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d032      	beq.n	8006afc <USBD_StdEPReq+0x240>
 8006a96:	e097      	b.n	8006bc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <USBD_StdEPReq+0x1f2>
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b80      	cmp	r3, #128	@ 0x80
 8006aa2:	d004      	beq.n	8006aae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbed 	bl	8007286 <USBD_CtlError>
                break;
 8006aac:	e091      	b.n	8006bd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da0b      	bge.n	8006ace <USBD_StdEPReq+0x212>
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	3310      	adds	r3, #16
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	3304      	adds	r3, #4
 8006acc:	e00b      	b.n	8006ae6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2202      	movs	r2, #2
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc43 	bl	8007380 <USBD_CtlSendData>
              break;
 8006afa:	e06a      	b.n	8006bd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da11      	bge.n	8006b28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3324      	adds	r3, #36	@ 0x24
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d117      	bne.n	8006b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbb0 	bl	8007286 <USBD_CtlError>
                  break;
 8006b26:	e054      	b.n	8006bd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	f003 020f 	and.w	r2, r3, #15
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb9d 	bl	8007286 <USBD_CtlError>
                  break;
 8006b4c:	e041      	b.n	8006bd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da0b      	bge.n	8006b6e <USBD_StdEPReq+0x2b2>
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	3310      	adds	r3, #16
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	e00b      	b.n	8006b86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <USBD_StdEPReq+0x2d8>
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b80      	cmp	r3, #128	@ 0x80
 8006b92:	d103      	bne.n	8006b9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e00e      	b.n	8006bba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f873 	bl	8007c8c <USBD_LL_IsStallEP>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbdd 	bl	8007380 <USBD_CtlSendData>
              break;
 8006bc6:	e004      	b.n	8006bd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fb5b 	bl	8007286 <USBD_CtlError>
              break;
 8006bd0:	bf00      	nop
          }
          break;
 8006bd2:	e004      	b.n	8006bde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb55 	bl	8007286 <USBD_CtlError>
          break;
 8006bdc:	bf00      	nop
      }
      break;
 8006bde:	e005      	b.n	8006bec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fb4f 	bl	8007286 <USBD_CtlError>
      break;
 8006be8:	e000      	b.n	8006bec <USBD_StdEPReq+0x330>
      break;
 8006bea:	bf00      	nop
  }

  return ret;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	f200 8128 	bhi.w	8006e6e <USBD_GetDescriptor+0x276>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <USBD_GetDescriptor+0x2c>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006e6f 	.word	0x08006e6f
 8006c34:	08006e6f 	.word	0x08006e6f
 8006c38:	08006e0f 	.word	0x08006e0f
 8006c3c:	08006e3b 	.word	0x08006e3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	7c12      	ldrb	r2, [r2, #16]
 8006c4c:	f107 0108 	add.w	r1, r7, #8
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	60f8      	str	r0, [r7, #12]
      break;
 8006c56:	e112      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7c1b      	ldrb	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10d      	bne.n	8006c7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	2202      	movs	r2, #2
 8006c78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c7a:	e100      	b.n	8006e7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	f107 0208 	add.w	r2, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	2202      	movs	r2, #2
 8006c94:	701a      	strb	r2, [r3, #0]
      break;
 8006c96:	e0f2      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	f200 80ac 	bhi.w	8006dfc <USBD_GetDescriptor+0x204>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <USBD_GetDescriptor+0xb4>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cc5 	.word	0x08006cc5
 8006cb0:	08006cf9 	.word	0x08006cf9
 8006cb4:	08006d2d 	.word	0x08006d2d
 8006cb8:	08006d61 	.word	0x08006d61
 8006cbc:	08006d95 	.word	0x08006d95
 8006cc0:	08006dc9 	.word	0x08006dc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7c12      	ldrb	r2, [r2, #16]
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce6:	e091      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 facb 	bl	8007286 <USBD_CtlError>
            err++;
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf6:	e089      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1a:	e077      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fab1 	bl	8007286 <USBD_CtlError>
            err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2a:	e06f      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4e:	e05d      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa97 	bl	8007286 <USBD_CtlError>
            err++;
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5e:	e055      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e043      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa7d 	bl	8007286 <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e03b      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	7c12      	ldrb	r2, [r2, #16]
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db6:	e029      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa63 	bl	8007286 <USBD_CtlError>
            err++;
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc6:	e021      	b.n	8006e0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7c12      	ldrb	r2, [r2, #16]
 8006de0:	f107 0108 	add.w	r1, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dea:	e00f      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa49 	bl	8007286 <USBD_CtlError>
            err++;
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	3301      	adds	r3, #1
 8006df8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfa:	e007      	b.n	8006e0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa41 	bl	8007286 <USBD_CtlError>
          err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e037      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1e:	f107 0208 	add.w	r2, r7, #8
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
 8006e26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e28:	e029      	b.n	8006e7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fa2a 	bl	8007286 <USBD_CtlError>
        err++;
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	3301      	adds	r3, #1
 8006e36:	72fb      	strb	r3, [r7, #11]
      break;
 8006e38:	e021      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7c1b      	ldrb	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10d      	bne.n	8006e5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4a:	f107 0208 	add.w	r2, r7, #8
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
 8006e52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	2207      	movs	r2, #7
 8006e5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e5c:	e00f      	b.n	8006e7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa10 	bl	8007286 <USBD_CtlError>
        err++;
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e6c:	e007      	b.n	8006e7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa08 	bl	8007286 <USBD_CtlError>
      err++;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e7c:	bf00      	nop
  }

  if (err != 0U)
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11e      	bne.n	8006ec2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	88db      	ldrh	r3, [r3, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e8c:	893b      	ldrh	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	88da      	ldrh	r2, [r3, #6]
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	bf28      	it	cs
 8006e9c:	4613      	movcs	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ea2:	893b      	ldrh	r3, [r7, #8]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa69 	bl	8007380 <USBD_CtlSendData>
 8006eae:	e009      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9e7 	bl	8007286 <USBD_CtlError>
 8006eb8:	e004      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 faba 	bl	8007434 <USBD_CtlSendStatus>
 8006ec0:	e000      	b.n	8006ec4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ec2:	bf00      	nop
  }
}
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop

08006ecc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	889b      	ldrh	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d131      	bne.n	8006f42 <USBD_SetAddress+0x76>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d12d      	bne.n	8006f42 <USBD_SetAddress+0x76>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eec:	d829      	bhi.n	8006f42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d104      	bne.n	8006f10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9bc 	bl	8007286 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0e:	e01d      	b.n	8006f4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fee1 	bl	8007ce4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa86 	bl	8007434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	e009      	b.n	8006f4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f40:	e004      	b.n	8006f4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f99e 	bl	8007286 <USBD_CtlError>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	4b4e      	ldr	r3, [pc, #312]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d905      	bls.n	8006f80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f985 	bl	8007286 <USBD_CtlError>
    return USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e08c      	b.n	800709a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d002      	beq.n	8006f92 <USBD_SetConfig+0x3e>
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d029      	beq.n	8006fe4 <USBD_SetConfig+0x90>
 8006f90:	e075      	b.n	800707e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f92:	4b44      	ldr	r3, [pc, #272]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d020      	beq.n	8006fdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f9a:	4b42      	ldr	r3, [pc, #264]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe ffe3 	bl	8005f76 <USBD_SetClassConfig>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f962 	bl	8007286 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fca:	e065      	b.n	8007098 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa31 	bl	8007434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fda:	e05d      	b.n	8007098 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa29 	bl	8007434 <USBD_CtlSendStatus>
      break;
 8006fe2:	e059      	b.n	8007098 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d112      	bne.n	8007012 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <USBD_SetConfig+0x150>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ffe:	4b29      	ldr	r3, [pc, #164]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fe ffd2 	bl	8005fae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa12 	bl	8007434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007010:	e042      	b.n	8007098 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007012:	4b24      	ldr	r3, [pc, #144]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d02a      	beq.n	8007076 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fe ffc0 	bl	8005fae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800702e:	4b1d      	ldr	r3, [pc, #116]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <USBD_SetConfig+0x150>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fe ff99 	bl	8005f76 <USBD_SetClassConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f918 	bl	8007286 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fe ffa5 	bl	8005fae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800706c:	e014      	b.n	8007098 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9e0 	bl	8007434 <USBD_CtlSendStatus>
      break;
 8007074:	e010      	b.n	8007098 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9dc 	bl	8007434 <USBD_CtlSendStatus>
      break;
 800707c:	e00c      	b.n	8007098 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f900 	bl	8007286 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007086:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <USBD_SetConfig+0x150>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe ff8e 	bl	8005fae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
      break;
 8007096:	bf00      	nop
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2000019c 	.word	0x2000019c

080070a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d004      	beq.n	80070c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8e2 	bl	8007286 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070c2:	e023      	b.n	800710c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	dc02      	bgt.n	80070d6 <USBD_GetConfig+0x2e>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc03      	bgt.n	80070dc <USBD_GetConfig+0x34>
 80070d4:	e015      	b.n	8007102 <USBD_GetConfig+0x5a>
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d00b      	beq.n	80070f2 <USBD_GetConfig+0x4a>
 80070da:	e012      	b.n	8007102 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3308      	adds	r3, #8
 80070e6:	2201      	movs	r2, #1
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f948 	bl	8007380 <USBD_CtlSendData>
        break;
 80070f0:	e00c      	b.n	800710c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3304      	adds	r3, #4
 80070f6:	2201      	movs	r2, #1
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f940 	bl	8007380 <USBD_CtlSendData>
        break;
 8007100:	e004      	b.n	800710c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8be 	bl	8007286 <USBD_CtlError>
        break;
 800710a:	bf00      	nop
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d81e      	bhi.n	800716a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	88db      	ldrh	r3, [r3, #6]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d004      	beq.n	800713e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8a5 	bl	8007286 <USBD_CtlError>
        break;
 800713c:	e01a      	b.n	8007174 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f043 0202 	orr.w	r2, r3, #2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	330c      	adds	r3, #12
 800715e:	2202      	movs	r2, #2
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f90c 	bl	8007380 <USBD_CtlSendData>
      break;
 8007168:	e004      	b.n	8007174 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f88a 	bl	8007286 <USBD_CtlError>
      break;
 8007172:	bf00      	nop
  }
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d107      	bne.n	800719e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f94c 	bl	8007434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800719c:	e013      	b.n	80071c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d10b      	bne.n	80071be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	889b      	ldrh	r3, [r3, #4]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f93c 	bl	8007434 <USBD_CtlSendStatus>
}
 80071bc:	e003      	b.n	80071c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f860 	bl	8007286 <USBD_CtlError>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d80b      	bhi.n	80071fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d10c      	bne.n	8007208 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f91c 	bl	8007434 <USBD_CtlSendStatus>
      }
      break;
 80071fc:	e004      	b.n	8007208 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f840 	bl	8007286 <USBD_CtlError>
      break;
 8007206:	e000      	b.n	800720a <USBD_ClrFeature+0x3c>
      break;
 8007208:	bf00      	nop
  }
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	781a      	ldrb	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fa40 	bl	80066c2 <SWAPBYTE>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fa33 	bl	80066c2 <SWAPBYTE>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fa26 	bl	80066c2 <SWAPBYTE>
 8007276:	4603      	mov	r3, r0
 8007278:	461a      	mov	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	80da      	strh	r2, [r3, #6]
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007290:	2180      	movs	r1, #128	@ 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fcbc 	bl	8007c10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fcb8 	bl	8007c10 <USBD_LL_StallEP>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d042      	beq.n	8007344 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f000 f842 	bl	800734c <USBD_GetLen>
 80072c8:	4603      	mov	r3, r0
 80072ca:	3301      	adds	r3, #1
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d2:	d808      	bhi.n	80072e6 <USBD_GetString+0x3e>
 80072d4:	6938      	ldr	r0, [r7, #16]
 80072d6:	f000 f839 	bl	800734c <USBD_GetLen>
 80072da:	4603      	mov	r3, r0
 80072dc:	3301      	adds	r3, #1
 80072de:	b29b      	uxth	r3, r3
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	e001      	b.n	80072ea <USBD_GetString+0x42>
 80072e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	3301      	adds	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	2203      	movs	r2, #3
 8007308:	701a      	strb	r2, [r3, #0]
  idx++;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	3301      	adds	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007310:	e013      	b.n	800733a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4413      	add	r3, r2
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
    idx++;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	3301      	adds	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
    idx++;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	3301      	adds	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e7      	bne.n	8007312 <USBD_GetString+0x6a>
 8007342:	e000      	b.n	8007346 <USBD_GetString+0x9e>
    return;
 8007344:	bf00      	nop
  }
}
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800735c:	e005      	b.n	800736a <USBD_GetLen+0x1e>
  {
    len++;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	3301      	adds	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	3301      	adds	r3, #1
 8007368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f5      	bne.n	800735e <USBD_GetLen+0x12>
  }

  return len;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2202      	movs	r2, #2
 8007390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	2100      	movs	r1, #0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fcbb 	bl	8007d22 <USBD_LL_Transmit>

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	2100      	movs	r1, #0
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fcaa 	bl	8007d22 <USBD_LL_Transmit>

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2203      	movs	r2, #3
 80073e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	2100      	movs	r1, #0
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fcae 	bl	8007d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	2100      	movs	r1, #0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fc9d 	bl	8007d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007444:	2300      	movs	r3, #0
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc69 	bl	8007d22 <USBD_LL_Transmit>

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2205      	movs	r2, #5
 8007466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800746a:	2300      	movs	r3, #0
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc77 	bl	8007d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007484:	2200      	movs	r2, #0
 8007486:	4912      	ldr	r1, [pc, #72]	@ (80074d0 <MX_USB_DEVICE_Init+0x50>)
 8007488:	4812      	ldr	r0, [pc, #72]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 800748a:	f7fe fcf7 	bl	8005e7c <USBD_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007494:	f7f9 f95e 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007498:	490f      	ldr	r1, [pc, #60]	@ (80074d8 <MX_USB_DEVICE_Init+0x58>)
 800749a:	480e      	ldr	r0, [pc, #56]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 800749c:	f7fe fd1e 	bl	8005edc <USBD_RegisterClass>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074a6:	f7f9 f955 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074aa:	490c      	ldr	r1, [pc, #48]	@ (80074dc <MX_USB_DEVICE_Init+0x5c>)
 80074ac:	4809      	ldr	r0, [pc, #36]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 80074ae:	f7fe fc55 	bl	8005d5c <USBD_CDC_RegisterInterface>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074b8:	f7f9 f94c 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074bc:	4805      	ldr	r0, [pc, #20]	@ (80074d4 <MX_USB_DEVICE_Init+0x54>)
 80074be:	f7fe fd43 	bl	8005f48 <USBD_Start>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074c8:	f7f9 f944 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200000ac 	.word	0x200000ac
 80074d4:	200001a0 	.word	0x200001a0
 80074d8:	20000018 	.word	0x20000018
 80074dc:	20000098 	.word	0x20000098

080074e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074e4:	2200      	movs	r2, #0
 80074e6:	4905      	ldr	r1, [pc, #20]	@ (80074fc <CDC_Init_FS+0x1c>)
 80074e8:	4805      	ldr	r0, [pc, #20]	@ (8007500 <CDC_Init_FS+0x20>)
 80074ea:	f7fe fc51 	bl	8005d90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074ee:	4905      	ldr	r1, [pc, #20]	@ (8007504 <CDC_Init_FS+0x24>)
 80074f0:	4803      	ldr	r0, [pc, #12]	@ (8007500 <CDC_Init_FS+0x20>)
 80074f2:	f7fe fc6f 	bl	8005dd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000c7c 	.word	0x20000c7c
 8007500:	200001a0 	.word	0x200001a0
 8007504:	2000047c 	.word	0x2000047c

08007508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800750c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800750e:	4618      	mov	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
 8007524:	4613      	mov	r3, r2
 8007526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b23      	cmp	r3, #35	@ 0x23
 800752c:	d84a      	bhi.n	80075c4 <CDC_Control_FS+0xac>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <CDC_Control_FS+0x1c>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	080075c5 	.word	0x080075c5
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075c5 	.word	0x080075c5
 8007540:	080075c5 	.word	0x080075c5
 8007544:	080075c5 	.word	0x080075c5
 8007548:	080075c5 	.word	0x080075c5
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075c5 	.word	0x080075c5
 8007554:	080075c5 	.word	0x080075c5
 8007558:	080075c5 	.word	0x080075c5
 800755c:	080075c5 	.word	0x080075c5
 8007560:	080075c5 	.word	0x080075c5
 8007564:	080075c5 	.word	0x080075c5
 8007568:	080075c5 	.word	0x080075c5
 800756c:	080075c5 	.word	0x080075c5
 8007570:	080075c5 	.word	0x080075c5
 8007574:	080075c5 	.word	0x080075c5
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075c5 	.word	0x080075c5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075c5 	.word	0x080075c5
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	080075c5 	.word	0x080075c5
 80075ac:	080075c5 	.word	0x080075c5
 80075b0:	080075c5 	.word	0x080075c5
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075c5 	.word	0x080075c5
 80075bc:	080075c5 	.word	0x080075c5
 80075c0:	080075c5 	.word	0x080075c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075c4:	bf00      	nop
  }

  return (USBD_OK);
 80075c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <CDC_Receive_FS+0x24>)
 80075e2:	f7fe fbf7 	bl	8005dd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075e6:	4804      	ldr	r0, [pc, #16]	@ (80075f8 <CDC_Receive_FS+0x24>)
 80075e8:	f7fe fc12 	bl	8005e10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200001a0 	.word	0x200001a0

080075fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	4613      	mov	r3, r2
 8007608:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800760e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007612:	4618      	mov	r0, r3
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2212      	movs	r2, #18
 8007630:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007632:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	200000c8 	.word	0x200000c8

08007644 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2204      	movs	r2, #4
 8007654:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007656:	4b03      	ldr	r3, [pc, #12]	@ (8007664 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	200000dc 	.word	0x200000dc

08007668 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d105      	bne.n	8007686 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	4907      	ldr	r1, [pc, #28]	@ (800769c <USBD_FS_ProductStrDescriptor+0x34>)
 800767e:	4808      	ldr	r0, [pc, #32]	@ (80076a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007680:	f7ff fe12 	bl	80072a8 <USBD_GetString>
 8007684:	e004      	b.n	8007690 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4904      	ldr	r1, [pc, #16]	@ (800769c <USBD_FS_ProductStrDescriptor+0x34>)
 800768a:	4805      	ldr	r0, [pc, #20]	@ (80076a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800768c:	f7ff fe0c 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007690:	4b02      	ldr	r3, [pc, #8]	@ (800769c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	2000147c 	.word	0x2000147c
 80076a0:	08007ef4 	.word	0x08007ef4

080076a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	4904      	ldr	r1, [pc, #16]	@ (80076c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076b4:	4804      	ldr	r0, [pc, #16]	@ (80076c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076b6:	f7ff fdf7 	bl	80072a8 <USBD_GetString>
  return USBD_StrDesc;
 80076ba:	4b02      	ldr	r3, [pc, #8]	@ (80076c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	2000147c 	.word	0x2000147c
 80076c8:	08007f0c 	.word	0x08007f0c

080076cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	221a      	movs	r2, #26
 80076dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076de:	f000 f843 	bl	8007768 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076e2:	4b02      	ldr	r3, [pc, #8]	@ (80076ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	200000e0 	.word	0x200000e0

080076f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d105      	bne.n	800770e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4907      	ldr	r1, [pc, #28]	@ (8007724 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007706:	4808      	ldr	r0, [pc, #32]	@ (8007728 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007708:	f7ff fdce 	bl	80072a8 <USBD_GetString>
 800770c:	e004      	b.n	8007718 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4904      	ldr	r1, [pc, #16]	@ (8007724 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007712:	4805      	ldr	r0, [pc, #20]	@ (8007728 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007714:	f7ff fdc8 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007718:	4b02      	ldr	r3, [pc, #8]	@ (8007724 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000147c 	.word	0x2000147c
 8007728:	08007f20 	.word	0x08007f20

0800772c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4907      	ldr	r1, [pc, #28]	@ (8007760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007742:	4808      	ldr	r0, [pc, #32]	@ (8007764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007744:	f7ff fdb0 	bl	80072a8 <USBD_GetString>
 8007748:	e004      	b.n	8007754 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4904      	ldr	r1, [pc, #16]	@ (8007760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800774e:	4805      	ldr	r0, [pc, #20]	@ (8007764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007750:	f7ff fdaa 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007754:	4b02      	ldr	r3, [pc, #8]	@ (8007760 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	2000147c 	.word	0x2000147c
 8007764:	08007f2c 	.word	0x08007f2c

08007768 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800776e:	4b0f      	ldr	r3, [pc, #60]	@ (80077ac <Get_SerialNum+0x44>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007774:	4b0e      	ldr	r3, [pc, #56]	@ (80077b0 <Get_SerialNum+0x48>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800777a:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <Get_SerialNum+0x4c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4413      	add	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800778e:	2208      	movs	r2, #8
 8007790:	4909      	ldr	r1, [pc, #36]	@ (80077b8 <Get_SerialNum+0x50>)
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f814 	bl	80077c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007798:	2204      	movs	r2, #4
 800779a:	4908      	ldr	r1, [pc, #32]	@ (80077bc <Get_SerialNum+0x54>)
 800779c:	68b8      	ldr	r0, [r7, #8]
 800779e:	f000 f80f 	bl	80077c0 <IntToUnicode>
  }
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	1fff7a10 	.word	0x1fff7a10
 80077b0:	1fff7a14 	.word	0x1fff7a14
 80077b4:	1fff7a18 	.word	0x1fff7a18
 80077b8:	200000e2 	.word	0x200000e2
 80077bc:	200000f2 	.word	0x200000f2

080077c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e027      	b.n	8007828 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	0f1b      	lsrs	r3, r3, #28
 80077dc:	2b09      	cmp	r3, #9
 80077de:	d80b      	bhi.n	80077f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	0f1b      	lsrs	r3, r3, #28
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4619      	mov	r1, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	440b      	add	r3, r1
 80077f0:	3230      	adds	r2, #48	@ 0x30
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e00a      	b.n	800780e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	0f1b      	lsrs	r3, r3, #28
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4619      	mov	r1, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	440b      	add	r3, r1
 8007808:	3237      	adds	r2, #55	@ 0x37
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	3301      	adds	r3, #1
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	3301      	adds	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
 8007828:	7dfa      	ldrb	r2, [r7, #23]
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	429a      	cmp	r2, r3
 800782e:	d3d3      	bcc.n	80077d8 <IntToUnicode+0x18>
  }
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	@ 0x28
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007860:	d13a      	bne.n	80078d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	4b1e      	ldr	r3, [pc, #120]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	4a1d      	ldr	r2, [pc, #116]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	6313      	str	r3, [r2, #48]	@ 0x30
 8007872:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800787e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007884:	2302      	movs	r3, #2
 8007886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007888:	2300      	movs	r3, #0
 800788a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788c:	2303      	movs	r3, #3
 800788e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007890:	230a      	movs	r3, #10
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	4619      	mov	r1, r3
 800789a:	4812      	ldr	r0, [pc, #72]	@ (80078e4 <HAL_PCD_MspInit+0xa4>)
 800789c:	f7f9 fa92 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078a0:	4b0f      	ldr	r3, [pc, #60]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 80078a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a4:	4a0e      	ldr	r2, [pc, #56]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 80078a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	4b0b      	ldr	r3, [pc, #44]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 80078b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b4:	4a0a      	ldr	r2, [pc, #40]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 80078b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80078bc:	4b08      	ldr	r3, [pc, #32]	@ (80078e0 <HAL_PCD_MspInit+0xa0>)
 80078be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	2043      	movs	r0, #67	@ 0x43
 80078ce:	f7f9 f9b0 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078d2:	2043      	movs	r0, #67	@ 0x43
 80078d4:	f7f9 f9c9 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078d8:	bf00      	nop
 80078da:	3728      	adds	r7, #40	@ 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40023800 	.word	0x40023800
 80078e4:	40020000 	.word	0x40020000

080078e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fe fb6f 	bl	8005fe2 <USBD_LL_SetupStage>
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	4619      	mov	r1, r3
 8007936:	f7fe fba9 	bl	800608c <USBD_LL_DataOutStage>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	3320      	adds	r3, #32
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	4619      	mov	r1, r3
 800796a:	f7fe fc42 	bl	80061f2 <USBD_LL_DataInStage>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fd7c 	bl	8006482 <USBD_LL_SOF>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800799a:	2301      	movs	r3, #1
 800799c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	79db      	ldrb	r3, [r3, #7]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d001      	beq.n	80079aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079a6:	f7f8 fed5 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b0:	7bfa      	ldrb	r2, [r7, #15]
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fd20 	bl	80063fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fcc8 	bl	8006356 <USBD_LL_Reset>
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fd1b 	bl	800641a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	7adb      	ldrb	r3, [r3, #11]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a04:	4b04      	ldr	r3, [pc, #16]	@ (8007a18 <HAL_PCD_SuspendCallback+0x48>)
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	4a03      	ldr	r2, [pc, #12]	@ (8007a18 <HAL_PCD_SuspendCallback+0x48>)
 8007a0a:	f043 0306 	orr.w	r3, r3, #6
 8007a0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed00 	.word	0xe000ed00

08007a1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fd11 	bl	8006452 <USBD_LL_Resume>
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fd69 	bl	8006526 <USBD_LL_IsoOUTIncomplete>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fd25 	bl	80064c2 <USBD_LL_IsoINIncomplete>
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fd7b 	bl	800658a <USBD_LL_DevConnected>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fd78 	bl	80065a0 <USBD_LL_DevDisconnected>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d13c      	bne.n	8007b42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ac8:	4a20      	ldr	r2, [pc, #128]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007ad4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007ada:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ade:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ae6:	4b19      	ldr	r3, [pc, #100]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007ae8:	2202      	movs	r2, #2
 8007aea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007aec:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007af2:	4b16      	ldr	r3, [pc, #88]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007af4:	2202      	movs	r2, #2
 8007af6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007af8:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007afe:	4b13      	ldr	r3, [pc, #76]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b04:	4b11      	ldr	r3, [pc, #68]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b0a:	4b10      	ldr	r3, [pc, #64]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b10:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b16:	480d      	ldr	r0, [pc, #52]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b18:	f7f9 fad8 	bl	80010cc <HAL_PCD_Init>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b22:	f7f8 fe17 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b26:	2180      	movs	r1, #128	@ 0x80
 8007b28:	4808      	ldr	r0, [pc, #32]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b2a:	f7fa fd04 	bl	8002536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b2e:	2240      	movs	r2, #64	@ 0x40
 8007b30:	2100      	movs	r1, #0
 8007b32:	4806      	ldr	r0, [pc, #24]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b34:	f7fa fcb8 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b38:	2280      	movs	r2, #128	@ 0x80
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	4803      	ldr	r0, [pc, #12]	@ (8007b4c <USBD_LL_Init+0x94>)
 8007b3e:	f7fa fcb3 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2000167c 	.word	0x2000167c

08007b50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7f9 fbbf 	bl	80012ea <HAL_PCD_Start>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f942 	bl	8007dfc <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	461a      	mov	r2, r3
 8007b94:	4603      	mov	r3, r0
 8007b96:	70fb      	strb	r3, [r7, #3]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70bb      	strb	r3, [r7, #2]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007bae:	78bb      	ldrb	r3, [r7, #2]
 8007bb0:	883a      	ldrh	r2, [r7, #0]
 8007bb2:	78f9      	ldrb	r1, [r7, #3]
 8007bb4:	f7fa f893 	bl	8001cde <HAL_PCD_EP_Open>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f91c 	bl	8007dfc <USBD_Get_USB_Status>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fa f8de 	bl	8001db2 <HAL_PCD_EP_Close>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f8fd 	bl	8007dfc <USBD_Get_USB_Status>
 8007c02:	4603      	mov	r3, r0
 8007c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fa f996 	bl	8001f60 <HAL_PCD_EP_SetStall>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f8de 	bl	8007dfc <USBD_Get_USB_Status>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fa f9da 	bl	8002026 <HAL_PCD_EP_ClrStall>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f8bf 	bl	8007dfc <USBD_Get_USB_Status>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da0b      	bge.n	8007cc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	3316      	adds	r3, #22
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	e00b      	b.n	8007cd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007cd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7f9 ffc7 	bl	8001c96 <HAL_PCD_SetAddress>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f874 	bl	8007dfc <USBD_Get_USB_Status>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d40:	7af9      	ldrb	r1, [r7, #11]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	f7fa f8d1 	bl	8001eec <HAL_PCD_EP_Transmit>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f853 	bl	8007dfc <USBD_Get_USB_Status>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	460b      	mov	r3, r1
 8007d72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d82:	7af9      	ldrb	r1, [r7, #11]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	f7fa f85d 	bl	8001e46 <HAL_PCD_EP_Receive>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f832 	bl	8007dfc <USBD_Get_USB_Status>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fa f87d 	bl	8001ebc <HAL_PCD_EP_GetRxCount>
 8007dc2:	4603      	mov	r3, r0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	@ (8007de4 <USBD_static_malloc+0x18>)
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20001b60 	.word	0x20001b60

08007de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d817      	bhi.n	8007e40 <USBD_Get_USB_Status+0x44>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <USBD_Get_USB_Status+0x1c>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e2f 	.word	0x08007e2f
 8007e20:	08007e35 	.word	0x08007e35
 8007e24:	08007e3b 	.word	0x08007e3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e2c:	e00b      	b.n	8007e46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	73fb      	strb	r3, [r7, #15]
    break;
 8007e32:	e008      	b.n	8007e46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
    break;
 8007e38:	e005      	b.n	8007e46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3e:	e002      	b.n	8007e46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	73fb      	strb	r3, [r7, #15]
    break;
 8007e44:	bf00      	nop
  }
  return usb_status;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <memset>:
 8007e54:	4402      	add	r2, r0
 8007e56:	4603      	mov	r3, r0
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d100      	bne.n	8007e5e <memset+0xa>
 8007e5c:	4770      	bx	lr
 8007e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e62:	e7f9      	b.n	8007e58 <memset+0x4>

08007e64 <strncat>:
 8007e64:	b530      	push	{r4, r5, lr}
 8007e66:	4604      	mov	r4, r0
 8007e68:	7825      	ldrb	r5, [r4, #0]
 8007e6a:	4623      	mov	r3, r4
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	d1fa      	bne.n	8007e68 <strncat+0x4>
 8007e72:	3a01      	subs	r2, #1
 8007e74:	d304      	bcc.n	8007e80 <strncat+0x1c>
 8007e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7a:	f803 4b01 	strb.w	r4, [r3], #1
 8007e7e:	b904      	cbnz	r4, 8007e82 <strncat+0x1e>
 8007e80:	bd30      	pop	{r4, r5, pc}
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d1f5      	bne.n	8007e72 <strncat+0xe>
 8007e86:	701a      	strb	r2, [r3, #0]
 8007e88:	e7f3      	b.n	8007e72 <strncat+0xe>
	...

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	@ (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f000 f818 	bl	8007ed4 <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	08007f5c 	.word	0x08007f5c
 8007ec8:	08007f5c 	.word	0x08007f5c
 8007ecc:	08007f5c 	.word	0x08007f5c
 8007ed0:	08007f60 	.word	0x08007f60

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
