
AULA_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010194  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010338  08010338  00011338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010860  08010860  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010860  08010860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010868  08010868  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010868  08010868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801086c  0801086c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010870  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  200002d8  08010b48  000122d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002208  08010b48  00013208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001929c  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd6  00000000  00000000  0002b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119e  00000000  00000000  00030c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfbc  00000000  00000000  00031e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2a3  00000000  00000000  0004ddc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
<<<<<<< HEAD
 18 .debug_str    000a0b59  00000000  00000000  0006bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007794  00000000  00000000  0010cb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001142b0  2**0
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 18 .debug_str    000a0bfe  00000000  00000000  0006c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cc63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077e4  00000000  00000000  0010cca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011448c  2**0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801031c 	.word	0x0801031c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0801031c 	.word	0x0801031c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <count2volt>:

const float Vref = 3.3; // Reference voltage (in volts)
float result;
int max_count;

float count2volt(uint16_t res, uint16_t count){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	80fb      	strh	r3, [r7, #6]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]

	    max_count = pow(2, res) - 1;
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa82 	bl	8000514 <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ec43 2b11 	vmov	d1, r2, r3
 8001018:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001080 <count2volt+0x88>
 800101c:	f00e fa1e 	bl	800f45c <pow>
 8001020:	ec51 0b10 	vmov	r0, r1, d0
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <count2volt+0x90>)
 800102a:	f7ff f935 	bl	8000298 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd97 	bl	8000b68 <__aeabi_d2iz>
 800103a:	4603      	mov	r3, r0
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <count2volt+0x94>)
 800103e:	6013      	str	r3, [r2, #0]

	    result = (Vref / max_count * count);
 8001040:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001090 <count2volt+0x98>
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <count2volt+0x94>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <count2volt+0x9c>)
 8001064:	edc3 7a00 	vstr	s15, [r3]

	    return result;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <count2volt+0x9c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	ee07 3a90 	vmov	s15, r3
}
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000000 	.word	0x00000000
 8001084:	40000000 	.word	0x40000000
 8001088:	3ff00000 	.word	0x3ff00000
 800108c:	200002f8 	.word	0x200002f8
 8001090:	40533333 	.word	0x40533333
 8001094:	200002f4 	.word	0x200002f4

08001098 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 030c 	orr.w	r3, r3, #12
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	f043 030c 	orr.w	r3, r3, #12
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	2364      	movs	r3, #100	@ 0x64
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	214e      	movs	r1, #78	@ 0x4e
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <lcd_send_cmd+0x5c>)
 80010e6:	f002 fd4b 	bl	8003b80 <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200003a4 	.word	0x200003a4

080010f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0309 	orr.w	r3, r3, #9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	b2db      	uxtb	r3, r3
 800112c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f043 0309 	orr.w	r3, r3, #9
 8001134:	b2db      	uxtb	r3, r3
 8001136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	2364      	movs	r3, #100	@ 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2304      	movs	r3, #4
 8001142:	214e      	movs	r1, #78	@ 0x4e
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <lcd_send_data+0x5c>)
 8001146:	f002 fd1b 	bl	8003b80 <HAL_I2C_Master_Transmit>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003a4 	.word	0x200003a4

08001158 <lcd_clear>:

void lcd_clear (void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800115e:	2080      	movs	r0, #128	@ 0x80
 8001160:	f7ff ff9a 	bl	8001098 <lcd_send_cmd>
	for (int i=0; i<80; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e005      	b.n	8001176 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800116a:	2020      	movs	r0, #32
 800116c:	f7ff ffc4 	bl	80010f8 <lcd_send_data>
	for (int i=0; i<80; i++)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b4f      	cmp	r3, #79	@ 0x4f
 800117a:	ddf6      	ble.n	800116a <lcd_clear+0x12>
	}
	return 0;
 800117c:	bf00      	nop
}
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
#define Linha_2 (0x80 | 0x40)
#define Linha_3 (0x80 | 0x14)
#define Linha_4 (0x80 | 0x54)
*/

    switch (row)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d81b      	bhi.n	80011cc <lcd_put_cur+0x48>
 8001194:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <lcd_put_cur+0x18>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011c5 	.word	0x080011c5
    {
        case 0:

            col += (0x00|0x80);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3380      	adds	r3, #128	@ 0x80
 80011b0:	603b      	str	r3, [r7, #0]
            break;
 80011b2:	e00b      	b.n	80011cc <lcd_put_cur+0x48>
        case 1:
            col += (0x40|0x80);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	33c0      	adds	r3, #192	@ 0xc0
 80011b8:	603b      	str	r3, [r7, #0]
            break;
 80011ba:	e007      	b.n	80011cc <lcd_put_cur+0x48>
        case 2:
        	col += (0x14|0x80);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3394      	adds	r3, #148	@ 0x94
 80011c0:	603b      	str	r3, [r7, #0]
        	break;
 80011c2:	e003      	b.n	80011cc <lcd_put_cur+0x48>
        case 3:
        	col += (0x54|0x80);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	33d4      	adds	r3, #212	@ 0xd4
 80011c8:	603b      	str	r3, [r7, #0]
        	break;
 80011ca:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff61 	bl	8001098 <lcd_send_cmd>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop

080011e0 <lcd_init>:


void lcd_init (void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011e4:	2032      	movs	r0, #50	@ 0x32
 80011e6:	f000 fff5 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ea:	2030      	movs	r0, #48	@ 0x30
 80011ec:	f7ff ff54 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011f0:	2005      	movs	r0, #5
 80011f2:	f000 ffef 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011f6:	2030      	movs	r0, #48	@ 0x30
 80011f8:	f7ff ff4e 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 ffe9 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001202:	2030      	movs	r0, #48	@ 0x30
 8001204:	f7ff ff48 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 ffe3 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800120e:	2020      	movs	r0, #32
 8001210:	f7ff ff42 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f000 ffdd 	bl	80021d4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800121a:	2028      	movs	r0, #40	@ 0x28
 800121c:	f7ff ff3c 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f000 ffd7 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001226:	2008      	movs	r0, #8
 8001228:	f7ff ff36 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 ffd1 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff ff30 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 ffcb 	bl	80021d4 <HAL_Delay>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 ffc8 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001244:	2006      	movs	r0, #6
 8001246:	f7ff ff27 	bl	8001098 <lcd_send_cmd>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 ffc2 	bl	80021d4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001250:	200c      	movs	r0, #12
 8001252:	f7ff ff21 	bl	8001098 <lcd_send_cmd>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001262:	e006      	b.n	8001272 <lcd_send_string+0x18>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff43 	bl	80010f8 <lcd_send_data>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f4      	bne.n	8001264 <lcd_send_string+0xa>
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f000 ff31 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f8c7 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001292:	f000 fa67 	bl	8001764 <MX_GPIO_Init>
  MX_DMA_Init();
 8001296:	f000 fa45 	bl	8001724 <MX_DMA_Init>
  MX_TIM2_Init();
 800129a:	f000 f9a9 	bl	80015f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800129e:	f000 f927 	bl	80014f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012a2:	f000 f977 	bl	8001594 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f009 f889 	bl	800a3bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	lcd_init();
 80012aa:	f7ff ff99 	bl	80011e0 <lcd_init>
	HAL_Delay(100);
 80012ae:	2064      	movs	r0, #100	@ 0x64
 80012b0:	f000 ff90 	bl	80021d4 <HAL_Delay>
	lcd_clear();
 80012b4:	f7ff ff50 	bl	8001158 <lcd_clear>
	HAL_Delay(100);
 80012b8:	2064      	movs	r0, #100	@ 0x64
 80012ba:	f000 ff8b 	bl	80021d4 <HAL_Delay>

	/* Tests timer and ADC for perfect initialization */
	RetTimer = HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012be:	2104      	movs	r1, #4
 80012c0:	484a      	ldr	r0, [pc, #296]	@ (80013ec <main+0x168>)
 80012c2:	f004 fef5 	bl	80060b0 <HAL_TIM_PWM_Start>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b49      	ldr	r3, [pc, #292]	@ (80013f0 <main+0x16c>)
 80012cc:	701a      	strb	r2, [r3, #0]
	RetADC = HAL_ADC_Start_DMA(&hadc1, (uint32_t*) bufferADC, ADCBUFFERSIZE);
 80012ce:	2214      	movs	r2, #20
 80012d0:	4948      	ldr	r1, [pc, #288]	@ (80013f4 <main+0x170>)
 80012d2:	4849      	ldr	r0, [pc, #292]	@ (80013f8 <main+0x174>)
 80012d4:	f001 f8f6 	bl	80024c4 <HAL_ADC_Start_DMA>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b47      	ldr	r3, [pc, #284]	@ (80013fc <main+0x178>)
 80012de:	701a      	strb	r2, [r3, #0]
	if (RetTimer == HAL_OK && RetADC == HAL_OK) {
 80012e0:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <main+0x16c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11e      	bne.n	8001326 <main+0xa2>
 80012e8:	4b44      	ldr	r3, [pc, #272]	@ (80013fc <main+0x178>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11a      	bne.n	8001326 <main+0xa2>
		HAL_Delay(200);
 80012f0:	20c8      	movs	r0, #200	@ 0xc8
 80012f2:	f000 ff6f 	bl	80021d4 <HAL_Delay>
		for (uint8_t i = 0; i < 10; i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	e00a      	b.n	8001312 <main+0x8e>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001300:	483f      	ldr	r0, [pc, #252]	@ (8001400 <main+0x17c>)
 8001302:	f002 fade 	bl	80038c2 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001306:	20c8      	movs	r0, #200	@ 0xc8
 8001308:	f000 ff64 	bl	80021d4 <HAL_Delay>
		for (uint8_t i = 0; i < 10; i++) {
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	3301      	adds	r3, #1
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d9f1      	bls.n	80012fc <main+0x78>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800131e:	4838      	ldr	r0, [pc, #224]	@ (8001400 <main+0x17c>)
 8001320:	f002 fab6 	bl	8003890 <HAL_GPIO_WritePin>
 8001324:	e001      	b.n	800132a <main+0xa6>
	}
	else {
		Error_Handler();
 8001326:	f000 fc1f 	bl	8001b68 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // Button for selection
 800132a:	2101      	movs	r1, #1
 800132c:	4835      	ldr	r0, [pc, #212]	@ (8001404 <main+0x180>)
 800132e:	f002 fa97 	bl	8003860 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <main+0x184>)
 8001338:	701a      	strb	r2, [r3, #0]
		if (pinState == GPIO_PIN_SET) {
 800133a:	4b33      	ldr	r3, [pc, #204]	@ (8001408 <main+0x184>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d122      	bne.n	8001388 <main+0x104>
			if (flagAVG) {
 8001342:	4b32      	ldr	r3, [pc, #200]	@ (800140c <main+0x188>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d014      	beq.n	8001374 <main+0xf0>
				lcd_clear();
 800134a:	f7ff ff05 	bl	8001158 <lcd_clear>
				lcd_put_cur(0, 1);
 800134e:	2101      	movs	r1, #1
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff17 	bl	8001184 <lcd_put_cur>
				lcd_send_string("MEDIAS E DIFERENCA");
 8001356:	482e      	ldr	r0, [pc, #184]	@ (8001410 <main+0x18c>)
 8001358:	f7ff ff7f 	bl	800125a <lcd_send_string>
				HAL_Delay(1200);
 800135c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001360:	f000 ff38 	bl	80021d4 <HAL_Delay>
				lcd_clear();
 8001364:	f7ff fef8 	bl	8001158 <lcd_clear>
				flagAVG = 0;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <main+0x188>)
 800136a:	2200      	movs	r2, #0
 800136c:	801a      	strh	r2, [r3, #0]
				flagLevels = 1;
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <main+0x190>)
 8001370:	2201      	movs	r2, #1
 8001372:	801a      	strh	r2, [r3, #0]
			}
			if (flag) {
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <main+0x194>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d031      	beq.n	80013e0 <main+0x15c>
				avgDiff();
 800137c:	f000 fa76 	bl	800186c <avgDiff>
				flag = 0;
 8001380:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <main+0x194>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
 8001386:	e02b      	b.n	80013e0 <main+0x15c>
			}
		} else {
			lcd_clear();
 8001388:	f7ff fee6 	bl	8001158 <lcd_clear>
			HAL_Delay(1000);
 800138c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001390:	f000 ff20 	bl	80021d4 <HAL_Delay>
			if (flagLevels) {
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <main+0x190>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d010      	beq.n	80013be <main+0x13a>
				lcd_put_cur(0, 0);
 800139c:	2100      	movs	r1, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fef0 	bl	8001184 <lcd_put_cur>
				lcd_send_string("SEQUENCIA DE NIVEIS");
 80013a4:	481d      	ldr	r0, [pc, #116]	@ (800141c <main+0x198>)
 80013a6:	f7ff ff58 	bl	800125a <lcd_send_string>
				HAL_Delay(1200);
 80013aa:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80013ae:	f000 ff11 	bl	80021d4 <HAL_Delay>
				flagLevels = 0;
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <main+0x190>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	801a      	strh	r2, [r3, #0]
				flagAVG = 1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <main+0x188>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	801a      	strh	r2, [r3, #0]
			}
			lcd_clear();
 80013be:	f7ff fecb 	bl	8001158 <lcd_clear>
			if (flag) {
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <main+0x194>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <main+0x150>
				seqLevels();
 80013ca:	f000 fb1b 	bl	8001a04 <seqLevels>
				flag = 0;
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <main+0x194>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
			}
			lcd_clear();
 80013d4:	f7ff fec0 	bl	8001158 <lcd_clear>
			HAL_Delay(1000);
 80013d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013dc:	f000 fefa 	bl	80021d4 <HAL_Delay>
		}

		HAL_Delay(2000);
 80013e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013e4:	f000 fef6 	bl	80021d4 <HAL_Delay>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // Button for selection
 80013e8:	e79f      	b.n	800132a <main+0xa6>
 80013ea:	bf00      	nop
 80013ec:	200003f8 	.word	0x200003f8
 80013f0:	20000440 	.word	0x20000440
 80013f4:	2000048c 	.word	0x2000048c
 80013f8:	200002fc 	.word	0x200002fc
 80013fc:	20000441 	.word	0x20000441
 8001400:	40020800 	.word	0x40020800
 8001404:	40020000 	.word	0x40020000
 8001408:	20000442 	.word	0x20000442
 800140c:	20000000 	.word	0x20000000
 8001410:	08010338 	.word	0x08010338
 8001414:	20000002 	.word	0x20000002
 8001418:	20000448 	.word	0x20000448
 800141c:	0801034c 	.word	0x0801034c

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	@ 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	@ 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f00a fc3f 	bl	800bcb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <SystemClock_Config+0xc8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <SystemClock_Config+0xc8>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <SystemClock_Config+0xc8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <SystemClock_Config+0xcc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <SystemClock_Config+0xcc>)
 800146a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <SystemClock_Config+0xcc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001490:	230c      	movs	r3, #12
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 f917 	bl	80056d8 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b0:	f000 fb5a 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2103      	movs	r1, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fb79 	bl	8005bc8 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014dc:	f000 fb44 	bl	8001b68 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	@ 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <MX_ADC1_Init+0xa0>)
 8001506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001508:	4b20      	ldr	r3, [pc, #128]	@ (800158c <MX_ADC1_Init+0x9c>)
 800150a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800150e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_ADC1_Init+0x9c>)
 800151e:	2200      	movs	r2, #0
 8001520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_ADC1_Init+0x9c>)
 800152c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001534:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_ADC1_Init+0x9c>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001542:	2201      	movs	r2, #1
 8001544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001550:	2201      	movs	r2, #1
 8001552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	480d      	ldr	r0, [pc, #52]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001556:	f000 fe61 	bl	800221c <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001560:	f000 fb02 	bl	8001b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001564:	2301      	movs	r3, #1
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_ADC1_Init+0x9c>)
 8001576:	f001 f8b3 	bl	80026e0 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001580:	f000 faf2 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002fc 	.word	0x200002fc
 8001590:	40012000 	.word	0x40012000

08001594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x50>)
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <MX_I2C1_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015d2:	f002 f991 	bl	80038f8 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 fac4 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200003a4 	.word	0x200003a4
 80015e8:	40005400 	.word	0x40005400
 80015ec:	000186a0 	.word	0x000186a0

080015f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b092      	sub	sp, #72	@ 0x48
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001632:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001638:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <MX_TIM2_Init+0x130>)
 800163a:	225f      	movs	r2, #95	@ 0x5f
 800163c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2600-1;
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001646:	f640 2227 	movw	r2, #2599	@ 0xa27
 800164a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <MX_TIM2_Init+0x130>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001658:	4831      	ldr	r0, [pc, #196]	@ (8001720 <MX_TIM2_Init+0x130>)
 800165a:	f004 fc81 	bl	8005f60 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001664:	f000 fa80 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800166e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001672:	4619      	mov	r1, r3
 8001674:	482a      	ldr	r0, [pc, #168]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001676:	f004 fee7 	bl	8006448 <HAL_TIM_ConfigClockSource>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001680:	f000 fa72 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001684:	4826      	ldr	r0, [pc, #152]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001686:	f004 fcba 	bl	8005ffe <HAL_TIM_PWM_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001690:	f000 fa6a 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001694:	2108      	movs	r1, #8
 8001696:	4822      	ldr	r0, [pc, #136]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001698:	f004 fdba 	bl	8006210 <HAL_TIM_OnePulse_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80016a2:	f000 fa61 	bl	8001b68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016a6:	2306      	movs	r3, #6
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016aa:	2350      	movs	r3, #80	@ 0x50
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 80016ae:	230a      	movs	r3, #10
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.TriggerFilter = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80016b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4818      	ldr	r0, [pc, #96]	@ (8001720 <MX_TIM2_Init+0x130>)
 80016be:	f004 ff8a 	bl	80065d6 <HAL_TIM_SlaveConfigSynchro>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016c8:	f000 fa4e 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016cc:	2320      	movs	r3, #32
 80016ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4811      	ldr	r0, [pc, #68]	@ (8001720 <MX_TIM2_Init+0x130>)
 80016dc:	f005 fb26 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80016e6:	f000 fa3f 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ea:	2360      	movs	r3, #96	@ 0x60
 80016ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 80016ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80016f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	2204      	movs	r2, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001704:	f004 fdde 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800170e:	f000 fa2b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001712:	4803      	ldr	r0, [pc, #12]	@ (8001720 <MX_TIM2_Init+0x130>)
 8001714:	f000 fb64 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001718:	bf00      	nop
 800171a:	3748      	adds	r7, #72	@ 0x48
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200003f8 	.word	0x200003f8

08001724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_DMA_Init+0x3c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <MX_DMA_Init+0x3c>)
 8001734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_DMA_Init+0x3c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2038      	movs	r0, #56	@ 0x38
 800174c:	f001 fb5d 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001750:	2038      	movs	r0, #56	@ 0x38
 8001752:	f001 fb76 	bl	8002e42 <HAL_NVIC_EnableIRQ>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <MX_GPIO_Init+0xf8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a36      	ldr	r2, [pc, #216]	@ (800185c <MX_GPIO_Init+0xf8>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <MX_GPIO_Init+0xf8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b30      	ldr	r3, [pc, #192]	@ (800185c <MX_GPIO_Init+0xf8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a2f      	ldr	r2, [pc, #188]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a28      	ldr	r2, [pc, #160]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a21      	ldr	r2, [pc, #132]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_GPIO_Init+0xf8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f0:	481b      	ldr	r0, [pc, #108]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017f2:	f002 f84d 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2107      	movs	r1, #7
 80017fa:	481a      	ldr	r0, [pc, #104]	@ (8001864 <MX_GPIO_Init+0x100>)
 80017fc:	f002 f848 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <MX_GPIO_Init+0xfc>)
 800181a:	f001 fe9d 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800181e:	2305      	movs	r3, #5
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <MX_GPIO_Init+0x104>)
 8001832:	f001 fe91 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001836:	2307      	movs	r3, #7
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_GPIO_Init+0x100>)
 800184e:	f001 fe83 	bl	8003558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40020800 	.word	0x40020800
 8001864:	40020400 	.word	0x40020400
 8001868:	40020000 	.word	0x40020000

0800186c <avgDiff>:

/* USER CODE BEGIN 4 */

void avgDiff() {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	evenAcc = 0.0;
 8001872:	4b57      	ldr	r3, [pc, #348]	@ (80019d0 <avgDiff+0x164>)
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
	oddAcc = 0.0;
 800187a:	4b56      	ldr	r3, [pc, #344]	@ (80019d4 <avgDiff+0x168>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

	for (uint8_t i = 0; i < ADCBUFFERSIZE; i++) {
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e031      	b.n	80018ec <avgDiff+0x80>
		counts = bufferADC[i];
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a53      	ldr	r2, [pc, #332]	@ (80019d8 <avgDiff+0x16c>)
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	461a      	mov	r2, r3
 8001892:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <avgDiff+0x170>)
 8001894:	601a      	str	r2, [r3, #0]
		volts = count2volt(ADCRES, counts);
 8001896:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <avgDiff+0x170>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	200c      	movs	r0, #12
 800189e:	f7ff fbab 	bl	8000ff8 <count2volt>
 80018a2:	eef0 7a40 	vmov.f32	s15, s0
 80018a6:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <avgDiff+0x174>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
		#ifdef ROUNDRES // just for fun
			volts = round(volts);
		#endif
		(i % 2 == 0) ? (evenAcc += volts) : (oddAcc += volts);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <avgDiff+0x64>
 80018b8:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <avgDiff+0x164>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <avgDiff+0x174>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <avgDiff+0x164>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
 80018ce:	e00a      	b.n	80018e6 <avgDiff+0x7a>
 80018d0:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <avgDiff+0x168>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	4b42      	ldr	r3, [pc, #264]	@ (80019e0 <avgDiff+0x174>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <avgDiff+0x168>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < ADCBUFFERSIZE; i++) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	3301      	adds	r3, #1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b13      	cmp	r3, #19
 80018f0:	d9ca      	bls.n	8001888 <avgDiff+0x1c>
	}

	l1avg = evenAcc / (ADCBUFFERSIZE / 2.0);
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <avgDiff+0x164>)
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001900:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <avgDiff+0x178>)
 8001902:	edc3 7a00 	vstr	s15, [r3]
	l2avg = oddAcc / (ADCBUFFERSIZE / 2.0);
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <avgDiff+0x168>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <avgDiff+0x17c>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
	diff = l1avg - l2avg;
 800191a:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <avgDiff+0x178>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <avgDiff+0x17c>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <avgDiff+0x180>)
 800192c:	edc3 7a00 	vstr	s15, [r3]

	lcd_put_cur(0, 0);
 8001930:	2100      	movs	r1, #0
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fc26 	bl	8001184 <lcd_put_cur>
	lcd_send_string("Nivel1 = ");
 8001938:	482d      	ldr	r0, [pc, #180]	@ (80019f0 <avgDiff+0x184>)
 800193a:	f7ff fc8e 	bl	800125a <lcd_send_string>
	lcd_put_cur(0, 9);
 800193e:	2109      	movs	r1, #9
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fc1f 	bl	8001184 <lcd_put_cur>
	sprintf(buffer, "%1.4f", l1avg);
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <avgDiff+0x178>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe04 	bl	8000558 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4927      	ldr	r1, [pc, #156]	@ (80019f4 <avgDiff+0x188>)
 8001956:	4828      	ldr	r0, [pc, #160]	@ (80019f8 <avgDiff+0x18c>)
 8001958:	f00a f948 	bl	800bbec <siprintf>
	lcd_send_string(buffer);
 800195c:	4826      	ldr	r0, [pc, #152]	@ (80019f8 <avgDiff+0x18c>)
 800195e:	f7ff fc7c 	bl	800125a <lcd_send_string>

	lcd_put_cur(1, 0);
 8001962:	2100      	movs	r1, #0
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fc0d 	bl	8001184 <lcd_put_cur>
	lcd_send_string("Nivel2 = ");
 800196a:	4824      	ldr	r0, [pc, #144]	@ (80019fc <avgDiff+0x190>)
 800196c:	f7ff fc75 	bl	800125a <lcd_send_string>
	lcd_put_cur(1, 9);
 8001970:	2109      	movs	r1, #9
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fc06 	bl	8001184 <lcd_put_cur>
	sprintf(buffer, "%1.4f", l2avg);
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <avgDiff+0x17c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdeb 	bl	8000558 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	491b      	ldr	r1, [pc, #108]	@ (80019f4 <avgDiff+0x188>)
 8001988:	481b      	ldr	r0, [pc, #108]	@ (80019f8 <avgDiff+0x18c>)
 800198a:	f00a f92f 	bl	800bbec <siprintf>
	lcd_send_string(buffer);
 800198e:	481a      	ldr	r0, [pc, #104]	@ (80019f8 <avgDiff+0x18c>)
 8001990:	f7ff fc63 	bl	800125a <lcd_send_string>

	lcd_put_cur(3, 0);
 8001994:	2100      	movs	r1, #0
 8001996:	2003      	movs	r0, #3
 8001998:	f7ff fbf4 	bl	8001184 <lcd_put_cur>
	lcd_send_string("N1-N2 = ");
 800199c:	4818      	ldr	r0, [pc, #96]	@ (8001a00 <avgDiff+0x194>)
 800199e:	f7ff fc5c 	bl	800125a <lcd_send_string>
	lcd_put_cur(3, 8);
 80019a2:	2108      	movs	r1, #8
 80019a4:	2003      	movs	r0, #3
 80019a6:	f7ff fbed 	bl	8001184 <lcd_put_cur>
	sprintf(buffer, "%1.4f", diff);
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <avgDiff+0x180>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	490e      	ldr	r1, [pc, #56]	@ (80019f4 <avgDiff+0x188>)
 80019ba:	480f      	ldr	r0, [pc, #60]	@ (80019f8 <avgDiff+0x18c>)
 80019bc:	f00a f916 	bl	800bbec <siprintf>
	lcd_send_string(buffer);
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <avgDiff+0x18c>)
 80019c2:	f7ff fc4a 	bl	800125a <lcd_send_string>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200004c8 	.word	0x200004c8
 80019d4:	200004cc 	.word	0x200004cc
 80019d8:	2000048c 	.word	0x2000048c
 80019dc:	200004b4 	.word	0x200004b4
 80019e0:	200004b8 	.word	0x200004b8
 80019e4:	200004bc 	.word	0x200004bc
 80019e8:	200004c0 	.word	0x200004c0
 80019ec:	200004c4 	.word	0x200004c4
 80019f0:	08010360 	.word	0x08010360
 80019f4:	0801036c 	.word	0x0801036c
 80019f8:	2000044c 	.word	0x2000044c
 80019fc:	08010374 	.word	0x08010374
 8001a00:	08010380 	.word	0x08010380

08001a04 <seqLevels>:

void seqLevels() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
	line = 0;
 8001a0a:	4b44      	ldr	r3, [pc, #272]	@ (8001b1c <seqLevels+0x118>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < ADCBUFFERSIZE; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	e076      	b.n	8001b04 <seqLevels+0x100>
		if (i > 0 && i % 4 == 0) { 	// Deletes LCD for next four readings.
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <seqLevels+0x34>
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <seqLevels+0x34>
			line = 0;				// Resets the line for its initial
 8001a28:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <seqLevels+0x118>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
			lcd_clear();			// range (0 to 3).
 8001a2e:	f7ff fb93 	bl	8001158 <lcd_clear>
			HAL_Delay(100);
 8001a32:	2064      	movs	r0, #100	@ 0x64
 8001a34:	f000 fbce 	bl	80021d4 <HAL_Delay>
		}
		if (i < 10) {
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d806      	bhi.n	8001a4c <seqLevels+0x48>
			lcd_put_cur(line, 9);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <seqLevels+0x118>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2109      	movs	r1, #9
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fb9d 	bl	8001184 <lcd_put_cur>
 8001a4a:	e018      	b.n	8001a7e <seqLevels+0x7a>
		}
		else if (i > 9 && i < 100) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d909      	bls.n	8001a66 <seqLevels+0x62>
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b63      	cmp	r3, #99	@ 0x63
 8001a56:	d806      	bhi.n	8001a66 <seqLevels+0x62>
			lcd_put_cur(line, 10);
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <seqLevels+0x118>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	210a      	movs	r1, #10
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fb90 	bl	8001184 <lcd_put_cur>
		else if (i > 9 && i < 100) {
 8001a64:	e00b      	b.n	8001a7e <seqLevels+0x7a>
		}
		else if (i > 99) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b63      	cmp	r3, #99	@ 0x63
 8001a6a:	d906      	bls.n	8001a7a <seqLevels+0x76>
			lcd_put_cur(line, 11);
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b1c <seqLevels+0x118>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	210b      	movs	r1, #11
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb86 	bl	8001184 <lcd_put_cur>
 8001a78:	e001      	b.n	8001a7e <seqLevels+0x7a>
		}
		else {
			lcd_clear();
 8001a7a:	f7ff fb6d 	bl	8001158 <lcd_clear>
		}

		counts = bufferADC[i];
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <seqLevels+0x11c>)
 8001a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <seqLevels+0x120>)
 8001a8a:	601a      	str	r2, [r3, #0]
		volts = count2volt(ADCRES, counts);
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <seqLevels+0x120>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	200c      	movs	r0, #12
 8001a94:	f7ff fab0 	bl	8000ff8 <count2volt>
 8001a98:	eef0 7a40 	vmov.f32	s15, s0
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <seqLevels+0x124>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
		#ifdef ROUNDRES // for fun only
			volts = round(volts);
		#endif
		lcd_put_cur(line, 0);
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <seqLevels+0x118>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb6b 	bl	8001184 <lcd_put_cur>
		level = i + 1;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <seqLevels+0x128>)
 8001ab8:	801a      	strh	r2, [r3, #0]
		sprintf(buffer, "Nivel%d = ", level);
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <seqLevels+0x128>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	491b      	ldr	r1, [pc, #108]	@ (8001b30 <seqLevels+0x12c>)
 8001ac2:	481c      	ldr	r0, [pc, #112]	@ (8001b34 <seqLevels+0x130>)
 8001ac4:	f00a f892 	bl	800bbec <siprintf>
		lcd_send_string(buffer);
 8001ac8:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <seqLevels+0x130>)
 8001aca:	f7ff fbc6 	bl	800125a <lcd_send_string>
		sprintf(buffer, "%1.4f", volts);
 8001ace:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <seqLevels+0x124>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd40 	bl	8000558 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4916      	ldr	r1, [pc, #88]	@ (8001b38 <seqLevels+0x134>)
 8001ade:	4815      	ldr	r0, [pc, #84]	@ (8001b34 <seqLevels+0x130>)
 8001ae0:	f00a f884 	bl	800bbec <siprintf>
		lcd_send_string(buffer);
 8001ae4:	4813      	ldr	r0, [pc, #76]	@ (8001b34 <seqLevels+0x130>)
 8001ae6:	f7ff fbb8 	bl	800125a <lcd_send_string>
		HAL_Delay(800);
 8001aea:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001aee:	f000 fb71 	bl	80021d4 <HAL_Delay>
		line++;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <seqLevels+0x118>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <seqLevels+0x118>)
 8001afc:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < ADCBUFFERSIZE; i++) {
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	3301      	adds	r3, #1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b13      	cmp	r3, #19
 8001b08:	d985      	bls.n	8001a16 <seqLevels+0x12>
	}
	HAL_Delay(1000);
 8001b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b0e:	f000 fb61 	bl	80021d4 <HAL_Delay>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000444 	.word	0x20000444
 8001b20:	2000048c 	.word	0x2000048c
 8001b24:	200004b4 	.word	0x200004b4
 8001b28:	200004b8 	.word	0x200004b8
 8001b2c:	20000446 	.word	0x20000446
 8001b30:	0801038c 	.word	0x0801038c
 8001b34:	2000044c 	.word	0x2000044c
 8001b38:	0801036c 	.word	0x0801036c

08001b3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d102      	bne.n	8001b54 <HAL_ADC_ConvCpltCallback+0x18>
		flag = 1;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_ADC_ConvCpltCallback+0x28>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	801a      	strh	r2, [r3, #0]
	}
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40012000 	.word	0x40012000
 8001b64:	20000448 	.word	0x20000448

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a33      	ldr	r2, [pc, #204]	@ (8001cb0 <HAL_ADC_MspInit+0xec>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d15f      	bne.n	8001ca6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a31      	ldr	r2, [pc, #196]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_ADC_MspInit+0xf0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c22:	2303      	movs	r3, #3
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4821      	ldr	r0, [pc, #132]	@ (8001cb8 <HAL_ADC_MspInit+0xf4>)
 8001c32:	f001 fc91 	bl	8003558 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_ADC_MspInit+0xfc>)
 8001c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c7a:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c7c:	f001 f8fc 	bl	8002e78 <HAL_DMA_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c86:	f7ff ff6f 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_ADC_MspInit+0xf8>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f001 f8b5 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ca0:	2012      	movs	r0, #18
 8001ca2:	f001 f8ce 	bl	8002e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	@ 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40012000 	.word	0x40012000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	20000344 	.word	0x20000344
 8001cc0:	40026410 	.word	0x40026410

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_I2C_MspInit+0x84>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23c0      	movs	r3, #192	@ 0xc0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d06:	2312      	movs	r3, #18
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <HAL_I2C_MspInit+0x8c>)
 8001d1e:	f001 fc1b 	bl	8003558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400

08001d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d74:	d12b      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x84>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dae:	2320      	movs	r3, #32
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <HAL_TIM_Base_MspInit+0x88>)
 8001dca:	f001 fbc5 	bl	8003558 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e00:	d11d      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4804      	ldr	r0, [pc, #16]	@ (8001e4c <HAL_TIM_MspPostInit+0x6c>)
 8001e3a:	f001 fb8d 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020400 	.word	0x40020400

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea6:	f000 f975 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <ADC_IRQHandler+0x10>)
 8001eb6:	f000 f9f4 	bl	80022a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200002fc 	.word	0x200002fc

08001ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eca:	f001 f8db 	bl	8003084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000344 	.word	0x20000344

08001ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <OTG_FS_IRQHandler+0x10>)
 8001ede:	f002 faec 	bl	80044ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200019b8 	.word	0x200019b8

08001eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_kill>:

int _kill(int pid, int sig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f06:	f009 ff27 	bl	800bd58 <__errno>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2216      	movs	r2, #22
 8001f0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_exit>:

void _exit (int status)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffe7 	bl	8001efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f2e:	bf00      	nop
 8001f30:	e7fd      	b.n	8001f2e <_exit+0x12>

08001f32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e00a      	b.n	8001f5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f44:	f3af 8000 	nop.w
 8001f48:	4601      	mov	r1, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	60ba      	str	r2, [r7, #8]
 8001f50:	b2ca      	uxtb	r2, r1
 8001f52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dbf0      	blt.n	8001f44 <_read+0x12>
  }

  return len;
 8001f62:	687b      	ldr	r3, [r7, #4]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e009      	b.n	8001f92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	60ba      	str	r2, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dbf1      	blt.n	8001f7e <_write+0x12>
  }
  return len;
 8001f9a:	687b      	ldr	r3, [r7, #4]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_close>:

int _close(int file)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_isatty>:

int _isatty(int file)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f009 fe8c 	bl	800bd58 <__errno>
 8002040:	4603      	mov	r3, r0
 8002042:	220c      	movs	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20020000 	.word	0x20020000
 800206c:	00000400 	.word	0x00000400
 8002070:	200004d0 	.word	0x200004d0
 8002074:	20002208 	.word	0x20002208

08002078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <SystemInit+0x20>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <SystemInit+0x20>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a0:	f7ff ffea 	bl	8002078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f009 fe4b 	bl	800bd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7ff f8d9 	bl	8001284 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80020e0:	08010870 	.word	0x08010870
  ldr r2, =_sbss
 80020e4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80020e8:	20002208 	.word	0x20002208

080020ec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <DMA1_Stream0_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_Init+0x40>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_Init+0x40>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_Init+0x40>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 fe6b 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	200f      	movs	r0, #15
 8002120:	f000 f808 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff fd26 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_InitTick+0x54>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_InitTick+0x58>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	fbb3 f3f1 	udiv	r3, r3, r1
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fe83 	bl	8002e5e <HAL_SYSTICK_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00e      	b.n	8002180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d80a      	bhi.n	800217e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f000 fe4b 	bl	8002e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4a06      	ldr	r2, [pc, #24]	@ (8002190 <HAL_InitTick+0x5c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000004 	.word	0x20000004
 800218c:	2000000c 	.word	0x2000000c
 8002190:	20000008 	.word	0x20000008

08002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x20>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000000c 	.word	0x2000000c
 80021b8:	200004d4 	.word	0x200004d4

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_GetTick+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200004d4 	.word	0x200004d4

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffde 	bl	80021bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000000c 	.word	0x2000000c

0800221c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e033      	b.n	800229a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fcc2 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002262:	f023 0302 	bic.w	r3, r3, #2
 8002266:	f043 0202 	orr.w	r2, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fb68 	bl	8002944 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40
 800228a:	e001      	b.n	8002290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d049      	beq.n	800236c <HAL_ADC_IRQHandler+0xca>
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d046      	beq.n	800236c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d12b      	bne.n	800235c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d127      	bne.n	800235c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d119      	bne.n	800235c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0220 	bic.w	r2, r2, #32
 8002336:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fbed 	bl	8001b3c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0212 	mvn.w	r2, #18
 800236a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d057      	beq.n	8002432 <HAL_ADC_IRQHandler+0x190>
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d054      	beq.n	8002432 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d139      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d12b      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d124      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023fc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fc0c 	bl	8002c40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 020c 	mvn.w	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002440:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_ADC_IRQHandler+0x1d6>
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d014      	beq.n	8002478 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10d      	bne.n	8002478 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f925 	bl	80026b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0201 	mvn.w	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002486:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d015      	beq.n	80024ba <HAL_ADC_IRQHandler+0x218>
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f043 0202 	orr.w	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0220 	mvn.w	r2, #32
 80024a8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f90e 	bl	80026cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0220 	mvn.w	r2, #32
 80024b8:	601a      	str	r2, [r3, #0]
  }
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x1e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0ce      	b.n	8002680 <HAL_ADC_Start_DMA+0x1bc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d018      	beq.n	800252a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002508:	4b5f      	ldr	r3, [pc, #380]	@ (8002688 <HAL_ADC_Start_DMA+0x1c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <HAL_ADC_Start_DMA+0x1c8>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9a      	lsrs	r2, r3, #18
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800251c:	e002      	b.n	8002524 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	3b01      	subs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002538:	d107      	bne.n	800254a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002548:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 8086 	bne.w	8002666 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f023 0206 	bic.w	r2, r3, #6
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80025a6:	e002      	b.n	80025ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_ADC_Start_DMA+0x1cc>)
 80025b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025be:	4a35      	ldr	r2, [pc, #212]	@ (8002694 <HAL_ADC_Start_DMA+0x1d0>)
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c6:	4a34      	ldr	r2, [pc, #208]	@ (8002698 <HAL_ADC_Start_DMA+0x1d4>)
 80025c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	4a33      	ldr	r2, [pc, #204]	@ (800269c <HAL_ADC_Start_DMA+0x1d8>)
 80025d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025ea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	334c      	adds	r3, #76	@ 0x4c
 8002606:	4619      	mov	r1, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f000 fce2 	bl	8002fd4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d129      	bne.n	800267e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	e020      	b.n	800267e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_ADC_Start_DMA+0x1dc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11b      	bne.n	800267e <HAL_ADC_Start_DMA+0x1ba>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d114      	bne.n	800267e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e00b      	b.n	800267e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000004 	.word	0x20000004
 800268c:	431bde83 	.word	0x431bde83
 8002690:	40012300 	.word	0x40012300
 8002694:	08002b3d 	.word	0x08002b3d
 8002698:	08002bf7 	.word	0x08002bf7
 800269c:	08002c13 	.word	0x08002c13
 80026a0:	40012000 	.word	0x40012000

080026a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e113      	b.n	8002924 <HAL_ADC_ConfigChannel+0x244>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d925      	bls.n	8002758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68d9      	ldr	r1, [r3, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	4603      	mov	r3, r0
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4403      	add	r3, r0
 800274a:	3b1e      	subs	r3, #30
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e022      	b.n	800279e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	2207      	movs	r2, #7
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	4603      	mov	r3, r0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4403      	add	r3, r0
 8002794:	409a      	lsls	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b05      	subs	r3, #5
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ee:	e04c      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d824      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	@ 0x23
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	@ 0x23
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e023      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b41      	subs	r3, #65	@ 0x41
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b41      	subs	r3, #65	@ 0x41
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288a:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_ADC_ConfigChannel+0x250>)
 800288c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <HAL_ADC_ConfigChannel+0x254>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10f      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d10b      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_ADC_ConfigChannel+0x254>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12b      	bne.n	800291a <HAL_ADC_ConfigChannel+0x23a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_ADC_ConfigChannel+0x258>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x1f4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b11      	cmp	r3, #17
 80028d2:	d122      	bne.n	800291a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <HAL_ADC_ConfigChannel+0x258>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d111      	bne.n	800291a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_ADC_ConfigChannel+0x25c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <HAL_ADC_ConfigChannel+0x260>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	0c9a      	lsrs	r2, r3, #18
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800290c:	e002      	b.n	8002914 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40012300 	.word	0x40012300
 8002934:	40012000 	.word	0x40012000
 8002938:	10000012 	.word	0x10000012
 800293c:	20000004 	.word	0x20000004
 8002940:	431bde83 	.word	0x431bde83

08002944 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294c:	4b79      	ldr	r3, [pc, #484]	@ (8002b34 <ADC_Init+0x1f0>)
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800299c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <ADC_Init+0x1f4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6899      	ldr	r1, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e00f      	b.n	8002a42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0202 	bic.w	r2, r2, #2
 8002a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e1b      	ldrb	r3, [r3, #24]
 8002a5c:	005a      	lsls	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	035a      	lsls	r2, r3, #13
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e007      	b.n	8002ab8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	051a      	lsls	r2, r3, #20
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002afa:	025a      	lsls	r2, r3, #9
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	029a      	lsls	r2, r3, #10
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40012300 	.word	0x40012300
 8002b38:	0f000001 	.word	0x0f000001

08002b3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d13c      	bne.n	8002bd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d12b      	bne.n	8002bc8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d127      	bne.n	8002bc8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d119      	bne.n	8002bc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0220 	bic.w	r2, r2, #32
 8002ba2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7fe ffb7 	bl	8001b3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bce:	e00e      	b.n	8002bee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff fd75 	bl	80026cc <HAL_ADC_ErrorCallback>
}
 8002be2:	e004      	b.n	8002bee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fd4d 	bl	80026a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	@ 0x40
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	f043 0204 	orr.w	r2, r3, #4
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fd4a 	bl	80026cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	@ (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	@ (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	@ (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	@ 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00f      	b.n	8002de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <SysTick_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dce:	210f      	movs	r1, #15
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f7ff ff8e 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <SysTick_Config+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dde:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <SysTick_Config+0x40>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff29 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1c:	f7ff ff3e 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f7ff ff8e 	bl	8002d48 <NVIC_EncodePriority>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff5d 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff31 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ffa2 	bl	8002db0 <SysTick_Config>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff f99a 	bl	80021bc <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e099      	b.n	8002fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb4:	e00f      	b.n	8002ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb6:	f7ff f981 	bl	80021bc <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d908      	bls.n	8002ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e078      	b.n	8002fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e8      	bne.n	8002eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4b38      	ldr	r3, [pc, #224]	@ (8002fd0 <HAL_DMA_Init+0x158>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d117      	bne.n	8002f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa6f 	bl	8003460 <DMA_CheckFifoParam>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2240      	movs	r2, #64	@ 0x40
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f96:	2301      	movs	r3, #1
 8002f98:	e016      	b.n	8002fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa26 	bl	80033f4 <DMA_CalcBaseAndBitshift>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	223f      	movs	r2, #63	@ 0x3f
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	f010803f 	.word	0xf010803f

08002fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_DMA_Start_IT+0x26>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e040      	b.n	800307c <HAL_DMA_Start_IT+0xa8>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d12f      	bne.n	800306e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9b8 	bl	8003398 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	223f      	movs	r2, #63	@ 0x3f
 800302e:	409a      	lsls	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0216 	orr.w	r2, r2, #22
 8003042:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0208 	orr.w	r2, r2, #8
 800305a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e005      	b.n	800307a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003090:	4b8e      	ldr	r3, [pc, #568]	@ (80032cc <HAL_DMA_IRQHandler+0x248>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a8e      	ldr	r2, [pc, #568]	@ (80032d0 <HAL_DMA_IRQHandler+0x24c>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a9b      	lsrs	r3, r3, #10
 800309c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	2208      	movs	r2, #8
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01a      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	2208      	movs	r2, #8
 80030de:	409a      	lsls	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	2201      	movs	r2, #1
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d012      	beq.n	8003126 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2201      	movs	r2, #1
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	2204      	movs	r2, #4
 800312c:	409a      	lsls	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d012      	beq.n	800315c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	2204      	movs	r2, #4
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	2210      	movs	r2, #16
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d043      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d03c      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2210      	movs	r2, #16
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d018      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d108      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d024      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
 80031b2:	e01f      	b.n	80031f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01b      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e016      	b.n	80031f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0208 	bic.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	2220      	movs	r2, #32
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 808f 	beq.w	8003324 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8087 	beq.w	8003324 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2220      	movs	r2, #32
 800321c:	409a      	lsls	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b05      	cmp	r3, #5
 800322c:	d136      	bne.n	800329c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0216 	bic.w	r2, r2, #22
 800323c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800324c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_DMA_IRQHandler+0x1da>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0208 	bic.w	r2, r2, #8
 800326c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	223f      	movs	r2, #63	@ 0x3f
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328e:	2b00      	cmp	r3, #0
 8003290:	d07e      	beq.n	8003390 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
        }
        return;
 800329a:	e079      	b.n	8003390 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01d      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d031      	beq.n	8003324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
 80032c8:	e02c      	b.n	8003324 <HAL_DMA_IRQHandler+0x2a0>
 80032ca:	bf00      	nop
 80032cc:	20000004 	.word	0x20000004
 80032d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d023      	beq.n	8003324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
 80032e4:	e01e      	b.n	8003324 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10f      	bne.n	8003314 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0210 	bic.w	r2, r2, #16
 8003302:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	d032      	beq.n	8003392 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d022      	beq.n	800337e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2205      	movs	r2, #5
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3301      	adds	r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	d307      	bcc.n	800336c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f2      	bne.n	8003350 <HAL_DMA_IRQHandler+0x2cc>
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800336c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e000      	b.n	8003392 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003390:	bf00      	nop
    }
  }
}
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b40      	cmp	r3, #64	@ 0x40
 80033c4:	d108      	bne.n	80033d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033d6:	e007      	b.n	80033e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	3b10      	subs	r3, #16
 8003404:	4a14      	ldr	r2, [pc, #80]	@ (8003458 <DMA_CalcBaseAndBitshift+0x64>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800340e:	4a13      	ldr	r2, [pc, #76]	@ (800345c <DMA_CalcBaseAndBitshift+0x68>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d909      	bls.n	8003436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58
 8003434:	e007      	b.n	8003446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	aaaaaaab 	.word	0xaaaaaaab
 800345c:	080103f8 	.word	0x080103f8

08003460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11f      	bne.n	80034ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d856      	bhi.n	800352e <DMA_CheckFifoParam+0xce>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <DMA_CheckFifoParam+0x28>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	08003499 	.word	0x08003499
 800348c:	080034ab 	.word	0x080034ab
 8003490:	08003499 	.word	0x08003499
 8003494:	0800352f 	.word	0x0800352f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d046      	beq.n	8003532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a8:	e043      	b.n	8003532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034b2:	d140      	bne.n	8003536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b8:	e03d      	b.n	8003536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c2:	d121      	bne.n	8003508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d837      	bhi.n	800353a <DMA_CheckFifoParam+0xda>
 80034ca:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <DMA_CheckFifoParam+0x70>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034e7 	.word	0x080034e7
 80034d8:	080034e1 	.word	0x080034e1
 80034dc:	080034f9 	.word	0x080034f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e030      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d025      	beq.n	800353e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f6:	e022      	b.n	800353e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003500:	d11f      	bne.n	8003542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003506:	e01c      	b.n	8003542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d903      	bls.n	8003516 <DMA_CheckFifoParam+0xb6>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d003      	beq.n	800351c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003514:	e018      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      break;
 800351a:	e015      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00e      	beq.n	8003546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e00b      	b.n	8003546 <DMA_CheckFifoParam+0xe6>
      break;
 800352e:	bf00      	nop
 8003530:	e00a      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;
 8003532:	bf00      	nop
 8003534:	e008      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;
 8003536:	bf00      	nop
 8003538:	e006      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;
 800353a:	bf00      	nop
 800353c:	e004      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;   
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
    }
  } 
  
  return status; 
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e159      	b.n	8003828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	f040 8148 	bne.w	8003822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d005      	beq.n	80035aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d130      	bne.n	800360c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 0201 	and.w	r2, r3, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b03      	cmp	r3, #3
 8003616:	d017      	beq.n	8003648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d123      	bne.n	800369c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	08da      	lsrs	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3208      	adds	r2, #8
 800365c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	220f      	movs	r2, #15
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a2 	beq.w	8003822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b57      	ldr	r3, [pc, #348]	@ (8003840 <HAL_GPIO_Init+0x2e8>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	4a56      	ldr	r2, [pc, #344]	@ (8003840 <HAL_GPIO_Init+0x2e8>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ee:	4b54      	ldr	r3, [pc, #336]	@ (8003840 <HAL_GPIO_Init+0x2e8>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fa:	4a52      	ldr	r2, [pc, #328]	@ (8003844 <HAL_GPIO_Init+0x2ec>)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3302      	adds	r3, #2
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a49      	ldr	r2, [pc, #292]	@ (8003848 <HAL_GPIO_Init+0x2f0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d019      	beq.n	800375a <HAL_GPIO_Init+0x202>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a48      	ldr	r2, [pc, #288]	@ (800384c <HAL_GPIO_Init+0x2f4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_GPIO_Init+0x1fe>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a47      	ldr	r2, [pc, #284]	@ (8003850 <HAL_GPIO_Init+0x2f8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00d      	beq.n	8003752 <HAL_GPIO_Init+0x1fa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a46      	ldr	r2, [pc, #280]	@ (8003854 <HAL_GPIO_Init+0x2fc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <HAL_GPIO_Init+0x1f6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a45      	ldr	r2, [pc, #276]	@ (8003858 <HAL_GPIO_Init+0x300>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_GPIO_Init+0x1f2>
 8003746:	2304      	movs	r3, #4
 8003748:	e008      	b.n	800375c <HAL_GPIO_Init+0x204>
 800374a:	2307      	movs	r3, #7
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x204>
 800374e:	2303      	movs	r3, #3
 8003750:	e004      	b.n	800375c <HAL_GPIO_Init+0x204>
 8003752:	2302      	movs	r3, #2
 8003754:	e002      	b.n	800375c <HAL_GPIO_Init+0x204>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x204>
 800375a:	2300      	movs	r3, #0
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f002 0203 	and.w	r2, r2, #3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376c:	4935      	ldr	r1, [pc, #212]	@ (8003844 <HAL_GPIO_Init+0x2ec>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377a:	4b38      	ldr	r3, [pc, #224]	@ (800385c <HAL_GPIO_Init+0x304>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379e:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a4:	4b2d      	ldr	r3, [pc, #180]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c8:	4a24      	ldr	r2, [pc, #144]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ce:	4b23      	ldr	r3, [pc, #140]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f2:	4a1a      	ldr	r2, [pc, #104]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f8:	4b18      	ldr	r3, [pc, #96]	@ (800385c <HAL_GPIO_Init+0x304>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381c:	4a0f      	ldr	r2, [pc, #60]	@ (800385c <HAL_GPIO_Init+0x304>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	f67f aea2 	bls.w	8003574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	40013800 	.word	0x40013800
 8003848:	40020000 	.word	0x40020000
 800384c:	40020400 	.word	0x40020400
 8003850:	40020800 	.word	0x40020800
 8003854:	40020c00 	.word	0x40020c00
 8003858:	40021000 	.word	0x40021000
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e001      	b.n	8003882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038ac:	e003      	b.n	80038b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	041a      	lsls	r2, r3, #16
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43d9      	mvns	r1, r3
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	400b      	ands	r3, r1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e12b      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe f9d0 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800395a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800395c:	f002 faec 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a81      	ldr	r2, [pc, #516]	@ (8003b6c <HAL_I2C_Init+0x274>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d807      	bhi.n	800397c <HAL_I2C_Init+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a80      	ldr	r2, [pc, #512]	@ (8003b70 <HAL_I2C_Init+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e006      	b.n	800398a <HAL_I2C_Init+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b74 <HAL_I2C_Init+0x27c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e7      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a78      	ldr	r2, [pc, #480]	@ (8003b78 <HAL_I2C_Init+0x280>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b6c <HAL_I2C_Init+0x274>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d802      	bhi.n	80039cc <HAL_I2C_Init+0xd4>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e009      	b.n	80039e0 <HAL_I2C_Init+0xe8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a69      	ldr	r2, [pc, #420]	@ (8003b7c <HAL_I2C_Init+0x284>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	3301      	adds	r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	495c      	ldr	r1, [pc, #368]	@ (8003b6c <HAL_I2C_Init+0x274>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d819      	bhi.n	8003a34 <HAL_I2C_Init+0x13c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e59      	subs	r1, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_Init+0x138>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	e051      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e04f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_I2C_Init+0x168>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_I2C_Init+0x18e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x196>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_Init+0x1bc>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e58      	subs	r0, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab2:	e00f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	000186a0 	.word	0x000186a0
 8003b70:	001e847f 	.word	0x001e847f
 8003b74:	003d08ff 	.word	0x003d08ff
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	10624dd3 	.word	0x10624dd3

08003b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
 8003b90:	4613      	mov	r3, r2
 8003b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7fe fb12 	bl	80021bc <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	f040 80e0 	bne.w	8003d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4970      	ldr	r1, [pc, #448]	@ (8003d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f964 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0d3      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x50>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0cc      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d007      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	@ 0x21
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a50      	ldr	r2, [pc, #320]	@ (8003d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f89c 	bl	8003d7c <I2C_MasterRequestWrite>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08d      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c64:	e066      	b.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa22 	bl	80040b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6a39      	ldr	r1, [r7, #32]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa19 	bl	8004144 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d107      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e01a      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d194      	bne.n	8003c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d006      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d003      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003da4:	d108      	bne.n	8003db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e00b      	b.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d107      	bne.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f84f 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df6:	d103      	bne.n	8003e00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e035      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0c:	d108      	bne.n	8003e20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e01b      	b.n	8003e58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e20:	897b      	ldrh	r3, [r7, #10]
 8003e22:	11db      	asrs	r3, r3, #7
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0306 	and.w	r3, r3, #6
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f063 030f 	orn	r3, r3, #15
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	490e      	ldr	r1, [pc, #56]	@ (8003e78 <I2C_MasterRequestWrite+0xfc>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f898 	bl	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e010      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4907      	ldr	r1, [pc, #28]	@ (8003e7c <I2C_MasterRequestWrite+0x100>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f888 	bl	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	00010008 	.word	0x00010008
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	e048      	b.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d044      	beq.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe f98f 	bl	80021bc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d139      	bne.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10d      	bne.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	e00c      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d116      	bne.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e023      	b.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10d      	bne.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	e00c      	b.n	8003f64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d093      	beq.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f82:	e071      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f92:	d123      	bne.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e067      	b.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d041      	beq.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fe f8ea 	bl	80021bc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d136      	bne.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10c      	bne.n	800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e00b      	b.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e021      	b.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10c      	bne.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e00b      	b.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af6d 	bne.w	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c0:	e034      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f886 	bl	80041d4 <I2C_IsAcknowledgeFailed>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e034      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d028      	beq.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7fe f86f 	bl	80021bc <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11d      	bne.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b80      	cmp	r3, #128	@ 0x80
 80040fc:	d016      	beq.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d1c3      	bne.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004150:	e034      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f83e 	bl	80041d4 <I2C_IsAcknowledgeFailed>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e034      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d028      	beq.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe f827 	bl	80021bc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11d      	bne.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d016      	beq.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e007      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d1c3      	bne.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ea:	d11b      	bne.n	8004224 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af02      	add	r7, sp, #8
 8004238:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e101      	b.n	8004448 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f006 fa8c 	bl	800a77c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004272:	d102      	bne.n	800427a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f002 fed9 	bl	8007036 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7c1a      	ldrb	r2, [r3, #16]
 800428c:	f88d 2000 	strb.w	r2, [sp]
 8004290:	3304      	adds	r3, #4
 8004292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004294:	f002 fdb8 	bl	8006e08 <USB_CoreInit>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0ce      	b.n	8004448 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f002 fed1 	bl	8007058 <USB_SetCurrentMode>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0bf      	b.n	8004448 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	e04a      	b.n	8004364 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3315      	adds	r3, #21
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3314      	adds	r3, #20
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	b298      	uxth	r0, r3
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	332e      	adds	r3, #46	@ 0x2e
 800430a:	4602      	mov	r2, r0
 800430c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3318      	adds	r3, #24
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	331c      	adds	r3, #28
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3320      	adds	r3, #32
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3301      	adds	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3af      	bcc.n	80042ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e044      	b.n	80043fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043cc:	7bfa      	ldrb	r2, [r7, #15]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	3301      	adds	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	791b      	ldrb	r3, [r3, #4]
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	429a      	cmp	r2, r3
 8004406:	d3b5      	bcc.n	8004374 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7c1a      	ldrb	r2, [r3, #16]
 8004410:	f88d 2000 	strb.w	r2, [sp]
 8004414:	3304      	adds	r3, #4
 8004416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004418:	f002 fe6a 	bl	80070f0 <USB_DevInit>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e00c      	b.n	8004448 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f003 feb4 	bl	80081ae <USB_DevDisconnect>

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_PCD_Start+0x1c>
 8004468:	2302      	movs	r3, #2
 800446a:	e022      	b.n	80044b2 <HAL_PCD_Start+0x62>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f002 fdbb 	bl	8007014 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f003 fe62 	bl	800816c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044ba:	b590      	push	{r4, r7, lr}
 80044bc:	b08d      	sub	sp, #52	@ 0x34
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f003 ff20 	bl	8008316 <USB_GetMode>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 848c 	bne.w	8004df6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 fe84 	bl	80081f0 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8482 	beq.w	8004df4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f003 fe71 	bl	80081f0 <USB_ReadInterrupts>
 800450e:	4603      	mov	r3, r0
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d107      	bne.n	8004528 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f002 0202 	and.w	r2, r2, #2
 8004526:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f003 fe5f 	bl	80081f0 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d161      	bne.n	8004600 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0210 	bic.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	0c5b      	lsrs	r3, r3, #17
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2b02      	cmp	r3, #2
 8004576:	d124      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d035      	beq.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800458e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6a38      	ldr	r0, [r7, #32]
 8004598:	f003 fc96 	bl	8007ec8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045a8:	441a      	add	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ba:	441a      	add	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	615a      	str	r2, [r3, #20]
 80045c0:	e016      	b.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	0c5b      	lsrs	r3, r3, #17
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d110      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045d4:	2208      	movs	r2, #8
 80045d6:	4619      	mov	r1, r3
 80045d8:	6a38      	ldr	r0, [r7, #32]
 80045da:	f003 fc75 	bl	8007ec8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ea:	441a      	add	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0210 	orr.w	r2, r2, #16
 80045fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f003 fdf3 	bl	80081f0 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004614:	f040 80a7 	bne.w	8004766 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fdf8 	bl	8008216 <USB_ReadDevAllOutEpInterrupt>
 8004626:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004628:	e099      	b.n	800475e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808e 	beq.w	8004752 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f003 fe1c 	bl	800827e <USB_ReadDevOutEPInterrupt>
 8004646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2301      	movs	r3, #1
 8004662:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fea4 	bl	80053b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	2308      	movs	r3, #8
 8004686:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 ff7a 	bl	8005584 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	2310      	movs	r3, #16
 80046aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d030      	beq.n	8004718 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046be:	2b80      	cmp	r3, #128	@ 0x80
 80046c0:	d109      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d108      	bne.n	8004706 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f006 f937 	bl	800a974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2302      	movs	r3, #2
 8004716:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	2320      	movs	r3, #32
 8004732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f af62 	bne.w	800462a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f003 fd40 	bl	80081f0 <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004776:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800477a:	f040 80db 	bne.w	8004934 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fd61 	bl	800824a <USB_ReadDevAllInEpInterrupt>
 8004788:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800478e:	e0cd      	b.n	800492c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80c2 	beq.w	8004920 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 fd87 	bl	80082ba <USB_ReadDevInEPInterrupt>
 80047ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d057      	beq.n	8004868 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047d8:	4013      	ands	r3, r2
 80047da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e8:	461a      	mov	r2, r3
 80047ea:	2301      	movs	r3, #1
 80047ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	799b      	ldrb	r3, [r3, #6]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d132      	bne.n	800485c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3320      	adds	r3, #32
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	331c      	adds	r3, #28
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4419      	add	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4403      	add	r3, r0
 800482a:	3320      	adds	r3, #32
 800482c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d113      	bne.n	800485c <HAL_PCD_IRQHandler+0x3a2>
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3324      	adds	r3, #36	@ 0x24
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004854:	461a      	mov	r2, r3
 8004856:	2101      	movs	r1, #1
 8004858:	f003 fd8e 	bl	8008378 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	b2db      	uxtb	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f006 f80b 	bl	800a87e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487e:	461a      	mov	r2, r3
 8004880:	2308      	movs	r3, #8
 8004882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	2310      	movs	r3, #16
 800489e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b6:	461a      	mov	r2, r3
 80048b8:	2340      	movs	r3, #64	@ 0x40
 80048ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d023      	beq.n	800490e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048c8:	6a38      	ldr	r0, [r7, #32]
 80048ca:	f002 fd75 	bl	80073b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	3310      	adds	r3, #16
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d108      	bne.n	80048fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f006 f84e 	bl	800a998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004908:	461a      	mov	r2, r3
 800490a:	2302      	movs	r3, #2
 800490c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fcbd 	bl	800529a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	f47f af2e 	bne.w	8004790 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f003 fc59 	bl	80081f0 <USB_ReadInterrupts>
 800493e:	4603      	mov	r3, r0
 8004940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004948:	d122      	bne.n	8004990 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004964:	2b01      	cmp	r3, #1
 8004966:	d108      	bne.n	800497a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004970:	2100      	movs	r1, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fea4 	bl	80056c0 <HAL_PCDEx_LPM_Callback>
 8004978:	e002      	b.n	8004980 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f005 ffec 	bl	800a958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800498e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f003 fc2b 	bl	80081f0 <USB_ReadInterrupts>
 800499a:	4603      	mov	r3, r0
 800499c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a4:	d112      	bne.n	80049cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f005 ffa8 	bl	800a90c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80049ca:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fc0d 	bl	80081f0 <USB_ReadInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	f040 80b7 	bne.w	8004b52 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2110      	movs	r1, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f002 fcda 	bl	80073b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a08:	e046      	b.n	8004a98 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a16:	461a      	mov	r2, r3
 8004a18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	3301      	adds	r3, #1
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	791b      	ldrb	r3, [r3, #4]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d3b2      	bcc.n	8004a0a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ab2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004ab6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	7bdb      	ldrb	r3, [r3, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d016      	beq.n	8004aee <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ad0:	f043 030b 	orr.w	r3, r3, #11
 8004ad4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae6:	f043 030b 	orr.w	r3, r3, #11
 8004aea:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aec:	e015      	b.n	8004b1a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004afc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b00:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004b04:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b14:	f043 030b 	orr.w	r3, r3, #11
 8004b18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b28:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f003 fc1b 	bl	8008378 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 fb4a 	bl	80081f0 <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b66:	d123      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fbe0 	bl	8008332 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 fc97 	bl	80074aa <USB_GetDevSpeed>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681c      	ldr	r4, [r3, #0]
 8004b88:	f001 f9ca 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b92:	461a      	mov	r2, r3
 8004b94:	4620      	mov	r0, r4
 8004b96:	f002 f99b 	bl	8006ed0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f005 fe97 	bl	800a8ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 fb1b 	bl	80081f0 <USB_ReadInterrupts>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d10a      	bne.n	8004bda <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f005 fe74 	bl	800a8b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f002 0208 	and.w	r2, r2, #8
 8004bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 fb06 	bl	80081f0 <USB_ReadInterrupts>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bea:	2b80      	cmp	r3, #128	@ 0x80
 8004bec:	d123      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfe:	e014      	b.n	8004c2a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d105      	bne.n	8004c24 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb0a 	bl	8005238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	3301      	adds	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d3e4      	bcc.n	8004c00 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 fad8 	bl	80081f0 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4a:	d13c      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c50:	e02b      	b.n	8004caa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3318      	adds	r3, #24
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d115      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da12      	bge.n	8004ca4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3317      	adds	r3, #23
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 faca 	bl	8005238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d3cd      	bcc.n	8004c52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f003 fa90 	bl	80081f0 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cda:	d156      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cdc:	2301      	movs	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce0:	e045      	b.n	8004d6e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d12e      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	da2b      	bge.n	8004d68 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d121      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d64:	6053      	str	r3, [r2, #4]
            break;
 8004d66:	e008      	b.n	8004d7a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d3b3      	bcc.n	8004ce2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 fa2e 	bl	80081f0 <USB_ReadInterrupts>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d10a      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f005 fe0b 	bl	800a9bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f003 fa18 	bl	80081f0 <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d115      	bne.n	8004df6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f005 fdfb 	bl	800a9d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	e000      	b.n	8004df6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004df4:	bf00      	nop
    }
  }
}
 8004df6:	3734      	adds	r7, #52	@ 0x34
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}

08004dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_PCD_SetAddress+0x1a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e012      	b.n	8004e3c <HAL_PCD_SetAddress+0x40>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f003 f977 	bl	8008120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	70fb      	strb	r3, [r7, #3]
 8004e56:	460b      	mov	r3, r1
 8004e58:	803b      	strh	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da0f      	bge.n	8004e8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	3310      	adds	r3, #16
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3304      	adds	r3, #4
 8004e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	705a      	strb	r2, [r3, #1]
 8004e88:	e00f      	b.n	8004eaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004eb6:	883b      	ldrh	r3, [r7, #0]
 8004eb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	78ba      	ldrb	r2, [r7, #2]
 8004ec4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ed8:	78bb      	ldrb	r3, [r7, #2]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d102      	bne.n	8004ee4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_PCD_EP_Open+0xae>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e00e      	b.n	8004f10 <HAL_PCD_EP_Open+0xcc>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f002 faf7 	bl	80074f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	da0f      	bge.n	8004f4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	3310      	adds	r3, #16
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	3304      	adds	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	705a      	strb	r2, [r3, #1]
 8004f4a:	e00f      	b.n	8004f6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 020f 	and.w	r2, r3, #15
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	3304      	adds	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_PCD_EP_Close+0x6e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e00e      	b.n	8004fa4 <HAL_PCD_EP_Close+0x8c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 fb35 	bl	8007604 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fbc:	7afb      	ldrb	r3, [r7, #11]
 8004fbe:	f003 020f 	and.w	r2, r3, #15
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	799b      	ldrb	r3, [r3, #6]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d102      	bne.n	8005008 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	799b      	ldrb	r3, [r3, #6]
 8005010:	461a      	mov	r2, r3
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	f002 fbd2 	bl	80077bc <USB_EPStartXfer>

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005044:	681b      	ldr	r3, [r3, #0]
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	460b      	mov	r3, r1
 8005060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005062:	7afb      	ldrb	r3, [r7, #11]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	3310      	adds	r3, #16
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2201      	movs	r2, #1
 8005090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	b2da      	uxtb	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	799b      	ldrb	r3, [r3, #6]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d102      	bne.n	80050ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	799b      	ldrb	r3, [r3, #6]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	f002 fb80 	bl	80077bc <USB_EPStartXfer>

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	7912      	ldrb	r2, [r2, #4]
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04f      	b.n	8005184 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da0f      	bge.n	800510c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 020f 	and.w	r2, r3, #15
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	3310      	adds	r3, #16
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	3304      	adds	r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	705a      	strb	r2, [r3, #1]
 800510a:	e00d      	b.n	8005128 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_PCD_EP_SetStall+0x82>
 8005144:	2302      	movs	r3, #2
 8005146:	e01d      	b.n	8005184 <HAL_PCD_EP_SetStall+0xbe>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	4618      	mov	r0, r3
 8005158:	f002 ff0e 	bl	8007f78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7999      	ldrb	r1, [r3, #6]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005174:	461a      	mov	r2, r3
 8005176:	f003 f8ff 	bl	8008378 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	7912      	ldrb	r2, [r2, #4]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e042      	b.n	8005230 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da0f      	bge.n	80051d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	3310      	adds	r3, #16
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	3304      	adds	r3, #4
 80051c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	705a      	strb	r2, [r3, #1]
 80051d0:	e00f      	b.n	80051f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	3304      	adds	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_PCD_EP_ClrStall+0x86>
 800520e:	2302      	movs	r3, #2
 8005210:	e00e      	b.n	8005230 <HAL_PCD_EP_ClrStall+0xa4>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f002 ff17 	bl	8008054 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005248:	2b00      	cmp	r3, #0
 800524a:	da0c      	bge.n	8005266 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	3310      	adds	r3, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	3304      	adds	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e00c      	b.n	8005280 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4413      	add	r3, r2
 800527c:	3304      	adds	r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fd36 	bl	8007cf8 <USB_EPStopXfer>
 800528c:	4603      	mov	r3, r0
 800528e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005290:	7afb      	ldrb	r3, [r7, #11]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b08a      	sub	sp, #40	@ 0x28
 800529e:	af02      	add	r7, sp, #8
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	3310      	adds	r3, #16
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	3304      	adds	r3, #4
 80052c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d901      	bls.n	80052d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d902      	bls.n	80052ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3303      	adds	r3, #3
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052f6:	e02a      	b.n	800534e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	429a      	cmp	r2, r3
 800530c:	d902      	bls.n	8005314 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3303      	adds	r3, #3
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68d9      	ldr	r1, [r3, #12]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4603      	mov	r3, r0
 8005330:	6978      	ldr	r0, [r7, #20]
 8005332:	f002 fd8b 	bl	8007e4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	441a      	add	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	441a      	add	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d809      	bhi.n	8005378 <PCD_WriteEmptyTxFifo+0xde>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800536c:	429a      	cmp	r2, r3
 800536e:	d203      	bcs.n	8005378 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1bf      	bne.n	80052f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d811      	bhi.n	80053a8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	2201      	movs	r2, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	43db      	mvns	r3, r3
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053a4:	4013      	ands	r3, r2
 80053a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	333c      	adds	r3, #60	@ 0x3c
 80053cc:	3304      	adds	r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	799b      	ldrb	r3, [r3, #6]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d17b      	bne.n	80054e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4a61      	ldr	r2, [pc, #388]	@ (800557c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f240 80b9 	bls.w	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80b3 	beq.w	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005416:	461a      	mov	r2, r3
 8005418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541c:	6093      	str	r3, [r2, #8]
 800541e:	e0a7      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	2320      	movs	r3, #32
 800543a:	6093      	str	r3, [r2, #8]
 800543c:	e098      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 8093 	bne.w	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4a4b      	ldr	r2, [pc, #300]	@ (800557c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d90f      	bls.n	8005472 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800546e:	6093      	str	r3, [r2, #8]
 8005470:	e07e      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	0159      	lsls	r1, r3, #5
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	440b      	add	r3, r1
 8005494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d114      	bne.n	80054d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054bc:	461a      	mov	r2, r3
 80054be:	2101      	movs	r1, #1
 80054c0:	f002 ff5a 	bl	8008378 <USB_EP0_OutStart>
 80054c4:	e006      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	441a      	add	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f005 f9b4 	bl	800a848 <HAL_PCD_DataOutStageCallback>
 80054e0:	e046      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d124      	bne.n	8005534 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	461a      	mov	r2, r3
 8005502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005506:	6093      	str	r3, [r2, #8]
 8005508:	e032      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2320      	movs	r3, #32
 8005524:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f005 f98b 	bl	800a848 <HAL_PCD_DataOutStageCallback>
 8005532:	e01d      	b.n	8005570 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d114      	bne.n	8005564 <PCD_EP_OutXfrComplete_int+0x1b0>
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800555c:	461a      	mov	r2, r3
 800555e:	2100      	movs	r1, #0
 8005560:	f002 ff0a 	bl	8008378 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f005 f96c 	bl	800a848 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	4f54300a 	.word	0x4f54300a
 8005580:	4f54310a 	.word	0x4f54310a

08005584 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	333c      	adds	r3, #60	@ 0x3c
 800559c:	3304      	adds	r3, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a15      	ldr	r2, [pc, #84]	@ (800560c <PCD_EP_OutSetupPacket_int+0x88>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d90e      	bls.n	80055d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d0:	461a      	mov	r2, r3
 80055d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f005 f923 	bl	800a824 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <PCD_EP_OutSetupPacket_int+0x88>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d90c      	bls.n	8005600 <PCD_EP_OutSetupPacket_int+0x7c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	799b      	ldrb	r3, [r3, #6]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d108      	bne.n	8005600 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055f8:	461a      	mov	r2, r3
 80055fa:	2101      	movs	r1, #1
 80055fc:	f002 febc 	bl	8008378 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	4f54300a 	.word	0x4f54300a

08005610 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
 800561c:	4613      	mov	r3, r2
 800561e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800562e:	883b      	ldrh	r3, [r7, #0]
 8005630:	0419      	lsls	r1, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	430a      	orrs	r2, r1
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28
 800563c:	e028      	b.n	8005690 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e00d      	b.n	800566e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	3340      	adds	r3, #64	@ 0x40
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	3301      	adds	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	3b01      	subs	r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	d3ec      	bcc.n	8005652 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005678:	883b      	ldrh	r3, [r7, #0]
 800567a:	0418      	lsls	r0, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	3b01      	subs	r3, #1
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4302      	orrs	r2, r0
 8005688:	3340      	adds	r3, #64	@ 0x40
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e267      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d075      	beq.n	80057e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056f6:	4b88      	ldr	r3, [pc, #544]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00c      	beq.n	800571c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005702:	4b85      	ldr	r3, [pc, #532]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800570a:	2b08      	cmp	r3, #8
 800570c:	d112      	bne.n	8005734 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570e:	4b82      	ldr	r3, [pc, #520]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800571a:	d10b      	bne.n	8005734 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	4b7e      	ldr	r3, [pc, #504]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05b      	beq.n	80057e0 <HAL_RCC_OscConfig+0x108>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d157      	bne.n	80057e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e242      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573c:	d106      	bne.n	800574c <HAL_RCC_OscConfig+0x74>
 800573e:	4b76      	ldr	r3, [pc, #472]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a75      	ldr	r2, [pc, #468]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <HAL_RCC_OscConfig+0xb0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0x98>
 8005756:	4b70      	ldr	r3, [pc, #448]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6f      	ldr	r2, [pc, #444]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800575c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b6d      	ldr	r3, [pc, #436]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6c      	ldr	r2, [pc, #432]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00b      	b.n	8005788 <HAL_RCC_OscConfig+0xb0>
 8005770:	4b69      	ldr	r3, [pc, #420]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a68      	ldr	r2, [pc, #416]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b66      	ldr	r3, [pc, #408]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a65      	ldr	r2, [pc, #404]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fc fd14 	bl	80021bc <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fc fd10 	bl	80021bc <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	@ 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e207      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0xc0>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fc fd00 	bl	80021bc <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fc fcfc 	bl	80021bc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	@ 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e1f3      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	4b51      	ldr	r3, [pc, #324]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0xe8>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d063      	beq.n	80058b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fa:	4b47      	ldr	r3, [pc, #284]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005802:	2b08      	cmp	r3, #8
 8005804:	d11c      	bne.n	8005840 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005806:	4b44      	ldr	r3, [pc, #272]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d116      	bne.n	8005840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005812:	4b41      	ldr	r3, [pc, #260]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_RCC_OscConfig+0x152>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e1c7      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582a:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4937      	ldr	r1, [pc, #220]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583e:	e03a      	b.n	80058b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005848:	4b34      	ldr	r3, [pc, #208]	@ (800591c <HAL_RCC_OscConfig+0x244>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc fcb5 	bl	80021bc <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005856:	f7fc fcb1 	bl	80021bc <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e1a8      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005868:	4b2b      	ldr	r3, [pc, #172]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f0      	beq.n	8005856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005874:	4b28      	ldr	r3, [pc, #160]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4925      	ldr	r1, [pc, #148]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]
 8005888:	e015      	b.n	80058b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588a:	4b24      	ldr	r3, [pc, #144]	@ (800591c <HAL_RCC_OscConfig+0x244>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fc fc94 	bl	80021bc <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005898:	f7fc fc90 	bl	80021bc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e187      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d036      	beq.n	8005930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ca:	4b15      	ldr	r3, [pc, #84]	@ (8005920 <HAL_RCC_OscConfig+0x248>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fc fc74 	bl	80021bc <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d8:	f7fc fc70 	bl	80021bc <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e167      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_RCC_OscConfig+0x240>)
 80058ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x200>
 80058f6:	e01b      	b.n	8005930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <HAL_RCC_OscConfig+0x248>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fe:	f7fc fc5d 	bl	80021bc <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	e00e      	b.n	8005924 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005906:	f7fc fc59 	bl	80021bc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d907      	bls.n	8005924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e150      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
 8005918:	40023800 	.word	0x40023800
 800591c:	42470000 	.word	0x42470000
 8005920:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005924:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ea      	bne.n	8005906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8097 	beq.w	8005a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005942:	4b81      	ldr	r3, [pc, #516]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10f      	bne.n	800596e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	4b7d      	ldr	r3, [pc, #500]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	4a7c      	ldr	r2, [pc, #496]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595c:	6413      	str	r3, [r2, #64]	@ 0x40
 800595e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596e:	4b77      	ldr	r3, [pc, #476]	@ (8005b4c <HAL_RCC_OscConfig+0x474>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d118      	bne.n	80059ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800597a:	4b74      	ldr	r3, [pc, #464]	@ (8005b4c <HAL_RCC_OscConfig+0x474>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a73      	ldr	r2, [pc, #460]	@ (8005b4c <HAL_RCC_OscConfig+0x474>)
 8005980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005986:	f7fc fc19 	bl	80021bc <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598e:	f7fc fc15 	bl	80021bc <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e10c      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b4c <HAL_RCC_OscConfig+0x474>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x2ea>
 80059b4:	4b64      	ldr	r3, [pc, #400]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b8:	4a63      	ldr	r2, [pc, #396]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c0:	e01c      	b.n	80059fc <HAL_RCC_OscConfig+0x324>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x30c>
 80059ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059d0:	f043 0304 	orr.w	r3, r3, #4
 80059d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059da:	4a5b      	ldr	r2, [pc, #364]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059e2:	e00b      	b.n	80059fc <HAL_RCC_OscConfig+0x324>
 80059e4:	4b58      	ldr	r3, [pc, #352]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e8:	4a57      	ldr	r2, [pc, #348]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f0:	4b55      	ldr	r3, [pc, #340]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f4:	4a54      	ldr	r2, [pc, #336]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fc fbda 	bl	80021bc <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fc fbd6 	bl	80021bc <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e0cb      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a22:	4b49      	ldr	r3, [pc, #292]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ee      	beq.n	8005a0c <HAL_RCC_OscConfig+0x334>
 8005a2e:	e014      	b.n	8005a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a30:	f7fc fbc4 	bl	80021bc <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fc fbc0 	bl	80021bc <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e0b5      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ee      	bne.n	8005a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d105      	bne.n	8005a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a60:	4b39      	ldr	r3, [pc, #228]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	4a38      	ldr	r2, [pc, #224]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a1 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a76:	4b34      	ldr	r3, [pc, #208]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d05c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d141      	bne.n	8005b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8a:	4b31      	ldr	r3, [pc, #196]	@ (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fc fb94 	bl	80021bc <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a98:	f7fc fb90 	bl	80021bc <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e087      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	491b      	ldr	r1, [pc, #108]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fc fb69 	bl	80021bc <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc fb65 	bl	80021bc <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e05c      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x416>
 8005b0c:	e054      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <HAL_RCC_OscConfig+0x478>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fc fb52 	bl	80021bc <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fc fb4e 	bl	80021bc <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e045      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2e:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <HAL_RCC_OscConfig+0x470>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x444>
 8005b3a:	e03d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e038      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ec>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d028      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d121      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11a      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b84:	4013      	ands	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800

08005bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0cc      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b68      	ldr	r3, [pc, #416]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90c      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b65      	ldr	r3, [pc, #404]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0b8      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c1c:	4b59      	ldr	r3, [pc, #356]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a58      	ldr	r2, [pc, #352]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c34:	4b53      	ldr	r3, [pc, #332]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a52      	ldr	r2, [pc, #328]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b50      	ldr	r3, [pc, #320]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	494d      	ldr	r1, [pc, #308]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d044      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c66:	4b47      	ldr	r3, [pc, #284]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d119      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e07f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c86:	4b3f      	ldr	r3, [pc, #252]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c96:	4b3b      	ldr	r3, [pc, #236]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e067      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b37      	ldr	r3, [pc, #220]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4934      	ldr	r1, [pc, #208]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb8:	f7fc fa80 	bl	80021bc <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fc fa7c 	bl	80021bc <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e04f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b25      	ldr	r3, [pc, #148]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d20c      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b20      	ldr	r3, [pc, #128]	@ (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e032      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d1c:	4b19      	ldr	r3, [pc, #100]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4916      	ldr	r1, [pc, #88]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d3a:	4b12      	ldr	r3, [pc, #72]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	490e      	ldr	r1, [pc, #56]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d4e:	f000 f821 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	490a      	ldr	r1, [pc, #40]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	5ccb      	ldrb	r3, [r1, r3]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a09      	ldr	r2, [pc, #36]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d6a:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fc f9e0 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023c00 	.word	0x40023c00
 8005d84:	40023800 	.word	0x40023800
 8005d88:	080103e0 	.word	0x080103e0
 8005d8c:	20000004 	.word	0x20000004
 8005d90:	20000008 	.word	0x20000008

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d98:	b090      	sub	sp, #64	@ 0x40
 8005d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dac:	4b59      	ldr	r3, [pc, #356]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 030c 	and.w	r3, r3, #12
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d00d      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f200 80a1 	bhi.w	8005f00 <HAL_RCC_GetSysClockFreq+0x16c>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d003      	beq.n	8005dce <HAL_RCC_GetSysClockFreq+0x3a>
 8005dc6:	e09b      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b53      	ldr	r3, [pc, #332]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dcc:	e09b      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dce:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8005dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dd2:	e098      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dde:	4b4d      	ldr	r3, [pc, #308]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d028      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dea:	4b4a      	ldr	r3, [pc, #296]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	099b      	lsrs	r3, r3, #6
 8005df0:	2200      	movs	r2, #0
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4b47      	ldr	r3, [pc, #284]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e00:	fb03 f201 	mul.w	r2, r3, r1
 8005e04:	2300      	movs	r3, #0
 8005e06:	fb00 f303 	mul.w	r3, r0, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4a43      	ldr	r2, [pc, #268]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e0e:	fba0 1202 	umull	r1, r2, r0, r2
 8005e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e14:	460a      	mov	r2, r1
 8005e16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1a:	4413      	add	r3, r2
 8005e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e20:	2200      	movs	r2, #0
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e2e:	f7fa ff33 	bl	8000c98 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4613      	mov	r3, r2
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3a:	e053      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3c:	4b35      	ldr	r3, [pc, #212]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	2200      	movs	r2, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	617a      	str	r2, [r7, #20]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e4e:	f04f 0b00 	mov.w	fp, #0
 8005e52:	4652      	mov	r2, sl
 8005e54:	465b      	mov	r3, fp
 8005e56:	f04f 0000 	mov.w	r0, #0
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	0159      	lsls	r1, r3, #5
 8005e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e64:	0150      	lsls	r0, r2, #5
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	ebb2 080a 	subs.w	r8, r2, sl
 8005e6e:	eb63 090b 	sbc.w	r9, r3, fp
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e86:	ebb2 0408 	subs.w	r4, r2, r8
 8005e8a:	eb63 0509 	sbc.w	r5, r3, r9
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	00eb      	lsls	r3, r5, #3
 8005e98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9c:	00e2      	lsls	r2, r4, #3
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	eb14 030a 	adds.w	r3, r4, sl
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	eb45 030b 	adc.w	r3, r5, fp
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eba:	4629      	mov	r1, r5
 8005ebc:	028b      	lsls	r3, r1, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	028a      	lsls	r2, r1, #10
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ece:	2200      	movs	r2, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	60fa      	str	r2, [r7, #12]
 8005ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed8:	f7fa fede 	bl	8000c98 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ef4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005efe:	e002      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3740      	adds	r7, #64	@ 0x40
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	016e3600 	.word	0x016e3600

08005f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000004 	.word	0x20000004

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a9b      	lsrs	r3, r3, #10
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	@ (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	080103f0 	.word	0x080103f0

08005f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fb fee4 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 fb5c 	bl	800665c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e041      	b.n	8006094 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f839 	bl	800609c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 fb0d 	bl	800665c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <HAL_TIM_PWM_Start+0x24>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e022      	b.n	800611a <HAL_TIM_PWM_Start+0x6a>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d109      	bne.n	80060ee <HAL_TIM_PWM_Start+0x3e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	bf14      	ite	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	2300      	moveq	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	e015      	b.n	800611a <HAL_TIM_PWM_Start+0x6a>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d109      	bne.n	8006108 <HAL_TIM_PWM_Start+0x58>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e008      	b.n	800611a <HAL_TIM_PWM_Start+0x6a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e068      	b.n	80061f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <HAL_TIM_PWM_Start+0x82>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006130:	e013      	b.n	800615a <HAL_TIM_PWM_Start+0xaa>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d104      	bne.n	8006142 <HAL_TIM_PWM_Start+0x92>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006140:	e00b      	b.n	800615a <HAL_TIM_PWM_Start+0xaa>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b08      	cmp	r3, #8
 8006146:	d104      	bne.n	8006152 <HAL_TIM_PWM_Start+0xa2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006150:	e003      	b.n	800615a <HAL_TIM_PWM_Start+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fdbd 	bl	8006ce2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a23      	ldr	r2, [pc, #140]	@ (80061fc <HAL_TIM_PWM_Start+0x14c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d107      	bne.n	8006182 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006180:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <HAL_TIM_PWM_Start+0x14c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIM_PWM_Start+0x10e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006194:	d013      	beq.n	80061be <HAL_TIM_PWM_Start+0x10e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <HAL_TIM_PWM_Start+0x150>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_PWM_Start+0x10e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a17      	ldr	r2, [pc, #92]	@ (8006204 <HAL_TIM_PWM_Start+0x154>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIM_PWM_Start+0x10e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a16      	ldr	r2, [pc, #88]	@ (8006208 <HAL_TIM_PWM_Start+0x158>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_PWM_Start+0x10e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a14      	ldr	r2, [pc, #80]	@ (800620c <HAL_TIM_PWM_Start+0x15c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d111      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d010      	beq.n	80061f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	e007      	b.n	80061f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40014000 	.word	0x40014000

08006210 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e041      	b.n	80062a8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f839 	bl	80062b0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f000 fa03 	bl	800665c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0208 	bic.w	r2, r2, #8
 8006264:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6819      	ldr	r1, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0ae      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b0c      	cmp	r3, #12
 80062ee:	f200 809f 	bhi.w	8006430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	08006431 	.word	0x08006431
 8006300:	08006431 	.word	0x08006431
 8006304:	08006431 	.word	0x08006431
 8006308:	0800636d 	.word	0x0800636d
 800630c:	08006431 	.word	0x08006431
 8006310:	08006431 	.word	0x08006431
 8006314:	08006431 	.word	0x08006431
 8006318:	080063af 	.word	0x080063af
 800631c:	08006431 	.word	0x08006431
 8006320:	08006431 	.word	0x08006431
 8006324:	08006431 	.word	0x08006431
 8006328:	080063ef 	.word	0x080063ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fa1e 	bl	8006774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6999      	ldr	r1, [r3, #24]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	619a      	str	r2, [r3, #24]
      break;
 800636a:	e064      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fa64 	bl	8006840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6999      	ldr	r1, [r3, #24]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	619a      	str	r2, [r3, #24]
      break;
 80063ac:	e043      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 faaf 	bl	8006918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0208 	orr.w	r2, r2, #8
 80063c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0204 	bic.w	r2, r2, #4
 80063d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69d9      	ldr	r1, [r3, #28]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	61da      	str	r2, [r3, #28]
      break;
 80063ec:	e023      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 faf9 	bl	80069ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69d9      	ldr	r1, [r3, #28]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	021a      	lsls	r2, r3, #8
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	61da      	str	r2, [r3, #28]
      break;
 800642e:	e002      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIM_ConfigClockSource+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e0b4      	b.n	80065ce <HAL_TIM_ConfigClockSource+0x186>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800648a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649c:	d03e      	beq.n	800651c <HAL_TIM_ConfigClockSource+0xd4>
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a2:	f200 8087 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064aa:	f000 8086 	beq.w	80065ba <HAL_TIM_ConfigClockSource+0x172>
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b2:	d87f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b70      	cmp	r3, #112	@ 0x70
 80064b6:	d01a      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0xa6>
 80064b8:	2b70      	cmp	r3, #112	@ 0x70
 80064ba:	d87b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b60      	cmp	r3, #96	@ 0x60
 80064be:	d050      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x11a>
 80064c0:	2b60      	cmp	r3, #96	@ 0x60
 80064c2:	d877      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b50      	cmp	r3, #80	@ 0x50
 80064c6:	d03c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0xfa>
 80064c8:	2b50      	cmp	r3, #80	@ 0x50
 80064ca:	d873      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b40      	cmp	r3, #64	@ 0x40
 80064ce:	d058      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x13a>
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d86f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b30      	cmp	r3, #48	@ 0x30
 80064d6:	d064      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064d8:	2b30      	cmp	r3, #48	@ 0x30
 80064da:	d86b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d060      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d867      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d05a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	e062      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064fe:	f000 fbd0 	bl	8006ca2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
      break;
 800651a:	e04f      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800652c:	f000 fbb9 	bl	8006ca2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800653e:	609a      	str	r2, [r3, #8]
      break;
 8006540:	e03c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fb2d 	bl	8006bae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2150      	movs	r1, #80	@ 0x50
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fb86 	bl	8006c6c <TIM_ITRx_SetConfig>
      break;
 8006560:	e02c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fb4c 	bl	8006c0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2160      	movs	r1, #96	@ 0x60
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fb76 	bl	8006c6c <TIM_ITRx_SetConfig>
      break;
 8006580:	e01c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fb0d 	bl	8006bae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2140      	movs	r1, #64	@ 0x40
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fb66 	bl	8006c6c <TIM_ITRx_SetConfig>
      break;
 80065a0:	e00c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fb5d 	bl	8006c6c <TIM_ITRx_SetConfig>
      break;
 80065b2:	e003      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e000      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_TIM_SlaveConfigSynchro+0x18>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e031      	b.n	8006652 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa43 	bl	8006a8c <TIM_SlaveTimer_SetConfig>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e018      	b.n	8006652 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800662e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800663e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3a      	ldr	r2, [pc, #232]	@ (8006758 <TIM_Base_SetConfig+0xfc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667a:	d00b      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a37      	ldr	r2, [pc, #220]	@ (800675c <TIM_Base_SetConfig+0x100>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a36      	ldr	r2, [pc, #216]	@ (8006760 <TIM_Base_SetConfig+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a35      	ldr	r2, [pc, #212]	@ (8006764 <TIM_Base_SetConfig+0x108>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d108      	bne.n	80066a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006758 <TIM_Base_SetConfig+0xfc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01b      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b4:	d017      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a28      	ldr	r2, [pc, #160]	@ (800675c <TIM_Base_SetConfig+0x100>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a27      	ldr	r2, [pc, #156]	@ (8006760 <TIM_Base_SetConfig+0x104>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00f      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a26      	ldr	r2, [pc, #152]	@ (8006764 <TIM_Base_SetConfig+0x108>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a25      	ldr	r2, [pc, #148]	@ (8006768 <TIM_Base_SetConfig+0x10c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a24      	ldr	r2, [pc, #144]	@ (800676c <TIM_Base_SetConfig+0x110>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a23      	ldr	r2, [pc, #140]	@ (8006770 <TIM_Base_SetConfig+0x114>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <TIM_Base_SetConfig+0xfc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d103      	bne.n	800672c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]
  }
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f023 0201 	bic.w	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 0302 	bic.w	r3, r3, #2
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a1c      	ldr	r2, [pc, #112]	@ (800683c <TIM_OC1_SetConfig+0xc8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10c      	bne.n	80067ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0308 	bic.w	r3, r3, #8
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f023 0304 	bic.w	r3, r3, #4
 80067e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a13      	ldr	r2, [pc, #76]	@ (800683c <TIM_OC1_SetConfig+0xc8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d111      	bne.n	8006816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40010000 	.word	0x40010000

08006840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f023 0210 	bic.w	r2, r3, #16
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0320 	bic.w	r3, r3, #32
 800688a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1e      	ldr	r2, [pc, #120]	@ (8006914 <TIM_OC2_SetConfig+0xd4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10d      	bne.n	80068bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a15      	ldr	r2, [pc, #84]	@ (8006914 <TIM_OC2_SetConfig+0xd4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d113      	bne.n	80068ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000

08006918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <TIM_OC3_SetConfig+0xd0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10d      	bne.n	8006992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800697c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a14      	ldr	r2, [pc, #80]	@ (80069e8 <TIM_OC3_SetConfig+0xd0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40010000 	.word	0x40010000

080069ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	031b      	lsls	r3, r3, #12
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a10      	ldr	r2, [pc, #64]	@ (8006a88 <TIM_OC4_SetConfig+0x9c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000

08006a8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b70      	cmp	r3, #112	@ 0x70
 8006ad4:	d01a      	beq.n	8006b0c <TIM_SlaveTimer_SetConfig+0x80>
 8006ad6:	2b70      	cmp	r3, #112	@ 0x70
 8006ad8:	d860      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006ada:	2b60      	cmp	r3, #96	@ 0x60
 8006adc:	d054      	beq.n	8006b88 <TIM_SlaveTimer_SetConfig+0xfc>
 8006ade:	2b60      	cmp	r3, #96	@ 0x60
 8006ae0:	d85c      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006ae2:	2b50      	cmp	r3, #80	@ 0x50
 8006ae4:	d046      	beq.n	8006b74 <TIM_SlaveTimer_SetConfig+0xe8>
 8006ae6:	2b50      	cmp	r3, #80	@ 0x50
 8006ae8:	d858      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d019      	beq.n	8006b22 <TIM_SlaveTimer_SetConfig+0x96>
 8006aee:	2b40      	cmp	r3, #64	@ 0x40
 8006af0:	d854      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006af2:	2b30      	cmp	r3, #48	@ 0x30
 8006af4:	d055      	beq.n	8006ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8006af6:	2b30      	cmp	r3, #48	@ 0x30
 8006af8:	d850      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d051      	beq.n	8006ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d84c      	bhi.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04d      	beq.n	8006ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8006b06:	2b10      	cmp	r3, #16
 8006b08:	d04b      	beq.n	8006ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8006b0a:	e047      	b.n	8006b9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1c:	f000 f8c1 	bl	8006ca2 <TIM_ETR_SetConfig>
      break;
 8006b20:	e040      	b.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d101      	bne.n	8006b2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e03b      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
      break;
 8006b72:	e017      	b.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b80:	461a      	mov	r2, r3
 8006b82:	f000 f814 	bl	8006bae <TIM_TI1_ConfigInputStage>
      break;
 8006b86:	e00d      	b.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b94:	461a      	mov	r2, r3
 8006b96:	f000 f839 	bl	8006c0c <TIM_TI2_ConfigInputStage>
      break;
 8006b9a:	e003      	b.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	e000      	b.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006ba2:	bf00      	nop
  }

  return status;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f023 0201 	bic.w	r2, r3, #1
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 030a 	bic.w	r3, r3, #10
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0210 	bic.w	r2, r3, #16
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	031b      	lsls	r3, r3, #12
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f043 0307 	orr.w	r3, r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	609a      	str	r2, [r3, #8]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	021a      	lsls	r2, r3, #8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	609a      	str	r2, [r3, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	401a      	ands	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e050      	b.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d013      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a16      	ldr	r2, [pc, #88]	@ (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10c      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40000c00 	.word	0x40000c00
 8006e04:	40014000 	.word	0x40014000

08006e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e08:	b084      	sub	sp, #16
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	f107 001c 	add.w	r0, r7, #28
 8006e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d123      	bne.n	8006e6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d105      	bne.n	8006e5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fae8 	bl	8008434 <USB_CoreReset>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]
 8006e68:	e01b      	b.n	8006ea2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fadc 	bl	8008434 <USB_CoreReset>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e94:	e005      	b.n	8006ea2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ea2:	7fbb      	ldrb	r3, [r7, #30]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10b      	bne.n	8006ec0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f043 0206 	orr.w	r2, r3, #6
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ecc:	b004      	add	sp, #16
 8006ece:	4770      	bx	lr

08006ed0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d165      	bne.n	8006fb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4a41      	ldr	r2, [pc, #260]	@ (8006fec <USB_SetTurnaroundTime+0x11c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d906      	bls.n	8006efa <USB_SetTurnaroundTime+0x2a>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4a40      	ldr	r2, [pc, #256]	@ (8006ff0 <USB_SetTurnaroundTime+0x120>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d202      	bcs.n	8006efa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e062      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ff0 <USB_SetTurnaroundTime+0x120>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d306      	bcc.n	8006f10 <USB_SetTurnaroundTime+0x40>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4a3b      	ldr	r2, [pc, #236]	@ (8006ff4 <USB_SetTurnaroundTime+0x124>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d202      	bcs.n	8006f10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f0a:	230e      	movs	r3, #14
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e057      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4a38      	ldr	r2, [pc, #224]	@ (8006ff4 <USB_SetTurnaroundTime+0x124>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d306      	bcc.n	8006f26 <USB_SetTurnaroundTime+0x56>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4a37      	ldr	r2, [pc, #220]	@ (8006ff8 <USB_SetTurnaroundTime+0x128>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d202      	bcs.n	8006f26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f20:	230d      	movs	r3, #13
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e04c      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4a33      	ldr	r2, [pc, #204]	@ (8006ff8 <USB_SetTurnaroundTime+0x128>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d306      	bcc.n	8006f3c <USB_SetTurnaroundTime+0x6c>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	4a32      	ldr	r2, [pc, #200]	@ (8006ffc <USB_SetTurnaroundTime+0x12c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d802      	bhi.n	8006f3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f36:	230c      	movs	r3, #12
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	e041      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006ffc <USB_SetTurnaroundTime+0x12c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d906      	bls.n	8006f52 <USB_SetTurnaroundTime+0x82>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a2e      	ldr	r2, [pc, #184]	@ (8007000 <USB_SetTurnaroundTime+0x130>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d802      	bhi.n	8006f52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f4c:	230b      	movs	r3, #11
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e036      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a2a      	ldr	r2, [pc, #168]	@ (8007000 <USB_SetTurnaroundTime+0x130>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d906      	bls.n	8006f68 <USB_SetTurnaroundTime+0x98>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	@ (8007004 <USB_SetTurnaroundTime+0x134>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d802      	bhi.n	8006f68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f62:	230a      	movs	r3, #10
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e02b      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a26      	ldr	r2, [pc, #152]	@ (8007004 <USB_SetTurnaroundTime+0x134>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d906      	bls.n	8006f7e <USB_SetTurnaroundTime+0xae>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a25      	ldr	r2, [pc, #148]	@ (8007008 <USB_SetTurnaroundTime+0x138>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d202      	bcs.n	8006f7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f78:	2309      	movs	r3, #9
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e020      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a21      	ldr	r2, [pc, #132]	@ (8007008 <USB_SetTurnaroundTime+0x138>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d306      	bcc.n	8006f94 <USB_SetTurnaroundTime+0xc4>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a20      	ldr	r2, [pc, #128]	@ (800700c <USB_SetTurnaroundTime+0x13c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d802      	bhi.n	8006f94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f8e:	2308      	movs	r3, #8
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e015      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a1d      	ldr	r2, [pc, #116]	@ (800700c <USB_SetTurnaroundTime+0x13c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d906      	bls.n	8006faa <USB_SetTurnaroundTime+0xda>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007010 <USB_SetTurnaroundTime+0x140>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d202      	bcs.n	8006faa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fa4:	2307      	movs	r3, #7
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e00a      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006faa:	2306      	movs	r3, #6
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	e007      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fb6:	2309      	movs	r3, #9
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e001      	b.n	8006fc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fbc:	2309      	movs	r3, #9
 8006fbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	029b      	lsls	r3, r3, #10
 8006fd4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	00d8acbf 	.word	0x00d8acbf
 8006ff0:	00e4e1c0 	.word	0x00e4e1c0
 8006ff4:	00f42400 	.word	0x00f42400
 8006ff8:	01067380 	.word	0x01067380
 8006ffc:	011a499f 	.word	0x011a499f
 8007000:	01312cff 	.word	0x01312cff
 8007004:	014ca43f 	.word	0x014ca43f
 8007008:	016e3600 	.word	0x016e3600
 800700c:	01a6ab1f 	.word	0x01a6ab1f
 8007010:	01e84800 	.word	0x01e84800

08007014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f043 0201 	orr.w	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 0201 	bic.w	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d115      	bne.n	80070a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007086:	200a      	movs	r0, #10
 8007088:	f7fb f8a4 	bl	80021d4 <HAL_Delay>
      ms += 10U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	330a      	adds	r3, #10
 8007090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 f93f 	bl	8008316 <USB_GetMode>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d01e      	beq.n	80070dc <USB_SetCurrentMode+0x84>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80070a2:	d9f0      	bls.n	8007086 <USB_SetCurrentMode+0x2e>
 80070a4:	e01a      	b.n	80070dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d115      	bne.n	80070d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070b8:	200a      	movs	r0, #10
 80070ba:	f7fb f88b 	bl	80021d4 <HAL_Delay>
      ms += 10U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	330a      	adds	r3, #10
 80070c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f926 	bl	8008316 <USB_GetMode>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <USB_SetCurrentMode+0x84>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80070d4:	d9f0      	bls.n	80070b8 <USB_SetCurrentMode+0x60>
 80070d6:	e001      	b.n	80070dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e005      	b.n	80070e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2bc8      	cmp	r3, #200	@ 0xc8
 80070e0:	d101      	bne.n	80070e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070f0:	b084      	sub	sp, #16
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	e009      	b.n	8007124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3340      	adds	r3, #64	@ 0x40
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b0e      	cmp	r3, #14
 8007128:	d9f2      	bls.n	8007110 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800712a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800712e:	2b00      	cmp	r3, #0
 8007130:	d11c      	bne.n	800716c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007140:	f043 0302 	orr.w	r3, r3, #2
 8007144:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	@ 0x38
 800716a:	e00b      	b.n	8007184 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800718a:	461a      	mov	r2, r3
 800718c:	2300      	movs	r3, #0
 800718e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007190:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10d      	bne.n	80071b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071a0:	2100      	movs	r1, #0
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f968 	bl	8007478 <USB_SetDevSpeed>
 80071a8:	e008      	b.n	80071bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f963 	bl	8007478 <USB_SetDevSpeed>
 80071b2:	e003      	b.n	80071bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071b4:	2103      	movs	r1, #3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f95e 	bl	8007478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071bc:	2110      	movs	r1, #16
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8fa 	bl	80073b8 <USB_FlushTxFifo>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f924 	bl	800741c <USB_FlushRxFifo>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f0:	461a      	mov	r2, r3
 80071f2:	2300      	movs	r3, #0
 80071f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
 8007206:	e043      	b.n	8007290 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800721a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800721e:	d118      	bne.n	8007252 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007232:	461a      	mov	r2, r3
 8007234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e013      	b.n	8007264 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	461a      	mov	r2, r3
 800724a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e008      	b.n	8007264 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007270:	461a      	mov	r2, r3
 8007272:	2300      	movs	r3, #0
 8007274:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007282:	461a      	mov	r2, r3
 8007284:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3301      	adds	r3, #1
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007294:	461a      	mov	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4293      	cmp	r3, r2
 800729a:	d3b5      	bcc.n	8007208 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	e043      	b.n	800732a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072b8:	d118      	bne.n	80072ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072cc:	461a      	mov	r2, r3
 80072ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e013      	b.n	80072fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e2:	461a      	mov	r2, r3
 80072e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e008      	b.n	80072fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730a:	461a      	mov	r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731c:	461a      	mov	r2, r3
 800731e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007322:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3301      	adds	r3, #1
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800732e:	461a      	mov	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4293      	cmp	r3, r2
 8007334:	d3b5      	bcc.n	80072a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007348:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007356:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f043 0210 	orr.w	r2, r3, #16
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <USB_DevInit+0x2c4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007378:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f043 0208 	orr.w	r2, r3, #8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800738c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007390:	2b01      	cmp	r3, #1
 8007392:	d107      	bne.n	80073a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b0:	b004      	add	sp, #16
 80073b2:	4770      	bx	lr
 80073b4:	803c3800 	.word	0x803c3800

080073b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073d2:	d901      	bls.n	80073d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e01b      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	daf2      	bge.n	80073c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	019b      	lsls	r3, r3, #6
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073fc:	d901      	bls.n	8007402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e006      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b20      	cmp	r3, #32
 800740c:	d0f0      	beq.n	80073f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007434:	d901      	bls.n	800743a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e018      	b.n	800746c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	daf2      	bge.n	8007428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2210      	movs	r2, #16
 800744a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007458:	d901      	bls.n	800745e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e006      	b.n	800746c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0310 	and.w	r3, r3, #16
 8007466:	2b10      	cmp	r3, #16
 8007468:	d0f0      	beq.n	800744c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007498:	4313      	orrs	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0306 	and.w	r3, r3, #6
 80074c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
 80074ce:	e00a      	b.n	80074e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d002      	beq.n	80074dc <USB_GetDevSpeed+0x32>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b06      	cmp	r3, #6
 80074da:	d102      	bne.n	80074e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074dc:	2302      	movs	r3, #2
 80074de:	75fb      	strb	r3, [r7, #23]
 80074e0:	e001      	b.n	80074e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074e2:	230f      	movs	r3, #15
 80074e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d13a      	bne.n	8007586 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	2101      	movs	r1, #1
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800752e:	4313      	orrs	r3, r2
 8007530:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d155      	bne.n	80075f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	791b      	ldrb	r3, [r3, #4]
 8007562:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007564:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	059b      	lsls	r3, r3, #22
 800756a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800756c:	4313      	orrs	r3, r2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800757a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e036      	b.n	80075f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800758c:	69da      	ldr	r2, [r3, #28]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	2101      	movs	r1, #1
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11a      	bne.n	80075f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	791b      	ldrb	r3, [r3, #4]
 80075d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075da:	430b      	orrs	r3, r1
 80075dc:	4313      	orrs	r3, r2
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d161      	bne.n	80076e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007636:	d11f      	bne.n	8007678 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	440a      	add	r2, r1
 800764e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007652:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007656:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007672:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	2101      	movs	r1, #1
 800768a:	fa01 f303 	lsl.w	r3, r1, r3
 800768e:	b29b      	uxth	r3, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007698:	4013      	ands	r3, r2
 800769a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	2101      	movs	r1, #1
 80076ae:	fa01 f303 	lsl.w	r3, r1, r3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076bc:	4013      	ands	r3, r2
 80076be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	0159      	lsls	r1, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	440b      	add	r3, r1
 80076d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076da:	4619      	mov	r1, r3
 80076dc:	4b35      	ldr	r3, [pc, #212]	@ (80077b4 <USB_DeactivateEndpoint+0x1b0>)
 80076de:	4013      	ands	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]
 80076e2:	e060      	b.n	80077a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076fa:	d11f      	bne.n	800773c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007716:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800771a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007736:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800773a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	2101      	movs	r1, #1
 800774e:	fa01 f303 	lsl.w	r3, r1, r3
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	43db      	mvns	r3, r3
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800775c:	4013      	ands	r3, r2
 800775e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007766:	69da      	ldr	r2, [r3, #28]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	43db      	mvns	r3, r3
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007780:	4013      	ands	r3, r2
 8007782:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	0159      	lsls	r1, r3, #5
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	440b      	add	r3, r1
 800779a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779e:	4619      	mov	r1, r3
 80077a0:	4b05      	ldr	r3, [pc, #20]	@ (80077b8 <USB_DeactivateEndpoint+0x1b4>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	ec337800 	.word	0xec337800
 80077b8:	eff37800 	.word	0xeff37800

080077bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	@ 0x28
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	f040 817f 	bne.w	8007adc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d132      	bne.n	800784c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007800:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007804:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007824:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007844:	0cdb      	lsrs	r3, r3, #19
 8007846:	04db      	lsls	r3, r3, #19
 8007848:	6113      	str	r3, [r2, #16]
 800784a:	e097      	b.n	800797c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007866:	0cdb      	lsrs	r3, r3, #19
 8007868:	04db      	lsls	r3, r3, #19
 800786a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800788a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800788e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11a      	bne.n	80078cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d903      	bls.n	80078aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078c8:	6113      	str	r3, [r2, #16]
 80078ca:	e044      	b.n	8007956 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	4413      	add	r3, r2
 80078d6:	1e5a      	subs	r2, r3, #1
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	8afb      	ldrh	r3, [r7, #22]
 80078f2:	04d9      	lsls	r1, r3, #19
 80078f4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b88 <USB_EPStartXfer+0x3cc>)
 80078f6:	400b      	ands	r3, r1
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	0148      	lsls	r0, r1, #5
 80078fc:	69f9      	ldr	r1, [r7, #28]
 80078fe:	4401      	add	r1, r0
 8007900:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007904:	4313      	orrs	r3, r2
 8007906:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d122      	bne.n	8007956 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800792e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	8afb      	ldrh	r3, [r7, #22]
 8007940:	075b      	lsls	r3, r3, #29
 8007942:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007946:	69b9      	ldr	r1, [r7, #24]
 8007948:	0148      	lsls	r0, r1, #5
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	4401      	add	r1, r0
 800794e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007952:	4313      	orrs	r3, r2
 8007954:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800796c:	69b9      	ldr	r1, [r7, #24]
 800796e:	0148      	lsls	r0, r1, #5
 8007970:	69f9      	ldr	r1, [r7, #28]
 8007972:	4401      	add	r1, r0
 8007974:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007978:	4313      	orrs	r3, r2
 800797a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d14b      	bne.n	8007a1a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007996:	461a      	mov	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d128      	bne.n	80079f8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d110      	bne.n	80079d8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	e00f      	b.n	80079f8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079f6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e166      	b.n	8007ce8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a38:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d015      	beq.n	8007a6e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 814e 	beq.w	8007ce8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a62:	69f9      	ldr	r1, [r7, #28]
 8007a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	634b      	str	r3, [r1, #52]	@ 0x34
 8007a6c:	e13c      	b.n	8007ce8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d110      	bne.n	8007aa0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	e00f      	b.n	8007ac0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007abe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	68d9      	ldr	r1, [r3, #12]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781a      	ldrb	r2, [r3, #0]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	b298      	uxth	r0, r3
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f9b9 	bl	8007e4c <USB_WritePacket>
 8007ada:	e105      	b.n	8007ce8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af6:	0cdb      	lsrs	r3, r3, #19
 8007af8:	04db      	lsls	r3, r3, #19
 8007afa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b1e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d132      	bne.n	8007b8c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	0148      	lsls	r0, r1, #5
 8007b58:	69f9      	ldr	r1, [r7, #28]
 8007b5a:	4401      	add	r1, r0
 8007b5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b60:	4313      	orrs	r3, r2
 8007b62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b82:	6113      	str	r3, [r2, #16]
 8007b84:	e062      	b.n	8007c4c <USB_EPStartXfer+0x490>
 8007b86:	bf00      	nop
 8007b88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d123      	bne.n	8007bdc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007baa:	69b9      	ldr	r1, [r7, #24]
 8007bac:	0148      	lsls	r0, r1, #5
 8007bae:	69f9      	ldr	r1, [r7, #28]
 8007bb0:	4401      	add	r1, r0
 8007bb2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bd8:	6113      	str	r3, [r2, #16]
 8007bda:	e037      	b.n	8007c4c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	4413      	add	r3, r2
 8007be6:	1e5a      	subs	r2, r3, #1
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	8afa      	ldrh	r2, [r7, #22]
 8007bf8:	fb03 f202 	mul.w	r2, r3, r2
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	8afb      	ldrh	r3, [r7, #22]
 8007c10:	04d9      	lsls	r1, r3, #19
 8007c12:	4b38      	ldr	r3, [pc, #224]	@ (8007cf4 <USB_EPStartXfer+0x538>)
 8007c14:	400b      	ands	r3, r1
 8007c16:	69b9      	ldr	r1, [r7, #24]
 8007c18:	0148      	lsls	r0, r1, #5
 8007c1a:	69f9      	ldr	r1, [r7, #28]
 8007c1c:	4401      	add	r1, r0
 8007c1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c22:	4313      	orrs	r3, r2
 8007c24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c3c:	69b9      	ldr	r1, [r7, #24]
 8007c3e:	0148      	lsls	r0, r1, #5
 8007c40:	69f9      	ldr	r1, [r7, #28]
 8007c42:	4401      	add	r1, r0
 8007c44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10d      	bne.n	8007c6e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	68d9      	ldr	r1, [r3, #12]
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6a:	460a      	mov	r2, r1
 8007c6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d128      	bne.n	8007cc8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d110      	bne.n	8007ca8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ca0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e00f      	b.n	8007cc8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ce6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	1ff80000 	.word	0x1ff80000

08007cf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d14a      	bne.n	8007dac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d2e:	f040 8086 	bne.w	8007e3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	7812      	ldrb	r2, [r2, #0]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d902      	bls.n	8007d90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8e:	e056      	b.n	8007e3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da8:	d0e7      	beq.n	8007d7a <USB_EPStopXfer+0x82>
 8007daa:	e048      	b.n	8007e3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc4:	d13b      	bne.n	8007e3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	7812      	ldrb	r2, [r2, #0]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3301      	adds	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d902      	bls.n	8007e24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
          break;
 8007e22:	e00c      	b.n	8007e3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e3c:	d0e7      	beq.n	8007e0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	@ 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4611      	mov	r1, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	71fb      	strb	r3, [r7, #7]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d123      	bne.n	8007eba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e72:	88bb      	ldrh	r3, [r7, #4]
 8007e74:	3303      	adds	r3, #3
 8007e76:	089b      	lsrs	r3, r3, #2
 8007e78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61bb      	str	r3, [r7, #24]
 8007e7e:	e018      	b.n	8007eb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	031a      	lsls	r2, r3, #12
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	3301      	adds	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d3e2      	bcc.n	8007e80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3724      	adds	r7, #36	@ 0x24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b08b      	sub	sp, #44	@ 0x2c
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	089b      	lsrs	r3, r3, #2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	623b      	str	r3, [r7, #32]
 8007ef2:	e014      	b.n	8007f1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	3301      	adds	r3, #1
 8007f04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	3301      	adds	r3, #1
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	3301      	adds	r3, #1
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	3301      	adds	r3, #1
 8007f16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	623b      	str	r3, [r7, #32]
 8007f1e:	6a3a      	ldr	r2, [r7, #32]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d3e6      	bcc.n	8007ef4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f26:	8bfb      	ldrh	r3, [r7, #30]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01e      	beq.n	8007f6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f36:	461a      	mov	r2, r3
 8007f38:	f107 0310 	add.w	r3, r7, #16
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	701a      	strb	r2, [r3, #0]
      i++;
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	3301      	adds	r3, #1
 8007f56:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f5e:	8bfb      	ldrh	r3, [r7, #30]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f64:	8bfb      	ldrh	r3, [r7, #30]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1ea      	bne.n	8007f40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	372c      	adds	r7, #44	@ 0x2c
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d12c      	bne.n	8007fee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	db12      	blt.n	8007fcc <USB_EPSetStall+0x54>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00f      	beq.n	8007fcc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e02b      	b.n	8008046 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	db12      	blt.n	8008026 <USB_EPSetStall+0xae>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00f      	beq.n	8008026 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	440a      	add	r2, r1
 800801c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008020:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008024:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008044:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d128      	bne.n	80080c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800808a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800808e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d003      	beq.n	80080a0 <USB_EPClearStall+0x4c>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d138      	bne.n	8008112 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e027      	b.n	8008112 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	791b      	ldrb	r3, [r3, #4]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d003      	beq.n	80080f2 <USB_EPClearStall+0x9e>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d10f      	bne.n	8008112 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800810c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008110:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800813e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008142:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008154:	68f9      	ldr	r1, [r7, #12]
 8008156:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800815a:	4313      	orrs	r3, r2
 800815c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800819a:	f023 0302 	bic.w	r3, r3, #2
 800819e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081c8:	f023 0303 	bic.w	r3, r3, #3
 80081cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081dc:	f043 0302 	orr.w	r3, r3, #2
 80081e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4013      	ands	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008208:	68fb      	ldr	r3, [r7, #12]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	0c1b      	lsrs	r3, r3, #16
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	4013      	ands	r3, r2
 800826c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	b29b      	uxth	r3, r3
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4013      	ands	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ac:	68bb      	ldr	r3, [r7, #8]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	01db      	lsls	r3, r3, #7
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4013      	ands	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008308:	68bb      	ldr	r3, [r7, #8]
}
 800830a:	4618      	mov	r0, r3
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f003 0301 	and.w	r3, r3, #1
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800834c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	460b      	mov	r3, r1
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	333c      	adds	r3, #60	@ 0x3c
 800838e:	3304      	adds	r3, #4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	4a26      	ldr	r2, [pc, #152]	@ (8008430 <USB_EP0_OutStart+0xb8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d90a      	bls.n	80083b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ac:	d101      	bne.n	80083b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e037      	b.n	8008422 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b8:	461a      	mov	r2, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083e0:	f043 0318 	orr.w	r3, r3, #24
 80083e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80083f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d10f      	bne.n	8008420 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800841a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800841e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	4f54300a 	.word	0x4f54300a

08008434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800844c:	d901      	bls.n	8008452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e01b      	b.n	800848a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	daf2      	bge.n	8008440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f043 0201 	orr.w	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008476:	d901      	bls.n	800847c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e006      	b.n	800848a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d0f0      	beq.n	800846a <USB_CoreReset+0x36>

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80084a8:	f002 fc2e 	bl	800ad08 <USBD_static_malloc>
 80084ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32b0      	adds	r2, #176	@ 0xb0
 80084be:	2100      	movs	r1, #0
 80084c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084c4:	2302      	movs	r3, #2
 80084c6:	e0d4      	b.n	8008672 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80084cc:	2100      	movs	r1, #0
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f003 fbef 	bl	800bcb2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	32b0      	adds	r2, #176	@ 0xb0
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	32b0      	adds	r2, #176	@ 0xb0
 80084ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	7c1b      	ldrb	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d138      	bne.n	8008572 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008500:	4b5e      	ldr	r3, [pc, #376]	@ (800867c <USBD_CDC_Init+0x1e4>)
 8008502:	7819      	ldrb	r1, [r3, #0]
 8008504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008508:	2202      	movs	r2, #2
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f002 fad9 	bl	800aac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008510:	4b5a      	ldr	r3, [pc, #360]	@ (800867c <USBD_CDC_Init+0x1e4>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 020f 	and.w	r2, r3, #15
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3324      	adds	r3, #36	@ 0x24
 8008526:	2201      	movs	r2, #1
 8008528:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800852a:	4b55      	ldr	r3, [pc, #340]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 800852c:	7819      	ldrb	r1, [r3, #0]
 800852e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008532:	2202      	movs	r2, #2
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f002 fac4 	bl	800aac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800853a:	4b51      	ldr	r3, [pc, #324]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 020f 	and.w	r2, r3, #15
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008552:	2201      	movs	r2, #1
 8008554:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008556:	4b4b      	ldr	r3, [pc, #300]	@ (8008684 <USBD_CDC_Init+0x1ec>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 020f 	and.w	r2, r3, #15
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	3326      	adds	r3, #38	@ 0x26
 800856c:	2210      	movs	r2, #16
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	e035      	b.n	80085de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008572:	4b42      	ldr	r3, [pc, #264]	@ (800867c <USBD_CDC_Init+0x1e4>)
 8008574:	7819      	ldrb	r1, [r3, #0]
 8008576:	2340      	movs	r3, #64	@ 0x40
 8008578:	2202      	movs	r2, #2
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f002 faa1 	bl	800aac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008580:	4b3e      	ldr	r3, [pc, #248]	@ (800867c <USBD_CDC_Init+0x1e4>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3324      	adds	r3, #36	@ 0x24
 8008596:	2201      	movs	r2, #1
 8008598:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 800859c:	7819      	ldrb	r1, [r3, #0]
 800859e:	2340      	movs	r3, #64	@ 0x40
 80085a0:	2202      	movs	r2, #2
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f002 fa8d 	bl	800aac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085a8:	4b35      	ldr	r3, [pc, #212]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085c0:	2201      	movs	r2, #1
 80085c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008684 <USBD_CDC_Init+0x1ec>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 020f 	and.w	r2, r3, #15
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	3326      	adds	r3, #38	@ 0x26
 80085da:	2210      	movs	r2, #16
 80085dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085de:	4b29      	ldr	r3, [pc, #164]	@ (8008684 <USBD_CDC_Init+0x1ec>)
 80085e0:	7819      	ldrb	r1, [r3, #0]
 80085e2:	2308      	movs	r3, #8
 80085e4:	2203      	movs	r2, #3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f002 fa6b 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085ec:	4b25      	ldr	r3, [pc, #148]	@ (8008684 <USBD_CDC_Init+0x1ec>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 020f 	and.w	r2, r3, #15
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	3324      	adds	r3, #36	@ 0x24
 8008602:	2201      	movs	r2, #1
 8008604:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	33b0      	adds	r3, #176	@ 0xb0
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800863c:	2302      	movs	r3, #2
 800863e:	e018      	b.n	8008672 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7c1b      	ldrb	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008648:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 800864a:	7819      	ldrb	r1, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fb22 	bl	800aca0 <USBD_LL_PrepareReceive>
 800865c:	e008      	b.n	8008670 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800865e:	4b08      	ldr	r3, [pc, #32]	@ (8008680 <USBD_CDC_Init+0x1e8>)
 8008660:	7819      	ldrb	r1, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008668:	2340      	movs	r3, #64	@ 0x40
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f002 fb18 	bl	800aca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000097 	.word	0x20000097
 8008680:	20000098 	.word	0x20000098
 8008684:	20000099 	.word	0x20000099

08008688 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008694:	4b3a      	ldr	r3, [pc, #232]	@ (8008780 <USBD_CDC_DeInit+0xf8>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f002 fa37 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086a0:	4b37      	ldr	r3, [pc, #220]	@ (8008780 <USBD_CDC_DeInit+0xf8>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	f003 020f 	and.w	r2, r3, #15
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	440b      	add	r3, r1
 80086b4:	3324      	adds	r3, #36	@ 0x24
 80086b6:	2200      	movs	r2, #0
 80086b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086ba:	4b32      	ldr	r3, [pc, #200]	@ (8008784 <USBD_CDC_DeInit+0xfc>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f002 fa24 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008784 <USBD_CDC_DeInit+0xfc>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	f003 020f 	and.w	r2, r3, #15
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086de:	2200      	movs	r2, #0
 80086e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086e2:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <USBD_CDC_DeInit+0x100>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f002 fa10 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086ee:	4b26      	ldr	r3, [pc, #152]	@ (8008788 <USBD_CDC_DeInit+0x100>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	3324      	adds	r3, #36	@ 0x24
 8008704:	2200      	movs	r2, #0
 8008706:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008708:	4b1f      	ldr	r3, [pc, #124]	@ (8008788 <USBD_CDC_DeInit+0x100>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f003 020f 	and.w	r2, r3, #15
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	3326      	adds	r3, #38	@ 0x26
 800871e:	2200      	movs	r2, #0
 8008720:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	32b0      	adds	r2, #176	@ 0xb0
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01f      	beq.n	8008774 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	33b0      	adds	r3, #176	@ 0xb0
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32b0      	adds	r2, #176	@ 0xb0
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	4618      	mov	r0, r3
 8008758:	f002 fae4 	bl	800ad24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	@ 0xb0
 8008766:	2100      	movs	r1, #0
 8008768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000097 	.word	0x20000097
 8008784:	20000098 	.word	0x20000098
 8008788:	20000099 	.word	0x20000099

0800878c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	32b0      	adds	r2, #176	@ 0xb0
 80087a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e0bf      	b.n	800893c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d050      	beq.n	800886a <USBD_CDC_Setup+0xde>
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	f040 80af 	bne.w	800892c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d03a      	beq.n	800884c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	da1b      	bge.n	8008818 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	33b0      	adds	r3, #176	@ 0xb0
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80087f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	88d2      	ldrh	r2, [r2, #6]
 80087fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	88db      	ldrh	r3, [r3, #6]
 8008802:	2b07      	cmp	r3, #7
 8008804:	bf28      	it	cs
 8008806:	2307      	movcs	r3, #7
 8008808:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	89fa      	ldrh	r2, [r7, #14]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fd53 	bl	800a2bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008816:	e090      	b.n	800893a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	785a      	ldrb	r2, [r3, #1]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	88db      	ldrh	r3, [r3, #6]
 8008826:	2b3f      	cmp	r3, #63	@ 0x3f
 8008828:	d803      	bhi.n	8008832 <USBD_CDC_Setup+0xa6>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	88db      	ldrh	r3, [r3, #6]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	e000      	b.n	8008834 <USBD_CDC_Setup+0xa8>
 8008832:	2240      	movs	r2, #64	@ 0x40
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800883a:	6939      	ldr	r1, [r7, #16]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008842:	461a      	mov	r2, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 fd65 	bl	800a314 <USBD_CtlPrepareRx>
      break;
 800884a:	e076      	b.n	800893a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	33b0      	adds	r3, #176	@ 0xb0
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	7850      	ldrb	r0, [r2, #1]
 8008862:	2200      	movs	r2, #0
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	4798      	blx	r3
      break;
 8008868:	e067      	b.n	800893a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	2b0b      	cmp	r3, #11
 8008870:	d851      	bhi.n	8008916 <USBD_CDC_Setup+0x18a>
 8008872:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <USBD_CDC_Setup+0xec>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088a9 	.word	0x080088a9
 800887c:	08008925 	.word	0x08008925
 8008880:	08008917 	.word	0x08008917
 8008884:	08008917 	.word	0x08008917
 8008888:	08008917 	.word	0x08008917
 800888c:	08008917 	.word	0x08008917
 8008890:	08008917 	.word	0x08008917
 8008894:	08008917 	.word	0x08008917
 8008898:	08008917 	.word	0x08008917
 800889c:	08008917 	.word	0x08008917
 80088a0:	080088d3 	.word	0x080088d3
 80088a4:	080088fd 	.word	0x080088fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d107      	bne.n	80088c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088b4:	f107 030a 	add.w	r3, r7, #10
 80088b8:	2202      	movs	r2, #2
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 fcfd 	bl	800a2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088c2:	e032      	b.n	800892a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fc7b 	bl	800a1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
          break;
 80088d0:	e02b      	b.n	800892a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d107      	bne.n	80088ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088de:	f107 030d 	add.w	r3, r7, #13
 80088e2:	2201      	movs	r2, #1
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fce8 	bl	800a2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088ec:	e01d      	b.n	800892a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fc66 	bl	800a1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80088f6:	2303      	movs	r3, #3
 80088f8:	75fb      	strb	r3, [r7, #23]
          break;
 80088fa:	e016      	b.n	800892a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b03      	cmp	r3, #3
 8008906:	d00f      	beq.n	8008928 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 fc59 	bl	800a1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008910:	2303      	movs	r3, #3
 8008912:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008914:	e008      	b.n	8008928 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fc52 	bl	800a1c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	75fb      	strb	r3, [r7, #23]
          break;
 8008922:	e002      	b.n	800892a <USBD_CDC_Setup+0x19e>
          break;
 8008924:	bf00      	nop
 8008926:	e008      	b.n	800893a <USBD_CDC_Setup+0x1ae>
          break;
 8008928:	bf00      	nop
      }
      break;
 800892a:	e006      	b.n	800893a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fc47 	bl	800a1c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008934:	2303      	movs	r3, #3
 8008936:	75fb      	strb	r3, [r7, #23]
      break;
 8008938:	bf00      	nop
  }

  return (uint8_t)ret;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32b0      	adds	r2, #176	@ 0xb0
 8008962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	e065      	b.n	8008a3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32b0      	adds	r2, #176	@ 0xb0
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3318      	adds	r3, #24
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d02f      	beq.n	80089f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	f003 020f 	and.w	r2, r3, #15
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	3318      	adds	r3, #24
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	f003 010f 	and.w	r1, r3, #15
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	460b      	mov	r3, r1
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	440b      	add	r3, r1
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4403      	add	r3, r0
 80089c0:	331c      	adds	r3, #28
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80089c8:	fb01 f303 	mul.w	r3, r1, r3
 80089cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d112      	bne.n	80089f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3318      	adds	r3, #24
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089ea:	78f9      	ldrb	r1, [r7, #3]
 80089ec:	2300      	movs	r3, #0
 80089ee:	2200      	movs	r2, #0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 f934 	bl	800ac5e <USBD_LL_Transmit>
 80089f6:	e01f      	b.n	8008a38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	33b0      	adds	r3, #176	@ 0xb0
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	33b0      	adds	r3, #176	@ 0xb0
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	32b0      	adds	r2, #176	@ 0xb0
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	32b0      	adds	r2, #176	@ 0xb0
 8008a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e01a      	b.n	8008aaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f002 f932 	bl	800ace2 <USBD_LL_GetRxDataSize>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	33b0      	adds	r3, #176	@ 0xb0
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	32b0      	adds	r2, #176	@ 0xb0
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e024      	b.n	8008b1e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	@ 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d019      	beq.n	8008b1c <USBD_CDC_EP0_RxReady+0x6a>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008aee:	2bff      	cmp	r3, #255	@ 0xff
 8008af0:	d014      	beq.n	8008b1c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	33b0      	adds	r3, #176	@ 0xb0
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	22ff      	movs	r2, #255	@ 0xff
 8008b18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b30:	2182      	movs	r1, #130	@ 0x82
 8008b32:	4818      	ldr	r0, [pc, #96]	@ (8008b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b34:	f000 fd0f 	bl	8009556 <USBD_GetEpDesc>
 8008b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	4815      	ldr	r0, [pc, #84]	@ (8008b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b3e:	f000 fd0a 	bl	8009556 <USBD_GetEpDesc>
 8008b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b44:	2181      	movs	r1, #129	@ 0x81
 8008b46:	4813      	ldr	r0, [pc, #76]	@ (8008b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b48:	f000 fd05 	bl	8009556 <USBD_GetEpDesc>
 8008b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2210      	movs	r2, #16
 8008b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b68:	711a      	strb	r2, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d006      	beq.n	8008b82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b7c:	711a      	strb	r2, [r3, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2243      	movs	r2, #67	@ 0x43
 8008b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b88:	4b02      	ldr	r3, [pc, #8]	@ (8008b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000054 	.word	0x20000054

08008b98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ba0:	2182      	movs	r1, #130	@ 0x82
 8008ba2:	4818      	ldr	r0, [pc, #96]	@ (8008c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ba4:	f000 fcd7 	bl	8009556 <USBD_GetEpDesc>
 8008ba8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008baa:	2101      	movs	r1, #1
 8008bac:	4815      	ldr	r0, [pc, #84]	@ (8008c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bae:	f000 fcd2 	bl	8009556 <USBD_GetEpDesc>
 8008bb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bb4:	2181      	movs	r1, #129	@ 0x81
 8008bb6:	4813      	ldr	r0, [pc, #76]	@ (8008c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bb8:	f000 fccd 	bl	8009556 <USBD_GetEpDesc>
 8008bbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	711a      	strb	r2, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f042 0202 	orr.w	r2, r2, #2
 8008bdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d006      	beq.n	8008bf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	711a      	strb	r2, [r3, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f042 0202 	orr.w	r2, r2, #2
 8008bf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2243      	movs	r2, #67	@ 0x43
 8008bf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bf8:	4b02      	ldr	r3, [pc, #8]	@ (8008c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000054 	.word	0x20000054

08008c08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c10:	2182      	movs	r1, #130	@ 0x82
 8008c12:	4818      	ldr	r0, [pc, #96]	@ (8008c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c14:	f000 fc9f 	bl	8009556 <USBD_GetEpDesc>
 8008c18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4815      	ldr	r0, [pc, #84]	@ (8008c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c1e:	f000 fc9a 	bl	8009556 <USBD_GetEpDesc>
 8008c22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c24:	2181      	movs	r1, #129	@ 0x81
 8008c26:	4813      	ldr	r0, [pc, #76]	@ (8008c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c28:	f000 fc95 	bl	8009556 <USBD_GetEpDesc>
 8008c2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2210      	movs	r2, #16
 8008c38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c48:	711a      	strb	r2, [r3, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c5c:	711a      	strb	r2, [r3, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2243      	movs	r2, #67	@ 0x43
 8008c66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c68:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000054 	.word	0x20000054

08008c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	220a      	movs	r2, #10
 8008c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c86:	4b03      	ldr	r3, [pc, #12]	@ (8008c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	20000010 	.word	0x20000010

08008c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e009      	b.n	8008cc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	33b0      	adds	r3, #176	@ 0xb0
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	32b0      	adds	r2, #176	@ 0xb0
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e008      	b.n	8008d04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	32b0      	adds	r2, #176	@ 0xb0
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e004      	b.n	8008d3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32b0      	adds	r2, #176	@ 0xb0
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32b0      	adds	r2, #176	@ 0xb0
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e018      	b.n	8008dac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d82:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <USBD_CDC_ReceivePacket+0x68>)
 8008d84:	7819      	ldrb	r1, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 ff85 	bl	800aca0 <USBD_LL_PrepareReceive>
 8008d96:	e008      	b.n	8008daa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d98:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <USBD_CDC_ReceivePacket+0x68>)
 8008d9a:	7819      	ldrb	r1, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008da2:	2340      	movs	r3, #64	@ 0x40
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 ff7b 	bl	800aca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000098 	.word	0x20000098

08008db8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e01f      	b.n	8008e10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	79fa      	ldrb	r2, [r7, #7]
 8008e02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f001 fdf5 	bl	800a9f4 <USBD_LL_Init>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e025      	b.n	8008e7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	@ 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00f      	beq.n	8008e6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32ae      	adds	r2, #174	@ 0xae
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5c:	f107 020e 	add.w	r2, r7, #14
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	4602      	mov	r2, r0
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 fdfd 	bl	800aa8c <USBD_LL_Start>
 8008e92:	4603      	mov	r3, r0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	4611      	mov	r1, r2
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f10:	2303      	movs	r3, #3
 8008f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f90c 	bl	800a14e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008f44:	461a      	mov	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d01a      	beq.n	8008f90 <USBD_LL_SetupStage+0x72>
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d822      	bhi.n	8008fa4 <USBD_LL_SetupStage+0x86>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <USBD_LL_SetupStage+0x4a>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d00a      	beq.n	8008f7c <USBD_LL_SetupStage+0x5e>
 8008f66:	e01d      	b.n	8008fa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fb63 	bl	800963c <USBD_StdDevReq>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
      break;
 8008f7a:	e020      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fbcb 	bl	8009720 <USBD_StdItfReq>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8e:	e016      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fc2d 	bl	80097f8 <USBD_StdEPReq>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa2:	e00c      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008faa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fdca 	bl	800ab4c <USBD_LL_StallEP>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbc:	bf00      	nop
  }

  return ret;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d16e      	bne.n	80090be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	f040 8098 	bne.w	8009124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d913      	bls.n	8009028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	1ad2      	subs	r2, r2, r3
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	4293      	cmp	r3, r2
 8009018:	bf28      	it	cs
 800901a:	4613      	movcs	r3, r2
 800901c:	461a      	mov	r2, r3
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f001 f994 	bl	800a34e <USBD_CtlContinueRx>
 8009026:	e07d      	b.n	8009124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2b02      	cmp	r3, #2
 8009034:	d014      	beq.n	8009060 <USBD_LL_DataOutStage+0x98>
 8009036:	2b02      	cmp	r3, #2
 8009038:	d81d      	bhi.n	8009076 <USBD_LL_DataOutStage+0xae>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <USBD_LL_DataOutStage+0x7c>
 800903e:	2b01      	cmp	r3, #1
 8009040:	d003      	beq.n	800904a <USBD_LL_DataOutStage+0x82>
 8009042:	e018      	b.n	8009076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	75bb      	strb	r3, [r7, #22]
            break;
 8009048:	e018      	b.n	800907c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009050:	b2db      	uxtb	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fa64 	bl	8009522 <USBD_CoreFindIF>
 800905a:	4603      	mov	r3, r0
 800905c:	75bb      	strb	r3, [r7, #22]
            break;
 800905e:	e00d      	b.n	800907c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4619      	mov	r1, r3
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fa66 	bl	800953c <USBD_CoreFindEP>
 8009070:	4603      	mov	r3, r0
 8009072:	75bb      	strb	r3, [r7, #22]
            break;
 8009074:	e002      	b.n	800907c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	75bb      	strb	r3, [r7, #22]
            break;
 800907a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800907c:	7dbb      	ldrb	r3, [r7, #22]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d119      	bne.n	80090b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b03      	cmp	r3, #3
 800908c:	d113      	bne.n	80090b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800908e:	7dba      	ldrb	r2, [r7, #22]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	32ae      	adds	r2, #174	@ 0xae
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800909e:	7dba      	ldrb	r2, [r7, #22]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090a6:	7dba      	ldrb	r2, [r7, #22]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	32ae      	adds	r2, #174	@ 0xae
 80090ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f001 f95a 	bl	800a370 <USBD_CtlSendStatus>
 80090bc:	e032      	b.n	8009124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	4619      	mov	r1, r3
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fa37 	bl	800953c <USBD_CoreFindEP>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090d2:	7dbb      	ldrb	r3, [r7, #22]
 80090d4:	2bff      	cmp	r3, #255	@ 0xff
 80090d6:	d025      	beq.n	8009124 <USBD_LL_DataOutStage+0x15c>
 80090d8:	7dbb      	ldrb	r3, [r7, #22]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d122      	bne.n	8009124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d117      	bne.n	800911a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80090ea:	7dba      	ldrb	r2, [r7, #22]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	32ae      	adds	r2, #174	@ 0xae
 80090f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00f      	beq.n	800911a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80090fa:	7dba      	ldrb	r2, [r7, #22]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009102:	7dba      	ldrb	r2, [r7, #22]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	32ae      	adds	r2, #174	@ 0xae
 8009108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	7afa      	ldrb	r2, [r7, #11]
 8009110:	4611      	mov	r1, r2
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	4798      	blx	r3
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	e000      	b.n	8009126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	460b      	mov	r3, r1
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d16f      	bne.n	8009222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3314      	adds	r3, #20
 8009146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800914e:	2b02      	cmp	r3, #2
 8009150:	d15a      	bne.n	8009208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	429a      	cmp	r2, r3
 800915c:	d914      	bls.n	8009188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	1ad2      	subs	r2, r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	461a      	mov	r2, r3
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f001 f8bc 	bl	800a2f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f001 fd8d 	bl	800aca0 <USBD_LL_PrepareReceive>
 8009186:	e03f      	b.n	8009208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	429a      	cmp	r2, r3
 8009192:	d11c      	bne.n	80091ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800919c:	429a      	cmp	r2, r3
 800919e:	d316      	bcc.n	80091ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d20f      	bcs.n	80091ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091ae:	2200      	movs	r2, #0
 80091b0:	2100      	movs	r1, #0
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f001 f89d 	bl	800a2f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091c0:	2300      	movs	r3, #0
 80091c2:	2200      	movs	r2, #0
 80091c4:	2100      	movs	r1, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f001 fd6a 	bl	800aca0 <USBD_LL_PrepareReceive>
 80091cc:	e01c      	b.n	8009208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d10f      	bne.n	80091fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d009      	beq.n	80091fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091fa:	2180      	movs	r1, #128	@ 0x80
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f001 fca5 	bl	800ab4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f001 f8c7 	bl	800a396 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d03a      	beq.n	8009288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff fe42 	bl	8008e9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009220:	e032      	b.n	8009288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009222:	7afb      	ldrb	r3, [r7, #11]
 8009224:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009228:	b2db      	uxtb	r3, r3
 800922a:	4619      	mov	r1, r3
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f985 	bl	800953c <USBD_CoreFindEP>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	2bff      	cmp	r3, #255	@ 0xff
 800923a:	d025      	beq.n	8009288 <USBD_LL_DataInStage+0x15a>
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d122      	bne.n	8009288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b03      	cmp	r3, #3
 800924c:	d11c      	bne.n	8009288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800924e:	7dfa      	ldrb	r2, [r7, #23]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	32ae      	adds	r2, #174	@ 0xae
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d014      	beq.n	8009288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800925e:	7dfa      	ldrb	r2, [r7, #23]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009266:	7dfa      	ldrb	r2, [r7, #23]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	32ae      	adds	r2, #174	@ 0xae
 800926c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	7afa      	ldrb	r2, [r7, #11]
 8009274:	4611      	mov	r1, r2
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	4798      	blx	r3
 800927a:	4603      	mov	r3, r0
 800927c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800927e:	7dbb      	ldrb	r3, [r7, #22]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009284:	7dbb      	ldrb	r3, [r7, #22]
 8009286:	e000      	b.n	800928a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d014      	beq.n	80092f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00e      	beq.n	80092f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6852      	ldr	r2, [r2, #4]
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	4611      	mov	r1, r2
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092f8:	2340      	movs	r3, #64	@ 0x40
 80092fa:	2200      	movs	r2, #0
 80092fc:	2100      	movs	r1, #0
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fbdf 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2240      	movs	r2, #64	@ 0x40
 8009310:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009314:	2340      	movs	r3, #64	@ 0x40
 8009316:	2200      	movs	r2, #0
 8009318:	2180      	movs	r1, #128	@ 0x80
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fbd1 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2240      	movs	r2, #64	@ 0x40
 800932a:	621a      	str	r2, [r3, #32]

  return ret;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b04      	cmp	r3, #4
 8009368:	d006      	beq.n	8009378 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	b2da      	uxtb	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2204      	movs	r2, #4
 800937c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d106      	bne.n	80093b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d110      	bne.n	80093f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	32ae      	adds	r2, #174	@ 0xae
 8009414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	e01c      	b.n	800945a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b03      	cmp	r3, #3
 800942a:	d115      	bne.n	8009458 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	32ae      	adds	r2, #174	@ 0xae
 8009436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	32ae      	adds	r2, #174	@ 0xae
 800944a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	4611      	mov	r1, r2
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	32ae      	adds	r2, #174	@ 0xae
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	e01c      	b.n	80094be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b03      	cmp	r3, #3
 800948e:	d115      	bne.n	80094bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	32ae      	adds	r2, #174	@ 0xae
 800949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32ae      	adds	r2, #174	@ 0xae
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6852      	ldr	r2, [r2, #4]
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	4611      	mov	r1, r2
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009514:	2303      	movs	r3, #3
 8009516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800952e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009548:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	b29b      	uxth	r3, r3
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	4293      	cmp	r3, r2
 800957a:	d91f      	bls.n	80095bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009582:	e013      	b.n	80095ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009584:	f107 030a 	add.w	r3, r7, #10
 8009588:	4619      	mov	r1, r3
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	f000 f81b 	bl	80095c6 <USBD_GetNextDesc>
 8009590:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	2b05      	cmp	r3, #5
 8009598:	d108      	bne.n	80095ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	789b      	ldrb	r3, [r3, #2]
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d008      	beq.n	80095ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095a8:	2300      	movs	r3, #0
 80095aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	897b      	ldrh	r3, [r7, #10]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d8e5      	bhi.n	8009584 <USBD_GetEpDesc+0x2e>
 80095b8:	e000      	b.n	80095bc <USBD_GetEpDesc+0x66>
          break;
 80095ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095bc:	693b      	ldr	r3, [r7, #16]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	7812      	ldrb	r2, [r2, #0]
 80095dc:	4413      	add	r3, r2
 80095de:	b29a      	uxth	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80095fe:	b480      	push	{r7}
 8009600:	b087      	sub	sp, #28
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	3301      	adds	r3, #1
 8009614:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800961c:	8a3b      	ldrh	r3, [r7, #16]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	b21a      	sxth	r2, r3
 8009622:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009626:	4313      	orrs	r3, r2
 8009628:	b21b      	sxth	r3, r3
 800962a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800962c:	89fb      	ldrh	r3, [r7, #14]
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009652:	2b40      	cmp	r3, #64	@ 0x40
 8009654:	d005      	beq.n	8009662 <USBD_StdDevReq+0x26>
 8009656:	2b40      	cmp	r3, #64	@ 0x40
 8009658:	d857      	bhi.n	800970a <USBD_StdDevReq+0xce>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00f      	beq.n	800967e <USBD_StdDevReq+0x42>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d153      	bne.n	800970a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	32ae      	adds	r2, #174	@ 0xae
 800966c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
      break;
 800967c:	e04a      	b.n	8009714 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	785b      	ldrb	r3, [r3, #1]
 8009682:	2b09      	cmp	r3, #9
 8009684:	d83b      	bhi.n	80096fe <USBD_StdDevReq+0xc2>
 8009686:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <USBD_StdDevReq+0x50>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096e1 	.word	0x080096e1
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096ff 	.word	0x080096ff
 8009698:	080096eb 	.word	0x080096eb
 800969c:	080096ff 	.word	0x080096ff
 80096a0:	080096bf 	.word	0x080096bf
 80096a4:	080096b5 	.word	0x080096b5
 80096a8:	080096ff 	.word	0x080096ff
 80096ac:	080096d7 	.word	0x080096d7
 80096b0:	080096c9 	.word	0x080096c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa3c 	bl	8009b34 <USBD_GetDescriptor>
          break;
 80096bc:	e024      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fba1 	bl	8009e08 <USBD_SetAddress>
          break;
 80096c6:	e01f      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fbe0 	bl	8009e90 <USBD_SetConfig>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
          break;
 80096d4:	e018      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fc83 	bl	8009fe4 <USBD_GetConfig>
          break;
 80096de:	e013      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fcb4 	bl	800a050 <USBD_GetStatus>
          break;
 80096e8:	e00e      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fce3 	bl	800a0b8 <USBD_SetFeature>
          break;
 80096f2:	e009      	b.n	8009708 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fd07 	bl	800a10a <USBD_ClrFeature>
          break;
 80096fc:	e004      	b.n	8009708 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fd5e 	bl	800a1c2 <USBD_CtlError>
          break;
 8009706:	bf00      	nop
      }
      break;
 8009708:	e004      	b.n	8009714 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fd58 	bl	800a1c2 <USBD_CtlError>
      break;
 8009712:	bf00      	nop
  }

  return ret;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop

08009720 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009736:	2b40      	cmp	r3, #64	@ 0x40
 8009738:	d005      	beq.n	8009746 <USBD_StdItfReq+0x26>
 800973a:	2b40      	cmp	r3, #64	@ 0x40
 800973c:	d852      	bhi.n	80097e4 <USBD_StdItfReq+0xc4>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USBD_StdItfReq+0x26>
 8009742:	2b20      	cmp	r3, #32
 8009744:	d14e      	bne.n	80097e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800974c:	b2db      	uxtb	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	2b02      	cmp	r3, #2
 8009752:	d840      	bhi.n	80097d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	889b      	ldrh	r3, [r3, #4]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b01      	cmp	r3, #1
 800975c:	d836      	bhi.n	80097cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	889b      	ldrh	r3, [r3, #4]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fedb 	bl	8009522 <USBD_CoreFindIF>
 800976c:	4603      	mov	r3, r0
 800976e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	2bff      	cmp	r3, #255	@ 0xff
 8009774:	d01d      	beq.n	80097b2 <USBD_StdItfReq+0x92>
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d11a      	bne.n	80097b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800977c:	7bba      	ldrb	r2, [r7, #14]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	32ae      	adds	r2, #174	@ 0xae
 8009782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00f      	beq.n	80097ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800978c:	7bba      	ldrb	r2, [r7, #14]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009794:	7bba      	ldrb	r2, [r7, #14]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32ae      	adds	r2, #174	@ 0xae
 800979a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097aa:	e004      	b.n	80097b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097b0:	e001      	b.n	80097b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097b2:	2303      	movs	r3, #3
 80097b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d110      	bne.n	80097e0 <USBD_StdItfReq+0xc0>
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10d      	bne.n	80097e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fdd3 	bl	800a370 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097ca:	e009      	b.n	80097e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fcf7 	bl	800a1c2 <USBD_CtlError>
          break;
 80097d4:	e004      	b.n	80097e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fcf2 	bl	800a1c2 <USBD_CtlError>
          break;
 80097de:	e000      	b.n	80097e2 <USBD_StdItfReq+0xc2>
          break;
 80097e0:	bf00      	nop
      }
      break;
 80097e2:	e004      	b.n	80097ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fceb 	bl	800a1c2 <USBD_CtlError>
      break;
 80097ec:	bf00      	nop
  }

  return ret;
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	889b      	ldrh	r3, [r3, #4]
 800980a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009814:	2b40      	cmp	r3, #64	@ 0x40
 8009816:	d007      	beq.n	8009828 <USBD_StdEPReq+0x30>
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	f200 817f 	bhi.w	8009b1c <USBD_StdEPReq+0x324>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d02a      	beq.n	8009878 <USBD_StdEPReq+0x80>
 8009822:	2b20      	cmp	r3, #32
 8009824:	f040 817a 	bne.w	8009b1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff fe85 	bl	800953c <USBD_CoreFindEP>
 8009832:	4603      	mov	r3, r0
 8009834:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009836:	7b7b      	ldrb	r3, [r7, #13]
 8009838:	2bff      	cmp	r3, #255	@ 0xff
 800983a:	f000 8174 	beq.w	8009b26 <USBD_StdEPReq+0x32e>
 800983e:	7b7b      	ldrb	r3, [r7, #13]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8170 	bne.w	8009b26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009846:	7b7a      	ldrb	r2, [r7, #13]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800984e:	7b7a      	ldrb	r2, [r7, #13]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	32ae      	adds	r2, #174	@ 0xae
 8009854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 8163 	beq.w	8009b26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009860:	7b7a      	ldrb	r2, [r7, #13]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	32ae      	adds	r2, #174	@ 0xae
 8009866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009876:	e156      	b.n	8009b26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	785b      	ldrb	r3, [r3, #1]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d008      	beq.n	8009892 <USBD_StdEPReq+0x9a>
 8009880:	2b03      	cmp	r3, #3
 8009882:	f300 8145 	bgt.w	8009b10 <USBD_StdEPReq+0x318>
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 809b 	beq.w	80099c2 <USBD_StdEPReq+0x1ca>
 800988c:	2b01      	cmp	r3, #1
 800988e:	d03c      	beq.n	800990a <USBD_StdEPReq+0x112>
 8009890:	e13e      	b.n	8009b10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d002      	beq.n	80098a4 <USBD_StdEPReq+0xac>
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d016      	beq.n	80098d0 <USBD_StdEPReq+0xd8>
 80098a2:	e02c      	b.n	80098fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00d      	beq.n	80098c6 <USBD_StdEPReq+0xce>
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b80      	cmp	r3, #128	@ 0x80
 80098ae:	d00a      	beq.n	80098c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 f949 	bl	800ab4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ba:	2180      	movs	r1, #128	@ 0x80
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 f945 	bl	800ab4c <USBD_LL_StallEP>
 80098c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098c4:	e020      	b.n	8009908 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fc7a 	bl	800a1c2 <USBD_CtlError>
              break;
 80098ce:	e01b      	b.n	8009908 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10e      	bne.n	80098f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <USBD_StdEPReq+0xfe>
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b80      	cmp	r3, #128	@ 0x80
 80098e2:	d008      	beq.n	80098f6 <USBD_StdEPReq+0xfe>
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	88db      	ldrh	r3, [r3, #6]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 f92b 	bl	800ab4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fd3a 	bl	800a370 <USBD_CtlSendStatus>

              break;
 80098fc:	e004      	b.n	8009908 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fc5e 	bl	800a1c2 <USBD_CtlError>
              break;
 8009906:	bf00      	nop
          }
          break;
 8009908:	e107      	b.n	8009b1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d002      	beq.n	800991c <USBD_StdEPReq+0x124>
 8009916:	2b03      	cmp	r3, #3
 8009918:	d016      	beq.n	8009948 <USBD_StdEPReq+0x150>
 800991a:	e04b      	b.n	80099b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00d      	beq.n	800993e <USBD_StdEPReq+0x146>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	@ 0x80
 8009926:	d00a      	beq.n	800993e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 f90d 	bl	800ab4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009932:	2180      	movs	r1, #128	@ 0x80
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f909 	bl	800ab4c <USBD_LL_StallEP>
 800993a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800993c:	e040      	b.n	80099c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc3e 	bl	800a1c2 <USBD_CtlError>
              break;
 8009946:	e03b      	b.n	80099c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	885b      	ldrh	r3, [r3, #2]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d136      	bne.n	80099be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 f913 	bl	800ab8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fd03 	bl	800a370 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fde4 	bl	800953c <USBD_CoreFindEP>
 8009974:	4603      	mov	r3, r0
 8009976:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009978:	7b7b      	ldrb	r3, [r7, #13]
 800997a:	2bff      	cmp	r3, #255	@ 0xff
 800997c:	d01f      	beq.n	80099be <USBD_StdEPReq+0x1c6>
 800997e:	7b7b      	ldrb	r3, [r7, #13]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d11c      	bne.n	80099be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009984:	7b7a      	ldrb	r2, [r7, #13]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800998c:	7b7a      	ldrb	r2, [r7, #13]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	32ae      	adds	r2, #174	@ 0xae
 8009992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d010      	beq.n	80099be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800999c:	7b7a      	ldrb	r2, [r7, #13]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32ae      	adds	r2, #174	@ 0xae
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099b2:	e004      	b.n	80099be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fc03 	bl	800a1c2 <USBD_CtlError>
              break;
 80099bc:	e000      	b.n	80099c0 <USBD_StdEPReq+0x1c8>
              break;
 80099be:	bf00      	nop
          }
          break;
 80099c0:	e0ab      	b.n	8009b1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d002      	beq.n	80099d4 <USBD_StdEPReq+0x1dc>
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d032      	beq.n	8009a38 <USBD_StdEPReq+0x240>
 80099d2:	e097      	b.n	8009b04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <USBD_StdEPReq+0x1f2>
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b80      	cmp	r3, #128	@ 0x80
 80099de:	d004      	beq.n	80099ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fbed 	bl	800a1c2 <USBD_CtlError>
                break;
 80099e8:	e091      	b.n	8009b0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da0b      	bge.n	8009a0a <USBD_StdEPReq+0x212>
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	3310      	adds	r3, #16
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4413      	add	r3, r2
 8009a06:	3304      	adds	r3, #4
 8009a08:	e00b      	b.n	8009a22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	3304      	adds	r3, #4
 8009a22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc43 	bl	800a2bc <USBD_CtlSendData>
              break;
 8009a36:	e06a      	b.n	8009b0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da11      	bge.n	8009a64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	f003 020f 	and.w	r2, r3, #15
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	3324      	adds	r3, #36	@ 0x24
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d117      	bne.n	8009a8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fbb0 	bl	800a1c2 <USBD_CtlError>
                  break;
 8009a62:	e054      	b.n	8009b0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	f003 020f 	and.w	r2, r3, #15
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fb9d 	bl	800a1c2 <USBD_CtlError>
                  break;
 8009a88:	e041      	b.n	8009b0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da0b      	bge.n	8009aaa <USBD_StdEPReq+0x2b2>
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	3310      	adds	r3, #16
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	e00b      	b.n	8009ac2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	4413      	add	r3, r2
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <USBD_StdEPReq+0x2d8>
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b80      	cmp	r3, #128	@ 0x80
 8009ace:	d103      	bne.n	8009ad8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	e00e      	b.n	8009af6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 f873 	bl	800abc8 <USBD_LL_IsStallEP>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2201      	movs	r2, #1
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2202      	movs	r2, #2
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fbdd 	bl	800a2bc <USBD_CtlSendData>
              break;
 8009b02:	e004      	b.n	8009b0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fb5b 	bl	800a1c2 <USBD_CtlError>
              break;
 8009b0c:	bf00      	nop
          }
          break;
 8009b0e:	e004      	b.n	8009b1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fb55 	bl	800a1c2 <USBD_CtlError>
          break;
 8009b18:	bf00      	nop
      }
      break;
 8009b1a:	e005      	b.n	8009b28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fb4f 	bl	800a1c2 <USBD_CtlError>
      break;
 8009b24:	e000      	b.n	8009b28 <USBD_StdEPReq+0x330>
      break;
 8009b26:	bf00      	nop
  }

  return ret;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	2b06      	cmp	r3, #6
 8009b56:	f200 8128 	bhi.w	8009daa <USBD_GetDescriptor+0x276>
 8009b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b60 <USBD_GetDescriptor+0x2c>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009bd5 	.word	0x08009bd5
 8009b6c:	08009dab 	.word	0x08009dab
 8009b70:	08009dab 	.word	0x08009dab
 8009b74:	08009d4b 	.word	0x08009d4b
 8009b78:	08009d77 	.word	0x08009d77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
      break;
 8009b92:	e112      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7c1b      	ldrb	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10d      	bne.n	8009bb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba4:	f107 0208 	add.w	r2, r7, #8
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4798      	blx	r3
 8009bac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bb6:	e100      	b.n	8009dba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc0:	f107 0208 	add.w	r2, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	2202      	movs	r2, #2
 8009bd0:	701a      	strb	r2, [r3, #0]
      break;
 8009bd2:	e0f2      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	885b      	ldrh	r3, [r3, #2]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	f200 80ac 	bhi.w	8009d38 <USBD_GetDescriptor+0x204>
 8009be0:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <USBD_GetDescriptor+0xb4>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009c35 	.word	0x08009c35
 8009bf0:	08009c69 	.word	0x08009c69
 8009bf4:	08009c9d 	.word	0x08009c9d
 8009bf8:	08009cd1 	.word	0x08009cd1
 8009bfc:	08009d05 	.word	0x08009d05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e091      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 facb 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e089      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e077      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fab1 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e06f      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e05d      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa97 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e055      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	7c12      	ldrb	r2, [r2, #16]
 8009cb4:	f107 0108 	add.w	r1, r7, #8
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cbe:	e043      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa7d 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cce:	e03b      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	f107 0108 	add.w	r1, r7, #8
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf2:	e029      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa63 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	72fb      	strb	r3, [r7, #11]
          break;
 8009d02:	e021      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d26:	e00f      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa49 	bl	800a1c2 <USBD_CtlError>
            err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
          break;
 8009d36:	e007      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa41 	bl	800a1c2 <USBD_CtlError>
          err++;
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	3301      	adds	r3, #1
 8009d44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d46:	bf00      	nop
      }
      break;
 8009d48:	e037      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7c1b      	ldrb	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d5a:	f107 0208 	add.w	r2, r7, #8
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4798      	blx	r3
 8009d62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d64:	e029      	b.n	8009dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa2a 	bl	800a1c2 <USBD_CtlError>
        err++;
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	3301      	adds	r3, #1
 8009d72:	72fb      	strb	r3, [r7, #11]
      break;
 8009d74:	e021      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10d      	bne.n	8009d9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	2207      	movs	r2, #7
 8009d96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d98:	e00f      	b.n	8009dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fa10 	bl	800a1c2 <USBD_CtlError>
        err++;
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	3301      	adds	r3, #1
 8009da6:	72fb      	strb	r3, [r7, #11]
      break;
 8009da8:	e007      	b.n	8009dba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fa08 	bl	800a1c2 <USBD_CtlError>
      err++;
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	3301      	adds	r3, #1
 8009db6:	72fb      	strb	r3, [r7, #11]
      break;
 8009db8:	bf00      	nop
  }

  if (err != 0U)
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11e      	bne.n	8009dfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	88db      	ldrh	r3, [r3, #6]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d016      	beq.n	8009df6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009dc8:	893b      	ldrh	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00e      	beq.n	8009dec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	88da      	ldrh	r2, [r3, #6]
 8009dd2:	893b      	ldrh	r3, [r7, #8]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	bf28      	it	cs
 8009dd8:	4613      	movcs	r3, r2
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dde:	893b      	ldrh	r3, [r7, #8]
 8009de0:	461a      	mov	r2, r3
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fa69 	bl	800a2bc <USBD_CtlSendData>
 8009dea:	e009      	b.n	8009e00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f9e7 	bl	800a1c2 <USBD_CtlError>
 8009df4:	e004      	b.n	8009e00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 faba 	bl	800a370 <USBD_CtlSendStatus>
 8009dfc:	e000      	b.n	8009e00 <USBD_GetDescriptor+0x2cc>
    return;
 8009dfe:	bf00      	nop
  }
}
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop

08009e08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	889b      	ldrh	r3, [r3, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d131      	bne.n	8009e7e <USBD_SetAddress+0x76>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d12d      	bne.n	8009e7e <USBD_SetAddress+0x76>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e28:	d829      	bhi.n	8009e7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d104      	bne.n	8009e4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f9bc 	bl	800a1c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4a:	e01d      	b.n	8009e88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7bfa      	ldrb	r2, [r7, #15]
 8009e50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fee1 	bl	800ac20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa86 	bl	800a370 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d004      	beq.n	8009e74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	e009      	b.n	8009e88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7c:	e004      	b.n	8009e88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f99e 	bl	800a1c2 <USBD_CtlError>
  }
}
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	885b      	ldrh	r3, [r3, #2]
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d905      	bls.n	8009ebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f985 	bl	800a1c2 <USBD_CtlError>
    return USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e08c      	b.n	8009fd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d002      	beq.n	8009ece <USBD_SetConfig+0x3e>
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d029      	beq.n	8009f20 <USBD_SetConfig+0x90>
 8009ecc:	e075      	b.n	8009fba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ece:	4b44      	ldr	r3, [pc, #272]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d020      	beq.n	8009f18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ed6:	4b42      	ldr	r3, [pc, #264]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7fe ffe3 	bl	8008eb2 <USBD_SetClassConfig>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d008      	beq.n	8009f08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f962 	bl	800a1c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2202      	movs	r2, #2
 8009f02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f06:	e065      	b.n	8009fd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fa31 	bl	800a370 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2203      	movs	r2, #3
 8009f12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009f16:	e05d      	b.n	8009fd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa29 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009f1e:	e059      	b.n	8009fd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f20:	4b2f      	ldr	r3, [pc, #188]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d112      	bne.n	8009f4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009f30:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f3a:	4b29      	ldr	r3, [pc, #164]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7fe ffd2 	bl	8008eea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa12 	bl	800a370 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f4c:	e042      	b.n	8009fd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f4e:	4b24      	ldr	r3, [pc, #144]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d02a      	beq.n	8009fb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7fe ffc0 	bl	8008eea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f74:	4b1a      	ldr	r3, [pc, #104]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fe ff99 	bl	8008eb2 <USBD_SetClassConfig>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00f      	beq.n	8009faa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f918 	bl	800a1c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7fe ffa5 	bl	8008eea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009fa8:	e014      	b.n	8009fd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f9e0 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009fb0:	e010      	b.n	8009fd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9dc 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009fb8:	e00c      	b.n	8009fd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f900 	bl	800a1c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fc2:	4b07      	ldr	r3, [pc, #28]	@ (8009fe0 <USBD_SetConfig+0x150>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe ff8e 	bl	8008eea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd2:	bf00      	nop
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	200004d8 	.word	0x200004d8

08009fe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	88db      	ldrh	r3, [r3, #6]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d004      	beq.n	800a000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f8e2 	bl	800a1c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ffe:	e023      	b.n	800a048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	dc02      	bgt.n	800a012 <USBD_GetConfig+0x2e>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc03      	bgt.n	800a018 <USBD_GetConfig+0x34>
 800a010:	e015      	b.n	800a03e <USBD_GetConfig+0x5a>
 800a012:	2b03      	cmp	r3, #3
 800a014:	d00b      	beq.n	800a02e <USBD_GetConfig+0x4a>
 800a016:	e012      	b.n	800a03e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3308      	adds	r3, #8
 800a022:	2201      	movs	r2, #1
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f948 	bl	800a2bc <USBD_CtlSendData>
        break;
 800a02c:	e00c      	b.n	800a048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3304      	adds	r3, #4
 800a032:	2201      	movs	r2, #1
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f940 	bl	800a2bc <USBD_CtlSendData>
        break;
 800a03c:	e004      	b.n	800a048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8be 	bl	800a1c2 <USBD_CtlError>
        break;
 800a046:	bf00      	nop
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a060:	b2db      	uxtb	r3, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	2b02      	cmp	r3, #2
 800a066:	d81e      	bhi.n	800a0a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	88db      	ldrh	r3, [r3, #6]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d004      	beq.n	800a07a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f8a5 	bl	800a1c2 <USBD_CtlError>
        break;
 800a078:	e01a      	b.n	800a0b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f043 0202 	orr.w	r2, r3, #2
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	330c      	adds	r3, #12
 800a09a:	2202      	movs	r2, #2
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f90c 	bl	800a2bc <USBD_CtlSendData>
      break;
 800a0a4:	e004      	b.n	800a0b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f88a 	bl	800a1c2 <USBD_CtlError>
      break;
 800a0ae:	bf00      	nop
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	885b      	ldrh	r3, [r3, #2]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d107      	bne.n	800a0da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f94c 	bl	800a370 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a0d8:	e013      	b.n	800a102 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	885b      	ldrh	r3, [r3, #2]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d10b      	bne.n	800a0fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	889b      	ldrh	r3, [r3, #4]
 800a0e6:	0a1b      	lsrs	r3, r3, #8
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f93c 	bl	800a370 <USBD_CtlSendStatus>
}
 800a0f8:	e003      	b.n	800a102 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f860 	bl	800a1c2 <USBD_CtlError>
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	3b01      	subs	r3, #1
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d80b      	bhi.n	800a13a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d10c      	bne.n	800a144 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f91c 	bl	800a370 <USBD_CtlSendStatus>
      }
      break;
 800a138:	e004      	b.n	800a144 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f840 	bl	800a1c2 <USBD_CtlError>
      break;
 800a142:	e000      	b.n	800a146 <USBD_ClrFeature+0x3c>
      break;
 800a144:	bf00      	nop
  }
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3301      	adds	r3, #1
 800a176:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fa40 	bl	80095fe <SWAPBYTE>
 800a17e:	4603      	mov	r3, r0
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3301      	adds	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fa33 	bl	80095fe <SWAPBYTE>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fa26 	bl	80095fe <SWAPBYTE>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	80da      	strh	r2, [r3, #6]
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1cc:	2180      	movs	r1, #128	@ 0x80
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fcbc 	bl	800ab4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fcb8 	bl	800ab4c <USBD_LL_StallEP>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d042      	beq.n	800a280 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a1fe:	6938      	ldr	r0, [r7, #16]
 800a200:	f000 f842 	bl	800a288 <USBD_GetLen>
 800a204:	4603      	mov	r3, r0
 800a206:	3301      	adds	r3, #1
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20e:	d808      	bhi.n	800a222 <USBD_GetString+0x3e>
 800a210:	6938      	ldr	r0, [r7, #16]
 800a212:	f000 f839 	bl	800a288 <USBD_GetLen>
 800a216:	4603      	mov	r3, r0
 800a218:	3301      	adds	r3, #1
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	e001      	b.n	800a226 <USBD_GetString+0x42>
 800a222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4413      	add	r3, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	701a      	strb	r2, [r3, #0]
  idx++;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	3301      	adds	r3, #1
 800a23a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	2203      	movs	r2, #3
 800a244:	701a      	strb	r2, [r3, #0]
  idx++;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	3301      	adds	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a24c:	e013      	b.n	800a276 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	4413      	add	r3, r2
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
    idx++;
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	3301      	adds	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4413      	add	r3, r2
 800a26c:	2200      	movs	r2, #0
 800a26e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	3301      	adds	r3, #1
 800a274:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e7      	bne.n	800a24e <USBD_GetString+0x6a>
 800a27e:	e000      	b.n	800a282 <USBD_GetString+0x9e>
    return;
 800a280:	bf00      	nop
  }
}
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a298:	e005      	b.n	800a2a6 <USBD_GetLen+0x1e>
  {
    len++;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	3301      	adds	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1f5      	bne.n	800a29a <USBD_GetLen+0x12>
  }

  return len;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fcbb 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	2100      	movs	r1, #0
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 fcaa 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2203      	movs	r2, #3
 800a324:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 fcae 	bl	800aca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	2100      	movs	r1, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fc9d 	bl	800aca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2204      	movs	r2, #4
 800a37c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a380:	2300      	movs	r3, #0
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fc69 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc77 	bl	800aca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4912      	ldr	r1, [pc, #72]	@ (800a40c <MX_USB_DEVICE_Init+0x50>)
 800a3c4:	4812      	ldr	r0, [pc, #72]	@ (800a410 <MX_USB_DEVICE_Init+0x54>)
 800a3c6:	f7fe fcf7 	bl	8008db8 <USBD_Init>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3d0:	f7f7 fbca 	bl	8001b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3d4:	490f      	ldr	r1, [pc, #60]	@ (800a414 <MX_USB_DEVICE_Init+0x58>)
 800a3d6:	480e      	ldr	r0, [pc, #56]	@ (800a410 <MX_USB_DEVICE_Init+0x54>)
 800a3d8:	f7fe fd1e 	bl	8008e18 <USBD_RegisterClass>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3e2:	f7f7 fbc1 	bl	8001b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3e6:	490c      	ldr	r1, [pc, #48]	@ (800a418 <MX_USB_DEVICE_Init+0x5c>)
 800a3e8:	4809      	ldr	r0, [pc, #36]	@ (800a410 <MX_USB_DEVICE_Init+0x54>)
 800a3ea:	f7fe fc55 	bl	8008c98 <USBD_CDC_RegisterInterface>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3f4:	f7f7 fbb8 	bl	8001b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3f8:	4805      	ldr	r0, [pc, #20]	@ (800a410 <MX_USB_DEVICE_Init+0x54>)
 800a3fa:	f7fe fd43 	bl	8008e84 <USBD_Start>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a404:	f7f7 fbb0 	bl	8001b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a408:	bf00      	nop
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200000b0 	.word	0x200000b0
 800a410:	200004dc 	.word	0x200004dc
 800a414:	2000001c 	.word	0x2000001c
 800a418:	2000009c 	.word	0x2000009c

0800a41c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a420:	2200      	movs	r2, #0
 800a422:	4905      	ldr	r1, [pc, #20]	@ (800a438 <CDC_Init_FS+0x1c>)
 800a424:	4805      	ldr	r0, [pc, #20]	@ (800a43c <CDC_Init_FS+0x20>)
 800a426:	f7fe fc51 	bl	8008ccc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a42a:	4905      	ldr	r1, [pc, #20]	@ (800a440 <CDC_Init_FS+0x24>)
 800a42c:	4803      	ldr	r0, [pc, #12]	@ (800a43c <CDC_Init_FS+0x20>)
 800a42e:	f7fe fc6f 	bl	8008d10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a434:	4618      	mov	r0, r3
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000fb8 	.word	0x20000fb8
 800a43c:	200004dc 	.word	0x200004dc
 800a440:	200007b8 	.word	0x200007b8

0800a444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a444:	b480      	push	{r7}
 800a446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
 800a460:	4613      	mov	r3, r2
 800a462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	2b23      	cmp	r3, #35	@ 0x23
 800a468:	d84a      	bhi.n	800a500 <CDC_Control_FS+0xac>
 800a46a:	a201      	add	r2, pc, #4	@ (adr r2, 800a470 <CDC_Control_FS+0x1c>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a501 	.word	0x0800a501
 800a474:	0800a501 	.word	0x0800a501
 800a478:	0800a501 	.word	0x0800a501
 800a47c:	0800a501 	.word	0x0800a501
 800a480:	0800a501 	.word	0x0800a501
 800a484:	0800a501 	.word	0x0800a501
 800a488:	0800a501 	.word	0x0800a501
 800a48c:	0800a501 	.word	0x0800a501
 800a490:	0800a501 	.word	0x0800a501
 800a494:	0800a501 	.word	0x0800a501
 800a498:	0800a501 	.word	0x0800a501
 800a49c:	0800a501 	.word	0x0800a501
 800a4a0:	0800a501 	.word	0x0800a501
 800a4a4:	0800a501 	.word	0x0800a501
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	0800a501 	.word	0x0800a501
 800a4b0:	0800a501 	.word	0x0800a501
 800a4b4:	0800a501 	.word	0x0800a501
 800a4b8:	0800a501 	.word	0x0800a501
 800a4bc:	0800a501 	.word	0x0800a501
 800a4c0:	0800a501 	.word	0x0800a501
 800a4c4:	0800a501 	.word	0x0800a501
 800a4c8:	0800a501 	.word	0x0800a501
 800a4cc:	0800a501 	.word	0x0800a501
 800a4d0:	0800a501 	.word	0x0800a501
 800a4d4:	0800a501 	.word	0x0800a501
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a501 	.word	0x0800a501
 800a4e0:	0800a501 	.word	0x0800a501
 800a4e4:	0800a501 	.word	0x0800a501
 800a4e8:	0800a501 	.word	0x0800a501
 800a4ec:	0800a501 	.word	0x0800a501
 800a4f0:	0800a501 	.word	0x0800a501
 800a4f4:	0800a501 	.word	0x0800a501
 800a4f8:	0800a501 	.word	0x0800a501
 800a4fc:	0800a501 	.word	0x0800a501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a500:	bf00      	nop
  }

  return (USBD_OK);
 800a502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	4805      	ldr	r0, [pc, #20]	@ (800a534 <CDC_Receive_FS+0x24>)
 800a51e:	f7fe fbf7 	bl	8008d10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a522:	4804      	ldr	r0, [pc, #16]	@ (800a534 <CDC_Receive_FS+0x24>)
 800a524:	f7fe fc12 	bl	8008d4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	200004dc 	.word	0x200004dc

0800a538 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2212      	movs	r2, #18
 800a56c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a56e:	4b03      	ldr	r3, [pc, #12]	@ (800a57c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200000cc 	.word	0x200000cc

0800a580 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2204      	movs	r2, #4
 800a590:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a592:	4b03      	ldr	r3, [pc, #12]	@ (800a5a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a594:	4618      	mov	r0, r3
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	200000e0 	.word	0x200000e0

0800a5a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6039      	str	r1, [r7, #0]
 800a5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	4907      	ldr	r1, [pc, #28]	@ (800a5d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ba:	4808      	ldr	r0, [pc, #32]	@ (800a5dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5bc:	f7ff fe12 	bl	800a1e4 <USBD_GetString>
 800a5c0:	e004      	b.n	800a5cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	4904      	ldr	r1, [pc, #16]	@ (800a5d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5c6:	4805      	ldr	r0, [pc, #20]	@ (800a5dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5c8:	f7ff fe0c 	bl	800a1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5cc:	4b02      	ldr	r3, [pc, #8]	@ (800a5d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200017b8 	.word	0x200017b8
 800a5dc:	08010398 	.word	0x08010398

0800a5e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	4904      	ldr	r1, [pc, #16]	@ (800a600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5f0:	4804      	ldr	r0, [pc, #16]	@ (800a604 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5f2:	f7ff fdf7 	bl	800a1e4 <USBD_GetString>
  return USBD_StrDesc;
 800a5f6:	4b02      	ldr	r3, [pc, #8]	@ (800a600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	200017b8 	.word	0x200017b8
 800a604:	080103b0 	.word	0x080103b0

0800a608 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	221a      	movs	r2, #26
 800a618:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a61a:	f000 f843 	bl	800a6a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a61e:	4b02      	ldr	r3, [pc, #8]	@ (800a628 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	200000e4 	.word	0x200000e4

0800a62c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d105      	bne.n	800a64a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	4907      	ldr	r1, [pc, #28]	@ (800a660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a642:	4808      	ldr	r0, [pc, #32]	@ (800a664 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a644:	f7ff fdce 	bl	800a1e4 <USBD_GetString>
 800a648:	e004      	b.n	800a654 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	4904      	ldr	r1, [pc, #16]	@ (800a660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a64e:	4805      	ldr	r0, [pc, #20]	@ (800a664 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a650:	f7ff fdc8 	bl	800a1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a654:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200017b8 	.word	0x200017b8
 800a664:	080103c4 	.word	0x080103c4

0800a668 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d105      	bne.n	800a686 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4907      	ldr	r1, [pc, #28]	@ (800a69c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a67e:	4808      	ldr	r0, [pc, #32]	@ (800a6a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a680:	f7ff fdb0 	bl	800a1e4 <USBD_GetString>
 800a684:	e004      	b.n	800a690 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4904      	ldr	r1, [pc, #16]	@ (800a69c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a68a:	4805      	ldr	r0, [pc, #20]	@ (800a6a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a68c:	f7ff fdaa 	bl	800a1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a690:	4b02      	ldr	r3, [pc, #8]	@ (800a69c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	200017b8 	.word	0x200017b8
 800a6a0:	080103d0 	.word	0x080103d0

0800a6a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e8 <Get_SerialNum+0x44>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ec <Get_SerialNum+0x48>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f0 <Get_SerialNum+0x4c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6ca:	2208      	movs	r2, #8
 800a6cc:	4909      	ldr	r1, [pc, #36]	@ (800a6f4 <Get_SerialNum+0x50>)
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f814 	bl	800a6fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6d4:	2204      	movs	r2, #4
 800a6d6:	4908      	ldr	r1, [pc, #32]	@ (800a6f8 <Get_SerialNum+0x54>)
 800a6d8:	68b8      	ldr	r0, [r7, #8]
 800a6da:	f000 f80f 	bl	800a6fc <IntToUnicode>
  }
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	1fff7a10 	.word	0x1fff7a10
 800a6ec:	1fff7a14 	.word	0x1fff7a14
 800a6f0:	1fff7a18 	.word	0x1fff7a18
 800a6f4:	200000e6 	.word	0x200000e6
 800a6f8:	200000f6 	.word	0x200000f6

0800a6fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a70e:	2300      	movs	r3, #0
 800a710:	75fb      	strb	r3, [r7, #23]
 800a712:	e027      	b.n	800a764 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	0f1b      	lsrs	r3, r3, #28
 800a718:	2b09      	cmp	r3, #9
 800a71a:	d80b      	bhi.n	800a734 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	0f1b      	lsrs	r3, r3, #28
 800a720:	b2da      	uxtb	r2, r3
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4619      	mov	r1, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	440b      	add	r3, r1
 800a72c:	3230      	adds	r2, #48	@ 0x30
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e00a      	b.n	800a74a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	0f1b      	lsrs	r3, r3, #28
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	4619      	mov	r1, r3
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	440b      	add	r3, r1
 800a744:	3237      	adds	r2, #55	@ 0x37
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	3301      	adds	r3, #1
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	4413      	add	r3, r2
 800a75a:	2200      	movs	r2, #0
 800a75c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	3301      	adds	r3, #1
 800a762:	75fb      	strb	r3, [r7, #23]
 800a764:	7dfa      	ldrb	r2, [r7, #23]
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d3d3      	bcc.n	800a714 <IntToUnicode+0x18>
  }
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08a      	sub	sp, #40	@ 0x28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a784:	f107 0314 	add.w	r3, r7, #20
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	605a      	str	r2, [r3, #4]
 800a78e:	609a      	str	r2, [r3, #8]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a79c:	d13a      	bne.n	800a814 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
 800a7a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a6:	4a1d      	ldr	r2, [pc, #116]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7a8:	f043 0301 	orr.w	r3, r3, #1
 800a7ac:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	613b      	str	r3, [r7, #16]
 800a7b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a7ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a7be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7cc:	230a      	movs	r3, #10
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7d0:	f107 0314 	add.w	r3, r7, #20
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4812      	ldr	r0, [pc, #72]	@ (800a820 <HAL_PCD_MspInit+0xa4>)
 800a7d8:	f7f8 febe 	bl	8003558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e0:	4a0e      	ldr	r2, [pc, #56]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7e6:	6353      	str	r3, [r2, #52]	@ 0x34
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a7f6:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7f8:	4b08      	ldr	r3, [pc, #32]	@ (800a81c <HAL_PCD_MspInit+0xa0>)
 800a7fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a804:	2200      	movs	r2, #0
 800a806:	2100      	movs	r1, #0
 800a808:	2043      	movs	r0, #67	@ 0x43
 800a80a:	f7f8 fafe 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a80e:	2043      	movs	r0, #67	@ 0x43
 800a810:	f7f8 fb17 	bl	8002e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a814:	bf00      	nop
 800a816:	3728      	adds	r7, #40	@ 0x28
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	40023800 	.word	0x40023800
 800a820:	40020000 	.word	0x40020000

0800a824 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f7fe fb6f 	bl	8008f1e <USBD_LL_SetupStage>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a85a:	78fa      	ldrb	r2, [r7, #3]
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	4619      	mov	r1, r3
 800a872:	f7fe fba9 	bl	8008fc8 <USBD_LL_DataOutStage>
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	460b      	mov	r3, r1
 800a888:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	4613      	mov	r3, r2
 800a896:	00db      	lsls	r3, r3, #3
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	3320      	adds	r3, #32
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f7fe fc42 	bl	800912e <USBD_LL_DataInStage>
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fd7c 	bl	80093be <USBD_LL_SOF>
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	79db      	ldrb	r3, [r3, #7]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d001      	beq.n	800a8e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a8e2:	f7f7 f941 	bl	8001b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ec:	7bfa      	ldrb	r2, [r7, #15]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fe fd20 	bl	8009336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fcc8 	bl	8009292 <USBD_LL_Reset>
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fd1b 	bl	8009356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7adb      	ldrb	r3, [r3, #11]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a940:	4b04      	ldr	r3, [pc, #16]	@ (800a954 <HAL_PCD_SuspendCallback+0x48>)
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	4a03      	ldr	r2, [pc, #12]	@ (800a954 <HAL_PCD_SuspendCallback+0x48>)
 800a946:	f043 0306 	orr.w	r3, r3, #6
 800a94a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	e000ed00 	.word	0xe000ed00

0800a958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fd11 	bl	800938e <USBD_LL_Resume>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fd69 	bl	8009462 <USBD_LL_IsoOUTIncomplete>
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9aa:	78fa      	ldrb	r2, [r7, #3]
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fd25 	bl	80093fe <USBD_LL_IsoINIncomplete>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fd7b 	bl	80094c6 <USBD_LL_DevConnected>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe fd78 	bl	80094dc <USBD_LL_DevDisconnected>
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d13c      	bne.n	800aa7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa04:	4a20      	ldr	r2, [pc, #128]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a1e      	ldr	r2, [pc, #120]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa14:	4b1c      	ldr	r3, [pc, #112]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aa1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aa1c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa1e:	2204      	movs	r2, #4
 800aa20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa22:	4b19      	ldr	r3, [pc, #100]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa24:	2202      	movs	r2, #2
 800aa26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa28:	4b17      	ldr	r3, [pc, #92]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa2e:	4b16      	ldr	r3, [pc, #88]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa30:	2202      	movs	r2, #2
 800aa32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa34:	4b14      	ldr	r3, [pc, #80]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa3a:	4b13      	ldr	r3, [pc, #76]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aa40:	4b11      	ldr	r3, [pc, #68]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aa46:	4b10      	ldr	r3, [pc, #64]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa52:	480d      	ldr	r0, [pc, #52]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa54:	f7f9 fbed 	bl	8004232 <HAL_PCD_Init>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aa5e:	f7f7 f883 	bl	8001b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa62:	2180      	movs	r1, #128	@ 0x80
 800aa64:	4808      	ldr	r0, [pc, #32]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa66:	f7fa fe1a 	bl	800569e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa6a:	2240      	movs	r2, #64	@ 0x40
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4806      	ldr	r0, [pc, #24]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa70:	f7fa fdce 	bl	8005610 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa74:	2280      	movs	r2, #128	@ 0x80
 800aa76:	2101      	movs	r1, #1
 800aa78:	4803      	ldr	r0, [pc, #12]	@ (800aa88 <USBD_LL_Init+0x94>)
 800aa7a:	f7fa fdc9 	bl	8005610 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200019b8 	.word	0x200019b8

0800aa8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f9 fcd4 	bl	8004450 <HAL_PCD_Start>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f942 	bl	800ad38 <USBD_Get_USB_Status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	461a      	mov	r2, r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	70fb      	strb	r3, [r7, #3]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70bb      	strb	r3, [r7, #2]
 800aad8:	4613      	mov	r3, r2
 800aada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aaea:	78bb      	ldrb	r3, [r7, #2]
 800aaec:	883a      	ldrh	r2, [r7, #0]
 800aaee:	78f9      	ldrb	r1, [r7, #3]
 800aaf0:	f7fa f9a8 	bl	8004e44 <HAL_PCD_EP_Open>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f91c 	bl	800ad38 <USBD_Get_USB_Status>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fa f9f3 	bl	8004f18 <HAL_PCD_EP_Close>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f8fd 	bl	800ad38 <USBD_Get_USB_Status>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fa faab 	bl	80050c6 <HAL_PCD_EP_SetStall>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f8de 	bl	800ad38 <USBD_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fa faef 	bl	800518c <HAL_PCD_EP_ClrStall>
 800abae:	4603      	mov	r3, r0
 800abb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f8bf 	bl	800ad38 <USBD_Get_USB_Status>
 800abba:	4603      	mov	r3, r0
 800abbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da0b      	bge.n	800abfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	4613      	mov	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	3316      	adds	r3, #22
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	e00b      	b.n	800ac14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	4613      	mov	r3, r2
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	440b      	add	r3, r1
 800ac0e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ac12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fa f8dc 	bl	8004dfc <HAL_PCD_SetAddress>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f874 	bl	800ad38 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac7c:	7af9      	ldrb	r1, [r7, #11]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	f7fa f9e6 	bl	8005052 <HAL_PCD_EP_Transmit>
 800ac86:	4603      	mov	r3, r0
 800ac88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 f853 	bl	800ad38 <USBD_Get_USB_Status>
 800ac92:	4603      	mov	r3, r0
 800ac94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	603b      	str	r3, [r7, #0]
 800acac:	460b      	mov	r3, r1
 800acae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800acbe:	7af9      	ldrb	r1, [r7, #11]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	f7fa f972 	bl	8004fac <HAL_PCD_EP_Receive>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800accc:	7dfb      	ldrb	r3, [r7, #23]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f832 	bl	800ad38 <USBD_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acf4:	78fa      	ldrb	r2, [r7, #3]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fa f992 	bl	8005022 <HAL_PCD_EP_GetRxCount>
 800acfe:	4603      	mov	r3, r0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad10:	4b03      	ldr	r3, [pc, #12]	@ (800ad20 <USBD_static_malloc+0x18>)
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	20001e9c 	.word	0x20001e9c

0800ad24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]

}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d817      	bhi.n	800ad7c <USBD_Get_USB_Status+0x44>
 800ad4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad54 <USBD_Get_USB_Status+0x1c>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800ad65 	.word	0x0800ad65
 800ad58:	0800ad6b 	.word	0x0800ad6b
 800ad5c:	0800ad71 	.word	0x0800ad71
 800ad60:	0800ad77 	.word	0x0800ad77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
    break;
 800ad68:	e00b      	b.n	800ad82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6e:	e008      	b.n	800ad82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad70:	2301      	movs	r3, #1
 800ad72:	73fb      	strb	r3, [r7, #15]
    break;
 800ad74:	e005      	b.n	800ad82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad76:	2303      	movs	r3, #3
 800ad78:	73fb      	strb	r3, [r7, #15]
    break;
 800ad7a:	e002      	b.n	800ad82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad80:	bf00      	nop
  }
  return usb_status;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <__cvt>:
 800ad90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	ec57 6b10 	vmov	r6, r7, d0
 800ad98:	2f00      	cmp	r7, #0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	463b      	mov	r3, r7
 800ada0:	bfbb      	ittet	lt
 800ada2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ada6:	461f      	movlt	r7, r3
 800ada8:	2300      	movge	r3, #0
 800adaa:	232d      	movlt	r3, #45	@ 0x2d
 800adac:	700b      	strb	r3, [r1, #0]
 800adae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adb0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800adb4:	4691      	mov	r9, r2
 800adb6:	f023 0820 	bic.w	r8, r3, #32
 800adba:	bfbc      	itt	lt
 800adbc:	4632      	movlt	r2, r6
 800adbe:	4616      	movlt	r6, r2
 800adc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adc4:	d005      	beq.n	800add2 <__cvt+0x42>
 800adc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800adca:	d100      	bne.n	800adce <__cvt+0x3e>
 800adcc:	3401      	adds	r4, #1
 800adce:	2102      	movs	r1, #2
 800add0:	e000      	b.n	800add4 <__cvt+0x44>
 800add2:	2103      	movs	r1, #3
 800add4:	ab03      	add	r3, sp, #12
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	ab02      	add	r3, sp, #8
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	ec47 6b10 	vmov	d0, r6, r7
 800ade0:	4653      	mov	r3, sl
 800ade2:	4622      	mov	r2, r4
 800ade4:	f001 f874 	bl	800bed0 <_dtoa_r>
 800ade8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800adec:	4605      	mov	r5, r0
 800adee:	d119      	bne.n	800ae24 <__cvt+0x94>
 800adf0:	f019 0f01 	tst.w	r9, #1
 800adf4:	d00e      	beq.n	800ae14 <__cvt+0x84>
 800adf6:	eb00 0904 	add.w	r9, r0, r4
 800adfa:	2200      	movs	r2, #0
 800adfc:	2300      	movs	r3, #0
 800adfe:	4630      	mov	r0, r6
 800ae00:	4639      	mov	r1, r7
 800ae02:	f7f5 fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae06:	b108      	cbz	r0, 800ae0c <__cvt+0x7c>
 800ae08:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae0c:	2230      	movs	r2, #48	@ 0x30
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	454b      	cmp	r3, r9
 800ae12:	d31e      	bcc.n	800ae52 <__cvt+0xc2>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae18:	1b5b      	subs	r3, r3, r5
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	b004      	add	sp, #16
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae28:	eb00 0904 	add.w	r9, r0, r4
 800ae2c:	d1e5      	bne.n	800adfa <__cvt+0x6a>
 800ae2e:	7803      	ldrb	r3, [r0, #0]
 800ae30:	2b30      	cmp	r3, #48	@ 0x30
 800ae32:	d10a      	bne.n	800ae4a <__cvt+0xba>
 800ae34:	2200      	movs	r2, #0
 800ae36:	2300      	movs	r3, #0
 800ae38:	4630      	mov	r0, r6
 800ae3a:	4639      	mov	r1, r7
 800ae3c:	f7f5 fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae40:	b918      	cbnz	r0, 800ae4a <__cvt+0xba>
 800ae42:	f1c4 0401 	rsb	r4, r4, #1
 800ae46:	f8ca 4000 	str.w	r4, [sl]
 800ae4a:	f8da 3000 	ldr.w	r3, [sl]
 800ae4e:	4499      	add	r9, r3
 800ae50:	e7d3      	b.n	800adfa <__cvt+0x6a>
 800ae52:	1c59      	adds	r1, r3, #1
 800ae54:	9103      	str	r1, [sp, #12]
 800ae56:	701a      	strb	r2, [r3, #0]
 800ae58:	e7d9      	b.n	800ae0e <__cvt+0x7e>

0800ae5a <__exponent>:
 800ae5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	bfba      	itte	lt
 800ae60:	4249      	neglt	r1, r1
 800ae62:	232d      	movlt	r3, #45	@ 0x2d
 800ae64:	232b      	movge	r3, #43	@ 0x2b
 800ae66:	2909      	cmp	r1, #9
 800ae68:	7002      	strb	r2, [r0, #0]
 800ae6a:	7043      	strb	r3, [r0, #1]
 800ae6c:	dd29      	ble.n	800aec2 <__exponent+0x68>
 800ae6e:	f10d 0307 	add.w	r3, sp, #7
 800ae72:	461d      	mov	r5, r3
 800ae74:	270a      	movs	r7, #10
 800ae76:	461a      	mov	r2, r3
 800ae78:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae7c:	fb07 1416 	mls	r4, r7, r6, r1
 800ae80:	3430      	adds	r4, #48	@ 0x30
 800ae82:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae86:	460c      	mov	r4, r1
 800ae88:	2c63      	cmp	r4, #99	@ 0x63
 800ae8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae8e:	4631      	mov	r1, r6
 800ae90:	dcf1      	bgt.n	800ae76 <__exponent+0x1c>
 800ae92:	3130      	adds	r1, #48	@ 0x30
 800ae94:	1e94      	subs	r4, r2, #2
 800ae96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae9a:	1c41      	adds	r1, r0, #1
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	42ab      	cmp	r3, r5
 800aea0:	d30a      	bcc.n	800aeb8 <__exponent+0x5e>
 800aea2:	f10d 0309 	add.w	r3, sp, #9
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	42ac      	cmp	r4, r5
 800aeaa:	bf88      	it	hi
 800aeac:	2300      	movhi	r3, #0
 800aeae:	3302      	adds	r3, #2
 800aeb0:	4403      	add	r3, r0
 800aeb2:	1a18      	subs	r0, r3, r0
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aebc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aec0:	e7ed      	b.n	800ae9e <__exponent+0x44>
 800aec2:	2330      	movs	r3, #48	@ 0x30
 800aec4:	3130      	adds	r1, #48	@ 0x30
 800aec6:	7083      	strb	r3, [r0, #2]
 800aec8:	70c1      	strb	r1, [r0, #3]
 800aeca:	1d03      	adds	r3, r0, #4
 800aecc:	e7f1      	b.n	800aeb2 <__exponent+0x58>
	...

0800aed0 <_printf_float>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	b08d      	sub	sp, #52	@ 0x34
 800aed6:	460c      	mov	r4, r1
 800aed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aedc:	4616      	mov	r6, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	4605      	mov	r5, r0
 800aee2:	f000 feef 	bl	800bcc4 <_localeconv_r>
 800aee6:	6803      	ldr	r3, [r0, #0]
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f5 f9c8 	bl	8000280 <strlen>
 800aef0:	2300      	movs	r3, #0
 800aef2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aef4:	f8d8 3000 	ldr.w	r3, [r8]
 800aef8:	9005      	str	r0, [sp, #20]
 800aefa:	3307      	adds	r3, #7
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	f103 0208 	add.w	r2, r3, #8
 800af04:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af08:	f8d4 b000 	ldr.w	fp, [r4]
 800af0c:	f8c8 2000 	str.w	r2, [r8]
 800af10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	f8cd 8018 	str.w	r8, [sp, #24]
 800af1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af26:	4b9c      	ldr	r3, [pc, #624]	@ (800b198 <_printf_float+0x2c8>)
 800af28:	f04f 32ff 	mov.w	r2, #4294967295
 800af2c:	f7f5 fe06 	bl	8000b3c <__aeabi_dcmpun>
 800af30:	bb70      	cbnz	r0, 800af90 <_printf_float+0xc0>
 800af32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af36:	4b98      	ldr	r3, [pc, #608]	@ (800b198 <_printf_float+0x2c8>)
 800af38:	f04f 32ff 	mov.w	r2, #4294967295
 800af3c:	f7f5 fde0 	bl	8000b00 <__aeabi_dcmple>
 800af40:	bb30      	cbnz	r0, 800af90 <_printf_float+0xc0>
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	4640      	mov	r0, r8
 800af48:	4649      	mov	r1, r9
 800af4a:	f7f5 fdcf 	bl	8000aec <__aeabi_dcmplt>
 800af4e:	b110      	cbz	r0, 800af56 <_printf_float+0x86>
 800af50:	232d      	movs	r3, #45	@ 0x2d
 800af52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af56:	4a91      	ldr	r2, [pc, #580]	@ (800b19c <_printf_float+0x2cc>)
 800af58:	4b91      	ldr	r3, [pc, #580]	@ (800b1a0 <_printf_float+0x2d0>)
 800af5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af5e:	bf94      	ite	ls
 800af60:	4690      	movls	r8, r2
 800af62:	4698      	movhi	r8, r3
 800af64:	2303      	movs	r3, #3
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	f02b 0304 	bic.w	r3, fp, #4
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	9700      	str	r7, [sp, #0]
 800af74:	4633      	mov	r3, r6
 800af76:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af78:	4621      	mov	r1, r4
 800af7a:	4628      	mov	r0, r5
 800af7c:	f000 f9d2 	bl	800b324 <_printf_common>
 800af80:	3001      	adds	r0, #1
 800af82:	f040 808d 	bne.w	800b0a0 <_printf_float+0x1d0>
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	b00d      	add	sp, #52	@ 0x34
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af90:	4642      	mov	r2, r8
 800af92:	464b      	mov	r3, r9
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f7f5 fdd0 	bl	8000b3c <__aeabi_dcmpun>
 800af9c:	b140      	cbz	r0, 800afb0 <_printf_float+0xe0>
 800af9e:	464b      	mov	r3, r9
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bfbc      	itt	lt
 800afa4:	232d      	movlt	r3, #45	@ 0x2d
 800afa6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800afaa:	4a7e      	ldr	r2, [pc, #504]	@ (800b1a4 <_printf_float+0x2d4>)
 800afac:	4b7e      	ldr	r3, [pc, #504]	@ (800b1a8 <_printf_float+0x2d8>)
 800afae:	e7d4      	b.n	800af5a <_printf_float+0x8a>
 800afb0:	6863      	ldr	r3, [r4, #4]
 800afb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800afb6:	9206      	str	r2, [sp, #24]
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	d13b      	bne.n	800b034 <_printf_float+0x164>
 800afbc:	2306      	movs	r3, #6
 800afbe:	6063      	str	r3, [r4, #4]
 800afc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800afc4:	2300      	movs	r3, #0
 800afc6:	6022      	str	r2, [r4, #0]
 800afc8:	9303      	str	r3, [sp, #12]
 800afca:	ab0a      	add	r3, sp, #40	@ 0x28
 800afcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800afd0:	ab09      	add	r3, sp, #36	@ 0x24
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	ec49 8b10 	vmov	d0, r8, r9
 800afda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afde:	4628      	mov	r0, r5
 800afe0:	f7ff fed6 	bl	800ad90 <__cvt>
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afe8:	2b47      	cmp	r3, #71	@ 0x47
 800afea:	4680      	mov	r8, r0
 800afec:	d129      	bne.n	800b042 <_printf_float+0x172>
 800afee:	1cc8      	adds	r0, r1, #3
 800aff0:	db02      	blt.n	800aff8 <_printf_float+0x128>
 800aff2:	6863      	ldr	r3, [r4, #4]
 800aff4:	4299      	cmp	r1, r3
 800aff6:	dd41      	ble.n	800b07c <_printf_float+0x1ac>
 800aff8:	f1aa 0a02 	sub.w	sl, sl, #2
 800affc:	fa5f fa8a 	uxtb.w	sl, sl
 800b000:	3901      	subs	r1, #1
 800b002:	4652      	mov	r2, sl
 800b004:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b008:	9109      	str	r1, [sp, #36]	@ 0x24
 800b00a:	f7ff ff26 	bl	800ae5a <__exponent>
 800b00e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b010:	1813      	adds	r3, r2, r0
 800b012:	2a01      	cmp	r2, #1
 800b014:	4681      	mov	r9, r0
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	dc02      	bgt.n	800b020 <_printf_float+0x150>
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	07d2      	lsls	r2, r2, #31
 800b01e:	d501      	bpl.n	800b024 <_printf_float+0x154>
 800b020:	3301      	adds	r3, #1
 800b022:	6123      	str	r3, [r4, #16]
 800b024:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0a2      	beq.n	800af72 <_printf_float+0xa2>
 800b02c:	232d      	movs	r3, #45	@ 0x2d
 800b02e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b032:	e79e      	b.n	800af72 <_printf_float+0xa2>
 800b034:	9a06      	ldr	r2, [sp, #24]
 800b036:	2a47      	cmp	r2, #71	@ 0x47
 800b038:	d1c2      	bne.n	800afc0 <_printf_float+0xf0>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1c0      	bne.n	800afc0 <_printf_float+0xf0>
 800b03e:	2301      	movs	r3, #1
 800b040:	e7bd      	b.n	800afbe <_printf_float+0xee>
 800b042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b046:	d9db      	bls.n	800b000 <_printf_float+0x130>
 800b048:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b04c:	d118      	bne.n	800b080 <_printf_float+0x1b0>
 800b04e:	2900      	cmp	r1, #0
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	dd0b      	ble.n	800b06c <_printf_float+0x19c>
 800b054:	6121      	str	r1, [r4, #16]
 800b056:	b913      	cbnz	r3, 800b05e <_printf_float+0x18e>
 800b058:	6822      	ldr	r2, [r4, #0]
 800b05a:	07d0      	lsls	r0, r2, #31
 800b05c:	d502      	bpl.n	800b064 <_printf_float+0x194>
 800b05e:	3301      	adds	r3, #1
 800b060:	440b      	add	r3, r1
 800b062:	6123      	str	r3, [r4, #16]
 800b064:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b066:	f04f 0900 	mov.w	r9, #0
 800b06a:	e7db      	b.n	800b024 <_printf_float+0x154>
 800b06c:	b913      	cbnz	r3, 800b074 <_printf_float+0x1a4>
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	07d2      	lsls	r2, r2, #31
 800b072:	d501      	bpl.n	800b078 <_printf_float+0x1a8>
 800b074:	3302      	adds	r3, #2
 800b076:	e7f4      	b.n	800b062 <_printf_float+0x192>
 800b078:	2301      	movs	r3, #1
 800b07a:	e7f2      	b.n	800b062 <_printf_float+0x192>
 800b07c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b082:	4299      	cmp	r1, r3
 800b084:	db05      	blt.n	800b092 <_printf_float+0x1c2>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	6121      	str	r1, [r4, #16]
 800b08a:	07d8      	lsls	r0, r3, #31
 800b08c:	d5ea      	bpl.n	800b064 <_printf_float+0x194>
 800b08e:	1c4b      	adds	r3, r1, #1
 800b090:	e7e7      	b.n	800b062 <_printf_float+0x192>
 800b092:	2900      	cmp	r1, #0
 800b094:	bfd4      	ite	le
 800b096:	f1c1 0202 	rsble	r2, r1, #2
 800b09a:	2201      	movgt	r2, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	e7e0      	b.n	800b062 <_printf_float+0x192>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	055a      	lsls	r2, r3, #21
 800b0a4:	d407      	bmi.n	800b0b6 <_printf_float+0x1e6>
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d12b      	bne.n	800b10c <_printf_float+0x23c>
 800b0b4:	e767      	b.n	800af86 <_printf_float+0xb6>
 800b0b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0ba:	f240 80dd 	bls.w	800b278 <_printf_float+0x3a8>
 800b0be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f7f5 fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d033      	beq.n	800b136 <_printf_float+0x266>
 800b0ce:	4a37      	ldr	r2, [pc, #220]	@ (800b1ac <_printf_float+0x2dc>)
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	47b8      	blx	r7
 800b0d8:	3001      	adds	r0, #1
 800b0da:	f43f af54 	beq.w	800af86 <_printf_float+0xb6>
 800b0de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0e2:	4543      	cmp	r3, r8
 800b0e4:	db02      	blt.n	800b0ec <_printf_float+0x21c>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	07d8      	lsls	r0, r3, #31
 800b0ea:	d50f      	bpl.n	800b10c <_printf_float+0x23c>
 800b0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b8      	blx	r7
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f43f af45 	beq.w	800af86 <_printf_float+0xb6>
 800b0fc:	f04f 0900 	mov.w	r9, #0
 800b100:	f108 38ff 	add.w	r8, r8, #4294967295
 800b104:	f104 0a1a 	add.w	sl, r4, #26
 800b108:	45c8      	cmp	r8, r9
 800b10a:	dc09      	bgt.n	800b120 <_printf_float+0x250>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	079b      	lsls	r3, r3, #30
 800b110:	f100 8103 	bmi.w	800b31a <_printf_float+0x44a>
 800b114:	68e0      	ldr	r0, [r4, #12]
 800b116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b118:	4298      	cmp	r0, r3
 800b11a:	bfb8      	it	lt
 800b11c:	4618      	movlt	r0, r3
 800b11e:	e734      	b.n	800af8a <_printf_float+0xba>
 800b120:	2301      	movs	r3, #1
 800b122:	4652      	mov	r2, sl
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	47b8      	blx	r7
 800b12a:	3001      	adds	r0, #1
 800b12c:	f43f af2b 	beq.w	800af86 <_printf_float+0xb6>
 800b130:	f109 0901 	add.w	r9, r9, #1
 800b134:	e7e8      	b.n	800b108 <_printf_float+0x238>
 800b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dc39      	bgt.n	800b1b0 <_printf_float+0x2e0>
 800b13c:	4a1b      	ldr	r2, [pc, #108]	@ (800b1ac <_printf_float+0x2dc>)
 800b13e:	2301      	movs	r3, #1
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af1d 	beq.w	800af86 <_printf_float+0xb6>
 800b14c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b150:	ea59 0303 	orrs.w	r3, r9, r3
 800b154:	d102      	bne.n	800b15c <_printf_float+0x28c>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	07d9      	lsls	r1, r3, #31
 800b15a:	d5d7      	bpl.n	800b10c <_printf_float+0x23c>
 800b15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	47b8      	blx	r7
 800b166:	3001      	adds	r0, #1
 800b168:	f43f af0d 	beq.w	800af86 <_printf_float+0xb6>
 800b16c:	f04f 0a00 	mov.w	sl, #0
 800b170:	f104 0b1a 	add.w	fp, r4, #26
 800b174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b176:	425b      	negs	r3, r3
 800b178:	4553      	cmp	r3, sl
 800b17a:	dc01      	bgt.n	800b180 <_printf_float+0x2b0>
 800b17c:	464b      	mov	r3, r9
 800b17e:	e793      	b.n	800b0a8 <_printf_float+0x1d8>
 800b180:	2301      	movs	r3, #1
 800b182:	465a      	mov	r2, fp
 800b184:	4631      	mov	r1, r6
 800b186:	4628      	mov	r0, r5
 800b188:	47b8      	blx	r7
 800b18a:	3001      	adds	r0, #1
 800b18c:	f43f aefb 	beq.w	800af86 <_printf_float+0xb6>
 800b190:	f10a 0a01 	add.w	sl, sl, #1
 800b194:	e7ee      	b.n	800b174 <_printf_float+0x2a4>
 800b196:	bf00      	nop
 800b198:	7fefffff 	.word	0x7fefffff
 800b19c:	08010400 	.word	0x08010400
 800b1a0:	08010404 	.word	0x08010404
 800b1a4:	08010408 	.word	0x08010408
 800b1a8:	0801040c 	.word	0x0801040c
 800b1ac:	08010410 	.word	0x08010410
 800b1b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1b6:	4553      	cmp	r3, sl
 800b1b8:	bfa8      	it	ge
 800b1ba:	4653      	movge	r3, sl
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	4699      	mov	r9, r3
 800b1c0:	dc36      	bgt.n	800b230 <_printf_float+0x360>
 800b1c2:	f04f 0b00 	mov.w	fp, #0
 800b1c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ca:	f104 021a 	add.w	r2, r4, #26
 800b1ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1d0:	9306      	str	r3, [sp, #24]
 800b1d2:	eba3 0309 	sub.w	r3, r3, r9
 800b1d6:	455b      	cmp	r3, fp
 800b1d8:	dc31      	bgt.n	800b23e <_printf_float+0x36e>
 800b1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1dc:	459a      	cmp	sl, r3
 800b1de:	dc3a      	bgt.n	800b256 <_printf_float+0x386>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	07da      	lsls	r2, r3, #31
 800b1e4:	d437      	bmi.n	800b256 <_printf_float+0x386>
 800b1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e8:	ebaa 0903 	sub.w	r9, sl, r3
 800b1ec:	9b06      	ldr	r3, [sp, #24]
 800b1ee:	ebaa 0303 	sub.w	r3, sl, r3
 800b1f2:	4599      	cmp	r9, r3
 800b1f4:	bfa8      	it	ge
 800b1f6:	4699      	movge	r9, r3
 800b1f8:	f1b9 0f00 	cmp.w	r9, #0
 800b1fc:	dc33      	bgt.n	800b266 <_printf_float+0x396>
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b206:	f104 0b1a 	add.w	fp, r4, #26
 800b20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b20c:	ebaa 0303 	sub.w	r3, sl, r3
 800b210:	eba3 0309 	sub.w	r3, r3, r9
 800b214:	4543      	cmp	r3, r8
 800b216:	f77f af79 	ble.w	800b10c <_printf_float+0x23c>
 800b21a:	2301      	movs	r3, #1
 800b21c:	465a      	mov	r2, fp
 800b21e:	4631      	mov	r1, r6
 800b220:	4628      	mov	r0, r5
 800b222:	47b8      	blx	r7
 800b224:	3001      	adds	r0, #1
 800b226:	f43f aeae 	beq.w	800af86 <_printf_float+0xb6>
 800b22a:	f108 0801 	add.w	r8, r8, #1
 800b22e:	e7ec      	b.n	800b20a <_printf_float+0x33a>
 800b230:	4642      	mov	r2, r8
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	d1c2      	bne.n	800b1c2 <_printf_float+0x2f2>
 800b23c:	e6a3      	b.n	800af86 <_printf_float+0xb6>
 800b23e:	2301      	movs	r3, #1
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	9206      	str	r2, [sp, #24]
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	f43f ae9c 	beq.w	800af86 <_printf_float+0xb6>
 800b24e:	9a06      	ldr	r2, [sp, #24]
 800b250:	f10b 0b01 	add.w	fp, fp, #1
 800b254:	e7bb      	b.n	800b1ce <_printf_float+0x2fe>
 800b256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	d1c0      	bne.n	800b1e6 <_printf_float+0x316>
 800b264:	e68f      	b.n	800af86 <_printf_float+0xb6>
 800b266:	9a06      	ldr	r2, [sp, #24]
 800b268:	464b      	mov	r3, r9
 800b26a:	4442      	add	r2, r8
 800b26c:	4631      	mov	r1, r6
 800b26e:	4628      	mov	r0, r5
 800b270:	47b8      	blx	r7
 800b272:	3001      	adds	r0, #1
 800b274:	d1c3      	bne.n	800b1fe <_printf_float+0x32e>
 800b276:	e686      	b.n	800af86 <_printf_float+0xb6>
 800b278:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b27c:	f1ba 0f01 	cmp.w	sl, #1
 800b280:	dc01      	bgt.n	800b286 <_printf_float+0x3b6>
 800b282:	07db      	lsls	r3, r3, #31
 800b284:	d536      	bpl.n	800b2f4 <_printf_float+0x424>
 800b286:	2301      	movs	r3, #1
 800b288:	4642      	mov	r2, r8
 800b28a:	4631      	mov	r1, r6
 800b28c:	4628      	mov	r0, r5
 800b28e:	47b8      	blx	r7
 800b290:	3001      	adds	r0, #1
 800b292:	f43f ae78 	beq.w	800af86 <_printf_float+0xb6>
 800b296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b29a:	4631      	mov	r1, r6
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b8      	blx	r7
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	f43f ae70 	beq.w	800af86 <_printf_float+0xb6>
 800b2a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2b2:	f7f5 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2b6:	b9c0      	cbnz	r0, 800b2ea <_printf_float+0x41a>
 800b2b8:	4653      	mov	r3, sl
 800b2ba:	f108 0201 	add.w	r2, r8, #1
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	47b8      	blx	r7
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d10c      	bne.n	800b2e2 <_printf_float+0x412>
 800b2c8:	e65d      	b.n	800af86 <_printf_float+0xb6>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	465a      	mov	r2, fp
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f43f ae56 	beq.w	800af86 <_printf_float+0xb6>
 800b2da:	f108 0801 	add.w	r8, r8, #1
 800b2de:	45d0      	cmp	r8, sl
 800b2e0:	dbf3      	blt.n	800b2ca <_printf_float+0x3fa>
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2e8:	e6df      	b.n	800b0aa <_printf_float+0x1da>
 800b2ea:	f04f 0800 	mov.w	r8, #0
 800b2ee:	f104 0b1a 	add.w	fp, r4, #26
 800b2f2:	e7f4      	b.n	800b2de <_printf_float+0x40e>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4642      	mov	r2, r8
 800b2f8:	e7e1      	b.n	800b2be <_printf_float+0x3ee>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	464a      	mov	r2, r9
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	f43f ae3e 	beq.w	800af86 <_printf_float+0xb6>
 800b30a:	f108 0801 	add.w	r8, r8, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	4543      	cmp	r3, r8
 800b316:	dcf0      	bgt.n	800b2fa <_printf_float+0x42a>
 800b318:	e6fc      	b.n	800b114 <_printf_float+0x244>
 800b31a:	f04f 0800 	mov.w	r8, #0
 800b31e:	f104 0919 	add.w	r9, r4, #25
 800b322:	e7f4      	b.n	800b30e <_printf_float+0x43e>

0800b324 <_printf_common>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	4616      	mov	r6, r2
 800b32a:	4698      	mov	r8, r3
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	690b      	ldr	r3, [r1, #16]
 800b330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b334:	4293      	cmp	r3, r2
 800b336:	bfb8      	it	lt
 800b338:	4613      	movlt	r3, r2
 800b33a:	6033      	str	r3, [r6, #0]
 800b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b340:	4607      	mov	r7, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b10a      	cbz	r2, 800b34a <_printf_common+0x26>
 800b346:	3301      	adds	r3, #1
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	0699      	lsls	r1, r3, #26
 800b34e:	bf42      	ittt	mi
 800b350:	6833      	ldrmi	r3, [r6, #0]
 800b352:	3302      	addmi	r3, #2
 800b354:	6033      	strmi	r3, [r6, #0]
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	f015 0506 	ands.w	r5, r5, #6
 800b35c:	d106      	bne.n	800b36c <_printf_common+0x48>
 800b35e:	f104 0a19 	add.w	sl, r4, #25
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	6832      	ldr	r2, [r6, #0]
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dc26      	bgt.n	800b3ba <_printf_common+0x96>
 800b36c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b370:	6822      	ldr	r2, [r4, #0]
 800b372:	3b00      	subs	r3, #0
 800b374:	bf18      	it	ne
 800b376:	2301      	movne	r3, #1
 800b378:	0692      	lsls	r2, r2, #26
 800b37a:	d42b      	bmi.n	800b3d4 <_printf_common+0xb0>
 800b37c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b380:	4641      	mov	r1, r8
 800b382:	4638      	mov	r0, r7
 800b384:	47c8      	blx	r9
 800b386:	3001      	adds	r0, #1
 800b388:	d01e      	beq.n	800b3c8 <_printf_common+0xa4>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	6922      	ldr	r2, [r4, #16]
 800b38e:	f003 0306 	and.w	r3, r3, #6
 800b392:	2b04      	cmp	r3, #4
 800b394:	bf02      	ittt	eq
 800b396:	68e5      	ldreq	r5, [r4, #12]
 800b398:	6833      	ldreq	r3, [r6, #0]
 800b39a:	1aed      	subeq	r5, r5, r3
 800b39c:	68a3      	ldr	r3, [r4, #8]
 800b39e:	bf0c      	ite	eq
 800b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a4:	2500      	movne	r5, #0
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bfc4      	itt	gt
 800b3aa:	1a9b      	subgt	r3, r3, r2
 800b3ac:	18ed      	addgt	r5, r5, r3
 800b3ae:	2600      	movs	r6, #0
 800b3b0:	341a      	adds	r4, #26
 800b3b2:	42b5      	cmp	r5, r6
 800b3b4:	d11a      	bne.n	800b3ec <_printf_common+0xc8>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e008      	b.n	800b3cc <_printf_common+0xa8>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4641      	mov	r1, r8
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	47c8      	blx	r9
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d103      	bne.n	800b3d0 <_printf_common+0xac>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	e7c6      	b.n	800b362 <_printf_common+0x3e>
 800b3d4:	18e1      	adds	r1, r4, r3
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	2030      	movs	r0, #48	@ 0x30
 800b3da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3de:	4422      	add	r2, r4
 800b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	e7c7      	b.n	800b37c <_printf_common+0x58>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4641      	mov	r1, r8
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	47c8      	blx	r9
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d0e6      	beq.n	800b3c8 <_printf_common+0xa4>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_common+0x8e>
	...

0800b400 <_printf_i>:
 800b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	7e0f      	ldrb	r7, [r1, #24]
 800b406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b408:	2f78      	cmp	r7, #120	@ 0x78
 800b40a:	4691      	mov	r9, r2
 800b40c:	4680      	mov	r8, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	469a      	mov	sl, r3
 800b412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b416:	d807      	bhi.n	800b428 <_printf_i+0x28>
 800b418:	2f62      	cmp	r7, #98	@ 0x62
 800b41a:	d80a      	bhi.n	800b432 <_printf_i+0x32>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	f000 80d2 	beq.w	800b5c6 <_printf_i+0x1c6>
 800b422:	2f58      	cmp	r7, #88	@ 0x58
 800b424:	f000 80b9 	beq.w	800b59a <_printf_i+0x19a>
 800b428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b42c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b430:	e03a      	b.n	800b4a8 <_printf_i+0xa8>
 800b432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b436:	2b15      	cmp	r3, #21
 800b438:	d8f6      	bhi.n	800b428 <_printf_i+0x28>
 800b43a:	a101      	add	r1, pc, #4	@ (adr r1, 800b440 <_printf_i+0x40>)
 800b43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b4ad 	.word	0x0800b4ad
 800b448:	0800b429 	.word	0x0800b429
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b429 	.word	0x0800b429
 800b454:	0800b429 	.word	0x0800b429
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b429 	.word	0x0800b429
 800b460:	0800b429 	.word	0x0800b429
 800b464:	0800b429 	.word	0x0800b429
 800b468:	0800b429 	.word	0x0800b429
 800b46c:	0800b5ad 	.word	0x0800b5ad
 800b470:	0800b4d7 	.word	0x0800b4d7
 800b474:	0800b567 	.word	0x0800b567
 800b478:	0800b429 	.word	0x0800b429
 800b47c:	0800b429 	.word	0x0800b429
 800b480:	0800b5cf 	.word	0x0800b5cf
 800b484:	0800b429 	.word	0x0800b429
 800b488:	0800b4d7 	.word	0x0800b4d7
 800b48c:	0800b429 	.word	0x0800b429
 800b490:	0800b429 	.word	0x0800b429
 800b494:	0800b56f 	.word	0x0800b56f
 800b498:	6833      	ldr	r3, [r6, #0]
 800b49a:	1d1a      	adds	r2, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6032      	str	r2, [r6, #0]
 800b4a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e09d      	b.n	800b5e8 <_printf_i+0x1e8>
 800b4ac:	6833      	ldr	r3, [r6, #0]
 800b4ae:	6820      	ldr	r0, [r4, #0]
 800b4b0:	1d19      	adds	r1, r3, #4
 800b4b2:	6031      	str	r1, [r6, #0]
 800b4b4:	0606      	lsls	r6, r0, #24
 800b4b6:	d501      	bpl.n	800b4bc <_printf_i+0xbc>
 800b4b8:	681d      	ldr	r5, [r3, #0]
 800b4ba:	e003      	b.n	800b4c4 <_printf_i+0xc4>
 800b4bc:	0645      	lsls	r5, r0, #25
 800b4be:	d5fb      	bpl.n	800b4b8 <_printf_i+0xb8>
 800b4c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4c4:	2d00      	cmp	r5, #0
 800b4c6:	da03      	bge.n	800b4d0 <_printf_i+0xd0>
 800b4c8:	232d      	movs	r3, #45	@ 0x2d
 800b4ca:	426d      	negs	r5, r5
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d0:	4859      	ldr	r0, [pc, #356]	@ (800b638 <_printf_i+0x238>)
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e011      	b.n	800b4fa <_printf_i+0xfa>
 800b4d6:	6821      	ldr	r1, [r4, #0]
 800b4d8:	6833      	ldr	r3, [r6, #0]
 800b4da:	0608      	lsls	r0, r1, #24
 800b4dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4e0:	d402      	bmi.n	800b4e8 <_printf_i+0xe8>
 800b4e2:	0649      	lsls	r1, r1, #25
 800b4e4:	bf48      	it	mi
 800b4e6:	b2ad      	uxthmi	r5, r5
 800b4e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4ea:	4853      	ldr	r0, [pc, #332]	@ (800b638 <_printf_i+0x238>)
 800b4ec:	6033      	str	r3, [r6, #0]
 800b4ee:	bf14      	ite	ne
 800b4f0:	230a      	movne	r3, #10
 800b4f2:	2308      	moveq	r3, #8
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4fa:	6866      	ldr	r6, [r4, #4]
 800b4fc:	60a6      	str	r6, [r4, #8]
 800b4fe:	2e00      	cmp	r6, #0
 800b500:	bfa2      	ittt	ge
 800b502:	6821      	ldrge	r1, [r4, #0]
 800b504:	f021 0104 	bicge.w	r1, r1, #4
 800b508:	6021      	strge	r1, [r4, #0]
 800b50a:	b90d      	cbnz	r5, 800b510 <_printf_i+0x110>
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	d04b      	beq.n	800b5a8 <_printf_i+0x1a8>
 800b510:	4616      	mov	r6, r2
 800b512:	fbb5 f1f3 	udiv	r1, r5, r3
 800b516:	fb03 5711 	mls	r7, r3, r1, r5
 800b51a:	5dc7      	ldrb	r7, [r0, r7]
 800b51c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b520:	462f      	mov	r7, r5
 800b522:	42bb      	cmp	r3, r7
 800b524:	460d      	mov	r5, r1
 800b526:	d9f4      	bls.n	800b512 <_printf_i+0x112>
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d10b      	bne.n	800b544 <_printf_i+0x144>
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	07df      	lsls	r7, r3, #31
 800b530:	d508      	bpl.n	800b544 <_printf_i+0x144>
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	6861      	ldr	r1, [r4, #4]
 800b536:	4299      	cmp	r1, r3
 800b538:	bfde      	ittt	le
 800b53a:	2330      	movle	r3, #48	@ 0x30
 800b53c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b540:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b544:	1b92      	subs	r2, r2, r6
 800b546:	6122      	str	r2, [r4, #16]
 800b548:	f8cd a000 	str.w	sl, [sp]
 800b54c:	464b      	mov	r3, r9
 800b54e:	aa03      	add	r2, sp, #12
 800b550:	4621      	mov	r1, r4
 800b552:	4640      	mov	r0, r8
 800b554:	f7ff fee6 	bl	800b324 <_printf_common>
 800b558:	3001      	adds	r0, #1
 800b55a:	d14a      	bne.n	800b5f2 <_printf_i+0x1f2>
 800b55c:	f04f 30ff 	mov.w	r0, #4294967295
 800b560:	b004      	add	sp, #16
 800b562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	f043 0320 	orr.w	r3, r3, #32
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	4833      	ldr	r0, [pc, #204]	@ (800b63c <_printf_i+0x23c>)
 800b570:	2778      	movs	r7, #120	@ 0x78
 800b572:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	6831      	ldr	r1, [r6, #0]
 800b57a:	061f      	lsls	r7, r3, #24
 800b57c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b580:	d402      	bmi.n	800b588 <_printf_i+0x188>
 800b582:	065f      	lsls	r7, r3, #25
 800b584:	bf48      	it	mi
 800b586:	b2ad      	uxthmi	r5, r5
 800b588:	6031      	str	r1, [r6, #0]
 800b58a:	07d9      	lsls	r1, r3, #31
 800b58c:	bf44      	itt	mi
 800b58e:	f043 0320 	orrmi.w	r3, r3, #32
 800b592:	6023      	strmi	r3, [r4, #0]
 800b594:	b11d      	cbz	r5, 800b59e <_printf_i+0x19e>
 800b596:	2310      	movs	r3, #16
 800b598:	e7ac      	b.n	800b4f4 <_printf_i+0xf4>
 800b59a:	4827      	ldr	r0, [pc, #156]	@ (800b638 <_printf_i+0x238>)
 800b59c:	e7e9      	b.n	800b572 <_printf_i+0x172>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	f023 0320 	bic.w	r3, r3, #32
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	e7f6      	b.n	800b596 <_printf_i+0x196>
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	e7bd      	b.n	800b528 <_printf_i+0x128>
 800b5ac:	6833      	ldr	r3, [r6, #0]
 800b5ae:	6825      	ldr	r5, [r4, #0]
 800b5b0:	6961      	ldr	r1, [r4, #20]
 800b5b2:	1d18      	adds	r0, r3, #4
 800b5b4:	6030      	str	r0, [r6, #0]
 800b5b6:	062e      	lsls	r6, r5, #24
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0x1c0>
 800b5bc:	6019      	str	r1, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <_printf_i+0x1c6>
 800b5c0:	0668      	lsls	r0, r5, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0x1bc>
 800b5c4:	8019      	strh	r1, [r3, #0]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	4616      	mov	r6, r2
 800b5cc:	e7bc      	b.n	800b548 <_printf_i+0x148>
 800b5ce:	6833      	ldr	r3, [r6, #0]
 800b5d0:	1d1a      	adds	r2, r3, #4
 800b5d2:	6032      	str	r2, [r6, #0]
 800b5d4:	681e      	ldr	r6, [r3, #0]
 800b5d6:	6862      	ldr	r2, [r4, #4]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7f4 fe00 	bl	80001e0 <memchr>
 800b5e0:	b108      	cbz	r0, 800b5e6 <_printf_i+0x1e6>
 800b5e2:	1b80      	subs	r0, r0, r6
 800b5e4:	6060      	str	r0, [r4, #4]
 800b5e6:	6863      	ldr	r3, [r4, #4]
 800b5e8:	6123      	str	r3, [r4, #16]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5f0:	e7aa      	b.n	800b548 <_printf_i+0x148>
 800b5f2:	6923      	ldr	r3, [r4, #16]
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	47d0      	blx	sl
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d0ad      	beq.n	800b55c <_printf_i+0x15c>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	079b      	lsls	r3, r3, #30
 800b604:	d413      	bmi.n	800b62e <_printf_i+0x22e>
 800b606:	68e0      	ldr	r0, [r4, #12]
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	4298      	cmp	r0, r3
 800b60c:	bfb8      	it	lt
 800b60e:	4618      	movlt	r0, r3
 800b610:	e7a6      	b.n	800b560 <_printf_i+0x160>
 800b612:	2301      	movs	r3, #1
 800b614:	4632      	mov	r2, r6
 800b616:	4649      	mov	r1, r9
 800b618:	4640      	mov	r0, r8
 800b61a:	47d0      	blx	sl
 800b61c:	3001      	adds	r0, #1
 800b61e:	d09d      	beq.n	800b55c <_printf_i+0x15c>
 800b620:	3501      	adds	r5, #1
 800b622:	68e3      	ldr	r3, [r4, #12]
 800b624:	9903      	ldr	r1, [sp, #12]
 800b626:	1a5b      	subs	r3, r3, r1
 800b628:	42ab      	cmp	r3, r5
 800b62a:	dcf2      	bgt.n	800b612 <_printf_i+0x212>
 800b62c:	e7eb      	b.n	800b606 <_printf_i+0x206>
 800b62e:	2500      	movs	r5, #0
 800b630:	f104 0619 	add.w	r6, r4, #25
 800b634:	e7f5      	b.n	800b622 <_printf_i+0x222>
 800b636:	bf00      	nop
 800b638:	08010412 	.word	0x08010412
 800b63c:	08010423 	.word	0x08010423

0800b640 <_scanf_float>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	b087      	sub	sp, #28
 800b646:	4617      	mov	r7, r2
 800b648:	9303      	str	r3, [sp, #12]
 800b64a:	688b      	ldr	r3, [r1, #8]
 800b64c:	1e5a      	subs	r2, r3, #1
 800b64e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b652:	bf81      	itttt	hi
 800b654:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b658:	eb03 0b05 	addhi.w	fp, r3, r5
 800b65c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b660:	608b      	strhi	r3, [r1, #8]
 800b662:	680b      	ldr	r3, [r1, #0]
 800b664:	460a      	mov	r2, r1
 800b666:	f04f 0500 	mov.w	r5, #0
 800b66a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b66e:	f842 3b1c 	str.w	r3, [r2], #28
 800b672:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b676:	4680      	mov	r8, r0
 800b678:	460c      	mov	r4, r1
 800b67a:	bf98      	it	ls
 800b67c:	f04f 0b00 	movls.w	fp, #0
 800b680:	9201      	str	r2, [sp, #4]
 800b682:	4616      	mov	r6, r2
 800b684:	46aa      	mov	sl, r5
 800b686:	46a9      	mov	r9, r5
 800b688:	9502      	str	r5, [sp, #8]
 800b68a:	68a2      	ldr	r2, [r4, #8]
 800b68c:	b152      	cbz	r2, 800b6a4 <_scanf_float+0x64>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b4e      	cmp	r3, #78	@ 0x4e
 800b694:	d864      	bhi.n	800b760 <_scanf_float+0x120>
 800b696:	2b40      	cmp	r3, #64	@ 0x40
 800b698:	d83c      	bhi.n	800b714 <_scanf_float+0xd4>
 800b69a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b69e:	b2c8      	uxtb	r0, r1
 800b6a0:	280e      	cmp	r0, #14
 800b6a2:	d93a      	bls.n	800b71a <_scanf_float+0xda>
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	d003      	beq.n	800b6b2 <_scanf_float+0x72>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6b6:	f1ba 0f01 	cmp.w	sl, #1
 800b6ba:	f200 8117 	bhi.w	800b8ec <_scanf_float+0x2ac>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	f200 8108 	bhi.w	800b8d6 <_scanf_float+0x296>
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	b007      	add	sp, #28
 800b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b6d2:	2a0d      	cmp	r2, #13
 800b6d4:	d8e6      	bhi.n	800b6a4 <_scanf_float+0x64>
 800b6d6:	a101      	add	r1, pc, #4	@ (adr r1, 800b6dc <_scanf_float+0x9c>)
 800b6d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6dc:	0800b823 	.word	0x0800b823
 800b6e0:	0800b6a5 	.word	0x0800b6a5
 800b6e4:	0800b6a5 	.word	0x0800b6a5
 800b6e8:	0800b6a5 	.word	0x0800b6a5
 800b6ec:	0800b883 	.word	0x0800b883
 800b6f0:	0800b85b 	.word	0x0800b85b
 800b6f4:	0800b6a5 	.word	0x0800b6a5
 800b6f8:	0800b6a5 	.word	0x0800b6a5
 800b6fc:	0800b831 	.word	0x0800b831
 800b700:	0800b6a5 	.word	0x0800b6a5
 800b704:	0800b6a5 	.word	0x0800b6a5
 800b708:	0800b6a5 	.word	0x0800b6a5
 800b70c:	0800b6a5 	.word	0x0800b6a5
 800b710:	0800b7e9 	.word	0x0800b7e9
 800b714:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b718:	e7db      	b.n	800b6d2 <_scanf_float+0x92>
 800b71a:	290e      	cmp	r1, #14
 800b71c:	d8c2      	bhi.n	800b6a4 <_scanf_float+0x64>
 800b71e:	a001      	add	r0, pc, #4	@ (adr r0, 800b724 <_scanf_float+0xe4>)
 800b720:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b724:	0800b7d9 	.word	0x0800b7d9
 800b728:	0800b6a5 	.word	0x0800b6a5
 800b72c:	0800b7d9 	.word	0x0800b7d9
 800b730:	0800b86f 	.word	0x0800b86f
 800b734:	0800b6a5 	.word	0x0800b6a5
 800b738:	0800b781 	.word	0x0800b781
 800b73c:	0800b7bf 	.word	0x0800b7bf
 800b740:	0800b7bf 	.word	0x0800b7bf
 800b744:	0800b7bf 	.word	0x0800b7bf
 800b748:	0800b7bf 	.word	0x0800b7bf
 800b74c:	0800b7bf 	.word	0x0800b7bf
 800b750:	0800b7bf 	.word	0x0800b7bf
 800b754:	0800b7bf 	.word	0x0800b7bf
 800b758:	0800b7bf 	.word	0x0800b7bf
 800b75c:	0800b7bf 	.word	0x0800b7bf
 800b760:	2b6e      	cmp	r3, #110	@ 0x6e
 800b762:	d809      	bhi.n	800b778 <_scanf_float+0x138>
 800b764:	2b60      	cmp	r3, #96	@ 0x60
 800b766:	d8b2      	bhi.n	800b6ce <_scanf_float+0x8e>
 800b768:	2b54      	cmp	r3, #84	@ 0x54
 800b76a:	d07b      	beq.n	800b864 <_scanf_float+0x224>
 800b76c:	2b59      	cmp	r3, #89	@ 0x59
 800b76e:	d199      	bne.n	800b6a4 <_scanf_float+0x64>
 800b770:	2d07      	cmp	r5, #7
 800b772:	d197      	bne.n	800b6a4 <_scanf_float+0x64>
 800b774:	2508      	movs	r5, #8
 800b776:	e02c      	b.n	800b7d2 <_scanf_float+0x192>
 800b778:	2b74      	cmp	r3, #116	@ 0x74
 800b77a:	d073      	beq.n	800b864 <_scanf_float+0x224>
 800b77c:	2b79      	cmp	r3, #121	@ 0x79
 800b77e:	e7f6      	b.n	800b76e <_scanf_float+0x12e>
 800b780:	6821      	ldr	r1, [r4, #0]
 800b782:	05c8      	lsls	r0, r1, #23
 800b784:	d51b      	bpl.n	800b7be <_scanf_float+0x17e>
 800b786:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b78a:	6021      	str	r1, [r4, #0]
 800b78c:	f109 0901 	add.w	r9, r9, #1
 800b790:	f1bb 0f00 	cmp.w	fp, #0
 800b794:	d003      	beq.n	800b79e <_scanf_float+0x15e>
 800b796:	3201      	adds	r2, #1
 800b798:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b79c:	60a2      	str	r2, [r4, #8]
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	60a3      	str	r3, [r4, #8]
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	f340 8087 	ble.w	800b8c4 <_scanf_float+0x284>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	e765      	b.n	800b68a <_scanf_float+0x4a>
 800b7be:	eb1a 0105 	adds.w	r1, sl, r5
 800b7c2:	f47f af6f 	bne.w	800b6a4 <_scanf_float+0x64>
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b7cc:	6022      	str	r2, [r4, #0]
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	468a      	mov	sl, r1
 800b7d2:	f806 3b01 	strb.w	r3, [r6], #1
 800b7d6:	e7e2      	b.n	800b79e <_scanf_float+0x15e>
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	0610      	lsls	r0, r2, #24
 800b7dc:	f57f af62 	bpl.w	800b6a4 <_scanf_float+0x64>
 800b7e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b7e4:	6022      	str	r2, [r4, #0]
 800b7e6:	e7f4      	b.n	800b7d2 <_scanf_float+0x192>
 800b7e8:	f1ba 0f00 	cmp.w	sl, #0
 800b7ec:	d10e      	bne.n	800b80c <_scanf_float+0x1cc>
 800b7ee:	f1b9 0f00 	cmp.w	r9, #0
 800b7f2:	d10e      	bne.n	800b812 <_scanf_float+0x1d2>
 800b7f4:	6822      	ldr	r2, [r4, #0]
 800b7f6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7fa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7fe:	d108      	bne.n	800b812 <_scanf_float+0x1d2>
 800b800:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b804:	6022      	str	r2, [r4, #0]
 800b806:	f04f 0a01 	mov.w	sl, #1
 800b80a:	e7e2      	b.n	800b7d2 <_scanf_float+0x192>
 800b80c:	f1ba 0f02 	cmp.w	sl, #2
 800b810:	d055      	beq.n	800b8be <_scanf_float+0x27e>
 800b812:	2d01      	cmp	r5, #1
 800b814:	d002      	beq.n	800b81c <_scanf_float+0x1dc>
 800b816:	2d04      	cmp	r5, #4
 800b818:	f47f af44 	bne.w	800b6a4 <_scanf_float+0x64>
 800b81c:	3501      	adds	r5, #1
 800b81e:	b2ed      	uxtb	r5, r5
 800b820:	e7d7      	b.n	800b7d2 <_scanf_float+0x192>
 800b822:	f1ba 0f01 	cmp.w	sl, #1
 800b826:	f47f af3d 	bne.w	800b6a4 <_scanf_float+0x64>
 800b82a:	f04f 0a02 	mov.w	sl, #2
 800b82e:	e7d0      	b.n	800b7d2 <_scanf_float+0x192>
 800b830:	b97d      	cbnz	r5, 800b852 <_scanf_float+0x212>
 800b832:	f1b9 0f00 	cmp.w	r9, #0
 800b836:	f47f af38 	bne.w	800b6aa <_scanf_float+0x6a>
 800b83a:	6822      	ldr	r2, [r4, #0]
 800b83c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b840:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b844:	f040 8108 	bne.w	800ba58 <_scanf_float+0x418>
 800b848:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b84c:	6022      	str	r2, [r4, #0]
 800b84e:	2501      	movs	r5, #1
 800b850:	e7bf      	b.n	800b7d2 <_scanf_float+0x192>
 800b852:	2d03      	cmp	r5, #3
 800b854:	d0e2      	beq.n	800b81c <_scanf_float+0x1dc>
 800b856:	2d05      	cmp	r5, #5
 800b858:	e7de      	b.n	800b818 <_scanf_float+0x1d8>
 800b85a:	2d02      	cmp	r5, #2
 800b85c:	f47f af22 	bne.w	800b6a4 <_scanf_float+0x64>
 800b860:	2503      	movs	r5, #3
 800b862:	e7b6      	b.n	800b7d2 <_scanf_float+0x192>
 800b864:	2d06      	cmp	r5, #6
 800b866:	f47f af1d 	bne.w	800b6a4 <_scanf_float+0x64>
 800b86a:	2507      	movs	r5, #7
 800b86c:	e7b1      	b.n	800b7d2 <_scanf_float+0x192>
 800b86e:	6822      	ldr	r2, [r4, #0]
 800b870:	0591      	lsls	r1, r2, #22
 800b872:	f57f af17 	bpl.w	800b6a4 <_scanf_float+0x64>
 800b876:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b87a:	6022      	str	r2, [r4, #0]
 800b87c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b880:	e7a7      	b.n	800b7d2 <_scanf_float+0x192>
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b888:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b88c:	d006      	beq.n	800b89c <_scanf_float+0x25c>
 800b88e:	0550      	lsls	r0, r2, #21
 800b890:	f57f af08 	bpl.w	800b6a4 <_scanf_float+0x64>
 800b894:	f1b9 0f00 	cmp.w	r9, #0
 800b898:	f000 80de 	beq.w	800ba58 <_scanf_float+0x418>
 800b89c:	0591      	lsls	r1, r2, #22
 800b89e:	bf58      	it	pl
 800b8a0:	9902      	ldrpl	r1, [sp, #8]
 800b8a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b8a6:	bf58      	it	pl
 800b8a8:	eba9 0101 	subpl.w	r1, r9, r1
 800b8ac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b8b0:	bf58      	it	pl
 800b8b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b8b6:	6022      	str	r2, [r4, #0]
 800b8b8:	f04f 0900 	mov.w	r9, #0
 800b8bc:	e789      	b.n	800b7d2 <_scanf_float+0x192>
 800b8be:	f04f 0a03 	mov.w	sl, #3
 800b8c2:	e786      	b.n	800b7d2 <_scanf_float+0x192>
 800b8c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	4798      	blx	r3
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	f43f aedb 	beq.w	800b68a <_scanf_float+0x4a>
 800b8d4:	e6e6      	b.n	800b6a4 <_scanf_float+0x64>
 800b8d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8de:	463a      	mov	r2, r7
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	4798      	blx	r3
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	6123      	str	r3, [r4, #16]
 800b8ea:	e6e8      	b.n	800b6be <_scanf_float+0x7e>
 800b8ec:	1e6b      	subs	r3, r5, #1
 800b8ee:	2b06      	cmp	r3, #6
 800b8f0:	d824      	bhi.n	800b93c <_scanf_float+0x2fc>
 800b8f2:	2d02      	cmp	r5, #2
 800b8f4:	d836      	bhi.n	800b964 <_scanf_float+0x324>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	f67f aee4 	bls.w	800b6c6 <_scanf_float+0x86>
 800b8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b906:	463a      	mov	r2, r7
 800b908:	4640      	mov	r0, r8
 800b90a:	4798      	blx	r3
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	3b01      	subs	r3, #1
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	e7f0      	b.n	800b8f6 <_scanf_float+0x2b6>
 800b914:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b918:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b91c:	463a      	mov	r2, r7
 800b91e:	4640      	mov	r0, r8
 800b920:	4798      	blx	r3
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	3b01      	subs	r3, #1
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b92c:	fa5f fa8a 	uxtb.w	sl, sl
 800b930:	f1ba 0f02 	cmp.w	sl, #2
 800b934:	d1ee      	bne.n	800b914 <_scanf_float+0x2d4>
 800b936:	3d03      	subs	r5, #3
 800b938:	b2ed      	uxtb	r5, r5
 800b93a:	1b76      	subs	r6, r6, r5
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	05da      	lsls	r2, r3, #23
 800b940:	d530      	bpl.n	800b9a4 <_scanf_float+0x364>
 800b942:	055b      	lsls	r3, r3, #21
 800b944:	d511      	bpl.n	800b96a <_scanf_float+0x32a>
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	429e      	cmp	r6, r3
 800b94a:	f67f aebc 	bls.w	800b6c6 <_scanf_float+0x86>
 800b94e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b956:	463a      	mov	r2, r7
 800b958:	4640      	mov	r0, r8
 800b95a:	4798      	blx	r3
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	3b01      	subs	r3, #1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	e7f0      	b.n	800b946 <_scanf_float+0x306>
 800b964:	46aa      	mov	sl, r5
 800b966:	46b3      	mov	fp, r6
 800b968:	e7de      	b.n	800b928 <_scanf_float+0x2e8>
 800b96a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b96e:	6923      	ldr	r3, [r4, #16]
 800b970:	2965      	cmp	r1, #101	@ 0x65
 800b972:	f103 33ff 	add.w	r3, r3, #4294967295
 800b976:	f106 35ff 	add.w	r5, r6, #4294967295
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	d00c      	beq.n	800b998 <_scanf_float+0x358>
 800b97e:	2945      	cmp	r1, #69	@ 0x45
 800b980:	d00a      	beq.n	800b998 <_scanf_float+0x358>
 800b982:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b986:	463a      	mov	r2, r7
 800b988:	4640      	mov	r0, r8
 800b98a:	4798      	blx	r3
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b992:	3b01      	subs	r3, #1
 800b994:	1eb5      	subs	r5, r6, #2
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b99c:	463a      	mov	r2, r7
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4798      	blx	r3
 800b9a2:	462e      	mov	r6, r5
 800b9a4:	6822      	ldr	r2, [r4, #0]
 800b9a6:	f012 0210 	ands.w	r2, r2, #16
 800b9aa:	d001      	beq.n	800b9b0 <_scanf_float+0x370>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e68b      	b.n	800b6c8 <_scanf_float+0x88>
 800b9b0:	7032      	strb	r2, [r6, #0]
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b9b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9bc:	d11c      	bne.n	800b9f8 <_scanf_float+0x3b8>
 800b9be:	9b02      	ldr	r3, [sp, #8]
 800b9c0:	454b      	cmp	r3, r9
 800b9c2:	eba3 0209 	sub.w	r2, r3, r9
 800b9c6:	d123      	bne.n	800ba10 <_scanf_float+0x3d0>
 800b9c8:	9901      	ldr	r1, [sp, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	f002 fbf7 	bl	800e1c0 <_strtod_r>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	6821      	ldr	r1, [r4, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f011 0f02 	tst.w	r1, #2
 800b9dc:	ec57 6b10 	vmov	r6, r7, d0
 800b9e0:	f103 0204 	add.w	r2, r3, #4
 800b9e4:	d01f      	beq.n	800ba26 <_scanf_float+0x3e6>
 800b9e6:	9903      	ldr	r1, [sp, #12]
 800b9e8:	600a      	str	r2, [r1, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	e9c3 6700 	strd	r6, r7, [r3]
 800b9f0:	68e3      	ldr	r3, [r4, #12]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	60e3      	str	r3, [r4, #12]
 800b9f6:	e7d9      	b.n	800b9ac <_scanf_float+0x36c>
 800b9f8:	9b04      	ldr	r3, [sp, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0e4      	beq.n	800b9c8 <_scanf_float+0x388>
 800b9fe:	9905      	ldr	r1, [sp, #20]
 800ba00:	230a      	movs	r3, #10
 800ba02:	3101      	adds	r1, #1
 800ba04:	4640      	mov	r0, r8
 800ba06:	f002 fc5b 	bl	800e2c0 <_strtol_r>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	9e05      	ldr	r6, [sp, #20]
 800ba0e:	1ac2      	subs	r2, r0, r3
 800ba10:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ba14:	429e      	cmp	r6, r3
 800ba16:	bf28      	it	cs
 800ba18:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ba1c:	4910      	ldr	r1, [pc, #64]	@ (800ba60 <_scanf_float+0x420>)
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f000 f8e4 	bl	800bbec <siprintf>
 800ba24:	e7d0      	b.n	800b9c8 <_scanf_float+0x388>
 800ba26:	f011 0f04 	tst.w	r1, #4
 800ba2a:	9903      	ldr	r1, [sp, #12]
 800ba2c:	600a      	str	r2, [r1, #0]
 800ba2e:	d1dc      	bne.n	800b9ea <_scanf_float+0x3aa>
 800ba30:	681d      	ldr	r5, [r3, #0]
 800ba32:	4632      	mov	r2, r6
 800ba34:	463b      	mov	r3, r7
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f5 f87f 	bl	8000b3c <__aeabi_dcmpun>
 800ba3e:	b128      	cbz	r0, 800ba4c <_scanf_float+0x40c>
 800ba40:	4808      	ldr	r0, [pc, #32]	@ (800ba64 <_scanf_float+0x424>)
 800ba42:	f000 f9b7 	bl	800bdb4 <nanf>
 800ba46:	ed85 0a00 	vstr	s0, [r5]
 800ba4a:	e7d1      	b.n	800b9f0 <_scanf_float+0x3b0>
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f5 f8d2 	bl	8000bf8 <__aeabi_d2f>
 800ba54:	6028      	str	r0, [r5, #0]
 800ba56:	e7cb      	b.n	800b9f0 <_scanf_float+0x3b0>
 800ba58:	f04f 0900 	mov.w	r9, #0
 800ba5c:	e629      	b.n	800b6b2 <_scanf_float+0x72>
 800ba5e:	bf00      	nop
 800ba60:	08010434 	.word	0x08010434
 800ba64:	080107cd 	.word	0x080107cd

0800ba68 <std>:
 800ba68:	2300      	movs	r3, #0
 800ba6a:	b510      	push	{r4, lr}
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	8181      	strh	r1, [r0, #12]
 800ba7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba7c:	81c2      	strh	r2, [r0, #14]
 800ba7e:	6183      	str	r3, [r0, #24]
 800ba80:	4619      	mov	r1, r3
 800ba82:	2208      	movs	r2, #8
 800ba84:	305c      	adds	r0, #92	@ 0x5c
 800ba86:	f000 f914 	bl	800bcb2 <memset>
 800ba8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bac0 <std+0x58>)
 800ba8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bac4 <std+0x5c>)
 800ba90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba92:	4b0d      	ldr	r3, [pc, #52]	@ (800bac8 <std+0x60>)
 800ba94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba96:	4b0d      	ldr	r3, [pc, #52]	@ (800bacc <std+0x64>)
 800ba98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bad0 <std+0x68>)
 800ba9c:	6224      	str	r4, [r4, #32]
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d006      	beq.n	800bab0 <std+0x48>
 800baa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800baa6:	4294      	cmp	r4, r2
 800baa8:	d002      	beq.n	800bab0 <std+0x48>
 800baaa:	33d0      	adds	r3, #208	@ 0xd0
 800baac:	429c      	cmp	r4, r3
 800baae:	d105      	bne.n	800babc <std+0x54>
 800bab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab8:	f000 b978 	b.w	800bdac <__retarget_lock_init_recursive>
 800babc:	bd10      	pop	{r4, pc}
 800babe:	bf00      	nop
 800bac0:	0800bc2d 	.word	0x0800bc2d
 800bac4:	0800bc4f 	.word	0x0800bc4f
 800bac8:	0800bc87 	.word	0x0800bc87
 800bacc:	0800bcab 	.word	0x0800bcab
 800bad0:	200020bc 	.word	0x200020bc

0800bad4 <stdio_exit_handler>:
 800bad4:	4a02      	ldr	r2, [pc, #8]	@ (800bae0 <stdio_exit_handler+0xc>)
 800bad6:	4903      	ldr	r1, [pc, #12]	@ (800bae4 <stdio_exit_handler+0x10>)
 800bad8:	4803      	ldr	r0, [pc, #12]	@ (800bae8 <stdio_exit_handler+0x14>)
 800bada:	f000 b869 	b.w	800bbb0 <_fwalk_sglue>
 800bade:	bf00      	nop
 800bae0:	20000100 	.word	0x20000100
 800bae4:	0800e67d 	.word	0x0800e67d
 800bae8:	20000110 	.word	0x20000110

0800baec <cleanup_stdio>:
 800baec:	6841      	ldr	r1, [r0, #4]
 800baee:	4b0c      	ldr	r3, [pc, #48]	@ (800bb20 <cleanup_stdio+0x34>)
 800baf0:	4299      	cmp	r1, r3
 800baf2:	b510      	push	{r4, lr}
 800baf4:	4604      	mov	r4, r0
 800baf6:	d001      	beq.n	800bafc <cleanup_stdio+0x10>
 800baf8:	f002 fdc0 	bl	800e67c <_fflush_r>
 800bafc:	68a1      	ldr	r1, [r4, #8]
 800bafe:	4b09      	ldr	r3, [pc, #36]	@ (800bb24 <cleanup_stdio+0x38>)
 800bb00:	4299      	cmp	r1, r3
 800bb02:	d002      	beq.n	800bb0a <cleanup_stdio+0x1e>
 800bb04:	4620      	mov	r0, r4
 800bb06:	f002 fdb9 	bl	800e67c <_fflush_r>
 800bb0a:	68e1      	ldr	r1, [r4, #12]
 800bb0c:	4b06      	ldr	r3, [pc, #24]	@ (800bb28 <cleanup_stdio+0x3c>)
 800bb0e:	4299      	cmp	r1, r3
 800bb10:	d004      	beq.n	800bb1c <cleanup_stdio+0x30>
 800bb12:	4620      	mov	r0, r4
 800bb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb18:	f002 bdb0 	b.w	800e67c <_fflush_r>
 800bb1c:	bd10      	pop	{r4, pc}
 800bb1e:	bf00      	nop
 800bb20:	200020bc 	.word	0x200020bc
 800bb24:	20002124 	.word	0x20002124
 800bb28:	2000218c 	.word	0x2000218c

0800bb2c <global_stdio_init.part.0>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb5c <global_stdio_init.part.0+0x30>)
 800bb30:	4c0b      	ldr	r4, [pc, #44]	@ (800bb60 <global_stdio_init.part.0+0x34>)
 800bb32:	4a0c      	ldr	r2, [pc, #48]	@ (800bb64 <global_stdio_init.part.0+0x38>)
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	4620      	mov	r0, r4
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	f7ff ff94 	bl	800ba68 <std>
 800bb40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb44:	2201      	movs	r2, #1
 800bb46:	2109      	movs	r1, #9
 800bb48:	f7ff ff8e 	bl	800ba68 <std>
 800bb4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb50:	2202      	movs	r2, #2
 800bb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb56:	2112      	movs	r1, #18
 800bb58:	f7ff bf86 	b.w	800ba68 <std>
 800bb5c:	200021f4 	.word	0x200021f4
 800bb60:	200020bc 	.word	0x200020bc
 800bb64:	0800bad5 	.word	0x0800bad5

0800bb68 <__sfp_lock_acquire>:
 800bb68:	4801      	ldr	r0, [pc, #4]	@ (800bb70 <__sfp_lock_acquire+0x8>)
 800bb6a:	f000 b920 	b.w	800bdae <__retarget_lock_acquire_recursive>
 800bb6e:	bf00      	nop
 800bb70:	200021fd 	.word	0x200021fd

0800bb74 <__sfp_lock_release>:
 800bb74:	4801      	ldr	r0, [pc, #4]	@ (800bb7c <__sfp_lock_release+0x8>)
 800bb76:	f000 b91b 	b.w	800bdb0 <__retarget_lock_release_recursive>
 800bb7a:	bf00      	nop
 800bb7c:	200021fd 	.word	0x200021fd

0800bb80 <__sinit>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4604      	mov	r4, r0
 800bb84:	f7ff fff0 	bl	800bb68 <__sfp_lock_acquire>
 800bb88:	6a23      	ldr	r3, [r4, #32]
 800bb8a:	b11b      	cbz	r3, 800bb94 <__sinit+0x14>
 800bb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb90:	f7ff bff0 	b.w	800bb74 <__sfp_lock_release>
 800bb94:	4b04      	ldr	r3, [pc, #16]	@ (800bba8 <__sinit+0x28>)
 800bb96:	6223      	str	r3, [r4, #32]
 800bb98:	4b04      	ldr	r3, [pc, #16]	@ (800bbac <__sinit+0x2c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1f5      	bne.n	800bb8c <__sinit+0xc>
 800bba0:	f7ff ffc4 	bl	800bb2c <global_stdio_init.part.0>
 800bba4:	e7f2      	b.n	800bb8c <__sinit+0xc>
 800bba6:	bf00      	nop
 800bba8:	0800baed 	.word	0x0800baed
 800bbac:	200021f4 	.word	0x200021f4

0800bbb0 <_fwalk_sglue>:
 800bbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb4:	4607      	mov	r7, r0
 800bbb6:	4688      	mov	r8, r1
 800bbb8:	4614      	mov	r4, r2
 800bbba:	2600      	movs	r6, #0
 800bbbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbc0:	f1b9 0901 	subs.w	r9, r9, #1
 800bbc4:	d505      	bpl.n	800bbd2 <_fwalk_sglue+0x22>
 800bbc6:	6824      	ldr	r4, [r4, #0]
 800bbc8:	2c00      	cmp	r4, #0
 800bbca:	d1f7      	bne.n	800bbbc <_fwalk_sglue+0xc>
 800bbcc:	4630      	mov	r0, r6
 800bbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd2:	89ab      	ldrh	r3, [r5, #12]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d907      	bls.n	800bbe8 <_fwalk_sglue+0x38>
 800bbd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	d003      	beq.n	800bbe8 <_fwalk_sglue+0x38>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	47c0      	blx	r8
 800bbe6:	4306      	orrs	r6, r0
 800bbe8:	3568      	adds	r5, #104	@ 0x68
 800bbea:	e7e9      	b.n	800bbc0 <_fwalk_sglue+0x10>

0800bbec <siprintf>:
 800bbec:	b40e      	push	{r1, r2, r3}
 800bbee:	b500      	push	{lr}
 800bbf0:	b09c      	sub	sp, #112	@ 0x70
 800bbf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bbf4:	9002      	str	r0, [sp, #8]
 800bbf6:	9006      	str	r0, [sp, #24]
 800bbf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbfc:	4809      	ldr	r0, [pc, #36]	@ (800bc24 <siprintf+0x38>)
 800bbfe:	9107      	str	r1, [sp, #28]
 800bc00:	9104      	str	r1, [sp, #16]
 800bc02:	4909      	ldr	r1, [pc, #36]	@ (800bc28 <siprintf+0x3c>)
 800bc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc08:	9105      	str	r1, [sp, #20]
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	a902      	add	r1, sp, #8
 800bc10:	f002 fbb4 	bl	800e37c <_svfiprintf_r>
 800bc14:	9b02      	ldr	r3, [sp, #8]
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	b01c      	add	sp, #112	@ 0x70
 800bc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc20:	b003      	add	sp, #12
 800bc22:	4770      	bx	lr
 800bc24:	2000010c 	.word	0x2000010c
 800bc28:	ffff0208 	.word	0xffff0208

0800bc2c <__sread>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc34:	f000 f86c 	bl	800bd10 <_read_r>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	bfab      	itete	ge
 800bc3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc3e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc40:	181b      	addge	r3, r3, r0
 800bc42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc46:	bfac      	ite	ge
 800bc48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc4a:	81a3      	strhlt	r3, [r4, #12]
 800bc4c:	bd10      	pop	{r4, pc}

0800bc4e <__swrite>:
 800bc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc52:	461f      	mov	r7, r3
 800bc54:	898b      	ldrh	r3, [r1, #12]
 800bc56:	05db      	lsls	r3, r3, #23
 800bc58:	4605      	mov	r5, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	d505      	bpl.n	800bc6c <__swrite+0x1e>
 800bc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc64:	2302      	movs	r3, #2
 800bc66:	2200      	movs	r2, #0
 800bc68:	f000 f840 	bl	800bcec <_lseek_r>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	4632      	mov	r2, r6
 800bc7a:	463b      	mov	r3, r7
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	f000 b857 	b.w	800bd34 <_write_r>

0800bc86 <__sseek>:
 800bc86:	b510      	push	{r4, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8e:	f000 f82d 	bl	800bcec <_lseek_r>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	bf15      	itete	ne
 800bc98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bca2:	81a3      	strheq	r3, [r4, #12]
 800bca4:	bf18      	it	ne
 800bca6:	81a3      	strhne	r3, [r4, #12]
 800bca8:	bd10      	pop	{r4, pc}

0800bcaa <__sclose>:
 800bcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcae:	f000 b80d 	b.w	800bccc <_close_r>

0800bcb2 <memset>:
 800bcb2:	4402      	add	r2, r0
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d100      	bne.n	800bcbc <memset+0xa>
 800bcba:	4770      	bx	lr
 800bcbc:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc0:	e7f9      	b.n	800bcb6 <memset+0x4>
	...

0800bcc4 <_localeconv_r>:
 800bcc4:	4800      	ldr	r0, [pc, #0]	@ (800bcc8 <_localeconv_r+0x4>)
 800bcc6:	4770      	bx	lr
 800bcc8:	2000024c 	.word	0x2000024c

0800bccc <_close_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	@ (800bce8 <_close_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f6 f964 	bl	8001fa4 <_close>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_close_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_close_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	200021f8 	.word	0x200021f8

0800bcec <_lseek_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	@ (800bd0c <_lseek_r+0x20>)
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	602a      	str	r2, [r5, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f7f6 f979 	bl	8001ff2 <_lseek>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_lseek_r+0x1e>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_lseek_r+0x1e>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	200021f8 	.word	0x200021f8

0800bd10 <_read_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d07      	ldr	r5, [pc, #28]	@ (800bd30 <_read_r+0x20>)
 800bd14:	4604      	mov	r4, r0
 800bd16:	4608      	mov	r0, r1
 800bd18:	4611      	mov	r1, r2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f7f6 f907 	bl	8001f32 <_read>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_read_r+0x1e>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_read_r+0x1e>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	200021f8 	.word	0x200021f8

0800bd34 <_write_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	@ (800bd54 <_write_r+0x20>)
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4608      	mov	r0, r1
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	602a      	str	r2, [r5, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	f7f6 f912 	bl	8001f6c <_write>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_write_r+0x1e>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_write_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	200021f8 	.word	0x200021f8

0800bd58 <__errno>:
 800bd58:	4b01      	ldr	r3, [pc, #4]	@ (800bd60 <__errno+0x8>)
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	2000010c 	.word	0x2000010c

0800bd64 <__libc_init_array>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4d0d      	ldr	r5, [pc, #52]	@ (800bd9c <__libc_init_array+0x38>)
 800bd68:	4c0d      	ldr	r4, [pc, #52]	@ (800bda0 <__libc_init_array+0x3c>)
 800bd6a:	1b64      	subs	r4, r4, r5
 800bd6c:	10a4      	asrs	r4, r4, #2
 800bd6e:	2600      	movs	r6, #0
 800bd70:	42a6      	cmp	r6, r4
 800bd72:	d109      	bne.n	800bd88 <__libc_init_array+0x24>
 800bd74:	4d0b      	ldr	r5, [pc, #44]	@ (800bda4 <__libc_init_array+0x40>)
 800bd76:	4c0c      	ldr	r4, [pc, #48]	@ (800bda8 <__libc_init_array+0x44>)
 800bd78:	f004 fad0 	bl	801031c <_init>
 800bd7c:	1b64      	subs	r4, r4, r5
 800bd7e:	10a4      	asrs	r4, r4, #2
 800bd80:	2600      	movs	r6, #0
 800bd82:	42a6      	cmp	r6, r4
 800bd84:	d105      	bne.n	800bd92 <__libc_init_array+0x2e>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8c:	4798      	blx	r3
 800bd8e:	3601      	adds	r6, #1
 800bd90:	e7ee      	b.n	800bd70 <__libc_init_array+0xc>
 800bd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd96:	4798      	blx	r3
 800bd98:	3601      	adds	r6, #1
 800bd9a:	e7f2      	b.n	800bd82 <__libc_init_array+0x1e>
 800bd9c:	08010868 	.word	0x08010868
 800bda0:	08010868 	.word	0x08010868
 800bda4:	08010868 	.word	0x08010868
 800bda8:	0801086c 	.word	0x0801086c

0800bdac <__retarget_lock_init_recursive>:
 800bdac:	4770      	bx	lr

0800bdae <__retarget_lock_acquire_recursive>:
 800bdae:	4770      	bx	lr

0800bdb0 <__retarget_lock_release_recursive>:
 800bdb0:	4770      	bx	lr
	...

0800bdb4 <nanf>:
 800bdb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bdbc <nanf+0x8>
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	7fc00000 	.word	0x7fc00000

0800bdc0 <quorem>:
 800bdc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	6903      	ldr	r3, [r0, #16]
 800bdc6:	690c      	ldr	r4, [r1, #16]
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	4607      	mov	r7, r0
 800bdcc:	db7e      	blt.n	800becc <quorem+0x10c>
 800bdce:	3c01      	subs	r4, #1
 800bdd0:	f101 0814 	add.w	r8, r1, #20
 800bdd4:	00a3      	lsls	r3, r4, #2
 800bdd6:	f100 0514 	add.w	r5, r0, #20
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bde6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdea:	3301      	adds	r3, #1
 800bdec:	429a      	cmp	r2, r3
 800bdee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdf2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdf6:	d32e      	bcc.n	800be56 <quorem+0x96>
 800bdf8:	f04f 0a00 	mov.w	sl, #0
 800bdfc:	46c4      	mov	ip, r8
 800bdfe:	46ae      	mov	lr, r5
 800be00:	46d3      	mov	fp, sl
 800be02:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be06:	b298      	uxth	r0, r3
 800be08:	fb06 a000 	mla	r0, r6, r0, sl
 800be0c:	0c02      	lsrs	r2, r0, #16
 800be0e:	0c1b      	lsrs	r3, r3, #16
 800be10:	fb06 2303 	mla	r3, r6, r3, r2
 800be14:	f8de 2000 	ldr.w	r2, [lr]
 800be18:	b280      	uxth	r0, r0
 800be1a:	b292      	uxth	r2, r2
 800be1c:	1a12      	subs	r2, r2, r0
 800be1e:	445a      	add	r2, fp
 800be20:	f8de 0000 	ldr.w	r0, [lr]
 800be24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be28:	b29b      	uxth	r3, r3
 800be2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be32:	b292      	uxth	r2, r2
 800be34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be38:	45e1      	cmp	r9, ip
 800be3a:	f84e 2b04 	str.w	r2, [lr], #4
 800be3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be42:	d2de      	bcs.n	800be02 <quorem+0x42>
 800be44:	9b00      	ldr	r3, [sp, #0]
 800be46:	58eb      	ldr	r3, [r5, r3]
 800be48:	b92b      	cbnz	r3, 800be56 <quorem+0x96>
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	3b04      	subs	r3, #4
 800be4e:	429d      	cmp	r5, r3
 800be50:	461a      	mov	r2, r3
 800be52:	d32f      	bcc.n	800beb4 <quorem+0xf4>
 800be54:	613c      	str	r4, [r7, #16]
 800be56:	4638      	mov	r0, r7
 800be58:	f001 f9c2 	bl	800d1e0 <__mcmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	db25      	blt.n	800beac <quorem+0xec>
 800be60:	4629      	mov	r1, r5
 800be62:	2000      	movs	r0, #0
 800be64:	f858 2b04 	ldr.w	r2, [r8], #4
 800be68:	f8d1 c000 	ldr.w	ip, [r1]
 800be6c:	fa1f fe82 	uxth.w	lr, r2
 800be70:	fa1f f38c 	uxth.w	r3, ip
 800be74:	eba3 030e 	sub.w	r3, r3, lr
 800be78:	4403      	add	r3, r0
 800be7a:	0c12      	lsrs	r2, r2, #16
 800be7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be84:	b29b      	uxth	r3, r3
 800be86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be8a:	45c1      	cmp	r9, r8
 800be8c:	f841 3b04 	str.w	r3, [r1], #4
 800be90:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be94:	d2e6      	bcs.n	800be64 <quorem+0xa4>
 800be96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be9e:	b922      	cbnz	r2, 800beaa <quorem+0xea>
 800bea0:	3b04      	subs	r3, #4
 800bea2:	429d      	cmp	r5, r3
 800bea4:	461a      	mov	r2, r3
 800bea6:	d30b      	bcc.n	800bec0 <quorem+0x100>
 800bea8:	613c      	str	r4, [r7, #16]
 800beaa:	3601      	adds	r6, #1
 800beac:	4630      	mov	r0, r6
 800beae:	b003      	add	sp, #12
 800beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	3b04      	subs	r3, #4
 800beb8:	2a00      	cmp	r2, #0
 800beba:	d1cb      	bne.n	800be54 <quorem+0x94>
 800bebc:	3c01      	subs	r4, #1
 800bebe:	e7c6      	b.n	800be4e <quorem+0x8e>
 800bec0:	6812      	ldr	r2, [r2, #0]
 800bec2:	3b04      	subs	r3, #4
 800bec4:	2a00      	cmp	r2, #0
 800bec6:	d1ef      	bne.n	800bea8 <quorem+0xe8>
 800bec8:	3c01      	subs	r4, #1
 800beca:	e7ea      	b.n	800bea2 <quorem+0xe2>
 800becc:	2000      	movs	r0, #0
 800bece:	e7ee      	b.n	800beae <quorem+0xee>

0800bed0 <_dtoa_r>:
 800bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	69c7      	ldr	r7, [r0, #28]
 800bed6:	b099      	sub	sp, #100	@ 0x64
 800bed8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bedc:	ec55 4b10 	vmov	r4, r5, d0
 800bee0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bee2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bee4:	4683      	mov	fp, r0
 800bee6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800beea:	b97f      	cbnz	r7, 800bf0c <_dtoa_r+0x3c>
 800beec:	2010      	movs	r0, #16
 800beee:	f000 fdfd 	bl	800caec <malloc>
 800bef2:	4602      	mov	r2, r0
 800bef4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bef8:	b920      	cbnz	r0, 800bf04 <_dtoa_r+0x34>
 800befa:	4ba7      	ldr	r3, [pc, #668]	@ (800c198 <_dtoa_r+0x2c8>)
 800befc:	21ef      	movs	r1, #239	@ 0xef
 800befe:	48a7      	ldr	r0, [pc, #668]	@ (800c19c <_dtoa_r+0x2cc>)
 800bf00:	f002 fc36 	bl	800e770 <__assert_func>
 800bf04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf08:	6007      	str	r7, [r0, #0]
 800bf0a:	60c7      	str	r7, [r0, #12]
 800bf0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf10:	6819      	ldr	r1, [r3, #0]
 800bf12:	b159      	cbz	r1, 800bf2c <_dtoa_r+0x5c>
 800bf14:	685a      	ldr	r2, [r3, #4]
 800bf16:	604a      	str	r2, [r1, #4]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	4093      	lsls	r3, r2
 800bf1c:	608b      	str	r3, [r1, #8]
 800bf1e:	4658      	mov	r0, fp
 800bf20:	f000 feda 	bl	800ccd8 <_Bfree>
 800bf24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]
 800bf2c:	1e2b      	subs	r3, r5, #0
 800bf2e:	bfb9      	ittee	lt
 800bf30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf34:	9303      	strlt	r3, [sp, #12]
 800bf36:	2300      	movge	r3, #0
 800bf38:	6033      	strge	r3, [r6, #0]
 800bf3a:	9f03      	ldr	r7, [sp, #12]
 800bf3c:	4b98      	ldr	r3, [pc, #608]	@ (800c1a0 <_dtoa_r+0x2d0>)
 800bf3e:	bfbc      	itt	lt
 800bf40:	2201      	movlt	r2, #1
 800bf42:	6032      	strlt	r2, [r6, #0]
 800bf44:	43bb      	bics	r3, r7
 800bf46:	d112      	bne.n	800bf6e <_dtoa_r+0x9e>
 800bf48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf54:	4323      	orrs	r3, r4
 800bf56:	f000 854d 	beq.w	800c9f4 <_dtoa_r+0xb24>
 800bf5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c1b4 <_dtoa_r+0x2e4>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 854f 	beq.w	800ca04 <_dtoa_r+0xb34>
 800bf66:	f10a 0303 	add.w	r3, sl, #3
 800bf6a:	f000 bd49 	b.w	800ca00 <_dtoa_r+0xb30>
 800bf6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	ec51 0b17 	vmov	r0, r1, d7
 800bf78:	2300      	movs	r3, #0
 800bf7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bf7e:	f7f4 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf82:	4680      	mov	r8, r0
 800bf84:	b158      	cbz	r0, 800bf9e <_dtoa_r+0xce>
 800bf86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf88:	2301      	movs	r3, #1
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf8e:	b113      	cbz	r3, 800bf96 <_dtoa_r+0xc6>
 800bf90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf92:	4b84      	ldr	r3, [pc, #528]	@ (800c1a4 <_dtoa_r+0x2d4>)
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c1b8 <_dtoa_r+0x2e8>
 800bf9a:	f000 bd33 	b.w	800ca04 <_dtoa_r+0xb34>
 800bf9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bfa2:	aa16      	add	r2, sp, #88	@ 0x58
 800bfa4:	a917      	add	r1, sp, #92	@ 0x5c
 800bfa6:	4658      	mov	r0, fp
 800bfa8:	f001 fa3a 	bl	800d420 <__d2b>
 800bfac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bfb0:	4681      	mov	r9, r0
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d077      	beq.n	800c0a6 <_dtoa_r+0x1d6>
 800bfb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bfbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bfc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bfcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	4b74      	ldr	r3, [pc, #464]	@ (800c1a8 <_dtoa_r+0x2d8>)
 800bfd6:	f7f4 f95f 	bl	8000298 <__aeabi_dsub>
 800bfda:	a369      	add	r3, pc, #420	@ (adr r3, 800c180 <_dtoa_r+0x2b0>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 fb12 	bl	8000608 <__aeabi_dmul>
 800bfe4:	a368      	add	r3, pc, #416	@ (adr r3, 800c188 <_dtoa_r+0x2b8>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f7f4 f957 	bl	800029c <__adddf3>
 800bfee:	4604      	mov	r4, r0
 800bff0:	4630      	mov	r0, r6
 800bff2:	460d      	mov	r5, r1
 800bff4:	f7f4 fa9e 	bl	8000534 <__aeabi_i2d>
 800bff8:	a365      	add	r3, pc, #404	@ (adr r3, 800c190 <_dtoa_r+0x2c0>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f7f4 fb03 	bl	8000608 <__aeabi_dmul>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 f947 	bl	800029c <__adddf3>
 800c00e:	4604      	mov	r4, r0
 800c010:	460d      	mov	r5, r1
 800c012:	f7f4 fda9 	bl	8000b68 <__aeabi_d2iz>
 800c016:	2200      	movs	r2, #0
 800c018:	4607      	mov	r7, r0
 800c01a:	2300      	movs	r3, #0
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 fd64 	bl	8000aec <__aeabi_dcmplt>
 800c024:	b140      	cbz	r0, 800c038 <_dtoa_r+0x168>
 800c026:	4638      	mov	r0, r7
 800c028:	f7f4 fa84 	bl	8000534 <__aeabi_i2d>
 800c02c:	4622      	mov	r2, r4
 800c02e:	462b      	mov	r3, r5
 800c030:	f7f4 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 800c034:	b900      	cbnz	r0, 800c038 <_dtoa_r+0x168>
 800c036:	3f01      	subs	r7, #1
 800c038:	2f16      	cmp	r7, #22
 800c03a:	d851      	bhi.n	800c0e0 <_dtoa_r+0x210>
 800c03c:	4b5b      	ldr	r3, [pc, #364]	@ (800c1ac <_dtoa_r+0x2dc>)
 800c03e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c04a:	f7f4 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d048      	beq.n	800c0e4 <_dtoa_r+0x214>
 800c052:	3f01      	subs	r7, #1
 800c054:	2300      	movs	r3, #0
 800c056:	9312      	str	r3, [sp, #72]	@ 0x48
 800c058:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c05a:	1b9b      	subs	r3, r3, r6
 800c05c:	1e5a      	subs	r2, r3, #1
 800c05e:	bf44      	itt	mi
 800c060:	f1c3 0801 	rsbmi	r8, r3, #1
 800c064:	2300      	movmi	r3, #0
 800c066:	9208      	str	r2, [sp, #32]
 800c068:	bf54      	ite	pl
 800c06a:	f04f 0800 	movpl.w	r8, #0
 800c06e:	9308      	strmi	r3, [sp, #32]
 800c070:	2f00      	cmp	r7, #0
 800c072:	db39      	blt.n	800c0e8 <_dtoa_r+0x218>
 800c074:	9b08      	ldr	r3, [sp, #32]
 800c076:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c078:	443b      	add	r3, r7
 800c07a:	9308      	str	r3, [sp, #32]
 800c07c:	2300      	movs	r3, #0
 800c07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c082:	2b09      	cmp	r3, #9
 800c084:	d864      	bhi.n	800c150 <_dtoa_r+0x280>
 800c086:	2b05      	cmp	r3, #5
 800c088:	bfc4      	itt	gt
 800c08a:	3b04      	subgt	r3, #4
 800c08c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c090:	f1a3 0302 	sub.w	r3, r3, #2
 800c094:	bfcc      	ite	gt
 800c096:	2400      	movgt	r4, #0
 800c098:	2401      	movle	r4, #1
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d863      	bhi.n	800c166 <_dtoa_r+0x296>
 800c09e:	e8df f003 	tbb	[pc, r3]
 800c0a2:	372a      	.short	0x372a
 800c0a4:	5535      	.short	0x5535
 800c0a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c0aa:	441e      	add	r6, r3
 800c0ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c0b0:	2b20      	cmp	r3, #32
 800c0b2:	bfc1      	itttt	gt
 800c0b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c0b8:	409f      	lslgt	r7, r3
 800c0ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c0be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c0c2:	bfd6      	itet	le
 800c0c4:	f1c3 0320 	rsble	r3, r3, #32
 800c0c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c0cc:	fa04 f003 	lslle.w	r0, r4, r3
 800c0d0:	f7f4 fa20 	bl	8000514 <__aeabi_ui2d>
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0da:	3e01      	subs	r6, #1
 800c0dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c0de:	e777      	b.n	800bfd0 <_dtoa_r+0x100>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e7b8      	b.n	800c056 <_dtoa_r+0x186>
 800c0e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c0e6:	e7b7      	b.n	800c058 <_dtoa_r+0x188>
 800c0e8:	427b      	negs	r3, r7
 800c0ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	eba8 0807 	sub.w	r8, r8, r7
 800c0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0f4:	e7c4      	b.n	800c080 <_dtoa_r+0x1b0>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	dc35      	bgt.n	800c16c <_dtoa_r+0x29c>
 800c100:	2301      	movs	r3, #1
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	9307      	str	r3, [sp, #28]
 800c106:	461a      	mov	r2, r3
 800c108:	920e      	str	r2, [sp, #56]	@ 0x38
 800c10a:	e00b      	b.n	800c124 <_dtoa_r+0x254>
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f3      	b.n	800c0f8 <_dtoa_r+0x228>
 800c110:	2300      	movs	r3, #0
 800c112:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c116:	18fb      	adds	r3, r7, r3
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	3301      	adds	r3, #1
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	9307      	str	r3, [sp, #28]
 800c120:	bfb8      	it	lt
 800c122:	2301      	movlt	r3, #1
 800c124:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c128:	2100      	movs	r1, #0
 800c12a:	2204      	movs	r2, #4
 800c12c:	f102 0514 	add.w	r5, r2, #20
 800c130:	429d      	cmp	r5, r3
 800c132:	d91f      	bls.n	800c174 <_dtoa_r+0x2a4>
 800c134:	6041      	str	r1, [r0, #4]
 800c136:	4658      	mov	r0, fp
 800c138:	f000 fd8e 	bl	800cc58 <_Balloc>
 800c13c:	4682      	mov	sl, r0
 800c13e:	2800      	cmp	r0, #0
 800c140:	d13c      	bne.n	800c1bc <_dtoa_r+0x2ec>
 800c142:	4b1b      	ldr	r3, [pc, #108]	@ (800c1b0 <_dtoa_r+0x2e0>)
 800c144:	4602      	mov	r2, r0
 800c146:	f240 11af 	movw	r1, #431	@ 0x1af
 800c14a:	e6d8      	b.n	800befe <_dtoa_r+0x2e>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e7e0      	b.n	800c112 <_dtoa_r+0x242>
 800c150:	2401      	movs	r4, #1
 800c152:	2300      	movs	r3, #0
 800c154:	9309      	str	r3, [sp, #36]	@ 0x24
 800c156:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c158:	f04f 33ff 	mov.w	r3, #4294967295
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	9307      	str	r3, [sp, #28]
 800c160:	2200      	movs	r2, #0
 800c162:	2312      	movs	r3, #18
 800c164:	e7d0      	b.n	800c108 <_dtoa_r+0x238>
 800c166:	2301      	movs	r3, #1
 800c168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c16a:	e7f5      	b.n	800c158 <_dtoa_r+0x288>
 800c16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	9307      	str	r3, [sp, #28]
 800c172:	e7d7      	b.n	800c124 <_dtoa_r+0x254>
 800c174:	3101      	adds	r1, #1
 800c176:	0052      	lsls	r2, r2, #1
 800c178:	e7d8      	b.n	800c12c <_dtoa_r+0x25c>
 800c17a:	bf00      	nop
 800c17c:	f3af 8000 	nop.w
 800c180:	636f4361 	.word	0x636f4361
 800c184:	3fd287a7 	.word	0x3fd287a7
 800c188:	8b60c8b3 	.word	0x8b60c8b3
 800c18c:	3fc68a28 	.word	0x3fc68a28
 800c190:	509f79fb 	.word	0x509f79fb
 800c194:	3fd34413 	.word	0x3fd34413
 800c198:	08010446 	.word	0x08010446
 800c19c:	0801045d 	.word	0x0801045d
 800c1a0:	7ff00000 	.word	0x7ff00000
 800c1a4:	08010411 	.word	0x08010411
 800c1a8:	3ff80000 	.word	0x3ff80000
 800c1ac:	08010558 	.word	0x08010558
 800c1b0:	080104b5 	.word	0x080104b5
 800c1b4:	08010442 	.word	0x08010442
 800c1b8:	08010410 	.word	0x08010410
 800c1bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c1c0:	6018      	str	r0, [r3, #0]
 800c1c2:	9b07      	ldr	r3, [sp, #28]
 800c1c4:	2b0e      	cmp	r3, #14
 800c1c6:	f200 80a4 	bhi.w	800c312 <_dtoa_r+0x442>
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	f000 80a1 	beq.w	800c312 <_dtoa_r+0x442>
 800c1d0:	2f00      	cmp	r7, #0
 800c1d2:	dd33      	ble.n	800c23c <_dtoa_r+0x36c>
 800c1d4:	4bad      	ldr	r3, [pc, #692]	@ (800c48c <_dtoa_r+0x5bc>)
 800c1d6:	f007 020f 	and.w	r2, r7, #15
 800c1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1de:	ed93 7b00 	vldr	d7, [r3]
 800c1e2:	05f8      	lsls	r0, r7, #23
 800c1e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c1e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1ec:	d516      	bpl.n	800c21c <_dtoa_r+0x34c>
 800c1ee:	4ba8      	ldr	r3, [pc, #672]	@ (800c490 <_dtoa_r+0x5c0>)
 800c1f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1f8:	f7f4 fb30 	bl	800085c <__aeabi_ddiv>
 800c1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c200:	f004 040f 	and.w	r4, r4, #15
 800c204:	2603      	movs	r6, #3
 800c206:	4da2      	ldr	r5, [pc, #648]	@ (800c490 <_dtoa_r+0x5c0>)
 800c208:	b954      	cbnz	r4, 800c220 <_dtoa_r+0x350>
 800c20a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c212:	f7f4 fb23 	bl	800085c <__aeabi_ddiv>
 800c216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c21a:	e028      	b.n	800c26e <_dtoa_r+0x39e>
 800c21c:	2602      	movs	r6, #2
 800c21e:	e7f2      	b.n	800c206 <_dtoa_r+0x336>
 800c220:	07e1      	lsls	r1, r4, #31
 800c222:	d508      	bpl.n	800c236 <_dtoa_r+0x366>
 800c224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c22c:	f7f4 f9ec 	bl	8000608 <__aeabi_dmul>
 800c230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c234:	3601      	adds	r6, #1
 800c236:	1064      	asrs	r4, r4, #1
 800c238:	3508      	adds	r5, #8
 800c23a:	e7e5      	b.n	800c208 <_dtoa_r+0x338>
 800c23c:	f000 80d2 	beq.w	800c3e4 <_dtoa_r+0x514>
 800c240:	427c      	negs	r4, r7
 800c242:	4b92      	ldr	r3, [pc, #584]	@ (800c48c <_dtoa_r+0x5bc>)
 800c244:	4d92      	ldr	r5, [pc, #584]	@ (800c490 <_dtoa_r+0x5c0>)
 800c246:	f004 020f 	and.w	r2, r4, #15
 800c24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c256:	f7f4 f9d7 	bl	8000608 <__aeabi_dmul>
 800c25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25e:	1124      	asrs	r4, r4, #4
 800c260:	2300      	movs	r3, #0
 800c262:	2602      	movs	r6, #2
 800c264:	2c00      	cmp	r4, #0
 800c266:	f040 80b2 	bne.w	800c3ce <_dtoa_r+0x4fe>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1d3      	bne.n	800c216 <_dtoa_r+0x346>
 800c26e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c270:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 80b7 	beq.w	800c3e8 <_dtoa_r+0x518>
 800c27a:	4b86      	ldr	r3, [pc, #536]	@ (800c494 <_dtoa_r+0x5c4>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	4620      	mov	r0, r4
 800c280:	4629      	mov	r1, r5
 800c282:	f7f4 fc33 	bl	8000aec <__aeabi_dcmplt>
 800c286:	2800      	cmp	r0, #0
 800c288:	f000 80ae 	beq.w	800c3e8 <_dtoa_r+0x518>
 800c28c:	9b07      	ldr	r3, [sp, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 80aa 	beq.w	800c3e8 <_dtoa_r+0x518>
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	dd37      	ble.n	800c30a <_dtoa_r+0x43a>
 800c29a:	1e7b      	subs	r3, r7, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	4620      	mov	r0, r4
 800c2a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c498 <_dtoa_r+0x5c8>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 f9af 	bl	8000608 <__aeabi_dmul>
 800c2aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ae:	9c00      	ldr	r4, [sp, #0]
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7f4 f93e 	bl	8000534 <__aeabi_i2d>
 800c2b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2bc:	f7f4 f9a4 	bl	8000608 <__aeabi_dmul>
 800c2c0:	4b76      	ldr	r3, [pc, #472]	@ (800c49c <_dtoa_r+0x5cc>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f7f3 ffea 	bl	800029c <__adddf3>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	f040 808d 	bne.w	800c3ee <_dtoa_r+0x51e>
 800c2d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d8:	4b71      	ldr	r3, [pc, #452]	@ (800c4a0 <_dtoa_r+0x5d0>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f7f3 ffdc 	bl	8000298 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2e8:	462a      	mov	r2, r5
 800c2ea:	4633      	mov	r3, r6
 800c2ec:	f7f4 fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	f040 828b 	bne.w	800c80c <_dtoa_r+0x93c>
 800c2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2fa:	462a      	mov	r2, r5
 800c2fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c300:	f7f4 fbf4 	bl	8000aec <__aeabi_dcmplt>
 800c304:	2800      	cmp	r0, #0
 800c306:	f040 8128 	bne.w	800c55a <_dtoa_r+0x68a>
 800c30a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c30e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c314:	2b00      	cmp	r3, #0
 800c316:	f2c0 815a 	blt.w	800c5ce <_dtoa_r+0x6fe>
 800c31a:	2f0e      	cmp	r7, #14
 800c31c:	f300 8157 	bgt.w	800c5ce <_dtoa_r+0x6fe>
 800c320:	4b5a      	ldr	r3, [pc, #360]	@ (800c48c <_dtoa_r+0x5bc>)
 800c322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c326:	ed93 7b00 	vldr	d7, [r3]
 800c32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	ed8d 7b00 	vstr	d7, [sp]
 800c332:	da03      	bge.n	800c33c <_dtoa_r+0x46c>
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f340 8101 	ble.w	800c53e <_dtoa_r+0x66e>
 800c33c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c340:	4656      	mov	r6, sl
 800c342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c346:	4620      	mov	r0, r4
 800c348:	4629      	mov	r1, r5
 800c34a:	f7f4 fa87 	bl	800085c <__aeabi_ddiv>
 800c34e:	f7f4 fc0b 	bl	8000b68 <__aeabi_d2iz>
 800c352:	4680      	mov	r8, r0
 800c354:	f7f4 f8ee 	bl	8000534 <__aeabi_i2d>
 800c358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c35c:	f7f4 f954 	bl	8000608 <__aeabi_dmul>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4620      	mov	r0, r4
 800c366:	4629      	mov	r1, r5
 800c368:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c36c:	f7f3 ff94 	bl	8000298 <__aeabi_dsub>
 800c370:	f806 4b01 	strb.w	r4, [r6], #1
 800c374:	9d07      	ldr	r5, [sp, #28]
 800c376:	eba6 040a 	sub.w	r4, r6, sl
 800c37a:	42a5      	cmp	r5, r4
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	f040 8117 	bne.w	800c5b2 <_dtoa_r+0x6e2>
 800c384:	f7f3 ff8a 	bl	800029c <__adddf3>
 800c388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	f7f4 fbca 	bl	8000b28 <__aeabi_dcmpgt>
 800c394:	2800      	cmp	r0, #0
 800c396:	f040 80f9 	bne.w	800c58c <_dtoa_r+0x6bc>
 800c39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	f7f4 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3a6:	b118      	cbz	r0, 800c3b0 <_dtoa_r+0x4e0>
 800c3a8:	f018 0f01 	tst.w	r8, #1
 800c3ac:	f040 80ee 	bne.w	800c58c <_dtoa_r+0x6bc>
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	4658      	mov	r0, fp
 800c3b4:	f000 fc90 	bl	800ccd8 <_Bfree>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	7033      	strb	r3, [r6, #0]
 800c3bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3be:	3701      	adds	r7, #1
 800c3c0:	601f      	str	r7, [r3, #0]
 800c3c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 831d 	beq.w	800ca04 <_dtoa_r+0xb34>
 800c3ca:	601e      	str	r6, [r3, #0]
 800c3cc:	e31a      	b.n	800ca04 <_dtoa_r+0xb34>
 800c3ce:	07e2      	lsls	r2, r4, #31
 800c3d0:	d505      	bpl.n	800c3de <_dtoa_r+0x50e>
 800c3d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3d6:	f7f4 f917 	bl	8000608 <__aeabi_dmul>
 800c3da:	3601      	adds	r6, #1
 800c3dc:	2301      	movs	r3, #1
 800c3de:	1064      	asrs	r4, r4, #1
 800c3e0:	3508      	adds	r5, #8
 800c3e2:	e73f      	b.n	800c264 <_dtoa_r+0x394>
 800c3e4:	2602      	movs	r6, #2
 800c3e6:	e742      	b.n	800c26e <_dtoa_r+0x39e>
 800c3e8:	9c07      	ldr	r4, [sp, #28]
 800c3ea:	9704      	str	r7, [sp, #16]
 800c3ec:	e761      	b.n	800c2b2 <_dtoa_r+0x3e2>
 800c3ee:	4b27      	ldr	r3, [pc, #156]	@ (800c48c <_dtoa_r+0x5bc>)
 800c3f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3fa:	4454      	add	r4, sl
 800c3fc:	2900      	cmp	r1, #0
 800c3fe:	d053      	beq.n	800c4a8 <_dtoa_r+0x5d8>
 800c400:	4928      	ldr	r1, [pc, #160]	@ (800c4a4 <_dtoa_r+0x5d4>)
 800c402:	2000      	movs	r0, #0
 800c404:	f7f4 fa2a 	bl	800085c <__aeabi_ddiv>
 800c408:	4633      	mov	r3, r6
 800c40a:	462a      	mov	r2, r5
 800c40c:	f7f3 ff44 	bl	8000298 <__aeabi_dsub>
 800c410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c414:	4656      	mov	r6, sl
 800c416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c41a:	f7f4 fba5 	bl	8000b68 <__aeabi_d2iz>
 800c41e:	4605      	mov	r5, r0
 800c420:	f7f4 f888 	bl	8000534 <__aeabi_i2d>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42c:	f7f3 ff34 	bl	8000298 <__aeabi_dsub>
 800c430:	3530      	adds	r5, #48	@ 0x30
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c43a:	f806 5b01 	strb.w	r5, [r6], #1
 800c43e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c442:	f7f4 fb53 	bl	8000aec <__aeabi_dcmplt>
 800c446:	2800      	cmp	r0, #0
 800c448:	d171      	bne.n	800c52e <_dtoa_r+0x65e>
 800c44a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c44e:	4911      	ldr	r1, [pc, #68]	@ (800c494 <_dtoa_r+0x5c4>)
 800c450:	2000      	movs	r0, #0
 800c452:	f7f3 ff21 	bl	8000298 <__aeabi_dsub>
 800c456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c45a:	f7f4 fb47 	bl	8000aec <__aeabi_dcmplt>
 800c45e:	2800      	cmp	r0, #0
 800c460:	f040 8095 	bne.w	800c58e <_dtoa_r+0x6be>
 800c464:	42a6      	cmp	r6, r4
 800c466:	f43f af50 	beq.w	800c30a <_dtoa_r+0x43a>
 800c46a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c46e:	4b0a      	ldr	r3, [pc, #40]	@ (800c498 <_dtoa_r+0x5c8>)
 800c470:	2200      	movs	r2, #0
 800c472:	f7f4 f8c9 	bl	8000608 <__aeabi_dmul>
 800c476:	4b08      	ldr	r3, [pc, #32]	@ (800c498 <_dtoa_r+0x5c8>)
 800c478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c47c:	2200      	movs	r2, #0
 800c47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c482:	f7f4 f8c1 	bl	8000608 <__aeabi_dmul>
 800c486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48a:	e7c4      	b.n	800c416 <_dtoa_r+0x546>
 800c48c:	08010558 	.word	0x08010558
 800c490:	08010530 	.word	0x08010530
 800c494:	3ff00000 	.word	0x3ff00000
 800c498:	40240000 	.word	0x40240000
 800c49c:	401c0000 	.word	0x401c0000
 800c4a0:	40140000 	.word	0x40140000
 800c4a4:	3fe00000 	.word	0x3fe00000
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f7f4 f8ac 	bl	8000608 <__aeabi_dmul>
 800c4b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c4b6:	4656      	mov	r6, sl
 800c4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4bc:	f7f4 fb54 	bl	8000b68 <__aeabi_d2iz>
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	f7f4 f837 	bl	8000534 <__aeabi_i2d>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ce:	f7f3 fee3 	bl	8000298 <__aeabi_dsub>
 800c4d2:	3530      	adds	r5, #48	@ 0x30
 800c4d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	42a6      	cmp	r6, r4
 800c4de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4e2:	f04f 0200 	mov.w	r2, #0
 800c4e6:	d124      	bne.n	800c532 <_dtoa_r+0x662>
 800c4e8:	4bac      	ldr	r3, [pc, #688]	@ (800c79c <_dtoa_r+0x8cc>)
 800c4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c4ee:	f7f3 fed5 	bl	800029c <__adddf3>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4fa:	f7f4 fb15 	bl	8000b28 <__aeabi_dcmpgt>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d145      	bne.n	800c58e <_dtoa_r+0x6be>
 800c502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c506:	49a5      	ldr	r1, [pc, #660]	@ (800c79c <_dtoa_r+0x8cc>)
 800c508:	2000      	movs	r0, #0
 800c50a:	f7f3 fec5 	bl	8000298 <__aeabi_dsub>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c516:	f7f4 fae9 	bl	8000aec <__aeabi_dcmplt>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	f43f aef5 	beq.w	800c30a <_dtoa_r+0x43a>
 800c520:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c522:	1e73      	subs	r3, r6, #1
 800c524:	9315      	str	r3, [sp, #84]	@ 0x54
 800c526:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c52a:	2b30      	cmp	r3, #48	@ 0x30
 800c52c:	d0f8      	beq.n	800c520 <_dtoa_r+0x650>
 800c52e:	9f04      	ldr	r7, [sp, #16]
 800c530:	e73e      	b.n	800c3b0 <_dtoa_r+0x4e0>
 800c532:	4b9b      	ldr	r3, [pc, #620]	@ (800c7a0 <_dtoa_r+0x8d0>)
 800c534:	f7f4 f868 	bl	8000608 <__aeabi_dmul>
 800c538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c53c:	e7bc      	b.n	800c4b8 <_dtoa_r+0x5e8>
 800c53e:	d10c      	bne.n	800c55a <_dtoa_r+0x68a>
 800c540:	4b98      	ldr	r3, [pc, #608]	@ (800c7a4 <_dtoa_r+0x8d4>)
 800c542:	2200      	movs	r2, #0
 800c544:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c548:	f7f4 f85e 	bl	8000608 <__aeabi_dmul>
 800c54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c550:	f7f4 fae0 	bl	8000b14 <__aeabi_dcmpge>
 800c554:	2800      	cmp	r0, #0
 800c556:	f000 8157 	beq.w	800c808 <_dtoa_r+0x938>
 800c55a:	2400      	movs	r4, #0
 800c55c:	4625      	mov	r5, r4
 800c55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c560:	43db      	mvns	r3, r3
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	4656      	mov	r6, sl
 800c566:	2700      	movs	r7, #0
 800c568:	4621      	mov	r1, r4
 800c56a:	4658      	mov	r0, fp
 800c56c:	f000 fbb4 	bl	800ccd8 <_Bfree>
 800c570:	2d00      	cmp	r5, #0
 800c572:	d0dc      	beq.n	800c52e <_dtoa_r+0x65e>
 800c574:	b12f      	cbz	r7, 800c582 <_dtoa_r+0x6b2>
 800c576:	42af      	cmp	r7, r5
 800c578:	d003      	beq.n	800c582 <_dtoa_r+0x6b2>
 800c57a:	4639      	mov	r1, r7
 800c57c:	4658      	mov	r0, fp
 800c57e:	f000 fbab 	bl	800ccd8 <_Bfree>
 800c582:	4629      	mov	r1, r5
 800c584:	4658      	mov	r0, fp
 800c586:	f000 fba7 	bl	800ccd8 <_Bfree>
 800c58a:	e7d0      	b.n	800c52e <_dtoa_r+0x65e>
 800c58c:	9704      	str	r7, [sp, #16]
 800c58e:	4633      	mov	r3, r6
 800c590:	461e      	mov	r6, r3
 800c592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c596:	2a39      	cmp	r2, #57	@ 0x39
 800c598:	d107      	bne.n	800c5aa <_dtoa_r+0x6da>
 800c59a:	459a      	cmp	sl, r3
 800c59c:	d1f8      	bne.n	800c590 <_dtoa_r+0x6c0>
 800c59e:	9a04      	ldr	r2, [sp, #16]
 800c5a0:	3201      	adds	r2, #1
 800c5a2:	9204      	str	r2, [sp, #16]
 800c5a4:	2230      	movs	r2, #48	@ 0x30
 800c5a6:	f88a 2000 	strb.w	r2, [sl]
 800c5aa:	781a      	ldrb	r2, [r3, #0]
 800c5ac:	3201      	adds	r2, #1
 800c5ae:	701a      	strb	r2, [r3, #0]
 800c5b0:	e7bd      	b.n	800c52e <_dtoa_r+0x65e>
 800c5b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c7a0 <_dtoa_r+0x8d0>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f7f4 f827 	bl	8000608 <__aeabi_dmul>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	460d      	mov	r5, r1
 800c5c2:	f7f4 fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f43f aebb 	beq.w	800c342 <_dtoa_r+0x472>
 800c5cc:	e6f0      	b.n	800c3b0 <_dtoa_r+0x4e0>
 800c5ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	f000 80db 	beq.w	800c78c <_dtoa_r+0x8bc>
 800c5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5d8:	2a01      	cmp	r2, #1
 800c5da:	f300 80bf 	bgt.w	800c75c <_dtoa_r+0x88c>
 800c5de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	f000 80b7 	beq.w	800c754 <_dtoa_r+0x884>
 800c5e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5ec:	4646      	mov	r6, r8
 800c5ee:	9a08      	ldr	r2, [sp, #32]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	441a      	add	r2, r3
 800c5f4:	4658      	mov	r0, fp
 800c5f6:	4498      	add	r8, r3
 800c5f8:	9208      	str	r2, [sp, #32]
 800c5fa:	f000 fc6b 	bl	800ced4 <__i2b>
 800c5fe:	4605      	mov	r5, r0
 800c600:	b15e      	cbz	r6, 800c61a <_dtoa_r+0x74a>
 800c602:	9b08      	ldr	r3, [sp, #32]
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd08      	ble.n	800c61a <_dtoa_r+0x74a>
 800c608:	42b3      	cmp	r3, r6
 800c60a:	9a08      	ldr	r2, [sp, #32]
 800c60c:	bfa8      	it	ge
 800c60e:	4633      	movge	r3, r6
 800c610:	eba8 0803 	sub.w	r8, r8, r3
 800c614:	1af6      	subs	r6, r6, r3
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	9308      	str	r3, [sp, #32]
 800c61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c61c:	b1f3      	cbz	r3, 800c65c <_dtoa_r+0x78c>
 800c61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80b7 	beq.w	800c794 <_dtoa_r+0x8c4>
 800c626:	b18c      	cbz	r4, 800c64c <_dtoa_r+0x77c>
 800c628:	4629      	mov	r1, r5
 800c62a:	4622      	mov	r2, r4
 800c62c:	4658      	mov	r0, fp
 800c62e:	f000 fd11 	bl	800d054 <__pow5mult>
 800c632:	464a      	mov	r2, r9
 800c634:	4601      	mov	r1, r0
 800c636:	4605      	mov	r5, r0
 800c638:	4658      	mov	r0, fp
 800c63a:	f000 fc61 	bl	800cf00 <__multiply>
 800c63e:	4649      	mov	r1, r9
 800c640:	9004      	str	r0, [sp, #16]
 800c642:	4658      	mov	r0, fp
 800c644:	f000 fb48 	bl	800ccd8 <_Bfree>
 800c648:	9b04      	ldr	r3, [sp, #16]
 800c64a:	4699      	mov	r9, r3
 800c64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c64e:	1b1a      	subs	r2, r3, r4
 800c650:	d004      	beq.n	800c65c <_dtoa_r+0x78c>
 800c652:	4649      	mov	r1, r9
 800c654:	4658      	mov	r0, fp
 800c656:	f000 fcfd 	bl	800d054 <__pow5mult>
 800c65a:	4681      	mov	r9, r0
 800c65c:	2101      	movs	r1, #1
 800c65e:	4658      	mov	r0, fp
 800c660:	f000 fc38 	bl	800ced4 <__i2b>
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	4604      	mov	r4, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 81cf 	beq.w	800ca0c <_dtoa_r+0xb3c>
 800c66e:	461a      	mov	r2, r3
 800c670:	4601      	mov	r1, r0
 800c672:	4658      	mov	r0, fp
 800c674:	f000 fcee 	bl	800d054 <__pow5mult>
 800c678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	4604      	mov	r4, r0
 800c67e:	f300 8095 	bgt.w	800c7ac <_dtoa_r+0x8dc>
 800c682:	9b02      	ldr	r3, [sp, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	f040 8087 	bne.w	800c798 <_dtoa_r+0x8c8>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c690:	2b00      	cmp	r3, #0
 800c692:	f040 8089 	bne.w	800c7a8 <_dtoa_r+0x8d8>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c69c:	0d1b      	lsrs	r3, r3, #20
 800c69e:	051b      	lsls	r3, r3, #20
 800c6a0:	b12b      	cbz	r3, 800c6ae <_dtoa_r+0x7de>
 800c6a2:	9b08      	ldr	r3, [sp, #32]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9308      	str	r3, [sp, #32]
 800c6a8:	f108 0801 	add.w	r8, r8, #1
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 81b0 	beq.w	800ca18 <_dtoa_r+0xb48>
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6be:	6918      	ldr	r0, [r3, #16]
 800c6c0:	f000 fbbc 	bl	800ce3c <__hi0bits>
 800c6c4:	f1c0 0020 	rsb	r0, r0, #32
 800c6c8:	9b08      	ldr	r3, [sp, #32]
 800c6ca:	4418      	add	r0, r3
 800c6cc:	f010 001f 	ands.w	r0, r0, #31
 800c6d0:	d077      	beq.n	800c7c2 <_dtoa_r+0x8f2>
 800c6d2:	f1c0 0320 	rsb	r3, r0, #32
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	dd6b      	ble.n	800c7b2 <_dtoa_r+0x8e2>
 800c6da:	9b08      	ldr	r3, [sp, #32]
 800c6dc:	f1c0 001c 	rsb	r0, r0, #28
 800c6e0:	4403      	add	r3, r0
 800c6e2:	4480      	add	r8, r0
 800c6e4:	4406      	add	r6, r0
 800c6e6:	9308      	str	r3, [sp, #32]
 800c6e8:	f1b8 0f00 	cmp.w	r8, #0
 800c6ec:	dd05      	ble.n	800c6fa <_dtoa_r+0x82a>
 800c6ee:	4649      	mov	r1, r9
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4658      	mov	r0, fp
 800c6f4:	f000 fd08 	bl	800d108 <__lshift>
 800c6f8:	4681      	mov	r9, r0
 800c6fa:	9b08      	ldr	r3, [sp, #32]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dd05      	ble.n	800c70c <_dtoa_r+0x83c>
 800c700:	4621      	mov	r1, r4
 800c702:	461a      	mov	r2, r3
 800c704:	4658      	mov	r0, fp
 800c706:	f000 fcff 	bl	800d108 <__lshift>
 800c70a:	4604      	mov	r4, r0
 800c70c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d059      	beq.n	800c7c6 <_dtoa_r+0x8f6>
 800c712:	4621      	mov	r1, r4
 800c714:	4648      	mov	r0, r9
 800c716:	f000 fd63 	bl	800d1e0 <__mcmp>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	da53      	bge.n	800c7c6 <_dtoa_r+0x8f6>
 800c71e:	1e7b      	subs	r3, r7, #1
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	4649      	mov	r1, r9
 800c724:	2300      	movs	r3, #0
 800c726:	220a      	movs	r2, #10
 800c728:	4658      	mov	r0, fp
 800c72a:	f000 faf7 	bl	800cd1c <__multadd>
 800c72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c730:	4681      	mov	r9, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 8172 	beq.w	800ca1c <_dtoa_r+0xb4c>
 800c738:	2300      	movs	r3, #0
 800c73a:	4629      	mov	r1, r5
 800c73c:	220a      	movs	r2, #10
 800c73e:	4658      	mov	r0, fp
 800c740:	f000 faec 	bl	800cd1c <__multadd>
 800c744:	9b00      	ldr	r3, [sp, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	4605      	mov	r5, r0
 800c74a:	dc67      	bgt.n	800c81c <_dtoa_r+0x94c>
 800c74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74e:	2b02      	cmp	r3, #2
 800c750:	dc41      	bgt.n	800c7d6 <_dtoa_r+0x906>
 800c752:	e063      	b.n	800c81c <_dtoa_r+0x94c>
 800c754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c756:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c75a:	e746      	b.n	800c5ea <_dtoa_r+0x71a>
 800c75c:	9b07      	ldr	r3, [sp, #28]
 800c75e:	1e5c      	subs	r4, r3, #1
 800c760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c762:	42a3      	cmp	r3, r4
 800c764:	bfbf      	itttt	lt
 800c766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c768:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c76a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c76c:	1ae3      	sublt	r3, r4, r3
 800c76e:	bfb4      	ite	lt
 800c770:	18d2      	addlt	r2, r2, r3
 800c772:	1b1c      	subge	r4, r3, r4
 800c774:	9b07      	ldr	r3, [sp, #28]
 800c776:	bfbc      	itt	lt
 800c778:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c77a:	2400      	movlt	r4, #0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bfb5      	itete	lt
 800c780:	eba8 0603 	sublt.w	r6, r8, r3
 800c784:	9b07      	ldrge	r3, [sp, #28]
 800c786:	2300      	movlt	r3, #0
 800c788:	4646      	movge	r6, r8
 800c78a:	e730      	b.n	800c5ee <_dtoa_r+0x71e>
 800c78c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c78e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c790:	4646      	mov	r6, r8
 800c792:	e735      	b.n	800c600 <_dtoa_r+0x730>
 800c794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c796:	e75c      	b.n	800c652 <_dtoa_r+0x782>
 800c798:	2300      	movs	r3, #0
 800c79a:	e788      	b.n	800c6ae <_dtoa_r+0x7de>
 800c79c:	3fe00000 	.word	0x3fe00000
 800c7a0:	40240000 	.word	0x40240000
 800c7a4:	40140000 	.word	0x40140000
 800c7a8:	9b02      	ldr	r3, [sp, #8]
 800c7aa:	e780      	b.n	800c6ae <_dtoa_r+0x7de>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7b0:	e782      	b.n	800c6b8 <_dtoa_r+0x7e8>
 800c7b2:	d099      	beq.n	800c6e8 <_dtoa_r+0x818>
 800c7b4:	9a08      	ldr	r2, [sp, #32]
 800c7b6:	331c      	adds	r3, #28
 800c7b8:	441a      	add	r2, r3
 800c7ba:	4498      	add	r8, r3
 800c7bc:	441e      	add	r6, r3
 800c7be:	9208      	str	r2, [sp, #32]
 800c7c0:	e792      	b.n	800c6e8 <_dtoa_r+0x818>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	e7f6      	b.n	800c7b4 <_dtoa_r+0x8e4>
 800c7c6:	9b07      	ldr	r3, [sp, #28]
 800c7c8:	9704      	str	r7, [sp, #16]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dc20      	bgt.n	800c810 <_dtoa_r+0x940>
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	dd1e      	ble.n	800c814 <_dtoa_r+0x944>
 800c7d6:	9b00      	ldr	r3, [sp, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f47f aec0 	bne.w	800c55e <_dtoa_r+0x68e>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	2205      	movs	r2, #5
 800c7e2:	4658      	mov	r0, fp
 800c7e4:	f000 fa9a 	bl	800cd1c <__multadd>
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f000 fcf7 	bl	800d1e0 <__mcmp>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f77f aeb3 	ble.w	800c55e <_dtoa_r+0x68e>
 800c7f8:	4656      	mov	r6, sl
 800c7fa:	2331      	movs	r3, #49	@ 0x31
 800c7fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c800:	9b04      	ldr	r3, [sp, #16]
 800c802:	3301      	adds	r3, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	e6ae      	b.n	800c566 <_dtoa_r+0x696>
 800c808:	9c07      	ldr	r4, [sp, #28]
 800c80a:	9704      	str	r7, [sp, #16]
 800c80c:	4625      	mov	r5, r4
 800c80e:	e7f3      	b.n	800c7f8 <_dtoa_r+0x928>
 800c810:	9b07      	ldr	r3, [sp, #28]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 8104 	beq.w	800ca24 <_dtoa_r+0xb54>
 800c81c:	2e00      	cmp	r6, #0
 800c81e:	dd05      	ble.n	800c82c <_dtoa_r+0x95c>
 800c820:	4629      	mov	r1, r5
 800c822:	4632      	mov	r2, r6
 800c824:	4658      	mov	r0, fp
 800c826:	f000 fc6f 	bl	800d108 <__lshift>
 800c82a:	4605      	mov	r5, r0
 800c82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d05a      	beq.n	800c8e8 <_dtoa_r+0xa18>
 800c832:	6869      	ldr	r1, [r5, #4]
 800c834:	4658      	mov	r0, fp
 800c836:	f000 fa0f 	bl	800cc58 <_Balloc>
 800c83a:	4606      	mov	r6, r0
 800c83c:	b928      	cbnz	r0, 800c84a <_dtoa_r+0x97a>
 800c83e:	4b84      	ldr	r3, [pc, #528]	@ (800ca50 <_dtoa_r+0xb80>)
 800c840:	4602      	mov	r2, r0
 800c842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c846:	f7ff bb5a 	b.w	800befe <_dtoa_r+0x2e>
 800c84a:	692a      	ldr	r2, [r5, #16]
 800c84c:	3202      	adds	r2, #2
 800c84e:	0092      	lsls	r2, r2, #2
 800c850:	f105 010c 	add.w	r1, r5, #12
 800c854:	300c      	adds	r0, #12
 800c856:	f001 ff75 	bl	800e744 <memcpy>
 800c85a:	2201      	movs	r2, #1
 800c85c:	4631      	mov	r1, r6
 800c85e:	4658      	mov	r0, fp
 800c860:	f000 fc52 	bl	800d108 <__lshift>
 800c864:	f10a 0301 	add.w	r3, sl, #1
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	9b00      	ldr	r3, [sp, #0]
 800c86c:	4453      	add	r3, sl
 800c86e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	462f      	mov	r7, r5
 800c878:	930a      	str	r3, [sp, #40]	@ 0x28
 800c87a:	4605      	mov	r5, r0
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	4621      	mov	r1, r4
 800c880:	3b01      	subs	r3, #1
 800c882:	4648      	mov	r0, r9
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	f7ff fa9b 	bl	800bdc0 <quorem>
 800c88a:	4639      	mov	r1, r7
 800c88c:	9002      	str	r0, [sp, #8]
 800c88e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c892:	4648      	mov	r0, r9
 800c894:	f000 fca4 	bl	800d1e0 <__mcmp>
 800c898:	462a      	mov	r2, r5
 800c89a:	9008      	str	r0, [sp, #32]
 800c89c:	4621      	mov	r1, r4
 800c89e:	4658      	mov	r0, fp
 800c8a0:	f000 fcba 	bl	800d218 <__mdiff>
 800c8a4:	68c2      	ldr	r2, [r0, #12]
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	bb02      	cbnz	r2, 800c8ec <_dtoa_r+0xa1c>
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	4648      	mov	r0, r9
 800c8ae:	f000 fc97 	bl	800d1e0 <__mcmp>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4658      	mov	r0, fp
 800c8b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8ba:	f000 fa0d 	bl	800ccd8 <_Bfree>
 800c8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8c2:	9e07      	ldr	r6, [sp, #28]
 800c8c4:	ea43 0102 	orr.w	r1, r3, r2
 800c8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ca:	4319      	orrs	r1, r3
 800c8cc:	d110      	bne.n	800c8f0 <_dtoa_r+0xa20>
 800c8ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8d2:	d029      	beq.n	800c928 <_dtoa_r+0xa58>
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dd02      	ble.n	800c8e0 <_dtoa_r+0xa10>
 800c8da:	9b02      	ldr	r3, [sp, #8]
 800c8dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c8e0:	9b00      	ldr	r3, [sp, #0]
 800c8e2:	f883 8000 	strb.w	r8, [r3]
 800c8e6:	e63f      	b.n	800c568 <_dtoa_r+0x698>
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	e7bb      	b.n	800c864 <_dtoa_r+0x994>
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	e7e1      	b.n	800c8b4 <_dtoa_r+0x9e4>
 800c8f0:	9b08      	ldr	r3, [sp, #32]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	db04      	blt.n	800c900 <_dtoa_r+0xa30>
 800c8f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8f8:	430b      	orrs	r3, r1
 800c8fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	d120      	bne.n	800c942 <_dtoa_r+0xa72>
 800c900:	2a00      	cmp	r2, #0
 800c902:	dded      	ble.n	800c8e0 <_dtoa_r+0xa10>
 800c904:	4649      	mov	r1, r9
 800c906:	2201      	movs	r2, #1
 800c908:	4658      	mov	r0, fp
 800c90a:	f000 fbfd 	bl	800d108 <__lshift>
 800c90e:	4621      	mov	r1, r4
 800c910:	4681      	mov	r9, r0
 800c912:	f000 fc65 	bl	800d1e0 <__mcmp>
 800c916:	2800      	cmp	r0, #0
 800c918:	dc03      	bgt.n	800c922 <_dtoa_r+0xa52>
 800c91a:	d1e1      	bne.n	800c8e0 <_dtoa_r+0xa10>
 800c91c:	f018 0f01 	tst.w	r8, #1
 800c920:	d0de      	beq.n	800c8e0 <_dtoa_r+0xa10>
 800c922:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c926:	d1d8      	bne.n	800c8da <_dtoa_r+0xa0a>
 800c928:	9a00      	ldr	r2, [sp, #0]
 800c92a:	2339      	movs	r3, #57	@ 0x39
 800c92c:	7013      	strb	r3, [r2, #0]
 800c92e:	4633      	mov	r3, r6
 800c930:	461e      	mov	r6, r3
 800c932:	3b01      	subs	r3, #1
 800c934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c938:	2a39      	cmp	r2, #57	@ 0x39
 800c93a:	d052      	beq.n	800c9e2 <_dtoa_r+0xb12>
 800c93c:	3201      	adds	r2, #1
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	e612      	b.n	800c568 <_dtoa_r+0x698>
 800c942:	2a00      	cmp	r2, #0
 800c944:	dd07      	ble.n	800c956 <_dtoa_r+0xa86>
 800c946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c94a:	d0ed      	beq.n	800c928 <_dtoa_r+0xa58>
 800c94c:	9a00      	ldr	r2, [sp, #0]
 800c94e:	f108 0301 	add.w	r3, r8, #1
 800c952:	7013      	strb	r3, [r2, #0]
 800c954:	e608      	b.n	800c568 <_dtoa_r+0x698>
 800c956:	9b07      	ldr	r3, [sp, #28]
 800c958:	9a07      	ldr	r2, [sp, #28]
 800c95a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c960:	4293      	cmp	r3, r2
 800c962:	d028      	beq.n	800c9b6 <_dtoa_r+0xae6>
 800c964:	4649      	mov	r1, r9
 800c966:	2300      	movs	r3, #0
 800c968:	220a      	movs	r2, #10
 800c96a:	4658      	mov	r0, fp
 800c96c:	f000 f9d6 	bl	800cd1c <__multadd>
 800c970:	42af      	cmp	r7, r5
 800c972:	4681      	mov	r9, r0
 800c974:	f04f 0300 	mov.w	r3, #0
 800c978:	f04f 020a 	mov.w	r2, #10
 800c97c:	4639      	mov	r1, r7
 800c97e:	4658      	mov	r0, fp
 800c980:	d107      	bne.n	800c992 <_dtoa_r+0xac2>
 800c982:	f000 f9cb 	bl	800cd1c <__multadd>
 800c986:	4607      	mov	r7, r0
 800c988:	4605      	mov	r5, r0
 800c98a:	9b07      	ldr	r3, [sp, #28]
 800c98c:	3301      	adds	r3, #1
 800c98e:	9307      	str	r3, [sp, #28]
 800c990:	e774      	b.n	800c87c <_dtoa_r+0x9ac>
 800c992:	f000 f9c3 	bl	800cd1c <__multadd>
 800c996:	4629      	mov	r1, r5
 800c998:	4607      	mov	r7, r0
 800c99a:	2300      	movs	r3, #0
 800c99c:	220a      	movs	r2, #10
 800c99e:	4658      	mov	r0, fp
 800c9a0:	f000 f9bc 	bl	800cd1c <__multadd>
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	e7f0      	b.n	800c98a <_dtoa_r+0xaba>
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfcc      	ite	gt
 800c9ae:	461e      	movgt	r6, r3
 800c9b0:	2601      	movle	r6, #1
 800c9b2:	4456      	add	r6, sl
 800c9b4:	2700      	movs	r7, #0
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	4658      	mov	r0, fp
 800c9bc:	f000 fba4 	bl	800d108 <__lshift>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	f000 fc0c 	bl	800d1e0 <__mcmp>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	dcb0      	bgt.n	800c92e <_dtoa_r+0xa5e>
 800c9cc:	d102      	bne.n	800c9d4 <_dtoa_r+0xb04>
 800c9ce:	f018 0f01 	tst.w	r8, #1
 800c9d2:	d1ac      	bne.n	800c92e <_dtoa_r+0xa5e>
 800c9d4:	4633      	mov	r3, r6
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9dc:	2a30      	cmp	r2, #48	@ 0x30
 800c9de:	d0fa      	beq.n	800c9d6 <_dtoa_r+0xb06>
 800c9e0:	e5c2      	b.n	800c568 <_dtoa_r+0x698>
 800c9e2:	459a      	cmp	sl, r3
 800c9e4:	d1a4      	bne.n	800c930 <_dtoa_r+0xa60>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	2331      	movs	r3, #49	@ 0x31
 800c9ee:	f88a 3000 	strb.w	r3, [sl]
 800c9f2:	e5b9      	b.n	800c568 <_dtoa_r+0x698>
 800c9f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ca54 <_dtoa_r+0xb84>
 800c9fa:	b11b      	cbz	r3, 800ca04 <_dtoa_r+0xb34>
 800c9fc:	f10a 0308 	add.w	r3, sl, #8
 800ca00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	4650      	mov	r0, sl
 800ca06:	b019      	add	sp, #100	@ 0x64
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	f77f ae37 	ble.w	800c682 <_dtoa_r+0x7b2>
 800ca14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e655      	b.n	800c6c8 <_dtoa_r+0x7f8>
 800ca1c:	9b00      	ldr	r3, [sp, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f77f aed6 	ble.w	800c7d0 <_dtoa_r+0x900>
 800ca24:	4656      	mov	r6, sl
 800ca26:	4621      	mov	r1, r4
 800ca28:	4648      	mov	r0, r9
 800ca2a:	f7ff f9c9 	bl	800bdc0 <quorem>
 800ca2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca32:	f806 8b01 	strb.w	r8, [r6], #1
 800ca36:	9b00      	ldr	r3, [sp, #0]
 800ca38:	eba6 020a 	sub.w	r2, r6, sl
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	ddb3      	ble.n	800c9a8 <_dtoa_r+0xad8>
 800ca40:	4649      	mov	r1, r9
 800ca42:	2300      	movs	r3, #0
 800ca44:	220a      	movs	r2, #10
 800ca46:	4658      	mov	r0, fp
 800ca48:	f000 f968 	bl	800cd1c <__multadd>
 800ca4c:	4681      	mov	r9, r0
 800ca4e:	e7ea      	b.n	800ca26 <_dtoa_r+0xb56>
 800ca50:	080104b5 	.word	0x080104b5
 800ca54:	08010439 	.word	0x08010439

0800ca58 <_free_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d041      	beq.n	800cae4 <_free_r+0x8c>
 800ca60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca64:	1f0c      	subs	r4, r1, #4
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfb8      	it	lt
 800ca6a:	18e4      	addlt	r4, r4, r3
 800ca6c:	f000 f8e8 	bl	800cc40 <__malloc_lock>
 800ca70:	4a1d      	ldr	r2, [pc, #116]	@ (800cae8 <_free_r+0x90>)
 800ca72:	6813      	ldr	r3, [r2, #0]
 800ca74:	b933      	cbnz	r3, 800ca84 <_free_r+0x2c>
 800ca76:	6063      	str	r3, [r4, #4]
 800ca78:	6014      	str	r4, [r2, #0]
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca80:	f000 b8e4 	b.w	800cc4c <__malloc_unlock>
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d908      	bls.n	800ca9a <_free_r+0x42>
 800ca88:	6820      	ldr	r0, [r4, #0]
 800ca8a:	1821      	adds	r1, r4, r0
 800ca8c:	428b      	cmp	r3, r1
 800ca8e:	bf01      	itttt	eq
 800ca90:	6819      	ldreq	r1, [r3, #0]
 800ca92:	685b      	ldreq	r3, [r3, #4]
 800ca94:	1809      	addeq	r1, r1, r0
 800ca96:	6021      	streq	r1, [r4, #0]
 800ca98:	e7ed      	b.n	800ca76 <_free_r+0x1e>
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	b10b      	cbz	r3, 800caa4 <_free_r+0x4c>
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d9fa      	bls.n	800ca9a <_free_r+0x42>
 800caa4:	6811      	ldr	r1, [r2, #0]
 800caa6:	1850      	adds	r0, r2, r1
 800caa8:	42a0      	cmp	r0, r4
 800caaa:	d10b      	bne.n	800cac4 <_free_r+0x6c>
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	4401      	add	r1, r0
 800cab0:	1850      	adds	r0, r2, r1
 800cab2:	4283      	cmp	r3, r0
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	d1e0      	bne.n	800ca7a <_free_r+0x22>
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	6053      	str	r3, [r2, #4]
 800cabe:	4408      	add	r0, r1
 800cac0:	6010      	str	r0, [r2, #0]
 800cac2:	e7da      	b.n	800ca7a <_free_r+0x22>
 800cac4:	d902      	bls.n	800cacc <_free_r+0x74>
 800cac6:	230c      	movs	r3, #12
 800cac8:	602b      	str	r3, [r5, #0]
 800caca:	e7d6      	b.n	800ca7a <_free_r+0x22>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	1821      	adds	r1, r4, r0
 800cad0:	428b      	cmp	r3, r1
 800cad2:	bf04      	itt	eq
 800cad4:	6819      	ldreq	r1, [r3, #0]
 800cad6:	685b      	ldreq	r3, [r3, #4]
 800cad8:	6063      	str	r3, [r4, #4]
 800cada:	bf04      	itt	eq
 800cadc:	1809      	addeq	r1, r1, r0
 800cade:	6021      	streq	r1, [r4, #0]
 800cae0:	6054      	str	r4, [r2, #4]
 800cae2:	e7ca      	b.n	800ca7a <_free_r+0x22>
 800cae4:	bd38      	pop	{r3, r4, r5, pc}
 800cae6:	bf00      	nop
 800cae8:	20002204 	.word	0x20002204

0800caec <malloc>:
 800caec:	4b02      	ldr	r3, [pc, #8]	@ (800caf8 <malloc+0xc>)
 800caee:	4601      	mov	r1, r0
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	f000 b825 	b.w	800cb40 <_malloc_r>
 800caf6:	bf00      	nop
 800caf8:	2000010c 	.word	0x2000010c

0800cafc <sbrk_aligned>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	4e0f      	ldr	r6, [pc, #60]	@ (800cb3c <sbrk_aligned+0x40>)
 800cb00:	460c      	mov	r4, r1
 800cb02:	6831      	ldr	r1, [r6, #0]
 800cb04:	4605      	mov	r5, r0
 800cb06:	b911      	cbnz	r1, 800cb0e <sbrk_aligned+0x12>
 800cb08:	f001 fe0c 	bl	800e724 <_sbrk_r>
 800cb0c:	6030      	str	r0, [r6, #0]
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4628      	mov	r0, r5
 800cb12:	f001 fe07 	bl	800e724 <_sbrk_r>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d103      	bne.n	800cb22 <sbrk_aligned+0x26>
 800cb1a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb1e:	4620      	mov	r0, r4
 800cb20:	bd70      	pop	{r4, r5, r6, pc}
 800cb22:	1cc4      	adds	r4, r0, #3
 800cb24:	f024 0403 	bic.w	r4, r4, #3
 800cb28:	42a0      	cmp	r0, r4
 800cb2a:	d0f8      	beq.n	800cb1e <sbrk_aligned+0x22>
 800cb2c:	1a21      	subs	r1, r4, r0
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f001 fdf8 	bl	800e724 <_sbrk_r>
 800cb34:	3001      	adds	r0, #1
 800cb36:	d1f2      	bne.n	800cb1e <sbrk_aligned+0x22>
 800cb38:	e7ef      	b.n	800cb1a <sbrk_aligned+0x1e>
 800cb3a:	bf00      	nop
 800cb3c:	20002200 	.word	0x20002200

0800cb40 <_malloc_r>:
 800cb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb44:	1ccd      	adds	r5, r1, #3
 800cb46:	f025 0503 	bic.w	r5, r5, #3
 800cb4a:	3508      	adds	r5, #8
 800cb4c:	2d0c      	cmp	r5, #12
 800cb4e:	bf38      	it	cc
 800cb50:	250c      	movcc	r5, #12
 800cb52:	2d00      	cmp	r5, #0
 800cb54:	4606      	mov	r6, r0
 800cb56:	db01      	blt.n	800cb5c <_malloc_r+0x1c>
 800cb58:	42a9      	cmp	r1, r5
 800cb5a:	d904      	bls.n	800cb66 <_malloc_r+0x26>
 800cb5c:	230c      	movs	r3, #12
 800cb5e:	6033      	str	r3, [r6, #0]
 800cb60:	2000      	movs	r0, #0
 800cb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc3c <_malloc_r+0xfc>
 800cb6a:	f000 f869 	bl	800cc40 <__malloc_lock>
 800cb6e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb72:	461c      	mov	r4, r3
 800cb74:	bb44      	cbnz	r4, 800cbc8 <_malloc_r+0x88>
 800cb76:	4629      	mov	r1, r5
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff ffbf 	bl	800cafc <sbrk_aligned>
 800cb7e:	1c43      	adds	r3, r0, #1
 800cb80:	4604      	mov	r4, r0
 800cb82:	d158      	bne.n	800cc36 <_malloc_r+0xf6>
 800cb84:	f8d8 4000 	ldr.w	r4, [r8]
 800cb88:	4627      	mov	r7, r4
 800cb8a:	2f00      	cmp	r7, #0
 800cb8c:	d143      	bne.n	800cc16 <_malloc_r+0xd6>
 800cb8e:	2c00      	cmp	r4, #0
 800cb90:	d04b      	beq.n	800cc2a <_malloc_r+0xea>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	4639      	mov	r1, r7
 800cb96:	4630      	mov	r0, r6
 800cb98:	eb04 0903 	add.w	r9, r4, r3
 800cb9c:	f001 fdc2 	bl	800e724 <_sbrk_r>
 800cba0:	4581      	cmp	r9, r0
 800cba2:	d142      	bne.n	800cc2a <_malloc_r+0xea>
 800cba4:	6821      	ldr	r1, [r4, #0]
 800cba6:	1a6d      	subs	r5, r5, r1
 800cba8:	4629      	mov	r1, r5
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f7ff ffa6 	bl	800cafc <sbrk_aligned>
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d03a      	beq.n	800cc2a <_malloc_r+0xea>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	442b      	add	r3, r5
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	f8d8 3000 	ldr.w	r3, [r8]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	bb62      	cbnz	r2, 800cc1c <_malloc_r+0xdc>
 800cbc2:	f8c8 7000 	str.w	r7, [r8]
 800cbc6:	e00f      	b.n	800cbe8 <_malloc_r+0xa8>
 800cbc8:	6822      	ldr	r2, [r4, #0]
 800cbca:	1b52      	subs	r2, r2, r5
 800cbcc:	d420      	bmi.n	800cc10 <_malloc_r+0xd0>
 800cbce:	2a0b      	cmp	r2, #11
 800cbd0:	d917      	bls.n	800cc02 <_malloc_r+0xc2>
 800cbd2:	1961      	adds	r1, r4, r5
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	6025      	str	r5, [r4, #0]
 800cbd8:	bf18      	it	ne
 800cbda:	6059      	strne	r1, [r3, #4]
 800cbdc:	6863      	ldr	r3, [r4, #4]
 800cbde:	bf08      	it	eq
 800cbe0:	f8c8 1000 	streq.w	r1, [r8]
 800cbe4:	5162      	str	r2, [r4, r5]
 800cbe6:	604b      	str	r3, [r1, #4]
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f000 f82f 	bl	800cc4c <__malloc_unlock>
 800cbee:	f104 000b 	add.w	r0, r4, #11
 800cbf2:	1d23      	adds	r3, r4, #4
 800cbf4:	f020 0007 	bic.w	r0, r0, #7
 800cbf8:	1ac2      	subs	r2, r0, r3
 800cbfa:	bf1c      	itt	ne
 800cbfc:	1a1b      	subne	r3, r3, r0
 800cbfe:	50a3      	strne	r3, [r4, r2]
 800cc00:	e7af      	b.n	800cb62 <_malloc_r+0x22>
 800cc02:	6862      	ldr	r2, [r4, #4]
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	bf0c      	ite	eq
 800cc08:	f8c8 2000 	streq.w	r2, [r8]
 800cc0c:	605a      	strne	r2, [r3, #4]
 800cc0e:	e7eb      	b.n	800cbe8 <_malloc_r+0xa8>
 800cc10:	4623      	mov	r3, r4
 800cc12:	6864      	ldr	r4, [r4, #4]
 800cc14:	e7ae      	b.n	800cb74 <_malloc_r+0x34>
 800cc16:	463c      	mov	r4, r7
 800cc18:	687f      	ldr	r7, [r7, #4]
 800cc1a:	e7b6      	b.n	800cb8a <_malloc_r+0x4a>
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	d1fb      	bne.n	800cc1c <_malloc_r+0xdc>
 800cc24:	2300      	movs	r3, #0
 800cc26:	6053      	str	r3, [r2, #4]
 800cc28:	e7de      	b.n	800cbe8 <_malloc_r+0xa8>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	6033      	str	r3, [r6, #0]
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f000 f80c 	bl	800cc4c <__malloc_unlock>
 800cc34:	e794      	b.n	800cb60 <_malloc_r+0x20>
 800cc36:	6005      	str	r5, [r0, #0]
 800cc38:	e7d6      	b.n	800cbe8 <_malloc_r+0xa8>
 800cc3a:	bf00      	nop
 800cc3c:	20002204 	.word	0x20002204

0800cc40 <__malloc_lock>:
 800cc40:	4801      	ldr	r0, [pc, #4]	@ (800cc48 <__malloc_lock+0x8>)
 800cc42:	f7ff b8b4 	b.w	800bdae <__retarget_lock_acquire_recursive>
 800cc46:	bf00      	nop
 800cc48:	200021fc 	.word	0x200021fc

0800cc4c <__malloc_unlock>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	@ (800cc54 <__malloc_unlock+0x8>)
 800cc4e:	f7ff b8af 	b.w	800bdb0 <__retarget_lock_release_recursive>
 800cc52:	bf00      	nop
 800cc54:	200021fc 	.word	0x200021fc

0800cc58 <_Balloc>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	69c6      	ldr	r6, [r0, #28]
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	b976      	cbnz	r6, 800cc80 <_Balloc+0x28>
 800cc62:	2010      	movs	r0, #16
 800cc64:	f7ff ff42 	bl	800caec <malloc>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	61e0      	str	r0, [r4, #28]
 800cc6c:	b920      	cbnz	r0, 800cc78 <_Balloc+0x20>
 800cc6e:	4b18      	ldr	r3, [pc, #96]	@ (800ccd0 <_Balloc+0x78>)
 800cc70:	4818      	ldr	r0, [pc, #96]	@ (800ccd4 <_Balloc+0x7c>)
 800cc72:	216b      	movs	r1, #107	@ 0x6b
 800cc74:	f001 fd7c 	bl	800e770 <__assert_func>
 800cc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc7c:	6006      	str	r6, [r0, #0]
 800cc7e:	60c6      	str	r6, [r0, #12]
 800cc80:	69e6      	ldr	r6, [r4, #28]
 800cc82:	68f3      	ldr	r3, [r6, #12]
 800cc84:	b183      	cbz	r3, 800cca8 <_Balloc+0x50>
 800cc86:	69e3      	ldr	r3, [r4, #28]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc8e:	b9b8      	cbnz	r0, 800ccc0 <_Balloc+0x68>
 800cc90:	2101      	movs	r1, #1
 800cc92:	fa01 f605 	lsl.w	r6, r1, r5
 800cc96:	1d72      	adds	r2, r6, #5
 800cc98:	0092      	lsls	r2, r2, #2
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f001 fd86 	bl	800e7ac <_calloc_r>
 800cca0:	b160      	cbz	r0, 800ccbc <_Balloc+0x64>
 800cca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cca6:	e00e      	b.n	800ccc6 <_Balloc+0x6e>
 800cca8:	2221      	movs	r2, #33	@ 0x21
 800ccaa:	2104      	movs	r1, #4
 800ccac:	4620      	mov	r0, r4
 800ccae:	f001 fd7d 	bl	800e7ac <_calloc_r>
 800ccb2:	69e3      	ldr	r3, [r4, #28]
 800ccb4:	60f0      	str	r0, [r6, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e4      	bne.n	800cc86 <_Balloc+0x2e>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	6802      	ldr	r2, [r0, #0]
 800ccc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cccc:	e7f7      	b.n	800ccbe <_Balloc+0x66>
 800ccce:	bf00      	nop
 800ccd0:	08010446 	.word	0x08010446
 800ccd4:	080104c6 	.word	0x080104c6

0800ccd8 <_Bfree>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	69c6      	ldr	r6, [r0, #28]
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460c      	mov	r4, r1
 800cce0:	b976      	cbnz	r6, 800cd00 <_Bfree+0x28>
 800cce2:	2010      	movs	r0, #16
 800cce4:	f7ff ff02 	bl	800caec <malloc>
 800cce8:	4602      	mov	r2, r0
 800ccea:	61e8      	str	r0, [r5, #28]
 800ccec:	b920      	cbnz	r0, 800ccf8 <_Bfree+0x20>
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <_Bfree+0x3c>)
 800ccf0:	4809      	ldr	r0, [pc, #36]	@ (800cd18 <_Bfree+0x40>)
 800ccf2:	218f      	movs	r1, #143	@ 0x8f
 800ccf4:	f001 fd3c 	bl	800e770 <__assert_func>
 800ccf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccfc:	6006      	str	r6, [r0, #0]
 800ccfe:	60c6      	str	r6, [r0, #12]
 800cd00:	b13c      	cbz	r4, 800cd12 <_Bfree+0x3a>
 800cd02:	69eb      	ldr	r3, [r5, #28]
 800cd04:	6862      	ldr	r2, [r4, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd0c:	6021      	str	r1, [r4, #0]
 800cd0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	08010446 	.word	0x08010446
 800cd18:	080104c6 	.word	0x080104c6

0800cd1c <__multadd>:
 800cd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd20:	690d      	ldr	r5, [r1, #16]
 800cd22:	4607      	mov	r7, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	461e      	mov	r6, r3
 800cd28:	f101 0c14 	add.w	ip, r1, #20
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd32:	b299      	uxth	r1, r3
 800cd34:	fb02 6101 	mla	r1, r2, r1, r6
 800cd38:	0c1e      	lsrs	r6, r3, #16
 800cd3a:	0c0b      	lsrs	r3, r1, #16
 800cd3c:	fb02 3306 	mla	r3, r2, r6, r3
 800cd40:	b289      	uxth	r1, r1
 800cd42:	3001      	adds	r0, #1
 800cd44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd48:	4285      	cmp	r5, r0
 800cd4a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd52:	dcec      	bgt.n	800cd2e <__multadd+0x12>
 800cd54:	b30e      	cbz	r6, 800cd9a <__multadd+0x7e>
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	dc19      	bgt.n	800cd90 <__multadd+0x74>
 800cd5c:	6861      	ldr	r1, [r4, #4]
 800cd5e:	4638      	mov	r0, r7
 800cd60:	3101      	adds	r1, #1
 800cd62:	f7ff ff79 	bl	800cc58 <_Balloc>
 800cd66:	4680      	mov	r8, r0
 800cd68:	b928      	cbnz	r0, 800cd76 <__multadd+0x5a>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	4b0c      	ldr	r3, [pc, #48]	@ (800cda0 <__multadd+0x84>)
 800cd6e:	480d      	ldr	r0, [pc, #52]	@ (800cda4 <__multadd+0x88>)
 800cd70:	21ba      	movs	r1, #186	@ 0xba
 800cd72:	f001 fcfd 	bl	800e770 <__assert_func>
 800cd76:	6922      	ldr	r2, [r4, #16]
 800cd78:	3202      	adds	r2, #2
 800cd7a:	f104 010c 	add.w	r1, r4, #12
 800cd7e:	0092      	lsls	r2, r2, #2
 800cd80:	300c      	adds	r0, #12
 800cd82:	f001 fcdf 	bl	800e744 <memcpy>
 800cd86:	4621      	mov	r1, r4
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7ff ffa5 	bl	800ccd8 <_Bfree>
 800cd8e:	4644      	mov	r4, r8
 800cd90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd94:	3501      	adds	r5, #1
 800cd96:	615e      	str	r6, [r3, #20]
 800cd98:	6125      	str	r5, [r4, #16]
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda0:	080104b5 	.word	0x080104b5
 800cda4:	080104c6 	.word	0x080104c6

0800cda8 <__s2b>:
 800cda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	4615      	mov	r5, r2
 800cdb0:	461f      	mov	r7, r3
 800cdb2:	2209      	movs	r2, #9
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	db09      	blt.n	800cdd8 <__s2b+0x30>
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7ff ff47 	bl	800cc58 <_Balloc>
 800cdca:	b940      	cbnz	r0, 800cdde <__s2b+0x36>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	4b19      	ldr	r3, [pc, #100]	@ (800ce34 <__s2b+0x8c>)
 800cdd0:	4819      	ldr	r0, [pc, #100]	@ (800ce38 <__s2b+0x90>)
 800cdd2:	21d3      	movs	r1, #211	@ 0xd3
 800cdd4:	f001 fccc 	bl	800e770 <__assert_func>
 800cdd8:	0052      	lsls	r2, r2, #1
 800cdda:	3101      	adds	r1, #1
 800cddc:	e7f0      	b.n	800cdc0 <__s2b+0x18>
 800cdde:	9b08      	ldr	r3, [sp, #32]
 800cde0:	6143      	str	r3, [r0, #20]
 800cde2:	2d09      	cmp	r5, #9
 800cde4:	f04f 0301 	mov.w	r3, #1
 800cde8:	6103      	str	r3, [r0, #16]
 800cdea:	dd16      	ble.n	800ce1a <__s2b+0x72>
 800cdec:	f104 0909 	add.w	r9, r4, #9
 800cdf0:	46c8      	mov	r8, r9
 800cdf2:	442c      	add	r4, r5
 800cdf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	3b30      	subs	r3, #48	@ 0x30
 800cdfc:	220a      	movs	r2, #10
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f7ff ff8c 	bl	800cd1c <__multadd>
 800ce04:	45a0      	cmp	r8, r4
 800ce06:	d1f5      	bne.n	800cdf4 <__s2b+0x4c>
 800ce08:	f1a5 0408 	sub.w	r4, r5, #8
 800ce0c:	444c      	add	r4, r9
 800ce0e:	1b2d      	subs	r5, r5, r4
 800ce10:	1963      	adds	r3, r4, r5
 800ce12:	42bb      	cmp	r3, r7
 800ce14:	db04      	blt.n	800ce20 <__s2b+0x78>
 800ce16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1a:	340a      	adds	r4, #10
 800ce1c:	2509      	movs	r5, #9
 800ce1e:	e7f6      	b.n	800ce0e <__s2b+0x66>
 800ce20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce24:	4601      	mov	r1, r0
 800ce26:	3b30      	subs	r3, #48	@ 0x30
 800ce28:	220a      	movs	r2, #10
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7ff ff76 	bl	800cd1c <__multadd>
 800ce30:	e7ee      	b.n	800ce10 <__s2b+0x68>
 800ce32:	bf00      	nop
 800ce34:	080104b5 	.word	0x080104b5
 800ce38:	080104c6 	.word	0x080104c6

0800ce3c <__hi0bits>:
 800ce3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce40:	4603      	mov	r3, r0
 800ce42:	bf36      	itet	cc
 800ce44:	0403      	lslcc	r3, r0, #16
 800ce46:	2000      	movcs	r0, #0
 800ce48:	2010      	movcc	r0, #16
 800ce4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce4e:	bf3c      	itt	cc
 800ce50:	021b      	lslcc	r3, r3, #8
 800ce52:	3008      	addcc	r0, #8
 800ce54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce58:	bf3c      	itt	cc
 800ce5a:	011b      	lslcc	r3, r3, #4
 800ce5c:	3004      	addcc	r0, #4
 800ce5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce62:	bf3c      	itt	cc
 800ce64:	009b      	lslcc	r3, r3, #2
 800ce66:	3002      	addcc	r0, #2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	db05      	blt.n	800ce78 <__hi0bits+0x3c>
 800ce6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce70:	f100 0001 	add.w	r0, r0, #1
 800ce74:	bf08      	it	eq
 800ce76:	2020      	moveq	r0, #32
 800ce78:	4770      	bx	lr

0800ce7a <__lo0bits>:
 800ce7a:	6803      	ldr	r3, [r0, #0]
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	f013 0007 	ands.w	r0, r3, #7
 800ce82:	d00b      	beq.n	800ce9c <__lo0bits+0x22>
 800ce84:	07d9      	lsls	r1, r3, #31
 800ce86:	d421      	bmi.n	800cecc <__lo0bits+0x52>
 800ce88:	0798      	lsls	r0, r3, #30
 800ce8a:	bf49      	itett	mi
 800ce8c:	085b      	lsrmi	r3, r3, #1
 800ce8e:	089b      	lsrpl	r3, r3, #2
 800ce90:	2001      	movmi	r0, #1
 800ce92:	6013      	strmi	r3, [r2, #0]
 800ce94:	bf5c      	itt	pl
 800ce96:	6013      	strpl	r3, [r2, #0]
 800ce98:	2002      	movpl	r0, #2
 800ce9a:	4770      	bx	lr
 800ce9c:	b299      	uxth	r1, r3
 800ce9e:	b909      	cbnz	r1, 800cea4 <__lo0bits+0x2a>
 800cea0:	0c1b      	lsrs	r3, r3, #16
 800cea2:	2010      	movs	r0, #16
 800cea4:	b2d9      	uxtb	r1, r3
 800cea6:	b909      	cbnz	r1, 800ceac <__lo0bits+0x32>
 800cea8:	3008      	adds	r0, #8
 800ceaa:	0a1b      	lsrs	r3, r3, #8
 800ceac:	0719      	lsls	r1, r3, #28
 800ceae:	bf04      	itt	eq
 800ceb0:	091b      	lsreq	r3, r3, #4
 800ceb2:	3004      	addeq	r0, #4
 800ceb4:	0799      	lsls	r1, r3, #30
 800ceb6:	bf04      	itt	eq
 800ceb8:	089b      	lsreq	r3, r3, #2
 800ceba:	3002      	addeq	r0, #2
 800cebc:	07d9      	lsls	r1, r3, #31
 800cebe:	d403      	bmi.n	800cec8 <__lo0bits+0x4e>
 800cec0:	085b      	lsrs	r3, r3, #1
 800cec2:	f100 0001 	add.w	r0, r0, #1
 800cec6:	d003      	beq.n	800ced0 <__lo0bits+0x56>
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	4770      	bx	lr
 800cecc:	2000      	movs	r0, #0
 800cece:	4770      	bx	lr
 800ced0:	2020      	movs	r0, #32
 800ced2:	4770      	bx	lr

0800ced4 <__i2b>:
 800ced4:	b510      	push	{r4, lr}
 800ced6:	460c      	mov	r4, r1
 800ced8:	2101      	movs	r1, #1
 800ceda:	f7ff febd 	bl	800cc58 <_Balloc>
 800cede:	4602      	mov	r2, r0
 800cee0:	b928      	cbnz	r0, 800ceee <__i2b+0x1a>
 800cee2:	4b05      	ldr	r3, [pc, #20]	@ (800cef8 <__i2b+0x24>)
 800cee4:	4805      	ldr	r0, [pc, #20]	@ (800cefc <__i2b+0x28>)
 800cee6:	f240 1145 	movw	r1, #325	@ 0x145
 800ceea:	f001 fc41 	bl	800e770 <__assert_func>
 800ceee:	2301      	movs	r3, #1
 800cef0:	6144      	str	r4, [r0, #20]
 800cef2:	6103      	str	r3, [r0, #16]
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	bf00      	nop
 800cef8:	080104b5 	.word	0x080104b5
 800cefc:	080104c6 	.word	0x080104c6

0800cf00 <__multiply>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	4614      	mov	r4, r2
 800cf06:	690a      	ldr	r2, [r1, #16]
 800cf08:	6923      	ldr	r3, [r4, #16]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	bfa8      	it	ge
 800cf0e:	4623      	movge	r3, r4
 800cf10:	460f      	mov	r7, r1
 800cf12:	bfa4      	itt	ge
 800cf14:	460c      	movge	r4, r1
 800cf16:	461f      	movge	r7, r3
 800cf18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf20:	68a3      	ldr	r3, [r4, #8]
 800cf22:	6861      	ldr	r1, [r4, #4]
 800cf24:	eb0a 0609 	add.w	r6, sl, r9
 800cf28:	42b3      	cmp	r3, r6
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	bfb8      	it	lt
 800cf2e:	3101      	addlt	r1, #1
 800cf30:	f7ff fe92 	bl	800cc58 <_Balloc>
 800cf34:	b930      	cbnz	r0, 800cf44 <__multiply+0x44>
 800cf36:	4602      	mov	r2, r0
 800cf38:	4b44      	ldr	r3, [pc, #272]	@ (800d04c <__multiply+0x14c>)
 800cf3a:	4845      	ldr	r0, [pc, #276]	@ (800d050 <__multiply+0x150>)
 800cf3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf40:	f001 fc16 	bl	800e770 <__assert_func>
 800cf44:	f100 0514 	add.w	r5, r0, #20
 800cf48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	2200      	movs	r2, #0
 800cf50:	4543      	cmp	r3, r8
 800cf52:	d321      	bcc.n	800cf98 <__multiply+0x98>
 800cf54:	f107 0114 	add.w	r1, r7, #20
 800cf58:	f104 0214 	add.w	r2, r4, #20
 800cf5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	1b13      	subs	r3, r2, r4
 800cf68:	3b15      	subs	r3, #21
 800cf6a:	f023 0303 	bic.w	r3, r3, #3
 800cf6e:	3304      	adds	r3, #4
 800cf70:	f104 0715 	add.w	r7, r4, #21
 800cf74:	42ba      	cmp	r2, r7
 800cf76:	bf38      	it	cc
 800cf78:	2304      	movcc	r3, #4
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	9b02      	ldr	r3, [sp, #8]
 800cf7e:	9103      	str	r1, [sp, #12]
 800cf80:	428b      	cmp	r3, r1
 800cf82:	d80c      	bhi.n	800cf9e <__multiply+0x9e>
 800cf84:	2e00      	cmp	r6, #0
 800cf86:	dd03      	ble.n	800cf90 <__multiply+0x90>
 800cf88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d05b      	beq.n	800d048 <__multiply+0x148>
 800cf90:	6106      	str	r6, [r0, #16]
 800cf92:	b005      	add	sp, #20
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	f843 2b04 	str.w	r2, [r3], #4
 800cf9c:	e7d8      	b.n	800cf50 <__multiply+0x50>
 800cf9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfa2:	f1ba 0f00 	cmp.w	sl, #0
 800cfa6:	d024      	beq.n	800cff2 <__multiply+0xf2>
 800cfa8:	f104 0e14 	add.w	lr, r4, #20
 800cfac:	46a9      	mov	r9, r5
 800cfae:	f04f 0c00 	mov.w	ip, #0
 800cfb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfb6:	f8d9 3000 	ldr.w	r3, [r9]
 800cfba:	fa1f fb87 	uxth.w	fp, r7
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cfc8:	f8d9 7000 	ldr.w	r7, [r9]
 800cfcc:	4463      	add	r3, ip
 800cfce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfd2:	fb0a c70b 	mla	r7, sl, fp, ip
 800cfd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cfe0:	4572      	cmp	r2, lr
 800cfe2:	f849 3b04 	str.w	r3, [r9], #4
 800cfe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfea:	d8e2      	bhi.n	800cfb2 <__multiply+0xb2>
 800cfec:	9b01      	ldr	r3, [sp, #4]
 800cfee:	f845 c003 	str.w	ip, [r5, r3]
 800cff2:	9b03      	ldr	r3, [sp, #12]
 800cff4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cff8:	3104      	adds	r1, #4
 800cffa:	f1b9 0f00 	cmp.w	r9, #0
 800cffe:	d021      	beq.n	800d044 <__multiply+0x144>
 800d000:	682b      	ldr	r3, [r5, #0]
 800d002:	f104 0c14 	add.w	ip, r4, #20
 800d006:	46ae      	mov	lr, r5
 800d008:	f04f 0a00 	mov.w	sl, #0
 800d00c:	f8bc b000 	ldrh.w	fp, [ip]
 800d010:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d014:	fb09 770b 	mla	r7, r9, fp, r7
 800d018:	4457      	add	r7, sl
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d020:	f84e 3b04 	str.w	r3, [lr], #4
 800d024:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d02c:	f8be 3000 	ldrh.w	r3, [lr]
 800d030:	fb09 330a 	mla	r3, r9, sl, r3
 800d034:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d038:	4562      	cmp	r2, ip
 800d03a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d03e:	d8e5      	bhi.n	800d00c <__multiply+0x10c>
 800d040:	9f01      	ldr	r7, [sp, #4]
 800d042:	51eb      	str	r3, [r5, r7]
 800d044:	3504      	adds	r5, #4
 800d046:	e799      	b.n	800cf7c <__multiply+0x7c>
 800d048:	3e01      	subs	r6, #1
 800d04a:	e79b      	b.n	800cf84 <__multiply+0x84>
 800d04c:	080104b5 	.word	0x080104b5
 800d050:	080104c6 	.word	0x080104c6

0800d054 <__pow5mult>:
 800d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d058:	4615      	mov	r5, r2
 800d05a:	f012 0203 	ands.w	r2, r2, #3
 800d05e:	4607      	mov	r7, r0
 800d060:	460e      	mov	r6, r1
 800d062:	d007      	beq.n	800d074 <__pow5mult+0x20>
 800d064:	4c25      	ldr	r4, [pc, #148]	@ (800d0fc <__pow5mult+0xa8>)
 800d066:	3a01      	subs	r2, #1
 800d068:	2300      	movs	r3, #0
 800d06a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d06e:	f7ff fe55 	bl	800cd1c <__multadd>
 800d072:	4606      	mov	r6, r0
 800d074:	10ad      	asrs	r5, r5, #2
 800d076:	d03d      	beq.n	800d0f4 <__pow5mult+0xa0>
 800d078:	69fc      	ldr	r4, [r7, #28]
 800d07a:	b97c      	cbnz	r4, 800d09c <__pow5mult+0x48>
 800d07c:	2010      	movs	r0, #16
 800d07e:	f7ff fd35 	bl	800caec <malloc>
 800d082:	4602      	mov	r2, r0
 800d084:	61f8      	str	r0, [r7, #28]
 800d086:	b928      	cbnz	r0, 800d094 <__pow5mult+0x40>
 800d088:	4b1d      	ldr	r3, [pc, #116]	@ (800d100 <__pow5mult+0xac>)
 800d08a:	481e      	ldr	r0, [pc, #120]	@ (800d104 <__pow5mult+0xb0>)
 800d08c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d090:	f001 fb6e 	bl	800e770 <__assert_func>
 800d094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d098:	6004      	str	r4, [r0, #0]
 800d09a:	60c4      	str	r4, [r0, #12]
 800d09c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0a4:	b94c      	cbnz	r4, 800d0ba <__pow5mult+0x66>
 800d0a6:	f240 2171 	movw	r1, #625	@ 0x271
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	f7ff ff12 	bl	800ced4 <__i2b>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	6003      	str	r3, [r0, #0]
 800d0ba:	f04f 0900 	mov.w	r9, #0
 800d0be:	07eb      	lsls	r3, r5, #31
 800d0c0:	d50a      	bpl.n	800d0d8 <__pow5mult+0x84>
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	f7ff ff1a 	bl	800cf00 <__multiply>
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	f7ff fe01 	bl	800ccd8 <_Bfree>
 800d0d6:	4646      	mov	r6, r8
 800d0d8:	106d      	asrs	r5, r5, #1
 800d0da:	d00b      	beq.n	800d0f4 <__pow5mult+0xa0>
 800d0dc:	6820      	ldr	r0, [r4, #0]
 800d0de:	b938      	cbnz	r0, 800d0f0 <__pow5mult+0x9c>
 800d0e0:	4622      	mov	r2, r4
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f7ff ff0b 	bl	800cf00 <__multiply>
 800d0ea:	6020      	str	r0, [r4, #0]
 800d0ec:	f8c0 9000 	str.w	r9, [r0]
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	e7e4      	b.n	800d0be <__pow5mult+0x6a>
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0fa:	bf00      	nop
 800d0fc:	08010520 	.word	0x08010520
 800d100:	08010446 	.word	0x08010446
 800d104:	080104c6 	.word	0x080104c6

0800d108 <__lshift>:
 800d108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	6849      	ldr	r1, [r1, #4]
 800d110:	6923      	ldr	r3, [r4, #16]
 800d112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d116:	68a3      	ldr	r3, [r4, #8]
 800d118:	4607      	mov	r7, r0
 800d11a:	4691      	mov	r9, r2
 800d11c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d120:	f108 0601 	add.w	r6, r8, #1
 800d124:	42b3      	cmp	r3, r6
 800d126:	db0b      	blt.n	800d140 <__lshift+0x38>
 800d128:	4638      	mov	r0, r7
 800d12a:	f7ff fd95 	bl	800cc58 <_Balloc>
 800d12e:	4605      	mov	r5, r0
 800d130:	b948      	cbnz	r0, 800d146 <__lshift+0x3e>
 800d132:	4602      	mov	r2, r0
 800d134:	4b28      	ldr	r3, [pc, #160]	@ (800d1d8 <__lshift+0xd0>)
 800d136:	4829      	ldr	r0, [pc, #164]	@ (800d1dc <__lshift+0xd4>)
 800d138:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d13c:	f001 fb18 	bl	800e770 <__assert_func>
 800d140:	3101      	adds	r1, #1
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	e7ee      	b.n	800d124 <__lshift+0x1c>
 800d146:	2300      	movs	r3, #0
 800d148:	f100 0114 	add.w	r1, r0, #20
 800d14c:	f100 0210 	add.w	r2, r0, #16
 800d150:	4618      	mov	r0, r3
 800d152:	4553      	cmp	r3, sl
 800d154:	db33      	blt.n	800d1be <__lshift+0xb6>
 800d156:	6920      	ldr	r0, [r4, #16]
 800d158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d15c:	f104 0314 	add.w	r3, r4, #20
 800d160:	f019 091f 	ands.w	r9, r9, #31
 800d164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d16c:	d02b      	beq.n	800d1c6 <__lshift+0xbe>
 800d16e:	f1c9 0e20 	rsb	lr, r9, #32
 800d172:	468a      	mov	sl, r1
 800d174:	2200      	movs	r2, #0
 800d176:	6818      	ldr	r0, [r3, #0]
 800d178:	fa00 f009 	lsl.w	r0, r0, r9
 800d17c:	4310      	orrs	r0, r2
 800d17e:	f84a 0b04 	str.w	r0, [sl], #4
 800d182:	f853 2b04 	ldr.w	r2, [r3], #4
 800d186:	459c      	cmp	ip, r3
 800d188:	fa22 f20e 	lsr.w	r2, r2, lr
 800d18c:	d8f3      	bhi.n	800d176 <__lshift+0x6e>
 800d18e:	ebac 0304 	sub.w	r3, ip, r4
 800d192:	3b15      	subs	r3, #21
 800d194:	f023 0303 	bic.w	r3, r3, #3
 800d198:	3304      	adds	r3, #4
 800d19a:	f104 0015 	add.w	r0, r4, #21
 800d19e:	4584      	cmp	ip, r0
 800d1a0:	bf38      	it	cc
 800d1a2:	2304      	movcc	r3, #4
 800d1a4:	50ca      	str	r2, [r1, r3]
 800d1a6:	b10a      	cbz	r2, 800d1ac <__lshift+0xa4>
 800d1a8:	f108 0602 	add.w	r6, r8, #2
 800d1ac:	3e01      	subs	r6, #1
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	612e      	str	r6, [r5, #16]
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	f7ff fd90 	bl	800ccd8 <_Bfree>
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	e7c5      	b.n	800d152 <__lshift+0x4a>
 800d1c6:	3904      	subs	r1, #4
 800d1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1d0:	459c      	cmp	ip, r3
 800d1d2:	d8f9      	bhi.n	800d1c8 <__lshift+0xc0>
 800d1d4:	e7ea      	b.n	800d1ac <__lshift+0xa4>
 800d1d6:	bf00      	nop
 800d1d8:	080104b5 	.word	0x080104b5
 800d1dc:	080104c6 	.word	0x080104c6

0800d1e0 <__mcmp>:
 800d1e0:	690a      	ldr	r2, [r1, #16]
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6900      	ldr	r0, [r0, #16]
 800d1e6:	1a80      	subs	r0, r0, r2
 800d1e8:	b530      	push	{r4, r5, lr}
 800d1ea:	d10e      	bne.n	800d20a <__mcmp+0x2a>
 800d1ec:	3314      	adds	r3, #20
 800d1ee:	3114      	adds	r1, #20
 800d1f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d200:	4295      	cmp	r5, r2
 800d202:	d003      	beq.n	800d20c <__mcmp+0x2c>
 800d204:	d205      	bcs.n	800d212 <__mcmp+0x32>
 800d206:	f04f 30ff 	mov.w	r0, #4294967295
 800d20a:	bd30      	pop	{r4, r5, pc}
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	d3f3      	bcc.n	800d1f8 <__mcmp+0x18>
 800d210:	e7fb      	b.n	800d20a <__mcmp+0x2a>
 800d212:	2001      	movs	r0, #1
 800d214:	e7f9      	b.n	800d20a <__mcmp+0x2a>
	...

0800d218 <__mdiff>:
 800d218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	4689      	mov	r9, r1
 800d21e:	4606      	mov	r6, r0
 800d220:	4611      	mov	r1, r2
 800d222:	4648      	mov	r0, r9
 800d224:	4614      	mov	r4, r2
 800d226:	f7ff ffdb 	bl	800d1e0 <__mcmp>
 800d22a:	1e05      	subs	r5, r0, #0
 800d22c:	d112      	bne.n	800d254 <__mdiff+0x3c>
 800d22e:	4629      	mov	r1, r5
 800d230:	4630      	mov	r0, r6
 800d232:	f7ff fd11 	bl	800cc58 <_Balloc>
 800d236:	4602      	mov	r2, r0
 800d238:	b928      	cbnz	r0, 800d246 <__mdiff+0x2e>
 800d23a:	4b3f      	ldr	r3, [pc, #252]	@ (800d338 <__mdiff+0x120>)
 800d23c:	f240 2137 	movw	r1, #567	@ 0x237
 800d240:	483e      	ldr	r0, [pc, #248]	@ (800d33c <__mdiff+0x124>)
 800d242:	f001 fa95 	bl	800e770 <__assert_func>
 800d246:	2301      	movs	r3, #1
 800d248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d24c:	4610      	mov	r0, r2
 800d24e:	b003      	add	sp, #12
 800d250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d254:	bfbc      	itt	lt
 800d256:	464b      	movlt	r3, r9
 800d258:	46a1      	movlt	r9, r4
 800d25a:	4630      	mov	r0, r6
 800d25c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d260:	bfba      	itte	lt
 800d262:	461c      	movlt	r4, r3
 800d264:	2501      	movlt	r5, #1
 800d266:	2500      	movge	r5, #0
 800d268:	f7ff fcf6 	bl	800cc58 <_Balloc>
 800d26c:	4602      	mov	r2, r0
 800d26e:	b918      	cbnz	r0, 800d278 <__mdiff+0x60>
 800d270:	4b31      	ldr	r3, [pc, #196]	@ (800d338 <__mdiff+0x120>)
 800d272:	f240 2145 	movw	r1, #581	@ 0x245
 800d276:	e7e3      	b.n	800d240 <__mdiff+0x28>
 800d278:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d27c:	6926      	ldr	r6, [r4, #16]
 800d27e:	60c5      	str	r5, [r0, #12]
 800d280:	f109 0310 	add.w	r3, r9, #16
 800d284:	f109 0514 	add.w	r5, r9, #20
 800d288:	f104 0e14 	add.w	lr, r4, #20
 800d28c:	f100 0b14 	add.w	fp, r0, #20
 800d290:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d294:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	46d9      	mov	r9, fp
 800d29c:	f04f 0c00 	mov.w	ip, #0
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2aa:	9301      	str	r3, [sp, #4]
 800d2ac:	fa1f f38a 	uxth.w	r3, sl
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	b283      	uxth	r3, r0
 800d2b4:	1acb      	subs	r3, r1, r3
 800d2b6:	0c00      	lsrs	r0, r0, #16
 800d2b8:	4463      	add	r3, ip
 800d2ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2c8:	4576      	cmp	r6, lr
 800d2ca:	f849 3b04 	str.w	r3, [r9], #4
 800d2ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2d2:	d8e5      	bhi.n	800d2a0 <__mdiff+0x88>
 800d2d4:	1b33      	subs	r3, r6, r4
 800d2d6:	3b15      	subs	r3, #21
 800d2d8:	f023 0303 	bic.w	r3, r3, #3
 800d2dc:	3415      	adds	r4, #21
 800d2de:	3304      	adds	r3, #4
 800d2e0:	42a6      	cmp	r6, r4
 800d2e2:	bf38      	it	cc
 800d2e4:	2304      	movcc	r3, #4
 800d2e6:	441d      	add	r5, r3
 800d2e8:	445b      	add	r3, fp
 800d2ea:	461e      	mov	r6, r3
 800d2ec:	462c      	mov	r4, r5
 800d2ee:	4544      	cmp	r4, r8
 800d2f0:	d30e      	bcc.n	800d310 <__mdiff+0xf8>
 800d2f2:	f108 0103 	add.w	r1, r8, #3
 800d2f6:	1b49      	subs	r1, r1, r5
 800d2f8:	f021 0103 	bic.w	r1, r1, #3
 800d2fc:	3d03      	subs	r5, #3
 800d2fe:	45a8      	cmp	r8, r5
 800d300:	bf38      	it	cc
 800d302:	2100      	movcc	r1, #0
 800d304:	440b      	add	r3, r1
 800d306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d30a:	b191      	cbz	r1, 800d332 <__mdiff+0x11a>
 800d30c:	6117      	str	r7, [r2, #16]
 800d30e:	e79d      	b.n	800d24c <__mdiff+0x34>
 800d310:	f854 1b04 	ldr.w	r1, [r4], #4
 800d314:	46e6      	mov	lr, ip
 800d316:	0c08      	lsrs	r0, r1, #16
 800d318:	fa1c fc81 	uxtah	ip, ip, r1
 800d31c:	4471      	add	r1, lr
 800d31e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d322:	b289      	uxth	r1, r1
 800d324:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d328:	f846 1b04 	str.w	r1, [r6], #4
 800d32c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d330:	e7dd      	b.n	800d2ee <__mdiff+0xd6>
 800d332:	3f01      	subs	r7, #1
 800d334:	e7e7      	b.n	800d306 <__mdiff+0xee>
 800d336:	bf00      	nop
 800d338:	080104b5 	.word	0x080104b5
 800d33c:	080104c6 	.word	0x080104c6

0800d340 <__ulp>:
 800d340:	b082      	sub	sp, #8
 800d342:	ed8d 0b00 	vstr	d0, [sp]
 800d346:	9a01      	ldr	r2, [sp, #4]
 800d348:	4b0f      	ldr	r3, [pc, #60]	@ (800d388 <__ulp+0x48>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d350:	2b00      	cmp	r3, #0
 800d352:	dc08      	bgt.n	800d366 <__ulp+0x26>
 800d354:	425b      	negs	r3, r3
 800d356:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d35a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d35e:	da04      	bge.n	800d36a <__ulp+0x2a>
 800d360:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d364:	4113      	asrs	r3, r2
 800d366:	2200      	movs	r2, #0
 800d368:	e008      	b.n	800d37c <__ulp+0x3c>
 800d36a:	f1a2 0314 	sub.w	r3, r2, #20
 800d36e:	2b1e      	cmp	r3, #30
 800d370:	bfda      	itte	le
 800d372:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d376:	40da      	lsrle	r2, r3
 800d378:	2201      	movgt	r2, #1
 800d37a:	2300      	movs	r3, #0
 800d37c:	4619      	mov	r1, r3
 800d37e:	4610      	mov	r0, r2
 800d380:	ec41 0b10 	vmov	d0, r0, r1
 800d384:	b002      	add	sp, #8
 800d386:	4770      	bx	lr
 800d388:	7ff00000 	.word	0x7ff00000

0800d38c <__b2d>:
 800d38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d390:	6906      	ldr	r6, [r0, #16]
 800d392:	f100 0814 	add.w	r8, r0, #20
 800d396:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d39a:	1f37      	subs	r7, r6, #4
 800d39c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f7ff fd4b 	bl	800ce3c <__hi0bits>
 800d3a6:	f1c0 0320 	rsb	r3, r0, #32
 800d3aa:	280a      	cmp	r0, #10
 800d3ac:	600b      	str	r3, [r1, #0]
 800d3ae:	491b      	ldr	r1, [pc, #108]	@ (800d41c <__b2d+0x90>)
 800d3b0:	dc15      	bgt.n	800d3de <__b2d+0x52>
 800d3b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3ba:	45b8      	cmp	r8, r7
 800d3bc:	ea43 0501 	orr.w	r5, r3, r1
 800d3c0:	bf34      	ite	cc
 800d3c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3c6:	2300      	movcs	r3, #0
 800d3c8:	3015      	adds	r0, #21
 800d3ca:	fa02 f000 	lsl.w	r0, r2, r0
 800d3ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800d3d2:	4303      	orrs	r3, r0
 800d3d4:	461c      	mov	r4, r3
 800d3d6:	ec45 4b10 	vmov	d0, r4, r5
 800d3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3de:	45b8      	cmp	r8, r7
 800d3e0:	bf3a      	itte	cc
 800d3e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d3ea:	2300      	movcs	r3, #0
 800d3ec:	380b      	subs	r0, #11
 800d3ee:	d012      	beq.n	800d416 <__b2d+0x8a>
 800d3f0:	f1c0 0120 	rsb	r1, r0, #32
 800d3f4:	fa23 f401 	lsr.w	r4, r3, r1
 800d3f8:	4082      	lsls	r2, r0
 800d3fa:	4322      	orrs	r2, r4
 800d3fc:	4547      	cmp	r7, r8
 800d3fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d402:	bf8c      	ite	hi
 800d404:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d408:	2200      	movls	r2, #0
 800d40a:	4083      	lsls	r3, r0
 800d40c:	40ca      	lsrs	r2, r1
 800d40e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d412:	4313      	orrs	r3, r2
 800d414:	e7de      	b.n	800d3d4 <__b2d+0x48>
 800d416:	ea42 0501 	orr.w	r5, r2, r1
 800d41a:	e7db      	b.n	800d3d4 <__b2d+0x48>
 800d41c:	3ff00000 	.word	0x3ff00000

0800d420 <__d2b>:
 800d420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d424:	460f      	mov	r7, r1
 800d426:	2101      	movs	r1, #1
 800d428:	ec59 8b10 	vmov	r8, r9, d0
 800d42c:	4616      	mov	r6, r2
 800d42e:	f7ff fc13 	bl	800cc58 <_Balloc>
 800d432:	4604      	mov	r4, r0
 800d434:	b930      	cbnz	r0, 800d444 <__d2b+0x24>
 800d436:	4602      	mov	r2, r0
 800d438:	4b23      	ldr	r3, [pc, #140]	@ (800d4c8 <__d2b+0xa8>)
 800d43a:	4824      	ldr	r0, [pc, #144]	@ (800d4cc <__d2b+0xac>)
 800d43c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d440:	f001 f996 	bl	800e770 <__assert_func>
 800d444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d44c:	b10d      	cbz	r5, 800d452 <__d2b+0x32>
 800d44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	f1b8 0300 	subs.w	r3, r8, #0
 800d458:	d023      	beq.n	800d4a2 <__d2b+0x82>
 800d45a:	4668      	mov	r0, sp
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	f7ff fd0c 	bl	800ce7a <__lo0bits>
 800d462:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d466:	b1d0      	cbz	r0, 800d49e <__d2b+0x7e>
 800d468:	f1c0 0320 	rsb	r3, r0, #32
 800d46c:	fa02 f303 	lsl.w	r3, r2, r3
 800d470:	430b      	orrs	r3, r1
 800d472:	40c2      	lsrs	r2, r0
 800d474:	6163      	str	r3, [r4, #20]
 800d476:	9201      	str	r2, [sp, #4]
 800d478:	9b01      	ldr	r3, [sp, #4]
 800d47a:	61a3      	str	r3, [r4, #24]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bf0c      	ite	eq
 800d480:	2201      	moveq	r2, #1
 800d482:	2202      	movne	r2, #2
 800d484:	6122      	str	r2, [r4, #16]
 800d486:	b1a5      	cbz	r5, 800d4b2 <__d2b+0x92>
 800d488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d48c:	4405      	add	r5, r0
 800d48e:	603d      	str	r5, [r7, #0]
 800d490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d494:	6030      	str	r0, [r6, #0]
 800d496:	4620      	mov	r0, r4
 800d498:	b003      	add	sp, #12
 800d49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d49e:	6161      	str	r1, [r4, #20]
 800d4a0:	e7ea      	b.n	800d478 <__d2b+0x58>
 800d4a2:	a801      	add	r0, sp, #4
 800d4a4:	f7ff fce9 	bl	800ce7a <__lo0bits>
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	6163      	str	r3, [r4, #20]
 800d4ac:	3020      	adds	r0, #32
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	e7e8      	b.n	800d484 <__d2b+0x64>
 800d4b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4ba:	6038      	str	r0, [r7, #0]
 800d4bc:	6918      	ldr	r0, [r3, #16]
 800d4be:	f7ff fcbd 	bl	800ce3c <__hi0bits>
 800d4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4c6:	e7e5      	b.n	800d494 <__d2b+0x74>
 800d4c8:	080104b5 	.word	0x080104b5
 800d4cc:	080104c6 	.word	0x080104c6

0800d4d0 <__ratio>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	b085      	sub	sp, #20
 800d4d6:	e9cd 1000 	strd	r1, r0, [sp]
 800d4da:	a902      	add	r1, sp, #8
 800d4dc:	f7ff ff56 	bl	800d38c <__b2d>
 800d4e0:	9800      	ldr	r0, [sp, #0]
 800d4e2:	a903      	add	r1, sp, #12
 800d4e4:	ec55 4b10 	vmov	r4, r5, d0
 800d4e8:	f7ff ff50 	bl	800d38c <__b2d>
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	6919      	ldr	r1, [r3, #16]
 800d4f0:	9b00      	ldr	r3, [sp, #0]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	1ac9      	subs	r1, r1, r3
 800d4f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d4fa:	1a9b      	subs	r3, r3, r2
 800d4fc:	ec5b ab10 	vmov	sl, fp, d0
 800d500:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfce      	itee	gt
 800d508:	462a      	movgt	r2, r5
 800d50a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d50e:	465a      	movle	r2, fp
 800d510:	462f      	mov	r7, r5
 800d512:	46d9      	mov	r9, fp
 800d514:	bfcc      	ite	gt
 800d516:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d51a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d51e:	464b      	mov	r3, r9
 800d520:	4652      	mov	r2, sl
 800d522:	4620      	mov	r0, r4
 800d524:	4639      	mov	r1, r7
 800d526:	f7f3 f999 	bl	800085c <__aeabi_ddiv>
 800d52a:	ec41 0b10 	vmov	d0, r0, r1
 800d52e:	b005      	add	sp, #20
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d534 <__copybits>:
 800d534:	3901      	subs	r1, #1
 800d536:	b570      	push	{r4, r5, r6, lr}
 800d538:	1149      	asrs	r1, r1, #5
 800d53a:	6914      	ldr	r4, [r2, #16]
 800d53c:	3101      	adds	r1, #1
 800d53e:	f102 0314 	add.w	r3, r2, #20
 800d542:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d546:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d54a:	1f05      	subs	r5, r0, #4
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d30c      	bcc.n	800d56a <__copybits+0x36>
 800d550:	1aa3      	subs	r3, r4, r2
 800d552:	3b11      	subs	r3, #17
 800d554:	f023 0303 	bic.w	r3, r3, #3
 800d558:	3211      	adds	r2, #17
 800d55a:	42a2      	cmp	r2, r4
 800d55c:	bf88      	it	hi
 800d55e:	2300      	movhi	r3, #0
 800d560:	4418      	add	r0, r3
 800d562:	2300      	movs	r3, #0
 800d564:	4288      	cmp	r0, r1
 800d566:	d305      	bcc.n	800d574 <__copybits+0x40>
 800d568:	bd70      	pop	{r4, r5, r6, pc}
 800d56a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d56e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d572:	e7eb      	b.n	800d54c <__copybits+0x18>
 800d574:	f840 3b04 	str.w	r3, [r0], #4
 800d578:	e7f4      	b.n	800d564 <__copybits+0x30>

0800d57a <__any_on>:
 800d57a:	f100 0214 	add.w	r2, r0, #20
 800d57e:	6900      	ldr	r0, [r0, #16]
 800d580:	114b      	asrs	r3, r1, #5
 800d582:	4298      	cmp	r0, r3
 800d584:	b510      	push	{r4, lr}
 800d586:	db11      	blt.n	800d5ac <__any_on+0x32>
 800d588:	dd0a      	ble.n	800d5a0 <__any_on+0x26>
 800d58a:	f011 011f 	ands.w	r1, r1, #31
 800d58e:	d007      	beq.n	800d5a0 <__any_on+0x26>
 800d590:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d594:	fa24 f001 	lsr.w	r0, r4, r1
 800d598:	fa00 f101 	lsl.w	r1, r0, r1
 800d59c:	428c      	cmp	r4, r1
 800d59e:	d10b      	bne.n	800d5b8 <__any_on+0x3e>
 800d5a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d803      	bhi.n	800d5b0 <__any_on+0x36>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	bd10      	pop	{r4, pc}
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	e7f7      	b.n	800d5a0 <__any_on+0x26>
 800d5b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5b4:	2900      	cmp	r1, #0
 800d5b6:	d0f5      	beq.n	800d5a4 <__any_on+0x2a>
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	e7f6      	b.n	800d5aa <__any_on+0x30>

0800d5bc <sulp>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	4604      	mov	r4, r0
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	ec45 4b10 	vmov	d0, r4, r5
 800d5c6:	4616      	mov	r6, r2
 800d5c8:	f7ff feba 	bl	800d340 <__ulp>
 800d5cc:	ec51 0b10 	vmov	r0, r1, d0
 800d5d0:	b17e      	cbz	r6, 800d5f2 <sulp+0x36>
 800d5d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d5d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	dd09      	ble.n	800d5f2 <sulp+0x36>
 800d5de:	051b      	lsls	r3, r3, #20
 800d5e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d5e4:	2400      	movs	r4, #0
 800d5e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	f7f3 f80b 	bl	8000608 <__aeabi_dmul>
 800d5f2:	ec41 0b10 	vmov	d0, r0, r1
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}

0800d5f8 <_strtod_l>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	b09f      	sub	sp, #124	@ 0x7c
 800d5fe:	460c      	mov	r4, r1
 800d600:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d602:	2200      	movs	r2, #0
 800d604:	921a      	str	r2, [sp, #104]	@ 0x68
 800d606:	9005      	str	r0, [sp, #20]
 800d608:	f04f 0a00 	mov.w	sl, #0
 800d60c:	f04f 0b00 	mov.w	fp, #0
 800d610:	460a      	mov	r2, r1
 800d612:	9219      	str	r2, [sp, #100]	@ 0x64
 800d614:	7811      	ldrb	r1, [r2, #0]
 800d616:	292b      	cmp	r1, #43	@ 0x2b
 800d618:	d04a      	beq.n	800d6b0 <_strtod_l+0xb8>
 800d61a:	d838      	bhi.n	800d68e <_strtod_l+0x96>
 800d61c:	290d      	cmp	r1, #13
 800d61e:	d832      	bhi.n	800d686 <_strtod_l+0x8e>
 800d620:	2908      	cmp	r1, #8
 800d622:	d832      	bhi.n	800d68a <_strtod_l+0x92>
 800d624:	2900      	cmp	r1, #0
 800d626:	d03b      	beq.n	800d6a0 <_strtod_l+0xa8>
 800d628:	2200      	movs	r2, #0
 800d62a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d62c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d62e:	782a      	ldrb	r2, [r5, #0]
 800d630:	2a30      	cmp	r2, #48	@ 0x30
 800d632:	f040 80b3 	bne.w	800d79c <_strtod_l+0x1a4>
 800d636:	786a      	ldrb	r2, [r5, #1]
 800d638:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d63c:	2a58      	cmp	r2, #88	@ 0x58
 800d63e:	d16e      	bne.n	800d71e <_strtod_l+0x126>
 800d640:	9302      	str	r3, [sp, #8]
 800d642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	ab1a      	add	r3, sp, #104	@ 0x68
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	4a8e      	ldr	r2, [pc, #568]	@ (800d884 <_strtod_l+0x28c>)
 800d64c:	9805      	ldr	r0, [sp, #20]
 800d64e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d650:	a919      	add	r1, sp, #100	@ 0x64
 800d652:	f001 f927 	bl	800e8a4 <__gethex>
 800d656:	f010 060f 	ands.w	r6, r0, #15
 800d65a:	4604      	mov	r4, r0
 800d65c:	d005      	beq.n	800d66a <_strtod_l+0x72>
 800d65e:	2e06      	cmp	r6, #6
 800d660:	d128      	bne.n	800d6b4 <_strtod_l+0xbc>
 800d662:	3501      	adds	r5, #1
 800d664:	2300      	movs	r3, #0
 800d666:	9519      	str	r5, [sp, #100]	@ 0x64
 800d668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d66a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f040 858e 	bne.w	800e18e <_strtod_l+0xb96>
 800d672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d674:	b1cb      	cbz	r3, 800d6aa <_strtod_l+0xb2>
 800d676:	4652      	mov	r2, sl
 800d678:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d67c:	ec43 2b10 	vmov	d0, r2, r3
 800d680:	b01f      	add	sp, #124	@ 0x7c
 800d682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d686:	2920      	cmp	r1, #32
 800d688:	d1ce      	bne.n	800d628 <_strtod_l+0x30>
 800d68a:	3201      	adds	r2, #1
 800d68c:	e7c1      	b.n	800d612 <_strtod_l+0x1a>
 800d68e:	292d      	cmp	r1, #45	@ 0x2d
 800d690:	d1ca      	bne.n	800d628 <_strtod_l+0x30>
 800d692:	2101      	movs	r1, #1
 800d694:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d696:	1c51      	adds	r1, r2, #1
 800d698:	9119      	str	r1, [sp, #100]	@ 0x64
 800d69a:	7852      	ldrb	r2, [r2, #1]
 800d69c:	2a00      	cmp	r2, #0
 800d69e:	d1c5      	bne.n	800d62c <_strtod_l+0x34>
 800d6a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f040 8570 	bne.w	800e18a <_strtod_l+0xb92>
 800d6aa:	4652      	mov	r2, sl
 800d6ac:	465b      	mov	r3, fp
 800d6ae:	e7e5      	b.n	800d67c <_strtod_l+0x84>
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	e7ef      	b.n	800d694 <_strtod_l+0x9c>
 800d6b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d6b6:	b13a      	cbz	r2, 800d6c8 <_strtod_l+0xd0>
 800d6b8:	2135      	movs	r1, #53	@ 0x35
 800d6ba:	a81c      	add	r0, sp, #112	@ 0x70
 800d6bc:	f7ff ff3a 	bl	800d534 <__copybits>
 800d6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6c2:	9805      	ldr	r0, [sp, #20]
 800d6c4:	f7ff fb08 	bl	800ccd8 <_Bfree>
 800d6c8:	3e01      	subs	r6, #1
 800d6ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d6cc:	2e04      	cmp	r6, #4
 800d6ce:	d806      	bhi.n	800d6de <_strtod_l+0xe6>
 800d6d0:	e8df f006 	tbb	[pc, r6]
 800d6d4:	201d0314 	.word	0x201d0314
 800d6d8:	14          	.byte	0x14
 800d6d9:	00          	.byte	0x00
 800d6da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d6de:	05e1      	lsls	r1, r4, #23
 800d6e0:	bf48      	it	mi
 800d6e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d6e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6ea:	0d1b      	lsrs	r3, r3, #20
 800d6ec:	051b      	lsls	r3, r3, #20
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1bb      	bne.n	800d66a <_strtod_l+0x72>
 800d6f2:	f7fe fb31 	bl	800bd58 <__errno>
 800d6f6:	2322      	movs	r3, #34	@ 0x22
 800d6f8:	6003      	str	r3, [r0, #0]
 800d6fa:	e7b6      	b.n	800d66a <_strtod_l+0x72>
 800d6fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d700:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d704:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d708:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d70c:	e7e7      	b.n	800d6de <_strtod_l+0xe6>
 800d70e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d88c <_strtod_l+0x294>
 800d712:	e7e4      	b.n	800d6de <_strtod_l+0xe6>
 800d714:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d718:	f04f 3aff 	mov.w	sl, #4294967295
 800d71c:	e7df      	b.n	800d6de <_strtod_l+0xe6>
 800d71e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	9219      	str	r2, [sp, #100]	@ 0x64
 800d724:	785b      	ldrb	r3, [r3, #1]
 800d726:	2b30      	cmp	r3, #48	@ 0x30
 800d728:	d0f9      	beq.n	800d71e <_strtod_l+0x126>
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d09d      	beq.n	800d66a <_strtod_l+0x72>
 800d72e:	2301      	movs	r3, #1
 800d730:	9309      	str	r3, [sp, #36]	@ 0x24
 800d732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d734:	930c      	str	r3, [sp, #48]	@ 0x30
 800d736:	2300      	movs	r3, #0
 800d738:	9308      	str	r3, [sp, #32]
 800d73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d73c:	461f      	mov	r7, r3
 800d73e:	220a      	movs	r2, #10
 800d740:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d742:	7805      	ldrb	r5, [r0, #0]
 800d744:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d748:	b2d9      	uxtb	r1, r3
 800d74a:	2909      	cmp	r1, #9
 800d74c:	d928      	bls.n	800d7a0 <_strtod_l+0x1a8>
 800d74e:	494e      	ldr	r1, [pc, #312]	@ (800d888 <_strtod_l+0x290>)
 800d750:	2201      	movs	r2, #1
 800d752:	f000 ffd5 	bl	800e700 <strncmp>
 800d756:	2800      	cmp	r0, #0
 800d758:	d032      	beq.n	800d7c0 <_strtod_l+0x1c8>
 800d75a:	2000      	movs	r0, #0
 800d75c:	462a      	mov	r2, r5
 800d75e:	4681      	mov	r9, r0
 800d760:	463d      	mov	r5, r7
 800d762:	4603      	mov	r3, r0
 800d764:	2a65      	cmp	r2, #101	@ 0x65
 800d766:	d001      	beq.n	800d76c <_strtod_l+0x174>
 800d768:	2a45      	cmp	r2, #69	@ 0x45
 800d76a:	d114      	bne.n	800d796 <_strtod_l+0x19e>
 800d76c:	b91d      	cbnz	r5, 800d776 <_strtod_l+0x17e>
 800d76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d770:	4302      	orrs	r2, r0
 800d772:	d095      	beq.n	800d6a0 <_strtod_l+0xa8>
 800d774:	2500      	movs	r5, #0
 800d776:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d778:	1c62      	adds	r2, r4, #1
 800d77a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d77c:	7862      	ldrb	r2, [r4, #1]
 800d77e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d780:	d077      	beq.n	800d872 <_strtod_l+0x27a>
 800d782:	2a2d      	cmp	r2, #45	@ 0x2d
 800d784:	d07b      	beq.n	800d87e <_strtod_l+0x286>
 800d786:	f04f 0c00 	mov.w	ip, #0
 800d78a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d78e:	2909      	cmp	r1, #9
 800d790:	f240 8082 	bls.w	800d898 <_strtod_l+0x2a0>
 800d794:	9419      	str	r4, [sp, #100]	@ 0x64
 800d796:	f04f 0800 	mov.w	r8, #0
 800d79a:	e0a2      	b.n	800d8e2 <_strtod_l+0x2ea>
 800d79c:	2300      	movs	r3, #0
 800d79e:	e7c7      	b.n	800d730 <_strtod_l+0x138>
 800d7a0:	2f08      	cmp	r7, #8
 800d7a2:	bfd5      	itete	le
 800d7a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d7a6:	9908      	ldrgt	r1, [sp, #32]
 800d7a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d7b0:	f100 0001 	add.w	r0, r0, #1
 800d7b4:	bfd4      	ite	le
 800d7b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d7b8:	9308      	strgt	r3, [sp, #32]
 800d7ba:	3701      	adds	r7, #1
 800d7bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d7be:	e7bf      	b.n	800d740 <_strtod_l+0x148>
 800d7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7c6:	785a      	ldrb	r2, [r3, #1]
 800d7c8:	b37f      	cbz	r7, 800d82a <_strtod_l+0x232>
 800d7ca:	4681      	mov	r9, r0
 800d7cc:	463d      	mov	r5, r7
 800d7ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d7d2:	2b09      	cmp	r3, #9
 800d7d4:	d912      	bls.n	800d7fc <_strtod_l+0x204>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e7c4      	b.n	800d764 <_strtod_l+0x16c>
 800d7da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7e0:	785a      	ldrb	r2, [r3, #1]
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	2a30      	cmp	r2, #48	@ 0x30
 800d7e6:	d0f8      	beq.n	800d7da <_strtod_l+0x1e2>
 800d7e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d7ec:	2b08      	cmp	r3, #8
 800d7ee:	f200 84d3 	bhi.w	800e198 <_strtod_l+0xba0>
 800d7f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7f6:	4681      	mov	r9, r0
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	3a30      	subs	r2, #48	@ 0x30
 800d7fe:	f100 0301 	add.w	r3, r0, #1
 800d802:	d02a      	beq.n	800d85a <_strtod_l+0x262>
 800d804:	4499      	add	r9, r3
 800d806:	eb00 0c05 	add.w	ip, r0, r5
 800d80a:	462b      	mov	r3, r5
 800d80c:	210a      	movs	r1, #10
 800d80e:	4563      	cmp	r3, ip
 800d810:	d10d      	bne.n	800d82e <_strtod_l+0x236>
 800d812:	1c69      	adds	r1, r5, #1
 800d814:	4401      	add	r1, r0
 800d816:	4428      	add	r0, r5
 800d818:	2808      	cmp	r0, #8
 800d81a:	dc16      	bgt.n	800d84a <_strtod_l+0x252>
 800d81c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d81e:	230a      	movs	r3, #10
 800d820:	fb03 2300 	mla	r3, r3, r0, r2
 800d824:	930a      	str	r3, [sp, #40]	@ 0x28
 800d826:	2300      	movs	r3, #0
 800d828:	e018      	b.n	800d85c <_strtod_l+0x264>
 800d82a:	4638      	mov	r0, r7
 800d82c:	e7da      	b.n	800d7e4 <_strtod_l+0x1ec>
 800d82e:	2b08      	cmp	r3, #8
 800d830:	f103 0301 	add.w	r3, r3, #1
 800d834:	dc03      	bgt.n	800d83e <_strtod_l+0x246>
 800d836:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d838:	434e      	muls	r6, r1
 800d83a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d83c:	e7e7      	b.n	800d80e <_strtod_l+0x216>
 800d83e:	2b10      	cmp	r3, #16
 800d840:	bfde      	ittt	le
 800d842:	9e08      	ldrle	r6, [sp, #32]
 800d844:	434e      	mulle	r6, r1
 800d846:	9608      	strle	r6, [sp, #32]
 800d848:	e7e1      	b.n	800d80e <_strtod_l+0x216>
 800d84a:	280f      	cmp	r0, #15
 800d84c:	dceb      	bgt.n	800d826 <_strtod_l+0x22e>
 800d84e:	9808      	ldr	r0, [sp, #32]
 800d850:	230a      	movs	r3, #10
 800d852:	fb03 2300 	mla	r3, r3, r0, r2
 800d856:	9308      	str	r3, [sp, #32]
 800d858:	e7e5      	b.n	800d826 <_strtod_l+0x22e>
 800d85a:	4629      	mov	r1, r5
 800d85c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d85e:	1c50      	adds	r0, r2, #1
 800d860:	9019      	str	r0, [sp, #100]	@ 0x64
 800d862:	7852      	ldrb	r2, [r2, #1]
 800d864:	4618      	mov	r0, r3
 800d866:	460d      	mov	r5, r1
 800d868:	e7b1      	b.n	800d7ce <_strtod_l+0x1d6>
 800d86a:	f04f 0900 	mov.w	r9, #0
 800d86e:	2301      	movs	r3, #1
 800d870:	e77d      	b.n	800d76e <_strtod_l+0x176>
 800d872:	f04f 0c00 	mov.w	ip, #0
 800d876:	1ca2      	adds	r2, r4, #2
 800d878:	9219      	str	r2, [sp, #100]	@ 0x64
 800d87a:	78a2      	ldrb	r2, [r4, #2]
 800d87c:	e785      	b.n	800d78a <_strtod_l+0x192>
 800d87e:	f04f 0c01 	mov.w	ip, #1
 800d882:	e7f8      	b.n	800d876 <_strtod_l+0x27e>
 800d884:	08010638 	.word	0x08010638
 800d888:	08010620 	.word	0x08010620
 800d88c:	7ff00000 	.word	0x7ff00000
 800d890:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d892:	1c51      	adds	r1, r2, #1
 800d894:	9119      	str	r1, [sp, #100]	@ 0x64
 800d896:	7852      	ldrb	r2, [r2, #1]
 800d898:	2a30      	cmp	r2, #48	@ 0x30
 800d89a:	d0f9      	beq.n	800d890 <_strtod_l+0x298>
 800d89c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d8a0:	2908      	cmp	r1, #8
 800d8a2:	f63f af78 	bhi.w	800d796 <_strtod_l+0x19e>
 800d8a6:	3a30      	subs	r2, #48	@ 0x30
 800d8a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d8ae:	f04f 080a 	mov.w	r8, #10
 800d8b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8b4:	1c56      	adds	r6, r2, #1
 800d8b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d8b8:	7852      	ldrb	r2, [r2, #1]
 800d8ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d8be:	f1be 0f09 	cmp.w	lr, #9
 800d8c2:	d939      	bls.n	800d938 <_strtod_l+0x340>
 800d8c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d8c6:	1a76      	subs	r6, r6, r1
 800d8c8:	2e08      	cmp	r6, #8
 800d8ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d8ce:	dc03      	bgt.n	800d8d8 <_strtod_l+0x2e0>
 800d8d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d8d2:	4588      	cmp	r8, r1
 800d8d4:	bfa8      	it	ge
 800d8d6:	4688      	movge	r8, r1
 800d8d8:	f1bc 0f00 	cmp.w	ip, #0
 800d8dc:	d001      	beq.n	800d8e2 <_strtod_l+0x2ea>
 800d8de:	f1c8 0800 	rsb	r8, r8, #0
 800d8e2:	2d00      	cmp	r5, #0
 800d8e4:	d14e      	bne.n	800d984 <_strtod_l+0x38c>
 800d8e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8e8:	4308      	orrs	r0, r1
 800d8ea:	f47f aebe 	bne.w	800d66a <_strtod_l+0x72>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f47f aed6 	bne.w	800d6a0 <_strtod_l+0xa8>
 800d8f4:	2a69      	cmp	r2, #105	@ 0x69
 800d8f6:	d028      	beq.n	800d94a <_strtod_l+0x352>
 800d8f8:	dc25      	bgt.n	800d946 <_strtod_l+0x34e>
 800d8fa:	2a49      	cmp	r2, #73	@ 0x49
 800d8fc:	d025      	beq.n	800d94a <_strtod_l+0x352>
 800d8fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800d900:	f47f aece 	bne.w	800d6a0 <_strtod_l+0xa8>
 800d904:	499b      	ldr	r1, [pc, #620]	@ (800db74 <_strtod_l+0x57c>)
 800d906:	a819      	add	r0, sp, #100	@ 0x64
 800d908:	f001 f9ee 	bl	800ece8 <__match>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f43f aec7 	beq.w	800d6a0 <_strtod_l+0xa8>
 800d912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b28      	cmp	r3, #40	@ 0x28
 800d918:	d12e      	bne.n	800d978 <_strtod_l+0x380>
 800d91a:	4997      	ldr	r1, [pc, #604]	@ (800db78 <_strtod_l+0x580>)
 800d91c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d91e:	a819      	add	r0, sp, #100	@ 0x64
 800d920:	f001 f9f6 	bl	800ed10 <__hexnan>
 800d924:	2805      	cmp	r0, #5
 800d926:	d127      	bne.n	800d978 <_strtod_l+0x380>
 800d928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d92a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d92e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d932:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d936:	e698      	b.n	800d66a <_strtod_l+0x72>
 800d938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d93a:	fb08 2101 	mla	r1, r8, r1, r2
 800d93e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d942:	920e      	str	r2, [sp, #56]	@ 0x38
 800d944:	e7b5      	b.n	800d8b2 <_strtod_l+0x2ba>
 800d946:	2a6e      	cmp	r2, #110	@ 0x6e
 800d948:	e7da      	b.n	800d900 <_strtod_l+0x308>
 800d94a:	498c      	ldr	r1, [pc, #560]	@ (800db7c <_strtod_l+0x584>)
 800d94c:	a819      	add	r0, sp, #100	@ 0x64
 800d94e:	f001 f9cb 	bl	800ece8 <__match>
 800d952:	2800      	cmp	r0, #0
 800d954:	f43f aea4 	beq.w	800d6a0 <_strtod_l+0xa8>
 800d958:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d95a:	4989      	ldr	r1, [pc, #548]	@ (800db80 <_strtod_l+0x588>)
 800d95c:	3b01      	subs	r3, #1
 800d95e:	a819      	add	r0, sp, #100	@ 0x64
 800d960:	9319      	str	r3, [sp, #100]	@ 0x64
 800d962:	f001 f9c1 	bl	800ece8 <__match>
 800d966:	b910      	cbnz	r0, 800d96e <_strtod_l+0x376>
 800d968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d96a:	3301      	adds	r3, #1
 800d96c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d96e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800db90 <_strtod_l+0x598>
 800d972:	f04f 0a00 	mov.w	sl, #0
 800d976:	e678      	b.n	800d66a <_strtod_l+0x72>
 800d978:	4882      	ldr	r0, [pc, #520]	@ (800db84 <_strtod_l+0x58c>)
 800d97a:	f000 fef1 	bl	800e760 <nan>
 800d97e:	ec5b ab10 	vmov	sl, fp, d0
 800d982:	e672      	b.n	800d66a <_strtod_l+0x72>
 800d984:	eba8 0309 	sub.w	r3, r8, r9
 800d988:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d98c:	2f00      	cmp	r7, #0
 800d98e:	bf08      	it	eq
 800d990:	462f      	moveq	r7, r5
 800d992:	2d10      	cmp	r5, #16
 800d994:	462c      	mov	r4, r5
 800d996:	bfa8      	it	ge
 800d998:	2410      	movge	r4, #16
 800d99a:	f7f2 fdbb 	bl	8000514 <__aeabi_ui2d>
 800d99e:	2d09      	cmp	r5, #9
 800d9a0:	4682      	mov	sl, r0
 800d9a2:	468b      	mov	fp, r1
 800d9a4:	dc13      	bgt.n	800d9ce <_strtod_l+0x3d6>
 800d9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f43f ae5e 	beq.w	800d66a <_strtod_l+0x72>
 800d9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b0:	dd78      	ble.n	800daa4 <_strtod_l+0x4ac>
 800d9b2:	2b16      	cmp	r3, #22
 800d9b4:	dc5f      	bgt.n	800da76 <_strtod_l+0x47e>
 800d9b6:	4974      	ldr	r1, [pc, #464]	@ (800db88 <_strtod_l+0x590>)
 800d9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9c0:	4652      	mov	r2, sl
 800d9c2:	465b      	mov	r3, fp
 800d9c4:	f7f2 fe20 	bl	8000608 <__aeabi_dmul>
 800d9c8:	4682      	mov	sl, r0
 800d9ca:	468b      	mov	fp, r1
 800d9cc:	e64d      	b.n	800d66a <_strtod_l+0x72>
 800d9ce:	4b6e      	ldr	r3, [pc, #440]	@ (800db88 <_strtod_l+0x590>)
 800d9d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d9d8:	f7f2 fe16 	bl	8000608 <__aeabi_dmul>
 800d9dc:	4682      	mov	sl, r0
 800d9de:	9808      	ldr	r0, [sp, #32]
 800d9e0:	468b      	mov	fp, r1
 800d9e2:	f7f2 fd97 	bl	8000514 <__aeabi_ui2d>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4650      	mov	r0, sl
 800d9ec:	4659      	mov	r1, fp
 800d9ee:	f7f2 fc55 	bl	800029c <__adddf3>
 800d9f2:	2d0f      	cmp	r5, #15
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	468b      	mov	fp, r1
 800d9f8:	ddd5      	ble.n	800d9a6 <_strtod_l+0x3ae>
 800d9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9fc:	1b2c      	subs	r4, r5, r4
 800d9fe:	441c      	add	r4, r3
 800da00:	2c00      	cmp	r4, #0
 800da02:	f340 8096 	ble.w	800db32 <_strtod_l+0x53a>
 800da06:	f014 030f 	ands.w	r3, r4, #15
 800da0a:	d00a      	beq.n	800da22 <_strtod_l+0x42a>
 800da0c:	495e      	ldr	r1, [pc, #376]	@ (800db88 <_strtod_l+0x590>)
 800da0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da12:	4652      	mov	r2, sl
 800da14:	465b      	mov	r3, fp
 800da16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1a:	f7f2 fdf5 	bl	8000608 <__aeabi_dmul>
 800da1e:	4682      	mov	sl, r0
 800da20:	468b      	mov	fp, r1
 800da22:	f034 040f 	bics.w	r4, r4, #15
 800da26:	d073      	beq.n	800db10 <_strtod_l+0x518>
 800da28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800da2c:	dd48      	ble.n	800dac0 <_strtod_l+0x4c8>
 800da2e:	2400      	movs	r4, #0
 800da30:	46a0      	mov	r8, r4
 800da32:	940a      	str	r4, [sp, #40]	@ 0x28
 800da34:	46a1      	mov	r9, r4
 800da36:	9a05      	ldr	r2, [sp, #20]
 800da38:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800db90 <_strtod_l+0x598>
 800da3c:	2322      	movs	r3, #34	@ 0x22
 800da3e:	6013      	str	r3, [r2, #0]
 800da40:	f04f 0a00 	mov.w	sl, #0
 800da44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da46:	2b00      	cmp	r3, #0
 800da48:	f43f ae0f 	beq.w	800d66a <_strtod_l+0x72>
 800da4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da4e:	9805      	ldr	r0, [sp, #20]
 800da50:	f7ff f942 	bl	800ccd8 <_Bfree>
 800da54:	9805      	ldr	r0, [sp, #20]
 800da56:	4649      	mov	r1, r9
 800da58:	f7ff f93e 	bl	800ccd8 <_Bfree>
 800da5c:	9805      	ldr	r0, [sp, #20]
 800da5e:	4641      	mov	r1, r8
 800da60:	f7ff f93a 	bl	800ccd8 <_Bfree>
 800da64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da66:	9805      	ldr	r0, [sp, #20]
 800da68:	f7ff f936 	bl	800ccd8 <_Bfree>
 800da6c:	9805      	ldr	r0, [sp, #20]
 800da6e:	4621      	mov	r1, r4
 800da70:	f7ff f932 	bl	800ccd8 <_Bfree>
 800da74:	e5f9      	b.n	800d66a <_strtod_l+0x72>
 800da76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800da7c:	4293      	cmp	r3, r2
 800da7e:	dbbc      	blt.n	800d9fa <_strtod_l+0x402>
 800da80:	4c41      	ldr	r4, [pc, #260]	@ (800db88 <_strtod_l+0x590>)
 800da82:	f1c5 050f 	rsb	r5, r5, #15
 800da86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800da8a:	4652      	mov	r2, sl
 800da8c:	465b      	mov	r3, fp
 800da8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da92:	f7f2 fdb9 	bl	8000608 <__aeabi_dmul>
 800da96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da98:	1b5d      	subs	r5, r3, r5
 800da9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800da9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daa2:	e78f      	b.n	800d9c4 <_strtod_l+0x3cc>
 800daa4:	3316      	adds	r3, #22
 800daa6:	dba8      	blt.n	800d9fa <_strtod_l+0x402>
 800daa8:	4b37      	ldr	r3, [pc, #220]	@ (800db88 <_strtod_l+0x590>)
 800daaa:	eba9 0808 	sub.w	r8, r9, r8
 800daae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dab2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dab6:	4650      	mov	r0, sl
 800dab8:	4659      	mov	r1, fp
 800daba:	f7f2 fecf 	bl	800085c <__aeabi_ddiv>
 800dabe:	e783      	b.n	800d9c8 <_strtod_l+0x3d0>
 800dac0:	4b32      	ldr	r3, [pc, #200]	@ (800db8c <_strtod_l+0x594>)
 800dac2:	9308      	str	r3, [sp, #32]
 800dac4:	2300      	movs	r3, #0
 800dac6:	1124      	asrs	r4, r4, #4
 800dac8:	4650      	mov	r0, sl
 800daca:	4659      	mov	r1, fp
 800dacc:	461e      	mov	r6, r3
 800dace:	2c01      	cmp	r4, #1
 800dad0:	dc21      	bgt.n	800db16 <_strtod_l+0x51e>
 800dad2:	b10b      	cbz	r3, 800dad8 <_strtod_l+0x4e0>
 800dad4:	4682      	mov	sl, r0
 800dad6:	468b      	mov	fp, r1
 800dad8:	492c      	ldr	r1, [pc, #176]	@ (800db8c <_strtod_l+0x594>)
 800dada:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dade:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dae2:	4652      	mov	r2, sl
 800dae4:	465b      	mov	r3, fp
 800dae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daea:	f7f2 fd8d 	bl	8000608 <__aeabi_dmul>
 800daee:	4b28      	ldr	r3, [pc, #160]	@ (800db90 <_strtod_l+0x598>)
 800daf0:	460a      	mov	r2, r1
 800daf2:	400b      	ands	r3, r1
 800daf4:	4927      	ldr	r1, [pc, #156]	@ (800db94 <_strtod_l+0x59c>)
 800daf6:	428b      	cmp	r3, r1
 800daf8:	4682      	mov	sl, r0
 800dafa:	d898      	bhi.n	800da2e <_strtod_l+0x436>
 800dafc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800db00:	428b      	cmp	r3, r1
 800db02:	bf86      	itte	hi
 800db04:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800db98 <_strtod_l+0x5a0>
 800db08:	f04f 3aff 	movhi.w	sl, #4294967295
 800db0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800db10:	2300      	movs	r3, #0
 800db12:	9308      	str	r3, [sp, #32]
 800db14:	e07a      	b.n	800dc0c <_strtod_l+0x614>
 800db16:	07e2      	lsls	r2, r4, #31
 800db18:	d505      	bpl.n	800db26 <_strtod_l+0x52e>
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	f7f2 fd72 	bl	8000608 <__aeabi_dmul>
 800db24:	2301      	movs	r3, #1
 800db26:	9a08      	ldr	r2, [sp, #32]
 800db28:	3208      	adds	r2, #8
 800db2a:	3601      	adds	r6, #1
 800db2c:	1064      	asrs	r4, r4, #1
 800db2e:	9208      	str	r2, [sp, #32]
 800db30:	e7cd      	b.n	800dace <_strtod_l+0x4d6>
 800db32:	d0ed      	beq.n	800db10 <_strtod_l+0x518>
 800db34:	4264      	negs	r4, r4
 800db36:	f014 020f 	ands.w	r2, r4, #15
 800db3a:	d00a      	beq.n	800db52 <_strtod_l+0x55a>
 800db3c:	4b12      	ldr	r3, [pc, #72]	@ (800db88 <_strtod_l+0x590>)
 800db3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db42:	4650      	mov	r0, sl
 800db44:	4659      	mov	r1, fp
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f7f2 fe87 	bl	800085c <__aeabi_ddiv>
 800db4e:	4682      	mov	sl, r0
 800db50:	468b      	mov	fp, r1
 800db52:	1124      	asrs	r4, r4, #4
 800db54:	d0dc      	beq.n	800db10 <_strtod_l+0x518>
 800db56:	2c1f      	cmp	r4, #31
 800db58:	dd20      	ble.n	800db9c <_strtod_l+0x5a4>
 800db5a:	2400      	movs	r4, #0
 800db5c:	46a0      	mov	r8, r4
 800db5e:	940a      	str	r4, [sp, #40]	@ 0x28
 800db60:	46a1      	mov	r9, r4
 800db62:	9a05      	ldr	r2, [sp, #20]
 800db64:	2322      	movs	r3, #34	@ 0x22
 800db66:	f04f 0a00 	mov.w	sl, #0
 800db6a:	f04f 0b00 	mov.w	fp, #0
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	e768      	b.n	800da44 <_strtod_l+0x44c>
 800db72:	bf00      	nop
 800db74:	0801040d 	.word	0x0801040d
 800db78:	08010624 	.word	0x08010624
 800db7c:	08010405 	.word	0x08010405
 800db80:	0801043c 	.word	0x0801043c
 800db84:	080107cd 	.word	0x080107cd
 800db88:	08010558 	.word	0x08010558
 800db8c:	08010530 	.word	0x08010530
 800db90:	7ff00000 	.word	0x7ff00000
 800db94:	7ca00000 	.word	0x7ca00000
 800db98:	7fefffff 	.word	0x7fefffff
 800db9c:	f014 0310 	ands.w	r3, r4, #16
 800dba0:	bf18      	it	ne
 800dba2:	236a      	movne	r3, #106	@ 0x6a
 800dba4:	4ea9      	ldr	r6, [pc, #676]	@ (800de4c <_strtod_l+0x854>)
 800dba6:	9308      	str	r3, [sp, #32]
 800dba8:	4650      	mov	r0, sl
 800dbaa:	4659      	mov	r1, fp
 800dbac:	2300      	movs	r3, #0
 800dbae:	07e2      	lsls	r2, r4, #31
 800dbb0:	d504      	bpl.n	800dbbc <_strtod_l+0x5c4>
 800dbb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbb6:	f7f2 fd27 	bl	8000608 <__aeabi_dmul>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	1064      	asrs	r4, r4, #1
 800dbbe:	f106 0608 	add.w	r6, r6, #8
 800dbc2:	d1f4      	bne.n	800dbae <_strtod_l+0x5b6>
 800dbc4:	b10b      	cbz	r3, 800dbca <_strtod_l+0x5d2>
 800dbc6:	4682      	mov	sl, r0
 800dbc8:	468b      	mov	fp, r1
 800dbca:	9b08      	ldr	r3, [sp, #32]
 800dbcc:	b1b3      	cbz	r3, 800dbfc <_strtod_l+0x604>
 800dbce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dbd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	4659      	mov	r1, fp
 800dbda:	dd0f      	ble.n	800dbfc <_strtod_l+0x604>
 800dbdc:	2b1f      	cmp	r3, #31
 800dbde:	dd55      	ble.n	800dc8c <_strtod_l+0x694>
 800dbe0:	2b34      	cmp	r3, #52	@ 0x34
 800dbe2:	bfde      	ittt	le
 800dbe4:	f04f 33ff 	movle.w	r3, #4294967295
 800dbe8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dbec:	4093      	lslle	r3, r2
 800dbee:	f04f 0a00 	mov.w	sl, #0
 800dbf2:	bfcc      	ite	gt
 800dbf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dbf8:	ea03 0b01 	andle.w	fp, r3, r1
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4650      	mov	r0, sl
 800dc02:	4659      	mov	r1, fp
 800dc04:	f7f2 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d1a6      	bne.n	800db5a <_strtod_l+0x562>
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dc12:	9805      	ldr	r0, [sp, #20]
 800dc14:	462b      	mov	r3, r5
 800dc16:	463a      	mov	r2, r7
 800dc18:	f7ff f8c6 	bl	800cda8 <__s2b>
 800dc1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f43f af05 	beq.w	800da2e <_strtod_l+0x436>
 800dc24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc26:	2a00      	cmp	r2, #0
 800dc28:	eba9 0308 	sub.w	r3, r9, r8
 800dc2c:	bfa8      	it	ge
 800dc2e:	2300      	movge	r3, #0
 800dc30:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc32:	2400      	movs	r4, #0
 800dc34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc38:	9316      	str	r3, [sp, #88]	@ 0x58
 800dc3a:	46a0      	mov	r8, r4
 800dc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc3e:	9805      	ldr	r0, [sp, #20]
 800dc40:	6859      	ldr	r1, [r3, #4]
 800dc42:	f7ff f809 	bl	800cc58 <_Balloc>
 800dc46:	4681      	mov	r9, r0
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f43f aef4 	beq.w	800da36 <_strtod_l+0x43e>
 800dc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc50:	691a      	ldr	r2, [r3, #16]
 800dc52:	3202      	adds	r2, #2
 800dc54:	f103 010c 	add.w	r1, r3, #12
 800dc58:	0092      	lsls	r2, r2, #2
 800dc5a:	300c      	adds	r0, #12
 800dc5c:	f000 fd72 	bl	800e744 <memcpy>
 800dc60:	ec4b ab10 	vmov	d0, sl, fp
 800dc64:	9805      	ldr	r0, [sp, #20]
 800dc66:	aa1c      	add	r2, sp, #112	@ 0x70
 800dc68:	a91b      	add	r1, sp, #108	@ 0x6c
 800dc6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dc6e:	f7ff fbd7 	bl	800d420 <__d2b>
 800dc72:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc74:	2800      	cmp	r0, #0
 800dc76:	f43f aede 	beq.w	800da36 <_strtod_l+0x43e>
 800dc7a:	9805      	ldr	r0, [sp, #20]
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	f7ff f929 	bl	800ced4 <__i2b>
 800dc82:	4680      	mov	r8, r0
 800dc84:	b948      	cbnz	r0, 800dc9a <_strtod_l+0x6a2>
 800dc86:	f04f 0800 	mov.w	r8, #0
 800dc8a:	e6d4      	b.n	800da36 <_strtod_l+0x43e>
 800dc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc90:	fa02 f303 	lsl.w	r3, r2, r3
 800dc94:	ea03 0a0a 	and.w	sl, r3, sl
 800dc98:	e7b0      	b.n	800dbfc <_strtod_l+0x604>
 800dc9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dc9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dc9e:	2d00      	cmp	r5, #0
 800dca0:	bfab      	itete	ge
 800dca2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dca4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dca6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dca8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dcaa:	bfac      	ite	ge
 800dcac:	18ef      	addge	r7, r5, r3
 800dcae:	1b5e      	sublt	r6, r3, r5
 800dcb0:	9b08      	ldr	r3, [sp, #32]
 800dcb2:	1aed      	subs	r5, r5, r3
 800dcb4:	4415      	add	r5, r2
 800dcb6:	4b66      	ldr	r3, [pc, #408]	@ (800de50 <_strtod_l+0x858>)
 800dcb8:	3d01      	subs	r5, #1
 800dcba:	429d      	cmp	r5, r3
 800dcbc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dcc0:	da50      	bge.n	800dd64 <_strtod_l+0x76c>
 800dcc2:	1b5b      	subs	r3, r3, r5
 800dcc4:	2b1f      	cmp	r3, #31
 800dcc6:	eba2 0203 	sub.w	r2, r2, r3
 800dcca:	f04f 0101 	mov.w	r1, #1
 800dcce:	dc3d      	bgt.n	800dd4c <_strtod_l+0x754>
 800dcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcda:	18bd      	adds	r5, r7, r2
 800dcdc:	9b08      	ldr	r3, [sp, #32]
 800dcde:	42af      	cmp	r7, r5
 800dce0:	4416      	add	r6, r2
 800dce2:	441e      	add	r6, r3
 800dce4:	463b      	mov	r3, r7
 800dce6:	bfa8      	it	ge
 800dce8:	462b      	movge	r3, r5
 800dcea:	42b3      	cmp	r3, r6
 800dcec:	bfa8      	it	ge
 800dcee:	4633      	movge	r3, r6
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bfc2      	ittt	gt
 800dcf4:	1aed      	subgt	r5, r5, r3
 800dcf6:	1af6      	subgt	r6, r6, r3
 800dcf8:	1aff      	subgt	r7, r7, r3
 800dcfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	dd16      	ble.n	800dd2e <_strtod_l+0x736>
 800dd00:	4641      	mov	r1, r8
 800dd02:	9805      	ldr	r0, [sp, #20]
 800dd04:	461a      	mov	r2, r3
 800dd06:	f7ff f9a5 	bl	800d054 <__pow5mult>
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d0ba      	beq.n	800dc86 <_strtod_l+0x68e>
 800dd10:	4601      	mov	r1, r0
 800dd12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd14:	9805      	ldr	r0, [sp, #20]
 800dd16:	f7ff f8f3 	bl	800cf00 <__multiply>
 800dd1a:	900e      	str	r0, [sp, #56]	@ 0x38
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	f43f ae8a 	beq.w	800da36 <_strtod_l+0x43e>
 800dd22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd24:	9805      	ldr	r0, [sp, #20]
 800dd26:	f7fe ffd7 	bl	800ccd8 <_Bfree>
 800dd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	dc1d      	bgt.n	800dd6e <_strtod_l+0x776>
 800dd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	dd23      	ble.n	800dd80 <_strtod_l+0x788>
 800dd38:	4649      	mov	r1, r9
 800dd3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dd3c:	9805      	ldr	r0, [sp, #20]
 800dd3e:	f7ff f989 	bl	800d054 <__pow5mult>
 800dd42:	4681      	mov	r9, r0
 800dd44:	b9e0      	cbnz	r0, 800dd80 <_strtod_l+0x788>
 800dd46:	f04f 0900 	mov.w	r9, #0
 800dd4a:	e674      	b.n	800da36 <_strtod_l+0x43e>
 800dd4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dd50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dd54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dd58:	35e2      	adds	r5, #226	@ 0xe2
 800dd5a:	fa01 f305 	lsl.w	r3, r1, r5
 800dd5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd60:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dd62:	e7ba      	b.n	800dcda <_strtod_l+0x6e2>
 800dd64:	2300      	movs	r3, #0
 800dd66:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd68:	2301      	movs	r3, #1
 800dd6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd6c:	e7b5      	b.n	800dcda <_strtod_l+0x6e2>
 800dd6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd70:	9805      	ldr	r0, [sp, #20]
 800dd72:	462a      	mov	r2, r5
 800dd74:	f7ff f9c8 	bl	800d108 <__lshift>
 800dd78:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d1d9      	bne.n	800dd32 <_strtod_l+0x73a>
 800dd7e:	e65a      	b.n	800da36 <_strtod_l+0x43e>
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	dd07      	ble.n	800dd94 <_strtod_l+0x79c>
 800dd84:	4649      	mov	r1, r9
 800dd86:	9805      	ldr	r0, [sp, #20]
 800dd88:	4632      	mov	r2, r6
 800dd8a:	f7ff f9bd 	bl	800d108 <__lshift>
 800dd8e:	4681      	mov	r9, r0
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d0d8      	beq.n	800dd46 <_strtod_l+0x74e>
 800dd94:	2f00      	cmp	r7, #0
 800dd96:	dd08      	ble.n	800ddaa <_strtod_l+0x7b2>
 800dd98:	4641      	mov	r1, r8
 800dd9a:	9805      	ldr	r0, [sp, #20]
 800dd9c:	463a      	mov	r2, r7
 800dd9e:	f7ff f9b3 	bl	800d108 <__lshift>
 800dda2:	4680      	mov	r8, r0
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f43f ae46 	beq.w	800da36 <_strtod_l+0x43e>
 800ddaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddac:	9805      	ldr	r0, [sp, #20]
 800ddae:	464a      	mov	r2, r9
 800ddb0:	f7ff fa32 	bl	800d218 <__mdiff>
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f43f ae3d 	beq.w	800da36 <_strtod_l+0x43e>
 800ddbc:	68c3      	ldr	r3, [r0, #12]
 800ddbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	60c3      	str	r3, [r0, #12]
 800ddc4:	4641      	mov	r1, r8
 800ddc6:	f7ff fa0b 	bl	800d1e0 <__mcmp>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	da46      	bge.n	800de5c <_strtod_l+0x864>
 800ddce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddd0:	ea53 030a 	orrs.w	r3, r3, sl
 800ddd4:	d16c      	bne.n	800deb0 <_strtod_l+0x8b8>
 800ddd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d168      	bne.n	800deb0 <_strtod_l+0x8b8>
 800ddde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dde2:	0d1b      	lsrs	r3, r3, #20
 800dde4:	051b      	lsls	r3, r3, #20
 800dde6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ddea:	d961      	bls.n	800deb0 <_strtod_l+0x8b8>
 800ddec:	6963      	ldr	r3, [r4, #20]
 800ddee:	b913      	cbnz	r3, 800ddf6 <_strtod_l+0x7fe>
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	dd5c      	ble.n	800deb0 <_strtod_l+0x8b8>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	9805      	ldr	r0, [sp, #20]
 800ddfc:	f7ff f984 	bl	800d108 <__lshift>
 800de00:	4641      	mov	r1, r8
 800de02:	4604      	mov	r4, r0
 800de04:	f7ff f9ec 	bl	800d1e0 <__mcmp>
 800de08:	2800      	cmp	r0, #0
 800de0a:	dd51      	ble.n	800deb0 <_strtod_l+0x8b8>
 800de0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de10:	9a08      	ldr	r2, [sp, #32]
 800de12:	0d1b      	lsrs	r3, r3, #20
 800de14:	051b      	lsls	r3, r3, #20
 800de16:	2a00      	cmp	r2, #0
 800de18:	d06b      	beq.n	800def2 <_strtod_l+0x8fa>
 800de1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800de1e:	d868      	bhi.n	800def2 <_strtod_l+0x8fa>
 800de20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800de24:	f67f ae9d 	bls.w	800db62 <_strtod_l+0x56a>
 800de28:	4b0a      	ldr	r3, [pc, #40]	@ (800de54 <_strtod_l+0x85c>)
 800de2a:	4650      	mov	r0, sl
 800de2c:	4659      	mov	r1, fp
 800de2e:	2200      	movs	r2, #0
 800de30:	f7f2 fbea 	bl	8000608 <__aeabi_dmul>
 800de34:	4b08      	ldr	r3, [pc, #32]	@ (800de58 <_strtod_l+0x860>)
 800de36:	400b      	ands	r3, r1
 800de38:	4682      	mov	sl, r0
 800de3a:	468b      	mov	fp, r1
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f47f ae05 	bne.w	800da4c <_strtod_l+0x454>
 800de42:	9a05      	ldr	r2, [sp, #20]
 800de44:	2322      	movs	r3, #34	@ 0x22
 800de46:	6013      	str	r3, [r2, #0]
 800de48:	e600      	b.n	800da4c <_strtod_l+0x454>
 800de4a:	bf00      	nop
 800de4c:	08010650 	.word	0x08010650
 800de50:	fffffc02 	.word	0xfffffc02
 800de54:	39500000 	.word	0x39500000
 800de58:	7ff00000 	.word	0x7ff00000
 800de5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800de60:	d165      	bne.n	800df2e <_strtod_l+0x936>
 800de62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800de64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de68:	b35a      	cbz	r2, 800dec2 <_strtod_l+0x8ca>
 800de6a:	4a9f      	ldr	r2, [pc, #636]	@ (800e0e8 <_strtod_l+0xaf0>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d12b      	bne.n	800dec8 <_strtod_l+0x8d0>
 800de70:	9b08      	ldr	r3, [sp, #32]
 800de72:	4651      	mov	r1, sl
 800de74:	b303      	cbz	r3, 800deb8 <_strtod_l+0x8c0>
 800de76:	4b9d      	ldr	r3, [pc, #628]	@ (800e0ec <_strtod_l+0xaf4>)
 800de78:	465a      	mov	r2, fp
 800de7a:	4013      	ands	r3, r2
 800de7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800de80:	f04f 32ff 	mov.w	r2, #4294967295
 800de84:	d81b      	bhi.n	800debe <_strtod_l+0x8c6>
 800de86:	0d1b      	lsrs	r3, r3, #20
 800de88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800de8c:	fa02 f303 	lsl.w	r3, r2, r3
 800de90:	4299      	cmp	r1, r3
 800de92:	d119      	bne.n	800dec8 <_strtod_l+0x8d0>
 800de94:	4b96      	ldr	r3, [pc, #600]	@ (800e0f0 <_strtod_l+0xaf8>)
 800de96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de98:	429a      	cmp	r2, r3
 800de9a:	d102      	bne.n	800dea2 <_strtod_l+0x8aa>
 800de9c:	3101      	adds	r1, #1
 800de9e:	f43f adca 	beq.w	800da36 <_strtod_l+0x43e>
 800dea2:	4b92      	ldr	r3, [pc, #584]	@ (800e0ec <_strtod_l+0xaf4>)
 800dea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dea6:	401a      	ands	r2, r3
 800dea8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800deac:	f04f 0a00 	mov.w	sl, #0
 800deb0:	9b08      	ldr	r3, [sp, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1b8      	bne.n	800de28 <_strtod_l+0x830>
 800deb6:	e5c9      	b.n	800da4c <_strtod_l+0x454>
 800deb8:	f04f 33ff 	mov.w	r3, #4294967295
 800debc:	e7e8      	b.n	800de90 <_strtod_l+0x898>
 800debe:	4613      	mov	r3, r2
 800dec0:	e7e6      	b.n	800de90 <_strtod_l+0x898>
 800dec2:	ea53 030a 	orrs.w	r3, r3, sl
 800dec6:	d0a1      	beq.n	800de0c <_strtod_l+0x814>
 800dec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800deca:	b1db      	cbz	r3, 800df04 <_strtod_l+0x90c>
 800decc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dece:	4213      	tst	r3, r2
 800ded0:	d0ee      	beq.n	800deb0 <_strtod_l+0x8b8>
 800ded2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded4:	9a08      	ldr	r2, [sp, #32]
 800ded6:	4650      	mov	r0, sl
 800ded8:	4659      	mov	r1, fp
 800deda:	b1bb      	cbz	r3, 800df0c <_strtod_l+0x914>
 800dedc:	f7ff fb6e 	bl	800d5bc <sulp>
 800dee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dee4:	ec53 2b10 	vmov	r2, r3, d0
 800dee8:	f7f2 f9d8 	bl	800029c <__adddf3>
 800deec:	4682      	mov	sl, r0
 800deee:	468b      	mov	fp, r1
 800def0:	e7de      	b.n	800deb0 <_strtod_l+0x8b8>
 800def2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800def6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800defa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800defe:	f04f 3aff 	mov.w	sl, #4294967295
 800df02:	e7d5      	b.n	800deb0 <_strtod_l+0x8b8>
 800df04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df06:	ea13 0f0a 	tst.w	r3, sl
 800df0a:	e7e1      	b.n	800ded0 <_strtod_l+0x8d8>
 800df0c:	f7ff fb56 	bl	800d5bc <sulp>
 800df10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df14:	ec53 2b10 	vmov	r2, r3, d0
 800df18:	f7f2 f9be 	bl	8000298 <__aeabi_dsub>
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	4682      	mov	sl, r0
 800df22:	468b      	mov	fp, r1
 800df24:	f7f2 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d0c1      	beq.n	800deb0 <_strtod_l+0x8b8>
 800df2c:	e619      	b.n	800db62 <_strtod_l+0x56a>
 800df2e:	4641      	mov	r1, r8
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff facd 	bl	800d4d0 <__ratio>
 800df36:	ec57 6b10 	vmov	r6, r7, d0
 800df3a:	2200      	movs	r2, #0
 800df3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df40:	4630      	mov	r0, r6
 800df42:	4639      	mov	r1, r7
 800df44:	f7f2 fddc 	bl	8000b00 <__aeabi_dcmple>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d06f      	beq.n	800e02c <_strtod_l+0xa34>
 800df4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d17a      	bne.n	800e048 <_strtod_l+0xa50>
 800df52:	f1ba 0f00 	cmp.w	sl, #0
 800df56:	d158      	bne.n	800e00a <_strtod_l+0xa12>
 800df58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d15a      	bne.n	800e018 <_strtod_l+0xa20>
 800df62:	4b64      	ldr	r3, [pc, #400]	@ (800e0f4 <_strtod_l+0xafc>)
 800df64:	2200      	movs	r2, #0
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fdbf 	bl	8000aec <__aeabi_dcmplt>
 800df6e:	2800      	cmp	r0, #0
 800df70:	d159      	bne.n	800e026 <_strtod_l+0xa2e>
 800df72:	4630      	mov	r0, r6
 800df74:	4639      	mov	r1, r7
 800df76:	4b60      	ldr	r3, [pc, #384]	@ (800e0f8 <_strtod_l+0xb00>)
 800df78:	2200      	movs	r2, #0
 800df7a:	f7f2 fb45 	bl	8000608 <__aeabi_dmul>
 800df7e:	4606      	mov	r6, r0
 800df80:	460f      	mov	r7, r1
 800df82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800df86:	9606      	str	r6, [sp, #24]
 800df88:	9307      	str	r3, [sp, #28]
 800df8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df8e:	4d57      	ldr	r5, [pc, #348]	@ (800e0ec <_strtod_l+0xaf4>)
 800df90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df96:	401d      	ands	r5, r3
 800df98:	4b58      	ldr	r3, [pc, #352]	@ (800e0fc <_strtod_l+0xb04>)
 800df9a:	429d      	cmp	r5, r3
 800df9c:	f040 80b2 	bne.w	800e104 <_strtod_l+0xb0c>
 800dfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dfa6:	ec4b ab10 	vmov	d0, sl, fp
 800dfaa:	f7ff f9c9 	bl	800d340 <__ulp>
 800dfae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dfb2:	ec51 0b10 	vmov	r0, r1, d0
 800dfb6:	f7f2 fb27 	bl	8000608 <__aeabi_dmul>
 800dfba:	4652      	mov	r2, sl
 800dfbc:	465b      	mov	r3, fp
 800dfbe:	f7f2 f96d 	bl	800029c <__adddf3>
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4949      	ldr	r1, [pc, #292]	@ (800e0ec <_strtod_l+0xaf4>)
 800dfc6:	4a4e      	ldr	r2, [pc, #312]	@ (800e100 <_strtod_l+0xb08>)
 800dfc8:	4019      	ands	r1, r3
 800dfca:	4291      	cmp	r1, r2
 800dfcc:	4682      	mov	sl, r0
 800dfce:	d942      	bls.n	800e056 <_strtod_l+0xa5e>
 800dfd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfd2:	4b47      	ldr	r3, [pc, #284]	@ (800e0f0 <_strtod_l+0xaf8>)
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d103      	bne.n	800dfe0 <_strtod_l+0x9e8>
 800dfd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfda:	3301      	adds	r3, #1
 800dfdc:	f43f ad2b 	beq.w	800da36 <_strtod_l+0x43e>
 800dfe0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e0f0 <_strtod_l+0xaf8>
 800dfe4:	f04f 3aff 	mov.w	sl, #4294967295
 800dfe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfea:	9805      	ldr	r0, [sp, #20]
 800dfec:	f7fe fe74 	bl	800ccd8 <_Bfree>
 800dff0:	9805      	ldr	r0, [sp, #20]
 800dff2:	4649      	mov	r1, r9
 800dff4:	f7fe fe70 	bl	800ccd8 <_Bfree>
 800dff8:	9805      	ldr	r0, [sp, #20]
 800dffa:	4641      	mov	r1, r8
 800dffc:	f7fe fe6c 	bl	800ccd8 <_Bfree>
 800e000:	9805      	ldr	r0, [sp, #20]
 800e002:	4621      	mov	r1, r4
 800e004:	f7fe fe68 	bl	800ccd8 <_Bfree>
 800e008:	e618      	b.n	800dc3c <_strtod_l+0x644>
 800e00a:	f1ba 0f01 	cmp.w	sl, #1
 800e00e:	d103      	bne.n	800e018 <_strtod_l+0xa20>
 800e010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e012:	2b00      	cmp	r3, #0
 800e014:	f43f ada5 	beq.w	800db62 <_strtod_l+0x56a>
 800e018:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e0c8 <_strtod_l+0xad0>
 800e01c:	4f35      	ldr	r7, [pc, #212]	@ (800e0f4 <_strtod_l+0xafc>)
 800e01e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e022:	2600      	movs	r6, #0
 800e024:	e7b1      	b.n	800df8a <_strtod_l+0x992>
 800e026:	4f34      	ldr	r7, [pc, #208]	@ (800e0f8 <_strtod_l+0xb00>)
 800e028:	2600      	movs	r6, #0
 800e02a:	e7aa      	b.n	800df82 <_strtod_l+0x98a>
 800e02c:	4b32      	ldr	r3, [pc, #200]	@ (800e0f8 <_strtod_l+0xb00>)
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	2200      	movs	r2, #0
 800e034:	f7f2 fae8 	bl	8000608 <__aeabi_dmul>
 800e038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e03a:	4606      	mov	r6, r0
 800e03c:	460f      	mov	r7, r1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d09f      	beq.n	800df82 <_strtod_l+0x98a>
 800e042:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e046:	e7a0      	b.n	800df8a <_strtod_l+0x992>
 800e048:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e0d0 <_strtod_l+0xad8>
 800e04c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e050:	ec57 6b17 	vmov	r6, r7, d7
 800e054:	e799      	b.n	800df8a <_strtod_l+0x992>
 800e056:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e05a:	9b08      	ldr	r3, [sp, #32]
 800e05c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1c1      	bne.n	800dfe8 <_strtod_l+0x9f0>
 800e064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e068:	0d1b      	lsrs	r3, r3, #20
 800e06a:	051b      	lsls	r3, r3, #20
 800e06c:	429d      	cmp	r5, r3
 800e06e:	d1bb      	bne.n	800dfe8 <_strtod_l+0x9f0>
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	f7f2 fe28 	bl	8000cc8 <__aeabi_d2lz>
 800e078:	f7f2 fa98 	bl	80005ac <__aeabi_l2d>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	4630      	mov	r0, r6
 800e082:	4639      	mov	r1, r7
 800e084:	f7f2 f908 	bl	8000298 <__aeabi_dsub>
 800e088:	460b      	mov	r3, r1
 800e08a:	4602      	mov	r2, r0
 800e08c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e090:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e096:	ea46 060a 	orr.w	r6, r6, sl
 800e09a:	431e      	orrs	r6, r3
 800e09c:	d06f      	beq.n	800e17e <_strtod_l+0xb86>
 800e09e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e0d8 <_strtod_l+0xae0>)
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	f7f2 fd22 	bl	8000aec <__aeabi_dcmplt>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	f47f accf 	bne.w	800da4c <_strtod_l+0x454>
 800e0ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800e0e0 <_strtod_l+0xae8>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0b8:	f7f2 fd36 	bl	8000b28 <__aeabi_dcmpgt>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d093      	beq.n	800dfe8 <_strtod_l+0x9f0>
 800e0c0:	e4c4      	b.n	800da4c <_strtod_l+0x454>
 800e0c2:	bf00      	nop
 800e0c4:	f3af 8000 	nop.w
 800e0c8:	00000000 	.word	0x00000000
 800e0cc:	bff00000 	.word	0xbff00000
 800e0d0:	00000000 	.word	0x00000000
 800e0d4:	3ff00000 	.word	0x3ff00000
 800e0d8:	94a03595 	.word	0x94a03595
 800e0dc:	3fdfffff 	.word	0x3fdfffff
 800e0e0:	35afe535 	.word	0x35afe535
 800e0e4:	3fe00000 	.word	0x3fe00000
 800e0e8:	000fffff 	.word	0x000fffff
 800e0ec:	7ff00000 	.word	0x7ff00000
 800e0f0:	7fefffff 	.word	0x7fefffff
 800e0f4:	3ff00000 	.word	0x3ff00000
 800e0f8:	3fe00000 	.word	0x3fe00000
 800e0fc:	7fe00000 	.word	0x7fe00000
 800e100:	7c9fffff 	.word	0x7c9fffff
 800e104:	9b08      	ldr	r3, [sp, #32]
 800e106:	b323      	cbz	r3, 800e152 <_strtod_l+0xb5a>
 800e108:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e10c:	d821      	bhi.n	800e152 <_strtod_l+0xb5a>
 800e10e:	a328      	add	r3, pc, #160	@ (adr r3, 800e1b0 <_strtod_l+0xbb8>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	4630      	mov	r0, r6
 800e116:	4639      	mov	r1, r7
 800e118:	f7f2 fcf2 	bl	8000b00 <__aeabi_dcmple>
 800e11c:	b1a0      	cbz	r0, 800e148 <_strtod_l+0xb50>
 800e11e:	4639      	mov	r1, r7
 800e120:	4630      	mov	r0, r6
 800e122:	f7f2 fd49 	bl	8000bb8 <__aeabi_d2uiz>
 800e126:	2801      	cmp	r0, #1
 800e128:	bf38      	it	cc
 800e12a:	2001      	movcc	r0, #1
 800e12c:	f7f2 f9f2 	bl	8000514 <__aeabi_ui2d>
 800e130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e132:	4606      	mov	r6, r0
 800e134:	460f      	mov	r7, r1
 800e136:	b9fb      	cbnz	r3, 800e178 <_strtod_l+0xb80>
 800e138:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e13c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e13e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e140:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e144:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e148:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e14a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e14e:	1b5b      	subs	r3, r3, r5
 800e150:	9311      	str	r3, [sp, #68]	@ 0x44
 800e152:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e156:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e15a:	f7ff f8f1 	bl	800d340 <__ulp>
 800e15e:	4650      	mov	r0, sl
 800e160:	ec53 2b10 	vmov	r2, r3, d0
 800e164:	4659      	mov	r1, fp
 800e166:	f7f2 fa4f 	bl	8000608 <__aeabi_dmul>
 800e16a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e16e:	f7f2 f895 	bl	800029c <__adddf3>
 800e172:	4682      	mov	sl, r0
 800e174:	468b      	mov	fp, r1
 800e176:	e770      	b.n	800e05a <_strtod_l+0xa62>
 800e178:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e17c:	e7e0      	b.n	800e140 <_strtod_l+0xb48>
 800e17e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1b8 <_strtod_l+0xbc0>)
 800e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e184:	f7f2 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800e188:	e798      	b.n	800e0bc <_strtod_l+0xac4>
 800e18a:	2300      	movs	r3, #0
 800e18c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e18e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e190:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e192:	6013      	str	r3, [r2, #0]
 800e194:	f7ff ba6d 	b.w	800d672 <_strtod_l+0x7a>
 800e198:	2a65      	cmp	r2, #101	@ 0x65
 800e19a:	f43f ab66 	beq.w	800d86a <_strtod_l+0x272>
 800e19e:	2a45      	cmp	r2, #69	@ 0x45
 800e1a0:	f43f ab63 	beq.w	800d86a <_strtod_l+0x272>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f7ff bb9e 	b.w	800d8e6 <_strtod_l+0x2ee>
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w
 800e1b0:	ffc00000 	.word	0xffc00000
 800e1b4:	41dfffff 	.word	0x41dfffff
 800e1b8:	94a03595 	.word	0x94a03595
 800e1bc:	3fcfffff 	.word	0x3fcfffff

0800e1c0 <_strtod_r>:
 800e1c0:	4b01      	ldr	r3, [pc, #4]	@ (800e1c8 <_strtod_r+0x8>)
 800e1c2:	f7ff ba19 	b.w	800d5f8 <_strtod_l>
 800e1c6:	bf00      	nop
 800e1c8:	2000015c 	.word	0x2000015c

0800e1cc <_strtol_l.constprop.0>:
 800e1cc:	2b24      	cmp	r3, #36	@ 0x24
 800e1ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d2:	4686      	mov	lr, r0
 800e1d4:	4690      	mov	r8, r2
 800e1d6:	d801      	bhi.n	800e1dc <_strtol_l.constprop.0+0x10>
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d106      	bne.n	800e1ea <_strtol_l.constprop.0+0x1e>
 800e1dc:	f7fd fdbc 	bl	800bd58 <__errno>
 800e1e0:	2316      	movs	r3, #22
 800e1e2:	6003      	str	r3, [r0, #0]
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ea:	4834      	ldr	r0, [pc, #208]	@ (800e2bc <_strtol_l.constprop.0+0xf0>)
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	462a      	mov	r2, r5
 800e1f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1f4:	5d06      	ldrb	r6, [r0, r4]
 800e1f6:	f016 0608 	ands.w	r6, r6, #8
 800e1fa:	d1f8      	bne.n	800e1ee <_strtol_l.constprop.0+0x22>
 800e1fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e1fe:	d12d      	bne.n	800e25c <_strtol_l.constprop.0+0x90>
 800e200:	782c      	ldrb	r4, [r5, #0]
 800e202:	2601      	movs	r6, #1
 800e204:	1c95      	adds	r5, r2, #2
 800e206:	f033 0210 	bics.w	r2, r3, #16
 800e20a:	d109      	bne.n	800e220 <_strtol_l.constprop.0+0x54>
 800e20c:	2c30      	cmp	r4, #48	@ 0x30
 800e20e:	d12a      	bne.n	800e266 <_strtol_l.constprop.0+0x9a>
 800e210:	782a      	ldrb	r2, [r5, #0]
 800e212:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e216:	2a58      	cmp	r2, #88	@ 0x58
 800e218:	d125      	bne.n	800e266 <_strtol_l.constprop.0+0x9a>
 800e21a:	786c      	ldrb	r4, [r5, #1]
 800e21c:	2310      	movs	r3, #16
 800e21e:	3502      	adds	r5, #2
 800e220:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e224:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e228:	2200      	movs	r2, #0
 800e22a:	fbbc f9f3 	udiv	r9, ip, r3
 800e22e:	4610      	mov	r0, r2
 800e230:	fb03 ca19 	mls	sl, r3, r9, ip
 800e234:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e238:	2f09      	cmp	r7, #9
 800e23a:	d81b      	bhi.n	800e274 <_strtol_l.constprop.0+0xa8>
 800e23c:	463c      	mov	r4, r7
 800e23e:	42a3      	cmp	r3, r4
 800e240:	dd27      	ble.n	800e292 <_strtol_l.constprop.0+0xc6>
 800e242:	1c57      	adds	r7, r2, #1
 800e244:	d007      	beq.n	800e256 <_strtol_l.constprop.0+0x8a>
 800e246:	4581      	cmp	r9, r0
 800e248:	d320      	bcc.n	800e28c <_strtol_l.constprop.0+0xc0>
 800e24a:	d101      	bne.n	800e250 <_strtol_l.constprop.0+0x84>
 800e24c:	45a2      	cmp	sl, r4
 800e24e:	db1d      	blt.n	800e28c <_strtol_l.constprop.0+0xc0>
 800e250:	fb00 4003 	mla	r0, r0, r3, r4
 800e254:	2201      	movs	r2, #1
 800e256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e25a:	e7eb      	b.n	800e234 <_strtol_l.constprop.0+0x68>
 800e25c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e25e:	bf04      	itt	eq
 800e260:	782c      	ldrbeq	r4, [r5, #0]
 800e262:	1c95      	addeq	r5, r2, #2
 800e264:	e7cf      	b.n	800e206 <_strtol_l.constprop.0+0x3a>
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1da      	bne.n	800e220 <_strtol_l.constprop.0+0x54>
 800e26a:	2c30      	cmp	r4, #48	@ 0x30
 800e26c:	bf0c      	ite	eq
 800e26e:	2308      	moveq	r3, #8
 800e270:	230a      	movne	r3, #10
 800e272:	e7d5      	b.n	800e220 <_strtol_l.constprop.0+0x54>
 800e274:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e278:	2f19      	cmp	r7, #25
 800e27a:	d801      	bhi.n	800e280 <_strtol_l.constprop.0+0xb4>
 800e27c:	3c37      	subs	r4, #55	@ 0x37
 800e27e:	e7de      	b.n	800e23e <_strtol_l.constprop.0+0x72>
 800e280:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e284:	2f19      	cmp	r7, #25
 800e286:	d804      	bhi.n	800e292 <_strtol_l.constprop.0+0xc6>
 800e288:	3c57      	subs	r4, #87	@ 0x57
 800e28a:	e7d8      	b.n	800e23e <_strtol_l.constprop.0+0x72>
 800e28c:	f04f 32ff 	mov.w	r2, #4294967295
 800e290:	e7e1      	b.n	800e256 <_strtol_l.constprop.0+0x8a>
 800e292:	1c53      	adds	r3, r2, #1
 800e294:	d108      	bne.n	800e2a8 <_strtol_l.constprop.0+0xdc>
 800e296:	2322      	movs	r3, #34	@ 0x22
 800e298:	f8ce 3000 	str.w	r3, [lr]
 800e29c:	4660      	mov	r0, ip
 800e29e:	f1b8 0f00 	cmp.w	r8, #0
 800e2a2:	d0a0      	beq.n	800e1e6 <_strtol_l.constprop.0+0x1a>
 800e2a4:	1e69      	subs	r1, r5, #1
 800e2a6:	e006      	b.n	800e2b6 <_strtol_l.constprop.0+0xea>
 800e2a8:	b106      	cbz	r6, 800e2ac <_strtol_l.constprop.0+0xe0>
 800e2aa:	4240      	negs	r0, r0
 800e2ac:	f1b8 0f00 	cmp.w	r8, #0
 800e2b0:	d099      	beq.n	800e1e6 <_strtol_l.constprop.0+0x1a>
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	d1f6      	bne.n	800e2a4 <_strtol_l.constprop.0+0xd8>
 800e2b6:	f8c8 1000 	str.w	r1, [r8]
 800e2ba:	e794      	b.n	800e1e6 <_strtol_l.constprop.0+0x1a>
 800e2bc:	08010679 	.word	0x08010679

0800e2c0 <_strtol_r>:
 800e2c0:	f7ff bf84 	b.w	800e1cc <_strtol_l.constprop.0>

0800e2c4 <__ssputs_r>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	688e      	ldr	r6, [r1, #8]
 800e2ca:	461f      	mov	r7, r3
 800e2cc:	42be      	cmp	r6, r7
 800e2ce:	680b      	ldr	r3, [r1, #0]
 800e2d0:	4682      	mov	sl, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	4690      	mov	r8, r2
 800e2d6:	d82d      	bhi.n	800e334 <__ssputs_r+0x70>
 800e2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2e0:	d026      	beq.n	800e330 <__ssputs_r+0x6c>
 800e2e2:	6965      	ldr	r5, [r4, #20]
 800e2e4:	6909      	ldr	r1, [r1, #16]
 800e2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ea:	eba3 0901 	sub.w	r9, r3, r1
 800e2ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2f2:	1c7b      	adds	r3, r7, #1
 800e2f4:	444b      	add	r3, r9
 800e2f6:	106d      	asrs	r5, r5, #1
 800e2f8:	429d      	cmp	r5, r3
 800e2fa:	bf38      	it	cc
 800e2fc:	461d      	movcc	r5, r3
 800e2fe:	0553      	lsls	r3, r2, #21
 800e300:	d527      	bpl.n	800e352 <__ssputs_r+0x8e>
 800e302:	4629      	mov	r1, r5
 800e304:	f7fe fc1c 	bl	800cb40 <_malloc_r>
 800e308:	4606      	mov	r6, r0
 800e30a:	b360      	cbz	r0, 800e366 <__ssputs_r+0xa2>
 800e30c:	6921      	ldr	r1, [r4, #16]
 800e30e:	464a      	mov	r2, r9
 800e310:	f000 fa18 	bl	800e744 <memcpy>
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e31e:	81a3      	strh	r3, [r4, #12]
 800e320:	6126      	str	r6, [r4, #16]
 800e322:	6165      	str	r5, [r4, #20]
 800e324:	444e      	add	r6, r9
 800e326:	eba5 0509 	sub.w	r5, r5, r9
 800e32a:	6026      	str	r6, [r4, #0]
 800e32c:	60a5      	str	r5, [r4, #8]
 800e32e:	463e      	mov	r6, r7
 800e330:	42be      	cmp	r6, r7
 800e332:	d900      	bls.n	800e336 <__ssputs_r+0x72>
 800e334:	463e      	mov	r6, r7
 800e336:	6820      	ldr	r0, [r4, #0]
 800e338:	4632      	mov	r2, r6
 800e33a:	4641      	mov	r1, r8
 800e33c:	f000 f9c6 	bl	800e6cc <memmove>
 800e340:	68a3      	ldr	r3, [r4, #8]
 800e342:	1b9b      	subs	r3, r3, r6
 800e344:	60a3      	str	r3, [r4, #8]
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	4433      	add	r3, r6
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	2000      	movs	r0, #0
 800e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e352:	462a      	mov	r2, r5
 800e354:	f000 fd89 	bl	800ee6a <_realloc_r>
 800e358:	4606      	mov	r6, r0
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d1e0      	bne.n	800e320 <__ssputs_r+0x5c>
 800e35e:	6921      	ldr	r1, [r4, #16]
 800e360:	4650      	mov	r0, sl
 800e362:	f7fe fb79 	bl	800ca58 <_free_r>
 800e366:	230c      	movs	r3, #12
 800e368:	f8ca 3000 	str.w	r3, [sl]
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e372:	81a3      	strh	r3, [r4, #12]
 800e374:	f04f 30ff 	mov.w	r0, #4294967295
 800e378:	e7e9      	b.n	800e34e <__ssputs_r+0x8a>
	...

0800e37c <_svfiprintf_r>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	4698      	mov	r8, r3
 800e382:	898b      	ldrh	r3, [r1, #12]
 800e384:	061b      	lsls	r3, r3, #24
 800e386:	b09d      	sub	sp, #116	@ 0x74
 800e388:	4607      	mov	r7, r0
 800e38a:	460d      	mov	r5, r1
 800e38c:	4614      	mov	r4, r2
 800e38e:	d510      	bpl.n	800e3b2 <_svfiprintf_r+0x36>
 800e390:	690b      	ldr	r3, [r1, #16]
 800e392:	b973      	cbnz	r3, 800e3b2 <_svfiprintf_r+0x36>
 800e394:	2140      	movs	r1, #64	@ 0x40
 800e396:	f7fe fbd3 	bl	800cb40 <_malloc_r>
 800e39a:	6028      	str	r0, [r5, #0]
 800e39c:	6128      	str	r0, [r5, #16]
 800e39e:	b930      	cbnz	r0, 800e3ae <_svfiprintf_r+0x32>
 800e3a0:	230c      	movs	r3, #12
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	b01d      	add	sp, #116	@ 0x74
 800e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ae:	2340      	movs	r3, #64	@ 0x40
 800e3b0:	616b      	str	r3, [r5, #20]
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3b6:	2320      	movs	r3, #32
 800e3b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3c0:	2330      	movs	r3, #48	@ 0x30
 800e3c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e560 <_svfiprintf_r+0x1e4>
 800e3c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3ca:	f04f 0901 	mov.w	r9, #1
 800e3ce:	4623      	mov	r3, r4
 800e3d0:	469a      	mov	sl, r3
 800e3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d6:	b10a      	cbz	r2, 800e3dc <_svfiprintf_r+0x60>
 800e3d8:	2a25      	cmp	r2, #37	@ 0x25
 800e3da:	d1f9      	bne.n	800e3d0 <_svfiprintf_r+0x54>
 800e3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e3e0:	d00b      	beq.n	800e3fa <_svfiprintf_r+0x7e>
 800e3e2:	465b      	mov	r3, fp
 800e3e4:	4622      	mov	r2, r4
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f7ff ff6b 	bl	800e2c4 <__ssputs_r>
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	f000 80a7 	beq.w	800e542 <_svfiprintf_r+0x1c6>
 800e3f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f6:	445a      	add	r2, fp
 800e3f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 809f 	beq.w	800e542 <_svfiprintf_r+0x1c6>
 800e404:	2300      	movs	r3, #0
 800e406:	f04f 32ff 	mov.w	r2, #4294967295
 800e40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e40e:	f10a 0a01 	add.w	sl, sl, #1
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	9307      	str	r3, [sp, #28]
 800e416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e41a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e41c:	4654      	mov	r4, sl
 800e41e:	2205      	movs	r2, #5
 800e420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e424:	484e      	ldr	r0, [pc, #312]	@ (800e560 <_svfiprintf_r+0x1e4>)
 800e426:	f7f1 fedb 	bl	80001e0 <memchr>
 800e42a:	9a04      	ldr	r2, [sp, #16]
 800e42c:	b9d8      	cbnz	r0, 800e466 <_svfiprintf_r+0xea>
 800e42e:	06d0      	lsls	r0, r2, #27
 800e430:	bf44      	itt	mi
 800e432:	2320      	movmi	r3, #32
 800e434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e438:	0711      	lsls	r1, r2, #28
 800e43a:	bf44      	itt	mi
 800e43c:	232b      	movmi	r3, #43	@ 0x2b
 800e43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e442:	f89a 3000 	ldrb.w	r3, [sl]
 800e446:	2b2a      	cmp	r3, #42	@ 0x2a
 800e448:	d015      	beq.n	800e476 <_svfiprintf_r+0xfa>
 800e44a:	9a07      	ldr	r2, [sp, #28]
 800e44c:	4654      	mov	r4, sl
 800e44e:	2000      	movs	r0, #0
 800e450:	f04f 0c0a 	mov.w	ip, #10
 800e454:	4621      	mov	r1, r4
 800e456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e45a:	3b30      	subs	r3, #48	@ 0x30
 800e45c:	2b09      	cmp	r3, #9
 800e45e:	d94b      	bls.n	800e4f8 <_svfiprintf_r+0x17c>
 800e460:	b1b0      	cbz	r0, 800e490 <_svfiprintf_r+0x114>
 800e462:	9207      	str	r2, [sp, #28]
 800e464:	e014      	b.n	800e490 <_svfiprintf_r+0x114>
 800e466:	eba0 0308 	sub.w	r3, r0, r8
 800e46a:	fa09 f303 	lsl.w	r3, r9, r3
 800e46e:	4313      	orrs	r3, r2
 800e470:	9304      	str	r3, [sp, #16]
 800e472:	46a2      	mov	sl, r4
 800e474:	e7d2      	b.n	800e41c <_svfiprintf_r+0xa0>
 800e476:	9b03      	ldr	r3, [sp, #12]
 800e478:	1d19      	adds	r1, r3, #4
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	9103      	str	r1, [sp, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	bfbb      	ittet	lt
 800e482:	425b      	neglt	r3, r3
 800e484:	f042 0202 	orrlt.w	r2, r2, #2
 800e488:	9307      	strge	r3, [sp, #28]
 800e48a:	9307      	strlt	r3, [sp, #28]
 800e48c:	bfb8      	it	lt
 800e48e:	9204      	strlt	r2, [sp, #16]
 800e490:	7823      	ldrb	r3, [r4, #0]
 800e492:	2b2e      	cmp	r3, #46	@ 0x2e
 800e494:	d10a      	bne.n	800e4ac <_svfiprintf_r+0x130>
 800e496:	7863      	ldrb	r3, [r4, #1]
 800e498:	2b2a      	cmp	r3, #42	@ 0x2a
 800e49a:	d132      	bne.n	800e502 <_svfiprintf_r+0x186>
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	1d1a      	adds	r2, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	9203      	str	r2, [sp, #12]
 800e4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4a8:	3402      	adds	r4, #2
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e570 <_svfiprintf_r+0x1f4>
 800e4b0:	7821      	ldrb	r1, [r4, #0]
 800e4b2:	2203      	movs	r2, #3
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	f7f1 fe93 	bl	80001e0 <memchr>
 800e4ba:	b138      	cbz	r0, 800e4cc <_svfiprintf_r+0x150>
 800e4bc:	9b04      	ldr	r3, [sp, #16]
 800e4be:	eba0 000a 	sub.w	r0, r0, sl
 800e4c2:	2240      	movs	r2, #64	@ 0x40
 800e4c4:	4082      	lsls	r2, r0
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	3401      	adds	r4, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d0:	4824      	ldr	r0, [pc, #144]	@ (800e564 <_svfiprintf_r+0x1e8>)
 800e4d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4d6:	2206      	movs	r2, #6
 800e4d8:	f7f1 fe82 	bl	80001e0 <memchr>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d036      	beq.n	800e54e <_svfiprintf_r+0x1d2>
 800e4e0:	4b21      	ldr	r3, [pc, #132]	@ (800e568 <_svfiprintf_r+0x1ec>)
 800e4e2:	bb1b      	cbnz	r3, 800e52c <_svfiprintf_r+0x1b0>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	3307      	adds	r3, #7
 800e4e8:	f023 0307 	bic.w	r3, r3, #7
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	9303      	str	r3, [sp, #12]
 800e4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f2:	4433      	add	r3, r6
 800e4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4f6:	e76a      	b.n	800e3ce <_svfiprintf_r+0x52>
 800e4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	2001      	movs	r0, #1
 800e500:	e7a8      	b.n	800e454 <_svfiprintf_r+0xd8>
 800e502:	2300      	movs	r3, #0
 800e504:	3401      	adds	r4, #1
 800e506:	9305      	str	r3, [sp, #20]
 800e508:	4619      	mov	r1, r3
 800e50a:	f04f 0c0a 	mov.w	ip, #10
 800e50e:	4620      	mov	r0, r4
 800e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e514:	3a30      	subs	r2, #48	@ 0x30
 800e516:	2a09      	cmp	r2, #9
 800e518:	d903      	bls.n	800e522 <_svfiprintf_r+0x1a6>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0c6      	beq.n	800e4ac <_svfiprintf_r+0x130>
 800e51e:	9105      	str	r1, [sp, #20]
 800e520:	e7c4      	b.n	800e4ac <_svfiprintf_r+0x130>
 800e522:	fb0c 2101 	mla	r1, ip, r1, r2
 800e526:	4604      	mov	r4, r0
 800e528:	2301      	movs	r3, #1
 800e52a:	e7f0      	b.n	800e50e <_svfiprintf_r+0x192>
 800e52c:	ab03      	add	r3, sp, #12
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	462a      	mov	r2, r5
 800e532:	4b0e      	ldr	r3, [pc, #56]	@ (800e56c <_svfiprintf_r+0x1f0>)
 800e534:	a904      	add	r1, sp, #16
 800e536:	4638      	mov	r0, r7
 800e538:	f7fc fcca 	bl	800aed0 <_printf_float>
 800e53c:	1c42      	adds	r2, r0, #1
 800e53e:	4606      	mov	r6, r0
 800e540:	d1d6      	bne.n	800e4f0 <_svfiprintf_r+0x174>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	065b      	lsls	r3, r3, #25
 800e546:	f53f af2d 	bmi.w	800e3a4 <_svfiprintf_r+0x28>
 800e54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e54c:	e72c      	b.n	800e3a8 <_svfiprintf_r+0x2c>
 800e54e:	ab03      	add	r3, sp, #12
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	462a      	mov	r2, r5
 800e554:	4b05      	ldr	r3, [pc, #20]	@ (800e56c <_svfiprintf_r+0x1f0>)
 800e556:	a904      	add	r1, sp, #16
 800e558:	4638      	mov	r0, r7
 800e55a:	f7fc ff51 	bl	800b400 <_printf_i>
 800e55e:	e7ed      	b.n	800e53c <_svfiprintf_r+0x1c0>
 800e560:	08010779 	.word	0x08010779
 800e564:	08010783 	.word	0x08010783
 800e568:	0800aed1 	.word	0x0800aed1
 800e56c:	0800e2c5 	.word	0x0800e2c5
 800e570:	0801077f 	.word	0x0801077f

0800e574 <__sflush_r>:
 800e574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	0716      	lsls	r6, r2, #28
 800e57e:	4605      	mov	r5, r0
 800e580:	460c      	mov	r4, r1
 800e582:	d454      	bmi.n	800e62e <__sflush_r+0xba>
 800e584:	684b      	ldr	r3, [r1, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	dc02      	bgt.n	800e590 <__sflush_r+0x1c>
 800e58a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd48      	ble.n	800e622 <__sflush_r+0xae>
 800e590:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e592:	2e00      	cmp	r6, #0
 800e594:	d045      	beq.n	800e622 <__sflush_r+0xae>
 800e596:	2300      	movs	r3, #0
 800e598:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e59c:	682f      	ldr	r7, [r5, #0]
 800e59e:	6a21      	ldr	r1, [r4, #32]
 800e5a0:	602b      	str	r3, [r5, #0]
 800e5a2:	d030      	beq.n	800e606 <__sflush_r+0x92>
 800e5a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	0759      	lsls	r1, r3, #29
 800e5aa:	d505      	bpl.n	800e5b8 <__sflush_r+0x44>
 800e5ac:	6863      	ldr	r3, [r4, #4]
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5b2:	b10b      	cbz	r3, 800e5b8 <__sflush_r+0x44>
 800e5b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5b6:	1ad2      	subs	r2, r2, r3
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5bc:	6a21      	ldr	r1, [r4, #32]
 800e5be:	4628      	mov	r0, r5
 800e5c0:	47b0      	blx	r6
 800e5c2:	1c43      	adds	r3, r0, #1
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	d106      	bne.n	800e5d6 <__sflush_r+0x62>
 800e5c8:	6829      	ldr	r1, [r5, #0]
 800e5ca:	291d      	cmp	r1, #29
 800e5cc:	d82b      	bhi.n	800e626 <__sflush_r+0xb2>
 800e5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e678 <__sflush_r+0x104>)
 800e5d0:	410a      	asrs	r2, r1
 800e5d2:	07d6      	lsls	r6, r2, #31
 800e5d4:	d427      	bmi.n	800e626 <__sflush_r+0xb2>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	6062      	str	r2, [r4, #4]
 800e5da:	04d9      	lsls	r1, r3, #19
 800e5dc:	6922      	ldr	r2, [r4, #16]
 800e5de:	6022      	str	r2, [r4, #0]
 800e5e0:	d504      	bpl.n	800e5ec <__sflush_r+0x78>
 800e5e2:	1c42      	adds	r2, r0, #1
 800e5e4:	d101      	bne.n	800e5ea <__sflush_r+0x76>
 800e5e6:	682b      	ldr	r3, [r5, #0]
 800e5e8:	b903      	cbnz	r3, 800e5ec <__sflush_r+0x78>
 800e5ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5ee:	602f      	str	r7, [r5, #0]
 800e5f0:	b1b9      	cbz	r1, 800e622 <__sflush_r+0xae>
 800e5f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5f6:	4299      	cmp	r1, r3
 800e5f8:	d002      	beq.n	800e600 <__sflush_r+0x8c>
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f7fe fa2c 	bl	800ca58 <_free_r>
 800e600:	2300      	movs	r3, #0
 800e602:	6363      	str	r3, [r4, #52]	@ 0x34
 800e604:	e00d      	b.n	800e622 <__sflush_r+0xae>
 800e606:	2301      	movs	r3, #1
 800e608:	4628      	mov	r0, r5
 800e60a:	47b0      	blx	r6
 800e60c:	4602      	mov	r2, r0
 800e60e:	1c50      	adds	r0, r2, #1
 800e610:	d1c9      	bne.n	800e5a6 <__sflush_r+0x32>
 800e612:	682b      	ldr	r3, [r5, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d0c6      	beq.n	800e5a6 <__sflush_r+0x32>
 800e618:	2b1d      	cmp	r3, #29
 800e61a:	d001      	beq.n	800e620 <__sflush_r+0xac>
 800e61c:	2b16      	cmp	r3, #22
 800e61e:	d11e      	bne.n	800e65e <__sflush_r+0xea>
 800e620:	602f      	str	r7, [r5, #0]
 800e622:	2000      	movs	r0, #0
 800e624:	e022      	b.n	800e66c <__sflush_r+0xf8>
 800e626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e62a:	b21b      	sxth	r3, r3
 800e62c:	e01b      	b.n	800e666 <__sflush_r+0xf2>
 800e62e:	690f      	ldr	r7, [r1, #16]
 800e630:	2f00      	cmp	r7, #0
 800e632:	d0f6      	beq.n	800e622 <__sflush_r+0xae>
 800e634:	0793      	lsls	r3, r2, #30
 800e636:	680e      	ldr	r6, [r1, #0]
 800e638:	bf08      	it	eq
 800e63a:	694b      	ldreq	r3, [r1, #20]
 800e63c:	600f      	str	r7, [r1, #0]
 800e63e:	bf18      	it	ne
 800e640:	2300      	movne	r3, #0
 800e642:	eba6 0807 	sub.w	r8, r6, r7
 800e646:	608b      	str	r3, [r1, #8]
 800e648:	f1b8 0f00 	cmp.w	r8, #0
 800e64c:	dde9      	ble.n	800e622 <__sflush_r+0xae>
 800e64e:	6a21      	ldr	r1, [r4, #32]
 800e650:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e652:	4643      	mov	r3, r8
 800e654:	463a      	mov	r2, r7
 800e656:	4628      	mov	r0, r5
 800e658:	47b0      	blx	r6
 800e65a:	2800      	cmp	r0, #0
 800e65c:	dc08      	bgt.n	800e670 <__sflush_r+0xfc>
 800e65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e666:	81a3      	strh	r3, [r4, #12]
 800e668:	f04f 30ff 	mov.w	r0, #4294967295
 800e66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e670:	4407      	add	r7, r0
 800e672:	eba8 0800 	sub.w	r8, r8, r0
 800e676:	e7e7      	b.n	800e648 <__sflush_r+0xd4>
 800e678:	dfbffffe 	.word	0xdfbffffe

0800e67c <_fflush_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	690b      	ldr	r3, [r1, #16]
 800e680:	4605      	mov	r5, r0
 800e682:	460c      	mov	r4, r1
 800e684:	b913      	cbnz	r3, 800e68c <_fflush_r+0x10>
 800e686:	2500      	movs	r5, #0
 800e688:	4628      	mov	r0, r5
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	b118      	cbz	r0, 800e696 <_fflush_r+0x1a>
 800e68e:	6a03      	ldr	r3, [r0, #32]
 800e690:	b90b      	cbnz	r3, 800e696 <_fflush_r+0x1a>
 800e692:	f7fd fa75 	bl	800bb80 <__sinit>
 800e696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d0f3      	beq.n	800e686 <_fflush_r+0xa>
 800e69e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6a0:	07d0      	lsls	r0, r2, #31
 800e6a2:	d404      	bmi.n	800e6ae <_fflush_r+0x32>
 800e6a4:	0599      	lsls	r1, r3, #22
 800e6a6:	d402      	bmi.n	800e6ae <_fflush_r+0x32>
 800e6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6aa:	f7fd fb80 	bl	800bdae <__retarget_lock_acquire_recursive>
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	f7ff ff5f 	bl	800e574 <__sflush_r>
 800e6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6b8:	07da      	lsls	r2, r3, #31
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	d4e4      	bmi.n	800e688 <_fflush_r+0xc>
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	059b      	lsls	r3, r3, #22
 800e6c2:	d4e1      	bmi.n	800e688 <_fflush_r+0xc>
 800e6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6c6:	f7fd fb73 	bl	800bdb0 <__retarget_lock_release_recursive>
 800e6ca:	e7dd      	b.n	800e688 <_fflush_r+0xc>

0800e6cc <memmove>:
 800e6cc:	4288      	cmp	r0, r1
 800e6ce:	b510      	push	{r4, lr}
 800e6d0:	eb01 0402 	add.w	r4, r1, r2
 800e6d4:	d902      	bls.n	800e6dc <memmove+0x10>
 800e6d6:	4284      	cmp	r4, r0
 800e6d8:	4623      	mov	r3, r4
 800e6da:	d807      	bhi.n	800e6ec <memmove+0x20>
 800e6dc:	1e43      	subs	r3, r0, #1
 800e6de:	42a1      	cmp	r1, r4
 800e6e0:	d008      	beq.n	800e6f4 <memmove+0x28>
 800e6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6ea:	e7f8      	b.n	800e6de <memmove+0x12>
 800e6ec:	4402      	add	r2, r0
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	428a      	cmp	r2, r1
 800e6f2:	d100      	bne.n	800e6f6 <memmove+0x2a>
 800e6f4:	bd10      	pop	{r4, pc}
 800e6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6fe:	e7f7      	b.n	800e6f0 <memmove+0x24>

0800e700 <strncmp>:
 800e700:	b510      	push	{r4, lr}
 800e702:	b16a      	cbz	r2, 800e720 <strncmp+0x20>
 800e704:	3901      	subs	r1, #1
 800e706:	1884      	adds	r4, r0, r2
 800e708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e70c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e710:	429a      	cmp	r2, r3
 800e712:	d103      	bne.n	800e71c <strncmp+0x1c>
 800e714:	42a0      	cmp	r0, r4
 800e716:	d001      	beq.n	800e71c <strncmp+0x1c>
 800e718:	2a00      	cmp	r2, #0
 800e71a:	d1f5      	bne.n	800e708 <strncmp+0x8>
 800e71c:	1ad0      	subs	r0, r2, r3
 800e71e:	bd10      	pop	{r4, pc}
 800e720:	4610      	mov	r0, r2
 800e722:	e7fc      	b.n	800e71e <strncmp+0x1e>

0800e724 <_sbrk_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d06      	ldr	r5, [pc, #24]	@ (800e740 <_sbrk_r+0x1c>)
 800e728:	2300      	movs	r3, #0
 800e72a:	4604      	mov	r4, r0
 800e72c:	4608      	mov	r0, r1
 800e72e:	602b      	str	r3, [r5, #0]
 800e730:	f7f3 fc6c 	bl	800200c <_sbrk>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d102      	bne.n	800e73e <_sbrk_r+0x1a>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	b103      	cbz	r3, 800e73e <_sbrk_r+0x1a>
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	200021f8 	.word	0x200021f8

0800e744 <memcpy>:
 800e744:	440a      	add	r2, r1
 800e746:	4291      	cmp	r1, r2
 800e748:	f100 33ff 	add.w	r3, r0, #4294967295
 800e74c:	d100      	bne.n	800e750 <memcpy+0xc>
 800e74e:	4770      	bx	lr
 800e750:	b510      	push	{r4, lr}
 800e752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e75a:	4291      	cmp	r1, r2
 800e75c:	d1f9      	bne.n	800e752 <memcpy+0xe>
 800e75e:	bd10      	pop	{r4, pc}

0800e760 <nan>:
 800e760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e768 <nan+0x8>
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	00000000 	.word	0x00000000
 800e76c:	7ff80000 	.word	0x7ff80000

0800e770 <__assert_func>:
 800e770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e772:	4614      	mov	r4, r2
 800e774:	461a      	mov	r2, r3
 800e776:	4b09      	ldr	r3, [pc, #36]	@ (800e79c <__assert_func+0x2c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4605      	mov	r5, r0
 800e77c:	68d8      	ldr	r0, [r3, #12]
 800e77e:	b954      	cbnz	r4, 800e796 <__assert_func+0x26>
 800e780:	4b07      	ldr	r3, [pc, #28]	@ (800e7a0 <__assert_func+0x30>)
 800e782:	461c      	mov	r4, r3
 800e784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e788:	9100      	str	r1, [sp, #0]
 800e78a:	462b      	mov	r3, r5
 800e78c:	4905      	ldr	r1, [pc, #20]	@ (800e7a4 <__assert_func+0x34>)
 800e78e:	f000 fba7 	bl	800eee0 <fiprintf>
 800e792:	f000 fbb7 	bl	800ef04 <abort>
 800e796:	4b04      	ldr	r3, [pc, #16]	@ (800e7a8 <__assert_func+0x38>)
 800e798:	e7f4      	b.n	800e784 <__assert_func+0x14>
 800e79a:	bf00      	nop
 800e79c:	2000010c 	.word	0x2000010c
 800e7a0:	080107cd 	.word	0x080107cd
 800e7a4:	0801079f 	.word	0x0801079f
 800e7a8:	08010792 	.word	0x08010792

0800e7ac <_calloc_r>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	fba1 5402 	umull	r5, r4, r1, r2
 800e7b2:	b93c      	cbnz	r4, 800e7c4 <_calloc_r+0x18>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	f7fe f9c3 	bl	800cb40 <_malloc_r>
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	b928      	cbnz	r0, 800e7ca <_calloc_r+0x1e>
 800e7be:	2600      	movs	r6, #0
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}
 800e7c4:	220c      	movs	r2, #12
 800e7c6:	6002      	str	r2, [r0, #0]
 800e7c8:	e7f9      	b.n	800e7be <_calloc_r+0x12>
 800e7ca:	462a      	mov	r2, r5
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	f7fd fa70 	bl	800bcb2 <memset>
 800e7d2:	e7f5      	b.n	800e7c0 <_calloc_r+0x14>

0800e7d4 <rshift>:
 800e7d4:	6903      	ldr	r3, [r0, #16]
 800e7d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7e2:	f100 0414 	add.w	r4, r0, #20
 800e7e6:	dd45      	ble.n	800e874 <rshift+0xa0>
 800e7e8:	f011 011f 	ands.w	r1, r1, #31
 800e7ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7f4:	d10c      	bne.n	800e810 <rshift+0x3c>
 800e7f6:	f100 0710 	add.w	r7, r0, #16
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	42b1      	cmp	r1, r6
 800e7fe:	d334      	bcc.n	800e86a <rshift+0x96>
 800e800:	1a9b      	subs	r3, r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	1eea      	subs	r2, r5, #3
 800e806:	4296      	cmp	r6, r2
 800e808:	bf38      	it	cc
 800e80a:	2300      	movcc	r3, #0
 800e80c:	4423      	add	r3, r4
 800e80e:	e015      	b.n	800e83c <rshift+0x68>
 800e810:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e814:	f1c1 0820 	rsb	r8, r1, #32
 800e818:	40cf      	lsrs	r7, r1
 800e81a:	f105 0e04 	add.w	lr, r5, #4
 800e81e:	46a1      	mov	r9, r4
 800e820:	4576      	cmp	r6, lr
 800e822:	46f4      	mov	ip, lr
 800e824:	d815      	bhi.n	800e852 <rshift+0x7e>
 800e826:	1a9a      	subs	r2, r3, r2
 800e828:	0092      	lsls	r2, r2, #2
 800e82a:	3a04      	subs	r2, #4
 800e82c:	3501      	adds	r5, #1
 800e82e:	42ae      	cmp	r6, r5
 800e830:	bf38      	it	cc
 800e832:	2200      	movcc	r2, #0
 800e834:	18a3      	adds	r3, r4, r2
 800e836:	50a7      	str	r7, [r4, r2]
 800e838:	b107      	cbz	r7, 800e83c <rshift+0x68>
 800e83a:	3304      	adds	r3, #4
 800e83c:	1b1a      	subs	r2, r3, r4
 800e83e:	42a3      	cmp	r3, r4
 800e840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e844:	bf08      	it	eq
 800e846:	2300      	moveq	r3, #0
 800e848:	6102      	str	r2, [r0, #16]
 800e84a:	bf08      	it	eq
 800e84c:	6143      	streq	r3, [r0, #20]
 800e84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e852:	f8dc c000 	ldr.w	ip, [ip]
 800e856:	fa0c fc08 	lsl.w	ip, ip, r8
 800e85a:	ea4c 0707 	orr.w	r7, ip, r7
 800e85e:	f849 7b04 	str.w	r7, [r9], #4
 800e862:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e866:	40cf      	lsrs	r7, r1
 800e868:	e7da      	b.n	800e820 <rshift+0x4c>
 800e86a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e86e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e872:	e7c3      	b.n	800e7fc <rshift+0x28>
 800e874:	4623      	mov	r3, r4
 800e876:	e7e1      	b.n	800e83c <rshift+0x68>

0800e878 <__hexdig_fun>:
 800e878:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e87c:	2b09      	cmp	r3, #9
 800e87e:	d802      	bhi.n	800e886 <__hexdig_fun+0xe>
 800e880:	3820      	subs	r0, #32
 800e882:	b2c0      	uxtb	r0, r0
 800e884:	4770      	bx	lr
 800e886:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e88a:	2b05      	cmp	r3, #5
 800e88c:	d801      	bhi.n	800e892 <__hexdig_fun+0x1a>
 800e88e:	3847      	subs	r0, #71	@ 0x47
 800e890:	e7f7      	b.n	800e882 <__hexdig_fun+0xa>
 800e892:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e896:	2b05      	cmp	r3, #5
 800e898:	d801      	bhi.n	800e89e <__hexdig_fun+0x26>
 800e89a:	3827      	subs	r0, #39	@ 0x27
 800e89c:	e7f1      	b.n	800e882 <__hexdig_fun+0xa>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	4770      	bx	lr
	...

0800e8a4 <__gethex>:
 800e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a8:	b085      	sub	sp, #20
 800e8aa:	468a      	mov	sl, r1
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	680b      	ldr	r3, [r1, #0]
 800e8b0:	9001      	str	r0, [sp, #4]
 800e8b2:	4690      	mov	r8, r2
 800e8b4:	1c9c      	adds	r4, r3, #2
 800e8b6:	46a1      	mov	r9, r4
 800e8b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e8bc:	2830      	cmp	r0, #48	@ 0x30
 800e8be:	d0fa      	beq.n	800e8b6 <__gethex+0x12>
 800e8c0:	eba9 0303 	sub.w	r3, r9, r3
 800e8c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e8c8:	f7ff ffd6 	bl	800e878 <__hexdig_fun>
 800e8cc:	4605      	mov	r5, r0
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d168      	bne.n	800e9a4 <__gethex+0x100>
 800e8d2:	49a0      	ldr	r1, [pc, #640]	@ (800eb54 <__gethex+0x2b0>)
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	4648      	mov	r0, r9
 800e8d8:	f7ff ff12 	bl	800e700 <strncmp>
 800e8dc:	4607      	mov	r7, r0
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d167      	bne.n	800e9b2 <__gethex+0x10e>
 800e8e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e8e6:	4626      	mov	r6, r4
 800e8e8:	f7ff ffc6 	bl	800e878 <__hexdig_fun>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d062      	beq.n	800e9b6 <__gethex+0x112>
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	7818      	ldrb	r0, [r3, #0]
 800e8f4:	2830      	cmp	r0, #48	@ 0x30
 800e8f6:	4699      	mov	r9, r3
 800e8f8:	f103 0301 	add.w	r3, r3, #1
 800e8fc:	d0f9      	beq.n	800e8f2 <__gethex+0x4e>
 800e8fe:	f7ff ffbb 	bl	800e878 <__hexdig_fun>
 800e902:	fab0 f580 	clz	r5, r0
 800e906:	096d      	lsrs	r5, r5, #5
 800e908:	f04f 0b01 	mov.w	fp, #1
 800e90c:	464a      	mov	r2, r9
 800e90e:	4616      	mov	r6, r2
 800e910:	3201      	adds	r2, #1
 800e912:	7830      	ldrb	r0, [r6, #0]
 800e914:	f7ff ffb0 	bl	800e878 <__hexdig_fun>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d1f8      	bne.n	800e90e <__gethex+0x6a>
 800e91c:	498d      	ldr	r1, [pc, #564]	@ (800eb54 <__gethex+0x2b0>)
 800e91e:	2201      	movs	r2, #1
 800e920:	4630      	mov	r0, r6
 800e922:	f7ff feed 	bl	800e700 <strncmp>
 800e926:	2800      	cmp	r0, #0
 800e928:	d13f      	bne.n	800e9aa <__gethex+0x106>
 800e92a:	b944      	cbnz	r4, 800e93e <__gethex+0x9a>
 800e92c:	1c74      	adds	r4, r6, #1
 800e92e:	4622      	mov	r2, r4
 800e930:	4616      	mov	r6, r2
 800e932:	3201      	adds	r2, #1
 800e934:	7830      	ldrb	r0, [r6, #0]
 800e936:	f7ff ff9f 	bl	800e878 <__hexdig_fun>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d1f8      	bne.n	800e930 <__gethex+0x8c>
 800e93e:	1ba4      	subs	r4, r4, r6
 800e940:	00a7      	lsls	r7, r4, #2
 800e942:	7833      	ldrb	r3, [r6, #0]
 800e944:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e948:	2b50      	cmp	r3, #80	@ 0x50
 800e94a:	d13e      	bne.n	800e9ca <__gethex+0x126>
 800e94c:	7873      	ldrb	r3, [r6, #1]
 800e94e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e950:	d033      	beq.n	800e9ba <__gethex+0x116>
 800e952:	2b2d      	cmp	r3, #45	@ 0x2d
 800e954:	d034      	beq.n	800e9c0 <__gethex+0x11c>
 800e956:	1c71      	adds	r1, r6, #1
 800e958:	2400      	movs	r4, #0
 800e95a:	7808      	ldrb	r0, [r1, #0]
 800e95c:	f7ff ff8c 	bl	800e878 <__hexdig_fun>
 800e960:	1e43      	subs	r3, r0, #1
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b18      	cmp	r3, #24
 800e966:	d830      	bhi.n	800e9ca <__gethex+0x126>
 800e968:	f1a0 0210 	sub.w	r2, r0, #16
 800e96c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e970:	f7ff ff82 	bl	800e878 <__hexdig_fun>
 800e974:	f100 3cff 	add.w	ip, r0, #4294967295
 800e978:	fa5f fc8c 	uxtb.w	ip, ip
 800e97c:	f1bc 0f18 	cmp.w	ip, #24
 800e980:	f04f 030a 	mov.w	r3, #10
 800e984:	d91e      	bls.n	800e9c4 <__gethex+0x120>
 800e986:	b104      	cbz	r4, 800e98a <__gethex+0xe6>
 800e988:	4252      	negs	r2, r2
 800e98a:	4417      	add	r7, r2
 800e98c:	f8ca 1000 	str.w	r1, [sl]
 800e990:	b1ed      	cbz	r5, 800e9ce <__gethex+0x12a>
 800e992:	f1bb 0f00 	cmp.w	fp, #0
 800e996:	bf0c      	ite	eq
 800e998:	2506      	moveq	r5, #6
 800e99a:	2500      	movne	r5, #0
 800e99c:	4628      	mov	r0, r5
 800e99e:	b005      	add	sp, #20
 800e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	2500      	movs	r5, #0
 800e9a6:	462c      	mov	r4, r5
 800e9a8:	e7b0      	b.n	800e90c <__gethex+0x68>
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	d1c7      	bne.n	800e93e <__gethex+0x9a>
 800e9ae:	4627      	mov	r7, r4
 800e9b0:	e7c7      	b.n	800e942 <__gethex+0x9e>
 800e9b2:	464e      	mov	r6, r9
 800e9b4:	462f      	mov	r7, r5
 800e9b6:	2501      	movs	r5, #1
 800e9b8:	e7c3      	b.n	800e942 <__gethex+0x9e>
 800e9ba:	2400      	movs	r4, #0
 800e9bc:	1cb1      	adds	r1, r6, #2
 800e9be:	e7cc      	b.n	800e95a <__gethex+0xb6>
 800e9c0:	2401      	movs	r4, #1
 800e9c2:	e7fb      	b.n	800e9bc <__gethex+0x118>
 800e9c4:	fb03 0002 	mla	r0, r3, r2, r0
 800e9c8:	e7ce      	b.n	800e968 <__gethex+0xc4>
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	e7de      	b.n	800e98c <__gethex+0xe8>
 800e9ce:	eba6 0309 	sub.w	r3, r6, r9
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	2b07      	cmp	r3, #7
 800e9d8:	dc0a      	bgt.n	800e9f0 <__gethex+0x14c>
 800e9da:	9801      	ldr	r0, [sp, #4]
 800e9dc:	f7fe f93c 	bl	800cc58 <_Balloc>
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	b940      	cbnz	r0, 800e9f6 <__gethex+0x152>
 800e9e4:	4b5c      	ldr	r3, [pc, #368]	@ (800eb58 <__gethex+0x2b4>)
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	21e4      	movs	r1, #228	@ 0xe4
 800e9ea:	485c      	ldr	r0, [pc, #368]	@ (800eb5c <__gethex+0x2b8>)
 800e9ec:	f7ff fec0 	bl	800e770 <__assert_func>
 800e9f0:	3101      	adds	r1, #1
 800e9f2:	105b      	asrs	r3, r3, #1
 800e9f4:	e7ef      	b.n	800e9d6 <__gethex+0x132>
 800e9f6:	f100 0a14 	add.w	sl, r0, #20
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4655      	mov	r5, sl
 800e9fe:	469b      	mov	fp, r3
 800ea00:	45b1      	cmp	r9, r6
 800ea02:	d337      	bcc.n	800ea74 <__gethex+0x1d0>
 800ea04:	f845 bb04 	str.w	fp, [r5], #4
 800ea08:	eba5 050a 	sub.w	r5, r5, sl
 800ea0c:	10ad      	asrs	r5, r5, #2
 800ea0e:	6125      	str	r5, [r4, #16]
 800ea10:	4658      	mov	r0, fp
 800ea12:	f7fe fa13 	bl	800ce3c <__hi0bits>
 800ea16:	016d      	lsls	r5, r5, #5
 800ea18:	f8d8 6000 	ldr.w	r6, [r8]
 800ea1c:	1a2d      	subs	r5, r5, r0
 800ea1e:	42b5      	cmp	r5, r6
 800ea20:	dd54      	ble.n	800eacc <__gethex+0x228>
 800ea22:	1bad      	subs	r5, r5, r6
 800ea24:	4629      	mov	r1, r5
 800ea26:	4620      	mov	r0, r4
 800ea28:	f7fe fda7 	bl	800d57a <__any_on>
 800ea2c:	4681      	mov	r9, r0
 800ea2e:	b178      	cbz	r0, 800ea50 <__gethex+0x1ac>
 800ea30:	1e6b      	subs	r3, r5, #1
 800ea32:	1159      	asrs	r1, r3, #5
 800ea34:	f003 021f 	and.w	r2, r3, #31
 800ea38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ea3c:	f04f 0901 	mov.w	r9, #1
 800ea40:	fa09 f202 	lsl.w	r2, r9, r2
 800ea44:	420a      	tst	r2, r1
 800ea46:	d003      	beq.n	800ea50 <__gethex+0x1ac>
 800ea48:	454b      	cmp	r3, r9
 800ea4a:	dc36      	bgt.n	800eaba <__gethex+0x216>
 800ea4c:	f04f 0902 	mov.w	r9, #2
 800ea50:	4629      	mov	r1, r5
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7ff febe 	bl	800e7d4 <rshift>
 800ea58:	442f      	add	r7, r5
 800ea5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea5e:	42bb      	cmp	r3, r7
 800ea60:	da42      	bge.n	800eae8 <__gethex+0x244>
 800ea62:	9801      	ldr	r0, [sp, #4]
 800ea64:	4621      	mov	r1, r4
 800ea66:	f7fe f937 	bl	800ccd8 <_Bfree>
 800ea6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	25a3      	movs	r5, #163	@ 0xa3
 800ea72:	e793      	b.n	800e99c <__gethex+0xf8>
 800ea74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ea78:	2a2e      	cmp	r2, #46	@ 0x2e
 800ea7a:	d012      	beq.n	800eaa2 <__gethex+0x1fe>
 800ea7c:	2b20      	cmp	r3, #32
 800ea7e:	d104      	bne.n	800ea8a <__gethex+0x1e6>
 800ea80:	f845 bb04 	str.w	fp, [r5], #4
 800ea84:	f04f 0b00 	mov.w	fp, #0
 800ea88:	465b      	mov	r3, fp
 800ea8a:	7830      	ldrb	r0, [r6, #0]
 800ea8c:	9303      	str	r3, [sp, #12]
 800ea8e:	f7ff fef3 	bl	800e878 <__hexdig_fun>
 800ea92:	9b03      	ldr	r3, [sp, #12]
 800ea94:	f000 000f 	and.w	r0, r0, #15
 800ea98:	4098      	lsls	r0, r3
 800ea9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	e7ae      	b.n	800ea00 <__gethex+0x15c>
 800eaa2:	45b1      	cmp	r9, r6
 800eaa4:	d8ea      	bhi.n	800ea7c <__gethex+0x1d8>
 800eaa6:	492b      	ldr	r1, [pc, #172]	@ (800eb54 <__gethex+0x2b0>)
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff fe27 	bl	800e700 <strncmp>
 800eab2:	9b03      	ldr	r3, [sp, #12]
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d1e1      	bne.n	800ea7c <__gethex+0x1d8>
 800eab8:	e7a2      	b.n	800ea00 <__gethex+0x15c>
 800eaba:	1ea9      	subs	r1, r5, #2
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7fe fd5c 	bl	800d57a <__any_on>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d0c2      	beq.n	800ea4c <__gethex+0x1a8>
 800eac6:	f04f 0903 	mov.w	r9, #3
 800eaca:	e7c1      	b.n	800ea50 <__gethex+0x1ac>
 800eacc:	da09      	bge.n	800eae2 <__gethex+0x23e>
 800eace:	1b75      	subs	r5, r6, r5
 800ead0:	4621      	mov	r1, r4
 800ead2:	9801      	ldr	r0, [sp, #4]
 800ead4:	462a      	mov	r2, r5
 800ead6:	f7fe fb17 	bl	800d108 <__lshift>
 800eada:	1b7f      	subs	r7, r7, r5
 800eadc:	4604      	mov	r4, r0
 800eade:	f100 0a14 	add.w	sl, r0, #20
 800eae2:	f04f 0900 	mov.w	r9, #0
 800eae6:	e7b8      	b.n	800ea5a <__gethex+0x1b6>
 800eae8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eaec:	42bd      	cmp	r5, r7
 800eaee:	dd6f      	ble.n	800ebd0 <__gethex+0x32c>
 800eaf0:	1bed      	subs	r5, r5, r7
 800eaf2:	42ae      	cmp	r6, r5
 800eaf4:	dc34      	bgt.n	800eb60 <__gethex+0x2bc>
 800eaf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d022      	beq.n	800eb44 <__gethex+0x2a0>
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	d024      	beq.n	800eb4c <__gethex+0x2a8>
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d115      	bne.n	800eb32 <__gethex+0x28e>
 800eb06:	42ae      	cmp	r6, r5
 800eb08:	d113      	bne.n	800eb32 <__gethex+0x28e>
 800eb0a:	2e01      	cmp	r6, #1
 800eb0c:	d10b      	bne.n	800eb26 <__gethex+0x282>
 800eb0e:	9a02      	ldr	r2, [sp, #8]
 800eb10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	2301      	movs	r3, #1
 800eb18:	6123      	str	r3, [r4, #16]
 800eb1a:	f8ca 3000 	str.w	r3, [sl]
 800eb1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb20:	2562      	movs	r5, #98	@ 0x62
 800eb22:	601c      	str	r4, [r3, #0]
 800eb24:	e73a      	b.n	800e99c <__gethex+0xf8>
 800eb26:	1e71      	subs	r1, r6, #1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7fe fd26 	bl	800d57a <__any_on>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d1ed      	bne.n	800eb0e <__gethex+0x26a>
 800eb32:	9801      	ldr	r0, [sp, #4]
 800eb34:	4621      	mov	r1, r4
 800eb36:	f7fe f8cf 	bl	800ccd8 <_Bfree>
 800eb3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	2550      	movs	r5, #80	@ 0x50
 800eb42:	e72b      	b.n	800e99c <__gethex+0xf8>
 800eb44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1f3      	bne.n	800eb32 <__gethex+0x28e>
 800eb4a:	e7e0      	b.n	800eb0e <__gethex+0x26a>
 800eb4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1dd      	bne.n	800eb0e <__gethex+0x26a>
 800eb52:	e7ee      	b.n	800eb32 <__gethex+0x28e>
 800eb54:	08010620 	.word	0x08010620
 800eb58:	080104b5 	.word	0x080104b5
 800eb5c:	080107ce 	.word	0x080107ce
 800eb60:	1e6f      	subs	r7, r5, #1
 800eb62:	f1b9 0f00 	cmp.w	r9, #0
 800eb66:	d130      	bne.n	800ebca <__gethex+0x326>
 800eb68:	b127      	cbz	r7, 800eb74 <__gethex+0x2d0>
 800eb6a:	4639      	mov	r1, r7
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f7fe fd04 	bl	800d57a <__any_on>
 800eb72:	4681      	mov	r9, r0
 800eb74:	117a      	asrs	r2, r7, #5
 800eb76:	2301      	movs	r3, #1
 800eb78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eb7c:	f007 071f 	and.w	r7, r7, #31
 800eb80:	40bb      	lsls	r3, r7
 800eb82:	4213      	tst	r3, r2
 800eb84:	4629      	mov	r1, r5
 800eb86:	4620      	mov	r0, r4
 800eb88:	bf18      	it	ne
 800eb8a:	f049 0902 	orrne.w	r9, r9, #2
 800eb8e:	f7ff fe21 	bl	800e7d4 <rshift>
 800eb92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eb96:	1b76      	subs	r6, r6, r5
 800eb98:	2502      	movs	r5, #2
 800eb9a:	f1b9 0f00 	cmp.w	r9, #0
 800eb9e:	d047      	beq.n	800ec30 <__gethex+0x38c>
 800eba0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d015      	beq.n	800ebd4 <__gethex+0x330>
 800eba8:	2b03      	cmp	r3, #3
 800ebaa:	d017      	beq.n	800ebdc <__gethex+0x338>
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d109      	bne.n	800ebc4 <__gethex+0x320>
 800ebb0:	f019 0f02 	tst.w	r9, #2
 800ebb4:	d006      	beq.n	800ebc4 <__gethex+0x320>
 800ebb6:	f8da 3000 	ldr.w	r3, [sl]
 800ebba:	ea49 0903 	orr.w	r9, r9, r3
 800ebbe:	f019 0f01 	tst.w	r9, #1
 800ebc2:	d10e      	bne.n	800ebe2 <__gethex+0x33e>
 800ebc4:	f045 0510 	orr.w	r5, r5, #16
 800ebc8:	e032      	b.n	800ec30 <__gethex+0x38c>
 800ebca:	f04f 0901 	mov.w	r9, #1
 800ebce:	e7d1      	b.n	800eb74 <__gethex+0x2d0>
 800ebd0:	2501      	movs	r5, #1
 800ebd2:	e7e2      	b.n	800eb9a <__gethex+0x2f6>
 800ebd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebd6:	f1c3 0301 	rsb	r3, r3, #1
 800ebda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0f0      	beq.n	800ebc4 <__gethex+0x320>
 800ebe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ebe6:	f104 0314 	add.w	r3, r4, #20
 800ebea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ebee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ebf2:	f04f 0c00 	mov.w	ip, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec00:	d01b      	beq.n	800ec3a <__gethex+0x396>
 800ec02:	3201      	adds	r2, #1
 800ec04:	6002      	str	r2, [r0, #0]
 800ec06:	2d02      	cmp	r5, #2
 800ec08:	f104 0314 	add.w	r3, r4, #20
 800ec0c:	d13c      	bne.n	800ec88 <__gethex+0x3e4>
 800ec0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ec12:	3a01      	subs	r2, #1
 800ec14:	42b2      	cmp	r2, r6
 800ec16:	d109      	bne.n	800ec2c <__gethex+0x388>
 800ec18:	1171      	asrs	r1, r6, #5
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec20:	f006 061f 	and.w	r6, r6, #31
 800ec24:	fa02 f606 	lsl.w	r6, r2, r6
 800ec28:	421e      	tst	r6, r3
 800ec2a:	d13a      	bne.n	800eca2 <__gethex+0x3fe>
 800ec2c:	f045 0520 	orr.w	r5, r5, #32
 800ec30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec32:	601c      	str	r4, [r3, #0]
 800ec34:	9b02      	ldr	r3, [sp, #8]
 800ec36:	601f      	str	r7, [r3, #0]
 800ec38:	e6b0      	b.n	800e99c <__gethex+0xf8>
 800ec3a:	4299      	cmp	r1, r3
 800ec3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec40:	d8d9      	bhi.n	800ebf6 <__gethex+0x352>
 800ec42:	68a3      	ldr	r3, [r4, #8]
 800ec44:	459b      	cmp	fp, r3
 800ec46:	db17      	blt.n	800ec78 <__gethex+0x3d4>
 800ec48:	6861      	ldr	r1, [r4, #4]
 800ec4a:	9801      	ldr	r0, [sp, #4]
 800ec4c:	3101      	adds	r1, #1
 800ec4e:	f7fe f803 	bl	800cc58 <_Balloc>
 800ec52:	4681      	mov	r9, r0
 800ec54:	b918      	cbnz	r0, 800ec5e <__gethex+0x3ba>
 800ec56:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc0 <__gethex+0x41c>)
 800ec58:	4602      	mov	r2, r0
 800ec5a:	2184      	movs	r1, #132	@ 0x84
 800ec5c:	e6c5      	b.n	800e9ea <__gethex+0x146>
 800ec5e:	6922      	ldr	r2, [r4, #16]
 800ec60:	3202      	adds	r2, #2
 800ec62:	f104 010c 	add.w	r1, r4, #12
 800ec66:	0092      	lsls	r2, r2, #2
 800ec68:	300c      	adds	r0, #12
 800ec6a:	f7ff fd6b 	bl	800e744 <memcpy>
 800ec6e:	4621      	mov	r1, r4
 800ec70:	9801      	ldr	r0, [sp, #4]
 800ec72:	f7fe f831 	bl	800ccd8 <_Bfree>
 800ec76:	464c      	mov	r4, r9
 800ec78:	6923      	ldr	r3, [r4, #16]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec80:	6122      	str	r2, [r4, #16]
 800ec82:	2201      	movs	r2, #1
 800ec84:	615a      	str	r2, [r3, #20]
 800ec86:	e7be      	b.n	800ec06 <__gethex+0x362>
 800ec88:	6922      	ldr	r2, [r4, #16]
 800ec8a:	455a      	cmp	r2, fp
 800ec8c:	dd0b      	ble.n	800eca6 <__gethex+0x402>
 800ec8e:	2101      	movs	r1, #1
 800ec90:	4620      	mov	r0, r4
 800ec92:	f7ff fd9f 	bl	800e7d4 <rshift>
 800ec96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec9a:	3701      	adds	r7, #1
 800ec9c:	42bb      	cmp	r3, r7
 800ec9e:	f6ff aee0 	blt.w	800ea62 <__gethex+0x1be>
 800eca2:	2501      	movs	r5, #1
 800eca4:	e7c2      	b.n	800ec2c <__gethex+0x388>
 800eca6:	f016 061f 	ands.w	r6, r6, #31
 800ecaa:	d0fa      	beq.n	800eca2 <__gethex+0x3fe>
 800ecac:	4453      	add	r3, sl
 800ecae:	f1c6 0620 	rsb	r6, r6, #32
 800ecb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ecb6:	f7fe f8c1 	bl	800ce3c <__hi0bits>
 800ecba:	42b0      	cmp	r0, r6
 800ecbc:	dbe7      	blt.n	800ec8e <__gethex+0x3ea>
 800ecbe:	e7f0      	b.n	800eca2 <__gethex+0x3fe>
 800ecc0:	080104b5 	.word	0x080104b5

0800ecc4 <L_shift>:
 800ecc4:	f1c2 0208 	rsb	r2, r2, #8
 800ecc8:	0092      	lsls	r2, r2, #2
 800ecca:	b570      	push	{r4, r5, r6, lr}
 800eccc:	f1c2 0620 	rsb	r6, r2, #32
 800ecd0:	6843      	ldr	r3, [r0, #4]
 800ecd2:	6804      	ldr	r4, [r0, #0]
 800ecd4:	fa03 f506 	lsl.w	r5, r3, r6
 800ecd8:	432c      	orrs	r4, r5
 800ecda:	40d3      	lsrs	r3, r2
 800ecdc:	6004      	str	r4, [r0, #0]
 800ecde:	f840 3f04 	str.w	r3, [r0, #4]!
 800ece2:	4288      	cmp	r0, r1
 800ece4:	d3f4      	bcc.n	800ecd0 <L_shift+0xc>
 800ece6:	bd70      	pop	{r4, r5, r6, pc}

0800ece8 <__match>:
 800ece8:	b530      	push	{r4, r5, lr}
 800ecea:	6803      	ldr	r3, [r0, #0]
 800ecec:	3301      	adds	r3, #1
 800ecee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecf2:	b914      	cbnz	r4, 800ecfa <__match+0x12>
 800ecf4:	6003      	str	r3, [r0, #0]
 800ecf6:	2001      	movs	r0, #1
 800ecf8:	bd30      	pop	{r4, r5, pc}
 800ecfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ed02:	2d19      	cmp	r5, #25
 800ed04:	bf98      	it	ls
 800ed06:	3220      	addls	r2, #32
 800ed08:	42a2      	cmp	r2, r4
 800ed0a:	d0f0      	beq.n	800ecee <__match+0x6>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	e7f3      	b.n	800ecf8 <__match+0x10>

0800ed10 <__hexnan>:
 800ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	680b      	ldr	r3, [r1, #0]
 800ed16:	6801      	ldr	r1, [r0, #0]
 800ed18:	115e      	asrs	r6, r3, #5
 800ed1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed1e:	f013 031f 	ands.w	r3, r3, #31
 800ed22:	b087      	sub	sp, #28
 800ed24:	bf18      	it	ne
 800ed26:	3604      	addne	r6, #4
 800ed28:	2500      	movs	r5, #0
 800ed2a:	1f37      	subs	r7, r6, #4
 800ed2c:	4682      	mov	sl, r0
 800ed2e:	4690      	mov	r8, r2
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed36:	46b9      	mov	r9, r7
 800ed38:	463c      	mov	r4, r7
 800ed3a:	9502      	str	r5, [sp, #8]
 800ed3c:	46ab      	mov	fp, r5
 800ed3e:	784a      	ldrb	r2, [r1, #1]
 800ed40:	1c4b      	adds	r3, r1, #1
 800ed42:	9303      	str	r3, [sp, #12]
 800ed44:	b342      	cbz	r2, 800ed98 <__hexnan+0x88>
 800ed46:	4610      	mov	r0, r2
 800ed48:	9105      	str	r1, [sp, #20]
 800ed4a:	9204      	str	r2, [sp, #16]
 800ed4c:	f7ff fd94 	bl	800e878 <__hexdig_fun>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d151      	bne.n	800edf8 <__hexnan+0xe8>
 800ed54:	9a04      	ldr	r2, [sp, #16]
 800ed56:	9905      	ldr	r1, [sp, #20]
 800ed58:	2a20      	cmp	r2, #32
 800ed5a:	d818      	bhi.n	800ed8e <__hexnan+0x7e>
 800ed5c:	9b02      	ldr	r3, [sp, #8]
 800ed5e:	459b      	cmp	fp, r3
 800ed60:	dd13      	ble.n	800ed8a <__hexnan+0x7a>
 800ed62:	454c      	cmp	r4, r9
 800ed64:	d206      	bcs.n	800ed74 <__hexnan+0x64>
 800ed66:	2d07      	cmp	r5, #7
 800ed68:	dc04      	bgt.n	800ed74 <__hexnan+0x64>
 800ed6a:	462a      	mov	r2, r5
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f7ff ffa8 	bl	800ecc4 <L_shift>
 800ed74:	4544      	cmp	r4, r8
 800ed76:	d952      	bls.n	800ee1e <__hexnan+0x10e>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ed7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed82:	f8cd b008 	str.w	fp, [sp, #8]
 800ed86:	464c      	mov	r4, r9
 800ed88:	461d      	mov	r5, r3
 800ed8a:	9903      	ldr	r1, [sp, #12]
 800ed8c:	e7d7      	b.n	800ed3e <__hexnan+0x2e>
 800ed8e:	2a29      	cmp	r2, #41	@ 0x29
 800ed90:	d157      	bne.n	800ee42 <__hexnan+0x132>
 800ed92:	3102      	adds	r1, #2
 800ed94:	f8ca 1000 	str.w	r1, [sl]
 800ed98:	f1bb 0f00 	cmp.w	fp, #0
 800ed9c:	d051      	beq.n	800ee42 <__hexnan+0x132>
 800ed9e:	454c      	cmp	r4, r9
 800eda0:	d206      	bcs.n	800edb0 <__hexnan+0xa0>
 800eda2:	2d07      	cmp	r5, #7
 800eda4:	dc04      	bgt.n	800edb0 <__hexnan+0xa0>
 800eda6:	462a      	mov	r2, r5
 800eda8:	4649      	mov	r1, r9
 800edaa:	4620      	mov	r0, r4
 800edac:	f7ff ff8a 	bl	800ecc4 <L_shift>
 800edb0:	4544      	cmp	r4, r8
 800edb2:	d936      	bls.n	800ee22 <__hexnan+0x112>
 800edb4:	f1a8 0204 	sub.w	r2, r8, #4
 800edb8:	4623      	mov	r3, r4
 800edba:	f853 1b04 	ldr.w	r1, [r3], #4
 800edbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800edc2:	429f      	cmp	r7, r3
 800edc4:	d2f9      	bcs.n	800edba <__hexnan+0xaa>
 800edc6:	1b3b      	subs	r3, r7, r4
 800edc8:	f023 0303 	bic.w	r3, r3, #3
 800edcc:	3304      	adds	r3, #4
 800edce:	3401      	adds	r4, #1
 800edd0:	3e03      	subs	r6, #3
 800edd2:	42b4      	cmp	r4, r6
 800edd4:	bf88      	it	hi
 800edd6:	2304      	movhi	r3, #4
 800edd8:	4443      	add	r3, r8
 800edda:	2200      	movs	r2, #0
 800eddc:	f843 2b04 	str.w	r2, [r3], #4
 800ede0:	429f      	cmp	r7, r3
 800ede2:	d2fb      	bcs.n	800eddc <__hexnan+0xcc>
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	b91b      	cbnz	r3, 800edf0 <__hexnan+0xe0>
 800ede8:	4547      	cmp	r7, r8
 800edea:	d128      	bne.n	800ee3e <__hexnan+0x12e>
 800edec:	2301      	movs	r3, #1
 800edee:	603b      	str	r3, [r7, #0]
 800edf0:	2005      	movs	r0, #5
 800edf2:	b007      	add	sp, #28
 800edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	3501      	adds	r5, #1
 800edfa:	2d08      	cmp	r5, #8
 800edfc:	f10b 0b01 	add.w	fp, fp, #1
 800ee00:	dd06      	ble.n	800ee10 <__hexnan+0x100>
 800ee02:	4544      	cmp	r4, r8
 800ee04:	d9c1      	bls.n	800ed8a <__hexnan+0x7a>
 800ee06:	2300      	movs	r3, #0
 800ee08:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee0c:	2501      	movs	r5, #1
 800ee0e:	3c04      	subs	r4, #4
 800ee10:	6822      	ldr	r2, [r4, #0]
 800ee12:	f000 000f 	and.w	r0, r0, #15
 800ee16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ee1a:	6020      	str	r0, [r4, #0]
 800ee1c:	e7b5      	b.n	800ed8a <__hexnan+0x7a>
 800ee1e:	2508      	movs	r5, #8
 800ee20:	e7b3      	b.n	800ed8a <__hexnan+0x7a>
 800ee22:	9b01      	ldr	r3, [sp, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d0dd      	beq.n	800ede4 <__hexnan+0xd4>
 800ee28:	f1c3 0320 	rsb	r3, r3, #32
 800ee2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee30:	40da      	lsrs	r2, r3
 800ee32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ee36:	4013      	ands	r3, r2
 800ee38:	f846 3c04 	str.w	r3, [r6, #-4]
 800ee3c:	e7d2      	b.n	800ede4 <__hexnan+0xd4>
 800ee3e:	3f04      	subs	r7, #4
 800ee40:	e7d0      	b.n	800ede4 <__hexnan+0xd4>
 800ee42:	2004      	movs	r0, #4
 800ee44:	e7d5      	b.n	800edf2 <__hexnan+0xe2>

0800ee46 <__ascii_mbtowc>:
 800ee46:	b082      	sub	sp, #8
 800ee48:	b901      	cbnz	r1, 800ee4c <__ascii_mbtowc+0x6>
 800ee4a:	a901      	add	r1, sp, #4
 800ee4c:	b142      	cbz	r2, 800ee60 <__ascii_mbtowc+0x1a>
 800ee4e:	b14b      	cbz	r3, 800ee64 <__ascii_mbtowc+0x1e>
 800ee50:	7813      	ldrb	r3, [r2, #0]
 800ee52:	600b      	str	r3, [r1, #0]
 800ee54:	7812      	ldrb	r2, [r2, #0]
 800ee56:	1e10      	subs	r0, r2, #0
 800ee58:	bf18      	it	ne
 800ee5a:	2001      	movne	r0, #1
 800ee5c:	b002      	add	sp, #8
 800ee5e:	4770      	bx	lr
 800ee60:	4610      	mov	r0, r2
 800ee62:	e7fb      	b.n	800ee5c <__ascii_mbtowc+0x16>
 800ee64:	f06f 0001 	mvn.w	r0, #1
 800ee68:	e7f8      	b.n	800ee5c <__ascii_mbtowc+0x16>

0800ee6a <_realloc_r>:
 800ee6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	4680      	mov	r8, r0
 800ee70:	4615      	mov	r5, r2
 800ee72:	460c      	mov	r4, r1
 800ee74:	b921      	cbnz	r1, 800ee80 <_realloc_r+0x16>
 800ee76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	f7fd be60 	b.w	800cb40 <_malloc_r>
 800ee80:	b92a      	cbnz	r2, 800ee8e <_realloc_r+0x24>
 800ee82:	f7fd fde9 	bl	800ca58 <_free_r>
 800ee86:	2400      	movs	r4, #0
 800ee88:	4620      	mov	r0, r4
 800ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8e:	f000 f840 	bl	800ef12 <_malloc_usable_size_r>
 800ee92:	4285      	cmp	r5, r0
 800ee94:	4606      	mov	r6, r0
 800ee96:	d802      	bhi.n	800ee9e <_realloc_r+0x34>
 800ee98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee9c:	d8f4      	bhi.n	800ee88 <_realloc_r+0x1e>
 800ee9e:	4629      	mov	r1, r5
 800eea0:	4640      	mov	r0, r8
 800eea2:	f7fd fe4d 	bl	800cb40 <_malloc_r>
 800eea6:	4607      	mov	r7, r0
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d0ec      	beq.n	800ee86 <_realloc_r+0x1c>
 800eeac:	42b5      	cmp	r5, r6
 800eeae:	462a      	mov	r2, r5
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	bf28      	it	cs
 800eeb4:	4632      	movcs	r2, r6
 800eeb6:	f7ff fc45 	bl	800e744 <memcpy>
 800eeba:	4621      	mov	r1, r4
 800eebc:	4640      	mov	r0, r8
 800eebe:	f7fd fdcb 	bl	800ca58 <_free_r>
 800eec2:	463c      	mov	r4, r7
 800eec4:	e7e0      	b.n	800ee88 <_realloc_r+0x1e>

0800eec6 <__ascii_wctomb>:
 800eec6:	4603      	mov	r3, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	b141      	cbz	r1, 800eede <__ascii_wctomb+0x18>
 800eecc:	2aff      	cmp	r2, #255	@ 0xff
 800eece:	d904      	bls.n	800eeda <__ascii_wctomb+0x14>
 800eed0:	228a      	movs	r2, #138	@ 0x8a
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	f04f 30ff 	mov.w	r0, #4294967295
 800eed8:	4770      	bx	lr
 800eeda:	700a      	strb	r2, [r1, #0]
 800eedc:	2001      	movs	r0, #1
 800eede:	4770      	bx	lr

0800eee0 <fiprintf>:
 800eee0:	b40e      	push	{r1, r2, r3}
 800eee2:	b503      	push	{r0, r1, lr}
 800eee4:	4601      	mov	r1, r0
 800eee6:	ab03      	add	r3, sp, #12
 800eee8:	4805      	ldr	r0, [pc, #20]	@ (800ef00 <fiprintf+0x20>)
 800eeea:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeee:	6800      	ldr	r0, [r0, #0]
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	f000 f83f 	bl	800ef74 <_vfiprintf_r>
 800eef6:	b002      	add	sp, #8
 800eef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eefc:	b003      	add	sp, #12
 800eefe:	4770      	bx	lr
 800ef00:	2000010c 	.word	0x2000010c

0800ef04 <abort>:
 800ef04:	b508      	push	{r3, lr}
 800ef06:	2006      	movs	r0, #6
 800ef08:	f000 fa08 	bl	800f31c <raise>
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	f7f3 f805 	bl	8001f1c <_exit>

0800ef12 <_malloc_usable_size_r>:
 800ef12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef16:	1f18      	subs	r0, r3, #4
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	bfbc      	itt	lt
 800ef1c:	580b      	ldrlt	r3, [r1, r0]
 800ef1e:	18c0      	addlt	r0, r0, r3
 800ef20:	4770      	bx	lr

0800ef22 <__sfputc_r>:
 800ef22:	6893      	ldr	r3, [r2, #8]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	b410      	push	{r4}
 800ef2a:	6093      	str	r3, [r2, #8]
 800ef2c:	da08      	bge.n	800ef40 <__sfputc_r+0x1e>
 800ef2e:	6994      	ldr	r4, [r2, #24]
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	db01      	blt.n	800ef38 <__sfputc_r+0x16>
 800ef34:	290a      	cmp	r1, #10
 800ef36:	d103      	bne.n	800ef40 <__sfputc_r+0x1e>
 800ef38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef3c:	f000 b932 	b.w	800f1a4 <__swbuf_r>
 800ef40:	6813      	ldr	r3, [r2, #0]
 800ef42:	1c58      	adds	r0, r3, #1
 800ef44:	6010      	str	r0, [r2, #0]
 800ef46:	7019      	strb	r1, [r3, #0]
 800ef48:	4608      	mov	r0, r1
 800ef4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <__sfputs_r>:
 800ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef52:	4606      	mov	r6, r0
 800ef54:	460f      	mov	r7, r1
 800ef56:	4614      	mov	r4, r2
 800ef58:	18d5      	adds	r5, r2, r3
 800ef5a:	42ac      	cmp	r4, r5
 800ef5c:	d101      	bne.n	800ef62 <__sfputs_r+0x12>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e007      	b.n	800ef72 <__sfputs_r+0x22>
 800ef62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef66:	463a      	mov	r2, r7
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f7ff ffda 	bl	800ef22 <__sfputc_r>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	d1f3      	bne.n	800ef5a <__sfputs_r+0xa>
 800ef72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef74 <_vfiprintf_r>:
 800ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef78:	460d      	mov	r5, r1
 800ef7a:	b09d      	sub	sp, #116	@ 0x74
 800ef7c:	4614      	mov	r4, r2
 800ef7e:	4698      	mov	r8, r3
 800ef80:	4606      	mov	r6, r0
 800ef82:	b118      	cbz	r0, 800ef8c <_vfiprintf_r+0x18>
 800ef84:	6a03      	ldr	r3, [r0, #32]
 800ef86:	b90b      	cbnz	r3, 800ef8c <_vfiprintf_r+0x18>
 800ef88:	f7fc fdfa 	bl	800bb80 <__sinit>
 800ef8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef8e:	07d9      	lsls	r1, r3, #31
 800ef90:	d405      	bmi.n	800ef9e <_vfiprintf_r+0x2a>
 800ef92:	89ab      	ldrh	r3, [r5, #12]
 800ef94:	059a      	lsls	r2, r3, #22
 800ef96:	d402      	bmi.n	800ef9e <_vfiprintf_r+0x2a>
 800ef98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef9a:	f7fc ff08 	bl	800bdae <__retarget_lock_acquire_recursive>
 800ef9e:	89ab      	ldrh	r3, [r5, #12]
 800efa0:	071b      	lsls	r3, r3, #28
 800efa2:	d501      	bpl.n	800efa8 <_vfiprintf_r+0x34>
 800efa4:	692b      	ldr	r3, [r5, #16]
 800efa6:	b99b      	cbnz	r3, 800efd0 <_vfiprintf_r+0x5c>
 800efa8:	4629      	mov	r1, r5
 800efaa:	4630      	mov	r0, r6
 800efac:	f000 f938 	bl	800f220 <__swsetup_r>
 800efb0:	b170      	cbz	r0, 800efd0 <_vfiprintf_r+0x5c>
 800efb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efb4:	07dc      	lsls	r4, r3, #31
 800efb6:	d504      	bpl.n	800efc2 <_vfiprintf_r+0x4e>
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295
 800efbc:	b01d      	add	sp, #116	@ 0x74
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc2:	89ab      	ldrh	r3, [r5, #12]
 800efc4:	0598      	lsls	r0, r3, #22
 800efc6:	d4f7      	bmi.n	800efb8 <_vfiprintf_r+0x44>
 800efc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efca:	f7fc fef1 	bl	800bdb0 <__retarget_lock_release_recursive>
 800efce:	e7f3      	b.n	800efb8 <_vfiprintf_r+0x44>
 800efd0:	2300      	movs	r3, #0
 800efd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800efd4:	2320      	movs	r3, #32
 800efd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800efda:	f8cd 800c 	str.w	r8, [sp, #12]
 800efde:	2330      	movs	r3, #48	@ 0x30
 800efe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f190 <_vfiprintf_r+0x21c>
 800efe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efe8:	f04f 0901 	mov.w	r9, #1
 800efec:	4623      	mov	r3, r4
 800efee:	469a      	mov	sl, r3
 800eff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eff4:	b10a      	cbz	r2, 800effa <_vfiprintf_r+0x86>
 800eff6:	2a25      	cmp	r2, #37	@ 0x25
 800eff8:	d1f9      	bne.n	800efee <_vfiprintf_r+0x7a>
 800effa:	ebba 0b04 	subs.w	fp, sl, r4
 800effe:	d00b      	beq.n	800f018 <_vfiprintf_r+0xa4>
 800f000:	465b      	mov	r3, fp
 800f002:	4622      	mov	r2, r4
 800f004:	4629      	mov	r1, r5
 800f006:	4630      	mov	r0, r6
 800f008:	f7ff ffa2 	bl	800ef50 <__sfputs_r>
 800f00c:	3001      	adds	r0, #1
 800f00e:	f000 80a7 	beq.w	800f160 <_vfiprintf_r+0x1ec>
 800f012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f014:	445a      	add	r2, fp
 800f016:	9209      	str	r2, [sp, #36]	@ 0x24
 800f018:	f89a 3000 	ldrb.w	r3, [sl]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f000 809f 	beq.w	800f160 <_vfiprintf_r+0x1ec>
 800f022:	2300      	movs	r3, #0
 800f024:	f04f 32ff 	mov.w	r2, #4294967295
 800f028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f02c:	f10a 0a01 	add.w	sl, sl, #1
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	9307      	str	r3, [sp, #28]
 800f034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f038:	931a      	str	r3, [sp, #104]	@ 0x68
 800f03a:	4654      	mov	r4, sl
 800f03c:	2205      	movs	r2, #5
 800f03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f042:	4853      	ldr	r0, [pc, #332]	@ (800f190 <_vfiprintf_r+0x21c>)
 800f044:	f7f1 f8cc 	bl	80001e0 <memchr>
 800f048:	9a04      	ldr	r2, [sp, #16]
 800f04a:	b9d8      	cbnz	r0, 800f084 <_vfiprintf_r+0x110>
 800f04c:	06d1      	lsls	r1, r2, #27
 800f04e:	bf44      	itt	mi
 800f050:	2320      	movmi	r3, #32
 800f052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f056:	0713      	lsls	r3, r2, #28
 800f058:	bf44      	itt	mi
 800f05a:	232b      	movmi	r3, #43	@ 0x2b
 800f05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f060:	f89a 3000 	ldrb.w	r3, [sl]
 800f064:	2b2a      	cmp	r3, #42	@ 0x2a
 800f066:	d015      	beq.n	800f094 <_vfiprintf_r+0x120>
 800f068:	9a07      	ldr	r2, [sp, #28]
 800f06a:	4654      	mov	r4, sl
 800f06c:	2000      	movs	r0, #0
 800f06e:	f04f 0c0a 	mov.w	ip, #10
 800f072:	4621      	mov	r1, r4
 800f074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f078:	3b30      	subs	r3, #48	@ 0x30
 800f07a:	2b09      	cmp	r3, #9
 800f07c:	d94b      	bls.n	800f116 <_vfiprintf_r+0x1a2>
 800f07e:	b1b0      	cbz	r0, 800f0ae <_vfiprintf_r+0x13a>
 800f080:	9207      	str	r2, [sp, #28]
 800f082:	e014      	b.n	800f0ae <_vfiprintf_r+0x13a>
 800f084:	eba0 0308 	sub.w	r3, r0, r8
 800f088:	fa09 f303 	lsl.w	r3, r9, r3
 800f08c:	4313      	orrs	r3, r2
 800f08e:	9304      	str	r3, [sp, #16]
 800f090:	46a2      	mov	sl, r4
 800f092:	e7d2      	b.n	800f03a <_vfiprintf_r+0xc6>
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	1d19      	adds	r1, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	9103      	str	r1, [sp, #12]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	bfbb      	ittet	lt
 800f0a0:	425b      	neglt	r3, r3
 800f0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f0a6:	9307      	strge	r3, [sp, #28]
 800f0a8:	9307      	strlt	r3, [sp, #28]
 800f0aa:	bfb8      	it	lt
 800f0ac:	9204      	strlt	r2, [sp, #16]
 800f0ae:	7823      	ldrb	r3, [r4, #0]
 800f0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0b2:	d10a      	bne.n	800f0ca <_vfiprintf_r+0x156>
 800f0b4:	7863      	ldrb	r3, [r4, #1]
 800f0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0b8:	d132      	bne.n	800f120 <_vfiprintf_r+0x1ac>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	9203      	str	r2, [sp, #12]
 800f0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0c6:	3402      	adds	r4, #2
 800f0c8:	9305      	str	r3, [sp, #20]
 800f0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1a0 <_vfiprintf_r+0x22c>
 800f0ce:	7821      	ldrb	r1, [r4, #0]
 800f0d0:	2203      	movs	r2, #3
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	f7f1 f884 	bl	80001e0 <memchr>
 800f0d8:	b138      	cbz	r0, 800f0ea <_vfiprintf_r+0x176>
 800f0da:	9b04      	ldr	r3, [sp, #16]
 800f0dc:	eba0 000a 	sub.w	r0, r0, sl
 800f0e0:	2240      	movs	r2, #64	@ 0x40
 800f0e2:	4082      	lsls	r2, r0
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ee:	4829      	ldr	r0, [pc, #164]	@ (800f194 <_vfiprintf_r+0x220>)
 800f0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0f4:	2206      	movs	r2, #6
 800f0f6:	f7f1 f873 	bl	80001e0 <memchr>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d03f      	beq.n	800f17e <_vfiprintf_r+0x20a>
 800f0fe:	4b26      	ldr	r3, [pc, #152]	@ (800f198 <_vfiprintf_r+0x224>)
 800f100:	bb1b      	cbnz	r3, 800f14a <_vfiprintf_r+0x1d6>
 800f102:	9b03      	ldr	r3, [sp, #12]
 800f104:	3307      	adds	r3, #7
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	3308      	adds	r3, #8
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f110:	443b      	add	r3, r7
 800f112:	9309      	str	r3, [sp, #36]	@ 0x24
 800f114:	e76a      	b.n	800efec <_vfiprintf_r+0x78>
 800f116:	fb0c 3202 	mla	r2, ip, r2, r3
 800f11a:	460c      	mov	r4, r1
 800f11c:	2001      	movs	r0, #1
 800f11e:	e7a8      	b.n	800f072 <_vfiprintf_r+0xfe>
 800f120:	2300      	movs	r3, #0
 800f122:	3401      	adds	r4, #1
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	4619      	mov	r1, r3
 800f128:	f04f 0c0a 	mov.w	ip, #10
 800f12c:	4620      	mov	r0, r4
 800f12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f132:	3a30      	subs	r2, #48	@ 0x30
 800f134:	2a09      	cmp	r2, #9
 800f136:	d903      	bls.n	800f140 <_vfiprintf_r+0x1cc>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d0c6      	beq.n	800f0ca <_vfiprintf_r+0x156>
 800f13c:	9105      	str	r1, [sp, #20]
 800f13e:	e7c4      	b.n	800f0ca <_vfiprintf_r+0x156>
 800f140:	fb0c 2101 	mla	r1, ip, r1, r2
 800f144:	4604      	mov	r4, r0
 800f146:	2301      	movs	r3, #1
 800f148:	e7f0      	b.n	800f12c <_vfiprintf_r+0x1b8>
 800f14a:	ab03      	add	r3, sp, #12
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	462a      	mov	r2, r5
 800f150:	4b12      	ldr	r3, [pc, #72]	@ (800f19c <_vfiprintf_r+0x228>)
 800f152:	a904      	add	r1, sp, #16
 800f154:	4630      	mov	r0, r6
 800f156:	f7fb febb 	bl	800aed0 <_printf_float>
 800f15a:	4607      	mov	r7, r0
 800f15c:	1c78      	adds	r0, r7, #1
 800f15e:	d1d6      	bne.n	800f10e <_vfiprintf_r+0x19a>
 800f160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f162:	07d9      	lsls	r1, r3, #31
 800f164:	d405      	bmi.n	800f172 <_vfiprintf_r+0x1fe>
 800f166:	89ab      	ldrh	r3, [r5, #12]
 800f168:	059a      	lsls	r2, r3, #22
 800f16a:	d402      	bmi.n	800f172 <_vfiprintf_r+0x1fe>
 800f16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f16e:	f7fc fe1f 	bl	800bdb0 <__retarget_lock_release_recursive>
 800f172:	89ab      	ldrh	r3, [r5, #12]
 800f174:	065b      	lsls	r3, r3, #25
 800f176:	f53f af1f 	bmi.w	800efb8 <_vfiprintf_r+0x44>
 800f17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f17c:	e71e      	b.n	800efbc <_vfiprintf_r+0x48>
 800f17e:	ab03      	add	r3, sp, #12
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	462a      	mov	r2, r5
 800f184:	4b05      	ldr	r3, [pc, #20]	@ (800f19c <_vfiprintf_r+0x228>)
 800f186:	a904      	add	r1, sp, #16
 800f188:	4630      	mov	r0, r6
 800f18a:	f7fc f939 	bl	800b400 <_printf_i>
 800f18e:	e7e4      	b.n	800f15a <_vfiprintf_r+0x1e6>
 800f190:	08010779 	.word	0x08010779
 800f194:	08010783 	.word	0x08010783
 800f198:	0800aed1 	.word	0x0800aed1
 800f19c:	0800ef51 	.word	0x0800ef51
 800f1a0:	0801077f 	.word	0x0801077f

0800f1a4 <__swbuf_r>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	460e      	mov	r6, r1
 800f1a8:	4614      	mov	r4, r2
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	b118      	cbz	r0, 800f1b6 <__swbuf_r+0x12>
 800f1ae:	6a03      	ldr	r3, [r0, #32]
 800f1b0:	b90b      	cbnz	r3, 800f1b6 <__swbuf_r+0x12>
 800f1b2:	f7fc fce5 	bl	800bb80 <__sinit>
 800f1b6:	69a3      	ldr	r3, [r4, #24]
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	071a      	lsls	r2, r3, #28
 800f1be:	d501      	bpl.n	800f1c4 <__swbuf_r+0x20>
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	b943      	cbnz	r3, 800f1d6 <__swbuf_r+0x32>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 f82a 	bl	800f220 <__swsetup_r>
 800f1cc:	b118      	cbz	r0, 800f1d6 <__swbuf_r+0x32>
 800f1ce:	f04f 37ff 	mov.w	r7, #4294967295
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	6922      	ldr	r2, [r4, #16]
 800f1da:	1a98      	subs	r0, r3, r2
 800f1dc:	6963      	ldr	r3, [r4, #20]
 800f1de:	b2f6      	uxtb	r6, r6
 800f1e0:	4283      	cmp	r3, r0
 800f1e2:	4637      	mov	r7, r6
 800f1e4:	dc05      	bgt.n	800f1f2 <__swbuf_r+0x4e>
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f7ff fa47 	bl	800e67c <_fflush_r>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d1ed      	bne.n	800f1ce <__swbuf_r+0x2a>
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	60a3      	str	r3, [r4, #8]
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	6022      	str	r2, [r4, #0]
 800f1fe:	701e      	strb	r6, [r3, #0]
 800f200:	6962      	ldr	r2, [r4, #20]
 800f202:	1c43      	adds	r3, r0, #1
 800f204:	429a      	cmp	r2, r3
 800f206:	d004      	beq.n	800f212 <__swbuf_r+0x6e>
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d5e1      	bpl.n	800f1d2 <__swbuf_r+0x2e>
 800f20e:	2e0a      	cmp	r6, #10
 800f210:	d1df      	bne.n	800f1d2 <__swbuf_r+0x2e>
 800f212:	4621      	mov	r1, r4
 800f214:	4628      	mov	r0, r5
 800f216:	f7ff fa31 	bl	800e67c <_fflush_r>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d0d9      	beq.n	800f1d2 <__swbuf_r+0x2e>
 800f21e:	e7d6      	b.n	800f1ce <__swbuf_r+0x2a>

0800f220 <__swsetup_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4b29      	ldr	r3, [pc, #164]	@ (800f2c8 <__swsetup_r+0xa8>)
 800f224:	4605      	mov	r5, r0
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	460c      	mov	r4, r1
 800f22a:	b118      	cbz	r0, 800f234 <__swsetup_r+0x14>
 800f22c:	6a03      	ldr	r3, [r0, #32]
 800f22e:	b90b      	cbnz	r3, 800f234 <__swsetup_r+0x14>
 800f230:	f7fc fca6 	bl	800bb80 <__sinit>
 800f234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f238:	0719      	lsls	r1, r3, #28
 800f23a:	d422      	bmi.n	800f282 <__swsetup_r+0x62>
 800f23c:	06da      	lsls	r2, r3, #27
 800f23e:	d407      	bmi.n	800f250 <__swsetup_r+0x30>
 800f240:	2209      	movs	r2, #9
 800f242:	602a      	str	r2, [r5, #0]
 800f244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	f04f 30ff 	mov.w	r0, #4294967295
 800f24e:	e033      	b.n	800f2b8 <__swsetup_r+0x98>
 800f250:	0758      	lsls	r0, r3, #29
 800f252:	d512      	bpl.n	800f27a <__swsetup_r+0x5a>
 800f254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f256:	b141      	cbz	r1, 800f26a <__swsetup_r+0x4a>
 800f258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f25c:	4299      	cmp	r1, r3
 800f25e:	d002      	beq.n	800f266 <__swsetup_r+0x46>
 800f260:	4628      	mov	r0, r5
 800f262:	f7fd fbf9 	bl	800ca58 <_free_r>
 800f266:	2300      	movs	r3, #0
 800f268:	6363      	str	r3, [r4, #52]	@ 0x34
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	2300      	movs	r3, #0
 800f274:	6063      	str	r3, [r4, #4]
 800f276:	6923      	ldr	r3, [r4, #16]
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	f043 0308 	orr.w	r3, r3, #8
 800f280:	81a3      	strh	r3, [r4, #12]
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	b94b      	cbnz	r3, 800f29a <__swsetup_r+0x7a>
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f290:	d003      	beq.n	800f29a <__swsetup_r+0x7a>
 800f292:	4621      	mov	r1, r4
 800f294:	4628      	mov	r0, r5
 800f296:	f000 f883 	bl	800f3a0 <__smakebuf_r>
 800f29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29e:	f013 0201 	ands.w	r2, r3, #1
 800f2a2:	d00a      	beq.n	800f2ba <__swsetup_r+0x9a>
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	60a2      	str	r2, [r4, #8]
 800f2a8:	6962      	ldr	r2, [r4, #20]
 800f2aa:	4252      	negs	r2, r2
 800f2ac:	61a2      	str	r2, [r4, #24]
 800f2ae:	6922      	ldr	r2, [r4, #16]
 800f2b0:	b942      	cbnz	r2, 800f2c4 <__swsetup_r+0xa4>
 800f2b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f2b6:	d1c5      	bne.n	800f244 <__swsetup_r+0x24>
 800f2b8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ba:	0799      	lsls	r1, r3, #30
 800f2bc:	bf58      	it	pl
 800f2be:	6962      	ldrpl	r2, [r4, #20]
 800f2c0:	60a2      	str	r2, [r4, #8]
 800f2c2:	e7f4      	b.n	800f2ae <__swsetup_r+0x8e>
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	e7f7      	b.n	800f2b8 <__swsetup_r+0x98>
 800f2c8:	2000010c 	.word	0x2000010c

0800f2cc <_raise_r>:
 800f2cc:	291f      	cmp	r1, #31
 800f2ce:	b538      	push	{r3, r4, r5, lr}
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	d904      	bls.n	800f2e0 <_raise_r+0x14>
 800f2d6:	2316      	movs	r3, #22
 800f2d8:	6003      	str	r3, [r0, #0]
 800f2da:	f04f 30ff 	mov.w	r0, #4294967295
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2e2:	b112      	cbz	r2, 800f2ea <_raise_r+0x1e>
 800f2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2e8:	b94b      	cbnz	r3, 800f2fe <_raise_r+0x32>
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f000 f830 	bl	800f350 <_getpid_r>
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2fa:	f000 b817 	b.w	800f32c <_kill_r>
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d00a      	beq.n	800f318 <_raise_r+0x4c>
 800f302:	1c59      	adds	r1, r3, #1
 800f304:	d103      	bne.n	800f30e <_raise_r+0x42>
 800f306:	2316      	movs	r3, #22
 800f308:	6003      	str	r3, [r0, #0]
 800f30a:	2001      	movs	r0, #1
 800f30c:	e7e7      	b.n	800f2de <_raise_r+0x12>
 800f30e:	2100      	movs	r1, #0
 800f310:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f314:	4620      	mov	r0, r4
 800f316:	4798      	blx	r3
 800f318:	2000      	movs	r0, #0
 800f31a:	e7e0      	b.n	800f2de <_raise_r+0x12>

0800f31c <raise>:
 800f31c:	4b02      	ldr	r3, [pc, #8]	@ (800f328 <raise+0xc>)
 800f31e:	4601      	mov	r1, r0
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	f7ff bfd3 	b.w	800f2cc <_raise_r>
 800f326:	bf00      	nop
 800f328:	2000010c 	.word	0x2000010c

0800f32c <_kill_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	@ (800f34c <_kill_r+0x20>)
 800f330:	2300      	movs	r3, #0
 800f332:	4604      	mov	r4, r0
 800f334:	4608      	mov	r0, r1
 800f336:	4611      	mov	r1, r2
 800f338:	602b      	str	r3, [r5, #0]
 800f33a:	f7f2 fddf 	bl	8001efc <_kill>
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	d102      	bne.n	800f348 <_kill_r+0x1c>
 800f342:	682b      	ldr	r3, [r5, #0]
 800f344:	b103      	cbz	r3, 800f348 <_kill_r+0x1c>
 800f346:	6023      	str	r3, [r4, #0]
 800f348:	bd38      	pop	{r3, r4, r5, pc}
 800f34a:	bf00      	nop
 800f34c:	200021f8 	.word	0x200021f8

0800f350 <_getpid_r>:
 800f350:	f7f2 bdcc 	b.w	8001eec <_getpid>

0800f354 <__swhatbuf_r>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	460c      	mov	r4, r1
 800f358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35c:	2900      	cmp	r1, #0
 800f35e:	b096      	sub	sp, #88	@ 0x58
 800f360:	4615      	mov	r5, r2
 800f362:	461e      	mov	r6, r3
 800f364:	da0d      	bge.n	800f382 <__swhatbuf_r+0x2e>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f36c:	f04f 0100 	mov.w	r1, #0
 800f370:	bf14      	ite	ne
 800f372:	2340      	movne	r3, #64	@ 0x40
 800f374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f378:	2000      	movs	r0, #0
 800f37a:	6031      	str	r1, [r6, #0]
 800f37c:	602b      	str	r3, [r5, #0]
 800f37e:	b016      	add	sp, #88	@ 0x58
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	466a      	mov	r2, sp
 800f384:	f000 f848 	bl	800f418 <_fstat_r>
 800f388:	2800      	cmp	r0, #0
 800f38a:	dbec      	blt.n	800f366 <__swhatbuf_r+0x12>
 800f38c:	9901      	ldr	r1, [sp, #4]
 800f38e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f396:	4259      	negs	r1, r3
 800f398:	4159      	adcs	r1, r3
 800f39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f39e:	e7eb      	b.n	800f378 <__swhatbuf_r+0x24>

0800f3a0 <__smakebuf_r>:
 800f3a0:	898b      	ldrh	r3, [r1, #12]
 800f3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3a4:	079d      	lsls	r5, r3, #30
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	d507      	bpl.n	800f3bc <__smakebuf_r+0x1c>
 800f3ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	6123      	str	r3, [r4, #16]
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	6163      	str	r3, [r4, #20]
 800f3b8:	b003      	add	sp, #12
 800f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3bc:	ab01      	add	r3, sp, #4
 800f3be:	466a      	mov	r2, sp
 800f3c0:	f7ff ffc8 	bl	800f354 <__swhatbuf_r>
 800f3c4:	9f00      	ldr	r7, [sp, #0]
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7fd fbb8 	bl	800cb40 <_malloc_r>
 800f3d0:	b948      	cbnz	r0, 800f3e6 <__smakebuf_r+0x46>
 800f3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d6:	059a      	lsls	r2, r3, #22
 800f3d8:	d4ee      	bmi.n	800f3b8 <__smakebuf_r+0x18>
 800f3da:	f023 0303 	bic.w	r3, r3, #3
 800f3de:	f043 0302 	orr.w	r3, r3, #2
 800f3e2:	81a3      	strh	r3, [r4, #12]
 800f3e4:	e7e2      	b.n	800f3ac <__smakebuf_r+0xc>
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	6020      	str	r0, [r4, #0]
 800f3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3ee:	81a3      	strh	r3, [r4, #12]
 800f3f0:	9b01      	ldr	r3, [sp, #4]
 800f3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3f6:	b15b      	cbz	r3, 800f410 <__smakebuf_r+0x70>
 800f3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f000 f81d 	bl	800f43c <_isatty_r>
 800f402:	b128      	cbz	r0, 800f410 <__smakebuf_r+0x70>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	f023 0303 	bic.w	r3, r3, #3
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	431d      	orrs	r5, r3
 800f414:	81a5      	strh	r5, [r4, #12]
 800f416:	e7cf      	b.n	800f3b8 <__smakebuf_r+0x18>

0800f418 <_fstat_r>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	4d07      	ldr	r5, [pc, #28]	@ (800f438 <_fstat_r+0x20>)
 800f41c:	2300      	movs	r3, #0
 800f41e:	4604      	mov	r4, r0
 800f420:	4608      	mov	r0, r1
 800f422:	4611      	mov	r1, r2
 800f424:	602b      	str	r3, [r5, #0]
 800f426:	f7f2 fdc9 	bl	8001fbc <_fstat>
 800f42a:	1c43      	adds	r3, r0, #1
 800f42c:	d102      	bne.n	800f434 <_fstat_r+0x1c>
 800f42e:	682b      	ldr	r3, [r5, #0]
 800f430:	b103      	cbz	r3, 800f434 <_fstat_r+0x1c>
 800f432:	6023      	str	r3, [r4, #0]
 800f434:	bd38      	pop	{r3, r4, r5, pc}
 800f436:	bf00      	nop
 800f438:	200021f8 	.word	0x200021f8

0800f43c <_isatty_r>:
 800f43c:	b538      	push	{r3, r4, r5, lr}
 800f43e:	4d06      	ldr	r5, [pc, #24]	@ (800f458 <_isatty_r+0x1c>)
 800f440:	2300      	movs	r3, #0
 800f442:	4604      	mov	r4, r0
 800f444:	4608      	mov	r0, r1
 800f446:	602b      	str	r3, [r5, #0]
 800f448:	f7f2 fdc8 	bl	8001fdc <_isatty>
 800f44c:	1c43      	adds	r3, r0, #1
 800f44e:	d102      	bne.n	800f456 <_isatty_r+0x1a>
 800f450:	682b      	ldr	r3, [r5, #0]
 800f452:	b103      	cbz	r3, 800f456 <_isatty_r+0x1a>
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	bd38      	pop	{r3, r4, r5, pc}
 800f458:	200021f8 	.word	0x200021f8

0800f45c <pow>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	ed2d 8b02 	vpush	{d8}
 800f462:	eeb0 8a40 	vmov.f32	s16, s0
 800f466:	eef0 8a60 	vmov.f32	s17, s1
 800f46a:	ec55 4b11 	vmov	r4, r5, d1
 800f46e:	f000 f873 	bl	800f558 <__ieee754_pow>
 800f472:	4622      	mov	r2, r4
 800f474:	462b      	mov	r3, r5
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	ec57 6b10 	vmov	r6, r7, d0
 800f47e:	f7f1 fb5d 	bl	8000b3c <__aeabi_dcmpun>
 800f482:	2800      	cmp	r0, #0
 800f484:	d13b      	bne.n	800f4fe <pow+0xa2>
 800f486:	ec51 0b18 	vmov	r0, r1, d8
 800f48a:	2200      	movs	r2, #0
 800f48c:	2300      	movs	r3, #0
 800f48e:	f7f1 fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 800f492:	b1b8      	cbz	r0, 800f4c4 <pow+0x68>
 800f494:	2200      	movs	r2, #0
 800f496:	2300      	movs	r3, #0
 800f498:	4620      	mov	r0, r4
 800f49a:	4629      	mov	r1, r5
 800f49c:	f7f1 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d146      	bne.n	800f532 <pow+0xd6>
 800f4a4:	ec45 4b10 	vmov	d0, r4, r5
 800f4a8:	f000 f848 	bl	800f53c <finite>
 800f4ac:	b338      	cbz	r0, 800f4fe <pow+0xa2>
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7f1 fb19 	bl	8000aec <__aeabi_dcmplt>
 800f4ba:	b300      	cbz	r0, 800f4fe <pow+0xa2>
 800f4bc:	f7fc fc4c 	bl	800bd58 <__errno>
 800f4c0:	2322      	movs	r3, #34	@ 0x22
 800f4c2:	e01b      	b.n	800f4fc <pow+0xa0>
 800f4c4:	ec47 6b10 	vmov	d0, r6, r7
 800f4c8:	f000 f838 	bl	800f53c <finite>
 800f4cc:	b9e0      	cbnz	r0, 800f508 <pow+0xac>
 800f4ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d2:	eef0 0a68 	vmov.f32	s1, s17
 800f4d6:	f000 f831 	bl	800f53c <finite>
 800f4da:	b1a8      	cbz	r0, 800f508 <pow+0xac>
 800f4dc:	ec45 4b10 	vmov	d0, r4, r5
 800f4e0:	f000 f82c 	bl	800f53c <finite>
 800f4e4:	b180      	cbz	r0, 800f508 <pow+0xac>
 800f4e6:	4632      	mov	r2, r6
 800f4e8:	463b      	mov	r3, r7
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	4639      	mov	r1, r7
 800f4ee:	f7f1 fb25 	bl	8000b3c <__aeabi_dcmpun>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d0e2      	beq.n	800f4bc <pow+0x60>
 800f4f6:	f7fc fc2f 	bl	800bd58 <__errno>
 800f4fa:	2321      	movs	r3, #33	@ 0x21
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	ecbd 8b02 	vpop	{d8}
 800f502:	ec47 6b10 	vmov	d0, r6, r7
 800f506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f508:	2200      	movs	r2, #0
 800f50a:	2300      	movs	r3, #0
 800f50c:	4630      	mov	r0, r6
 800f50e:	4639      	mov	r1, r7
 800f510:	f7f1 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f514:	2800      	cmp	r0, #0
 800f516:	d0f2      	beq.n	800f4fe <pow+0xa2>
 800f518:	eeb0 0a48 	vmov.f32	s0, s16
 800f51c:	eef0 0a68 	vmov.f32	s1, s17
 800f520:	f000 f80c 	bl	800f53c <finite>
 800f524:	2800      	cmp	r0, #0
 800f526:	d0ea      	beq.n	800f4fe <pow+0xa2>
 800f528:	ec45 4b10 	vmov	d0, r4, r5
 800f52c:	f000 f806 	bl	800f53c <finite>
 800f530:	e7c3      	b.n	800f4ba <pow+0x5e>
 800f532:	4f01      	ldr	r7, [pc, #4]	@ (800f538 <pow+0xdc>)
 800f534:	2600      	movs	r6, #0
 800f536:	e7e2      	b.n	800f4fe <pow+0xa2>
 800f538:	3ff00000 	.word	0x3ff00000

0800f53c <finite>:
 800f53c:	b082      	sub	sp, #8
 800f53e:	ed8d 0b00 	vstr	d0, [sp]
 800f542:	9801      	ldr	r0, [sp, #4]
 800f544:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f548:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f54c:	0fc0      	lsrs	r0, r0, #31
 800f54e:	b002      	add	sp, #8
 800f550:	4770      	bx	lr
 800f552:	0000      	movs	r0, r0
 800f554:	0000      	movs	r0, r0
	...

0800f558 <__ieee754_pow>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	b091      	sub	sp, #68	@ 0x44
 800f55e:	ed8d 1b00 	vstr	d1, [sp]
 800f562:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f566:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f56a:	ea5a 0001 	orrs.w	r0, sl, r1
 800f56e:	ec57 6b10 	vmov	r6, r7, d0
 800f572:	d113      	bne.n	800f59c <__ieee754_pow+0x44>
 800f574:	19b3      	adds	r3, r6, r6
 800f576:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f57a:	4152      	adcs	r2, r2
 800f57c:	4298      	cmp	r0, r3
 800f57e:	4b98      	ldr	r3, [pc, #608]	@ (800f7e0 <__ieee754_pow+0x288>)
 800f580:	4193      	sbcs	r3, r2
 800f582:	f080 84ea 	bcs.w	800ff5a <__ieee754_pow+0xa02>
 800f586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f0 fe85 	bl	800029c <__adddf3>
 800f592:	ec41 0b10 	vmov	d0, r0, r1
 800f596:	b011      	add	sp, #68	@ 0x44
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	4a91      	ldr	r2, [pc, #580]	@ (800f7e4 <__ieee754_pow+0x28c>)
 800f59e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f5a2:	4590      	cmp	r8, r2
 800f5a4:	463d      	mov	r5, r7
 800f5a6:	4633      	mov	r3, r6
 800f5a8:	d806      	bhi.n	800f5b8 <__ieee754_pow+0x60>
 800f5aa:	d101      	bne.n	800f5b0 <__ieee754_pow+0x58>
 800f5ac:	2e00      	cmp	r6, #0
 800f5ae:	d1ea      	bne.n	800f586 <__ieee754_pow+0x2e>
 800f5b0:	4592      	cmp	sl, r2
 800f5b2:	d801      	bhi.n	800f5b8 <__ieee754_pow+0x60>
 800f5b4:	d10e      	bne.n	800f5d4 <__ieee754_pow+0x7c>
 800f5b6:	b169      	cbz	r1, 800f5d4 <__ieee754_pow+0x7c>
 800f5b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f5bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f5c0:	431d      	orrs	r5, r3
 800f5c2:	d1e0      	bne.n	800f586 <__ieee754_pow+0x2e>
 800f5c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5c8:	18db      	adds	r3, r3, r3
 800f5ca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f5ce:	4152      	adcs	r2, r2
 800f5d0:	429d      	cmp	r5, r3
 800f5d2:	e7d4      	b.n	800f57e <__ieee754_pow+0x26>
 800f5d4:	2d00      	cmp	r5, #0
 800f5d6:	46c3      	mov	fp, r8
 800f5d8:	da3a      	bge.n	800f650 <__ieee754_pow+0xf8>
 800f5da:	4a83      	ldr	r2, [pc, #524]	@ (800f7e8 <__ieee754_pow+0x290>)
 800f5dc:	4592      	cmp	sl, r2
 800f5de:	d84d      	bhi.n	800f67c <__ieee754_pow+0x124>
 800f5e0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f5e4:	4592      	cmp	sl, r2
 800f5e6:	f240 84c7 	bls.w	800ff78 <__ieee754_pow+0xa20>
 800f5ea:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f5ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f5f2:	2a14      	cmp	r2, #20
 800f5f4:	dd0f      	ble.n	800f616 <__ieee754_pow+0xbe>
 800f5f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f5fa:	fa21 f402 	lsr.w	r4, r1, r2
 800f5fe:	fa04 f202 	lsl.w	r2, r4, r2
 800f602:	428a      	cmp	r2, r1
 800f604:	f040 84b8 	bne.w	800ff78 <__ieee754_pow+0xa20>
 800f608:	f004 0401 	and.w	r4, r4, #1
 800f60c:	f1c4 0402 	rsb	r4, r4, #2
 800f610:	2900      	cmp	r1, #0
 800f612:	d158      	bne.n	800f6c6 <__ieee754_pow+0x16e>
 800f614:	e00e      	b.n	800f634 <__ieee754_pow+0xdc>
 800f616:	2900      	cmp	r1, #0
 800f618:	d154      	bne.n	800f6c4 <__ieee754_pow+0x16c>
 800f61a:	f1c2 0214 	rsb	r2, r2, #20
 800f61e:	fa4a f402 	asr.w	r4, sl, r2
 800f622:	fa04 f202 	lsl.w	r2, r4, r2
 800f626:	4552      	cmp	r2, sl
 800f628:	f040 84a3 	bne.w	800ff72 <__ieee754_pow+0xa1a>
 800f62c:	f004 0401 	and.w	r4, r4, #1
 800f630:	f1c4 0402 	rsb	r4, r4, #2
 800f634:	4a6d      	ldr	r2, [pc, #436]	@ (800f7ec <__ieee754_pow+0x294>)
 800f636:	4592      	cmp	sl, r2
 800f638:	d12e      	bne.n	800f698 <__ieee754_pow+0x140>
 800f63a:	f1b9 0f00 	cmp.w	r9, #0
 800f63e:	f280 8494 	bge.w	800ff6a <__ieee754_pow+0xa12>
 800f642:	496a      	ldr	r1, [pc, #424]	@ (800f7ec <__ieee754_pow+0x294>)
 800f644:	4632      	mov	r2, r6
 800f646:	463b      	mov	r3, r7
 800f648:	2000      	movs	r0, #0
 800f64a:	f7f1 f907 	bl	800085c <__aeabi_ddiv>
 800f64e:	e7a0      	b.n	800f592 <__ieee754_pow+0x3a>
 800f650:	2400      	movs	r4, #0
 800f652:	bbc1      	cbnz	r1, 800f6c6 <__ieee754_pow+0x16e>
 800f654:	4a63      	ldr	r2, [pc, #396]	@ (800f7e4 <__ieee754_pow+0x28c>)
 800f656:	4592      	cmp	sl, r2
 800f658:	d1ec      	bne.n	800f634 <__ieee754_pow+0xdc>
 800f65a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f65e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f662:	431a      	orrs	r2, r3
 800f664:	f000 8479 	beq.w	800ff5a <__ieee754_pow+0xa02>
 800f668:	4b61      	ldr	r3, [pc, #388]	@ (800f7f0 <__ieee754_pow+0x298>)
 800f66a:	4598      	cmp	r8, r3
 800f66c:	d908      	bls.n	800f680 <__ieee754_pow+0x128>
 800f66e:	f1b9 0f00 	cmp.w	r9, #0
 800f672:	f2c0 8476 	blt.w	800ff62 <__ieee754_pow+0xa0a>
 800f676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f67a:	e78a      	b.n	800f592 <__ieee754_pow+0x3a>
 800f67c:	2402      	movs	r4, #2
 800f67e:	e7e8      	b.n	800f652 <__ieee754_pow+0xfa>
 800f680:	f1b9 0f00 	cmp.w	r9, #0
 800f684:	f04f 0000 	mov.w	r0, #0
 800f688:	f04f 0100 	mov.w	r1, #0
 800f68c:	da81      	bge.n	800f592 <__ieee754_pow+0x3a>
 800f68e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f692:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f696:	e77c      	b.n	800f592 <__ieee754_pow+0x3a>
 800f698:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f69c:	d106      	bne.n	800f6ac <__ieee754_pow+0x154>
 800f69e:	4632      	mov	r2, r6
 800f6a0:	463b      	mov	r3, r7
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f7f0 ffaf 	bl	8000608 <__aeabi_dmul>
 800f6aa:	e772      	b.n	800f592 <__ieee754_pow+0x3a>
 800f6ac:	4a51      	ldr	r2, [pc, #324]	@ (800f7f4 <__ieee754_pow+0x29c>)
 800f6ae:	4591      	cmp	r9, r2
 800f6b0:	d109      	bne.n	800f6c6 <__ieee754_pow+0x16e>
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	db07      	blt.n	800f6c6 <__ieee754_pow+0x16e>
 800f6b6:	ec47 6b10 	vmov	d0, r6, r7
 800f6ba:	b011      	add	sp, #68	@ 0x44
 800f6bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	f000 bd52 	b.w	8010168 <__ieee754_sqrt>
 800f6c4:	2400      	movs	r4, #0
 800f6c6:	ec47 6b10 	vmov	d0, r6, r7
 800f6ca:	9302      	str	r3, [sp, #8]
 800f6cc:	f000 fc88 	bl	800ffe0 <fabs>
 800f6d0:	9b02      	ldr	r3, [sp, #8]
 800f6d2:	ec51 0b10 	vmov	r0, r1, d0
 800f6d6:	bb53      	cbnz	r3, 800f72e <__ieee754_pow+0x1d6>
 800f6d8:	4b44      	ldr	r3, [pc, #272]	@ (800f7ec <__ieee754_pow+0x294>)
 800f6da:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d002      	beq.n	800f6e8 <__ieee754_pow+0x190>
 800f6e2:	f1b8 0f00 	cmp.w	r8, #0
 800f6e6:	d122      	bne.n	800f72e <__ieee754_pow+0x1d6>
 800f6e8:	f1b9 0f00 	cmp.w	r9, #0
 800f6ec:	da05      	bge.n	800f6fa <__ieee754_pow+0x1a2>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	493d      	ldr	r1, [pc, #244]	@ (800f7ec <__ieee754_pow+0x294>)
 800f6f6:	f7f1 f8b1 	bl	800085c <__aeabi_ddiv>
 800f6fa:	2d00      	cmp	r5, #0
 800f6fc:	f6bf af49 	bge.w	800f592 <__ieee754_pow+0x3a>
 800f700:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f704:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f708:	ea58 0804 	orrs.w	r8, r8, r4
 800f70c:	d108      	bne.n	800f720 <__ieee754_pow+0x1c8>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4610      	mov	r0, r2
 800f714:	4619      	mov	r1, r3
 800f716:	f7f0 fdbf 	bl	8000298 <__aeabi_dsub>
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	e794      	b.n	800f64a <__ieee754_pow+0xf2>
 800f720:	2c01      	cmp	r4, #1
 800f722:	f47f af36 	bne.w	800f592 <__ieee754_pow+0x3a>
 800f726:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f72a:	4619      	mov	r1, r3
 800f72c:	e731      	b.n	800f592 <__ieee754_pow+0x3a>
 800f72e:	0feb      	lsrs	r3, r5, #31
 800f730:	3b01      	subs	r3, #1
 800f732:	ea53 0204 	orrs.w	r2, r3, r4
 800f736:	d102      	bne.n	800f73e <__ieee754_pow+0x1e6>
 800f738:	4632      	mov	r2, r6
 800f73a:	463b      	mov	r3, r7
 800f73c:	e7e9      	b.n	800f712 <__ieee754_pow+0x1ba>
 800f73e:	3c01      	subs	r4, #1
 800f740:	431c      	orrs	r4, r3
 800f742:	d016      	beq.n	800f772 <__ieee754_pow+0x21a>
 800f744:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f7d0 <__ieee754_pow+0x278>
 800f748:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f74c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f750:	f240 8112 	bls.w	800f978 <__ieee754_pow+0x420>
 800f754:	4b28      	ldr	r3, [pc, #160]	@ (800f7f8 <__ieee754_pow+0x2a0>)
 800f756:	459a      	cmp	sl, r3
 800f758:	4b25      	ldr	r3, [pc, #148]	@ (800f7f0 <__ieee754_pow+0x298>)
 800f75a:	d916      	bls.n	800f78a <__ieee754_pow+0x232>
 800f75c:	4598      	cmp	r8, r3
 800f75e:	d80b      	bhi.n	800f778 <__ieee754_pow+0x220>
 800f760:	f1b9 0f00 	cmp.w	r9, #0
 800f764:	da0b      	bge.n	800f77e <__ieee754_pow+0x226>
 800f766:	2000      	movs	r0, #0
 800f768:	b011      	add	sp, #68	@ 0x44
 800f76a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76e:	f000 bcf3 	b.w	8010158 <__math_oflow>
 800f772:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f7d8 <__ieee754_pow+0x280>
 800f776:	e7e7      	b.n	800f748 <__ieee754_pow+0x1f0>
 800f778:	f1b9 0f00 	cmp.w	r9, #0
 800f77c:	dcf3      	bgt.n	800f766 <__ieee754_pow+0x20e>
 800f77e:	2000      	movs	r0, #0
 800f780:	b011      	add	sp, #68	@ 0x44
 800f782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f786:	f000 bcdf 	b.w	8010148 <__math_uflow>
 800f78a:	4598      	cmp	r8, r3
 800f78c:	d20c      	bcs.n	800f7a8 <__ieee754_pow+0x250>
 800f78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f792:	2200      	movs	r2, #0
 800f794:	2300      	movs	r3, #0
 800f796:	f7f1 f9a9 	bl	8000aec <__aeabi_dcmplt>
 800f79a:	3800      	subs	r0, #0
 800f79c:	bf18      	it	ne
 800f79e:	2001      	movne	r0, #1
 800f7a0:	f1b9 0f00 	cmp.w	r9, #0
 800f7a4:	daec      	bge.n	800f780 <__ieee754_pow+0x228>
 800f7a6:	e7df      	b.n	800f768 <__ieee754_pow+0x210>
 800f7a8:	4b10      	ldr	r3, [pc, #64]	@ (800f7ec <__ieee754_pow+0x294>)
 800f7aa:	4598      	cmp	r8, r3
 800f7ac:	f04f 0200 	mov.w	r2, #0
 800f7b0:	d924      	bls.n	800f7fc <__ieee754_pow+0x2a4>
 800f7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f7f1 f998 	bl	8000aec <__aeabi_dcmplt>
 800f7bc:	3800      	subs	r0, #0
 800f7be:	bf18      	it	ne
 800f7c0:	2001      	movne	r0, #1
 800f7c2:	f1b9 0f00 	cmp.w	r9, #0
 800f7c6:	dccf      	bgt.n	800f768 <__ieee754_pow+0x210>
 800f7c8:	e7da      	b.n	800f780 <__ieee754_pow+0x228>
 800f7ca:	bf00      	nop
 800f7cc:	f3af 8000 	nop.w
 800f7d0:	00000000 	.word	0x00000000
 800f7d4:	3ff00000 	.word	0x3ff00000
 800f7d8:	00000000 	.word	0x00000000
 800f7dc:	bff00000 	.word	0xbff00000
 800f7e0:	fff00000 	.word	0xfff00000
 800f7e4:	7ff00000 	.word	0x7ff00000
 800f7e8:	433fffff 	.word	0x433fffff
 800f7ec:	3ff00000 	.word	0x3ff00000
 800f7f0:	3fefffff 	.word	0x3fefffff
 800f7f4:	3fe00000 	.word	0x3fe00000
 800f7f8:	43f00000 	.word	0x43f00000
 800f7fc:	4b5a      	ldr	r3, [pc, #360]	@ (800f968 <__ieee754_pow+0x410>)
 800f7fe:	f7f0 fd4b 	bl	8000298 <__aeabi_dsub>
 800f802:	a351      	add	r3, pc, #324	@ (adr r3, 800f948 <__ieee754_pow+0x3f0>)
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	4604      	mov	r4, r0
 800f80a:	460d      	mov	r5, r1
 800f80c:	f7f0 fefc 	bl	8000608 <__aeabi_dmul>
 800f810:	a34f      	add	r3, pc, #316	@ (adr r3, 800f950 <__ieee754_pow+0x3f8>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	4620      	mov	r0, r4
 800f81c:	4629      	mov	r1, r5
 800f81e:	f7f0 fef3 	bl	8000608 <__aeabi_dmul>
 800f822:	4b52      	ldr	r3, [pc, #328]	@ (800f96c <__ieee754_pow+0x414>)
 800f824:	4682      	mov	sl, r0
 800f826:	468b      	mov	fp, r1
 800f828:	2200      	movs	r2, #0
 800f82a:	4620      	mov	r0, r4
 800f82c:	4629      	mov	r1, r5
 800f82e:	f7f0 feeb 	bl	8000608 <__aeabi_dmul>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	a148      	add	r1, pc, #288	@ (adr r1, 800f958 <__ieee754_pow+0x400>)
 800f838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83c:	f7f0 fd2c 	bl	8000298 <__aeabi_dsub>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fee0 	bl	8000608 <__aeabi_dmul>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	2000      	movs	r0, #0
 800f84e:	4948      	ldr	r1, [pc, #288]	@ (800f970 <__ieee754_pow+0x418>)
 800f850:	f7f0 fd22 	bl	8000298 <__aeabi_dsub>
 800f854:	4622      	mov	r2, r4
 800f856:	4680      	mov	r8, r0
 800f858:	4689      	mov	r9, r1
 800f85a:	462b      	mov	r3, r5
 800f85c:	4620      	mov	r0, r4
 800f85e:	4629      	mov	r1, r5
 800f860:	f7f0 fed2 	bl	8000608 <__aeabi_dmul>
 800f864:	4602      	mov	r2, r0
 800f866:	460b      	mov	r3, r1
 800f868:	4640      	mov	r0, r8
 800f86a:	4649      	mov	r1, r9
 800f86c:	f7f0 fecc 	bl	8000608 <__aeabi_dmul>
 800f870:	a33b      	add	r3, pc, #236	@ (adr r3, 800f960 <__ieee754_pow+0x408>)
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f7f0 fec7 	bl	8000608 <__aeabi_dmul>
 800f87a:	4602      	mov	r2, r0
 800f87c:	460b      	mov	r3, r1
 800f87e:	4650      	mov	r0, sl
 800f880:	4659      	mov	r1, fp
 800f882:	f7f0 fd09 	bl	8000298 <__aeabi_dsub>
 800f886:	4602      	mov	r2, r0
 800f888:	460b      	mov	r3, r1
 800f88a:	4680      	mov	r8, r0
 800f88c:	4689      	mov	r9, r1
 800f88e:	4630      	mov	r0, r6
 800f890:	4639      	mov	r1, r7
 800f892:	f7f0 fd03 	bl	800029c <__adddf3>
 800f896:	2400      	movs	r4, #0
 800f898:	4632      	mov	r2, r6
 800f89a:	463b      	mov	r3, r7
 800f89c:	4620      	mov	r0, r4
 800f89e:	460d      	mov	r5, r1
 800f8a0:	f7f0 fcfa 	bl	8000298 <__aeabi_dsub>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	f7f0 fcf4 	bl	8000298 <__aeabi_dsub>
 800f8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9304      	str	r3, [sp, #16]
 800f8bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	460f      	mov	r7, r1
 800f8c4:	4652      	mov	r2, sl
 800f8c6:	465b      	mov	r3, fp
 800f8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8cc:	f7f0 fce4 	bl	8000298 <__aeabi_dsub>
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	f7f0 fe98 	bl	8000608 <__aeabi_dmul>
 800f8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8dc:	4680      	mov	r8, r0
 800f8de:	4689      	mov	r9, r1
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	f7f0 fe90 	bl	8000608 <__aeabi_dmul>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	4640      	mov	r0, r8
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	f7f0 fcd4 	bl	800029c <__adddf3>
 800f8f4:	4652      	mov	r2, sl
 800f8f6:	465b      	mov	r3, fp
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	460f      	mov	r7, r1
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	4629      	mov	r1, r5
 800f900:	f7f0 fe82 	bl	8000608 <__aeabi_dmul>
 800f904:	460b      	mov	r3, r1
 800f906:	4602      	mov	r2, r0
 800f908:	4680      	mov	r8, r0
 800f90a:	4689      	mov	r9, r1
 800f90c:	4630      	mov	r0, r6
 800f90e:	4639      	mov	r1, r7
 800f910:	f7f0 fcc4 	bl	800029c <__adddf3>
 800f914:	4b17      	ldr	r3, [pc, #92]	@ (800f974 <__ieee754_pow+0x41c>)
 800f916:	4299      	cmp	r1, r3
 800f918:	4604      	mov	r4, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	468a      	mov	sl, r1
 800f91e:	468b      	mov	fp, r1
 800f920:	f340 82ef 	ble.w	800ff02 <__ieee754_pow+0x9aa>
 800f924:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f928:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f92c:	4303      	orrs	r3, r0
 800f92e:	f000 81e8 	beq.w	800fd02 <__ieee754_pow+0x7aa>
 800f932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f936:	2200      	movs	r2, #0
 800f938:	2300      	movs	r3, #0
 800f93a:	f7f1 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800f93e:	3800      	subs	r0, #0
 800f940:	bf18      	it	ne
 800f942:	2001      	movne	r0, #1
 800f944:	e710      	b.n	800f768 <__ieee754_pow+0x210>
 800f946:	bf00      	nop
 800f948:	60000000 	.word	0x60000000
 800f94c:	3ff71547 	.word	0x3ff71547
 800f950:	f85ddf44 	.word	0xf85ddf44
 800f954:	3e54ae0b 	.word	0x3e54ae0b
 800f958:	55555555 	.word	0x55555555
 800f95c:	3fd55555 	.word	0x3fd55555
 800f960:	652b82fe 	.word	0x652b82fe
 800f964:	3ff71547 	.word	0x3ff71547
 800f968:	3ff00000 	.word	0x3ff00000
 800f96c:	3fd00000 	.word	0x3fd00000
 800f970:	3fe00000 	.word	0x3fe00000
 800f974:	408fffff 	.word	0x408fffff
 800f978:	4bd5      	ldr	r3, [pc, #852]	@ (800fcd0 <__ieee754_pow+0x778>)
 800f97a:	402b      	ands	r3, r5
 800f97c:	2200      	movs	r2, #0
 800f97e:	b92b      	cbnz	r3, 800f98c <__ieee754_pow+0x434>
 800f980:	4bd4      	ldr	r3, [pc, #848]	@ (800fcd4 <__ieee754_pow+0x77c>)
 800f982:	f7f0 fe41 	bl	8000608 <__aeabi_dmul>
 800f986:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f98a:	468b      	mov	fp, r1
 800f98c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f990:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f994:	4413      	add	r3, r2
 800f996:	930a      	str	r3, [sp, #40]	@ 0x28
 800f998:	4bcf      	ldr	r3, [pc, #828]	@ (800fcd8 <__ieee754_pow+0x780>)
 800f99a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f99e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f9a2:	459b      	cmp	fp, r3
 800f9a4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f9a8:	dd08      	ble.n	800f9bc <__ieee754_pow+0x464>
 800f9aa:	4bcc      	ldr	r3, [pc, #816]	@ (800fcdc <__ieee754_pow+0x784>)
 800f9ac:	459b      	cmp	fp, r3
 800f9ae:	f340 81a5 	ble.w	800fcfc <__ieee754_pow+0x7a4>
 800f9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9b8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f9bc:	f04f 0a00 	mov.w	sl, #0
 800f9c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f9c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9c6:	4bc6      	ldr	r3, [pc, #792]	@ (800fce0 <__ieee754_pow+0x788>)
 800f9c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9cc:	ed93 7b00 	vldr	d7, [r3]
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	ec53 2b17 	vmov	r2, r3, d7
 800f9d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9de:	f7f0 fc5b 	bl	8000298 <__aeabi_dsub>
 800f9e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	460f      	mov	r7, r1
 800f9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9ee:	f7f0 fc55 	bl	800029c <__adddf3>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	49ba      	ldr	r1, [pc, #744]	@ (800fce4 <__ieee754_pow+0x78c>)
 800f9fa:	f7f0 ff2f 	bl	800085c <__aeabi_ddiv>
 800f9fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	4630      	mov	r0, r6
 800fa08:	4639      	mov	r1, r7
 800fa0a:	f7f0 fdfd 	bl	8000608 <__aeabi_dmul>
 800fa0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa12:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fa16:	106d      	asrs	r5, r5, #1
 800fa18:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fa1c:	f04f 0b00 	mov.w	fp, #0
 800fa20:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fa24:	4661      	mov	r1, ip
 800fa26:	2200      	movs	r2, #0
 800fa28:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fa2c:	4658      	mov	r0, fp
 800fa2e:	46e1      	mov	r9, ip
 800fa30:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fa34:	4614      	mov	r4, r2
 800fa36:	461d      	mov	r5, r3
 800fa38:	f7f0 fde6 	bl	8000608 <__aeabi_dmul>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4630      	mov	r0, r6
 800fa42:	4639      	mov	r1, r7
 800fa44:	f7f0 fc28 	bl	8000298 <__aeabi_dsub>
 800fa48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
 800fa50:	4620      	mov	r0, r4
 800fa52:	4629      	mov	r1, r5
 800fa54:	f7f0 fc20 	bl	8000298 <__aeabi_dsub>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa60:	f7f0 fc1a 	bl	8000298 <__aeabi_dsub>
 800fa64:	465a      	mov	r2, fp
 800fa66:	464b      	mov	r3, r9
 800fa68:	f7f0 fdce 	bl	8000608 <__aeabi_dmul>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	4630      	mov	r0, r6
 800fa72:	4639      	mov	r1, r7
 800fa74:	f7f0 fc10 	bl	8000298 <__aeabi_dsub>
 800fa78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fa7c:	f7f0 fdc4 	bl	8000608 <__aeabi_dmul>
 800fa80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fa88:	4610      	mov	r0, r2
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	f7f0 fdbc 	bl	8000608 <__aeabi_dmul>
 800fa90:	a37d      	add	r3, pc, #500	@ (adr r3, 800fc88 <__ieee754_pow+0x730>)
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	4604      	mov	r4, r0
 800fa98:	460d      	mov	r5, r1
 800fa9a:	f7f0 fdb5 	bl	8000608 <__aeabi_dmul>
 800fa9e:	a37c      	add	r3, pc, #496	@ (adr r3, 800fc90 <__ieee754_pow+0x738>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	f7f0 fbfa 	bl	800029c <__adddf3>
 800faa8:	4622      	mov	r2, r4
 800faaa:	462b      	mov	r3, r5
 800faac:	f7f0 fdac 	bl	8000608 <__aeabi_dmul>
 800fab0:	a379      	add	r3, pc, #484	@ (adr r3, 800fc98 <__ieee754_pow+0x740>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	f7f0 fbf1 	bl	800029c <__adddf3>
 800faba:	4622      	mov	r2, r4
 800fabc:	462b      	mov	r3, r5
 800fabe:	f7f0 fda3 	bl	8000608 <__aeabi_dmul>
 800fac2:	a377      	add	r3, pc, #476	@ (adr r3, 800fca0 <__ieee754_pow+0x748>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fbe8 	bl	800029c <__adddf3>
 800facc:	4622      	mov	r2, r4
 800face:	462b      	mov	r3, r5
 800fad0:	f7f0 fd9a 	bl	8000608 <__aeabi_dmul>
 800fad4:	a374      	add	r3, pc, #464	@ (adr r3, 800fca8 <__ieee754_pow+0x750>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f7f0 fbdf 	bl	800029c <__adddf3>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fd91 	bl	8000608 <__aeabi_dmul>
 800fae6:	a372      	add	r3, pc, #456	@ (adr r3, 800fcb0 <__ieee754_pow+0x758>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fbd6 	bl	800029c <__adddf3>
 800faf0:	4622      	mov	r2, r4
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	462b      	mov	r3, r5
 800faf8:	4620      	mov	r0, r4
 800fafa:	4629      	mov	r1, r5
 800fafc:	f7f0 fd84 	bl	8000608 <__aeabi_dmul>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4630      	mov	r0, r6
 800fb06:	4639      	mov	r1, r7
 800fb08:	f7f0 fd7e 	bl	8000608 <__aeabi_dmul>
 800fb0c:	465a      	mov	r2, fp
 800fb0e:	4604      	mov	r4, r0
 800fb10:	460d      	mov	r5, r1
 800fb12:	464b      	mov	r3, r9
 800fb14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb18:	f7f0 fbc0 	bl	800029c <__adddf3>
 800fb1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb20:	f7f0 fd72 	bl	8000608 <__aeabi_dmul>
 800fb24:	4622      	mov	r2, r4
 800fb26:	462b      	mov	r3, r5
 800fb28:	f7f0 fbb8 	bl	800029c <__adddf3>
 800fb2c:	465a      	mov	r2, fp
 800fb2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb32:	464b      	mov	r3, r9
 800fb34:	4658      	mov	r0, fp
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7f0 fd66 	bl	8000608 <__aeabi_dmul>
 800fb3c:	4b6a      	ldr	r3, [pc, #424]	@ (800fce8 <__ieee754_pow+0x790>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	4606      	mov	r6, r0
 800fb42:	460f      	mov	r7, r1
 800fb44:	f7f0 fbaa 	bl	800029c <__adddf3>
 800fb48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb4c:	f7f0 fba6 	bl	800029c <__adddf3>
 800fb50:	46d8      	mov	r8, fp
 800fb52:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fb56:	460d      	mov	r5, r1
 800fb58:	465a      	mov	r2, fp
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	4649      	mov	r1, r9
 800fb60:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fb64:	f7f0 fd50 	bl	8000608 <__aeabi_dmul>
 800fb68:	465c      	mov	r4, fp
 800fb6a:	4680      	mov	r8, r0
 800fb6c:	4689      	mov	r9, r1
 800fb6e:	4b5e      	ldr	r3, [pc, #376]	@ (800fce8 <__ieee754_pow+0x790>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	4620      	mov	r0, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	f7f0 fb8f 	bl	8000298 <__aeabi_dsub>
 800fb7a:	4632      	mov	r2, r6
 800fb7c:	463b      	mov	r3, r7
 800fb7e:	f7f0 fb8b 	bl	8000298 <__aeabi_dsub>
 800fb82:	4602      	mov	r2, r0
 800fb84:	460b      	mov	r3, r1
 800fb86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb8a:	f7f0 fb85 	bl	8000298 <__aeabi_dsub>
 800fb8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb92:	f7f0 fd39 	bl	8000608 <__aeabi_dmul>
 800fb96:	4622      	mov	r2, r4
 800fb98:	4606      	mov	r6, r0
 800fb9a:	460f      	mov	r7, r1
 800fb9c:	462b      	mov	r3, r5
 800fb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fba2:	f7f0 fd31 	bl	8000608 <__aeabi_dmul>
 800fba6:	4602      	mov	r2, r0
 800fba8:	460b      	mov	r3, r1
 800fbaa:	4630      	mov	r0, r6
 800fbac:	4639      	mov	r1, r7
 800fbae:	f7f0 fb75 	bl	800029c <__adddf3>
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	460f      	mov	r7, r1
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4640      	mov	r0, r8
 800fbbc:	4649      	mov	r1, r9
 800fbbe:	f7f0 fb6d 	bl	800029c <__adddf3>
 800fbc2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fbc6:	a33c      	add	r3, pc, #240	@ (adr r3, 800fcb8 <__ieee754_pow+0x760>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	4658      	mov	r0, fp
 800fbce:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	f7f0 fd18 	bl	8000608 <__aeabi_dmul>
 800fbd8:	465c      	mov	r4, fp
 800fbda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fbde:	4642      	mov	r2, r8
 800fbe0:	464b      	mov	r3, r9
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	f7f0 fb57 	bl	8000298 <__aeabi_dsub>
 800fbea:	4602      	mov	r2, r0
 800fbec:	460b      	mov	r3, r1
 800fbee:	4630      	mov	r0, r6
 800fbf0:	4639      	mov	r1, r7
 800fbf2:	f7f0 fb51 	bl	8000298 <__aeabi_dsub>
 800fbf6:	a332      	add	r3, pc, #200	@ (adr r3, 800fcc0 <__ieee754_pow+0x768>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	f7f0 fd04 	bl	8000608 <__aeabi_dmul>
 800fc00:	a331      	add	r3, pc, #196	@ (adr r3, 800fcc8 <__ieee754_pow+0x770>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	4606      	mov	r6, r0
 800fc08:	460f      	mov	r7, r1
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	f7f0 fcfb 	bl	8000608 <__aeabi_dmul>
 800fc12:	4602      	mov	r2, r0
 800fc14:	460b      	mov	r3, r1
 800fc16:	4630      	mov	r0, r6
 800fc18:	4639      	mov	r1, r7
 800fc1a:	f7f0 fb3f 	bl	800029c <__adddf3>
 800fc1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc20:	4b32      	ldr	r3, [pc, #200]	@ (800fcec <__ieee754_pow+0x794>)
 800fc22:	4413      	add	r3, r2
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	f7f0 fb38 	bl	800029c <__adddf3>
 800fc2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fc30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc32:	f7f0 fc7f 	bl	8000534 <__aeabi_i2d>
 800fc36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc38:	4b2d      	ldr	r3, [pc, #180]	@ (800fcf0 <__ieee754_pow+0x798>)
 800fc3a:	4413      	add	r3, r2
 800fc3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc40:	4606      	mov	r6, r0
 800fc42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc46:	460f      	mov	r7, r1
 800fc48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc4c:	f7f0 fb26 	bl	800029c <__adddf3>
 800fc50:	4642      	mov	r2, r8
 800fc52:	464b      	mov	r3, r9
 800fc54:	f7f0 fb22 	bl	800029c <__adddf3>
 800fc58:	4632      	mov	r2, r6
 800fc5a:	463b      	mov	r3, r7
 800fc5c:	f7f0 fb1e 	bl	800029c <__adddf3>
 800fc60:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fc64:	4632      	mov	r2, r6
 800fc66:	463b      	mov	r3, r7
 800fc68:	4658      	mov	r0, fp
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	f7f0 fb14 	bl	8000298 <__aeabi_dsub>
 800fc70:	4642      	mov	r2, r8
 800fc72:	464b      	mov	r3, r9
 800fc74:	f7f0 fb10 	bl	8000298 <__aeabi_dsub>
 800fc78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc7c:	f7f0 fb0c 	bl	8000298 <__aeabi_dsub>
 800fc80:	465c      	mov	r4, fp
 800fc82:	4602      	mov	r2, r0
 800fc84:	e036      	b.n	800fcf4 <__ieee754_pow+0x79c>
 800fc86:	bf00      	nop
 800fc88:	4a454eef 	.word	0x4a454eef
 800fc8c:	3fca7e28 	.word	0x3fca7e28
 800fc90:	93c9db65 	.word	0x93c9db65
 800fc94:	3fcd864a 	.word	0x3fcd864a
 800fc98:	a91d4101 	.word	0xa91d4101
 800fc9c:	3fd17460 	.word	0x3fd17460
 800fca0:	518f264d 	.word	0x518f264d
 800fca4:	3fd55555 	.word	0x3fd55555
 800fca8:	db6fabff 	.word	0xdb6fabff
 800fcac:	3fdb6db6 	.word	0x3fdb6db6
 800fcb0:	33333303 	.word	0x33333303
 800fcb4:	3fe33333 	.word	0x3fe33333
 800fcb8:	e0000000 	.word	0xe0000000
 800fcbc:	3feec709 	.word	0x3feec709
 800fcc0:	dc3a03fd 	.word	0xdc3a03fd
 800fcc4:	3feec709 	.word	0x3feec709
 800fcc8:	145b01f5 	.word	0x145b01f5
 800fccc:	be3e2fe0 	.word	0xbe3e2fe0
 800fcd0:	7ff00000 	.word	0x7ff00000
 800fcd4:	43400000 	.word	0x43400000
 800fcd8:	0003988e 	.word	0x0003988e
 800fcdc:	000bb679 	.word	0x000bb679
 800fce0:	08010850 	.word	0x08010850
 800fce4:	3ff00000 	.word	0x3ff00000
 800fce8:	40080000 	.word	0x40080000
 800fcec:	08010830 	.word	0x08010830
 800fcf0:	08010840 	.word	0x08010840
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fcfa:	e5d7      	b.n	800f8ac <__ieee754_pow+0x354>
 800fcfc:	f04f 0a01 	mov.w	sl, #1
 800fd00:	e65e      	b.n	800f9c0 <__ieee754_pow+0x468>
 800fd02:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ffd4 <__ieee754_pow+0xa7c>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	4630      	mov	r0, r6
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	f7f0 fac6 	bl	800029c <__adddf3>
 800fd10:	4642      	mov	r2, r8
 800fd12:	e9cd 0100 	strd	r0, r1, [sp]
 800fd16:	464b      	mov	r3, r9
 800fd18:	4620      	mov	r0, r4
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	f7f0 fabc 	bl	8000298 <__aeabi_dsub>
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd28:	f7f0 fefe 	bl	8000b28 <__aeabi_dcmpgt>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f47f ae00 	bne.w	800f932 <__ieee754_pow+0x3da>
 800fd32:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800fd36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fd3a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800fd3e:	fa43 fa0a 	asr.w	sl, r3, sl
 800fd42:	44da      	add	sl, fp
 800fd44:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fd48:	489d      	ldr	r0, [pc, #628]	@ (800ffc0 <__ieee754_pow+0xa68>)
 800fd4a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fd4e:	4108      	asrs	r0, r1
 800fd50:	ea00 030a 	and.w	r3, r0, sl
 800fd54:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fd58:	f1c1 0114 	rsb	r1, r1, #20
 800fd5c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fd60:	fa4a fa01 	asr.w	sl, sl, r1
 800fd64:	f1bb 0f00 	cmp.w	fp, #0
 800fd68:	4640      	mov	r0, r8
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	f04f 0200 	mov.w	r2, #0
 800fd70:	bfb8      	it	lt
 800fd72:	f1ca 0a00 	rsblt	sl, sl, #0
 800fd76:	f7f0 fa8f 	bl	8000298 <__aeabi_dsub>
 800fd7a:	4680      	mov	r8, r0
 800fd7c:	4689      	mov	r9, r1
 800fd7e:	4632      	mov	r2, r6
 800fd80:	463b      	mov	r3, r7
 800fd82:	4640      	mov	r0, r8
 800fd84:	4649      	mov	r1, r9
 800fd86:	f7f0 fa89 	bl	800029c <__adddf3>
 800fd8a:	2400      	movs	r4, #0
 800fd8c:	a37c      	add	r3, pc, #496	@ (adr r3, 800ff80 <__ieee754_pow+0xa28>)
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	4620      	mov	r0, r4
 800fd94:	460d      	mov	r5, r1
 800fd96:	f7f0 fc37 	bl	8000608 <__aeabi_dmul>
 800fd9a:	4642      	mov	r2, r8
 800fd9c:	e9cd 0100 	strd	r0, r1, [sp]
 800fda0:	464b      	mov	r3, r9
 800fda2:	4620      	mov	r0, r4
 800fda4:	4629      	mov	r1, r5
 800fda6:	f7f0 fa77 	bl	8000298 <__aeabi_dsub>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	460b      	mov	r3, r1
 800fdae:	4630      	mov	r0, r6
 800fdb0:	4639      	mov	r1, r7
 800fdb2:	f7f0 fa71 	bl	8000298 <__aeabi_dsub>
 800fdb6:	a374      	add	r3, pc, #464	@ (adr r3, 800ff88 <__ieee754_pow+0xa30>)
 800fdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbc:	f7f0 fc24 	bl	8000608 <__aeabi_dmul>
 800fdc0:	a373      	add	r3, pc, #460	@ (adr r3, 800ff90 <__ieee754_pow+0xa38>)
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	4680      	mov	r8, r0
 800fdc8:	4689      	mov	r9, r1
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4629      	mov	r1, r5
 800fdce:	f7f0 fc1b 	bl	8000608 <__aeabi_dmul>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	4649      	mov	r1, r9
 800fdda:	f7f0 fa5f 	bl	800029c <__adddf3>
 800fdde:	4604      	mov	r4, r0
 800fde0:	460d      	mov	r5, r1
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdea:	f7f0 fa57 	bl	800029c <__adddf3>
 800fdee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdf2:	4680      	mov	r8, r0
 800fdf4:	4689      	mov	r9, r1
 800fdf6:	f7f0 fa4f 	bl	8000298 <__aeabi_dsub>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	4620      	mov	r0, r4
 800fe00:	4629      	mov	r1, r5
 800fe02:	f7f0 fa49 	bl	8000298 <__aeabi_dsub>
 800fe06:	4642      	mov	r2, r8
 800fe08:	4606      	mov	r6, r0
 800fe0a:	460f      	mov	r7, r1
 800fe0c:	464b      	mov	r3, r9
 800fe0e:	4640      	mov	r0, r8
 800fe10:	4649      	mov	r1, r9
 800fe12:	f7f0 fbf9 	bl	8000608 <__aeabi_dmul>
 800fe16:	a360      	add	r3, pc, #384	@ (adr r3, 800ff98 <__ieee754_pow+0xa40>)
 800fe18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	460d      	mov	r5, r1
 800fe20:	f7f0 fbf2 	bl	8000608 <__aeabi_dmul>
 800fe24:	a35e      	add	r3, pc, #376	@ (adr r3, 800ffa0 <__ieee754_pow+0xa48>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fa35 	bl	8000298 <__aeabi_dsub>
 800fe2e:	4622      	mov	r2, r4
 800fe30:	462b      	mov	r3, r5
 800fe32:	f7f0 fbe9 	bl	8000608 <__aeabi_dmul>
 800fe36:	a35c      	add	r3, pc, #368	@ (adr r3, 800ffa8 <__ieee754_pow+0xa50>)
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	f7f0 fa2e 	bl	800029c <__adddf3>
 800fe40:	4622      	mov	r2, r4
 800fe42:	462b      	mov	r3, r5
 800fe44:	f7f0 fbe0 	bl	8000608 <__aeabi_dmul>
 800fe48:	a359      	add	r3, pc, #356	@ (adr r3, 800ffb0 <__ieee754_pow+0xa58>)
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	f7f0 fa23 	bl	8000298 <__aeabi_dsub>
 800fe52:	4622      	mov	r2, r4
 800fe54:	462b      	mov	r3, r5
 800fe56:	f7f0 fbd7 	bl	8000608 <__aeabi_dmul>
 800fe5a:	a357      	add	r3, pc, #348	@ (adr r3, 800ffb8 <__ieee754_pow+0xa60>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fa1c 	bl	800029c <__adddf3>
 800fe64:	4622      	mov	r2, r4
 800fe66:	462b      	mov	r3, r5
 800fe68:	f7f0 fbce 	bl	8000608 <__aeabi_dmul>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	4640      	mov	r0, r8
 800fe72:	4649      	mov	r1, r9
 800fe74:	f7f0 fa10 	bl	8000298 <__aeabi_dsub>
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	4640      	mov	r0, r8
 800fe82:	4649      	mov	r1, r9
 800fe84:	f7f0 fbc0 	bl	8000608 <__aeabi_dmul>
 800fe88:	2200      	movs	r2, #0
 800fe8a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fe92:	4620      	mov	r0, r4
 800fe94:	4629      	mov	r1, r5
 800fe96:	f7f0 f9ff 	bl	8000298 <__aeabi_dsub>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fea2:	f7f0 fcdb 	bl	800085c <__aeabi_ddiv>
 800fea6:	4632      	mov	r2, r6
 800fea8:	4604      	mov	r4, r0
 800feaa:	460d      	mov	r5, r1
 800feac:	463b      	mov	r3, r7
 800feae:	4640      	mov	r0, r8
 800feb0:	4649      	mov	r1, r9
 800feb2:	f7f0 fba9 	bl	8000608 <__aeabi_dmul>
 800feb6:	4632      	mov	r2, r6
 800feb8:	463b      	mov	r3, r7
 800feba:	f7f0 f9ef 	bl	800029c <__adddf3>
 800febe:	4602      	mov	r2, r0
 800fec0:	460b      	mov	r3, r1
 800fec2:	4620      	mov	r0, r4
 800fec4:	4629      	mov	r1, r5
 800fec6:	f7f0 f9e7 	bl	8000298 <__aeabi_dsub>
 800feca:	4642      	mov	r2, r8
 800fecc:	464b      	mov	r3, r9
 800fece:	f7f0 f9e3 	bl	8000298 <__aeabi_dsub>
 800fed2:	460b      	mov	r3, r1
 800fed4:	4602      	mov	r2, r0
 800fed6:	493b      	ldr	r1, [pc, #236]	@ (800ffc4 <__ieee754_pow+0xa6c>)
 800fed8:	2000      	movs	r0, #0
 800feda:	f7f0 f9dd 	bl	8000298 <__aeabi_dsub>
 800fede:	ec41 0b10 	vmov	d0, r0, r1
 800fee2:	ee10 3a90 	vmov	r3, s1
 800fee6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800feea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800feee:	da30      	bge.n	800ff52 <__ieee754_pow+0x9fa>
 800fef0:	4650      	mov	r0, sl
 800fef2:	f000 f87d 	bl	800fff0 <scalbn>
 800fef6:	ec51 0b10 	vmov	r0, r1, d0
 800fefa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fefe:	f7ff bbd2 	b.w	800f6a6 <__ieee754_pow+0x14e>
 800ff02:	4c31      	ldr	r4, [pc, #196]	@ (800ffc8 <__ieee754_pow+0xa70>)
 800ff04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff08:	42a3      	cmp	r3, r4
 800ff0a:	d91a      	bls.n	800ff42 <__ieee754_pow+0x9ea>
 800ff0c:	4b2f      	ldr	r3, [pc, #188]	@ (800ffcc <__ieee754_pow+0xa74>)
 800ff0e:	440b      	add	r3, r1
 800ff10:	4303      	orrs	r3, r0
 800ff12:	d009      	beq.n	800ff28 <__ieee754_pow+0x9d0>
 800ff14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f7f0 fde6 	bl	8000aec <__aeabi_dcmplt>
 800ff20:	3800      	subs	r0, #0
 800ff22:	bf18      	it	ne
 800ff24:	2001      	movne	r0, #1
 800ff26:	e42b      	b.n	800f780 <__ieee754_pow+0x228>
 800ff28:	4642      	mov	r2, r8
 800ff2a:	464b      	mov	r3, r9
 800ff2c:	f7f0 f9b4 	bl	8000298 <__aeabi_dsub>
 800ff30:	4632      	mov	r2, r6
 800ff32:	463b      	mov	r3, r7
 800ff34:	f7f0 fdee 	bl	8000b14 <__aeabi_dcmpge>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d1eb      	bne.n	800ff14 <__ieee754_pow+0x9bc>
 800ff3c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ffdc <__ieee754_pow+0xa84>
 800ff40:	e6f7      	b.n	800fd32 <__ieee754_pow+0x7da>
 800ff42:	469a      	mov	sl, r3
 800ff44:	4b22      	ldr	r3, [pc, #136]	@ (800ffd0 <__ieee754_pow+0xa78>)
 800ff46:	459a      	cmp	sl, r3
 800ff48:	f63f aef3 	bhi.w	800fd32 <__ieee754_pow+0x7da>
 800ff4c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ff50:	e715      	b.n	800fd7e <__ieee754_pow+0x826>
 800ff52:	ec51 0b10 	vmov	r0, r1, d0
 800ff56:	4619      	mov	r1, r3
 800ff58:	e7cf      	b.n	800fefa <__ieee754_pow+0x9a2>
 800ff5a:	491a      	ldr	r1, [pc, #104]	@ (800ffc4 <__ieee754_pow+0xa6c>)
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f7ff bb18 	b.w	800f592 <__ieee754_pow+0x3a>
 800ff62:	2000      	movs	r0, #0
 800ff64:	2100      	movs	r1, #0
 800ff66:	f7ff bb14 	b.w	800f592 <__ieee754_pow+0x3a>
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	f7ff bb10 	b.w	800f592 <__ieee754_pow+0x3a>
 800ff72:	460c      	mov	r4, r1
 800ff74:	f7ff bb5e 	b.w	800f634 <__ieee754_pow+0xdc>
 800ff78:	2400      	movs	r4, #0
 800ff7a:	f7ff bb49 	b.w	800f610 <__ieee754_pow+0xb8>
 800ff7e:	bf00      	nop
 800ff80:	00000000 	.word	0x00000000
 800ff84:	3fe62e43 	.word	0x3fe62e43
 800ff88:	fefa39ef 	.word	0xfefa39ef
 800ff8c:	3fe62e42 	.word	0x3fe62e42
 800ff90:	0ca86c39 	.word	0x0ca86c39
 800ff94:	be205c61 	.word	0xbe205c61
 800ff98:	72bea4d0 	.word	0x72bea4d0
 800ff9c:	3e663769 	.word	0x3e663769
 800ffa0:	c5d26bf1 	.word	0xc5d26bf1
 800ffa4:	3ebbbd41 	.word	0x3ebbbd41
 800ffa8:	af25de2c 	.word	0xaf25de2c
 800ffac:	3f11566a 	.word	0x3f11566a
 800ffb0:	16bebd93 	.word	0x16bebd93
 800ffb4:	3f66c16c 	.word	0x3f66c16c
 800ffb8:	5555553e 	.word	0x5555553e
 800ffbc:	3fc55555 	.word	0x3fc55555
 800ffc0:	fff00000 	.word	0xfff00000
 800ffc4:	3ff00000 	.word	0x3ff00000
 800ffc8:	4090cbff 	.word	0x4090cbff
 800ffcc:	3f6f3400 	.word	0x3f6f3400
 800ffd0:	3fe00000 	.word	0x3fe00000
 800ffd4:	652b82fe 	.word	0x652b82fe
 800ffd8:	3c971547 	.word	0x3c971547
 800ffdc:	4090cc00 	.word	0x4090cc00

0800ffe0 <fabs>:
 800ffe0:	ec51 0b10 	vmov	r0, r1, d0
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ffea:	ec43 2b10 	vmov	d0, r2, r3
 800ffee:	4770      	bx	lr

0800fff0 <scalbn>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	ec55 4b10 	vmov	r4, r5, d0
 800fff6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fffa:	4606      	mov	r6, r0
 800fffc:	462b      	mov	r3, r5
 800fffe:	b991      	cbnz	r1, 8010026 <scalbn+0x36>
 8010000:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010004:	4323      	orrs	r3, r4
 8010006:	d03d      	beq.n	8010084 <scalbn+0x94>
 8010008:	4b35      	ldr	r3, [pc, #212]	@ (80100e0 <scalbn+0xf0>)
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	2200      	movs	r2, #0
 8010010:	f7f0 fafa 	bl	8000608 <__aeabi_dmul>
 8010014:	4b33      	ldr	r3, [pc, #204]	@ (80100e4 <scalbn+0xf4>)
 8010016:	429e      	cmp	r6, r3
 8010018:	4604      	mov	r4, r0
 801001a:	460d      	mov	r5, r1
 801001c:	da0f      	bge.n	801003e <scalbn+0x4e>
 801001e:	a328      	add	r3, pc, #160	@ (adr r3, 80100c0 <scalbn+0xd0>)
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	e01e      	b.n	8010064 <scalbn+0x74>
 8010026:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801002a:	4291      	cmp	r1, r2
 801002c:	d10b      	bne.n	8010046 <scalbn+0x56>
 801002e:	4622      	mov	r2, r4
 8010030:	4620      	mov	r0, r4
 8010032:	4629      	mov	r1, r5
 8010034:	f7f0 f932 	bl	800029c <__adddf3>
 8010038:	4604      	mov	r4, r0
 801003a:	460d      	mov	r5, r1
 801003c:	e022      	b.n	8010084 <scalbn+0x94>
 801003e:	460b      	mov	r3, r1
 8010040:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010044:	3936      	subs	r1, #54	@ 0x36
 8010046:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801004a:	4296      	cmp	r6, r2
 801004c:	dd0d      	ble.n	801006a <scalbn+0x7a>
 801004e:	2d00      	cmp	r5, #0
 8010050:	a11d      	add	r1, pc, #116	@ (adr r1, 80100c8 <scalbn+0xd8>)
 8010052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010056:	da02      	bge.n	801005e <scalbn+0x6e>
 8010058:	a11d      	add	r1, pc, #116	@ (adr r1, 80100d0 <scalbn+0xe0>)
 801005a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801005e:	a31a      	add	r3, pc, #104	@ (adr r3, 80100c8 <scalbn+0xd8>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 fad0 	bl	8000608 <__aeabi_dmul>
 8010068:	e7e6      	b.n	8010038 <scalbn+0x48>
 801006a:	1872      	adds	r2, r6, r1
 801006c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010070:	428a      	cmp	r2, r1
 8010072:	dcec      	bgt.n	801004e <scalbn+0x5e>
 8010074:	2a00      	cmp	r2, #0
 8010076:	dd08      	ble.n	801008a <scalbn+0x9a>
 8010078:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801007c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010080:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010084:	ec45 4b10 	vmov	d0, r4, r5
 8010088:	bd70      	pop	{r4, r5, r6, pc}
 801008a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801008e:	da08      	bge.n	80100a2 <scalbn+0xb2>
 8010090:	2d00      	cmp	r5, #0
 8010092:	a10b      	add	r1, pc, #44	@ (adr r1, 80100c0 <scalbn+0xd0>)
 8010094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010098:	dac1      	bge.n	801001e <scalbn+0x2e>
 801009a:	a10f      	add	r1, pc, #60	@ (adr r1, 80100d8 <scalbn+0xe8>)
 801009c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a0:	e7bd      	b.n	801001e <scalbn+0x2e>
 80100a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80100a6:	3236      	adds	r2, #54	@ 0x36
 80100a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80100ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100b0:	4620      	mov	r0, r4
 80100b2:	4b0d      	ldr	r3, [pc, #52]	@ (80100e8 <scalbn+0xf8>)
 80100b4:	4629      	mov	r1, r5
 80100b6:	2200      	movs	r2, #0
 80100b8:	e7d4      	b.n	8010064 <scalbn+0x74>
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w
 80100c0:	c2f8f359 	.word	0xc2f8f359
 80100c4:	01a56e1f 	.word	0x01a56e1f
 80100c8:	8800759c 	.word	0x8800759c
 80100cc:	7e37e43c 	.word	0x7e37e43c
 80100d0:	8800759c 	.word	0x8800759c
 80100d4:	fe37e43c 	.word	0xfe37e43c
 80100d8:	c2f8f359 	.word	0xc2f8f359
 80100dc:	81a56e1f 	.word	0x81a56e1f
 80100e0:	43500000 	.word	0x43500000
 80100e4:	ffff3cb0 	.word	0xffff3cb0
 80100e8:	3c900000 	.word	0x3c900000

080100ec <with_errno>:
 80100ec:	b510      	push	{r4, lr}
 80100ee:	ed2d 8b02 	vpush	{d8}
 80100f2:	eeb0 8a40 	vmov.f32	s16, s0
 80100f6:	eef0 8a60 	vmov.f32	s17, s1
 80100fa:	4604      	mov	r4, r0
 80100fc:	f7fb fe2c 	bl	800bd58 <__errno>
 8010100:	eeb0 0a48 	vmov.f32	s0, s16
 8010104:	eef0 0a68 	vmov.f32	s1, s17
 8010108:	ecbd 8b02 	vpop	{d8}
 801010c:	6004      	str	r4, [r0, #0]
 801010e:	bd10      	pop	{r4, pc}

08010110 <xflow>:
 8010110:	4603      	mov	r3, r0
 8010112:	b507      	push	{r0, r1, r2, lr}
 8010114:	ec51 0b10 	vmov	r0, r1, d0
 8010118:	b183      	cbz	r3, 801013c <xflow+0x2c>
 801011a:	4602      	mov	r2, r0
 801011c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010120:	e9cd 2300 	strd	r2, r3, [sp]
 8010124:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010128:	f7f0 fa6e 	bl	8000608 <__aeabi_dmul>
 801012c:	ec41 0b10 	vmov	d0, r0, r1
 8010130:	2022      	movs	r0, #34	@ 0x22
 8010132:	b003      	add	sp, #12
 8010134:	f85d eb04 	ldr.w	lr, [sp], #4
 8010138:	f7ff bfd8 	b.w	80100ec <with_errno>
 801013c:	4602      	mov	r2, r0
 801013e:	460b      	mov	r3, r1
 8010140:	e7ee      	b.n	8010120 <xflow+0x10>
 8010142:	0000      	movs	r0, r0
 8010144:	0000      	movs	r0, r0
	...

08010148 <__math_uflow>:
 8010148:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010150 <__math_uflow+0x8>
 801014c:	f7ff bfe0 	b.w	8010110 <xflow>
 8010150:	00000000 	.word	0x00000000
 8010154:	10000000 	.word	0x10000000

08010158 <__math_oflow>:
 8010158:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010160 <__math_oflow+0x8>
 801015c:	f7ff bfd8 	b.w	8010110 <xflow>
 8010160:	00000000 	.word	0x00000000
 8010164:	70000000 	.word	0x70000000

08010168 <__ieee754_sqrt>:
 8010168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016c:	4a68      	ldr	r2, [pc, #416]	@ (8010310 <__ieee754_sqrt+0x1a8>)
 801016e:	ec55 4b10 	vmov	r4, r5, d0
 8010172:	43aa      	bics	r2, r5
 8010174:	462b      	mov	r3, r5
 8010176:	4621      	mov	r1, r4
 8010178:	d110      	bne.n	801019c <__ieee754_sqrt+0x34>
 801017a:	4622      	mov	r2, r4
 801017c:	4620      	mov	r0, r4
 801017e:	4629      	mov	r1, r5
 8010180:	f7f0 fa42 	bl	8000608 <__aeabi_dmul>
 8010184:	4602      	mov	r2, r0
 8010186:	460b      	mov	r3, r1
 8010188:	4620      	mov	r0, r4
 801018a:	4629      	mov	r1, r5
 801018c:	f7f0 f886 	bl	800029c <__adddf3>
 8010190:	4604      	mov	r4, r0
 8010192:	460d      	mov	r5, r1
 8010194:	ec45 4b10 	vmov	d0, r4, r5
 8010198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019c:	2d00      	cmp	r5, #0
 801019e:	dc0e      	bgt.n	80101be <__ieee754_sqrt+0x56>
 80101a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80101a4:	4322      	orrs	r2, r4
 80101a6:	d0f5      	beq.n	8010194 <__ieee754_sqrt+0x2c>
 80101a8:	b19d      	cbz	r5, 80101d2 <__ieee754_sqrt+0x6a>
 80101aa:	4622      	mov	r2, r4
 80101ac:	4620      	mov	r0, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7f0 f872 	bl	8000298 <__aeabi_dsub>
 80101b4:	4602      	mov	r2, r0
 80101b6:	460b      	mov	r3, r1
 80101b8:	f7f0 fb50 	bl	800085c <__aeabi_ddiv>
 80101bc:	e7e8      	b.n	8010190 <__ieee754_sqrt+0x28>
 80101be:	152a      	asrs	r2, r5, #20
 80101c0:	d115      	bne.n	80101ee <__ieee754_sqrt+0x86>
 80101c2:	2000      	movs	r0, #0
 80101c4:	e009      	b.n	80101da <__ieee754_sqrt+0x72>
 80101c6:	0acb      	lsrs	r3, r1, #11
 80101c8:	3a15      	subs	r2, #21
 80101ca:	0549      	lsls	r1, r1, #21
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d0fa      	beq.n	80101c6 <__ieee754_sqrt+0x5e>
 80101d0:	e7f7      	b.n	80101c2 <__ieee754_sqrt+0x5a>
 80101d2:	462a      	mov	r2, r5
 80101d4:	e7fa      	b.n	80101cc <__ieee754_sqrt+0x64>
 80101d6:	005b      	lsls	r3, r3, #1
 80101d8:	3001      	adds	r0, #1
 80101da:	02dc      	lsls	r4, r3, #11
 80101dc:	d5fb      	bpl.n	80101d6 <__ieee754_sqrt+0x6e>
 80101de:	1e44      	subs	r4, r0, #1
 80101e0:	1b12      	subs	r2, r2, r4
 80101e2:	f1c0 0420 	rsb	r4, r0, #32
 80101e6:	fa21 f404 	lsr.w	r4, r1, r4
 80101ea:	4323      	orrs	r3, r4
 80101ec:	4081      	lsls	r1, r0
 80101ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80101f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80101fa:	07d2      	lsls	r2, r2, #31
 80101fc:	bf5c      	itt	pl
 80101fe:	005b      	lslpl	r3, r3, #1
 8010200:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010208:	bf58      	it	pl
 801020a:	0049      	lslpl	r1, r1, #1
 801020c:	2600      	movs	r6, #0
 801020e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010212:	106d      	asrs	r5, r5, #1
 8010214:	0049      	lsls	r1, r1, #1
 8010216:	2016      	movs	r0, #22
 8010218:	4632      	mov	r2, r6
 801021a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801021e:	1917      	adds	r7, r2, r4
 8010220:	429f      	cmp	r7, r3
 8010222:	bfde      	ittt	le
 8010224:	193a      	addle	r2, r7, r4
 8010226:	1bdb      	suble	r3, r3, r7
 8010228:	1936      	addle	r6, r6, r4
 801022a:	0fcf      	lsrs	r7, r1, #31
 801022c:	3801      	subs	r0, #1
 801022e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010232:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010236:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801023a:	d1f0      	bne.n	801021e <__ieee754_sqrt+0xb6>
 801023c:	4604      	mov	r4, r0
 801023e:	2720      	movs	r7, #32
 8010240:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010244:	429a      	cmp	r2, r3
 8010246:	eb00 0e0c 	add.w	lr, r0, ip
 801024a:	db02      	blt.n	8010252 <__ieee754_sqrt+0xea>
 801024c:	d113      	bne.n	8010276 <__ieee754_sqrt+0x10e>
 801024e:	458e      	cmp	lr, r1
 8010250:	d811      	bhi.n	8010276 <__ieee754_sqrt+0x10e>
 8010252:	f1be 0f00 	cmp.w	lr, #0
 8010256:	eb0e 000c 	add.w	r0, lr, ip
 801025a:	da42      	bge.n	80102e2 <__ieee754_sqrt+0x17a>
 801025c:	2800      	cmp	r0, #0
 801025e:	db40      	blt.n	80102e2 <__ieee754_sqrt+0x17a>
 8010260:	f102 0801 	add.w	r8, r2, #1
 8010264:	1a9b      	subs	r3, r3, r2
 8010266:	458e      	cmp	lr, r1
 8010268:	bf88      	it	hi
 801026a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801026e:	eba1 010e 	sub.w	r1, r1, lr
 8010272:	4464      	add	r4, ip
 8010274:	4642      	mov	r2, r8
 8010276:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801027a:	3f01      	subs	r7, #1
 801027c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010280:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010284:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010288:	d1dc      	bne.n	8010244 <__ieee754_sqrt+0xdc>
 801028a:	4319      	orrs	r1, r3
 801028c:	d01b      	beq.n	80102c6 <__ieee754_sqrt+0x15e>
 801028e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010314 <__ieee754_sqrt+0x1ac>
 8010292:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010318 <__ieee754_sqrt+0x1b0>
 8010296:	e9da 0100 	ldrd	r0, r1, [sl]
 801029a:	e9db 2300 	ldrd	r2, r3, [fp]
 801029e:	f7ef fffb 	bl	8000298 <__aeabi_dsub>
 80102a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	4640      	mov	r0, r8
 80102ac:	4649      	mov	r1, r9
 80102ae:	f7f0 fc27 	bl	8000b00 <__aeabi_dcmple>
 80102b2:	b140      	cbz	r0, 80102c6 <__ieee754_sqrt+0x15e>
 80102b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80102b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80102bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80102c0:	d111      	bne.n	80102e6 <__ieee754_sqrt+0x17e>
 80102c2:	3601      	adds	r6, #1
 80102c4:	463c      	mov	r4, r7
 80102c6:	1072      	asrs	r2, r6, #1
 80102c8:	0863      	lsrs	r3, r4, #1
 80102ca:	07f1      	lsls	r1, r6, #31
 80102cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80102d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80102d4:	bf48      	it	mi
 80102d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80102da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80102de:	4618      	mov	r0, r3
 80102e0:	e756      	b.n	8010190 <__ieee754_sqrt+0x28>
 80102e2:	4690      	mov	r8, r2
 80102e4:	e7be      	b.n	8010264 <__ieee754_sqrt+0xfc>
 80102e6:	f7ef ffd9 	bl	800029c <__adddf3>
 80102ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4640      	mov	r0, r8
 80102f4:	4649      	mov	r1, r9
 80102f6:	f7f0 fbf9 	bl	8000aec <__aeabi_dcmplt>
 80102fa:	b120      	cbz	r0, 8010306 <__ieee754_sqrt+0x19e>
 80102fc:	1ca0      	adds	r0, r4, #2
 80102fe:	bf08      	it	eq
 8010300:	3601      	addeq	r6, #1
 8010302:	3402      	adds	r4, #2
 8010304:	e7df      	b.n	80102c6 <__ieee754_sqrt+0x15e>
 8010306:	1c63      	adds	r3, r4, #1
 8010308:	f023 0401 	bic.w	r4, r3, #1
 801030c:	e7db      	b.n	80102c6 <__ieee754_sqrt+0x15e>
 801030e:	bf00      	nop
 8010310:	7ff00000 	.word	0x7ff00000
 8010314:	200002d0 	.word	0x200002d0
 8010318:	200002c8 	.word	0x200002c8

0801031c <_init>:
 801031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031e:	bf00      	nop
 8010320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010322:	bc08      	pop	{r3}
 8010324:	469e      	mov	lr, r3
 8010326:	4770      	bx	lr

08010328 <_fini>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	bf00      	nop
 801032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801032e:	bc08      	pop	{r3}
 8010330:	469e      	mov	lr, r3
 8010332:	4770      	bx	lr
