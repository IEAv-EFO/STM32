
ESP301_Bluetooth_Bridge_USART1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d0c  08002d0c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d0c  08002d0c  00003d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d14  08002d14  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d14  08002d14  00003d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d18  08002d18  00003d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08002d28  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002d28  00004148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008441  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001693  00000000  00000000  0000c47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000555  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152fd  00000000  00000000  0000e75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000876a  00000000  00000000  00023a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085337  00000000  00000000  0002c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b14fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b90  00000000  00000000  000b1540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000b30d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002cdc 	.word	0x08002cdc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002cdc 	.word	0x08002cdc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fbdb 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f86d 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f927 	bl	8000764 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000516:	f000 f8d1 	bl	80006bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f8f9 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Configura prioridades das interrupções no NVIC para máxima responsividade
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0); // Prioridade máxima para USART1
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2025      	movs	r0, #37	@ 0x25
 8000524:	f000 fd3f 	bl	8000fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1); // Prioridade ligeiramente menor para USART2
 8000528:	2201      	movs	r2, #1
 800052a:	2100      	movs	r1, #0
 800052c:	2026      	movs	r0, #38	@ 0x26
 800052e:	f000 fd3a 	bl	8000fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000532:	2025      	movs	r0, #37	@ 0x25
 8000534:	f000 fd53 	bl	8000fde <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000538:	2026      	movs	r0, #38	@ 0x26
 800053a:	f000 fd50 	bl	8000fde <HAL_NVIC_EnableIRQ>

  // Piscar LED para indicar inicialização
  for (int i = 0; i < 8; i++) {
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e00a      	b.n	800055a <main+0x56>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000548:	481e      	ldr	r0, [pc, #120]	@ (80005c4 <main+0xc0>)
 800054a:	f000 ff92 	bl	8001472 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800054e:	2064      	movs	r0, #100	@ 0x64
 8000550:	f000 fc2a 	bl	8000da8 <HAL_Delay>
  for (int i = 0; i < 8; i++) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b07      	cmp	r3, #7
 800055e:	ddf1      	ble.n	8000544 <main+0x40>
  }

  // Inicia recepção com interrupção em ambas as UARTs
  HAL_UART_Receive_IT(&huart1, usart1_rx_buffer, 1); // USART1 (Bluetooth)
 8000560:	2201      	movs	r2, #1
 8000562:	4919      	ldr	r1, [pc, #100]	@ (80005c8 <main+0xc4>)
 8000564:	4819      	ldr	r0, [pc, #100]	@ (80005cc <main+0xc8>)
 8000566:	f001 fc7d 	bl	8001e64 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, usart2_rx_buffer, 1); // USART2 (ESP301)
 800056a:	2201      	movs	r2, #1
 800056c:	4918      	ldr	r1, [pc, #96]	@ (80005d0 <main+0xcc>)
 800056e:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <main+0xd0>)
 8000570:	f001 fc78 	bl	8001e64 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Processar dados acumulados com timeout
    uint32_t current_time = HAL_GetTick();
 8000574:	f000 fc0c 	bl	8000d90 <HAL_GetTick>
 8000578:	6038      	str	r0, [r7, #0]
    if (!usart1_busy && usart1_rx_index > 0 && (current_time - last_rx_time > TIMEOUT_MS)) {
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <main+0xd4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10c      	bne.n	800059e <main+0x9a>
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <main+0xd8>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	b29b      	uxth	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d007      	beq.n	800059e <main+0x9a>
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <main+0xdc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	2bc8      	cmp	r3, #200	@ 0xc8
 8000598:	d901      	bls.n	800059e <main+0x9a>
      Process_USART1_Data();
 800059a:	f000 f9c3 	bl	8000924 <Process_USART1_Data>
    }
    if (!usart2_busy && usart2_rx_index > 0 && (current_time - last_rx_time > TIMEOUT_MS)) {
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <main+0xe0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1e5      	bne.n	8000574 <main+0x70>
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <main+0xe4>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0e0      	beq.n	8000574 <main+0x70>
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <main+0xdc>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80005bc:	d9da      	bls.n	8000574 <main+0x70>
      Process_USART2_Data();
 80005be:	f000 f9dd 	bl	800097c <Process_USART2_Data>
  {
 80005c2:	e7d7      	b.n	8000574 <main+0x70>
 80005c4:	40020800 	.word	0x40020800
 80005c8:	200000b8 	.word	0x200000b8
 80005cc:	20000028 	.word	0x20000028
 80005d0:	200000f8 	.word	0x200000f8
 80005d4:	20000070 	.word	0x20000070
 80005d8:	2000013c 	.word	0x2000013c
 80005dc:	20000138 	.word	0x20000138
 80005e0:	20000140 	.word	0x20000140
 80005e4:	2000013d 	.word	0x2000013d
 80005e8:	2000013a 	.word	0x2000013a

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fb42 	bl	8002c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800065c:	230c      	movs	r3, #12
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ff19 	bl	80014a8 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f9e8 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f97b 	bl	8001998 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 f9d2 	bl	8000a50 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART1_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f001 fb30 	bl	8001d58 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f9a7 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	40011000 	.word	0x40011000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000740:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800074a:	f001 fb05 	bl	8001d58 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000754:	f000 f97c 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000070 	.word	0x20000070
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_GPIO_Init+0x9c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <MX_GPIO_Init+0x9c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_GPIO_Init+0x9c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_GPIO_Init+0x9c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x9c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x9c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <MX_GPIO_Init+0x9c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_GPIO_Init+0xa0>)
 80007d6:	f000 fe33 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xa0>)
 80007f4:	f000 fca0 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800

08000808 <HAL_UART_RxCpltCallback>:
  * @brief  Callback chamado quando um dado é recebido por interrupção
  * @param  huart: Ponteiro para a estrutura UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a3a      	ldr	r2, [pc, #232]	@ (8000900 <HAL_UART_RxCpltCallback+0xf8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d12e      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x70>
    // Dados recebidos do Bluetooth (HC-05)
    if (usart1_rx_index < BUFFER_SIZE - 1) {
 800081a:	4b3a      	ldr	r3, [pc, #232]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b29b      	uxth	r3, r3
 8000820:	2b3e      	cmp	r3, #62	@ 0x3e
 8000822:	d818      	bhi.n	8000856 <HAL_UART_RxCpltCallback+0x4e>
      if (usart1_rx_buffer[usart1_rx_index] == '\r') {
 8000824:	4b37      	ldr	r3, [pc, #220]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	4b36      	ldr	r3, [pc, #216]	@ (8000908 <HAL_UART_RxCpltCallback+0x100>)
 800082e:	5c9b      	ldrb	r3, [r3, r2]
 8000830:	2b0d      	cmp	r3, #13
 8000832:	d109      	bne.n	8000848 <HAL_UART_RxCpltCallback+0x40>
        usart1_rx_buffer[usart1_rx_index + 1] = '\0'; // Termina a string
 8000834:	4b33      	ldr	r3, [pc, #204]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	3301      	adds	r3, #1
 800083c:	4a32      	ldr	r2, [pc, #200]	@ (8000908 <HAL_UART_RxCpltCallback+0x100>)
 800083e:	2100      	movs	r1, #0
 8000840:	54d1      	strb	r1, [r2, r3]
        Process_USART1_Data(); // Processa imediatamente ao encontrar \r
 8000842:	f000 f86f 	bl	8000924 <Process_USART1_Data>
 8000846:	e006      	b.n	8000856 <HAL_UART_RxCpltCallback+0x4e>
      } else {
        usart1_rx_index++;
 8000848:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	3301      	adds	r3, #1
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 8000854:	801a      	strh	r2, [r3, #0]
      }
    }
    last_rx_time = HAL_GetTick();
 8000856:	f000 fa9b 	bl	8000d90 <HAL_GetTick>
 800085a:	4603      	mov	r3, r0
 800085c:	4a2b      	ldr	r2, [pc, #172]	@ (800090c <HAL_UART_RxCpltCallback+0x104>)
 800085e:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, &usart1_rx_buffer[usart1_rx_index], 1); // Continua recebendo
 8000860:	4b28      	ldr	r3, [pc, #160]	@ (8000904 <HAL_UART_RxCpltCallback+0xfc>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <HAL_UART_RxCpltCallback+0x100>)
 800086a:	4413      	add	r3, r2
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	4827      	ldr	r0, [pc, #156]	@ (8000910 <HAL_UART_RxCpltCallback+0x108>)
 8000872:	f001 faf7 	bl	8001e64 <HAL_UART_Receive_IT>
      }
    }
    last_rx_time = HAL_GetTick();
    HAL_UART_Receive_IT(&huart2, &usart2_rx_buffer[usart2_rx_index], 1); // Continua recebendo
  }
}
 8000876:	e03f      	b.n	80008f8 <HAL_UART_RxCpltCallback+0xf0>
  else if (huart->Instance == USART2) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <HAL_UART_RxCpltCallback+0x10c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d13a      	bne.n	80008f8 <HAL_UART_RxCpltCallback+0xf0>
    if (usart2_rx_index < BUFFER_SIZE - 2) { // -2 para espaço de \r\n
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	2b3d      	cmp	r3, #61	@ 0x3d
 800088a:	d825      	bhi.n	80008d8 <HAL_UART_RxCpltCallback+0xd0>
      if (usart2_rx_index > 0 && usart2_rx_buffer[usart2_rx_index - 1] == '\r' &&
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	b29b      	uxth	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d019      	beq.n	80008ca <HAL_UART_RxCpltCallback+0xc2>
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b29b      	uxth	r3, r3
 800089c:	3b01      	subs	r3, #1
 800089e:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <HAL_UART_RxCpltCallback+0x114>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	2b0d      	cmp	r3, #13
 80008a4:	d111      	bne.n	80008ca <HAL_UART_RxCpltCallback+0xc2>
          usart2_rx_buffer[usart2_rx_index] == '\n') {
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_UART_RxCpltCallback+0x114>)
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
      if (usart2_rx_index > 0 && usart2_rx_buffer[usart2_rx_index - 1] == '\r' &&
 80008b2:	2b0a      	cmp	r3, #10
 80008b4:	d109      	bne.n	80008ca <HAL_UART_RxCpltCallback+0xc2>
        usart2_rx_buffer[usart2_rx_index + 1] = '\0'; // Termina a string após \r\n
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3301      	adds	r3, #1
 80008be:	4a17      	ldr	r2, [pc, #92]	@ (800091c <HAL_UART_RxCpltCallback+0x114>)
 80008c0:	2100      	movs	r1, #0
 80008c2:	54d1      	strb	r1, [r2, r3]
        Process_USART2_Data(); // Processa imediatamente ao encontrar \r\n
 80008c4:	f000 f85a 	bl	800097c <Process_USART2_Data>
 80008c8:	e006      	b.n	80008d8 <HAL_UART_RxCpltCallback+0xd0>
        usart2_rx_index++;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 80008d6:	801a      	strh	r2, [r3, #0]
    last_rx_time = HAL_GetTick();
 80008d8:	f000 fa5a 	bl	8000d90 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <HAL_UART_RxCpltCallback+0x104>)
 80008e0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart2, &usart2_rx_buffer[usart2_rx_index], 1); // Continua recebendo
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_UART_RxCpltCallback+0x110>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <HAL_UART_RxCpltCallback+0x114>)
 80008ec:	4413      	add	r3, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	@ (8000920 <HAL_UART_RxCpltCallback+0x118>)
 80008f4:	f001 fab6 	bl	8001e64 <HAL_UART_Receive_IT>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40011000 	.word	0x40011000
 8000904:	20000138 	.word	0x20000138
 8000908:	200000b8 	.word	0x200000b8
 800090c:	20000140 	.word	0x20000140
 8000910:	20000028 	.word	0x20000028
 8000914:	40004400 	.word	0x40004400
 8000918:	2000013a 	.word	0x2000013a
 800091c:	200000f8 	.word	0x200000f8
 8000920:	20000070 	.word	0x20000070

08000924 <Process_USART1_Data>:
/**
  * @brief  Processa e retransmite dados recebidos do Bluetooth para o ESP301
  * @retval None
  */
void Process_USART1_Data(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  if (usart1_busy) return; // Evita sobreposição
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <Process_USART1_Data+0x44>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d118      	bne.n	8000964 <Process_USART1_Data+0x40>
  usart1_busy = 1;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <Process_USART1_Data+0x44>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Piscar LED para indicar transmissão
 8000938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <Process_USART1_Data+0x48>)
 800093e:	f000 fd98 	bl	8001472 <HAL_GPIO_TogglePin>
  HAL_UART_Transmit_IT(&huart2, usart1_rx_buffer, usart1_rx_index + 1); // Envia o buffer completo
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <Process_USART1_Data+0x4c>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	3301      	adds	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	4909      	ldr	r1, [pc, #36]	@ (8000974 <Process_USART1_Data+0x50>)
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <Process_USART1_Data+0x54>)
 8000952:	f001 fa51 	bl	8001df8 <HAL_UART_Transmit_IT>

  usart1_rx_index = 0; // Reseta o índice
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <Process_USART1_Data+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	801a      	strh	r2, [r3, #0]
  usart1_busy = 0;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <Process_USART1_Data+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e000      	b.n	8000966 <Process_USART1_Data+0x42>
  if (usart1_busy) return; // Evita sobreposição
 8000964:	bf00      	nop
}
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000013c 	.word	0x2000013c
 800096c:	40020800 	.word	0x40020800
 8000970:	20000138 	.word	0x20000138
 8000974:	200000b8 	.word	0x200000b8
 8000978:	20000070 	.word	0x20000070

0800097c <Process_USART2_Data>:
/**
  * @brief  Processa e retransmite dados recebidos do ESP301 para o Bluetooth
  * @retval None
  */
void Process_USART2_Data(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  if (usart2_busy) return; // Evita sobreposição
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <Process_USART2_Data+0x44>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d118      	bne.n	80009bc <Process_USART2_Data+0x40>
  usart2_busy = 1;
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <Process_USART2_Data+0x44>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Piscar LED para indicar transmissão
 8000990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000994:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <Process_USART2_Data+0x48>)
 8000996:	f000 fd6c 	bl	8001472 <HAL_GPIO_TogglePin>
  HAL_UART_Transmit_IT(&huart1, usart2_rx_buffer, usart2_rx_index + 1); // Envia o buffer completo
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <Process_USART2_Data+0x4c>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3301      	adds	r3, #1
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4909      	ldr	r1, [pc, #36]	@ (80009cc <Process_USART2_Data+0x50>)
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <Process_USART2_Data+0x54>)
 80009aa:	f001 fa25 	bl	8001df8 <HAL_UART_Transmit_IT>

  usart2_rx_index = 0; // Reseta o índice
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <Process_USART2_Data+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	801a      	strh	r2, [r3, #0]
  usart2_busy = 0;
 80009b4:	4b02      	ldr	r3, [pc, #8]	@ (80009c0 <Process_USART2_Data+0x44>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e000      	b.n	80009be <Process_USART2_Data+0x42>
  if (usart2_busy) return; // Evita sobreposição
 80009bc:	bf00      	nop
}
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000013d 	.word	0x2000013d
 80009c4:	40020800 	.word	0x40020800
 80009c8:	2000013a 	.word	0x2000013a
 80009cc:	200000f8 	.word	0x200000f8
 80009d0:	20000028 	.word	0x20000028

080009d4 <HAL_UART_TxCpltCallback>:
  * @brief  Callback chamado quando a transmissão por interrupção é concluída
  * @param  huart: Ponteiro para a estrutura UART
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  // Não é necessário reiniciar recepção aqui, pois é feito no RxCpltCallback
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <HAL_UART_ErrorCallback>:
  * @brief  Callback chamado em caso de erro na UART
  * @param  huart: Ponteiro para a estrutura UART
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_UART_ErrorCallback+0x48>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d108      	bne.n	8000a0c <HAL_UART_ErrorCallback+0x24>
    usart1_rx_index = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_UART_ErrorCallback+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, usart1_rx_buffer, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <HAL_UART_ErrorCallback+0x50>)
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <HAL_UART_ErrorCallback+0x54>)
 8000a06:	f001 fa2d 	bl	8001e64 <HAL_UART_Receive_IT>
  }
  else if (huart->Instance == USART2) {
    usart2_rx_index = 0;
    HAL_UART_Receive_IT(&huart2, usart2_rx_buffer, 1);
  }
}
 8000a0a:	e00c      	b.n	8000a26 <HAL_UART_ErrorCallback+0x3e>
  else if (huart->Instance == USART2) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <HAL_UART_ErrorCallback+0x58>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d107      	bne.n	8000a26 <HAL_UART_ErrorCallback+0x3e>
    usart2_rx_index = 0;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <HAL_UART_ErrorCallback+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, usart2_rx_buffer, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	490a      	ldr	r1, [pc, #40]	@ (8000a48 <HAL_UART_ErrorCallback+0x60>)
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <HAL_UART_ErrorCallback+0x64>)
 8000a22:	f001 fa1f 	bl	8001e64 <HAL_UART_Receive_IT>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40011000 	.word	0x40011000
 8000a34:	20000138 	.word	0x20000138
 8000a38:	200000b8 	.word	0x200000b8
 8000a3c:	20000028 	.word	0x20000028
 8000a40:	40004400 	.word	0x40004400
 8000a44:	2000013a 	.word	0x2000013a
 8000a48:	200000f8 	.word	0x200000f8
 8000a4c:	20000070 	.word	0x20000070

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb4 <HAL_UART_MspInit+0x108>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d135      	bne.n	8000b3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a38      	ldr	r2, [pc, #224]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b36      	ldr	r3, [pc, #216]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a31      	ldr	r2, [pc, #196]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4826      	ldr	r0, [pc, #152]	@ (8000bbc <HAL_UART_MspInit+0x110>)
 8000b24:	f000 fb08 	bl	8001138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2025      	movs	r0, #37	@ 0x25
 8000b2e:	f000 fa3a 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b32:	2025      	movs	r0, #37	@ 0x25
 8000b34:	f000 fa53 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b38:	e038      	b.n	8000bac <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a20      	ldr	r2, [pc, #128]	@ (8000bc0 <HAL_UART_MspInit+0x114>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d133      	bne.n	8000bac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a13      	ldr	r2, [pc, #76]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0x10c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <HAL_UART_MspInit+0x110>)
 8000b98:	f000 face 	bl	8001138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2026      	movs	r0, #38	@ 0x26
 8000ba2:	f000 fa00 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba6:	2026      	movs	r0, #38	@ 0x26
 8000ba8:	f000 fa19 	bl	8000fde <HAL_NVIC_EnableIRQ>
}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	@ 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f8a5 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USART1_IRQHandler+0x10>)
 8000c2a:	f001 f941 	bl	8001eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000028 	.word	0x20000028

08000c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <USART2_IRQHandler+0x10>)
 8000c3e:	f001 f937 	bl	8001eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000070 	.word	0x20000070

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 fff9 	bl	8002c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc2f 	bl	8000504 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb4:	08002d1c 	.word	0x08002d1c
  ldr r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cbc:	20000148 	.word	0x20000148

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff feb0 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000144 	.word	0x20000144

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000144 	.word	0x20000144

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff feb6 	bl	8000d90 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	@ 0x80
 8001036:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e052      	b.n	80010ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0216 	bic.w	r2, r2, #22
 8001052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_DMA_Abort+0x62>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e013      	b.n	80010be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe7b 	bl	8000d90 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d90c      	bls.n	80010be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e015      	b.n	80010ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e4      	bne.n	8001096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d0:	223f      	movs	r2, #63	@ 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00c      	b.n	800112a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2205      	movs	r2, #5
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e159      	b.n	8001408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8148 	bne.w	8001402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a2 	beq.w	8001402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <HAL_GPIO_Init+0x2f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x202>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x2f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x1fe>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <HAL_GPIO_Init+0x2f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <HAL_GPIO_Init+0x2fc>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x1f6>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_GPIO_Init+0x300>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x1f2>
 8001326:	2304      	movs	r3, #4
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132a:	2307      	movs	r3, #7
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x204>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <HAL_GPIO_Init+0x304>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a2f      	ldr	r2, [pc, #188]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f aea2 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	041a      	lsls	r2, r3, #16
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43d9      	mvns	r1, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	400b      	ands	r3, r1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e267      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d075      	beq.n	80015b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00c      	beq.n	80014ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d112      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ea:	d10b      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	4b7e      	ldr	r3, [pc, #504]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05b      	beq.n	80015b0 <HAL_RCC_OscConfig+0x108>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d157      	bne.n	80015b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e242      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x74>
 800150e:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a75      	ldr	r2, [pc, #468]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e01d      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6f      	ldr	r2, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b6d      	ldr	r3, [pc, #436]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6c      	ldr	r2, [pc, #432]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 8001540:	4b69      	ldr	r3, [pc, #420]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a68      	ldr	r2, [pc, #416]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fc16 	bl	8000d90 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fc12 	bl	8000d90 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e207      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b5b      	ldr	r3, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0xc0>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fc02 	bl	8000d90 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fbfe 	bl	8000d90 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1f3      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b51      	ldr	r3, [pc, #324]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0xe8>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d063      	beq.n	8001686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015be:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d11c      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d116      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e1c7      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4937      	ldr	r1, [pc, #220]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	e03a      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001618:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_RCC_OscConfig+0x244>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fbb7 	bl	8000d90 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fbb3 	bl	8000d90 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1a8      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4925      	ldr	r1, [pc, #148]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e015      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_RCC_OscConfig+0x244>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb96 	bl	8000d90 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fb92 	bl	8000d90 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e187      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d036      	beq.n	8001700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_RCC_OscConfig+0x248>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb76 	bl	8000d90 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb72 	bl	8000d90 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e167      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x200>
 80016c6:	e01b      	b.n	8001700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_RCC_OscConfig+0x248>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fb5f 	bl	8000d90 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	e00e      	b.n	80016f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb5b 	bl	8000d90 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d907      	bls.n	80016f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e150      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470000 	.word	0x42470000
 80016f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b88      	ldr	r3, [pc, #544]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ea      	bne.n	80016d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8097 	beq.w	800183c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b81      	ldr	r3, [pc, #516]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b7d      	ldr	r3, [pc, #500]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	4a7c      	ldr	r2, [pc, #496]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	@ 0x40
 800172e:	4b7a      	ldr	r3, [pc, #488]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b77      	ldr	r3, [pc, #476]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b74      	ldr	r3, [pc, #464]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a73      	ldr	r2, [pc, #460]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb1b 	bl	8000d90 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fb17 	bl	8000d90 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e10c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x2ea>
 8001784:	4b64      	ldr	r3, [pc, #400]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a63      	ldr	r2, [pc, #396]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x30c>
 800179a:	4b5f      	ldr	r3, [pc, #380]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a5e      	ldr	r2, [pc, #376]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a57      	ldr	r2, [pc, #348]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a54      	ldr	r2, [pc, #336]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fadc 	bl	8000d90 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff fad8 	bl	8000d90 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0cb      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4b49      	ldr	r3, [pc, #292]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ee      	beq.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fac6 	bl	8000d90 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fac2 	bl	8000d90 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0b5      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a38      	ldr	r2, [pc, #224]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a1 	beq.w	8001988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d05c      	beq.n	800190c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d141      	bne.n	80018de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fa96 	bl	8000d90 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fa92 	bl	8000d90 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e087      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	491b      	ldr	r1, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa6b 	bl	8000d90 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fa67 	bl	8000d90 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e05c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x416>
 80018dc:	e054      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fa54 	bl	8000d90 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fa50 	bl	8000d90 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e038      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
 8001920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x4ec>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d028      	beq.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d121      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11a      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cc      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b68      	ldr	r3, [pc, #416]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d90c      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b65      	ldr	r3, [pc, #404]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b63      	ldr	r3, [pc, #396]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b8      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	4b59      	ldr	r3, [pc, #356]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a58      	ldr	r2, [pc, #352]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a04:	4b53      	ldr	r3, [pc, #332]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a52      	ldr	r2, [pc, #328]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b50      	ldr	r3, [pc, #320]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	494d      	ldr	r1, [pc, #308]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d044      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e07f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e067      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4934      	ldr	r1, [pc, #208]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff f982 	bl	8000d90 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff f97e 	bl	8000d90 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d20c      	bcs.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4916      	ldr	r1, [pc, #88]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 f821 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f8e2 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08002cf4 	.word	0x08002cf4
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b68:	b090      	sub	sp, #64	@ 0x40
 8001b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d00d      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	f200 80a1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b96:	e09b      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b9c:	e09b      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9e:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ba2:	e098      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d028      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd0:	fb03 f201 	mul.w	r2, r3, r1
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	fb00 f303 	mul.w	r3, r0, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a43      	ldr	r2, [pc, #268]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x188>)
 8001bde:	fba0 1202 	umull	r1, r2, r0, r2
 8001be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be4:	460a      	mov	r2, r1
 8001be6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bea:	4413      	add	r3, r2
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	61fa      	str	r2, [r7, #28]
 8001bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bfe:	f7fe faeb 	bl	80001d8 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4613      	mov	r3, r2
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c0a:	e053      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	2200      	movs	r2, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	617a      	str	r2, [r7, #20]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c1e:	f04f 0b00 	mov.w	fp, #0
 8001c22:	4652      	mov	r2, sl
 8001c24:	465b      	mov	r3, fp
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	0159      	lsls	r1, r3, #5
 8001c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c34:	0150      	lsls	r0, r2, #5
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c56:	ebb2 0408 	subs.w	r4, r2, r8
 8001c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	00eb      	lsls	r3, r5, #3
 8001c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6c:	00e2      	lsls	r2, r4, #3
 8001c6e:	4614      	mov	r4, r2
 8001c70:	461d      	mov	r5, r3
 8001c72:	eb14 030a 	adds.w	r3, r4, sl
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	eb45 030b 	adc.w	r3, r5, fp
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ca8:	f7fe fa96 	bl	80001d8 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3740      	adds	r7, #64	@ 0x40
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	017d7840 	.word	0x017d7840

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	@ (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08002d04 	.word	0x08002d04

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d34:	f7ff ffdc 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0b5b      	lsrs	r3, r3, #13
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	@ (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08002d04 	.word	0x08002d04

08001d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e042      	b.n	8001df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fe94 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	@ 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fcfd 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d121      	bne.n	8001e56 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <HAL_UART_Transmit_IT+0x26>
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e01a      	b.n	8001e58 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2221      	movs	r2, #33	@ 0x21
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d112      	bne.n	8001ea4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_UART_Receive_IT+0x26>
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00b      	b.n	8001ea6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 faa6 	bl	80023ec <UART_Start_Receive_IT>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	e000      	b.n	8001ea6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_UART_IRQHandler+0x66>
 8001f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fb85 	bl	800261e <UART_Receive_IT>
      return;
 8001f14:	e25b      	b.n	80023ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80de 	beq.w	80020dc <HAL_UART_IRQHandler+0x22c>
 8001f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80d1 	beq.w	80020dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_UART_IRQHandler+0xae>
 8001f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_UART_IRQHandler+0xd2>
 8001f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xf6>
 8001f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	f043 0204 	orr.w	r2, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d011      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x126>
 8001fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 81f2 	beq.w	80023c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_UART_IRQHandler+0x14e>
 8001fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fb10 	bl	800261e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <HAL_UART_IRQHandler+0x17a>
 8002022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d04f      	beq.n	80020ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa18 	bl	8002460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203a:	2b40      	cmp	r3, #64	@ 0x40
 800203c:	d141      	bne.n	80020c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3314      	adds	r3, #20
 8002044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800204c:	e853 3f00 	ldrex	r3, [r3]
 8002050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800205c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3314      	adds	r3, #20
 8002066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800206a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800206e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800207a:	e841 2300 	strex	r3, r2, [r1]
 800207e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1d9      	bne.n	800203e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d013      	beq.n	80020ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	4a7e      	ldr	r2, [pc, #504]	@ (8002290 <HAL_UART_IRQHandler+0x3e0>)
 8002098:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f827 	bl	80010f2 <HAL_DMA_Abort_IT>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020b4:	4610      	mov	r0, r2
 80020b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	e00e      	b.n	80020d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fc94 	bl	80009e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	e00a      	b.n	80020d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fc90 	bl	80009e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	e006      	b.n	80020d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fc8c 	bl	80009e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80020d6:	e175      	b.n	80023c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d8:	bf00      	nop
    return;
 80020da:	e173      	b.n	80023c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	f040 814f 	bne.w	8002384 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8148 	beq.w	8002384 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8141 	beq.w	8002384 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	2b40      	cmp	r3, #64	@ 0x40
 8002124:	f040 80b6 	bne.w	8002294 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8145 	beq.w	80023c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002146:	429a      	cmp	r2, r3
 8002148:	f080 813e 	bcs.w	80023c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002152:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800215e:	f000 8088 	beq.w	8002272 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800217c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	330c      	adds	r3, #12
 800218a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800218e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002196:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800219a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800219e:	e841 2300 	strex	r3, r2, [r1]
 80021a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80021a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1d9      	bne.n	8002162 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b8:	e853 3f00 	ldrex	r3, [r3]
 80021bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80021be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3314      	adds	r3, #20
 80021ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80021d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80021da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021de:	e841 2300 	strex	r3, r2, [r1]
 80021e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80021e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e1      	bne.n	80021ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80021fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3314      	adds	r3, #20
 800220a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800220e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002212:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800221c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e3      	bne.n	80021ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800223a:	e853 3f00 	ldrex	r3, [r3]
 800223e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002242:	f023 0310 	bic.w	r3, r3, #16
 8002246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	330c      	adds	r3, #12
 8002250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002254:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002256:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002258:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800225a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800225c:	e841 2300 	strex	r3, r2, [r1]
 8002260:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e3      	bne.n	8002230 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fed0 	bl	8001012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002280:	b29b      	uxth	r3, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f8a3 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800228e:	e09b      	b.n	80023c8 <HAL_UART_IRQHandler+0x518>
 8002290:	08002527 	.word	0x08002527
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808e 	beq.w	80023cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8089 	beq.w	80023cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	e853 3f00 	ldrex	r3, [r3]
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80022de:	647a      	str	r2, [r7, #68]	@ 0x44
 80022e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e3      	bne.n	80022ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	623b      	str	r3, [r7, #32]
   return(result);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3314      	adds	r3, #20
 8002312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002316:	633a      	str	r2, [r7, #48]	@ 0x30
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800231c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	e853 3f00 	ldrex	r3, [r3]
 8002346:	60fb      	str	r3, [r7, #12]
   return(result);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800235c:	61fa      	str	r2, [r7, #28]
 800235e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	617b      	str	r3, [r7, #20]
   return(result);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e3      	bne.n	8002338 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f829 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002382:	e023      	b.n	80023cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_UART_IRQHandler+0x4f4>
 8002390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8d6 	bl	800254e <UART_Transmit_IT>
    return;
 80023a2:	e014      	b.n	80023ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_UART_IRQHandler+0x51e>
 80023b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f916 	bl	80025ee <UART_EndTransmit_IT>
    return;
 80023c2:	e004      	b.n	80023ce <HAL_UART_IRQHandler+0x51e>
    return;
 80023c4:	bf00      	nop
 80023c6:	e002      	b.n	80023ce <HAL_UART_IRQHandler+0x51e>
      return;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <HAL_UART_IRQHandler+0x51e>
      return;
 80023cc:	bf00      	nop
  }
}
 80023ce:	37e8      	adds	r7, #232	@ 0xe8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2222      	movs	r2, #34	@ 0x22
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002430:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002460:	b480      	push	{r7}
 8002462:	b095      	sub	sp, #84	@ 0x54
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002488:	643a      	str	r2, [r7, #64]	@ 0x40
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800248e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	e853 3f00 	ldrex	r3, [r3]
 80024aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e5      	bne.n	800249c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d119      	bne.n	800250c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	e853 3f00 	ldrex	r3, [r3]
 80024e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f023 0310 	bic.w	r3, r3, #16
 80024ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024f8:	61ba      	str	r2, [r7, #24]
 80024fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	e841 2300 	strex	r3, r2, [r1]
 8002504:	613b      	str	r3, [r7, #16]
   return(result);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e5      	bne.n	80024d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800251a:	bf00      	nop
 800251c:	3754      	adds	r7, #84	@ 0x54
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7fe fa51 	bl	80009e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b21      	cmp	r3, #33	@ 0x21
 8002560:	d13e      	bne.n	80025e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256a:	d114      	bne.n	8002596 <UART_Transmit_IT+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d110      	bne.n	8002596 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	1c9a      	adds	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	e008      	b.n	80025a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6211      	str	r1, [r2, #32]
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe f9e0 	bl	80009d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b08c      	sub	sp, #48	@ 0x30
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b22      	cmp	r3, #34	@ 0x22
 8002630:	f040 80ae 	bne.w	8002790 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800263c:	d117      	bne.n	800266e <UART_Receive_IT+0x50>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d113      	bne.n	800266e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265c:	b29a      	uxth	r2, r3
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	1c9a      	adds	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28
 800266c:	e026      	b.n	80026bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002680:	d007      	beq.n	8002692 <UART_Receive_IT+0x74>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <UART_Receive_IT+0x82>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e008      	b.n	80026b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4619      	mov	r1, r3
 80026ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d15d      	bne.n	800278c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0220 	bic.w	r2, r2, #32
 80026de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	2b01      	cmp	r3, #1
 8002714:	d135      	bne.n	8002782 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	e853 3f00 	ldrex	r3, [r3]
 800272a:	613b      	str	r3, [r7, #16]
   return(result);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f023 0310 	bic.w	r3, r3, #16
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	623a      	str	r2, [r7, #32]
 800273e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002740:	69f9      	ldr	r1, [r7, #28]
 8002742:	6a3a      	ldr	r2, [r7, #32]
 8002744:	e841 2300 	strex	r3, r2, [r1]
 8002748:	61bb      	str	r3, [r7, #24]
   return(result);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e5      	bne.n	800271c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b10      	cmp	r3, #16
 800275c:	d10a      	bne.n	8002774 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fe2a 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
 8002780:	e002      	b.n	8002788 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f840 	bl	8000808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e002      	b.n	8002792 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b0c0      	sub	sp, #256	@ 0x100
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	68d9      	ldr	r1, [r3, #12]
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	ea40 0301 	orr.w	r3, r0, r1
 80027c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027f4:	f021 010c 	bic.w	r1, r1, #12
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002802:	430b      	orrs	r3, r1
 8002804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	ea40 0301 	orr.w	r3, r0, r1
 8002822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a68 <UART_SetConfig+0x2cc>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d005      	beq.n	800283c <UART_SetConfig+0xa0>
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b8d      	ldr	r3, [pc, #564]	@ (8002a6c <UART_SetConfig+0x2d0>)
 8002838:	429a      	cmp	r2, r3
 800283a:	d104      	bne.n	8002846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff fa78 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002840:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002844:	e003      	b.n	800284e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002846:	f7ff fa5f 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 800284a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002858:	f040 810c 	bne.w	8002a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002866:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800286a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	1891      	adds	r1, r2, r2
 8002874:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002876:	415b      	adcs	r3, r3
 8002878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800287a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800287e:	4621      	mov	r1, r4
 8002880:	eb12 0801 	adds.w	r8, r2, r1
 8002884:	4629      	mov	r1, r5
 8002886:	eb43 0901 	adc.w	r9, r3, r1
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800289e:	4690      	mov	r8, r2
 80028a0:	4699      	mov	r9, r3
 80028a2:	4623      	mov	r3, r4
 80028a4:	eb18 0303 	adds.w	r3, r8, r3
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028ac:	462b      	mov	r3, r5
 80028ae:	eb49 0303 	adc.w	r3, r9, r3
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028ca:	460b      	mov	r3, r1
 80028cc:	18db      	adds	r3, r3, r3
 80028ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80028d0:	4613      	mov	r3, r2
 80028d2:	eb42 0303 	adc.w	r3, r2, r3
 80028d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80028d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028e0:	f7fd fc7a 	bl	80001d8 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <UART_SetConfig+0x2d4>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800290c:	415b      	adcs	r3, r3
 800290e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002914:	4641      	mov	r1, r8
 8002916:	eb12 0a01 	adds.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb43 0b01 	adc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800292c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002934:	4692      	mov	sl, r2
 8002936:	469b      	mov	fp, r3
 8002938:	4643      	mov	r3, r8
 800293a:	eb1a 0303 	adds.w	r3, sl, r3
 800293e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002942:	464b      	mov	r3, r9
 8002944:	eb4b 0303 	adc.w	r3, fp, r3
 8002948:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002958:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800295c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002960:	460b      	mov	r3, r1
 8002962:	18db      	adds	r3, r3, r3
 8002964:	643b      	str	r3, [r7, #64]	@ 0x40
 8002966:	4613      	mov	r3, r2
 8002968:	eb42 0303 	adc.w	r3, r2, r3
 800296c:	647b      	str	r3, [r7, #68]	@ 0x44
 800296e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002976:	f7fd fc2f 	bl	80001d8 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4611      	mov	r1, r2
 8002980:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <UART_SetConfig+0x2d4>)
 8002982:	fba3 2301 	umull	r2, r3, r3, r1
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2264      	movs	r2, #100	@ 0x64
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	1acb      	subs	r3, r1, r3
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002996:	4b36      	ldr	r3, [pc, #216]	@ (8002a70 <UART_SetConfig+0x2d4>)
 8002998:	fba3 2302 	umull	r2, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029a4:	441c      	add	r4, r3
 80029a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029c0:	415b      	adcs	r3, r3
 80029c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029c8:	4641      	mov	r1, r8
 80029ca:	1851      	adds	r1, r2, r1
 80029cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80029ce:	4649      	mov	r1, r9
 80029d0:	414b      	adcs	r3, r1
 80029d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029e0:	4659      	mov	r1, fp
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ea:	4651      	mov	r1, sl
 80029ec:	00ca      	lsls	r2, r1, #3
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	4642      	mov	r2, r8
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029fc:	464b      	mov	r3, r9
 80029fe:	460a      	mov	r2, r1
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	18db      	adds	r3, r3, r3
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a22:	4613      	mov	r3, r2
 8002a24:	eb42 0303 	adc.w	r3, r2, r3
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a32:	f7fd fbd1 	bl	80001d8 <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <UART_SetConfig+0x2d4>)
 8002a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	2164      	movs	r1, #100	@ 0x64
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3332      	adds	r3, #50	@ 0x32
 8002a4e:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <UART_SetConfig+0x2d4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4422      	add	r2, r4
 8002a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a64:	e106      	b.n	8002c74 <UART_SetConfig+0x4d8>
 8002a66:	bf00      	nop
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a86:	4642      	mov	r2, r8
 8002a88:	464b      	mov	r3, r9
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	6239      	str	r1, [r7, #32]
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a96:	4641      	mov	r1, r8
 8002a98:	1854      	adds	r4, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0501 	adc.w	r5, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	00eb      	lsls	r3, r5, #3
 8002aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aae:	00e2      	lsls	r2, r4, #3
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	4643      	mov	r3, r8
 8002ab6:	18e3      	adds	r3, r4, r3
 8002ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002abc:	464b      	mov	r3, r9
 8002abe:	eb45 0303 	adc.w	r3, r5, r3
 8002ac2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ad2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	008b      	lsls	r3, r1, #2
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aec:	4621      	mov	r1, r4
 8002aee:	008a      	lsls	r2, r1, #2
 8002af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002af4:	f7fd fb70 	bl	80001d8 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4b60      	ldr	r3, [pc, #384]	@ (8002c80 <UART_SetConfig+0x4e4>)
 8002afe:	fba3 2302 	umull	r2, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	011c      	lsls	r4, r3, #4
 8002b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	1891      	adds	r1, r2, r2
 8002b1e:	61b9      	str	r1, [r7, #24]
 8002b20:	415b      	adcs	r3, r3
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b28:	4641      	mov	r1, r8
 8002b2a:	1851      	adds	r1, r2, r1
 8002b2c:	6139      	str	r1, [r7, #16]
 8002b2e:	4649      	mov	r1, r9
 8002b30:	414b      	adcs	r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	00cb      	lsls	r3, r1, #3
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	00ca      	lsls	r2, r1, #3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	4642      	mov	r2, r8
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	460a      	mov	r2, r1
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b80:	4649      	mov	r1, r9
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	008a      	lsls	r2, r1, #2
 8002b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b92:	f7fd fb21 	bl	80001d8 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	@ 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	@ 0x32
 8002bb0:	4a33      	ldr	r2, [pc, #204]	@ (8002c80 <UART_SetConfig+0x4e4>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bbc:	441c      	add	r4, r3
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1891      	adds	r1, r2, r2
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bdc:	4641      	mov	r1, r8
 8002bde:	1851      	adds	r1, r2, r1
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	4649      	mov	r1, r9
 8002be4:	414b      	adcs	r3, r1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	00cb      	lsls	r3, r1, #3
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfe:	4651      	mov	r1, sl
 8002c00:	00ca      	lsls	r2, r1, #3
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	4642      	mov	r2, r8
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c0e:	464b      	mov	r3, r9
 8002c10:	460a      	mov	r2, r1
 8002c12:	eb42 0303 	adc.w	r3, r2, r3
 8002c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c22:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c30:	4649      	mov	r1, r9
 8002c32:	008b      	lsls	r3, r1, #2
 8002c34:	4641      	mov	r1, r8
 8002c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	008a      	lsls	r2, r1, #2
 8002c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c42:	f7fd fac9 	bl	80001d8 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <UART_SetConfig+0x4e4>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	@ 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	3332      	adds	r3, #50	@ 0x32
 8002c5e:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <UART_SetConfig+0x4e4>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4422      	add	r2, r4
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <memset>:
 8002c84:	4402      	add	r2, r0
 8002c86:	4603      	mov	r3, r0
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <memset+0xa>
 8002c8c:	4770      	bx	lr
 8002c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c92:	e7f9      	b.n	8002c88 <memset+0x4>

08002c94 <__libc_init_array>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	4d0d      	ldr	r5, [pc, #52]	@ (8002ccc <__libc_init_array+0x38>)
 8002c98:	4c0d      	ldr	r4, [pc, #52]	@ (8002cd0 <__libc_init_array+0x3c>)
 8002c9a:	1b64      	subs	r4, r4, r5
 8002c9c:	10a4      	asrs	r4, r4, #2
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	42a6      	cmp	r6, r4
 8002ca2:	d109      	bne.n	8002cb8 <__libc_init_array+0x24>
 8002ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8002cd4 <__libc_init_array+0x40>)
 8002ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8002cd8 <__libc_init_array+0x44>)
 8002ca8:	f000 f818 	bl	8002cdc <_init>
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	42a6      	cmp	r6, r4
 8002cb4:	d105      	bne.n	8002cc2 <__libc_init_array+0x2e>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbc:	4798      	blx	r3
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7ee      	b.n	8002ca0 <__libc_init_array+0xc>
 8002cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc6:	4798      	blx	r3
 8002cc8:	3601      	adds	r6, #1
 8002cca:	e7f2      	b.n	8002cb2 <__libc_init_array+0x1e>
 8002ccc:	08002d14 	.word	0x08002d14
 8002cd0:	08002d14 	.word	0x08002d14
 8002cd4:	08002d14 	.word	0x08002d14
 8002cd8:	08002d18 	.word	0x08002d18

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr
