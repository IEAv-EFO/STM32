
SQUAREWAVEGENERATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
<<<<<<< HEAD
  1 .text         00010414  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080105b8  080105b8  000115b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a48  08010a48  000122c8  2**0
                  CONTENTS
  4 .ARM          00000008  08010a48  08010a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a50  08010a50  000122c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a50  08010a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a54  08010a54  00011a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08010a58  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  200002c8  08010d20  000122c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000242c  08010d20  0001242c  2**0
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  1 .text         0001187c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08011a20  08011a20  00012a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ee8  08011ee8  000132d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011ee8  08011ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ef0  08011ef0  000132d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ef0  08011ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ef4  08011ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08011ef8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  200002d8  080121d0  000132d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002454  080121d0  00013454  2**0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0001b96e  00000000  00000000  000122f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e55  00000000  00000000  0002dc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00031ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b0  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a67f  00000000  00000000  00034578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef5a  00000000  00000000  0004ebf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a25d8  00000000  00000000  0006db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  0011016c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00117cac  2**0
=======
=======
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 12 .debug_info   0001c8bd  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004141  00000000  00000000  0002fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00033d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001347  00000000  00000000  000355d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c379  00000000  00000000  0003691f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020562  00000000  00000000  00052c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a315f  00000000  00000000  000731fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f0  00000000  00000000  0011639c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011e48c  2**0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	0801059c 	.word	0x0801059c
=======
 80001c0:	08011a04 	.word	0x08011a04
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011a04 	.word	0x08011a04
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
<<<<<<< HEAD
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0801059c 	.word	0x0801059c
=======
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08011a04 	.word	0x08011a04
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08011a04 	.word	0x08011a04
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
<<<<<<< HEAD

<<<<<<< HEAD
08000ff4 <main>:
=======
=======
 8000ff4:	0000      	movs	r0, r0
	...

>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
08000ff8 <count2volt>:

const float Vref = 3.3; // Reference voltage (in volts)
float result;
int max_count;

float count2volt(uint16_t res, uint16_t count){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	80fb      	strh	r3, [r7, #6]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]

	    max_count = pow(2, res) - 1;
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa82 	bl	8000514 <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ec43 2b11 	vmov	d1, r2, r3
 8001018:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001080 <count2volt+0x88>
 800101c:	f00f fd92 	bl	8010b44 <pow>
 8001020:	ec51 0b10 	vmov	r0, r1, d0
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <count2volt+0x90>)
 800102a:	f7ff f935 	bl	8000298 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd97 	bl	8000b68 <__aeabi_d2iz>
 800103a:	4603      	mov	r3, r0
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <count2volt+0x94>)
 800103e:	6013      	str	r3, [r2, #0]

	    result = (Vref / max_count * count);
 8001040:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001090 <count2volt+0x98>
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <count2volt+0x94>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <count2volt+0x9c>)
 8001064:	edc3 7a00 	vstr	s15, [r3]

	    return result;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <count2volt+0x9c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	ee07 3a90 	vmov	s15, r3
}
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000000 	.word	0x00000000
 8001084:	40000000 	.word	0x40000000
 8001088:	3ff00000 	.word	0x3ff00000
 800108c:	200002f8 	.word	0x200002f8
 8001090:	40533333 	.word	0x40533333
 8001094:	200002f4 	.word	0x200002f4

08001098 <main>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
=======
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000ff8:	f000 fda2 	bl	8001b40 <HAL_Init>
=======
 800109c:	f000 fdfc 	bl	8001c98 <HAL_Init>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000ffc:	f000 f844 	bl	8001088 <SystemClock_Config>
=======
 80010a0:	f000 f844 	bl	800112c <SystemClock_Config>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001000:	f000 f9ca 	bl	8001398 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001004:	f000 f928 	bl	8001258 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001008:	f000 f8a6 	bl	8001158 <MX_ADC1_Init>
  MX_I2C2_Init();
 800100c:	f000 f8f6 	bl	80011fc <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
<<<<<<< HEAD
 8001010:	f00a fa74 	bl	800b4fc <MX_USB_DEVICE_Init>
=======
 80010b4:	f00a fcd0 	bl	800ba58 <MX_USB_DEVICE_Init>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  MX_USART1_UART_Init();
 8001014:	f000 f996 	bl	8001344 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	freqGen(&htim3, 100); // Frequency in Hz
 8001018:	2164      	movs	r1, #100	@ 0x64
 800101a:	4815      	ldr	r0, [pc, #84]	@ (8001070 <main+0x7c>)
 800101c:	f000 fa1c 	bl	8001458 <freqGen>
=======
 80010a4:	f000 f9ca 	bl	800143c <MX_GPIO_Init>
  MX_TIM3_Init();
 80010a8:	f000 f928 	bl	80012fc <MX_TIM3_Init>
  MX_ADC1_Init();
 80010ac:	f000 f8a6 	bl	80011fc <MX_ADC1_Init>
  MX_I2C2_Init();
 80010b0:	f000 f8f6 	bl	80012a0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80010b4:	f00a fcd0 	bl	800ba58 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80010b8:	f000 f996 	bl	80013e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	freqGen(&htim3, 100); // Frequency in Hz
 80010bc:	2164      	movs	r1, #100	@ 0x64
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <main+0x7c>)
 80010c0:	f000 fa1c 	bl	80014fc <freqGen>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		#ifdef EXERCICIO8
			pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
<<<<<<< HEAD
 8001020:	2140      	movs	r1, #64	@ 0x40
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <main+0x80>)
 8001024:	f001 fc88 	bl	8002938 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <main+0x84>)
 800102e:	701a      	strb	r2, [r3, #0]
			countsDAC = pinState ? THREEVOLTS : ONEVOLT;
<<<<<<< HEAD
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <main+0x84>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <main+0x4a>
 8001038:	f640 628b 	movw	r2, #3723	@ 0xe8b
 800103c:	e001      	b.n	8001042 <main+0x4e>
 800103e:	f240 42d9 	movw	r2, #1241	@ 0x4d9
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <main+0x88>)
 8001044:	801a      	strh	r2, [r3, #0]
=======
=======
 80010c4:	2140      	movs	r1, #64	@ 0x40
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <main+0x80>)
 80010c8:	f001 fe5a 	bl	8002d80 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <main+0x84>)
 80010d2:	701a      	strb	r2, [r3, #0]
			countsDAC = pinState ? THREEVOLTS : ONEVOLT;
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <main+0x84>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <main+0x4a>
 80010dc:	f640 4266 	movw	r2, #3174	@ 0xc66
 80010e0:	e001      	b.n	80010e6 <main+0x4e>
 80010e2:	f240 422a 	movw	r2, #1066	@ 0x42a
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <main+0x88>)
 80010e8:	801a      	strh	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
			buf[0] = countsDAC >> 8;
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <main+0x88>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	121b      	asrs	r3, r3, #8
 800104e:	b21b      	sxth	r3, r3
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <main+0x8c>)
 8001054:	701a      	strb	r2, [r3, #0]
			buf[1] = countsDAC;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <main+0x88>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <main+0x8c>)
 8001060:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit_IT(&hi2c2, (0x60 << 1), buf, sizeof(buf));
 8001062:	2302      	movs	r3, #2
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <main+0x8c>)
 8001066:	21c0      	movs	r1, #192	@ 0xc0
 8001068:	4806      	ldr	r0, [pc, #24]	@ (8001084 <main+0x90>)
 800106a:	f001 fe0b 	bl	8002c84 <HAL_I2C_Master_Transmit_IT>
			pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800106e:	e7d7      	b.n	8001020 <main+0x2c>
 8001070:	20000380 	.word	0x20000380
 8001074:	40020000 	.word	0x40020000
 8001078:	20000410 	.word	0x20000410
 800107c:	20000416 	.word	0x20000416
 8001080:	20000414 	.word	0x20000414
 8001084:	2000032c 	.word	0x2000032c

08001088 <SystemClock_Config>:
=======
			buf[0] = countsDAC >> 8;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <main+0x88>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	121b      	asrs	r3, r3, #8
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <main+0x8c>)
 80010f8:	701a      	strb	r2, [r3, #0]
			buf[1] = countsDAC;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <main+0x88>)
 80010fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <main+0x8c>)
 8001104:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit_IT(&hi2c2, (0x60 << 1), buf, sizeof(buf));
 8001106:	2302      	movs	r3, #2
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <main+0x8c>)
 800110a:	21c0      	movs	r1, #192	@ 0xc0
 800110c:	4806      	ldr	r0, [pc, #24]	@ (8001128 <main+0x90>)
 800110e:	f001 ffdd 	bl	80030cc <HAL_I2C_Master_Transmit_IT>
			pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001112:	e7d7      	b.n	80010c4 <main+0x2c>
 8001114:	20000398 	.word	0x20000398
 8001118:	40020000 	.word	0x40020000
 800111c:	20000428 	.word	0x20000428
 8001120:	2000042e 	.word	0x2000042e
 8001124:	2000042c 	.word	0x2000042c
 8001128:	20000344 	.word	0x20000344

0800112c <SystemClock_Config>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	@ 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	@ 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b feab 	bl	800cdf2 <memset>
=======
=======
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00c f92d 	bl	800d39a <memset>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
=======
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <SystemClock_Config+0xc8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <SystemClock_Config+0xc8>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <SystemClock_Config+0xc8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <SystemClock_Config+0xcc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <SystemClock_Config+0xcc>)
 80010d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <SystemClock_Config+0xcc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
=======
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <SystemClock_Config+0xc8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010f8:	230f      	movs	r3, #15
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010fc:	2390      	movs	r3, #144	@ 0x90
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001104:	2305      	movs	r3, #5
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fc63 	bl	80059d8 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
=======
=======
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800119c:	230f      	movs	r3, #15
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011a0:	2390      	movs	r3, #144	@ 0x90
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011a8:	2305      	movs	r3, #5
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fe37 	bl	8005e24 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 8001118:	f000 fa34 	bl	8001584 <Error_Handler>
=======
  {
    Error_Handler();
 80011bc:	f000 fa7c 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
<<<<<<< HEAD
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fec6 	bl	8005ec8 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xbe>
=======
=======
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f005 f89a 	bl	8006314 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xbe>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 8001142:	f000 fa1f 	bl	8001584 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	@ 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_ADC1_Init>:
=======
  {
    Error_Handler();
 80011e6:	f000 fa67 	bl	80016b8 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	@ 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_ADC1_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
=======
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
=======
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_ADC1_Init+0x98>)
 800116c:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <MX_ADC1_Init+0x9c>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_ADC1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_ADC1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_ADC1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_ADC1_Init+0x98>)
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <MX_ADC1_Init+0xa0>)
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <MX_ADC1_Init+0x98>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_ADC1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_ADC1_Init+0x98>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b6:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <MX_ADC1_Init+0x98>)
 80011b8:	f000 fd58 	bl	8001c6c <HAL_ADC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f000 f9df 	bl	8001584 <Error_Handler>
=======
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <MX_ADC1_Init+0x9c>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_ADC1_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001220:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_ADC1_Init+0x98>)
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_ADC1_Init+0xa0>)
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_ADC1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001256:	2201      	movs	r2, #1
 8001258:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_ADC1_Init+0x98>)
 800125c:	f000 fdb2 	bl	8001dc4 <HAL_ADC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fa27 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
<<<<<<< HEAD
  sConfig.Channel = ADC_CHANNEL_0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_ADC1_Init+0x98>)
 80011d8:	f000 fe4a 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011e2:	f000 f9cf 	bl	8001584 <Error_Handler>
=======
  sConfig.Channel = ADC_CHANNEL_1;
 800126a:	2301      	movs	r3, #1
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800126e:	2301      	movs	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_ADC1_Init+0x98>)
 800127c:	f001 f812 	bl	80022a4 <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001286:	f000 fa17 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002e4 	.word	0x200002e4
 80011f4:	40012000 	.word	0x40012000
 80011f8:	0f000001 	.word	0x0f000001

080011fc <MX_I2C2_Init>:
=======
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002fc 	.word	0x200002fc
 8001298:	40012000 	.word	0x40012000
 800129c:	0f000001 	.word	0x0f000001

080012a0 <MX_I2C2_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
<<<<<<< HEAD
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
=======
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< HEAD
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_I2C2_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	@ (8001250 <MX_I2C2_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_I2C2_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <MX_I2C2_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_I2C2_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_I2C2_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_I2C2_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_I2C2_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_I2C2_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_I2C2_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_I2C2_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_I2C2_Init+0x50>)
 800123a:	f001 fbc9 	bl	80029d0 <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 f99e 	bl	8001584 <Error_Handler>
=======
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C2_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C2_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C2_Init+0x50>)
 80012de:	f001 fd9b 	bl	8002e18 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f9e6 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< HEAD
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000032c 	.word	0x2000032c
 8001250:	40005800 	.word	0x40005800
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_TIM3_Init>:
=======
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000344 	.word	0x20000344
 80012f4:	40005800 	.word	0x40005800
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_TIM3_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	@ 0x38
 800125c:	af00      	add	r7, sp, #0
=======
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800125e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]
=======
 8001302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001288:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <MX_TIM3_Init+0xe4>)
 800128a:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <MX_TIM3_Init+0xe8>)
 800128c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800128e:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <MX_TIM3_Init+0xe4>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_TIM3_Init+0xe4>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1-1;
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <MX_TIM3_Init+0xe4>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
<<<<<<< HEAD
 80012ac:	4823      	ldr	r0, [pc, #140]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012ae:	f004 ffeb 	bl	8006288 <HAL_TIM_Base_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x64>
=======
=======
 800132c:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800132e:	4a2d      	ldr	r2, [pc, #180]	@ (80013e4 <MX_TIM3_Init+0xe8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001332:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1-1;
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001350:	4823      	ldr	r0, [pc, #140]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 8001352:	f005 f9bf 	bl	80066d4 <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x64>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 80012b8:	f000 f964 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
<<<<<<< HEAD
 80012c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c6:	4619      	mov	r1, r3
 80012c8:	481c      	ldr	r0, [pc, #112]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012ca:	f005 fae7 	bl	800689c <HAL_TIM_ConfigClockSource>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x80>
=======
=======
  {
    Error_Handler();
 800135c:	f000 f9ac 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136a:	4619      	mov	r1, r3
 800136c:	481c      	ldr	r0, [pc, #112]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800136e:	f005 fcbb 	bl	8006ce8 <HAL_TIM_ConfigClockSource>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x80>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 80012d4:	f000 f956 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
<<<<<<< HEAD
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012da:	f005 f824 	bl	8006326 <HAL_TIM_PWM_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x90>
=======
=======
  {
    Error_Handler();
 8001378:	f000 f99e 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800137e:	f005 f9f8 	bl	8006772 <HAL_TIM_PWM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0x90>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 80012e4:	f000 f94e 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4619      	mov	r1, r3
 80012f6:	4811      	ldr	r0, [pc, #68]	@ (800133c <MX_TIM3_Init+0xe4>)
 80012f8:	f005 fe98 	bl	800702c <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0xae>
=======
=======
  {
    Error_Handler();
 8001388:	f000 f996 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4619      	mov	r1, r3
 800139a:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 800139c:	f006 f86c 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 8001302:	f000 f93f 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001306:	2360      	movs	r3, #96	@ 0x60
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800130e:	2302      	movs	r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM3_Init+0xe4>)
 800131e:	f005 f9fb 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0xd4>
=======
=======
  {
    Error_Handler();
 80013a6:	f000 f987 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	@ 0x60
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 80013c2:	f005 fbcf 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0xd4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 8001328:	f000 f92c 	bl	8001584 <Error_Handler>
=======
  {
    Error_Handler();
 80013cc:	f000 f974 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM3_Init+0xe4>)
 800132e:	f000 fa23 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	@ 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000380 	.word	0x20000380
 8001340:	40000400 	.word	0x40000400

08001344 <MX_USART1_UART_Init>:
=======
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM3_Init+0xe4>)
 80013d2:	f000 fa73 	bl	80018bc <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	@ 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000398 	.word	0x20000398
 80013e4:	40000400 	.word	0x40000400

080013e8 <MX_USART1_UART_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
=======
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <MX_USART1_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
<<<<<<< HEAD
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800137c:	f005 fed8 	bl	8007130 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART1_UART_Init+0x46>
=======
=======
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_USART1_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001420:	f006 f8ac 	bl	800757c <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x46>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    Error_Handler();
 8001386:	f000 f8fd 	bl	8001584 <Error_Handler>
=======
  {
    Error_Handler();
 800142a:	f000 f945 	bl	80016b8 <Error_Handler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003c8 	.word	0x200003c8
 8001394:	40011000 	.word	0x40011000

08001398 <MX_GPIO_Init>:
=======
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200003e0 	.word	0x200003e0
 8001438:	40011000 	.word	0x40011000

0800143c <MX_GPIO_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
=======
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <MX_GPIO_Init+0xb8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_GPIO_Init+0xb8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <MX_GPIO_Init+0xb8>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_GPIO_Init+0xb8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001424:	480b      	ldr	r0, [pc, #44]	@ (8001454 <MX_GPIO_Init+0xbc>)
 8001426:	f001 fa9f 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800142a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_GPIO_Init+0xbc>)
 8001444:	f001 f8f4 	bl	8002630 <HAL_GPIO_Init>
=======
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_GPIO_Init+0xb8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <MX_GPIO_Init+0xbc>)
 80014ca:	f001 fc71 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_GPIO_Init+0xbc>)
 80014e8:	f001 fac6 	bl	8002a78 <HAL_GPIO_Init>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	@ 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800

08001458 <freqGen>:

/* USER CODE BEGIN 4 */
void freqGen(TIM_HandleTypeDef *htim, uint32_t freq) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    if (htim->Instance == TIM3) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a34      	ldr	r2, [pc, #208]	@ (8001538 <freqGen+0xe0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d160      	bne.n	800152e <freqGen+0xd6>
        uint32_t arr, ccr, psc = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
        uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Alterei o clock do sistema para 25 MHz
<<<<<<< HEAD
 8001470:	f004 fef6 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 8001474:	6178      	str	r0, [r7, #20]
=======
 8001514:	f005 f8ca 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 8001518:	6178      	str	r0, [r7, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	@ 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800

080014fc <freqGen>:

/* USER CODE BEGIN 4 */
void freqGen(TIM_HandleTypeDef *htim, uint32_t freq) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
    if (htim->Instance == TIM3) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <freqGen+0xe0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d160      	bne.n	80015d2 <freqGen+0xd6>
        uint32_t arr, ccr, psc = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
        uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Alterei o clock do sistema para 25 MHz
 8001514:	f005 f8ca 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 8001518:	6178      	str	r0, [r7, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                                      // Assim, o clock da USB vai direto saindo do HSE (PLL Source)
        								              // passando pelos divisores.
        											  // Dessa forma, a frequência gerada ficou correta.
                                                      // O macete está em configurar o clock.
        while (1) {
        	if (timerClock % psc == 0) {
<<<<<<< HEAD
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	fbb3 f2f2 	udiv	r2, r3, r2
 800147e:	69f9      	ldr	r1, [r7, #28]
 8001480:	fb01 f202 	mul.w	r2, r1, r2
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d12f      	bne.n	80014ea <freqGen+0x92>
        		arr = timerClock / (freq * psc);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	fbb2 f3f3 	udiv	r3, r2, r3
 8001498:	613b      	str	r3, [r7, #16]
				if (arr <= ARRMAX) {
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d223      	bcs.n	80014ea <freqGen+0x92>
					psc-=1;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
					arr-=1;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
					break;
 80014ae:	bf00      	nop
=======
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	fb01 f202 	mul.w	r2, r1, r2
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12f      	bne.n	800158e <freqGen+0x92>
        		arr = timerClock / (freq * psc);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	613b      	str	r3, [r7, #16]
				if (arr <= ARRMAX) {
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001544:	d223      	bcs.n	800158e <freqGen+0x92>
					psc-=1;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b01      	subs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
					arr-=1;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	3b01      	subs	r3, #1
 8001550:	613b      	str	r3, [r7, #16]
					break;
 8001552:	bf00      	nop
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
				}
        	}
            psc++;
        }

        ccr = arr / 2;
<<<<<<< HEAD
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]

        htim->Instance->ARR = arr;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        htim->Instance->PSC = psc;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28
        htim->Instance->CCR1 = ccr;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]

        htim->Instance->ARR = arr;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
        htim->Instance->PSC = psc;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
        htim->Instance->CCR1 = ccr;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                    HAL_Delay(200);
                }
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
            }
        #elif defined(EXERCICIO8)
            usbSpeed = hUsb.dev_speed;
<<<<<<< HEAD
 80014ce:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <freqGen+0xe4>)
 80014d0:	7c1a      	ldrb	r2, [r3, #16]
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <freqGen+0xe8>)
 80014d4:	701a      	strb	r2, [r3, #0]
            HAL_StatusTypeDef RetTimer = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
<<<<<<< HEAD
 80014d6:	2100      	movs	r1, #0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f004 ff7d 	bl	80063d8 <HAL_TIM_PWM_Start>
 80014de:	4603      	mov	r3, r0
 80014e0:	72fb      	strb	r3, [r7, #11]
=======
=======
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <freqGen+0xe4>)
 8001574:	7c1a      	ldrb	r2, [r3, #16]
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <freqGen+0xe8>)
 8001578:	701a      	strb	r2, [r3, #0]
            HAL_StatusTypeDef RetTimer = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f005 f951 	bl	8006824 <HAL_TIM_PWM_Start>
 8001582:	4603      	mov	r3, r0
 8001584:	72fb      	strb	r3, [r7, #11]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            if (RetTimer == HAL_OK && usbSpeed == USBD_SPEED_HIGH) {
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d122      	bne.n	800152e <freqGen+0xd6>
 80014e8:	e003      	b.n	80014f2 <freqGen+0x9a>
            psc++;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
        	if (timerClock % psc == 0) {
 80014f0:	e7c1      	b.n	8001476 <freqGen+0x1e>
            if (RetTimer == HAL_OK && usbSpeed == USBD_SPEED_HIGH) {
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <freqGen+0xe8>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d119      	bne.n	800152e <freqGen+0xd6>
                HAL_Delay(200);
 80014fa:	20c8      	movs	r0, #200	@ 0xc8
 80014fc:	f000 fb92 	bl	8001c24 <HAL_Delay>
                for (uint8_t i = 0; i < 4; i++) {
 8001500:	2300      	movs	r3, #0
 8001502:	76fb      	strb	r3, [r7, #27]
 8001504:	e00a      	b.n	800151c <freqGen+0xc4>
                    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <freqGen+0xec>)
 800150c:	f001 fa45 	bl	800299a <HAL_GPIO_TogglePin>
                    HAL_Delay(200);
 8001510:	20c8      	movs	r0, #200	@ 0xc8
 8001512:	f000 fb87 	bl	8001c24 <HAL_Delay>
                for (uint8_t i = 0; i < 4; i++) {
 8001516:	7efb      	ldrb	r3, [r7, #27]
 8001518:	3301      	adds	r3, #1
 800151a:	76fb      	strb	r3, [r7, #27]
 800151c:	7efb      	ldrb	r3, [r7, #27]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d9f1      	bls.n	8001506 <freqGen+0xae>
                }
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001528:	4806      	ldr	r0, [pc, #24]	@ (8001544 <freqGen+0xec>)
 800152a:	f001 fa1d 	bl	8002968 <HAL_GPIO_WritePin>
=======
            if (RetTimer == HAL_OK && usbSpeed == USBD_SPEED_HIGH) {
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d122      	bne.n	80015d2 <freqGen+0xd6>
 800158c:	e003      	b.n	8001596 <freqGen+0x9a>
            psc++;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
        	if (timerClock % psc == 0) {
 8001594:	e7c1      	b.n	800151a <freqGen+0x1e>
            if (RetTimer == HAL_OK && usbSpeed == USBD_SPEED_HIGH) {
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <freqGen+0xe8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d119      	bne.n	80015d2 <freqGen+0xd6>
                HAL_Delay(200);
 800159e:	20c8      	movs	r0, #200	@ 0xc8
 80015a0:	f000 fbec 	bl	8001d7c <HAL_Delay>
                for (uint8_t i = 0; i < 4; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	76fb      	strb	r3, [r7, #27]
 80015a8:	e00a      	b.n	80015c0 <freqGen+0xc4>
                    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ae:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <freqGen+0xec>)
 80015b0:	f001 fc17 	bl	8002de2 <HAL_GPIO_TogglePin>
                    HAL_Delay(200);
 80015b4:	20c8      	movs	r0, #200	@ 0xc8
 80015b6:	f000 fbe1 	bl	8001d7c <HAL_Delay>
                for (uint8_t i = 0; i < 4; i++) {
 80015ba:	7efb      	ldrb	r3, [r7, #27]
 80015bc:	3301      	adds	r3, #1
 80015be:	76fb      	strb	r3, [r7, #27]
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d9f1      	bls.n	80015aa <freqGen+0xae>
                }
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <freqGen+0xec>)
 80015ce:	f001 fbef 	bl	8002db0 <HAL_GPIO_WritePin>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            }
        #endif
    }
}
<<<<<<< HEAD
 800152e:	bf00      	nop
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40000400 	.word	0x40000400
 800153c:	20000418 	.word	0x20000418
 8001540:	20000000 	.word	0x20000000
 8001544:	40020800 	.word	0x40020800

08001548 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
=======
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000400 	.word	0x40000400
 80015e0:	20000440 	.word	0x20000440
 80015e4:	20000000 	.word	0x20000000
 80015e8:	40020800 	.word	0x40020800

080015ec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
			pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
			sprintf(buffer, "%d\n", pinState);
			CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
		#endif
	}
}
<<<<<<< HEAD
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c2) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if (hi2c2->Instance == I2C2) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_I2C_MasterTxCpltCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <HAL_I2C_MasterTxCpltCallback+0x18>
		HAL_ADC_Start_IT(&hadc1);
 800156e:	4804      	ldr	r0, [pc, #16]	@ (8001580 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001570:	f000 fbc0 	bl	8001cf4 <HAL_ADC_Start_IT>
	}
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40005800 	.word	0x40005800
 8001580:	200002e4 	.word	0x200002e4

<<<<<<< HEAD
08001584 <Error_Handler>:
=======
=======
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c2) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if (hi2c2->Instance == I2C2) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d102      	bne.n	8001618 <HAL_I2C_MasterTxCpltCallback+0x18>
		HAL_ADC_Start_IT(&hadc1);
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001614:	f000 fc1a 	bl	8001e4c <HAL_ADC_Start_IT>
	}
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40005800 	.word	0x40005800
 8001624:	200002fc 	.word	0x200002fc

>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
08001628 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12d      	bne.n	8001696 <HAL_ADC_ConvCpltCallback+0x6e>
		adcValue = HAL_ADC_GetValue(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fe11 	bl	8002262 <HAL_ADC_GetValue>
 8001640:	4603      	mov	r3, r0
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001646:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_IT(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fcbd 	bl	8001fc8 <HAL_ADC_Stop_IT>
		volts = count2volt(ADCRES, adcValue);
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	4619      	mov	r1, r3
 8001656:	200c      	movs	r0, #12
 8001658:	f7ff fcce 	bl	8000ff8 <count2volt>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
		sprintf(buffer, "%1.4f\n\r", volts);
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff74 	bl	8000558 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	490d      	ldr	r1, [pc, #52]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x84>)
 8001676:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001678:	f00b fe2c 	bl	800d2d4 <siprintf>
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x88>)
 800167e:	f7fe fdff 	bl	8000280 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001688:	f00a faa4 	bl	800bbd4 <CDC_Transmit_FS>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*) buffer, sizeof(buffer));
 800168c:	2206      	movs	r2, #6
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001692:	f005 ffc3 	bl	800761c <HAL_UART_Transmit_IT>
	}
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40012000 	.word	0x40012000
 80016a4:	20000430 	.word	0x20000430
 80016a8:	20000434 	.word	0x20000434
 80016ac:	08011a20 	.word	0x08011a20
 80016b0:	20000438 	.word	0x20000438
 80016b4:	200003e0 	.word	0x200003e0

080016b8 <Error_Handler>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
=======
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
=======
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
<<<<<<< HEAD
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <Error_Handler+0x8>

08001590 <HAL_MspInit>:
=======
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <Error_Handler+0x8>

080016c4 <HAL_MspInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
=======
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_MspInit+0x4c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x4c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
=======
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_ADC_MspInit>:
=======
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_ADC_MspInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_ADC_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d127      	bne.n	8001652 <HAL_ADC_MspInit+0x72>
=======
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <HAL_ADC_MspInit+0x8c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12f      	bne.n	8001796 <HAL_ADC_MspInit+0x82>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a15      	ldr	r2, [pc, #84]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_ADC_MspInit+0x80>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_ADC_MspInit+0x84>)
 800164e:	f000 ffef 	bl	8002630 <HAL_GPIO_Init>
=======
=======
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_ADC_MspInit+0x90>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800176e:	2302      	movs	r3, #2
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <HAL_ADC_MspInit+0x94>)
 8001782:	f001 f979 	bl	8002a78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2012      	movs	r0, #18
 800178c:	f001 f89d 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001790:	2012      	movs	r0, #18
 8001792:	f001 f8b6 	bl	8002902 <HAL_NVIC_EnableIRQ>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END ADC1_MspInit 1 */

  }

}
<<<<<<< HEAD
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40012000 	.word	0x40012000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_I2C_MspInit>:
=======
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40012000 	.word	0x40012000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_I2C_MspInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a25      	ldr	r2, [pc, #148]	@ (800171c <HAL_I2C_MspInit+0xb4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d144      	bne.n	8001714 <HAL_I2C_MspInit+0xac>
=======
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <HAL_I2C_MspInit+0xb4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d144      	bne.n	8001858 <HAL_I2C_MspInit+0xac>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
=======
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
<<<<<<< HEAD
 80016a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ac:	2312      	movs	r3, #18
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b8:	2304      	movs	r3, #4
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4818      	ldr	r0, [pc, #96]	@ (8001724 <HAL_I2C_MspInit+0xbc>)
 80016c4:	f000 ffb4 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016c8:	2308      	movs	r3, #8
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80016d8:	2309      	movs	r3, #9
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4810      	ldr	r0, [pc, #64]	@ (8001724 <HAL_I2C_MspInit+0xbc>)
 80016e4:	f000 ffa4 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 80016f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_I2C_MspInit+0xb8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2021      	movs	r0, #33	@ 0x21
 800170a:	f000 feba 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
<<<<<<< HEAD
 800170e:	2021      	movs	r0, #33	@ 0x21
 8001710:	f000 fed3 	bl	80024ba <HAL_NVIC_EnableIRQ>
=======
 8001852:	2021      	movs	r0, #33	@ 0x21
 8001854:	f001 f855 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80017ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4818      	ldr	r0, [pc, #96]	@ (8001868 <HAL_I2C_MspInit+0xbc>)
 8001808:	f001 f936 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800180c:	2308      	movs	r3, #8
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800181c:	2309      	movs	r3, #9
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4810      	ldr	r0, [pc, #64]	@ (8001868 <HAL_I2C_MspInit+0xbc>)
 8001828:	f001 f926 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 8001836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_I2C_MspInit+0xb8>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	2021      	movs	r0, #33	@ 0x21
 800184e:	f001 f83c 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001852:	2021      	movs	r0, #33	@ 0x21
 8001854:	f001 f855 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END I2C2_MspInit 1 */

  }

}
<<<<<<< HEAD
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40005800 	.word	0x40005800
 8001720:	40023800 	.word	0x40023800
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_TIM_Base_MspInit>:
=======
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	@ 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005800 	.word	0x40005800
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <HAL_TIM_Base_MspInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <HAL_TIM_Base_MspInit+0x48>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d115      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3e>
=======
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <HAL_TIM_Base_MspInit+0x48>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d115      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x3e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201d      	movs	r0, #29
 800175c:	f000 fe91 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
<<<<<<< HEAD
 8001760:	201d      	movs	r0, #29
 8001762:	f000 feaa 	bl	80024ba <HAL_NVIC_EnableIRQ>
=======
 80018a4:	201d      	movs	r0, #29
 80018a6:	f001 f82c 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201d      	movs	r0, #29
 80018a0:	f001 f813 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a4:	201d      	movs	r0, #29
 80018a6:	f001 f82c 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END TIM3_MspInit 1 */

  }

}
<<<<<<< HEAD
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11d      	bne.n	80017d6 <HAL_TIM_MspPostInit+0x5e>
=======
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <HAL_TIM_MspPostInit+0x68>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d11d      	bne.n	800191a <HAL_TIM_MspPostInit+0x5e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_TIM_MspPostInit+0x6c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_TIM_MspPostInit+0x6c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
=======
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_TIM_MspPostInit+0x6c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_TIM_MspPostInit+0x6c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_TIM_MspPostInit+0x6c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
<<<<<<< HEAD
 80017b6:	2340      	movs	r3, #64	@ 0x40
 80017b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_TIM_MspPostInit+0x70>)
 80017d2:	f000 ff2d 	bl	8002630 <HAL_GPIO_Init>
=======
 80018fa:	2340      	movs	r3, #64	@ 0x40
 80018fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800190a:	2302      	movs	r3, #2
 800190c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	@ (800192c <HAL_TIM_MspPostInit+0x70>)
 8001916:	f001 f8af 	bl	8002a78 <HAL_GPIO_Init>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000

080017ec <HAL_UART_MspInit>:
=======
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40000400 	.word	0x40000400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <HAL_UART_MspInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <HAL_UART_MspInit+0x94>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d134      	bne.n	8001878 <HAL_UART_MspInit+0x8c>
=======
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_UART_MspInit+0x94>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d134      	bne.n	80019bc <HAL_UART_MspInit+0x8c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_UART_MspInit+0x98>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_UART_MspInit+0x98>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	6453      	str	r3, [r2, #68]	@ 0x44
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_UART_MspInit+0x98>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_UART_MspInit+0x98>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <HAL_UART_MspInit+0x98>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_UART_MspInit+0x98>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
=======
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_UART_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 8001846:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001858:	2307      	movs	r3, #7
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4809      	ldr	r0, [pc, #36]	@ (8001888 <HAL_UART_MspInit+0x9c>)
 8001864:	f000 fee4 	bl	8002630 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2025      	movs	r0, #37	@ 0x25
 800186e:	f000 fe08 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
<<<<<<< HEAD
 8001872:	2025      	movs	r0, #37	@ 0x25
 8001874:	f000 fe21 	bl	80024ba <HAL_NVIC_EnableIRQ>
=======
 80019b6:	2025      	movs	r0, #37	@ 0x25
 80019b8:	f000 ffa3 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800198a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4809      	ldr	r0, [pc, #36]	@ (80019cc <HAL_UART_MspInit+0x9c>)
 80019a8:	f001 f866 	bl	8002a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2025      	movs	r0, #37	@ 0x25
 80019b2:	f000 ff8a 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	2025      	movs	r0, #37	@ 0x25
 80019b8:	f000 ffa3 	bl	8002902 <HAL_NVIC_EnableIRQ>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END USART1_MspInit 1 */

  }

}
<<<<<<< HEAD
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	@ 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40011000 	.word	0x40011000
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000

0800188c <NMI_Handler>:
=======
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	@ 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40011000 	.word	0x40011000
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000

080019d0 <NMI_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
=======
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:
=======
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <NMI_Handler+0x4>

080019d8 <HardFault_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
=======
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:
=======
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
=======
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:
=======
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <MemManage_Handler+0x4>

080019e8 <BusFault_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
=======
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:
=======
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
=======
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <SVC_Handler>:
=======
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f8 <SVC_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
=======
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:
=======
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <DebugMon_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
=======
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:
=======
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <PendSV_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
=======
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SysTick_Handler>:
=======
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <SysTick_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
=======
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80018e2:	f000 f97f 	bl	8001be4 <HAL_IncTick>
=======
 8001a26:	f000 f989 	bl	8001d3c <HAL_IncTick>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <TIM3_IRQHandler>:
=======
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <ADC_IRQHandler+0x10>)
 8001a36:	f000 fb04 	bl	8002042 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002fc 	.word	0x200002fc

08001a44 <TIM3_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
=======
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
<<<<<<< HEAD
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <TIM3_IRQHandler+0x10>)
 80018f2:	f004 fe21 	bl	8006538 <HAL_TIM_IRQHandler>
=======
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <TIM3_IRQHandler+0x10>)
 8001a4a:	f004 ff9b 	bl	8006984 <HAL_TIM_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <TIM3_IRQHandler+0x10>)
 8001a4a:	f004 ff9b 	bl	8006984 <HAL_TIM_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000380 	.word	0x20000380

08001900 <I2C2_EV_IRQHandler>:
=======
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000398 	.word	0x20000398

08001a58 <I2C2_EV_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
<<<<<<< HEAD
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
=======
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
<<<<<<< HEAD
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <I2C2_EV_IRQHandler+0x10>)
 8001906:	f001 fa5f 	bl	8002dc8 <HAL_I2C_EV_IRQHandler>
=======
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <I2C2_EV_IRQHandler+0x10>)
 8001a5e:	f001 fbd7 	bl	8003210 <HAL_I2C_EV_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
<<<<<<< HEAD
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000032c 	.word	0x2000032c

08001914 <USART1_IRQHandler>:
=======
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000344 	.word	0x20000344

08001a6c <USART1_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
=======
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
<<<<<<< HEAD
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <USART1_IRQHandler+0x10>)
 800191a:	f005 fc59 	bl	80071d0 <HAL_UART_IRQHandler>
=======
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <USART1_IRQHandler+0x10>)
 8001a72:	f005 fe09 	bl	8007688 <HAL_UART_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <USART1_IRQHandler+0x10>)
 8001a72:	f005 fe09 	bl	8007688 <HAL_UART_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003c8 	.word	0x200003c8

08001928 <OTG_FS_IRQHandler>:
=======
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200003e0 	.word	0x200003e0

08001a80 <OTG_FS_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
<<<<<<< HEAD
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
=======
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
<<<<<<< HEAD
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <OTG_FS_IRQHandler+0x10>)
 800192e:	f002 ff46 	bl	80047be <HAL_PCD_IRQHandler>
=======
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <OTG_FS_IRQHandler+0x10>)
 8001a86:	f003 f8be 	bl	8004c06 <HAL_PCD_IRQHandler>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
<<<<<<< HEAD
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20001bdc 	.word	0x20001bdc

0800193c <_getpid>:
=======
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20001c04 	.word	0x20001c04

08001a94 <_getpid>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
<<<<<<< HEAD
 8001956:	f00b fa9f 	bl	800ce98 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
=======
=======
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001aae:	f00b fcc7 	bl	800d440 <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 800197e:	bf00      	nop
 8001980:	e7fd      	b.n	800197e <_exit+0x12>

08001982 <_read>:
=======
  return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad6:	bf00      	nop
 8001ad8:	e7fd      	b.n	8001ad6 <_exit+0x12>

08001ada <_read>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
=======
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e00a      	b.n	80019aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001994:	f3af 8000 	nop.w
 8001998:	4601      	mov	r1, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf0      	blt.n	8001994 <_read+0x12>
  }

  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
=======
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e00a      	b.n	8001b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aec:	f3af 8000 	nop.w
 8001af0:	4601      	mov	r1, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf0      	blt.n	8001aec <_read+0x12>
  }

  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e009      	b.n	80019e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf1      	blt.n	80019ce <_write+0x12>
  }
  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:
=======
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e009      	b.n	8001b3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbf1      	blt.n	8001b26 <_write+0x12>
  }
  return len;
 8001b42:	687b      	ldr	r3, [r7, #4]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_close>:

int _close(int file)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_fstat>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
=======
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b74:	605a      	str	r2, [r3, #4]
  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_isatty>:

int _isatty(int file)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
=======
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_sbrk>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
=======
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
=======
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
=======
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
<<<<<<< HEAD
 8001a8c:	f00b fa04 	bl	800ce98 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
=======
=======
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8001be4:	f00b fc2c 	bl	800d440 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200006f4 	.word	0x200006f4
 8001ac4:	20002430 	.word	0x20002430

08001ac8 <SystemInit>:
=======
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	2000071c 	.word	0x2000071c
 8001c1c:	20002458 	.word	0x20002458

08001c20 <SystemInit>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:
=======
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
<<<<<<< HEAD
 8001b1a:	f00b f9c3 	bl	800cea4 <__libc_init_array>
=======
 8001c72:	f00b fbeb 	bl	800d44c <__libc_init_array>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fa69 	bl	8000ff4 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
<<<<<<< HEAD
 8001b30:	08010a58 	.word	0x08010a58
=======
 8001c88:	08011ef8 	.word	0x08011ef8
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  ldr r2, =_sbss
 8001b34:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001b38:	2000242c 	.word	0x2000242c

08001b3c <ADC_IRQHandler>:
=======
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c48:	f7ff ffea 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f00b fbeb 	bl	800d44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fa0f 	bl	8001098 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001c88:	08011ef8 	.word	0x08011ef8
  ldr r2, =_sbss
 8001c8c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001c90:	20002454 	.word	0x20002454

08001c94 <DMA1_Stream0_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
=======
 8001c94:	e7fe      	b.n	8001c94 <DMA1_Stream0_IRQHandler>
	...

08001c98 <HAL_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
=======
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
=======
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	6013      	str	r3, [r2, #0]
=======
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 fc7f 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fd0c 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
=======
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 fdf7 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fcfa 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fc97 	bl	80024d6 <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
=======
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fe0f 	bl	800291e <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 fc5f 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
=======
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 fdd7 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_IncTick>:
=======
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000004 	.word	0x20000004
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_IncTick>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	200006f8 	.word	0x200006f8

08001c0c <HAL_GetTick>:
=======
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	20000720 	.word	0x20000720

08001d64 <HAL_GetTick>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200006f8 	.word	0x200006f8

08001c24 <HAL_Delay>:
=======
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000720 	.word	0x20000720

08001d7c <HAL_Delay>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c

08001c6c <HAL_ADC_Init>:
=======
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000000c 	.word	0x2000000c

08001dc4 <HAL_ADC_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <HAL_ADC_Init+0x7e>
=======
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e033      	b.n	8001e42 <HAL_ADC_Init+0x7e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>
=======
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_Init+0x32>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fca8 	bl	80015e0 <HAL_ADC_MspInit>
=======
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fc96 	bl	8001714 <HAL_ADC_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e0a:	f023 0302 	bic.w	r3, r3, #2
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fa08 	bl	80020d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x74>
=======
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fb76 	bl	8002508 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_Init+0x74>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
=======
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_Start_IT>:
=======
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_ADC_Start_IT>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
=======
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Start_IT+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e0a1      	b.n	8001e52 <HAL_ADC_Start_IT+0x15e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Start_IT+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0a1      	b.n	8001faa <HAL_ADC_Start_IT+0x15e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d018      	beq.n	8001d56 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	609a      	str	r2, [r3, #8]
=======
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d018      	beq.n	8001eae <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	609a      	str	r2, [r3, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001d34:	4b4a      	ldr	r3, [pc, #296]	@ (8001e60 <HAL_ADC_Start_IT+0x16c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a4a      	ldr	r2, [pc, #296]	@ (8001e64 <HAL_ADC_Start_IT+0x170>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_Start_IT+0x56>
=======
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb8 <HAL_ADC_Start_IT+0x16c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <HAL_ADC_Start_IT+0x170>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9a      	lsrs	r2, r3, #18
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_Start_IT+0x56>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d169      	bne.n	8001e38 <HAL_ADC_Start_IT+0x144>
=======
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d169      	bne.n	8001f90 <HAL_ADC_Start_IT+0x144>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da8:	f023 0206 	bic.w	r2, r3, #6
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	@ 0x44
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start_IT+0xc4>
=======
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001efa:	d106      	bne.n	8001f0a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	f023 0206 	bic.w	r2, r3, #6
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_Start_IT+0xc4>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_ADC_Start_IT+0x174>)
 8001dc2:	60fb      	str	r3, [r7, #12]
=======
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <HAL_ADC_Start_IT+0x174>)
 8001f1a:	60fb      	str	r3, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_ADC_Start_IT+0x11a>
=======
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f24:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_ADC_Start_IT+0x11a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
<<<<<<< HEAD
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d129      	bne.n	8001e50 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e020      	b.n	8001e50 <HAL_ADC_Start_IT+0x15c>
=======
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d129      	bne.n	8001fa8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e020      	b.n	8001fa8 <HAL_ADC_Start_IT+0x15c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a16      	ldr	r2, [pc, #88]	@ (8001e6c <HAL_ADC_Start_IT+0x178>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d11b      	bne.n	8001e50 <HAL_ADC_Start_IT+0x15c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	e00b      	b.n	8001e50 <HAL_ADC_Start_IT+0x15c>
=======
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <HAL_ADC_Start_IT+0x178>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_ADC_Start_IT+0x15c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d114      	bne.n	8001fa8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_ADC_Start_IT+0x15c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0210 	orr.w	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000004 	.word	0x20000004
 8001e64:	431bde83 	.word	0x431bde83
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	40012000 	.word	0x40012000

08001e70 <HAL_ADC_ConfigChannel>:
=======
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	431bde83 	.word	0x431bde83
 8001fc0:	40012300 	.word	0x40012300
 8001fc4:	40012000 	.word	0x40012000

08001fc8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Stop_IT+0x16>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e02b      	b.n	8002036 <HAL_ADC_Stop_IT+0x6e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d113      	bne.n	800202c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002012:	f023 0320 	bic.w	r3, r3, #32
 8002016:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d049      	beq.n	800210c <HAL_ADC_IRQHandler+0xca>
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d046      	beq.n	800210c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d12b      	bne.n	80020fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d127      	bne.n	80020fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d119      	bne.n	80020fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0220 	bic.w	r2, r2, #32
 80020d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fa93 	bl	8001628 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 0212 	mvn.w	r2, #18
 800210a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d057      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x190>
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d054      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d139      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002154:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12b      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d124      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11d      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800219c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fa9c 	bl	8002700 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 020c 	mvn.w	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <HAL_ADC_IRQHandler+0x1d6>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d014      	beq.n	8002218 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10d      	bne.n	8002218 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f837 	bl	800227c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0201 	mvn.w	r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002226:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_ADC_IRQHandler+0x218>
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f820 	bl	8002290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0220 	mvn.w	r2, #32
 8002258:	601a      	str	r2, [r3, #0]
  }
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_ConfigChannel>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
=======
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1c>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e113      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x244>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d925      	bls.n	8001ee8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d9      	ldr	r1, [r3, #12]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4403      	add	r3, r0
 8001eda:	3b1e      	subs	r3, #30
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	e022      	b.n	8001f2e <HAL_ADC_ConfigChannel+0xbe>
=======
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e113      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x244>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d925      	bls.n	800231c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43da      	mvns	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	400a      	ands	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	4603      	mov	r3, r0
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4403      	add	r3, r0
 800230e:	3b1e      	subs	r3, #30
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e022      	b.n	8002362 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6919      	ldr	r1, [r3, #16]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4403      	add	r3, r0
 8001f24:	409a      	lsls	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
=======
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	2207      	movs	r2, #7
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	4603      	mov	r3, r0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4403      	add	r3, r0
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d824      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b05      	subs	r3, #5
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b05      	subs	r3, #5
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7e:	e04c      	b.n	800201a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d824      	bhi.n	8001fd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b23      	subs	r3, #35	@ 0x23
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b23      	subs	r3, #35	@ 0x23
 8001fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd0:	e023      	b.n	800201a <HAL_ADC_ConfigChannel+0x1aa>
=======
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d824      	bhi.n	80023b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	221f      	movs	r2, #31
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b05      	subs	r3, #5
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b2:	e04c      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d824      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b23      	subs	r3, #35	@ 0x23
 80023ce:	221f      	movs	r2, #31
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b23      	subs	r3, #35	@ 0x23
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
 8002404:	e023      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b41      	subs	r3, #65	@ 0x41
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	3b41      	subs	r3, #65	@ 0x41
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	@ 0x41
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b41      	subs	r3, #65	@ 0x41
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800201a:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_ADC_ConfigChannel+0x250>)
 800201c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <HAL_ADC_ConfigChannel+0x254>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d10f      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1d8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b12      	cmp	r3, #18
 800202e:	d10b      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1d8>
=======
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <HAL_ADC_ConfigChannel+0x250>)
 8002450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_ADC_ConfigChannel+0x254>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10f      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b12      	cmp	r3, #18
 8002462:	d10b      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
=======
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	@ (80020c4 <HAL_ADC_ConfigChannel+0x254>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12b      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <HAL_ADC_ConfigChannel+0x258>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x1f4>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b11      	cmp	r3, #17
 8002062:	d122      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
=======
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_ADC_ConfigChannel+0x254>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_ADC_ConfigChannel+0x258>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x1f4>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b11      	cmp	r3, #17
 8002496:	d122      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_ADC_ConfigChannel+0x258>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d111      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
=======
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <HAL_ADC_ConfigChannel+0x258>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_ADC_ConfigChannel+0x25c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_ADC_ConfigChannel+0x260>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	0c9a      	lsrs	r2, r3, #18
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800209c:	e002      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <HAL_ADC_ConfigChannel+0x22e>
=======
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_ADC_ConfigChannel+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <HAL_ADC_ConfigChannel+0x260>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9a      	lsrs	r2, r3, #18
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012300 	.word	0x40012300
 80020c4:	40012000 	.word	0x40012000
 80020c8:	10000012 	.word	0x10000012
 80020cc:	20000004 	.word	0x20000004
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_Init>:
=======
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012300 	.word	0x40012300
 80024f8:	40012000 	.word	0x40012000
 80024fc:	10000012 	.word	0x10000012
 8002500:	20000004 	.word	0x20000004
 8002504:	431bde83 	.word	0x431bde83

08002508 <ADC_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
=======
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80020dc:	4b79      	ldr	r3, [pc, #484]	@ (80022c4 <ADC_Init+0x1f0>)
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800212c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
=======
 8002510:	4b79      	ldr	r3, [pc, #484]	@ (80026f8 <ADC_Init+0x1f0>)
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <ADC_Init+0x1f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800217a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00f      	b.n	80021d2 <ADC_Init+0xfe>
=======
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <ADC_Init+0x1f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6899      	ldr	r1, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e00f      	b.n	8002606 <ADC_Init+0xfe>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
=======
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0202 	bic.w	r2, r2, #2
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
 80021ec:	005a      	lsls	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <ADC_Init+0x164>
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0202 	bic.w	r2, r2, #2
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
 8002620:	005a      	lsls	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <ADC_Init+0x164>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800220e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800221e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	035a      	lsls	r2, r3, #13
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e007      	b.n	8002248 <ADC_Init+0x174>
=======
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002642:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	035a      	lsls	r2, r3, #13
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e007      	b.n	800267c <ADC_Init+0x174>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002246:	605a      	str	r2, [r3, #4]
=======
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267a:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	3b01      	subs	r3, #1
 8002264:	051a      	lsls	r2, r3, #20
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800227c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800228a:	025a      	lsls	r2, r3, #9
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	029a      	lsls	r2, r3, #10
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40012300 	.word	0x40012300
 80022c8:	0f000001 	.word	0x0f000001

080022cc <__NVIC_SetPriorityGrouping>:
=======
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	3b01      	subs	r3, #1
 8002698:	051a      	lsls	r2, r3, #20
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026be:	025a      	lsls	r2, r3, #9
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	029a      	lsls	r2, r3, #10
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	0f000001 	.word	0x0f000001

08002700 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <__NVIC_SetPriorityGrouping>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
=======
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
=======
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
=======
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	@ (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	@ (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	@ (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
=======
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	@ (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
=======
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
=======
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <SysTick_Config>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
=======
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff8e 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
=======
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
=======
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff29 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
=======
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
=======
 80028dc:	f7ff ff3e 	bl	800275c <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff8e 	bl	8002808 <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
=======
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
=======
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff31 	bl	8002778 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_DMA_Abort>:
=======
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_DMA_Abort>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fb86 	bl	8001c0c <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d008      	beq.n	8002520 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2280      	movs	r2, #128	@ 0x80
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e052      	b.n	80025c6 <HAL_DMA_Abort+0xd8>
=======
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff fa0e 	bl	8001d64 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d008      	beq.n	8002968 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e052      	b.n	8002a0e <HAL_DMA_Abort+0xd8>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0216 	bic.w	r2, r2, #22
 800252e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800253e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <HAL_DMA_Abort+0x62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
=======
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0216 	bic.w	r2, r2, #22
 8002976:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002986:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_DMA_Abort+0x62>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0208 	bic.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	e013      	b.n	800259a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7ff fb4b 	bl	8001c0c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d90c      	bls.n	800259a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e015      	b.n	80025c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e4      	bne.n	8002572 <HAL_DMA_Abort+0x84>
=======
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e013      	b.n	80029e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff f9d3 	bl	8001d64 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d90c      	bls.n	80029e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e015      	b.n	8002a0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e4      	bne.n	80029ba <HAL_DMA_Abort+0x84>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	223f      	movs	r2, #63	@ 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DMA_Abort_IT>:
=======
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	223f      	movs	r2, #63	@ 0x3f
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_Abort_IT>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d004      	beq.n	80025ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	@ 0x80
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e00c      	b.n	8002606 <HAL_DMA_Abort_IT+0x38>
=======
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d004      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e00c      	b.n	8002a4e <HAL_DMA_Abort_IT+0x38>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_DMA_GetState>:
=======
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2205      	movs	r2, #5
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_DMA_GetState>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002620:	b2db      	uxtb	r3, r3
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_GPIO_Init>:
=======
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_GPIO_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
=======
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e159      	b.n	8002900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 8148 	bne.w	80028fa <HAL_GPIO_Init+0x2ca>
=======
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e159      	b.n	8002d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8148 	bne.w	8002d42 <HAL_GPIO_Init+0x2ca>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	2b02      	cmp	r3, #2
 8002680:	d130      	bne.n	80026e4 <HAL_GPIO_Init+0xb4>
=======
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb4>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0xf0>
=======
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf0>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]
=======
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x144>
=======
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x144>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	601a      	str	r2, [r3, #0]
=======
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a2 	beq.w	80028fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b57      	ldr	r3, [pc, #348]	@ (8002918 <HAL_GPIO_Init+0x2e8>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a56      	ldr	r2, [pc, #344]	@ (8002918 <HAL_GPIO_Init+0x2e8>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b54      	ldr	r3, [pc, #336]	@ (8002918 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a52      	ldr	r2, [pc, #328]	@ (800291c <HAL_GPIO_Init+0x2ec>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a49      	ldr	r2, [pc, #292]	@ (8002920 <HAL_GPIO_Init+0x2f0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x202>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a48      	ldr	r2, [pc, #288]	@ (8002924 <HAL_GPIO_Init+0x2f4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x1fe>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_GPIO_Init+0x2f8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x1fa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a46      	ldr	r2, [pc, #280]	@ (800292c <HAL_GPIO_Init+0x2fc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x1f6>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a45      	ldr	r2, [pc, #276]	@ (8002930 <HAL_GPIO_Init+0x300>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x1f2>
 800281e:	2304      	movs	r3, #4
 8002820:	e008      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002822:	2307      	movs	r3, #7
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002826:	2303      	movs	r3, #3
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x204>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x204>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002832:	2300      	movs	r3, #0
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002844:	4935      	ldr	r1, [pc, #212]	@ (800291c <HAL_GPIO_Init+0x2ec>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b38      	ldr	r3, [pc, #224]	@ (8002934 <HAL_GPIO_Init+0x304>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a2f      	ldr	r2, [pc, #188]	@ (8002934 <HAL_GPIO_Init+0x304>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_GPIO_Init+0x304>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002934 <HAL_GPIO_Init+0x304>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f67f aea2 	bls.w	800264c <HAL_GPIO_Init+0x1c>
=======
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a2 	beq.w	8002d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	4a56      	ldr	r2, [pc, #344]	@ (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0e:	4b54      	ldr	r3, [pc, #336]	@ (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_GPIO_Init+0x2ec>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x202>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_GPIO_Init+0x2f4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x1fe>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a47      	ldr	r2, [pc, #284]	@ (8002d70 <HAL_GPIO_Init+0x2f8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x1fa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a45      	ldr	r2, [pc, #276]	@ (8002d78 <HAL_GPIO_Init+0x300>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x1f2>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	@ (8002d64 <HAL_GPIO_Init+0x2ec>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b38      	ldr	r3, [pc, #224]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a1a      	ldr	r2, [pc, #104]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <HAL_GPIO_Init+0x304>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f aea2 	bls.w	8002a94 <HAL_GPIO_Init+0x1c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
}
<<<<<<< HEAD
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	@ 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
=======
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_GPIO_ReadPin>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
=======
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
=======
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_ReadPin+0x22>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
=======
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_GPIO_WritePin>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
=======
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
=======
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_GPIO_TogglePin>:
=======
 8002dcc:	e003      	b.n	8002dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_GPIO_TogglePin>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	807b      	strh	r3, [r7, #2]
=======
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_I2C_Init>:
=======
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	400b      	ands	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_I2C_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
=======
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e12b      	b.n	8002c3a <HAL_I2C_Init+0x26a>
=======
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e12b      	b.n	8003082 <HAL_I2C_Init+0x26a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fe36 	bl	8001668 <HAL_I2C_MspInit>
=======
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fcb4 	bl	80017ac <HAL_I2C_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	@ 0x24
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8002a34:	f003 fc00 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8002a38:	60f8      	str	r0, [r7, #12]
=======
 8002e7c:	f003 fc02 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a81      	ldr	r2, [pc, #516]	@ (8002c44 <HAL_I2C_Init+0x274>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d807      	bhi.n	8002a54 <HAL_I2C_Init+0x84>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a80      	ldr	r2, [pc, #512]	@ (8002c48 <HAL_I2C_Init+0x278>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bf94      	ite	ls
 8002a4c:	2301      	movls	r3, #1
 8002a4e:	2300      	movhi	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e006      	b.n	8002a62 <HAL_I2C_Init+0x92>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a7d      	ldr	r2, [pc, #500]	@ (8002c4c <HAL_I2C_Init+0x27c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0e7      	b.n	8002c3a <HAL_I2C_Init+0x26a>
=======
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f003 fc02 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4a81      	ldr	r2, [pc, #516]	@ (800308c <HAL_I2C_Init+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d807      	bhi.n	8002e9c <HAL_I2C_Init+0x84>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <HAL_I2C_Init+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e006      	b.n	8002eaa <HAL_I2C_Init+0x92>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8003094 <HAL_I2C_Init+0x27c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0e7      	b.n	8003082 <HAL_I2C_Init+0x26a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a78      	ldr	r2, [pc, #480]	@ (8002c50 <HAL_I2C_Init+0x280>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9b      	lsrs	r3, r3, #18
 8002a74:	60bb      	str	r3, [r7, #8]
=======
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a78      	ldr	r2, [pc, #480]	@ (8003098 <HAL_I2C_Init+0x280>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	60bb      	str	r3, [r7, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
=======
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	@ (8002c44 <HAL_I2C_Init+0x274>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d802      	bhi.n	8002aa4 <HAL_I2C_Init+0xd4>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	e009      	b.n	8002ab8 <HAL_I2C_Init+0xe8>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <HAL_I2C_Init+0x284>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6213      	str	r3, [r2, #32]
=======
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800308c <HAL_I2C_Init+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <HAL_I2C_Init+0xd4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e009      	b.n	8002f00 <HAL_I2C_Init+0xe8>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a69      	ldr	r2, [pc, #420]	@ (800309c <HAL_I2C_Init+0x284>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3301      	adds	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6213      	str	r3, [r2, #32]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002aca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	495c      	ldr	r1, [pc, #368]	@ (8002c44 <HAL_I2C_Init+0x274>)
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d819      	bhi.n	8002b0c <HAL_I2C_Init+0x13c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1e59      	subs	r1, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aec:	400b      	ands	r3, r1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_I2C_Init+0x138>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1e59      	subs	r1, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b06:	e051      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e04f      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d111      	bne.n	8002b38 <HAL_I2C_Init+0x168>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	440b      	add	r3, r1
 8002b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e012      	b.n	8002b5e <HAL_I2C_Init+0x18e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Init+0x196>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e022      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10e      	bne.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e58      	subs	r0, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	e00f      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6809      	ldr	r1, [r1, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61cb      	str	r3, [r1, #28]
=======
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	495c      	ldr	r1, [pc, #368]	@ (800308c <HAL_I2C_Init+0x274>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d819      	bhi.n	8002f54 <HAL_I2C_Init+0x13c>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e59      	subs	r1, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f34:	400b      	ands	r3, r1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_I2C_Init+0x138>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e59      	subs	r1, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	e051      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e04f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x168>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x18e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x196>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e022      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_I2C_Init+0x1bc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6809      	ldr	r1, [r1, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
=======
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6911      	ldr	r1, [r2, #16]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6093      	str	r3, [r2, #8]
=======
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003022:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6911      	ldr	r1, [r2, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	000186a0 	.word	0x000186a0
 8002c48:	001e847f 	.word	0x001e847f
 8002c4c:	003d08ff 	.word	0x003d08ff
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <I2C_Flush_DR>:
=======
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	000186a0 	.word	0x000186a0
 8003090:	001e847f 	.word	0x001e847f
 8003094:	003d08ff 	.word	0x003d08ff
 8003098:	431bde83 	.word	0x431bde83
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <I2C_Flush_DR>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6a:	2b80      	cmp	r3, #128	@ 0x80
 8002c6c:	d103      	bne.n	8002c76 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_I2C_Master_Transmit_IT>:
=======
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d103      	bne.n	80030be <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  }
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_I2C_Master_Transmit_IT>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	4613      	mov	r3, r2
 8002c96:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	f040 8081 	bne.w	8002dac <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002caa:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <HAL_I2C_Master_Transmit_IT+0x138>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	4a43      	ldr	r2, [pc, #268]	@ (8002dc0 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a1a      	lsrs	r2, r3, #8
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d112      	bne.n	8002cf6 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e05b      	b.n	8002dae <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d0df      	beq.n	8002cc4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_Master_Transmit_IT+0x8e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e04d      	b.n	8002dae <HAL_I2C_Master_Transmit_IT+0x12a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d007      	beq.n	8002d38 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
=======
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	f040 8081 	bne.w	80031f4 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80030f2:	4b44      	ldr	r3, [pc, #272]	@ (8003204 <HAL_I2C_Master_Transmit_IT+0x138>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	4a43      	ldr	r2, [pc, #268]	@ (8003208 <HAL_I2C_Master_Transmit_IT+0x13c>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0a1a      	lsrs	r2, r3, #8
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3b01      	subs	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d112      	bne.n	800313e <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e05b      	b.n	80031f6 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d0df      	beq.n	800310c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_I2C_Master_Transmit_IT+0x8e>
 8003156:	2302      	movs	r3, #2
 8003158:	e04d      	b.n	80031f6 <HAL_I2C_Master_Transmit_IT+0x12a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d007      	beq.n	8003180 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2221      	movs	r2, #33	@ 0x21
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2210      	movs	r2, #16
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	893a      	ldrh	r2, [r7, #8]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a13      	ldr	r2, [pc, #76]	@ (8002dc4 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002d78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002d7a:	897a      	ldrh	r2, [r7, #10]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2221      	movs	r2, #33	@ 0x21
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2210      	movs	r2, #16
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	893a      	ldrh	r2, [r7, #8]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a13      	ldr	r2, [pc, #76]	@ (800320c <HAL_I2C_Master_Transmit_IT+0x140>)
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80031c2:	897a      	ldrh	r2, [r7, #10]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
<<<<<<< HEAD
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002d96:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2C_Master_Transmit_IT+0x12a>
=======
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80031de:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_I2C_Master_Transmit_IT+0x12a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	14f8b589 	.word	0x14f8b589
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <HAL_I2C_EV_IRQHandler>:
=======
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000004 	.word	0x20000004
 8003208:	14f8b589 	.word	0x14f8b589
 800320c:	ffff0000 	.word	0xffff0000

08003210 <HAL_I2C_EV_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002de8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d003      	beq.n	8002e00 <HAL_I2C_EV_IRQHandler+0x38>
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b40      	cmp	r3, #64	@ 0x40
 8002dfc:	f040 80b1 	bne.w	8002f62 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_I2C_EV_IRQHandler+0x6e>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002e20:	d003      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x62>
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_EV_IRQHandler+0x66>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_EV_IRQHandler+0x68>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f000 8114 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x296>
=======
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003230:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b10      	cmp	r3, #16
 800323e:	d003      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0x38>
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b40      	cmp	r3, #64	@ 0x40
 8003244:	f040 80b1 	bne.w	80033aa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x6e>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003268:	d003      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x62>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003270:	d101      	bne.n	8003276 <HAL_I2C_EV_IRQHandler+0x66>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x68>
 8003276:	2300      	movs	r3, #0
 8003278:	2b01      	cmp	r3, #1
 800327a:	f000 8114 	beq.w	80034a6 <HAL_I2C_EV_IRQHandler+0x296>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
<<<<<<< HEAD
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x90>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f001 fb58 	bl	8004500 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fcd1 	bl	80037f8 <I2C_Master_SB>
 8002e56:	e083      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0xac>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fd49 	bl	8003904 <I2C_Master_ADD10>
 8002e72:	e075      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0xc8>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fd65 	bl	8003958 <I2C_Master_ADDR>
 8002e8e:	e067      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea8:	f000 80db 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f92d 	bl	800312a <I2C_MasterTransmit_TXE>
 8002ed0:	e046      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80c2 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80bc 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002eea:	7bbb      	ldrb	r3, [r7, #14]
 8002eec:	2b21      	cmp	r3, #33	@ 0x21
 8002eee:	d103      	bne.n	8002ef8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f9b6 	bl	8003262 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ef6:	e0b4      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
=======
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x90>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f001 fb58 	bl	8004948 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fcd1 	bl	8003c40 <I2C_Master_SB>
 800329e:	e083      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0xac>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fd49 	bl	8003d4c <I2C_Master_ADD10>
 80032ba:	e075      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_I2C_EV_IRQHandler+0xc8>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fd65 	bl	8003da0 <I2C_Master_ADDR>
 80032d6:	e067      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d036      	beq.n	8003350 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f0:	f000 80db 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x10a>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x10a>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f92d 	bl	8003572 <I2C_MasterTransmit_TXE>
 8003318:	e046      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80c2 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80bc 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003332:	7bbb      	ldrb	r3, [r7, #14]
 8003334:	2b21      	cmp	r3, #33	@ 0x21
 8003336:	d103      	bne.n	8003340 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f9b6 	bl	80036aa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	e0b4      	b.n	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
<<<<<<< HEAD
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	f040 80b1 	bne.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fa24 	bl	800334e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f06:	e0ac      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
=======
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b40      	cmp	r3, #64	@ 0x40
 8003344:	f040 80b1 	bne.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa24 	bl	8003796 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334e:	e0ac      	b.n	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
<<<<<<< HEAD
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f16:	f000 80a4 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <HAL_I2C_EV_IRQHandler+0x178>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_I2C_EV_IRQHandler+0x178>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 faa0 	bl	800347e <I2C_MasterReceive_RXNE>
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 808b 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8085 	beq.w	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fb58 	bl	800360e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f5e:	e080      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
 8002f60:	e07f      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x29a>
=======
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335e:	f000 80a4 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0x178>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0x178>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 faa0 	bl	80038c6 <I2C_MasterReceive_RXNE>
 8003386:	e00f      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 808b 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8085 	beq.w	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fb58 	bl	8003a56 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a6:	e080      	b.n	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
 80033a8:	e07f      	b.n	80034aa <HAL_I2C_EV_IRQHandler+0x29a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
<<<<<<< HEAD
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e007      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x1bc>
=======
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e007      	b.n	80033cc <HAL_I2C_EV_IRQHandler+0x1bc>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
<<<<<<< HEAD
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	61fb      	str	r3, [r7, #28]
=======
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	61fb      	str	r3, [r7, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
<<<<<<< HEAD
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d011      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00c      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 ff23 	bl	8003df6 <I2C_Slave_ADDR>
 8002fb0:	e05a      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_I2C_EV_IRQHandler+0x206>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 ff5e 	bl	8003e88 <I2C_Slave_STOPF>
 8002fcc:	e04c      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	2b21      	cmp	r3, #33	@ 0x21
 8002fd2:	d002      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x212>
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2b29      	cmp	r3, #41	@ 0x29
 8002fd8:	d120      	bne.n	800301c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x238>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x238>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d103      	bne.n	8003000 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fe3e 	bl	8003c7a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ffe:	e032      	b.n	8003066 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02d      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x29e>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003010:	2b00      	cmp	r3, #0
 8003012:	d028      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fe6d 	bl	8003cf4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800301a:	e024      	b.n	8003066 <HAL_I2C_EV_IRQHandler+0x29e>
=======
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x1ea>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff23 	bl	800423e <I2C_Slave_ADDR>
 80033f8:	e05a      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x206>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 ff5e 	bl	80042d0 <I2C_Slave_STOPF>
 8003414:	e04c      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003416:	7bbb      	ldrb	r3, [r7, #14]
 8003418:	2b21      	cmp	r3, #33	@ 0x21
 800341a:	d002      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x212>
 800341c:	7bbb      	ldrb	r3, [r7, #14]
 800341e:	2b29      	cmp	r3, #41	@ 0x29
 8003420:	d120      	bne.n	8003464 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_I2C_EV_IRQHandler+0x238>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_I2C_EV_IRQHandler+0x238>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fe3e 	bl	80040c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003446:	e032      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02d      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x29e>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d028      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fe6d 	bl	800413c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003462:	e024      	b.n	80034ae <HAL_I2C_EV_IRQHandler+0x29e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
<<<<<<< HEAD
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x27a>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x27a>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fe7b 	bl	8003d36 <I2C_SlaveReceive_RXNE>
 8003040:	e012      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 feab 	bl	8003db2 <I2C_SlaveReceive_BTF>
 800305c:	e004      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800305e:	bf00      	nop
 8003060:	e002      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003066:	bf00      	nop
=======
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x27a>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x27a>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe7b 	bl	800417e <I2C_SlaveReceive_RXNE>
 8003488:	e012      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 feab 	bl	80041fa <I2C_SlaveReceive_BTF>
 80034a4:	e004      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ae:	bf00      	nop
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Do nothing */
      }
    }
  }
}
<<<<<<< HEAD
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_I2C_MasterRxCpltCallback>:
=======
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_I2C_MasterRxCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
=======
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_I2C_SlaveTxCpltCallback>:
=======
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_I2C_SlaveTxCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
=======
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_I2C_SlaveRxCpltCallback>:
=======
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_I2C_SlaveRxCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
=======
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_I2C_AddrCallback>:
=======
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_AddrCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
<<<<<<< HEAD
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
 80030b6:	4613      	mov	r3, r2
 80030b8:	803b      	strh	r3, [r7, #0]
=======
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
 80034fe:	4613      	mov	r3, r2
 8003500:	803b      	strh	r3, [r7, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
<<<<<<< HEAD
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_I2C_ListenCpltCallback>:
=======
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_I2C_ListenCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
=======
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
<<<<<<< HEAD
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_I2C_MemTxCpltCallback>:
=======
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_I2C_MemTxCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
=======
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_I2C_MemRxCpltCallback>:
=======
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2C_MemRxCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
=======
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_I2C_ErrorCallback>:
=======
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_I2C_ErrorCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
=======
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_I2C_AbortCpltCallback>:
=======
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_I2C_AbortCpltCallback>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
=======
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <I2C_MasterTransmit_TXE>:
=======
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <I2C_MasterTransmit_TXE>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003138:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003140:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d150      	bne.n	80031f2 <I2C_MasterTransmit_TXE+0xc8>
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b21      	cmp	r3, #33	@ 0x21
 8003154:	d14d      	bne.n	80031f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d01d      	beq.n	8003198 <I2C_MasterTransmit_TXE+0x6e>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b20      	cmp	r3, #32
 8003160:	d01a      	beq.n	8003198 <I2C_MasterTransmit_TXE+0x6e>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003168:	d016      	beq.n	8003198 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003178:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2211      	movs	r2, #17
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003580:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003588:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d150      	bne.n	800363a <I2C_MasterTransmit_TXE+0xc8>
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b21      	cmp	r3, #33	@ 0x21
 800359c:	d14d      	bne.n	800363a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d01d      	beq.n	80035e0 <I2C_MasterTransmit_TXE+0x6e>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d01a      	beq.n	80035e0 <I2C_MasterTransmit_TXE+0x6e>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b0:	d016      	beq.n	80035e0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035c0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2211      	movs	r2, #17
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< HEAD
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe f9e3 	bl	800155c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003196:	e060      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
=======
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fe f811 	bl	8001600 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035de:	e060      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
<<<<<<< HEAD
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d107      	bne.n	80031e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d107      	bne.n	800362a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
<<<<<<< HEAD
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ff7d 	bl	80030da <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031e0:	e03b      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
=======
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ff7d 	bl	8003522 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003628:	e03b      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< HEAD
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe f9b6 	bl	800155c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031f0:	e033      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
=======
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd ffe4 	bl	8001600 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003638:	e033      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
<<<<<<< HEAD
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b21      	cmp	r3, #33	@ 0x21
 80031f6:	d005      	beq.n	8003204 <I2C_MasterTransmit_TXE+0xda>
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d12d      	bne.n	800325a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b22      	cmp	r3, #34	@ 0x22
 8003202:	d12a      	bne.n	800325a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d108      	bne.n	8003220 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321c:	605a      	str	r2, [r3, #4]
=======
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b21      	cmp	r3, #33	@ 0x21
 800363e:	d005      	beq.n	800364c <I2C_MasterTransmit_TXE+0xda>
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b40      	cmp	r3, #64	@ 0x40
 8003644:	d12d      	bne.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b22      	cmp	r3, #34	@ 0x22
 800364a:	d12a      	bne.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Do nothing */
  }
}
<<<<<<< HEAD
 800321e:	e01c      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b40      	cmp	r3, #64	@ 0x40
 800322a:	d103      	bne.n	8003234 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f88e 	bl	800334e <I2C_MemoryTransmit_TXE_BTF>
}
 8003232:	e012      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003258:	e7ff      	b.n	800325a <I2C_MasterTransmit_TXE+0x130>
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <I2C_MasterTransmit_BTF>:
=======
 8003666:	e01c      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d103      	bne.n	800367c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f88e 	bl	8003796 <I2C_MemoryTransmit_TXE_BTF>
}
 800367a:	e012      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036a0:	e7ff      	b.n	80036a2 <I2C_MasterTransmit_TXE+0x130>
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2C_MasterTransmit_BTF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b21      	cmp	r3, #33	@ 0x21
 800327a:	d164      	bne.n	8003346 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d012      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b21      	cmp	r3, #33	@ 0x21
 80036c2:	d164      	bne.n	800378e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Do nothing */
  }
}
<<<<<<< HEAD
 80032aa:	e04c      	b.n	8003346 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d01d      	beq.n	80032ee <I2C_MasterTransmit_BTF+0x8c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d01a      	beq.n	80032ee <I2C_MasterTransmit_BTF+0x8c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032be:	d016      	beq.n	80032ee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2211      	movs	r2, #17
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe f938 	bl	800155c <HAL_I2C_MasterTxCpltCallback>
}
 80032ec:	e02b      	b.n	8003346 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032fc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d107      	bne.n	8003338 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fed2 	bl	80030da <HAL_I2C_MemTxCpltCallback>
}
 8003336:	e006      	b.n	8003346 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fe f90b 	bl	800155c <HAL_I2C_MasterTxCpltCallback>
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_MemoryTransmit_TXE_BTF>:
=======
 80036f2:	e04c      	b.n	800378e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d01d      	beq.n	8003736 <I2C_MasterTransmit_BTF+0x8c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d01a      	beq.n	8003736 <I2C_MasterTransmit_BTF+0x8c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003706:	d016      	beq.n	8003736 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003716:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2211      	movs	r2, #17
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd ff66 	bl	8001600 <HAL_I2C_MasterTxCpltCallback>
}
 8003734:	e02b      	b.n	800378e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003744:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003754:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d107      	bne.n	8003780 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff fed2 	bl	8003522 <HAL_I2C_MemTxCpltCallback>
}
 800377e:	e006      	b.n	800378e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd ff39 	bl	8001600 <HAL_I2C_MasterTxCpltCallback>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <I2C_MemoryTransmit_TXE_BTF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11d      	bne.n	80033a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10b      	bne.n	8003386 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003372:	b2da      	uxtb	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	1c9a      	adds	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10b      	bne.n	80037ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
<<<<<<< HEAD
 8003384:	e077      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	b29b      	uxth	r3, r3
 800338c:	121b      	asrs	r3, r3, #8
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033a0:	e069      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10b      	bne.n	80033c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033c0:	e059      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d152      	bne.n	8003470 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b22      	cmp	r3, #34	@ 0x22
 80033ce:	d10d      	bne.n	80033ec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033de:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033ea:	e044      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b21      	cmp	r3, #33	@ 0x21
 80033fa:	d112      	bne.n	8003422 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003420:	e029      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d124      	bne.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b21      	cmp	r3, #33	@ 0x21
 8003430:	d121      	bne.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003440:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003450:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fe36 	bl	80030da <HAL_I2C_MemTxCpltCallback>
}
 800346e:	e002      	b.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fbf1 	bl	8002c58 <I2C_Flush_DR>
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <I2C_MasterReceive_RXNE>:
=======
 80037cc:	e077      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	121b      	asrs	r3, r3, #8
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037e8:	e069      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10b      	bne.n	800380a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003808:	e059      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	2b02      	cmp	r3, #2
 8003810:	d152      	bne.n	80038b8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b22      	cmp	r3, #34	@ 0x22
 8003816:	d10d      	bne.n	8003834 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003826:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003832:	e044      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b21      	cmp	r3, #33	@ 0x21
 8003842:	d112      	bne.n	800386a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003868:	e029      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d124      	bne.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b21      	cmp	r3, #33	@ 0x21
 8003878:	d121      	bne.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003888:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003898:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fe36 	bl	8003522 <HAL_I2C_MemTxCpltCallback>
}
 80038b6:	e002      	b.n	80038be <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fbf1 	bl	80030a0 <I2C_Flush_DR>
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_MasterReceive_RXNE>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	@ 0x22
 8003490:	f040 80b9 	bne.w	8003606 <I2C_MasterReceive_RXNE+0x188>
=======
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b22      	cmp	r3, #34	@ 0x22
 80038d8:	f040 80b9 	bne.w	8003a4e <I2C_MasterReceive_RXNE+0x188>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
<<<<<<< HEAD
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d921      	bls.n	80034ec <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	f040 8096 	bne.w	8003606 <I2C_MasterReceive_RXNE+0x188>
=======
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d921      	bls.n	8003934 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b03      	cmp	r3, #3
 800391e:	f040 8096 	bne.w	8003a4e <I2C_MasterReceive_RXNE+0x188>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
<<<<<<< HEAD
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e8:	605a      	str	r2, [r3, #4]
=======
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003930:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
<<<<<<< HEAD
 80034ea:	e08c      	b.n	8003606 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d07f      	beq.n	80035f4 <I2C_MasterReceive_RXNE+0x176>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <I2C_MasterReceive_RXNE+0x82>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d179      	bne.n	80035f4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 ffcb 	bl	800449c <I2C_WaitOnSTOPRequestThroughIT>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d14c      	bne.n	80035a6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800352a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b40      	cmp	r3, #64	@ 0x40
 8003564:	d10a      	bne.n	800357c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fdba 	bl	80030ee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800357a:	e044      	b.n	8003606 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d002      	beq.n	8003590 <I2C_MasterReceive_RXNE+0x112>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b20      	cmp	r3, #32
 800358e:	d103      	bne.n	8003598 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
 8003596:	e002      	b.n	800359e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2212      	movs	r2, #18
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fd65 	bl	800306e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035a4:	e02f      	b.n	8003606 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fd88 	bl	8003102 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035f2:	e008      	b.n	8003606 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003602:	605a      	str	r2, [r3, #4]
}
 8003604:	e7ff      	b.n	8003606 <I2C_MasterReceive_RXNE+0x188>
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <I2C_MasterReceive_BTF>:
=======
 8003932:	e08c      	b.n	8003a4e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	2b02      	cmp	r3, #2
 800393a:	d07f      	beq.n	8003a3c <I2C_MasterReceive_RXNE+0x176>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d002      	beq.n	8003948 <I2C_MasterReceive_RXNE+0x82>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d179      	bne.n	8003a3c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 ffcb 	bl	80048e4 <I2C_WaitOnSTOPRequestThroughIT>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d14c      	bne.n	80039ee <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003962:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003972:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d10a      	bne.n	80039c4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fdba 	bl	8003536 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039c2:	e044      	b.n	8003a4e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d002      	beq.n	80039d8 <I2C_MasterReceive_RXNE+0x112>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d103      	bne.n	80039e0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80039de:	e002      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2212      	movs	r2, #18
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fd65 	bl	80034b6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039ec:	e02f      	b.n	8003a4e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fd88 	bl	800354a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a3a:	e008      	b.n	8003a4e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4a:	605a      	str	r2, [r3, #4]
}
 8003a4c:	e7ff      	b.n	8003a4e <I2C_MasterReceive_RXNE+0x188>
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <I2C_MasterReceive_BTF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b04      	cmp	r3, #4
 8003624:	d11b      	bne.n	800365e <I2C_MasterReceive_BTF+0x50>
=======
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d11b      	bne.n	8003aa6 <I2C_MasterReceive_BTF+0x50>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
<<<<<<< HEAD
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003634:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
<<<<<<< HEAD
 800365c:	e0c8      	b.n	80037f0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d129      	bne.n	80036bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003676:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b04      	cmp	r3, #4
 800367c:	d00a      	beq.n	8003694 <I2C_MasterReceive_BTF+0x86>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d007      	beq.n	8003694 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003692:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036ba:	e099      	b.n	80037f0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f040 8081 	bne.w	80037ca <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d002      	beq.n	80036d4 <I2C_MasterReceive_BTF+0xc6>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d108      	bne.n	80036e6 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e019      	b.n	800371a <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d002      	beq.n	80036f2 <I2C_MasterReceive_BTF+0xe4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d108      	bne.n	8003704 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00a      	b.n	800371a <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d007      	beq.n	800371a <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003718:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003774:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d10a      	bne.n	80037a0 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fca8 	bl	80030ee <HAL_I2C_MemRxCpltCallback>
}
 800379e:	e027      	b.n	80037f0 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d002      	beq.n	80037b4 <I2C_MasterReceive_BTF+0x1a6>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d103      	bne.n	80037bc <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ba:	e002      	b.n	80037c2 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2212      	movs	r2, #18
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fc53 	bl	800306e <HAL_I2C_MasterRxCpltCallback>
}
 80037c8:	e012      	b.n	80037f0 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_Master_SB>:
=======
 8003aa4:	e0c8      	b.n	8003c38 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d129      	bne.n	8003b04 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003abe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d00a      	beq.n	8003adc <I2C_MasterReceive_BTF+0x86>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d007      	beq.n	8003adc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ada:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b02:	e099      	b.n	8003c38 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f040 8081 	bne.w	8003c12 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d002      	beq.n	8003b1c <I2C_MasterReceive_BTF+0xc6>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d108      	bne.n	8003b2e <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e019      	b.n	8003b62 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d002      	beq.n	8003b3a <I2C_MasterReceive_BTF+0xe4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d108      	bne.n	8003b4c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e00a      	b.n	8003b62 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d007      	beq.n	8003b62 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bbc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d10a      	bne.n	8003be8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fca8 	bl	8003536 <HAL_I2C_MemRxCpltCallback>
}
 8003be6:	e027      	b.n	8003c38 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d002      	beq.n	8003bfc <I2C_MasterReceive_BTF+0x1a6>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d103      	bne.n	8003c04 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c02:	e002      	b.n	8003c0a <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2212      	movs	r2, #18
 8003c08:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fc53 	bl	80034b6 <HAL_I2C_MasterRxCpltCallback>
}
 8003c10:	e012      	b.n	8003c38 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_Master_SB>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b40      	cmp	r3, #64	@ 0x40
 800380a:	d117      	bne.n	800383c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003824:	611a      	str	r2, [r3, #16]
=======
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d117      	bne.n	8003c84 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c6c:	611a      	str	r2, [r3, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Do nothing */
      }
    }
  }
}
<<<<<<< HEAD
 8003826:	e067      	b.n	80038f8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]
}
 800383a:	e05d      	b.n	80038f8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003844:	d133      	bne.n	80038ae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b21      	cmp	r3, #33	@ 0x21
 8003850:	d109      	bne.n	8003866 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	e008      	b.n	8003878 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <I2C_Master_SB+0x92>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <I2C_Master_SB+0x100>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02d      	beq.n	80038f8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038aa:	605a      	str	r2, [r3, #4]
}
 80038ac:	e024      	b.n	80038f8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10e      	bne.n	80038d4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	11db      	asrs	r3, r3, #7
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0306 	and.w	r3, r3, #6
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f063 030f 	orn	r3, r3, #15
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]
}
 80038d2:	e011      	b.n	80038f8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10d      	bne.n	80038f8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	11db      	asrs	r3, r3, #7
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0306 	and.w	r3, r3, #6
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f063 030e 	orn	r3, r3, #14
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <I2C_Master_ADD10>:
=======
 8003c6e:	e067      	b.n	8003d40 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]
}
 8003c82:	e05d      	b.n	8003d40 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d133      	bne.n	8003cf6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b21      	cmp	r3, #33	@ 0x21
 8003c98:	d109      	bne.n	8003cae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003caa:	611a      	str	r2, [r3, #16]
 8003cac:	e008      	b.n	8003cc0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <I2C_Master_SB+0x92>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d032      	beq.n	8003d40 <I2C_Master_SB+0x100>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02d      	beq.n	8003d40 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf2:	605a      	str	r2, [r3, #4]
}
 8003cf4:	e024      	b.n	8003d40 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10e      	bne.n	8003d1c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	11db      	asrs	r3, r3, #7
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 0306 	and.w	r3, r3, #6
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f063 030f 	orn	r3, r3, #15
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
}
 8003d1a:	e011      	b.n	8003d40 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10d      	bne.n	8003d40 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	11db      	asrs	r3, r3, #7
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f063 030e 	orn	r3, r3, #14
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <I2C_Master_ADD10>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	b2da      	uxtb	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <I2C_Master_ADD10+0x26>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <I2C_Master_ADD10+0x48>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800394a:	605a      	str	r2, [r3, #4]
  }
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <I2C_Master_ADDR>:
=======
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <I2C_Master_ADD10+0x26>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <I2C_Master_ADD10+0x48>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d92:	605a      	str	r2, [r3, #4]
  }
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <I2C_Master_ADDR>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003958:	b480      	push	{r7}
 800395a:	b091      	sub	sp, #68	@ 0x44
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003966:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b22      	cmp	r3, #34	@ 0x22
 8003980:	f040 8169 	bne.w	8003c56 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <I2C_Master_ADDR+0x54>
 800398c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003990:	2b40      	cmp	r3, #64	@ 0x40
 8003992:	d10b      	bne.n	80039ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003994:	2300      	movs	r3, #0
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	e160      	b.n	8003c6e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <I2C_Master_ADDR+0x98>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039bc:	d118      	bne.n	80039f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80039ee:	e13e      	b.n	8003c6e <I2C_Master_ADDR+0x316>
=======
 8003da0:	b480      	push	{r7}
 8003da2:	b091      	sub	sp, #68	@ 0x44
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b22      	cmp	r3, #34	@ 0x22
 8003dc8:	f040 8169 	bne.w	800409e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <I2C_Master_ADDR+0x54>
 8003dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d10b      	bne.n	8003df4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	e160      	b.n	80040b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11d      	bne.n	8003e38 <I2C_Master_ADDR+0x98>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e04:	d118      	bne.n	8003e38 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e36:	e13e      	b.n	80040b6 <I2C_Master_ADDR+0x316>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      if (hi2c->XferCount == 0U)
<<<<<<< HEAD
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e115      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 808a 	bne.w	8003b42 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a34:	d137      	bne.n	8003aa6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a44:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a54:	d113      	bne.n	8003a7e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a64:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	e0e7      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
=======
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e115      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	f040 808a 	bne.w	8003f8a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e7c:	d137      	bne.n	8003eee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d113      	bne.n	8003ec6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	e0e7      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	623b      	str	r3, [r7, #32]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e0d3      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
=======
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e0d3      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
<<<<<<< HEAD
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d02e      	beq.n	8003b0a <I2C_Master_ADDR+0x1b2>
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d02b      	beq.n	8003b0a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	2b12      	cmp	r3, #18
 8003ab6:	d102      	bne.n	8003abe <I2C_Master_ADDR+0x166>
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d125      	bne.n	8003b0a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00e      	beq.n	8003ae2 <I2C_Master_ADDR+0x18a>
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d00b      	beq.n	8003ae2 <I2C_Master_ADDR+0x18a>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d008      	beq.n	8003ae2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e007      	b.n	8003af2 <I2C_Master_ADDR+0x19a>
=======
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d02e      	beq.n	8003f52 <I2C_Master_ADDR+0x1b2>
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d02b      	beq.n	8003f52 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	2b12      	cmp	r3, #18
 8003efe:	d102      	bne.n	8003f06 <I2C_Master_ADDR+0x166>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d125      	bne.n	8003f52 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00e      	beq.n	8003f2a <I2C_Master_ADDR+0x18a>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d00b      	beq.n	8003f2a <I2C_Master_ADDR+0x18a>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d008      	beq.n	8003f2a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e007      	b.n	8003f3a <I2C_Master_ADDR+0x19a>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003af0:	601a      	str	r2, [r3, #0]
=======
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	e0a1      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
=======
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	e0a1      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e085      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d14d      	bne.n	8003be8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d016      	beq.n	8003b80 <I2C_Master_ADDR+0x228>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d013      	beq.n	8003b80 <I2C_Master_ADDR+0x228>
 8003b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d010      	beq.n	8003b80 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e007      	b.n	8003b90 <I2C_Master_ADDR+0x238>
=======
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f60:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e085      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d14d      	bne.n	8004030 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d016      	beq.n	8003fc8 <I2C_Master_ADDR+0x228>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d013      	beq.n	8003fc8 <I2C_Master_ADDR+0x228>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d010      	beq.n	8003fc8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e007      	b.n	8003fd8 <I2C_Master_ADDR+0x238>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9e:	d117      	bne.n	8003bd0 <I2C_Master_ADDR+0x278>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ba6:	d00b      	beq.n	8003bc0 <I2C_Master_ADDR+0x268>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d008      	beq.n	8003bc0 <I2C_Master_ADDR+0x268>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d005      	beq.n	8003bc0 <I2C_Master_ADDR+0x268>
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d002      	beq.n	8003bc0 <I2C_Master_ADDR+0x268>
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d107      	bne.n	8003bd0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bce:	605a      	str	r2, [r3, #4]
=======
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fd6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe6:	d117      	bne.n	8004018 <I2C_Master_ADDR+0x278>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fee:	d00b      	beq.n	8004008 <I2C_Master_ADDR+0x268>
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d008      	beq.n	8004008 <I2C_Master_ADDR+0x268>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d005      	beq.n	8004008 <I2C_Master_ADDR+0x268>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d002      	beq.n	8004008 <I2C_Master_ADDR+0x268>
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2b20      	cmp	r3, #32
 8004006:	d107      	bne.n	8004018 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004016:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	e032      	b.n	8003c4e <I2C_Master_ADDR+0x2f6>
=======
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	e032      	b.n	8004096 <I2C_Master_ADDR+0x2f6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bf6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c06:	d117      	bne.n	8003c38 <I2C_Master_ADDR+0x2e0>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c0e:	d00b      	beq.n	8003c28 <I2C_Master_ADDR+0x2d0>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d008      	beq.n	8003c28 <I2C_Master_ADDR+0x2d0>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d005      	beq.n	8003c28 <I2C_Master_ADDR+0x2d0>
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d002      	beq.n	8003c28 <I2C_Master_ADDR+0x2d0>
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d107      	bne.n	8003c38 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c36:	605a      	str	r2, [r3, #4]
=======
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800403e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404e:	d117      	bne.n	8004080 <I2C_Master_ADDR+0x2e0>
 8004050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004052:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004056:	d00b      	beq.n	8004070 <I2C_Master_ADDR+0x2d0>
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	2b01      	cmp	r3, #1
 800405c:	d008      	beq.n	8004070 <I2C_Master_ADDR+0x2d0>
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	2b08      	cmp	r3, #8
 8004062:	d005      	beq.n	8004070 <I2C_Master_ADDR+0x2d0>
 8004064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004066:	2b10      	cmp	r3, #16
 8004068:	d002      	beq.n	8004070 <I2C_Master_ADDR+0x2d0>
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	2b20      	cmp	r3, #32
 800406e:	d107      	bne.n	8004080 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800407e:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
=======
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
<<<<<<< HEAD
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
<<<<<<< HEAD
 8003c54:	e00b      	b.n	8003c6e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	e7ff      	b.n	8003c6e <I2C_Master_ADDR+0x316>
 8003c6e:	bf00      	nop
 8003c70:	3744      	adds	r7, #68	@ 0x44
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <I2C_SlaveTransmit_TXE>:
=======
 800409c:	e00b      	b.n	80040b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	e7ff      	b.n	80040b6 <I2C_Master_ADDR+0x316>
 80040b6:	bf00      	nop
 80040b8:	3744      	adds	r7, #68	@ 0x44
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <I2C_SlaveTransmit_TXE>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02b      	beq.n	8003cec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d114      	bne.n	8003cec <I2C_SlaveTransmit_TXE+0x72>
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b29      	cmp	r3, #41	@ 0x29
 8003cc6:	d111      	bne.n	8003cec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2221      	movs	r2, #33	@ 0x21
 8003cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2228      	movs	r2, #40	@ 0x28
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02b      	beq.n	8004134 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d114      	bne.n	8004134 <I2C_SlaveTransmit_TXE+0x72>
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b29      	cmp	r3, #41	@ 0x29
 800410e:	d111      	bne.n	8004134 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800411e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2221      	movs	r2, #33	@ 0x21
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2228      	movs	r2, #40	@ 0x28
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
<<<<<<< HEAD
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff f9cb 	bl	8003082 <HAL_I2C_SlaveTxCpltCallback>
=======
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff f9cb 	bl	80034ca <HAL_I2C_SlaveTxCpltCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_SlaveTransmit_BTF>:
=======
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <I2C_SlaveTransmit_BTF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <I2C_SlaveReceive_RXNE>:
=======
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <I2C_SlaveReceive_RXNE>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02c      	beq.n	8003daa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <I2C_SlaveReceive_RXNE+0x74>
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d84:	d111      	bne.n	8003daa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2222      	movs	r2, #34	@ 0x22
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2228      	movs	r2, #40	@ 0x28
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02c      	beq.n	80041f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d114      	bne.n	80041f2 <I2C_SlaveReceive_RXNE+0x74>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80041cc:	d111      	bne.n	80041f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2222      	movs	r2, #34	@ 0x22
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2228      	movs	r2, #40	@ 0x28
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
<<<<<<< HEAD
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff f976 	bl	8003096 <HAL_I2C_SlaveRxCpltCallback>
=======
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff f976 	bl	80034de <HAL_I2C_SlaveRxCpltCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_SlaveReceive_BTF>:
=======
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2C_SlaveReceive_BTF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d012      	beq.n	8003dea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <I2C_Slave_ADDR>:
=======
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <I2C_Slave_ADDR>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
<<<<<<< HEAD
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e10:	2b28      	cmp	r3, #40	@ 0x28
 8003e12:	d125      	bne.n	8003e60 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e22:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	81bb      	strh	r3, [r7, #12]
 8003e42:	e002      	b.n	8003e4a <I2C_Slave_ADDR+0x54>
=======
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004258:	2b28      	cmp	r3, #40	@ 0x28
 800425a:	d125      	bne.n	80042a8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	81bb      	strh	r3, [r7, #12]
 800428a:	e002      	b.n	8004292 <I2C_Slave_ADDR+0x54>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
<<<<<<< HEAD
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	81bb      	strh	r3, [r7, #12]
=======
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	81bb      	strh	r3, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
<<<<<<< HEAD
 8003e52:	89ba      	ldrh	r2, [r7, #12]
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff f926 	bl	80030aa <HAL_I2C_AddrCallback>
=======
 800429a:	89ba      	ldrh	r2, [r7, #12]
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff f926 	bl	80034f2 <HAL_I2C_AddrCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
<<<<<<< HEAD
 8003e5e:	e00e      	b.n	8003e7e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <I2C_Slave_STOPF>:
=======
 80042a6:	e00e      	b.n	80042c6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <I2C_Slave_STOPF>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee4:	d172      	bne.n	8003fcc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b22      	cmp	r3, #34	@ 0x22
 8003eea:	d002      	beq.n	8003ef2 <I2C_Slave_STOPF+0x6a>
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef0:	d135      	bne.n	8003f5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432c:	d172      	bne.n	8004414 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b22      	cmp	r3, #34	@ 0x22
 8004332:	d002      	beq.n	800433a <I2C_Slave_STOPF+0x6a>
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b2a      	cmp	r3, #42	@ 0x2a
 8004338:	d135      	bne.n	80043a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
<<<<<<< HEAD
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fb71 	bl	8002612 <HAL_DMA_GetState>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d049      	beq.n	8003fca <I2C_Slave_STOPF+0x142>
=======
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800436c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fb71 	bl	8002a5a <HAL_DMA_GetState>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d049      	beq.n	8004412 <I2C_Slave_STOPF+0x142>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	4a69      	ldr	r2, [pc, #420]	@ (80040e0 <I2C_Slave_STOPF+0x258>)
 8003f3c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fb43 	bl	80025ce <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03d      	beq.n	8003fca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f5c:	e035      	b.n	8003fca <I2C_Slave_STOPF+0x142>
=======
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004382:	4a69      	ldr	r2, [pc, #420]	@ (8004528 <I2C_Slave_STOPF+0x258>)
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fb43 	bl	8002a16 <HAL_DMA_Abort_IT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03d      	beq.n	8004412 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a0:	4610      	mov	r0, r2
 80043a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043a4:	e035      	b.n	8004412 <I2C_Slave_STOPF+0x142>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
<<<<<<< HEAD
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
<<<<<<< HEAD
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fb3b 	bl	8002612 <HAL_DMA_GetState>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d014      	beq.n	8003fcc <I2C_Slave_STOPF+0x144>
=======
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fb3b 	bl	8002a5a <HAL_DMA_GetState>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d014      	beq.n	8004414 <I2C_Slave_STOPF+0x144>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80040e0 <I2C_Slave_STOPF+0x258>)
 8003fa8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fb0d 	bl	80025ce <HAL_DMA_Abort_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4798      	blx	r3
 8003fc8:	e000      	b.n	8003fcc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fca:	bf00      	nop
=======
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004528 <I2C_Slave_STOPF+0x258>)
 80043f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fb0d 	bl	8002a16 <HAL_DMA_Abort_IT>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800440c:	4610      	mov	r0, r2
 800440e:	4798      	blx	r3
 8004410:	e000      	b.n	8004414 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004412:	bf00      	nop
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
<<<<<<< HEAD
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03e      	beq.n	8004054 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d112      	bne.n	800400a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d03e      	beq.n	800449c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b04      	cmp	r3, #4
 800442a:	d112      	bne.n	8004452 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
<<<<<<< HEAD
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b40      	cmp	r3, #64	@ 0x40
 8004016:	d112      	bne.n	800403e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d112      	bne.n	8004486 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f043 0204 	orr.w	r2, r3, #4
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
<<<<<<< HEAD
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f843 	bl	80040e8 <I2C_ITError>
=======
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f843 	bl	8004530 <I2C_ITError>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
<<<<<<< HEAD
 8004062:	e039      	b.n	80040d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b2a      	cmp	r3, #42	@ 0x2a
 8004068:	d109      	bne.n	800407e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2228      	movs	r2, #40	@ 0x28
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff f80c 	bl	8003096 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b28      	cmp	r3, #40	@ 0x28
 8004088:	d111      	bne.n	80040ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <I2C_Slave_STOPF+0x25c>)
 800408e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff f80d 	bl	80030c6 <HAL_I2C_ListenCpltCallback>
}
 80040ac:	e014      	b.n	80040d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	2b22      	cmp	r3, #34	@ 0x22
 80040b4:	d002      	beq.n	80040bc <I2C_Slave_STOPF+0x234>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b22      	cmp	r3, #34	@ 0x22
 80040ba:	d10d      	bne.n	80040d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe ffdf 	bl	8003096 <HAL_I2C_SlaveRxCpltCallback>
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	0800434d 	.word	0x0800434d
 80040e4:	ffff0000 	.word	0xffff0000

080040e8 <I2C_ITError>:
=======
 80044aa:	e039      	b.n	8004520 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b0:	d109      	bne.n	80044c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2228      	movs	r2, #40	@ 0x28
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff f80c 	bl	80034de <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b28      	cmp	r3, #40	@ 0x28
 80044d0:	d111      	bne.n	80044f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a15      	ldr	r2, [pc, #84]	@ (800452c <I2C_Slave_STOPF+0x25c>)
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff f80d 	bl	800350e <HAL_I2C_ListenCpltCallback>
}
 80044f4:	e014      	b.n	8004520 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b22      	cmp	r3, #34	@ 0x22
 80044fc:	d002      	beq.n	8004504 <I2C_Slave_STOPF+0x234>
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b22      	cmp	r3, #34	@ 0x22
 8004502:	d10d      	bne.n	8004520 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe ffdf 	bl	80034de <HAL_I2C_SlaveRxCpltCallback>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	08004795 	.word	0x08004795
 800452c:	ffff0000 	.word	0xffff0000

08004530 <I2C_ITError>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d002      	beq.n	800410c <I2C_ITError+0x24>
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	d10a      	bne.n	8004122 <I2C_ITError+0x3a>
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b22      	cmp	r3, #34	@ 0x22
 8004110:	d107      	bne.n	8004122 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004120:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004128:	2b28      	cmp	r3, #40	@ 0x28
 800412a:	d107      	bne.n	800413c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2228      	movs	r2, #40	@ 0x28
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800413a:	e015      	b.n	8004168 <I2C_ITError+0x80>
=======
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004546:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004548:	7bbb      	ldrb	r3, [r7, #14]
 800454a:	2b10      	cmp	r3, #16
 800454c:	d002      	beq.n	8004554 <I2C_ITError+0x24>
 800454e:	7bbb      	ldrb	r3, [r7, #14]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d10a      	bne.n	800456a <I2C_ITError+0x3a>
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b22      	cmp	r3, #34	@ 0x22
 8004558:	d107      	bne.n	800456a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004568:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004570:	2b28      	cmp	r3, #40	@ 0x28
 8004572:	d107      	bne.n	8004584 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2228      	movs	r2, #40	@ 0x28
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004582:	e015      	b.n	80045b0 <I2C_ITError+0x80>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
<<<<<<< HEAD
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800414a:	d00a      	beq.n	8004162 <I2C_ITError+0x7a>
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b60      	cmp	r3, #96	@ 0x60
 8004150:	d007      	beq.n	8004162 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004592:	d00a      	beq.n	80045aa <I2C_ITError+0x7a>
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b60      	cmp	r3, #96	@ 0x60
 8004598:	d007      	beq.n	80045aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
<<<<<<< HEAD
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004176:	d162      	bne.n	800423e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004186:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d020      	beq.n	80041d8 <I2C_ITError+0xf0>
=======
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045be:	d162      	bne.n	8004686 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d020      	beq.n	8004620 <I2C_ITError+0xf0>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	4a6a      	ldr	r2, [pc, #424]	@ (8004344 <I2C_ITError+0x25c>)
 800419c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fa13 	bl	80025ce <HAL_DMA_Abort_IT>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8089 	beq.w	80042c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041d2:	4610      	mov	r0, r2
 80041d4:	4798      	blx	r3
 80041d6:	e074      	b.n	80042c2 <I2C_ITError+0x1da>
=======
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e2:	4a6a      	ldr	r2, [pc, #424]	@ (800478c <I2C_ITError+0x25c>)
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fa13 	bl	8002a16 <HAL_DMA_Abort_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8089 	beq.w	800470a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800461a:	4610      	mov	r0, r2
 800461c:	4798      	blx	r3
 800461e:	e074      	b.n	800470a <I2C_ITError+0x1da>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	4a59      	ldr	r2, [pc, #356]	@ (8004344 <I2C_ITError+0x25c>)
 80041de:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe f9f2 	bl	80025ce <HAL_DMA_Abort_IT>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d068      	beq.n	80042c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d10b      	bne.n	8004216 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	4a59      	ldr	r2, [pc, #356]	@ (800478c <I2C_ITError+0x25c>)
 8004626:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f9f2 	bl	8002a16 <HAL_DMA_Abort_IT>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d068      	beq.n	800470a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d10b      	bne.n	800465e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004238:	4610      	mov	r0, r2
 800423a:	4798      	blx	r3
 800423c:	e041      	b.n	80042c2 <I2C_ITError+0x1da>
=======
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004680:	4610      	mov	r0, r2
 8004682:	4798      	blx	r3
 8004684:	e041      	b.n	800470a <I2C_ITError+0x1da>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
<<<<<<< HEAD
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b60      	cmp	r3, #96	@ 0x60
 8004248:	d125      	bne.n	8004296 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d10b      	bne.n	800427e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b60      	cmp	r3, #96	@ 0x60
 8004690:	d125      	bne.n	80046de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d10b      	bne.n	80046c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
=======
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< HEAD
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe ff41 	bl	8003116 <HAL_I2C_AbortCpltCallback>
 8004294:	e015      	b.n	80042c2 <I2C_ITError+0x1da>
=======
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe ff41 	bl	800355e <HAL_I2C_AbortCpltCallback>
 80046dc:	e015      	b.n	800470a <I2C_ITError+0x1da>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
<<<<<<< HEAD
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d10b      	bne.n	80042bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b40      	cmp	r3, #64	@ 0x40
 80046ea:	d10b      	bne.n	8004704 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
<<<<<<< HEAD
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fe ff20 	bl	8003102 <HAL_I2C_ErrorCallback>
=======
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fe ff20 	bl	800354a <HAL_I2C_ErrorCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
<<<<<<< HEAD
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10e      	bne.n	80042f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042fe:	605a      	str	r2, [r3, #4]
=======
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10e      	bne.n	8004738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004746:	605a      	str	r2, [r3, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
<<<<<<< HEAD
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d113      	bne.n	800433c <I2C_ITError+0x254>
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b28      	cmp	r3, #40	@ 0x28
 8004318:	d110      	bne.n	800433c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a0a      	ldr	r2, [pc, #40]	@ (8004348 <I2C_ITError+0x260>)
 800431e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d113      	bne.n	8004784 <I2C_ITError+0x254>
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b28      	cmp	r3, #40	@ 0x28
 8004760:	d110      	bne.n	8004784 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <I2C_ITError+0x260>)
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
<<<<<<< HEAD
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fe fec5 	bl	80030c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0800434d 	.word	0x0800434d
 8004348:	ffff0000 	.word	0xffff0000

0800434c <I2C_DMAAbort>:
=======
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fe fec5 	bl	800350e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08004795 	.word	0x08004795
 8004790:	ffff0000 	.word	0xffff0000

08004794 <I2C_DMAAbort>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	74fb      	strb	r3, [r7, #19]
=======
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ac:	74fb      	strb	r3, [r7, #19]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
<<<<<<< HEAD
 8004366:	4b4b      	ldr	r3, [pc, #300]	@ (8004494 <I2C_DMAAbort+0x148>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	08db      	lsrs	r3, r3, #3
 800436c:	4a4a      	ldr	r2, [pc, #296]	@ (8004498 <I2C_DMAAbort+0x14c>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0a1a      	lsrs	r2, r3, #8
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00da      	lsls	r2, r3, #3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004392:	e00a      	b.n	80043aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b01      	subs	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a8:	d0ea      	beq.n	8004380 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b6:	2200      	movs	r2, #0
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 80047ae:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <I2C_DMAAbort+0x148>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	4a4a      	ldr	r2, [pc, #296]	@ (80048e0 <I2C_DMAAbort+0x14c>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	0a1a      	lsrs	r2, r3, #8
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80047da:	e00a      	b.n	80047f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f0:	d0ea      	beq.n	80047c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	2200      	movs	r2, #0
 8004800:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	2200      	movs	r2, #0
 8004810:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	2200      	movs	r2, #0
 80043ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	2200      	movs	r2, #0
 80043fe:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004820:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	2200      	movs	r2, #0
 8004836:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b60      	cmp	r3, #96	@ 0x60
 800441a:	d10e      	bne.n	800443a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b60      	cmp	r3, #96	@ 0x60
 8004862:	d10e      	bne.n	8004882 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< HEAD
 8004432:	6978      	ldr	r0, [r7, #20]
 8004434:	f7fe fe6f 	bl	8003116 <HAL_I2C_AbortCpltCallback>
=======
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7fe fe6f 	bl	800355e <HAL_I2C_AbortCpltCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8004438:	e027      	b.n	800448a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004440:	2b28      	cmp	r3, #40	@ 0x28
 8004442:	d117      	bne.n	8004474 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004462:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2228      	movs	r2, #40	@ 0x28
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004472:	e007      	b.n	8004484 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004484:	6978      	ldr	r0, [r7, #20]
 8004486:	f7fe fe3c 	bl	8003102 <HAL_I2C_ErrorCallback>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000004 	.word	0x20000004
 8004498:	14f8b589 	.word	0x14f8b589

0800449c <I2C_WaitOnSTOPRequestThroughIT>:
=======
 8004880:	e027      	b.n	80048d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004888:	2b28      	cmp	r3, #40	@ 0x28
 800488a:	d117      	bne.n	80048bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2228      	movs	r2, #40	@ 0x28
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048ba:	e007      	b.n	80048cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048cc:	6978      	ldr	r0, [r7, #20]
 80048ce:	f7fe fe3c 	bl	800354a <HAL_I2C_ErrorCallback>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000004 	.word	0x20000004
 80048e0:	14f8b589 	.word	0x14f8b589

080048e4 <I2C_WaitOnSTOPRequestThroughIT>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a8:	4b13      	ldr	r3, [pc, #76]	@ (80044f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	0a1a      	lsrs	r2, r3, #8
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e008      	b.n	80044ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d0e9      	beq.n	80044be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000004 	.word	0x20000004
 80044fc:	14f8b589 	.word	0x14f8b589

08004500 <I2C_ConvertOtherXferOptions>:
=======
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048f0:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	0a1a      	lsrs	r2, r3, #8
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e008      	b.n	8004934 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800492c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004930:	d0e9      	beq.n	8004906 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000004 	.word	0x20000004
 8004944:	14f8b589 	.word	0x14f8b589

08004948 <I2C_ConvertOtherXferOptions>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
=======
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
<<<<<<< HEAD
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004510:	d103      	bne.n	800451a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004958:	d103      	bne.n	8004962 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< HEAD
 8004518:	e007      	b.n	800452a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004522:	d102      	bne.n	800452a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2208      	movs	r2, #8
 8004528:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_PCD_Init>:
=======
 8004960:	e007      	b.n	8004972 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800496a:	d102      	bne.n	8004972 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2208      	movs	r2, #8
 8004970:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_PCD_Init>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af02      	add	r7, sp, #8
 800453c:	6078      	str	r0, [r7, #4]
=======
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af02      	add	r7, sp, #8
 8004984:	6078      	str	r0, [r7, #4]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e101      	b.n	800474c <HAL_PCD_Init+0x216>
=======
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e101      	b.n	8004b94 <HAL_PCD_Init+0x216>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
<<<<<<< HEAD
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
=======
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f007 f9aa 	bl	800b8bc <HAL_PCD_MspInit>
=======
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f007 fa5a 	bl	800be64 <HAL_PCD_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f007 fa5a 	bl	800be64 <HAL_PCD_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2203      	movs	r2, #3
 800456c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
=======
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2203      	movs	r2, #3
 80049b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
<<<<<<< HEAD
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004576:	d102      	bne.n	800457e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	719a      	strb	r2, [r3, #6]
=======
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049be:	d102      	bne.n	80049c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	719a      	strb	r2, [r3, #6]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fe09 	bl	800819a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7c1a      	ldrb	r2, [r3, #16]
 8004590:	f88d 2000 	strb.w	r2, [sp]
 8004594:	3304      	adds	r3, #4
 8004596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004598:	f003 fce8 	bl	8007f6c <USB_CoreInit>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_PCD_Init+0x78>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f003 fe41 	bl	8008652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7c1a      	ldrb	r2, [r3, #16]
 80049d8:	f88d 2000 	strb.w	r2, [sp]
 80049dc:	3304      	adds	r3, #4
 80049de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e0:	f003 fd20 	bl	8008424 <USB_CoreInit>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_PCD_Init+0x78>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0ce      	b.n	800474c <HAL_PCD_Init+0x216>
=======
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0ce      	b.n	8004b94 <HAL_PCD_Init+0x216>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 fe01 	bl	80081bc <USB_SetCurrentMode>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_PCD_Init+0x96>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 fe39 	bl	8008674 <USB_SetCurrentMode>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_PCD_Init+0x96>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0bf      	b.n	800474c <HAL_PCD_Init+0x216>
=======
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0bf      	b.n	8004b94 <HAL_PCD_Init+0x216>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
<<<<<<< HEAD
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e04a      	b.n	8004668 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3315      	adds	r3, #21
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3314      	adds	r3, #20
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	b298      	uxth	r0, r3
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	332e      	adds	r3, #46	@ 0x2e
 800460e:	4602      	mov	r2, r0
 8004610:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3318      	adds	r3, #24
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	331c      	adds	r3, #28
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3320      	adds	r3, #32
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3324      	adds	r3, #36	@ 0x24
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	3301      	adds	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3af      	bcc.n	80045d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e044      	b.n	8004702 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	3301      	adds	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	791b      	ldrb	r3, [r3, #4]
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3b5      	bcc.n	8004678 <HAL_PCD_Init+0x142>
=======
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	e04a      	b.n	8004ab0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3315      	adds	r3, #21
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a42:	7bfa      	ldrb	r2, [r7, #15]
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	b298      	uxth	r0, r3
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	332e      	adds	r3, #46	@ 0x2e
 8004a56:	4602      	mov	r2, r0
 8004a58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3318      	adds	r3, #24
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	331c      	adds	r3, #28
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3320      	adds	r3, #32
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3324      	adds	r3, #36	@ 0x24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	3301      	adds	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d3af      	bcc.n	8004a1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e044      	b.n	8004b4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ae8:	7bfa      	ldrb	r2, [r7, #15]
 8004aea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	3301      	adds	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	791b      	ldrb	r3, [r3, #4]
 8004b4e:	7bfa      	ldrb	r2, [r7, #15]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d3b5      	bcc.n	8004ac0 <HAL_PCD_Init+0x142>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7c1a      	ldrb	r2, [r3, #16]
 8004714:	f88d 2000 	strb.w	r2, [sp]
 8004718:	3304      	adds	r3, #4
 800471a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800471c:	f003 fd9a 	bl	8008254 <USB_DevInit>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_PCD_Init+0x1fc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7c1a      	ldrb	r2, [r3, #16]
 8004b5c:	f88d 2000 	strb.w	r2, [sp]
 8004b60:	3304      	adds	r3, #4
 8004b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b64:	f003 fdd2 	bl	800870c <USB_DevInit>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_PCD_Init+0x1fc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00c      	b.n	800474c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
=======
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e00c      	b.n	8004b94 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
<<<<<<< HEAD
<<<<<<< HEAD
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f004 fdde 	bl	8009306 <USB_DevDisconnect>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f004 fe1c 	bl	80097ca <USB_DevDisconnect>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_PCD_Start>:
=======

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_Start>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_PCD_Start+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e022      	b.n	80047b6 <HAL_PCD_Start+0x62>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
<<<<<<< HEAD
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f003 fceb 	bl	8008178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f004 fd8c 	bl	80092c4 <USB_DevConnect>
=======
=======
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_Start+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e022      	b.n	8004bfe <HAL_PCD_Start+0x62>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fd23 	bl	8008630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 fdca 	bl	8009788 <USB_DevConnect>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  __HAL_UNLOCK(hpcd);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_PCD_IRQHandler>:
=======
  __HAL_UNLOCK(hpcd);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_PCD_IRQHandler>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80047be:	b590      	push	{r4, r7, lr}
 80047c0:	b08d      	sub	sp, #52	@ 0x34
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	61fb      	str	r3, [r7, #28]
=======
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b08d      	sub	sp, #52	@ 0x34
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	61fb      	str	r3, [r7, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
<<<<<<< HEAD
<<<<<<< HEAD
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 fe4a 	bl	800946e <USB_GetMode>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 848c 	bne.w	80050fa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 fdae 	bl	8009348 <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8482 	beq.w	80050f8 <HAL_PCD_IRQHandler+0x93a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 fe88 	bl	8009932 <USB_GetMode>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 848c 	bne.w	8005542 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fdec 	bl	800980c <USB_ReadInterrupts>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8482 	beq.w	8005540 <HAL_PCD_IRQHandler+0x93a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
<<<<<<< HEAD
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
<<<<<<< HEAD
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fd9b 	bl	8009348 <USB_ReadInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b02      	cmp	r3, #2
 800481a:	d107      	bne.n	800482c <HAL_PCD_IRQHandler+0x6e>
=======
=======
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f004 fdd9 	bl	800980c <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d107      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x6e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f002 0202 	and.w	r2, r2, #2
 800482a:	615a      	str	r2, [r3, #20]
=======
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f002 0202 	and.w	r2, r2, #2
 8004c72:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
<<<<<<< HEAD
<<<<<<< HEAD
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f004 fd89 	bl	8009348 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b10      	cmp	r3, #16
 800483e:	d161      	bne.n	8004904 <HAL_PCD_IRQHandler+0x146>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f004 fdc7 	bl	800980c <USB_ReadInterrupts>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d161      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x146>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0210 	bic.w	r2, r2, #16
 800484e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4413      	add	r3, r2
 800486c:	3304      	adds	r3, #4
 800486e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	0c5b      	lsrs	r3, r3, #17
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2b02      	cmp	r3, #2
 800487a:	d124      	bne.n	80048c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d035      	beq.n	80048f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
<<<<<<< HEAD
 8004892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004896:	b29b      	uxth	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	6a38      	ldr	r0, [r7, #32]
 800489c:	f004 fbc0 	bl	8009020 <USB_ReadPacket>
=======
=======
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0210 	bic.w	r2, r2, #16
 8004c96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 020f 	and.w	r2, r3, #15
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	0c5b      	lsrs	r3, r3, #17
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d124      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d035      	beq.n	8004d3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6a38      	ldr	r0, [r7, #32]
 8004ce4:	f004 fbfe 	bl	80094e4 <USB_ReadPacket>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ac:	441a      	add	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048be:	441a      	add	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	615a      	str	r2, [r3, #20]
 80048c4:	e016      	b.n	80048f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	0c5b      	lsrs	r3, r3, #17
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d110      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
<<<<<<< HEAD
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048d8:	2208      	movs	r2, #8
 80048da:	4619      	mov	r1, r3
 80048dc:	6a38      	ldr	r0, [r7, #32]
 80048de:	f004 fb9f 	bl	8009020 <USB_ReadPacket>
=======
=======

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf4:	441a      	add	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d06:	441a      	add	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	615a      	str	r2, [r3, #20]
 8004d0c:	e016      	b.n	8004d3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	0c5b      	lsrs	r3, r3, #17
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d110      	bne.n	8004d3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d20:	2208      	movs	r2, #8
 8004d22:	4619      	mov	r1, r3
 8004d24:	6a38      	ldr	r0, [r7, #32]
 8004d26:	f004 fbdd 	bl	80094e4 <USB_ReadPacket>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ee:	441a      	add	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	615a      	str	r2, [r3, #20]
=======
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d36:	441a      	add	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
<<<<<<< HEAD
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0210 	orr.w	r2, r2, #16
 8004902:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
<<<<<<< HEAD
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f004 fd1d 	bl	8009348 <USB_ReadInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004914:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004918:	f040 80a7 	bne.w	8004a6a <HAL_PCD_IRQHandler+0x2ac>
=======
=======
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0210 	orr.w	r2, r2, #16
 8004d4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f004 fd5b 	bl	800980c <USB_ReadInterrupts>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d60:	f040 80a7 	bne.w	8004eb2 <HAL_PCD_IRQHandler+0x2ac>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      epnum = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
<<<<<<< HEAD
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f004 fd22 	bl	800936e <USB_ReadDevAllOutEpInterrupt>
 800492a:	62b8      	str	r0, [r7, #40]	@ 0x28
=======
=======
    {
      epnum = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 fd60 	bl	8009832 <USB_ReadDevAllOutEpInterrupt>
 8004d72:	62b8      	str	r0, [r7, #40]	@ 0x28
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      while (ep_intr != 0U)
 800492c:	e099      	b.n	8004a62 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 808e 	beq.w	8004a56 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
<<<<<<< HEAD
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f004 fd46 	bl	80093d6 <USB_ReadDevOutEPInterrupt>
 800494a:	6138      	str	r0, [r7, #16]
=======
=======

      while (ep_intr != 0U)
 8004d74:	e099      	b.n	8004eaa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 808e 	beq.w	8004e9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f004 fd84 	bl	800989a <USB_ReadDevOutEPInterrupt>
 8004d92:	6138      	str	r0, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	2301      	movs	r3, #1
 8004966:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
<<<<<<< HEAD
 8004968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fea2 	bl	80056b4 <PCD_EP_OutXfrComplete_int>
=======
 8004db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fea4 	bl	8005b00 <PCD_EP_OutXfrComplete_int>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	2308      	movs	r3, #8
 800498a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
<<<<<<< HEAD
 800498c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 ff78 	bl	8005884 <PCD_EP_OutSetupPacket_int>
=======
 8004dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 ff7a 	bl	8005cd0 <PCD_EP_OutSetupPacket_int>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	2310      	movs	r3, #16
 80049ae:	6093      	str	r3, [r2, #8]
=======

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	2301      	movs	r3, #1
 8004dae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fea4 	bl	8005b00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 ff7a 	bl	8005cd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	2310      	movs	r3, #16
 8004df6:	6093      	str	r3, [r2, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
<<<<<<< HEAD
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d030      	beq.n	8004a1c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c2:	2b80      	cmp	r3, #128	@ 0x80
 80049c4:	d109      	bne.n	80049da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	3304      	adds	r3, #4
 80049ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	78db      	ldrb	r3, [r3, #3]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	70da      	strb	r2, [r3, #3]
=======
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d030      	beq.n	8004e64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d109      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	3304      	adds	r3, #4
 8004e36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d108      	bne.n	8004e52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2200      	movs	r2, #0
 8004e44:	70da      	strb	r2, [r3, #3]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f007 f855 	bl	800bab4 <HAL_PCD_ISOOUTIncompleteCallback>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f007 f905 	bl	800c05c <HAL_PCD_ISOOUTIncompleteCallback>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
<<<<<<< HEAD
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	2302      	movs	r3, #2
 8004a1a:	6093      	str	r3, [r2, #8]
=======
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2302      	movs	r3, #2
 8004e62:	6093      	str	r3, [r2, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	2320      	movs	r3, #32
 8004a36:	6093      	str	r3, [r2, #8]
=======
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	6093      	str	r3, [r2, #8]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
<<<<<<< HEAD
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	3301      	adds	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f af62 	bne.w	800492e <HAL_PCD_IRQHandler+0x170>
=======
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f af62 	bne.w	8004d76 <HAL_PCD_IRQHandler+0x170>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
<<<<<<< HEAD
<<<<<<< HEAD
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fc6a 	bl	8009348 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a7e:	f040 80db 	bne.w	8004c38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f004 fc8b 	bl	80093a2 <USB_ReadDevAllInEpInterrupt>
 8004a8c:	62b8      	str	r0, [r7, #40]	@ 0x28
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 fca8 	bl	800980c <USB_ReadInterrupts>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ec6:	f040 80db 	bne.w	8005080 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f004 fcc9 	bl	8009866 <USB_ReadDevAllInEpInterrupt>
 8004ed4:	62b8      	str	r0, [r7, #40]	@ 0x28
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      epnum = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a92:	e0cd      	b.n	8004c30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80c2 	beq.w	8004c24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
<<<<<<< HEAD
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f004 fcb1 	bl	8009412 <USB_ReadDevInEPInterrupt>
 8004ab0:	6138      	str	r0, [r7, #16]
=======
=======

      epnum = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004eda:	e0cd      	b.n	8005078 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80c2 	beq.w	800506c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f004 fcef 	bl	80098d6 <USB_ReadDevInEPInterrupt>
 8004ef8:	6138      	str	r0, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d057      	beq.n	8004b6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69f9      	ldr	r1, [r7, #28]
 8004ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004adc:	4013      	ands	r3, r2
 8004ade:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	2301      	movs	r3, #1
 8004af0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	799b      	ldrb	r3, [r3, #6]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d132      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3320      	adds	r3, #32
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4403      	add	r3, r0
 8004b1a:	331c      	adds	r3, #28
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4419      	add	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4403      	add	r3, r0
 8004b2e:	3320      	adds	r3, #32
 8004b30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d113      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x3a2>
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3324      	adds	r3, #36	@ 0x24
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d108      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
<<<<<<< HEAD
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	f004 fcb8 	bl	80094d0 <USB_EP0_OutStart>
=======
=======

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d057      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69f9      	ldr	r1, [r7, #28]
 8004f20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f24:	4013      	ands	r3, r2
 8004f26:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	2301      	movs	r3, #1
 8004f38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	799b      	ldrb	r3, [r3, #6]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d132      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	3320      	adds	r3, #32
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4403      	add	r3, r0
 8004f62:	331c      	adds	r3, #28
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4419      	add	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4403      	add	r3, r0
 8004f76:	3320      	adds	r3, #32
 8004f78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d113      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x3a2>
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3324      	adds	r3, #36	@ 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d108      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	f004 fcf6 	bl	8009994 <USB_EP0_OutStart>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f006 ff29 	bl	800b9be <HAL_PCD_DataInStageCallback>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f006 ffd9 	bl	800bf66 <HAL_PCD_DataInStageCallback>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b82:	461a      	mov	r2, r3
 8004b84:	2308      	movs	r3, #8
 8004b86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2340      	movs	r3, #64	@ 0x40
 8004bbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d023      	beq.n	8004c12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
<<<<<<< HEAD
 8004bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bcc:	6a38      	ldr	r0, [r7, #32]
 8004bce:	f003 fca5 	bl	800851c <USB_FlushTxFifo>
=======
 8005012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005014:	6a38      	ldr	r0, [r7, #32]
 8005016:	f003 fcdd 	bl	80089d4 <USB_FlushTxFifo>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

            ep = &hpcd->IN_ep[epnum];
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	3310      	adds	r3, #16
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	3304      	adds	r3, #4
 8004be4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	78db      	ldrb	r3, [r3, #3]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d108      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	70da      	strb	r2, [r3, #3]
=======
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2308      	movs	r3, #8
 8004fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2310      	movs	r3, #16
 8004fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	461a      	mov	r2, r3
 8005004:	2340      	movs	r3, #64	@ 0x40
 8005006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d023      	beq.n	800505a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005014:	6a38      	ldr	r0, [r7, #32]
 8005016:	f003 fcdd 	bl	80089d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	3310      	adds	r3, #16
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
 800502a:	3304      	adds	r3, #4
 800502c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d108      	bne.n	8005048 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	70da      	strb	r2, [r3, #3]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f006 ff6c 	bl	800bad8 <HAL_PCD_ISOINIncompleteCallback>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	b2db      	uxtb	r3, r3
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f007 f81c 	bl	800c080 <HAL_PCD_ISOINIncompleteCallback>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
<<<<<<< HEAD
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2302      	movs	r3, #2
 8004c10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
<<<<<<< HEAD
 8004c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fcbb 	bl	800559a <PCD_WriteEmptyTxFifo>
=======
 8005064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fcbd 	bl	80059e6 <PCD_WriteEmptyTxFifo>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }
        epnum++;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	3301      	adds	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f47f af2e 	bne.w	8004a94 <HAL_PCD_IRQHandler+0x2d6>
=======
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005054:	461a      	mov	r2, r3
 8005056:	2302      	movs	r3, #2
 8005058:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fcbd 	bl	80059e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	3301      	adds	r3, #1
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	f47f af2e 	bne.w	8004edc <HAL_PCD_IRQHandler+0x2d6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
<<<<<<< HEAD
<<<<<<< HEAD
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 fb83 	bl	8009348 <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4c:	d122      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x4d6>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fbc1 	bl	800980c <USB_ReadInterrupts>
 800508a:	4603      	mov	r3, r0
 800508c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005094:	d122      	bne.n	80050dc <HAL_PCD_IRQHandler+0x4d6>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d108      	bne.n	8004c7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
=======
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d108      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< HEAD
<<<<<<< HEAD
 8004c74:	2100      	movs	r1, #0
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fea2 	bl	80059c0 <HAL_PCDEx_LPM_Callback>
 8004c7c:	e002      	b.n	8004c84 <HAL_PCD_IRQHandler+0x4c6>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fea4 	bl	8005e0c <HAL_PCDEx_LPM_Callback>
 80050c4:	e002      	b.n	80050cc <HAL_PCD_IRQHandler+0x4c6>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f006 ff0a 	bl	800ba98 <HAL_PCD_ResumeCallback>
=======
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f006 ffba 	bl	800c040 <HAL_PCD_ResumeCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f006 ffba 	bl	800c040 <HAL_PCD_ResumeCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
<<<<<<< HEAD
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c92:	615a      	str	r2, [r3, #20]
=======
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80050da:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
<<<<<<< HEAD
<<<<<<< HEAD
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 fb55 	bl	8009348 <USB_ReadInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca8:	d112      	bne.n	8004cd0 <HAL_PCD_IRQHandler+0x512>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f004 fb93 	bl	800980c <USB_ReadInterrupts>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f0:	d112      	bne.n	8005118 <HAL_PCD_IRQHandler+0x512>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d102      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x502>
=======
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d102      	bne.n	8005108 <HAL_PCD_IRQHandler+0x502>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f006 fec6 	bl	800ba4c <HAL_PCD_SuspendCallback>
=======
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f006 ff76 	bl	800bff4 <HAL_PCD_SuspendCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cce:	615a      	str	r2, [r3, #20]
=======
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f006 ff76 	bl	800bff4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005116:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
<<<<<<< HEAD
<<<<<<< HEAD
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f004 fb37 	bl	8009348 <USB_ReadInterrupts>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce4:	f040 80b7 	bne.w	8004e56 <HAL_PCD_IRQHandler+0x698>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f004 fb75 	bl	800980c <USB_ReadInterrupts>
 8005122:	4603      	mov	r3, r0
 8005124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512c:	f040 80b7 	bne.w	800529e <HAL_PCD_IRQHandler+0x698>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
<<<<<<< HEAD
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2110      	movs	r1, #16
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 fc0a 	bl	800851c <USB_FlushTxFifo>
=======
=======
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2110      	movs	r1, #16
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fc42 	bl	80089d4 <USB_FlushTxFifo>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0c:	e046      	b.n	8004d9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	3301      	adds	r3, #1
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	791b      	ldrb	r3, [r3, #4]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d3b2      	bcc.n	8004d0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004dba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7bdb      	ldrb	r3, [r3, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd4:	f043 030b 	orr.w	r3, r3, #11
 8004dd8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
=======

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005150:	2300      	movs	r3, #0
 8005152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005154:	e046      	b.n	80051e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005162:	461a      	mov	r2, r3
 8005164:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005168:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800516a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005184:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005188:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005196:	461a      	mov	r2, r3
 8005198:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800519c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	3301      	adds	r3, #1
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d3b2      	bcc.n	8005156 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005202:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7bdb      	ldrb	r3, [r3, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800521c:	f043 030b 	orr.w	r3, r3, #11
 8005220:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dea:	f043 030b 	orr.w	r3, r3, #11
 8004dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8004df0:	e015      	b.n	8004e1e <HAL_PCD_IRQHandler+0x660>
=======
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005232:	f043 030b 	orr.w	r3, r3, #11
 8005236:	6453      	str	r3, [r2, #68]	@ 0x44
 8005238:	e015      	b.n	8005266 <HAL_PCD_IRQHandler+0x660>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
<<<<<<< HEAD
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e04:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004e08:	6153      	str	r3, [r2, #20]
=======
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005248:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800524c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005250:	6153      	str	r3, [r2, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e18:	f043 030b 	orr.w	r3, r3, #11
 8004e1c:	6113      	str	r3, [r2, #16]
=======
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005260:	f043 030b 	orr.w	r3, r3, #11
 8005264:	6113      	str	r3, [r2, #16]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
<<<<<<< HEAD
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
<<<<<<< HEAD
 8004e40:	461a      	mov	r2, r3
 8004e42:	f004 fb45 	bl	80094d0 <USB_EP0_OutStart>
=======
 8005288:	461a      	mov	r2, r3
 800528a:	f004 fb83 	bl	8009994 <USB_EP0_OutStart>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004e54:	615a      	str	r2, [r3, #20]
=======
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005274:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005278:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005288:	461a      	mov	r2, r3
 800528a:	f004 fb83 	bl	8009994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800529c:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
<<<<<<< HEAD
<<<<<<< HEAD
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 fa74 	bl	8009348 <USB_ReadInterrupts>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6a:	d123      	bne.n	8004eb4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 fb0a 	bl	800948a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f003 fbc7 	bl	800860e <USB_GetDevSpeed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681c      	ldr	r4, [r3, #0]
 8004e8c:	f001 f9c8 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8004e90:	4601      	mov	r1, r0
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 fab2 	bl	800980c <USB_ReadInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b2:	d123      	bne.n	80052fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f004 fb48 	bl	800994e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f003 fbff 	bl	8008ac6 <USB_GetDevSpeed>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681c      	ldr	r4, [r3, #0]
 80052d4:	f001 f9ca 	bl	800666c <HAL_RCC_GetHCLKFreq>
 80052d8:	4601      	mov	r1, r0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
<<<<<<< HEAD
 8004e96:	461a      	mov	r2, r3
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f003 f8cb 	bl	8008034 <USB_SetTurnaroundTime>
=======
 80052de:	461a      	mov	r2, r3
 80052e0:	4620      	mov	r0, r4
 80052e2:	f003 f903 	bl	80084ec <USB_SetTurnaroundTime>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052de:	461a      	mov	r2, r3
 80052e0:	4620      	mov	r0, r4
 80052e2:	f003 f903 	bl	80084ec <USB_SetTurnaroundTime>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f006 fdb5 	bl	800ba0e <HAL_PCD_ResetCallback>
=======
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f006 fe65 	bl	800bfb6 <HAL_PCD_ResetCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004eb2:	615a      	str	r2, [r3, #20]
=======
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f006 fe65 	bl	800bfb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052fa:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
<<<<<<< HEAD
<<<<<<< HEAD
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f004 fa45 	bl	8009348 <USB_ReadInterrupts>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d10a      	bne.n	8004ede <HAL_PCD_IRQHandler+0x720>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f004 fa83 	bl	800980c <USB_ReadInterrupts>
 8005306:	4603      	mov	r3, r0
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10a      	bne.n	8005326 <HAL_PCD_IRQHandler+0x720>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f006 fd92 	bl	800b9f2 <HAL_PCD_SOFCallback>
=======
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f006 fe42 	bl	800bf9a <HAL_PCD_SOFCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f002 0208 	and.w	r2, r2, #8
 8004edc:	615a      	str	r2, [r3, #20]
=======
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f006 fe42 	bl	800bf9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f002 0208 	and.w	r2, r2, #8
 8005324:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
<<<<<<< HEAD
<<<<<<< HEAD
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f004 fa30 	bl	8009348 <USB_ReadInterrupts>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d123      	bne.n	8004f3a <HAL_PCD_IRQHandler+0x77c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f004 fa6e 	bl	800980c <USB_ReadInterrupts>
 8005330:	4603      	mov	r3, r0
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b80      	cmp	r3, #128	@ 0x80
 8005338:	d123      	bne.n	8005382 <HAL_PCD_IRQHandler+0x77c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004efe:	2301      	movs	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f02:	e014      	b.n	8004f2e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fb08 	bl	8005538 <HAL_PCD_EP_Abort>
=======
=======
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005346:	2301      	movs	r3, #1
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
 800534a:	e014      	b.n	8005376 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb0a 	bl	8005984 <HAL_PCD_EP_Abort>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d3e4      	bcc.n	8004f04 <HAL_PCD_IRQHandler+0x746>
=======
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	3301      	adds	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	461a      	mov	r2, r3
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	4293      	cmp	r3, r2
 8005380:	d3e4      	bcc.n	800534c <HAL_PCD_IRQHandler+0x746>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
<<<<<<< HEAD
<<<<<<< HEAD
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f004 fa02 	bl	8009348 <USB_ReadInterrupts>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d13c      	bne.n	8004fca <HAL_PCD_IRQHandler+0x80c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f004 fa40 	bl	800980c <USB_ReadInterrupts>
 800538c:	4603      	mov	r3, r0
 800538e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005396:	d13c      	bne.n	8005412 <HAL_PCD_IRQHandler+0x80c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f50:	2301      	movs	r3, #1
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f54:	e02b      	b.n	8004fae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3318      	adds	r3, #24
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d115      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da12      	bge.n	8004fa8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3317      	adds	r3, #23
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
<<<<<<< HEAD
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fac8 	bl	8005538 <HAL_PCD_EP_Abort>
=======
=======
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005398:	2301      	movs	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
 800539c:	e02b      	b.n	80053f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3318      	adds	r3, #24
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d115      	bne.n	80053f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da12      	bge.n	80053f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3317      	adds	r3, #23
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 faca 	bl	8005984 <HAL_PCD_EP_Abort>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	3301      	adds	r3, #1
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	791b      	ldrb	r3, [r3, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d3cd      	bcc.n	8004f56 <HAL_PCD_IRQHandler+0x798>
=======
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	3301      	adds	r3, #1
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	4293      	cmp	r3, r2
 8005400:	d3cd      	bcc.n	800539e <HAL_PCD_IRQHandler+0x798>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
<<<<<<< HEAD
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004fc8:	615a      	str	r2, [r3, #20]
=======
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005410:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
<<<<<<< HEAD
<<<<<<< HEAD
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 f9ba 	bl	8009348 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fde:	d156      	bne.n	800508e <HAL_PCD_IRQHandler+0x8d0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f004 f9f8 	bl	800980c <USB_ReadInterrupts>
 800541c:	4603      	mov	r3, r0
 800541e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005426:	d156      	bne.n	80054d6 <HAL_PCD_IRQHandler+0x8d0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe4:	e045      	b.n	8005072 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d12e      	bne.n	800506c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800500e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005010:	2b00      	cmp	r3, #0
 8005012:	da2b      	bge.n	800506c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005020:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005024:	429a      	cmp	r2, r3
 8005026:	d121      	bne.n	800506c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005068:	6053      	str	r3, [r2, #4]
            break;
 800506a:	e008      	b.n	800507e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	3301      	adds	r3, #1
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	791b      	ldrb	r3, [r3, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	4293      	cmp	r3, r2
 800507c:	d3b3      	bcc.n	8004fe6 <HAL_PCD_IRQHandler+0x828>
=======
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005428:	2301      	movs	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	e045      	b.n	80054ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d12e      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005456:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005458:	2b00      	cmp	r3, #0
 800545a:	da2b      	bge.n	80054b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005468:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800546c:	429a      	cmp	r2, r3
 800546e:	d121      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054b0:	6053      	str	r3, [r2, #4]
            break;
 80054b2:	e008      	b.n	80054c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	3301      	adds	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	791b      	ldrb	r3, [r3, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d3b3      	bcc.n	800542e <HAL_PCD_IRQHandler+0x828>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
<<<<<<< HEAD
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800508c:	615a      	str	r2, [r3, #20]
=======
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80054d4:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
<<<<<<< HEAD
<<<<<<< HEAD
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f004 f958 	bl	8009348 <USB_ReadInterrupts>
 8005098:	4603      	mov	r3, r0
 800509a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a2:	d10a      	bne.n	80050ba <HAL_PCD_IRQHandler+0x8fc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f004 f996 	bl	800980c <USB_ReadInterrupts>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ea:	d10a      	bne.n	8005502 <HAL_PCD_IRQHandler+0x8fc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f006 fd29 	bl	800bafc <HAL_PCD_ConnectCallback>
=======
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f006 fdd9 	bl	800c0a4 <HAL_PCD_ConnectCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80050b8:	615a      	str	r2, [r3, #20]
=======
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f006 fdd9 	bl	800c0a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005500:	615a      	str	r2, [r3, #20]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
<<<<<<< HEAD
<<<<<<< HEAD
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f004 f942 	bl	8009348 <USB_ReadInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d115      	bne.n	80050fa <HAL_PCD_IRQHandler+0x93c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f004 f980 	bl	800980c <USB_ReadInterrupts>
 800550c:	4603      	mov	r3, r0
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d115      	bne.n	8005542 <HAL_PCD_IRQHandler+0x93c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x928>
=======
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_PCD_IRQHandler+0x928>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f006 fd19 	bl	800bb18 <HAL_PCD_DisconnectCallback>
=======
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f006 fdc9 	bl	800c0c0 <HAL_PCD_DisconnectCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e000      	b.n	80050fa <HAL_PCD_IRQHandler+0x93c>
      return;
 80050f8:	bf00      	nop
    }
  }
}
 80050fa:	3734      	adds	r7, #52	@ 0x34
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd90      	pop	{r4, r7, pc}

08005100 <HAL_PCD_SetAddress>:
=======
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f006 fdc9 	bl	800c0c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6859      	ldr	r1, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e000      	b.n	8005542 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005540:	bf00      	nop
    }
  }
}
 8005542:	3734      	adds	r7, #52	@ 0x34
 8005544:	46bd      	mov	sp, r7
 8005546:	bd90      	pop	{r4, r7, pc}

08005548 <HAL_PCD_SetAddress>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_PCD_SetAddress+0x1a>
 8005116:	2302      	movs	r3, #2
 8005118:	e012      	b.n	8005140 <HAL_PCD_SetAddress+0x40>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
<<<<<<< HEAD
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f004 f8a1 	bl	8009278 <USB_SetDevAddress>
=======
=======
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_PCD_SetAddress+0x1a>
 800555e:	2302      	movs	r3, #2
 8005560:	e012      	b.n	8005588 <HAL_PCD_SetAddress+0x40>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f004 f8df 	bl	800973c <USB_SetDevAddress>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  __HAL_UNLOCK(hpcd);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_PCD_EP_Open>:
=======
  __HAL_UNLOCK(hpcd);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_PCD_EP_Open>:
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4603      	mov	r3, r0
 8005158:	70fb      	strb	r3, [r7, #3]
 800515a:	460b      	mov	r3, r1
 800515c:	803b      	strh	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	72fb      	strb	r3, [r7, #11]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	70fb      	strb	r3, [r7, #3]
 80055a2:	460b      	mov	r3, r1
 80055a4:	803b      	strh	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	72fb      	strb	r3, [r7, #11]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800516a:	2b00      	cmp	r3, #0
 800516c:	da0f      	bge.n	800518e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	f003 020f 	and.w	r2, r3, #15
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	3310      	adds	r3, #16
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	3304      	adds	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	705a      	strb	r2, [r3, #1]
 800518c:	e00f      	b.n	80051ae <HAL_PCD_EP_Open+0x66>
=======
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da0f      	bge.n	80055d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	3310      	adds	r3, #16
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	3304      	adds	r3, #4
 80055cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	705a      	strb	r2, [r3, #1]
 80055d4:	e00f      	b.n	80055f6 <HAL_PCD_EP_Open+0x66>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4413      	add	r3, r2
 80051a4:	3304      	adds	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
<<<<<<< HEAD
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051ba:	883a      	ldrh	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	78ba      	ldrb	r2, [r7, #2]
 80051c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	835a      	strh	r2, [r3, #26]
=======
=======
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005602:	883b      	ldrh	r3, [r7, #0]
 8005604:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	78ba      	ldrb	r2, [r7, #2]
 8005610:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	835a      	strh	r2, [r3, #26]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
<<<<<<< HEAD
<<<<<<< HEAD
 80051d8:	78bb      	ldrb	r3, [r7, #2]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d102      	bne.n	80051e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_PCD_EP_Open+0xaa>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e00e      	b.n	8005210 <HAL_PCD_EP_Open+0xc8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	4618      	mov	r0, r3
 8005202:	f003 fa29 	bl	8008658 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800520e:	7afb      	ldrb	r3, [r7, #11]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCD_EP_Close>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005624:	78bb      	ldrb	r3, [r7, #2]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d102      	bne.n	8005630 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_PCD_EP_Open+0xae>
 800563a:	2302      	movs	r3, #2
 800563c:	e00e      	b.n	800565c <HAL_PCD_EP_Open+0xcc>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	4618      	mov	r0, r3
 800564e:	f003 fa5f 	bl	8008b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800565a:	7afb      	ldrb	r3, [r7, #11]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_EP_Close>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da0f      	bge.n	800524c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	3310      	adds	r3, #16
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	4413      	add	r3, r2
 8005240:	3304      	adds	r3, #4
 8005242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	705a      	strb	r2, [r3, #1]
 800524a:	e00f      	b.n	800526c <HAL_PCD_EP_Close+0x54>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da0f      	bge.n	8005698 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	3310      	adds	r3, #16
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4413      	add	r3, r2
 800568c:	3304      	adds	r3, #4
 800568e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	705a      	strb	r2, [r3, #1]
 8005696:	e00f      	b.n	80056b8 <HAL_PCD_EP_Close+0x54>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
<<<<<<< HEAD
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	3304      	adds	r3, #4
 8005264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_PCD_EP_Close+0x6e>
 8005282:	2302      	movs	r3, #2
 8005284:	e00e      	b.n	80052a4 <HAL_PCD_EP_Close+0x8c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	4618      	mov	r0, r3
 8005296:	f003 fa67 	bl	8008768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_PCD_EP_Receive>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	3304      	adds	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_PCD_EP_Close+0x6e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e00e      	b.n	80056f0 <HAL_PCD_EP_Close+0x8c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 fa9d 	bl	8008c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_PCD_EP_Receive>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	460b      	mov	r3, r1
 80052ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	3304      	adds	r3, #4
 80052d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	799b      	ldrb	r3, [r3, #6]
 8005310:	461a      	mov	r2, r3
 8005312:	6979      	ldr	r1, [r7, #20]
 8005314:	f003 fb04 	bl	8008920 <USB_EPStartXfer>

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_PCD_EP_GetRxCount>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	3304      	adds	r3, #4
 8005720:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2200      	movs	r2, #0
 8005738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	b2da      	uxtb	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	799b      	ldrb	r3, [r3, #6]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d102      	bne.n	8005754 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	799b      	ldrb	r3, [r3, #6]
 800575c:	461a      	mov	r2, r3
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	f003 fb3a 	bl	8008dd8 <USB_EPStartXfer>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_GetRxCount>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005344:	681b      	ldr	r3, [r3, #0]
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_PCD_EP_Transmit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005790:	681b      	ldr	r3, [r3, #0]
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_PCD_EP_Transmit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	460b      	mov	r3, r1
 8005360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	3310      	adds	r3, #16
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2201      	movs	r2, #1
 8005390:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	b2da      	uxtb	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	799b      	ldrb	r3, [r3, #6]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	799b      	ldrb	r3, [r3, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	f003 fab2 	bl	8008920 <USB_EPStartXfer>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_PCD_EP_SetStall>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	460b      	mov	r3, r1
 80057ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3310      	adds	r3, #16
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2201      	movs	r2, #1
 80057dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	799b      	ldrb	r3, [r3, #6]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d102      	bne.n	80057f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	799b      	ldrb	r3, [r3, #6]
 8005800:	461a      	mov	r2, r3
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	f003 fae8 	bl	8008dd8 <USB_EPStartXfer>

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_SetStall>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	7912      	ldrb	r2, [r2, #4]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04f      	b.n	8005484 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da0f      	bge.n	800540c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	f003 020f 	and.w	r2, r3, #15
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	3310      	adds	r3, #16
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	3304      	adds	r3, #4
 8005402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	705a      	strb	r2, [r3, #1]
 800540a:	e00d      	b.n	8005428 <HAL_PCD_EP_SetStall+0x62>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	7912      	ldrb	r2, [r2, #4]
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e04f      	b.n	80058d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da0f      	bge.n	8005858 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	3310      	adds	r3, #16
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	3304      	adds	r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	705a      	strb	r2, [r3, #1]
 8005856:	e00d      	b.n	8005874 <HAL_PCD_EP_SetStall+0x62>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
<<<<<<< HEAD
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	3304      	adds	r3, #4
 8005420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_PCD_EP_SetStall+0x82>
 8005444:	2302      	movs	r3, #2
 8005446:	e01d      	b.n	8005484 <HAL_PCD_EP_SetStall+0xbe>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	4618      	mov	r0, r3
 8005458:	f003 fe3a 	bl	80090d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7999      	ldrb	r1, [r3, #6]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005474:	461a      	mov	r2, r3
 8005476:	f004 f82b 	bl	80094d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_PCD_EP_ClrStall>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	3304      	adds	r3, #4
 800586c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_PCD_EP_SetStall+0x82>
 8005890:	2302      	movs	r3, #2
 8005892:	e01d      	b.n	80058d0 <HAL_PCD_EP_SetStall+0xbe>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f003 fe76 	bl	8009594 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	7999      	ldrb	r1, [r3, #6]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058c0:	461a      	mov	r2, r3
 80058c2:	f004 f867 	bl	8009994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_PCD_EP_ClrStall>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	7912      	ldrb	r2, [r2, #4]
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e042      	b.n	8005530 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	da0f      	bge.n	80054d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	3310      	adds	r3, #16
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	705a      	strb	r2, [r3, #1]
 80054d0:	e00f      	b.n	80054f2 <HAL_PCD_EP_ClrStall+0x66>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	7912      	ldrb	r2, [r2, #4]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e042      	b.n	800597c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da0f      	bge.n	800591e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	3310      	adds	r3, #16
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	705a      	strb	r2, [r3, #1]
 800591c:	e00f      	b.n	800593e <HAL_PCD_EP_ClrStall+0x66>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
<<<<<<< HEAD
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	3304      	adds	r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_PCD_EP_ClrStall+0x86>
 800550e:	2302      	movs	r3, #2
 8005510:	e00e      	b.n	8005530 <HAL_PCD_EP_ClrStall+0xa4>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	4618      	mov	r0, r3
 8005522:	f003 fe43 	bl	80091ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_PCD_EP_Abort>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	3304      	adds	r3, #4
 8005936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_PCD_EP_ClrStall+0x86>
 800595a:	2302      	movs	r3, #2
 800595c:	e00e      	b.n	800597c <HAL_PCD_EP_ClrStall+0xa4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68f9      	ldr	r1, [r7, #12]
 800596c:	4618      	mov	r0, r3
 800596e:	f003 fe7f 	bl	8009670 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_PCD_EP_Abort>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
<<<<<<< HEAD
 8005544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005548:	2b00      	cmp	r3, #0
 800554a:	da0c      	bge.n	8005566 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 020f 	and.w	r2, r3, #15
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	3310      	adds	r3, #16
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	3304      	adds	r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e00c      	b.n	8005580 <HAL_PCD_EP_Abort+0x48>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da0c      	bge.n	80059b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3310      	adds	r3, #16
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e00c      	b.n	80059cc <HAL_PCD_EP_Abort+0x48>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
<<<<<<< HEAD
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4413      	add	r3, r2
 800557c:	3304      	adds	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	3304      	adds	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
<<<<<<< HEAD
<<<<<<< HEAD
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68f9      	ldr	r1, [r7, #12]
 8005586:	4618      	mov	r0, r3
 8005588:	f003 fc62 	bl	8008e50 <USB_EPStopXfer>
 800558c:	4603      	mov	r3, r0
 800558e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005590:	7afb      	ldrb	r3, [r7, #11]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <PCD_WriteEmptyTxFifo>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f003 fc9e 	bl	8009314 <USB_EPStopXfer>
 80059d8:	4603      	mov	r3, r0
 80059da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <PCD_WriteEmptyTxFifo>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800559a:	b580      	push	{r7, lr}
 800559c:	b08a      	sub	sp, #40	@ 0x28
 800559e:	af02      	add	r7, sp, #8
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	613b      	str	r3, [r7, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08a      	sub	sp, #40	@ 0x28
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	613b      	str	r3, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
<<<<<<< HEAD
<<<<<<< HEAD
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	3310      	adds	r3, #16
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	3304      	adds	r3, #4
 80055c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d901      	bls.n	80055d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06b      	b.n	80056aa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d902      	bls.n	80055ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3303      	adds	r3, #3
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055f6:	e02a      	b.n	800564e <PCD_WriteEmptyTxFifo+0xb4>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	3310      	adds	r3, #16
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d901      	bls.n	8005a1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e06b      	b.n	8005af6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d902      	bls.n	8005a3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a42:	e02a      	b.n	8005a9a <PCD_WriteEmptyTxFifo+0xb4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
<<<<<<< HEAD
<<<<<<< HEAD
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	429a      	cmp	r2, r3
 800560c:	d902      	bls.n	8005614 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3303      	adds	r3, #3
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68d9      	ldr	r1, [r3, #12]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4603      	mov	r3, r0
 8005630:	6978      	ldr	r0, [r7, #20]
 8005632:	f003 fcb7 	bl	8008fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	d809      	bhi.n	8005678 <PCD_WriteEmptyTxFifo+0xde>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800566c:	429a      	cmp	r2, r3
 800566e:	d203      	bcs.n	8005678 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1bf      	bne.n	80055f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d811      	bhi.n	80056a8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	2201      	movs	r2, #1
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	43db      	mvns	r3, r3
 800569e:	6939      	ldr	r1, [r7, #16]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a4:	4013      	ands	r3, r2
 80056a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <PCD_EP_OutXfrComplete_int>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d902      	bls.n	8005a60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3303      	adds	r3, #3
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68d9      	ldr	r1, [r3, #12]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	6978      	ldr	r0, [r7, #20]
 8005a7e:	f003 fcf3 	bl	8009468 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	441a      	add	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d809      	bhi.n	8005ac4 <PCD_WriteEmptyTxFifo+0xde>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	695a      	ldr	r2, [r3, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d203      	bcs.n	8005ac4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1bf      	bne.n	8005a44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d811      	bhi.n	8005af4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af0:	4013      	ands	r3, r2
 8005af2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <PCD_EP_OutXfrComplete_int>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	333c      	adds	r3, #60	@ 0x3c
 80056cc:	3304      	adds	r3, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	799b      	ldrb	r3, [r3, #6]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d17b      	bne.n	80057e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d015      	beq.n	8005720 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4a61      	ldr	r2, [pc, #388]	@ (800587c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	f240 80b9 	bls.w	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80b3 	beq.w	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005716:	461a      	mov	r2, r3
 8005718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571c:	6093      	str	r3, [r2, #8]
 800571e:	e0a7      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005736:	461a      	mov	r2, r3
 8005738:	2320      	movs	r3, #32
 800573a:	6093      	str	r3, [r2, #8]
 800573c:	e098      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	f040 8093 	bne.w	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4a4b      	ldr	r2, [pc, #300]	@ (800587c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d90f      	bls.n	8005772 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005768:	461a      	mov	r2, r3
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	6093      	str	r3, [r2, #8]
 8005770:	e07e      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	333c      	adds	r3, #60	@ 0x3c
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	799b      	ldrb	r3, [r3, #6]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d17b      	bne.n	8005c2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4a61      	ldr	r2, [pc, #388]	@ (8005cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	f240 80b9 	bls.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80b3 	beq.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	e0a7      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	2320      	movs	r3, #32
 8005b86:	6093      	str	r3, [r2, #8]
 8005b88:	e098      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8093 	bne.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d90f      	bls.n	8005bbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bba:	6093      	str	r3, [r2, #8]
 8005bbc:	e07e      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
<<<<<<< HEAD
<<<<<<< HEAD
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	3304      	adds	r3, #4
 8005786:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	0159      	lsls	r1, r3, #5
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	440b      	add	r3, r1
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d114      	bne.n	80057d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057bc:	461a      	mov	r2, r3
 80057be:	2101      	movs	r1, #1
 80057c0:	f003 fe86 	bl	80094d0 <USB_EP0_OutStart>
 80057c4:	e006      	b.n	80057d4 <PCD_EP_OutXfrComplete_int+0x120>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	0159      	lsls	r1, r3, #5
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	440b      	add	r3, r1
 8005be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d114      	bne.n	8005c20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	f003 fec2 	bl	8009994 <USB_EP0_OutStart>
 8005c10:	e006      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x120>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
<<<<<<< HEAD
<<<<<<< HEAD
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	441a      	add	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	60da      	str	r2, [r3, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	60da      	str	r2, [r3, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f006 f8d4 	bl	800b988 <HAL_PCD_DataOutStageCallback>
 80057e0:	e046      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f006 f982 	bl	800bf30 <HAL_PCD_DataOutStageCallback>
 8005c2c:	e046      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
<<<<<<< HEAD
<<<<<<< HEAD
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4a26      	ldr	r2, [pc, #152]	@ (8005880 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d124      	bne.n	8005834 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005806:	6093      	str	r3, [r2, #8]
 8005808:	e032      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4a26      	ldr	r2, [pc, #152]	@ (8005ccc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d124      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c52:	6093      	str	r3, [r2, #8]
 8005c54:	e032      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
<<<<<<< HEAD
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2320      	movs	r3, #32
 8005824:	6093      	str	r3, [r2, #8]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2320      	movs	r3, #32
 8005c70:	6093      	str	r3, [r2, #8]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f006 f8ab 	bl	800b988 <HAL_PCD_DataOutStageCallback>
 8005832:	e01d      	b.n	8005870 <PCD_EP_OutXfrComplete_int+0x1bc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f006 f959 	bl	800bf30 <HAL_PCD_DataOutStageCallback>
 8005c7e:	e01d      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
<<<<<<< HEAD
<<<<<<< HEAD
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d114      	bne.n	8005864 <PCD_EP_OutXfrComplete_int+0x1b0>
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d108      	bne.n	8005864 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800585c:	461a      	mov	r2, r3
 800585e:	2100      	movs	r1, #0
 8005860:	f003 fe36 	bl	80094d0 <USB_EP0_OutStart>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2100      	movs	r1, #0
 8005cac:	f003 fe72 	bl	8009994 <USB_EP0_OutStart>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f006 f88c 	bl	800b988 <HAL_PCD_DataOutStageCallback>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f006 f93a 	bl	800bf30 <HAL_PCD_DataOutStageCallback>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	4f54300a 	.word	0x4f54300a
 8005880:	4f54310a 	.word	0x4f54310a

08005884 <PCD_EP_OutSetupPacket_int>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	4f54300a 	.word	0x4f54300a
 8005ccc:	4f54310a 	.word	0x4f54310a

08005cd0 <PCD_EP_OutSetupPacket_int>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	333c      	adds	r3, #60	@ 0x3c
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a15      	ldr	r2, [pc, #84]	@ (800590c <PCD_EP_OutSetupPacket_int+0x88>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d90e      	bls.n	80058d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d6:	6093      	str	r3, [r2, #8]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	333c      	adds	r3, #60	@ 0x3c
 8005ce8:	3304      	adds	r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d90e      	bls.n	8005d24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d22:	6093      	str	r3, [r2, #8]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
<<<<<<< HEAD
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f006 f843 	bl	800b964 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <PCD_EP_OutSetupPacket_int+0x88>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d90c      	bls.n	8005900 <PCD_EP_OutSetupPacket_int+0x7c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	799b      	ldrb	r3, [r3, #6]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d108      	bne.n	8005900 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058f8:	461a      	mov	r2, r3
 80058fa:	2101      	movs	r1, #1
 80058fc:	f003 fde8 	bl	80094d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	4f54300a 	.word	0x4f54300a

08005910 <HAL_PCDEx_SetTxFiFo>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f006 f8f1 	bl	800bf0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d90c      	bls.n	8005d4c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	799b      	ldrb	r3, [r3, #6]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d108      	bne.n	8005d4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d44:	461a      	mov	r2, r3
 8005d46:	2101      	movs	r1, #1
 8005d48:	f003 fe24 	bl	8009994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	4f54300a 	.word	0x4f54300a

08005d5c <HAL_PCDEx_SetTxFiFo>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
 800591c:	4613      	mov	r3, r2
 800591e:	803b      	strh	r3, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	803b      	strh	r3, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
<<<<<<< HEAD
<<<<<<< HEAD
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800592e:	883b      	ldrh	r3, [r7, #0]
 8005930:	0419      	lsls	r1, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	430a      	orrs	r2, r1
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
 800593c:	e028      	b.n	8005990 <HAL_PCDEx_SetTxFiFo+0x80>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d7a:	883b      	ldrh	r3, [r7, #0]
 8005d7c:	0419      	lsls	r1, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d88:	e028      	b.n	8005ddc <HAL_PCDEx_SetTxFiFo+0x80>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
<<<<<<< HEAD
<<<<<<< HEAD
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4413      	add	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e00d      	b.n	800596e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	3340      	adds	r3, #64	@ 0x40
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4413      	add	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	3301      	adds	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	3b01      	subs	r3, #1
 8005974:	429a      	cmp	r2, r3
 8005976:	d3ec      	bcc.n	8005952 <HAL_PCDEx_SetTxFiFo+0x42>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e00d      	b.n	8005dba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	3340      	adds	r3, #64	@ 0x40
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	3301      	adds	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d3ec      	bcc.n	8005d9e <HAL_PCDEx_SetTxFiFo+0x42>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
<<<<<<< HEAD
<<<<<<< HEAD
 8005978:	883b      	ldrh	r3, [r7, #0]
 800597a:	0418      	lsls	r0, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	3b01      	subs	r3, #1
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	4302      	orrs	r2, r0
 8005988:	3340      	adds	r3, #64	@ 0x40
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_PCDEx_SetRxFiFo>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005dc4:	883b      	ldrh	r3, [r7, #0]
 8005dc6:	0418      	lsls	r0, r3, #16
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4302      	orrs	r2, r0
 8005dd4:	3340      	adds	r3, #64	@ 0x40
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_PCDEx_SetRxFiFo>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_PCDEx_LPM_Callback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_PCDEx_LPM_Callback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_RCC_OscConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_RCC_OscConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e267      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e267      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d075      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d075      	beq.n	8005f2e <HAL_RCC_OscConfig+0x10a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
<<<<<<< HEAD
<<<<<<< HEAD
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f6:	4b88      	ldr	r3, [pc, #544]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d00c      	beq.n	8005a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a02:	4b85      	ldr	r3, [pc, #532]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d112      	bne.n	8005a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0e:	4b82      	ldr	r3, [pc, #520]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a1a:	d10b      	bne.n	8005a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d05b      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x108>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d157      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e242      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e42:	4b88      	ldr	r3, [pc, #544]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d00c      	beq.n	8005e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e4e:	4b85      	ldr	r3, [pc, #532]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d112      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b82      	ldr	r3, [pc, #520]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	4b7e      	ldr	r3, [pc, #504]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05b      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d157      	bne.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e242      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCC_OscConfig+0x74>
 8005a3e:	4b76      	ldr	r3, [pc, #472]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a75      	ldr	r2, [pc, #468]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e01d      	b.n	8005a88 <HAL_RCC_OscConfig+0xb0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x98>
 8005a56:	4b70      	ldr	r3, [pc, #448]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b6d      	ldr	r3, [pc, #436]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6c      	ldr	r2, [pc, #432]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_OscConfig+0xb0>
 8005a70:	4b69      	ldr	r3, [pc, #420]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a68      	ldr	r2, [pc, #416]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b66      	ldr	r3, [pc, #408]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a65      	ldr	r2, [pc, #404]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fc f8bc 	bl	8001c0c <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a98:	f7fc f8b8 	bl	8001c0c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	@ 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e207      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0xc0>
 8005ab6:	e014      	b.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_OscConfig+0x74>
 8005e8a:	4b76      	ldr	r3, [pc, #472]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a75      	ldr	r2, [pc, #468]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e01d      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x98>
 8005ea2:	4b70      	ldr	r3, [pc, #448]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b6d      	ldr	r3, [pc, #436]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	4b69      	ldr	r3, [pc, #420]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b66      	ldr	r3, [pc, #408]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a65      	ldr	r2, [pc, #404]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fb ff42 	bl	8001d64 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee4:	f7fb ff3e 	bl	8001d64 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	@ 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e207      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 8005ab8:	f7fc f8a8 	bl	8001c0c <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac0:	f7fc f8a4 	bl	8001c0c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b64      	cmp	r3, #100	@ 0x64
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e1f3      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad2:	4b51      	ldr	r3, [pc, #324]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xe8>
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae0:	bf00      	nop
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005f04:	f7fb ff2e 	bl	8001d64 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fb ff2a 	bl	8001d64 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1f3      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1e:	4b51      	ldr	r3, [pc, #324]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	bf00      	nop
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d063      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d063      	beq.n	8006002 <HAL_RCC_OscConfig+0x1de>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
<<<<<<< HEAD
<<<<<<< HEAD
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aee:	4b4a      	ldr	r3, [pc, #296]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afa:	4b47      	ldr	r3, [pc, #284]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d11c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b44      	ldr	r3, [pc, #272]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d116      	bne.n	8005b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b12:	4b41      	ldr	r3, [pc, #260]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_RCC_OscConfig+0x152>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1c7      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d11c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b44      	ldr	r3, [pc, #272]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5e:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e1c7      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4937      	ldr	r1, [pc, #220]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	e03a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005f76:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4937      	ldr	r1, [pc, #220]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8a:	e03a      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      /* Check the HSI State */
<<<<<<< HEAD
<<<<<<< HEAD
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b48:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <HAL_RCC_OscConfig+0x244>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fc f85d 	bl	8001c0c <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b56:	f7fc f859 	bl	8001c0c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e1a8      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b68:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x17e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d020      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f94:	4b34      	ldr	r3, [pc, #208]	@ (8006068 <HAL_RCC_OscConfig+0x244>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fee3 	bl	8001d64 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa2:	f7fb fedf 	bl	8001d64 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e1a8      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 8005b74:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4925      	ldr	r1, [pc, #148]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]
 8005b88:	e015      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005fc0:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4925      	ldr	r1, [pc, #148]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	600b      	str	r3, [r1, #0]
 8005fd4:	e015      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8005b8a:	4b24      	ldr	r3, [pc, #144]	@ (8005c1c <HAL_RCC_OscConfig+0x244>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc f83c 	bl	8001c0c <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fc f838 	bl	8001c0c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e187      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005baa:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x1c0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8005fd6:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <HAL_RCC_OscConfig+0x244>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fb fec2 	bl	8001d64 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe4:	f7fb febe 	bl	8001d64 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e187      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1c0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d036      	beq.n	8005c30 <HAL_RCC_OscConfig+0x258>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d036      	beq.n	800607c <HAL_RCC_OscConfig+0x258>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
<<<<<<< HEAD
<<<<<<< HEAD
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bca:	4b15      	ldr	r3, [pc, #84]	@ (8005c20 <HAL_RCC_OscConfig+0x248>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fc f81c 	bl	8001c0c <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fc f818 	bl	8001c0c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e167      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bea:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x200>
 8005bf6:	e01b      	b.n	8005c30 <HAL_RCC_OscConfig+0x258>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006016:	4b15      	ldr	r3, [pc, #84]	@ (800606c <HAL_RCC_OscConfig+0x248>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fb fea2 	bl	8001d64 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006024:	f7fb fe9e 	bl	8001d64 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e167      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006036:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8006038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCC_OscConfig+0x200>
 8006042:	e01b      	b.n	800607c <HAL_RCC_OscConfig+0x258>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8005bf8:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <HAL_RCC_OscConfig+0x248>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfe:	f7fc f805 	bl	8001c0c <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c04:	e00e      	b.n	8005c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c06:	f7fc f801 	bl	8001c0c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d907      	bls.n	8005c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e150      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	42470000 	.word	0x42470000
 8005c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b88      	ldr	r3, [pc, #544]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ea      	bne.n	8005c06 <HAL_RCC_OscConfig+0x22e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006044:	4b09      	ldr	r3, [pc, #36]	@ (800606c <HAL_RCC_OscConfig+0x248>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604a:	f7fb fe8b 	bl	8001d64 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	e00e      	b.n	8006070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006052:	f7fb fe87 	bl	8001d64 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d907      	bls.n	8006070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e150      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006064:	40023800 	.word	0x40023800
 8006068:	42470000 	.word	0x42470000
 800606c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b88      	ldr	r3, [pc, #544]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ea      	bne.n	8006052 <HAL_RCC_OscConfig+0x22e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8097 	beq.w	8005d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8097 	beq.w	80061b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
<<<<<<< HEAD
<<<<<<< HEAD
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c42:	4b81      	ldr	r3, [pc, #516]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10f      	bne.n	8005c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	4b7d      	ldr	r3, [pc, #500]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	4a7c      	ldr	r2, [pc, #496]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b77      	ldr	r3, [pc, #476]	@ (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d118      	bne.n	8005cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4b74      	ldr	r3, [pc, #464]	@ (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a73      	ldr	r2, [pc, #460]	@ (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c86:	f7fb ffc1 	bl	8001c0c <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8e:	f7fb ffbd 	bl	8001c0c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e10c      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2b6>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4b81      	ldr	r3, [pc, #516]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	4b7d      	ldr	r3, [pc, #500]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b77      	ldr	r3, [pc, #476]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d118      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c6:	4b74      	ldr	r3, [pc, #464]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d2:	f7fb fe47 	bl	8001d64 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060da:	f7fb fe43 	bl	8001d64 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e10c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x2b6>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2ea>
 8005cb4:	4b64      	ldr	r3, [pc, #400]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb8:	4a63      	ldr	r2, [pc, #396]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc0:	e01c      	b.n	8005cfc <HAL_RCC_OscConfig+0x324>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x30c>
 8005cca:	4b5f      	ldr	r3, [pc, #380]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	4a5e      	ldr	r2, [pc, #376]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cda:	4a5b      	ldr	r2, [pc, #364]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0x324>
 8005ce4:	4b58      	ldr	r3, [pc, #352]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce8:	4a57      	ldr	r2, [pc, #348]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf0:	4b55      	ldr	r3, [pc, #340]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	4a54      	ldr	r2, [pc, #336]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fb ff82 	bl	8001c0c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fb ff7e 	bl	8001c0c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0cb      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d22:	4b49      	ldr	r3, [pc, #292]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0ee      	beq.n	8005d0c <HAL_RCC_OscConfig+0x334>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x382>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d106      	bne.n	800610e <HAL_RCC_OscConfig+0x2ea>
 8006100:	4b64      	ldr	r3, [pc, #400]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a63      	ldr	r2, [pc, #396]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
 800610c:	e01c      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d10c      	bne.n	8006130 <HAL_RCC_OscConfig+0x30c>
 8006116:	4b5f      	ldr	r3, [pc, #380]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	4a5e      	ldr	r2, [pc, #376]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	6713      	str	r3, [r2, #112]	@ 0x70
 8006122:	4b5c      	ldr	r3, [pc, #368]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	4a5b      	ldr	r2, [pc, #364]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	@ 0x70
 800612e:	e00b      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 8006130:	4b58      	ldr	r3, [pc, #352]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006134:	4a57      	ldr	r2, [pc, #348]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	@ 0x70
 800613c:	4b55      	ldr	r3, [pc, #340]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006140:	4a54      	ldr	r2, [pc, #336]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0304 	bic.w	r3, r3, #4
 8006146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d015      	beq.n	800617c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fb fe08 	bl	8001d64 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	e00a      	b.n	800616e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006158:	f7fb fe04 	bl	8001d64 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0cb      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616e:	4b49      	ldr	r3, [pc, #292]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ee      	beq.n	8006158 <HAL_RCC_OscConfig+0x334>
 800617a:	e014      	b.n	80061a6 <HAL_RCC_OscConfig+0x382>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 8005d30:	f7fb ff6c 	bl	8001c0c <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fb ff68 	bl	8001c0c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0b5      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ee      	bne.n	8005d38 <HAL_RCC_OscConfig+0x360>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800617c:	f7fb fdf2 	bl	8001d64 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	e00a      	b.n	800619a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f7fb fdee 	bl	8001d64 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e0b5      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800619a:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ee      	bne.n	8006184 <HAL_RCC_OscConfig+0x360>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }

    /* Restore clock configuration if changed */
<<<<<<< HEAD
<<<<<<< HEAD
    if(pwrclkchanged == SET)
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d105      	bne.n	8005d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d60:	4b39      	ldr	r3, [pc, #228]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	4a38      	ldr	r2, [pc, #224]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d6a:	6413      	str	r3, [r2, #64]	@ 0x40
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if (pwrclkchanged == SET)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d105      	bne.n	80061b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ac:	4b39      	ldr	r3, [pc, #228]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	4a38      	ldr	r2, [pc, #224]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061b6:	6413      	str	r3, [r2, #64]	@ 0x40
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a1 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d76:	4b34      	ldr	r3, [pc, #208]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d05c      	beq.n	8005e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d141      	bne.n	8005e0e <HAL_RCC_OscConfig+0x436>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a1 	beq.w	8006304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c2:	4b34      	ldr	r3, [pc, #208]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d05c      	beq.n	8006288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d141      	bne.n	800625a <HAL_RCC_OscConfig+0x436>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8005d8a:	4b31      	ldr	r3, [pc, #196]	@ (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fb ff3c 	bl	8001c0c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fb ff38 	bl	8001c0c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e087      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80061d6:	4b31      	ldr	r3, [pc, #196]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fb fdc2 	bl	8001d64 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fb fdbe 	bl	8001d64 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e087      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f6:	4b27      	ldr	r3, [pc, #156]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x3c0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
<<<<<<< HEAD
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	491b      	ldr	r1, [pc, #108]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	491b      	ldr	r1, [pc, #108]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8005de0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de6:	f7fb ff11 	bl	8001c0c <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dee:	f7fb ff0d 	bl	8001c0c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e05c      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e00:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x416>
 8005e0c:	e054      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800622c:	4b1b      	ldr	r3, [pc, #108]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fb fd97 	bl	8001d64 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623a:	f7fb fd93 	bl	8001d64 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e05c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624c:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x416>
 8006258:	e054      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fb fefa 	bl	8001c0c <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fb fef6 	bl	8001c0c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e045      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x444>
 8005e3a:	e03d      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fb fd80 	bl	8001d64 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fb fd7c 	bl	8001d64 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e045      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627a:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x444>
 8006286:	e03d      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
<<<<<<< HEAD
<<<<<<< HEAD
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e038      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	42470060 	.word	0x42470060
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e038      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	42470060 	.word	0x42470060
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
<<<<<<< HEAD
 8005e54:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec4 <HAL_RCC_OscConfig+0x4ec>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
=======
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_RCC_OscConfig+0x4ec>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_RCC_OscConfig+0x4ec>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
<<<<<<< HEAD
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d028      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d121      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d11a      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d111      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d028      	beq.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d121      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d11a      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d8:	4293      	cmp	r3, r2
 80062da:	d111      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	3b01      	subs	r3, #1
 80062ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800

08005ec8 <HAL_RCC_ClockConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800

08006314 <HAL_RCC_ClockConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0cc      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0cc      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
<<<<<<< HEAD
<<<<<<< HEAD
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005edc:	4b68      	ldr	r3, [pc, #416]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90c      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eea:	4b65      	ldr	r3, [pc, #404]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b63      	ldr	r3, [pc, #396]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0b8      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006328:	4b68      	ldr	r3, [pc, #416]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d90c      	bls.n	8006350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b65      	ldr	r3, [pc, #404]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b63      	ldr	r3, [pc, #396]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0b8      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d020      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f1c:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4a58      	ldr	r2, [pc, #352]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f34:	4b53      	ldr	r3, [pc, #332]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4a52      	ldr	r2, [pc, #328]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f3e:	6093      	str	r3, [r2, #8]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006368:	4b59      	ldr	r3, [pc, #356]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a58      	ldr	r2, [pc, #352]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006380:	4b53      	ldr	r3, [pc, #332]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4a52      	ldr	r2, [pc, #328]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800638a:	6093      	str	r3, [r2, #8]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
<<<<<<< HEAD
 8005f40:	4b50      	ldr	r3, [pc, #320]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	494d      	ldr	r1, [pc, #308]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d044      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x120>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800638c:	4b50      	ldr	r3, [pc, #320]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	494d      	ldr	r1, [pc, #308]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d044      	beq.n	8006434 <HAL_RCC_ClockConfig+0x120>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
<<<<<<< HEAD
<<<<<<< HEAD
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d107      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f66:	4b47      	ldr	r3, [pc, #284]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d119      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e07f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d107      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f86:	4b3f      	ldr	r3, [pc, #252]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e06f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	4b47      	ldr	r3, [pc, #284]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d119      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e07f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d107      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d2:	4b3f      	ldr	r3, [pc, #252]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e06f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
<<<<<<< HEAD
<<<<<<< HEAD
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f96:	4b3b      	ldr	r3, [pc, #236]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e067      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e2:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e067      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
<<<<<<< HEAD
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 0203 	bic.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4934      	ldr	r1, [pc, #208]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb8:	f7fb fe28 	bl	8001c0c <HAL_GetTick>
 8005fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	f7fb fe24 	bl	8001c0c <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e04f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 020c 	and.w	r2, r3, #12
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d1eb      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xf8>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0203 	bic.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4934      	ldr	r1, [pc, #208]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006404:	f7fb fcae 	bl	8001d64 <HAL_GetTick>
 8006408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	e00a      	b.n	8006422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640c:	f7fb fcaa 	bl	8001d64 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e04f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006422:	4b2b      	ldr	r3, [pc, #172]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 020c 	and.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	429a      	cmp	r2, r3
 8006432:	d1eb      	bne.n	800640c <HAL_RCC_ClockConfig+0xf8>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
<<<<<<< HEAD
<<<<<<< HEAD
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b25      	ldr	r3, [pc, #148]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d20c      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x148>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006434:	4b25      	ldr	r3, [pc, #148]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d20c      	bcs.n	800645c <HAL_RCC_ClockConfig+0x148>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 8005ff6:	4b22      	ldr	r3, [pc, #136]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e032      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
=======
=======
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006442:	4b22      	ldr	r3, [pc, #136]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e032      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800601c:	4b19      	ldr	r3, [pc, #100]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4916      	ldr	r1, [pc, #88]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800603a:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	490e      	ldr	r1, [pc, #56]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800604e:	f000 f821 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 8006052:	4602      	mov	r2, r0
 8006054:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	091b      	lsrs	r3, r3, #4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	490a      	ldr	r1, [pc, #40]	@ (8006088 <HAL_RCC_ClockConfig+0x1c0>)
 8006060:	5ccb      	ldrb	r3, [r1, r3]
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	4a09      	ldr	r2, [pc, #36]	@ (800608c <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800606a:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <HAL_RCC_ClockConfig+0x1c8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fb fd88 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023c00 	.word	0x40023c00
 8006084:	40023800 	.word	0x40023800
 8006088:	08010600 	.word	0x08010600
 800608c:	20000004 	.word	0x20000004
 8006090:	20000008 	.word	0x20000008

08006094 <HAL_RCC_GetSysClockFreq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006468:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4916      	ldr	r1, [pc, #88]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006486:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	490e      	ldr	r1, [pc, #56]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	4313      	orrs	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800649a:	f000 f821 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	490a      	ldr	r1, [pc, #40]	@ (80064d4 <HAL_RCC_ClockConfig+0x1c0>)
 80064ac:	5ccb      	ldrb	r3, [r1, r3]
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	4a09      	ldr	r2, [pc, #36]	@ (80064d8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064b6:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <HAL_RCC_ClockConfig+0x1c8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb fc0e 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40023c00 	.word	0x40023c00
 80064d0:	40023800 	.word	0x40023800
 80064d4:	08011a70 	.word	0x08011a70
 80064d8:	20000004 	.word	0x20000004
 80064dc:	20000008 	.word	0x20000008

080064e0 <HAL_RCC_GetSysClockFreq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b090      	sub	sp, #64	@ 0x40
 800609a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a4:	2300      	movs	r3, #0
 80060a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ac:	4b59      	ldr	r3, [pc, #356]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d00d      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x40>
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	f200 80a1 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x16c>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0x34>
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d003      	beq.n	80060ce <HAL_RCC_GetSysClockFreq+0x3a>
 80060c6:	e09b      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x16c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80064e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e4:	b090      	sub	sp, #64	@ 0x40
 80064e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f8:	4b59      	ldr	r3, [pc, #356]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d00d      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x40>
 8006504:	2b08      	cmp	r3, #8
 8006506:	f200 80a1 	bhi.w	800664c <HAL_RCC_GetSysClockFreq+0x16c>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x34>
 800650e:	2b04      	cmp	r3, #4
 8006510:	d003      	beq.n	800651a <HAL_RCC_GetSysClockFreq+0x3a>
 8006512:	e09b      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x16c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 80060c8:	4b53      	ldr	r3, [pc, #332]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x184>)
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80060cc:	e09b      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006514:	4b53      	ldr	r3, [pc, #332]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x184>)
 8006516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006518:	e09b      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 80060ce:	4b53      	ldr	r3, [pc, #332]	@ (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 80060d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060d2:	e098      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800651a:	4b53      	ldr	r3, [pc, #332]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x188>)
 800651c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800651e:	e098      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
<<<<<<< HEAD
 80060d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060de:	4b4d      	ldr	r3, [pc, #308]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d028      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	099b      	lsrs	r3, r3, #6
 80060f0:	2200      	movs	r2, #0
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060fc:	2100      	movs	r1, #0
 80060fe:	4b47      	ldr	r3, [pc, #284]	@ (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 8006100:	fb03 f201 	mul.w	r2, r3, r1
 8006104:	2300      	movs	r3, #0
 8006106:	fb00 f303 	mul.w	r3, r0, r3
 800610a:	4413      	add	r3, r2
 800610c:	4a43      	ldr	r2, [pc, #268]	@ (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 800610e:	fba0 1202 	umull	r1, r2, r0, r2
 8006112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006114:	460a      	mov	r2, r1
 8006116:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800611a:	4413      	add	r3, r2
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800611e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006120:	2200      	movs	r2, #0
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800612a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800612e:	f7fa fdb3 	bl	8000c98 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4613      	mov	r3, r2
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800613a:	e053      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x150>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006520:	4b4f      	ldr	r3, [pc, #316]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800652a:	4b4d      	ldr	r3, [pc, #308]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d028      	beq.n	8006588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006536:	4b4a      	ldr	r3, [pc, #296]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	2200      	movs	r2, #0
 800653e:	623b      	str	r3, [r7, #32]
 8006540:	627a      	str	r2, [r7, #36]	@ 0x24
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006548:	2100      	movs	r1, #0
 800654a:	4b47      	ldr	r3, [pc, #284]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x188>)
 800654c:	fb03 f201 	mul.w	r2, r3, r1
 8006550:	2300      	movs	r3, #0
 8006552:	fb00 f303 	mul.w	r3, r0, r3
 8006556:	4413      	add	r3, r2
 8006558:	4a43      	ldr	r2, [pc, #268]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x188>)
 800655a:	fba0 1202 	umull	r1, r2, r0, r2
 800655e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006560:	460a      	mov	r2, r1
 8006562:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006566:	4413      	add	r3, r2
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656c:	2200      	movs	r2, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	61fa      	str	r2, [r7, #28]
 8006572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800657a:	f7fa fb8d 	bl	8000c98 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4613      	mov	r3, r2
 8006584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006586:	e053      	b.n	8006630 <HAL_RCC_GetSysClockFreq+0x150>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* HSI used as PLL clock source */
<<<<<<< HEAD
<<<<<<< HEAD
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613c:	4b35      	ldr	r3, [pc, #212]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	099b      	lsrs	r3, r3, #6
 8006142:	2200      	movs	r2, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800614e:	f04f 0b00 	mov.w	fp, #0
 8006152:	4652      	mov	r2, sl
 8006154:	465b      	mov	r3, fp
 8006156:	f04f 0000 	mov.w	r0, #0
 800615a:	f04f 0100 	mov.w	r1, #0
 800615e:	0159      	lsls	r1, r3, #5
 8006160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006164:	0150      	lsls	r0, r2, #5
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	ebb2 080a 	subs.w	r8, r2, sl
 800616e:	eb63 090b 	sbc.w	r9, r3, fp
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800617e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006182:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006186:	ebb2 0408 	subs.w	r4, r2, r8
 800618a:	eb63 0509 	sbc.w	r5, r3, r9
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	00eb      	lsls	r3, r5, #3
 8006198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619c:	00e2      	lsls	r2, r4, #3
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	eb14 030a 	adds.w	r3, r4, sl
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	eb45 030b 	adc.w	r3, r5, fp
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ba:	4629      	mov	r1, r5
 80061bc:	028b      	lsls	r3, r1, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c4:	4621      	mov	r1, r4
 80061c6:	028a      	lsls	r2, r1, #10
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ce:	2200      	movs	r2, #0
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	60fa      	str	r2, [r7, #12]
 80061d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d8:	f7fa fd5e 	bl	8000c98 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80061f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006588:	4b35      	ldr	r3, [pc, #212]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	099b      	lsrs	r3, r3, #6
 800658e:	2200      	movs	r2, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	617a      	str	r2, [r7, #20]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800659a:	f04f 0b00 	mov.w	fp, #0
 800659e:	4652      	mov	r2, sl
 80065a0:	465b      	mov	r3, fp
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f04f 0100 	mov.w	r1, #0
 80065aa:	0159      	lsls	r1, r3, #5
 80065ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065b0:	0150      	lsls	r0, r2, #5
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	ebb2 080a 	subs.w	r8, r2, sl
 80065ba:	eb63 090b 	sbc.w	r9, r3, fp
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065d2:	ebb2 0408 	subs.w	r4, r2, r8
 80065d6:	eb63 0509 	sbc.w	r5, r3, r9
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	00eb      	lsls	r3, r5, #3
 80065e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065e8:	00e2      	lsls	r2, r4, #3
 80065ea:	4614      	mov	r4, r2
 80065ec:	461d      	mov	r5, r3
 80065ee:	eb14 030a 	adds.w	r3, r4, sl
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	eb45 030b 	adc.w	r3, r5, fp
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006606:	4629      	mov	r1, r5
 8006608:	028b      	lsls	r3, r1, #10
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006610:	4621      	mov	r1, r4
 8006612:	028a      	lsls	r2, r1, #10
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661a:	2200      	movs	r2, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	60fa      	str	r2, [r7, #12]
 8006620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006624:	f7fa fb38 	bl	8000c98 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4613      	mov	r3, r2
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x180>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	3301      	adds	r3, #1
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800664a:	e002      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x184>)
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006208:	4618      	mov	r0, r3
 800620a:	3740      	adds	r7, #64	@ 0x40
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	017d7840 	.word	0x017d7840

08006220 <HAL_RCC_GetHCLKFreq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800664c:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x184>)
 800664e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006654:	4618      	mov	r0, r3
 8006656:	3740      	adds	r7, #64	@ 0x40
 8006658:	46bd      	mov	sp, r7
 800665a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800
 8006664:	00f42400 	.word	0x00f42400
 8006668:	017d7840 	.word	0x017d7840

0800666c <HAL_RCC_GetHCLKFreq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000004 	.word	0x20000004

08006238 <HAL_RCC_GetPCLK1Freq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006670:	4b03      	ldr	r3, [pc, #12]	@ (8006680 <HAL_RCC_GetHCLKFreq+0x14>)
 8006672:	681b      	ldr	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000004 	.word	0x20000004

08006684 <HAL_RCC_GetPCLK1Freq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	@ (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	08010610 	.word	0x08010610

08006260 <HAL_RCC_GetPCLK2Freq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006688:	f7ff fff0 	bl	800666c <HAL_RCC_GetHCLKFreq>
 800668c:	4602      	mov	r2, r0
 800668e:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	0a9b      	lsrs	r3, r3, #10
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	4903      	ldr	r1, [pc, #12]	@ (80066a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800669a:	5ccb      	ldrb	r3, [r1, r3]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40023800 	.word	0x40023800
 80066a8:	08011a80 	.word	0x08011a80

080066ac <HAL_RCC_GetPCLK2Freq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006264:	f7ff ffdc 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0b5b      	lsrs	r3, r3, #13
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4903      	ldr	r1, [pc, #12]	@ (8006284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	08010610 	.word	0x08010610

08006288 <HAL_TIM_Base_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066b0:	f7ff ffdc 	bl	800666c <HAL_RCC_GetHCLKFreq>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	0b5b      	lsrs	r3, r3, #13
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	4903      	ldr	r1, [pc, #12]	@ (80066d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066c2:	5ccb      	ldrb	r3, [r1, r3]
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40023800 	.word	0x40023800
 80066d0:	08011a80 	.word	0x08011a80

080066d4 <HAL_TIM_Base_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e041      	b.n	800631e <HAL_TIM_Base_Init+0x96>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e041      	b.n	800676a <HAL_TIM_Base_Init+0x96>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb fa3a 	bl	8001728 <HAL_TIM_Base_MspInit>
=======
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb f8b6 	bl	800186c <HAL_TIM_Base_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb f8b6 	bl	800186c <HAL_TIM_Base_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fbd8 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_TIM_PWM_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 fbd8 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_PWM_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e041      	b.n	80063bc <HAL_TIM_PWM_Init+0x96>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e041      	b.n	8006808 <HAL_TIM_PWM_Init+0x96>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f839 	bl	80063c4 <HAL_TIM_PWM_MspInit>
=======
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f839 	bl	8006810 <HAL_TIM_PWM_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f839 	bl	8006810 <HAL_TIM_PWM_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fb89 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_PWM_MspInit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f000 fb89 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIM_PWM_MspInit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIM_PWM_Start>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIM_PWM_Start>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
<<<<<<< HEAD
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_TIM_PWM_Start+0x24>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	e022      	b.n	8006442 <HAL_TIM_PWM_Start+0x6a>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d109      	bne.n	8006416 <HAL_TIM_PWM_Start+0x3e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	e015      	b.n	8006442 <HAL_TIM_PWM_Start+0x6a>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d109      	bne.n	8006430 <HAL_TIM_PWM_Start+0x58>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e008      	b.n	8006442 <HAL_TIM_PWM_Start+0x6a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e068      	b.n	800651c <HAL_TIM_PWM_Start+0x144>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <HAL_TIM_PWM_Start+0x24>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	bf14      	ite	ne
 8006840:	2301      	movne	r3, #1
 8006842:	2300      	moveq	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	e022      	b.n	800688e <HAL_TIM_PWM_Start+0x6a>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b04      	cmp	r3, #4
 800684c:	d109      	bne.n	8006862 <HAL_TIM_PWM_Start+0x3e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	bf14      	ite	ne
 800685a:	2301      	movne	r3, #1
 800685c:	2300      	moveq	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	e015      	b.n	800688e <HAL_TIM_PWM_Start+0x6a>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d109      	bne.n	800687c <HAL_TIM_PWM_Start+0x58>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	e008      	b.n	800688e <HAL_TIM_PWM_Start+0x6a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	bf14      	ite	ne
 8006888:	2301      	movne	r3, #1
 800688a:	2300      	moveq	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e068      	b.n	8006968 <HAL_TIM_PWM_Start+0x144>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
<<<<<<< HEAD
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0x82>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006458:	e013      	b.n	8006482 <HAL_TIM_PWM_Start+0xaa>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0x92>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006468:	e00b      	b.n	8006482 <HAL_TIM_PWM_Start+0xaa>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b08      	cmp	r3, #8
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Start+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006478:	e003      	b.n	8006482 <HAL_TIM_PWM_Start+0xaa>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2201      	movs	r2, #1
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fda8 	bl	8006fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a23      	ldr	r2, [pc, #140]	@ (8006524 <HAL_TIM_PWM_Start+0x14c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d107      	bne.n	80064aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x82>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068a4:	e013      	b.n	80068ce <HAL_TIM_PWM_Start+0xaa>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Start+0x92>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068b4:	e00b      	b.n	80068ce <HAL_TIM_PWM_Start+0xaa>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Start+0xa2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068c4:	e003      	b.n	80068ce <HAL_TIM_PWM_Start+0xaa>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2201      	movs	r2, #1
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fda8 	bl	800742c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a23      	ldr	r2, [pc, #140]	@ (8006970 <HAL_TIM_PWM_Start+0x14c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d107      	bne.n	80068f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
<<<<<<< HEAD
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <HAL_TIM_PWM_Start+0x14c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d018      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x10e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d013      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x10e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <HAL_TIM_PWM_Start+0x150>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00e      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x10e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <HAL_TIM_PWM_Start+0x154>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x10e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a16      	ldr	r2, [pc, #88]	@ (8006530 <HAL_TIM_PWM_Start+0x158>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x10e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a14      	ldr	r2, [pc, #80]	@ (8006534 <HAL_TIM_PWM_Start+0x15c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d111      	bne.n	800650a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d010      	beq.n	800651a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006508:	e007      	b.n	800651a <HAL_TIM_PWM_Start+0x142>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <HAL_TIM_PWM_Start+0x14c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_TIM_PWM_Start+0x10e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006908:	d013      	beq.n	8006932 <HAL_TIM_PWM_Start+0x10e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <HAL_TIM_PWM_Start+0x150>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIM_PWM_Start+0x10e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a17      	ldr	r2, [pc, #92]	@ (8006978 <HAL_TIM_PWM_Start+0x154>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIM_PWM_Start+0x10e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a16      	ldr	r2, [pc, #88]	@ (800697c <HAL_TIM_PWM_Start+0x158>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIM_PWM_Start+0x10e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <HAL_TIM_PWM_Start+0x15c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d111      	bne.n	8006956 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b06      	cmp	r3, #6
 8006942:	d010      	beq.n	8006966 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	e007      	b.n	8006966 <HAL_TIM_PWM_Start+0x142>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0201 	orr.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40010000 	.word	0x40010000
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40014000 	.word	0x40014000

08006538 <HAL_TIM_IRQHandler>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40010000 	.word	0x40010000
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40014000 	.word	0x40014000

08006984 <HAL_TIM_IRQHandler>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0202 	mvn.w	r2, #2
 800656c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0x52>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d020      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0202 	mvn.w	r2, #2
 80069b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x52>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa65 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0x5e>
=======
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa65 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa65 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa57 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fa ffd9 	bl	8001548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa57 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fa fe05 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
<<<<<<< HEAD
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d020      	beq.n	80065e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0204 	mvn.w	r2, #4
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x9e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d020      	beq.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01b      	beq.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0204 	mvn.w	r2, #4
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x9e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa3f 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0xaa>
=======
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa3f 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa3f 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa31 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fa ffb3 	bl	8001548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa31 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fa fddf 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
<<<<<<< HEAD
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d020      	beq.n	8006634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0208 	mvn.w	r2, #8
 8006604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2204      	movs	r2, #4
 800660a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0xea>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d020      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0208 	mvn.w	r2, #8
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0xea>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa19 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0xf6>
=======
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa19 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xf6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa19 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xf6>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa0b 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fa ff8d 	bl	8001548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa0b 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fa fdb9 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
<<<<<<< HEAD
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	d020      	beq.n	8006680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01b      	beq.n	8006680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0210 	mvn.w	r2, #16
 8006650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2208      	movs	r2, #8
 8006656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_TIM_IRQHandler+0x136>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d020      	beq.n	8006acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0210 	mvn.w	r2, #16
 8006a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x136>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9f3 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 800666c:	e005      	b.n	800667a <HAL_TIM_IRQHandler+0x142>
=======
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9f3 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x142>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9f3 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x142>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9e5 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7fa ff67 	bl	8001548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f9e5 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fa fd93 	bl	80015ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
<<<<<<< HEAD
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0201 	mvn.w	r2, #1
 800669c:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0201 	mvn.w	r2, #1
 8006ae8:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9c3 	bl	8006a2a <HAL_TIM_PeriodElapsedCallback>
=======
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9c3 	bl	8006e76 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9c3 	bl	8006e76 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
<<<<<<< HEAD
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066c0:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b0c:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fd2a 	bl	800711c <HAL_TIMEx_BreakCallback>
=======
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fd2a 	bl	8007568 <HAL_TIMEx_BreakCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fd2a 	bl	8007568 <HAL_TIMEx_BreakCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
<<<<<<< HEAD
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066e4:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b30:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f9bd 	bl	8006a66 <HAL_TIM_TriggerCallback>
=======
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9bd 	bl	8006eb2 <HAL_TIM_TriggerCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9bd 	bl	8006eb2 <HAL_TIM_TriggerCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
<<<<<<< HEAD
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00c      	beq.n	8006710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0220 	mvn.w	r2, #32
 8006708:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00c      	beq.n	8006b5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0220 	mvn.w	r2, #32
 8006b54:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fcfc 	bl	8007108 <HAL_TIMEx_CommutCallback>
=======
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fcfc 	bl	8007554 <HAL_TIMEx_CommutCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fcfc 	bl	8007554 <HAL_TIMEx_CommutCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_PWM_ConfigChannel>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_TIM_PWM_ConfigChannel>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006732:	2302      	movs	r3, #2
 8006734:	e0ae      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b0c      	cmp	r3, #12
 8006742:	f200 809f 	bhi.w	8006884 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006746:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006781 	.word	0x08006781
 8006750:	08006885 	.word	0x08006885
 8006754:	08006885 	.word	0x08006885
 8006758:	08006885 	.word	0x08006885
 800675c:	080067c1 	.word	0x080067c1
 8006760:	08006885 	.word	0x08006885
 8006764:	08006885 	.word	0x08006885
 8006768:	08006885 	.word	0x08006885
 800676c:	08006803 	.word	0x08006803
 8006770:	08006885 	.word	0x08006885
 8006774:	08006885 	.word	0x08006885
 8006778:	08006885 	.word	0x08006885
 800677c:	08006843 	.word	0x08006843
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e0ae      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b0c      	cmp	r3, #12
 8006b8e:	f200 809f 	bhi.w	8006cd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006cd1 	.word	0x08006cd1
 8006ba0:	08006cd1 	.word	0x08006cd1
 8006ba4:	08006cd1 	.word	0x08006cd1
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006cd1 	.word	0x08006cd1
 8006bb0:	08006cd1 	.word	0x08006cd1
 8006bb4:	08006cd1 	.word	0x08006cd1
 8006bb8:	08006c4f 	.word	0x08006c4f
 8006bbc:	08006cd1 	.word	0x08006cd1
 8006bc0:	08006cd1 	.word	0x08006cd1
 8006bc4:	08006cd1 	.word	0x08006cd1
 8006bc8:	08006c8f 	.word	0x08006c8f
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fa04 	bl	8006b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0208 	orr.w	r2, r2, #8
 800679a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0204 	bic.w	r2, r2, #4
 80067aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6999      	ldr	r1, [r3, #24]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	619a      	str	r2, [r3, #24]
      break;
 80067be:	e064      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fa04 	bl	8006fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0208 	orr.w	r2, r2, #8
 8006be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0204 	bic.w	r2, r2, #4
 8006bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	619a      	str	r2, [r3, #24]
      break;
 8006c0a:	e064      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fa4a 	bl	8006c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6999      	ldr	r1, [r3, #24]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	021a      	lsls	r2, r3, #8
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	619a      	str	r2, [r3, #24]
      break;
 8006800:	e043      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fa4a 	bl	80070ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6999      	ldr	r1, [r3, #24]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	021a      	lsls	r2, r3, #8
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	619a      	str	r2, [r3, #24]
      break;
 8006c4c:	e043      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fa95 	bl	8006d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0208 	orr.w	r2, r2, #8
 800681c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0204 	bic.w	r2, r2, #4
 800682c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69d9      	ldr	r1, [r3, #28]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	61da      	str	r2, [r3, #28]
      break;
 8006840:	e023      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fa95 	bl	8007184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0208 	orr.w	r2, r2, #8
 8006c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0204 	bic.w	r2, r2, #4
 8006c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	61da      	str	r2, [r3, #28]
      break;
 8006c8c:	e023      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fadf 	bl	8006e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800685c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69d9      	ldr	r1, [r3, #28]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	021a      	lsls	r2, r3, #8
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	61da      	str	r2, [r3, #28]
      break;
 8006882:	e002      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fadf 	bl	8007258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69d9      	ldr	r1, [r3, #28]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	021a      	lsls	r2, r3, #8
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	61da      	str	r2, [r3, #28]
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
<<<<<<< HEAD
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_ConfigClockSource>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_ConfigClockSource>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_ConfigClockSource+0x1c>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0b4      	b.n	8006a22 <HAL_TIM_ConfigClockSource+0x186>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIM_ConfigClockSource+0x1c>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e0b4      	b.n	8006e6e <HAL_TIM_ConfigClockSource+0x186>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
<<<<<<< HEAD
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f0:	d03e      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0xd4>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f6:	f200 8087 	bhi.w	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068fe:	f000 8086 	beq.w	8006a0e <HAL_TIM_ConfigClockSource+0x172>
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006906:	d87f      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	2b70      	cmp	r3, #112	@ 0x70
 800690a:	d01a      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0xa6>
 800690c:	2b70      	cmp	r3, #112	@ 0x70
 800690e:	d87b      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006910:	2b60      	cmp	r3, #96	@ 0x60
 8006912:	d050      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006914:	2b60      	cmp	r3, #96	@ 0x60
 8006916:	d877      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006918:	2b50      	cmp	r3, #80	@ 0x50
 800691a:	d03c      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0xfa>
 800691c:	2b50      	cmp	r3, #80	@ 0x50
 800691e:	d873      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d058      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	d86f      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006928:	2b30      	cmp	r3, #48	@ 0x30
 800692a:	d064      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x15a>
 800692c:	2b30      	cmp	r3, #48	@ 0x30
 800692e:	d86b      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d060      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d867      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d05c      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x15a>
 800693c:	2b10      	cmp	r3, #16
 800693e:	d05a      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006940:	e062      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x16c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3c:	d03e      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0xd4>
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d42:	f200 8087 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d4a:	f000 8086 	beq.w	8006e5a <HAL_TIM_ConfigClockSource+0x172>
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d52:	d87f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d54:	2b70      	cmp	r3, #112	@ 0x70
 8006d56:	d01a      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0xa6>
 8006d58:	2b70      	cmp	r3, #112	@ 0x70
 8006d5a:	d87b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d5c:	2b60      	cmp	r3, #96	@ 0x60
 8006d5e:	d050      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x11a>
 8006d60:	2b60      	cmp	r3, #96	@ 0x60
 8006d62:	d877      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d64:	2b50      	cmp	r3, #80	@ 0x50
 8006d66:	d03c      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d68:	2b50      	cmp	r3, #80	@ 0x50
 8006d6a:	d873      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d058      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x13a>
 8006d70:	2b40      	cmp	r3, #64	@ 0x40
 8006d72:	d86f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b30      	cmp	r3, #48	@ 0x30
 8006d76:	d064      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d78:	2b30      	cmp	r3, #48	@ 0x30
 8006d7a:	d86b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d060      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d867      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05c      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d05a      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d8c:	e062      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
<<<<<<< HEAD
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006952:	f000 fb25 	bl	8006fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	609a      	str	r2, [r3, #8]
      break;
 800696e:	e04f      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d9e:	f000 fb25 	bl	80073ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]
      break;
 8006dba:	e04f      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
<<<<<<< HEAD
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006980:	f000 fb0e 	bl	8006fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006992:	609a      	str	r2, [r3, #8]
      break;
 8006994:	e03c      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dcc:	f000 fb0e 	bl	80073ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dde:	609a      	str	r2, [r3, #8]
      break;
 8006de0:	e03c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
<<<<<<< HEAD
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fa82 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2150      	movs	r1, #80	@ 0x50
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fadb 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80069b4:	e02c      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 fa82 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2150      	movs	r1, #80	@ 0x50
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fadb 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006e00:	e02c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
<<<<<<< HEAD
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 faa1 	bl	8006f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2160      	movs	r1, #96	@ 0x60
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 facb 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80069d4:	e01c      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f000 faa1 	bl	8007356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2160      	movs	r1, #96	@ 0x60
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 facb 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e01c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
<<<<<<< HEAD
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 fa62 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2140      	movs	r1, #64	@ 0x40
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fabb 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80069f4:	e00c      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fa62 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2140      	movs	r1, #64	@ 0x40
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fabb 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e00c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
<<<<<<< HEAD
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f000 fab2 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 8006a06:	e003      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 fab2 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006e52:	e003      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
<<<<<<< HEAD
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0c:	e000      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_TIM_PeriodElapsedCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e000      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_PeriodElapsedCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_TIM_OC_DelayElapsedCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_OC_DelayElapsedCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIM_IC_CaptureCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_TIM_IC_CaptureCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_TIM_TriggerCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_TriggerCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <TIM_Base_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <TIM_Base_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	@ (8006b78 <TIM_Base_SetConfig+0xfc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a37      	ldr	r2, [pc, #220]	@ (8006b7c <TIM_Base_SetConfig+0x100>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a36      	ldr	r2, [pc, #216]	@ (8006b80 <TIM_Base_SetConfig+0x104>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a35      	ldr	r2, [pc, #212]	@ (8006b84 <TIM_Base_SetConfig+0x108>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d108      	bne.n	8006ac6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8006b78 <TIM_Base_SetConfig+0xfc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a28      	ldr	r2, [pc, #160]	@ (8006b7c <TIM_Base_SetConfig+0x100>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <TIM_Base_SetConfig+0x104>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	@ (8006b84 <TIM_Base_SetConfig+0x108>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a25      	ldr	r2, [pc, #148]	@ (8006b88 <TIM_Base_SetConfig+0x10c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a24      	ldr	r2, [pc, #144]	@ (8006b8c <TIM_Base_SetConfig+0x110>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a23      	ldr	r2, [pc, #140]	@ (8006b90 <TIM_Base_SetConfig+0x114>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3a      	ldr	r2, [pc, #232]	@ (8006fc4 <TIM_Base_SetConfig+0xfc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x38>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x38>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a37      	ldr	r2, [pc, #220]	@ (8006fc8 <TIM_Base_SetConfig+0x100>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x38>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a36      	ldr	r2, [pc, #216]	@ (8006fcc <TIM_Base_SetConfig+0x104>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x38>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a35      	ldr	r2, [pc, #212]	@ (8006fd0 <TIM_Base_SetConfig+0x108>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc4 <TIM_Base_SetConfig+0xfc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01b      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f20:	d017      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a28      	ldr	r2, [pc, #160]	@ (8006fc8 <TIM_Base_SetConfig+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a27      	ldr	r2, [pc, #156]	@ (8006fcc <TIM_Base_SetConfig+0x104>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00f      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a26      	ldr	r2, [pc, #152]	@ (8006fd0 <TIM_Base_SetConfig+0x108>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00b      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	@ (8006fd4 <TIM_Base_SetConfig+0x10c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <TIM_Base_SetConfig+0x110>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_Base_SetConfig+0x8a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	@ (8006fdc <TIM_Base_SetConfig+0x114>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d108      	bne.n	8006f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
<<<<<<< HEAD
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b78 <TIM_Base_SetConfig+0xfc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d103      	bne.n	8006b4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc4 <TIM_Base_SetConfig+0xfc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d103      	bne.n	8006f98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
<<<<<<< HEAD
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d105      	bne.n	8006b6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800

08006b94 <TIM_OC1_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d105      	bne.n	8006fb6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	611a      	str	r2, [r3, #16]
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800
 8006fd0:	40000c00 	.word	0x40000c00
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	40014800 	.word	0x40014800

08006fe0 <TIM_OC1_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f023 0201 	bic.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0302 	bic.w	r3, r3, #2
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1c      	ldr	r2, [pc, #112]	@ (8006c5c <TIM_OC1_SetConfig+0xc8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10c      	bne.n	8006c0a <TIM_OC1_SetConfig+0x76>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f023 0201 	bic.w	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f023 0302 	bic.w	r3, r3, #2
 8007028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1c      	ldr	r2, [pc, #112]	@ (80070a8 <TIM_OC1_SetConfig+0xc8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10c      	bne.n	8007056 <TIM_OC1_SetConfig+0x76>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0308 	bic.w	r3, r3, #8
 8006bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0304 	bic.w	r3, r3, #4
 8006c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <TIM_OC1_SetConfig+0xc8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d111      	bne.n	8006c36 <TIM_OC1_SetConfig+0xa2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0308 	bic.w	r3, r3, #8
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a13      	ldr	r2, [pc, #76]	@ (80070a8 <TIM_OC1_SetConfig+0xc8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d111      	bne.n	8007082 <TIM_OC1_SetConfig+0xa2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
<<<<<<< HEAD
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	621a      	str	r2, [r3, #32]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	40010000 	.word	0x40010000

08006c60 <TIM_OC2_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	621a      	str	r2, [r3, #32]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40010000 	.word	0x40010000

080070ac <TIM_OC2_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f023 0210 	bic.w	r2, r3, #16
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0320 	bic.w	r3, r3, #32
 8006caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a1e      	ldr	r2, [pc, #120]	@ (8006d34 <TIM_OC2_SetConfig+0xd4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10d      	bne.n	8006cdc <TIM_OC2_SetConfig+0x7c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f023 0210 	bic.w	r2, r3, #16
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0320 	bic.w	r3, r3, #32
 80070f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1e      	ldr	r2, [pc, #120]	@ (8007180 <TIM_OC2_SetConfig+0xd4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10d      	bne.n	8007128 <TIM_OC2_SetConfig+0x7c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <TIM_OC2_SetConfig+0xd4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d113      	bne.n	8006d0c <TIM_OC2_SetConfig+0xac>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a15      	ldr	r2, [pc, #84]	@ (8007180 <TIM_OC2_SetConfig+0xd4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d113      	bne.n	8007158 <TIM_OC2_SetConfig+0xac>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
<<<<<<< HEAD
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800713e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000

08006d38 <TIM_OC3_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000

08007184 <TIM_OC3_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1d      	ldr	r2, [pc, #116]	@ (8006e08 <TIM_OC3_SetConfig+0xd0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10d      	bne.n	8006db2 <TIM_OC3_SetConfig+0x7a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <TIM_OC3_SetConfig+0xd0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10d      	bne.n	80071fe <TIM_OC3_SetConfig+0x7a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a14      	ldr	r2, [pc, #80]	@ (8006e08 <TIM_OC3_SetConfig+0xd0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d113      	bne.n	8006de2 <TIM_OC3_SetConfig+0xaa>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a14      	ldr	r2, [pc, #80]	@ (8007254 <TIM_OC3_SetConfig+0xd0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d113      	bne.n	800722e <TIM_OC3_SetConfig+0xaa>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
<<<<<<< HEAD
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800720c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	621a      	str	r2, [r3, #32]
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40010000 	.word	0x40010000

08006e0c <TIM_OC4_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40010000 	.word	0x40010000

08007258 <TIM_OC4_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	031b      	lsls	r3, r3, #12
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a10      	ldr	r2, [pc, #64]	@ (8006ea8 <TIM_OC4_SetConfig+0x9c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d109      	bne.n	8006e80 <TIM_OC4_SetConfig+0x74>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	031b      	lsls	r3, r3, #12
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <TIM_OC4_SetConfig+0x9c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <TIM_OC4_SetConfig+0x74>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
<<<<<<< HEAD
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	019b      	lsls	r3, r3, #6
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40010000 	.word	0x40010000

08006eac <TIM_TI1_ConfigInputStage>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000

080072f8 <TIM_TI1_ConfigInputStage>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 030a 	bic.w	r3, r3, #10
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <TIM_TI2_ConfigInputStage>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 030a 	bic.w	r3, r3, #10
 8007334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <TIM_TI2_ConfigInputStage>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006f0a:	b480      	push	{r7}
 8006f0c:	b087      	sub	sp, #28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f023 0210 	bic.w	r2, r3, #16
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	031b      	lsls	r3, r3, #12
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_ITRx_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f023 0210 	bic.w	r2, r3, #16
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	031b      	lsls	r3, r3, #12
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_ITRx_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
<<<<<<< HEAD
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f043 0307 	orr.w	r3, r3, #7
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	609a      	str	r2, [r3, #8]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_ETR_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f043 0307 	orr.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM_ETR_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	021a      	lsls	r2, r3, #8
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_CCxChannelCmd>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	021a      	lsls	r2, r3, #8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	431a      	orrs	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4313      	orrs	r3, r2
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_CCxChannelCmd>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
<<<<<<< HEAD
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	43db      	mvns	r3, r3
 8007002:	401a      	ands	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	431a      	orrs	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <HAL_TIMEx_MasterConfigSynchronization>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2201      	movs	r2, #1
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1a      	ldr	r2, [r3, #32]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	43db      	mvns	r3, r3
 800744e:	401a      	ands	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	fa01 f303 	lsl.w	r3, r1, r3
 8007464:	431a      	orrs	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_TIMEx_MasterConfigSynchronization>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007040:	2302      	movs	r3, #2
 8007042:	e050      	b.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1c      	ldr	r2, [pc, #112]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d018      	beq.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007090:	d013      	beq.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a16      	ldr	r2, [pc, #88]	@ (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a15      	ldr	r2, [pc, #84]	@ (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a13      	ldr	r2, [pc, #76]	@ (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d10c      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	609a      	str	r2, [r3, #8]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800748c:	2302      	movs	r3, #2
 800748e:	e050      	b.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074dc:	d013      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a16      	ldr	r2, [pc, #88]	@ (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a15      	ldr	r2, [pc, #84]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a13      	ldr	r2, [pc, #76]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10c      	bne.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800750c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4313      	orrs	r3, r2
 8007516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	609a      	str	r2, [r3, #8]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
<<<<<<< HEAD
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800
 8007100:	40000c00 	.word	0x40000c00
 8007104:	40014000 	.word	0x40014000

08007108 <HAL_TIMEx_CommutCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40010000 	.word	0x40010000
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00
 8007550:	40014000 	.word	0x40014000

08007554 <HAL_TIMEx_CommutCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIMEx_BreakCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_BreakCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UART_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e042      	b.n	80071c8 <HAL_UART_Init+0x98>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e042      	b.n	8007614 <HAL_UART_Init+0x98>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fa fb48 	bl	80017ec <HAL_UART_MspInit>
=======
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa f9c4 	bl	8001930 <HAL_UART_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa f9c4 	bl	8001930 <HAL_UART_MspInit>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2224      	movs	r2, #36	@ 0x24
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fc85 	bl	8007a84 <UART_SetConfig>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	@ 0x24
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fcbb 	bl	8007f3c <UART_SetConfig>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
<<<<<<< HEAD
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_UART_IRQHandler>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	4613      	mov	r3, r2
 8007628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b20      	cmp	r3, #32
 8007634:	d121      	bne.n	800767a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_UART_Transmit_IT+0x26>
 800763c:	88fb      	ldrh	r3, [r7, #6]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e01a      	b.n	800767c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2221      	movs	r2, #33	@ 0x21
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007674:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e000      	b.n	800767c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800767a:	2302      	movs	r3, #2
  }
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_IRQHandler>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b0ba      	sub	sp, #232	@ 0xe8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800720e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10f      	bne.n	8007236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <HAL_UART_IRQHandler+0x66>
 8007222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fb69 	bl	8007906 <UART_Receive_IT>
      return;
 8007234:	e25b      	b.n	80076ee <HAL_UART_IRQHandler+0x51e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007688:	b580      	push	{r7, lr}
 800768a:	b0ba      	sub	sp, #232	@ 0xe8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80076c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb69 	bl	8007dbe <UART_Receive_IT>
      return;
 80076ec:	e25b      	b.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8007236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80de 	beq.w	80073fc <HAL_UART_IRQHandler+0x22c>
 8007240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800724c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007250:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80d1 	beq.w	80073fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_UART_IRQHandler+0xae>
 8007266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800726a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	f043 0201 	orr.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80076ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80de 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80d1 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	645a      	str	r2, [r3, #68]	@ 0x44
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0xd2>
 800728a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	645a      	str	r2, [r3, #68]	@ 0x44
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
 8007742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007752:	f043 0202 	orr.w	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	645a      	str	r2, [r3, #68]	@ 0x44
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <HAL_UART_IRQHandler+0xf6>
 80072ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072be:	f043 0204 	orr.w	r2, r3, #4
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
 8007766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007776:	f043 0204 	orr.w	r2, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <HAL_UART_IRQHandler+0x126>
 80072d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d105      	bne.n	80072ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	f043 0208 	orr.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
 800778a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a6:	f043 0208 	orr.w	r2, r3, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	645a      	str	r2, [r3, #68]	@ 0x44
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 81f2 	beq.w	80076e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_UART_IRQHandler+0x14e>
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 faf4 	bl	8007906 <UART_Receive_IT>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 81f2 	beq.w	8007b9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 faf4 	bl	8007dbe <UART_Receive_IT>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
<<<<<<< HEAD
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007328:	2b40      	cmp	r3, #64	@ 0x40
 800732a:	bf0c      	ite	eq
 800732c:	2301      	moveq	r3, #1
 800732e:	2300      	movne	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <HAL_UART_IRQHandler+0x17a>
 8007342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04f      	beq.n	80073ea <HAL_UART_IRQHandler+0x21a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_UART_IRQHandler+0x17a>
 80077fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04f      	beq.n	80078a2 <HAL_UART_IRQHandler+0x21a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9fc 	bl	8007748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d141      	bne.n	80073e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3314      	adds	r3, #20
 8007364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800737c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3314      	adds	r3, #20
 8007386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800738a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800738e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1d9      	bne.n	800735e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <HAL_UART_IRQHandler+0x20a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9fc 	bl	8007c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007812:	2b40      	cmp	r3, #64	@ 0x40
 8007814:	d141      	bne.n	800789a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800782c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800784e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800785a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1d9      	bne.n	8007816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d013      	beq.n	8007892 <HAL_UART_IRQHandler+0x20a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
<<<<<<< HEAD
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b6:	4a7e      	ldr	r2, [pc, #504]	@ (80075b0 <HAL_UART_IRQHandler+0x3e0>)
 80073b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fb f905 	bl	80025ce <HAL_DMA_Abort_IT>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	e00e      	b.n	80073f8 <HAL_UART_IRQHandler+0x228>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a68 <HAL_UART_IRQHandler+0x3e0>)
 8007870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007876:	4618      	mov	r0, r3
 8007878:	f7fb f8cd 	bl	8002a16 <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	e00e      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f99e 	bl	800771c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e0:	e00a      	b.n	80073f8 <HAL_UART_IRQHandler+0x228>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f99e 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007898:	e00a      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f99a 	bl	800771c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	e006      	b.n	80073f8 <HAL_UART_IRQHandler+0x228>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f99a 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e006      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f996 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80073f6:	e175      	b.n	80076e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	bf00      	nop
    return;
 80073fa:	e173      	b.n	80076e4 <HAL_UART_IRQHandler+0x514>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f996 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80078ae:	e175      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	bf00      	nop
    return;
 80078b2:	e173      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
<<<<<<< HEAD
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 814f 	bne.w	80076a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8148 	beq.w	80076a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8141 	beq.w	80076a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	f040 80b6 	bne.w	80075b4 <HAL_UART_IRQHandler+0x3e4>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f040 814f 	bne.w	8007b5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8148 	beq.w	8007b5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8141 	beq.w	8007b5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	f040 80b6 	bne.w	8007a6c <HAL_UART_IRQHandler+0x3e4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
<<<<<<< HEAD
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8145 	beq.w	80076e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007466:	429a      	cmp	r2, r3
 8007468:	f080 813e 	bcs.w	80076e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007472:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800747e:	f000 8088 	beq.w	8007592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800749c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80074ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1d9      	bne.n	8007482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3314      	adds	r3, #20
 80074d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3314      	adds	r3, #20
 80074ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e1      	bne.n	80074ce <HAL_UART_IRQHandler+0x2fe>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800790c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8145 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800791a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800791e:	429a      	cmp	r2, r3
 8007920:	f080 813e 	bcs.w	8007ba0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007936:	f000 8088 	beq.w	8007a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800797e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d9      	bne.n	800793a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e1      	bne.n	8007986 <HAL_UART_IRQHandler+0x2fe>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
<<<<<<< HEAD
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800751a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800751c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800752e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007530:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800753c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007574:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007576:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800757a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e3      	bne.n	8007550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758c:	4618      	mov	r0, r3
 800758e:	f7fa ffae 	bl	80024ee <HAL_DMA_Abort>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3314      	adds	r3, #20
 80079c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3314      	adds	r3, #20
 80079e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e3      	bne.n	8007a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fa ff76 	bl	8002936 <HAL_DMA_Abort>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
<<<<<<< HEAD
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
<<<<<<< HEAD
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f8c1 	bl	8007730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ae:	e09b      	b.n	80076e8 <HAL_UART_IRQHandler+0x518>
 80075b0:	0800780f 	.word	0x0800780f
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8c1 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a66:	e09b      	b.n	8007ba0 <HAL_UART_IRQHandler+0x518>
 8007a68:	08007cc7 	.word	0x08007cc7
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
<<<<<<< HEAD
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 808e 	beq.w	80076ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80075d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8089 	beq.w	80076ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	330c      	adds	r3, #12
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800760c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e3      	bne.n	80075da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	623b      	str	r3, [r7, #32]
   return(result);
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3314      	adds	r3, #20
 8007632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007636:	633a      	str	r2, [r7, #48]	@ 0x30
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800763c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	60fb      	str	r3, [r7, #12]
   return(result);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0310 	bic.w	r3, r3, #16
 800766e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800767c:	61fa      	str	r2, [r7, #28]
 800767e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	69b9      	ldr	r1, [r7, #24]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	617b      	str	r3, [r7, #20]
   return(result);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e3      	bne.n	8007658 <HAL_UART_IRQHandler+0x488>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 808e 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8089 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	330c      	adds	r3, #12
 8007a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e3      	bne.n	8007a92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3314      	adds	r3, #20
 8007aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e3      	bne.n	8007aca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0310 	bic.w	r3, r3, #16
 8007b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330c      	adds	r3, #12
 8007b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b34:	61fa      	str	r2, [r7, #28]
 8007b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	69b9      	ldr	r1, [r7, #24]
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	617b      	str	r3, [r7, #20]
   return(result);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e3      	bne.n	8007b10 <HAL_UART_IRQHandler+0x488>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
<<<<<<< HEAD
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
<<<<<<< HEAD
 8007696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f847 	bl	8007730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076a2:	e023      	b.n	80076ec <HAL_UART_IRQHandler+0x51c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f847 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b5a:	e023      	b.n	8007ba4 <HAL_UART_IRQHandler+0x51c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <HAL_UART_IRQHandler+0x4f4>
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8ba 	bl	8007836 <UART_Transmit_IT>
    return;
 80076c2:	e014      	b.n	80076ee <HAL_UART_IRQHandler+0x51e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_UART_IRQHandler+0x4f4>
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8ba 	bl	8007cee <UART_Transmit_IT>
    return;
 8007b7a:	e014      	b.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <HAL_UART_IRQHandler+0x51e>
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f8fa 	bl	80078d6 <UART_EndTransmit_IT>
    return;
 80076e2:	e004      	b.n	80076ee <HAL_UART_IRQHandler+0x51e>
    return;
 80076e4:	bf00      	nop
 80076e6:	e002      	b.n	80076ee <HAL_UART_IRQHandler+0x51e>
      return;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <HAL_UART_IRQHandler+0x51e>
      return;
 80076ec:	bf00      	nop
  }
}
 80076ee:	37e8      	adds	r7, #232	@ 0xe8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_UART_TxCpltCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
 8007b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8fa 	bl	8007d8e <UART_EndTransmit_IT>
    return;
 8007b9a:	e004      	b.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007b9c:	bf00      	nop
 8007b9e:	e002      	b.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ba0:	bf00      	nop
 8007ba2:	e000      	b.n	8007ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ba4:	bf00      	nop
  }
}
 8007ba6:	37e8      	adds	r7, #232	@ 0xe8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_TxCpltCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_UART_RxCpltCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_RxCpltCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UART_ErrorCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_UART_ErrorCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UARTEx_RxEventCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_UARTEx_RxEventCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	807b      	strh	r3, [r7, #2]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <UART_EndRxTransfer>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_EndRxTransfer>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007748:	b480      	push	{r7}
 800774a:	b095      	sub	sp, #84	@ 0x54
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007770:	643a      	str	r2, [r7, #64]	@ 0x40
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3314      	adds	r3, #20
 800778a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	61fb      	str	r3, [r7, #28]
   return(result);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d119      	bne.n	80077f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0310 	bic.w	r3, r3, #16
 80077d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e0:	61ba      	str	r2, [r7, #24]
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6979      	ldr	r1, [r7, #20]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	613b      	str	r3, [r7, #16]
   return(result);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_EndRxTransfer+0x78>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007c00:	b480      	push	{r7}
 8007c02:	b095      	sub	sp, #84	@ 0x54
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c28:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e5      	bne.n	8007c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3314      	adds	r3, #20
 8007c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3314      	adds	r3, #20
 8007c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e5      	bne.n	8007c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d119      	bne.n	8007cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0310 	bic.w	r3, r3, #16
 8007c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c98:	61ba      	str	r2, [r7, #24]
 8007c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_EndRxTransfer+0x78>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
<<<<<<< HEAD
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007802:	bf00      	nop
 8007804:	3754      	adds	r7, #84	@ 0x54
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <UART_DMAAbortOnError>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007cba:	bf00      	nop
 8007cbc:	3754      	adds	r7, #84	@ 0x54
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <UART_DMAAbortOnError>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	84da      	strh	r2, [r3, #38]	@ 0x26
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff ff77 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <UART_Transmit_IT>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff ff77 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_Transmit_IT>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
<<<<<<< HEAD
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b21      	cmp	r3, #33	@ 0x21
 8007848:	d13e      	bne.n	80078c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007852:	d114      	bne.n	800787e <UART_Transmit_IT+0x48>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d110      	bne.n	800787e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007870:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]
 800787c:	e008      	b.n	8007890 <UART_Transmit_IT+0x5a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b21      	cmp	r3, #33	@ 0x21
 8007d00:	d13e      	bne.n	8007d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0a:	d114      	bne.n	8007d36 <UART_Transmit_IT+0x48>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d110      	bne.n	8007d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	1c9a      	adds	r2, r3, #2
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	621a      	str	r2, [r3, #32]
 8007d34:	e008      	b.n	8007d48 <UART_Transmit_IT+0x5a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
<<<<<<< HEAD
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6211      	str	r1, [r2, #32]
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29b      	uxth	r3, r3
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4619      	mov	r1, r3
 800789e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10f      	bne.n	80078c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e000      	b.n	80078ca <UART_Transmit_IT+0x94>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	1c59      	adds	r1, r3, #1
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6211      	str	r1, [r2, #32]
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	4619      	mov	r1, r3
 8007d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10f      	bne.n	8007d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <UART_Transmit_IT+0x94>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <UART_EndTransmit_IT>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007d80:	2302      	movs	r3, #2
  }
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <UART_EndTransmit_IT>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fefc 	bl	80076f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_Receive_IT>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fefc 	bl	8007bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <UART_Receive_IT>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007906:	b580      	push	{r7, lr}
 8007908:	b08c      	sub	sp, #48	@ 0x30
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b08c      	sub	sp, #48	@ 0x30
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
<<<<<<< HEAD
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b22      	cmp	r3, #34	@ 0x22
 8007918:	f040 80ae 	bne.w	8007a78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007924:	d117      	bne.n	8007956 <UART_Receive_IT+0x50>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d113      	bne.n	8007956 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007944:	b29a      	uxth	r2, r3
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	629a      	str	r2, [r3, #40]	@ 0x28
 8007954:	e026      	b.n	80079a4 <UART_Receive_IT+0x9e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b22      	cmp	r3, #34	@ 0x22
 8007dd0:	f040 80ae 	bne.w	8007f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ddc:	d117      	bne.n	8007e0e <UART_Receive_IT+0x50>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d113      	bne.n	8007e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e0c:	e026      	b.n	8007e5c <UART_Receive_IT+0x9e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
<<<<<<< HEAD
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007968:	d007      	beq.n	800797a <UART_Receive_IT+0x74>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <UART_Receive_IT+0x82>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e008      	b.n	800799a <UART_Receive_IT+0x94>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e20:	d007      	beq.n	8007e32 <UART_Receive_IT+0x74>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <UART_Receive_IT+0x82>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	e008      	b.n	8007e52 <UART_Receive_IT+0x94>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
<<<<<<< HEAD
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007994:	b2da      	uxtb	r2, r3
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	4619      	mov	r1, r3
 80079b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d15d      	bne.n	8007a74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0220 	bic.w	r2, r2, #32
 80079c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695a      	ldr	r2, [r3, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	635a      	str	r2, [r3, #52]	@ 0x34
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d15d      	bne.n	8007f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0220 	bic.w	r2, r2, #32
 8007e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	695a      	ldr	r2, [r3, #20]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	635a      	str	r2, [r3, #52]	@ 0x34
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
<<<<<<< HEAD
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d135      	bne.n	8007a6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	613b      	str	r3, [r7, #16]
   return(result);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f023 0310 	bic.w	r3, r3, #16
 8007a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a24:	623a      	str	r2, [r7, #32]
 8007a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	69f9      	ldr	r1, [r7, #28]
 8007a2a:	6a3a      	ldr	r2, [r7, #32]
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e5      	bne.n	8007a04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d10a      	bne.n	8007a5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d135      	bne.n	8007f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007edc:	623a      	str	r2, [r7, #32]
 8007ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	6a3a      	ldr	r2, [r7, #32]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d10a      	bne.n	8007f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
<<<<<<< HEAD
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fe64 	bl	8007730 <HAL_UARTEx_RxEventCallback>
 8007a68:	e002      	b.n	8007a70 <UART_Receive_IT+0x16a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff fe64 	bl	8007be8 <HAL_UARTEx_RxEventCallback>
 8007f20:	e002      	b.n	8007f28 <UART_Receive_IT+0x16a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fe4c 	bl	8007708 <HAL_UART_RxCpltCallback>
=======
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fe4c 	bl	8007bc0 <HAL_UART_RxCpltCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fe4c 	bl	8007bc0 <HAL_UART_RxCpltCallback>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8007a70:	2300      	movs	r3, #0
 8007a72:	e002      	b.n	8007a7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <UART_Receive_IT+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e002      	b.n	8007f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <UART_Receive_IT+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3730      	adds	r7, #48	@ 0x30
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <UART_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3730      	adds	r7, #48	@ 0x30
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <UART_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b0c0      	sub	sp, #256	@ 0x100
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b0c0      	sub	sp, #256	@ 0x100
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
<<<<<<< HEAD
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa0:	68d9      	ldr	r1, [r3, #12]
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	ea40 0301 	orr.w	r3, r0, r1
 8007aac:	6113      	str	r3, [r2, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f58:	68d9      	ldr	r1, [r3, #12]
 8007f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	ea40 0301 	orr.w	r3, r0, r1
 8007f64:	6113      	str	r3, [r2, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
<<<<<<< HEAD
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007adc:	f021 010c 	bic.w	r1, r1, #12
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007aea:	430b      	orrs	r3, r1
 8007aec:	60d3      	str	r3, [r2, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f94:	f021 010c 	bic.w	r1, r1, #12
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	60d3      	str	r3, [r2, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
<<<<<<< HEAD
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afe:	6999      	ldr	r1, [r3, #24]
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	ea40 0301 	orr.w	r3, r0, r1
 8007b0a:	6153      	str	r3, [r2, #20]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb6:	6999      	ldr	r1, [r3, #24]
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	ea40 0301 	orr.w	r3, r0, r1
 8007fc2:	6153      	str	r3, [r2, #20]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
<<<<<<< HEAD
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b8f      	ldr	r3, [pc, #572]	@ (8007d50 <UART_SetConfig+0x2cc>)
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d005      	beq.n	8007b24 <UART_SetConfig+0xa0>
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007d54 <UART_SetConfig+0x2d0>)
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d104      	bne.n	8007b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fe fb9c 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 8007b28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b2c:	e003      	b.n	8007b36 <UART_SetConfig+0xb2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b8f      	ldr	r3, [pc, #572]	@ (8008208 <UART_SetConfig+0x2cc>)
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d005      	beq.n	8007fdc <UART_SetConfig+0xa0>
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800820c <UART_SetConfig+0x2d0>)
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d104      	bne.n	8007fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fdc:	f7fe fb66 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 8007fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007fe4:	e003      	b.n	8007fee <UART_SetConfig+0xb2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
<<<<<<< HEAD
 8007b2e:	f7fe fb83 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8007b32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b40:	f040 810c 	bne.w	8007d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	1891      	adds	r1, r2, r2
 8007b5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b66:	4621      	mov	r1, r4
 8007b68:	eb12 0801 	adds.w	r8, r2, r1
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	eb43 0901 	adc.w	r9, r3, r1
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b86:	4690      	mov	r8, r2
 8007b88:	4699      	mov	r9, r3
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	eb18 0303 	adds.w	r3, r8, r3
 8007b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b94:	462b      	mov	r3, r5
 8007b96:	eb49 0303 	adc.w	r3, r9, r3
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	18db      	adds	r3, r3, r3
 8007bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bb8:	4613      	mov	r3, r2
 8007bba:	eb42 0303 	adc.w	r3, r2, r3
 8007bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bc8:	f7f9 f866 	bl	8000c98 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4b61      	ldr	r3, [pc, #388]	@ (8007d58 <UART_SetConfig+0x2d4>)
 8007bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	011c      	lsls	r4, r3, #4
 8007bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007bec:	4642      	mov	r2, r8
 8007bee:	464b      	mov	r3, r9
 8007bf0:	1891      	adds	r1, r2, r2
 8007bf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007bf4:	415b      	adcs	r3, r3
 8007bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8007c02:	4649      	mov	r1, r9
 8007c04:	eb43 0b01 	adc.w	fp, r3, r1
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c1c:	4692      	mov	sl, r2
 8007c1e:	469b      	mov	fp, r3
 8007c20:	4643      	mov	r3, r8
 8007c22:	eb1a 0303 	adds.w	r3, sl, r3
 8007c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	18db      	adds	r3, r3, r3
 8007c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c4e:	4613      	mov	r3, r2
 8007c50:	eb42 0303 	adc.w	r3, r2, r3
 8007c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c5e:	f7f9 f81b 	bl	8000c98 <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	4b3b      	ldr	r3, [pc, #236]	@ (8007d58 <UART_SetConfig+0x2d4>)
 8007c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	2264      	movs	r2, #100	@ 0x64
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	1acb      	subs	r3, r1, r3
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c7e:	4b36      	ldr	r3, [pc, #216]	@ (8007d58 <UART_SetConfig+0x2d4>)
 8007c80:	fba3 2302 	umull	r2, r3, r3, r2
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c8c:	441c      	add	r4, r3
 8007c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	1891      	adds	r1, r2, r2
 8007ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ca8:	415b      	adcs	r3, r3
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	1851      	adds	r1, r2, r1
 8007cb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	414b      	adcs	r3, r1
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cc8:	4659      	mov	r1, fp
 8007cca:	00cb      	lsls	r3, r1, #3
 8007ccc:	4651      	mov	r1, sl
 8007cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	00ca      	lsls	r2, r1, #3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4642      	mov	r2, r8
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	eb42 0303 	adc.w	r3, r2, r3
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d04:	460b      	mov	r3, r1
 8007d06:	18db      	adds	r3, r3, r3
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	eb42 0303 	adc.w	r3, r2, r3
 8007d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d1a:	f7f8 ffbd 	bl	8000c98 <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <UART_SetConfig+0x2d4>)
 8007d24:	fba3 1302 	umull	r1, r3, r3, r2
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	2164      	movs	r1, #100	@ 0x64
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	3332      	adds	r3, #50	@ 0x32
 8007d36:	4a08      	ldr	r2, [pc, #32]	@ (8007d58 <UART_SetConfig+0x2d4>)
 8007d38:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f003 0207 	and.w	r2, r3, #7
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4422      	add	r2, r4
 8007d4a:	609a      	str	r2, [r3, #8]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8007fe6:	f7fe fb4d 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8007fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ff8:	f040 810c 	bne.w	8008214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008000:	2200      	movs	r2, #0
 8008002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800800a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	1891      	adds	r1, r2, r2
 8008014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008016:	415b      	adcs	r3, r3
 8008018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800801a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800801e:	4621      	mov	r1, r4
 8008020:	eb12 0801 	adds.w	r8, r2, r1
 8008024:	4629      	mov	r1, r5
 8008026:	eb43 0901 	adc.w	r9, r3, r1
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800803a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800803e:	4690      	mov	r8, r2
 8008040:	4699      	mov	r9, r3
 8008042:	4623      	mov	r3, r4
 8008044:	eb18 0303 	adds.w	r3, r8, r3
 8008048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800804c:	462b      	mov	r3, r5
 800804e:	eb49 0303 	adc.w	r3, r9, r3
 8008052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800806a:	460b      	mov	r3, r1
 800806c:	18db      	adds	r3, r3, r3
 800806e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008070:	4613      	mov	r3, r2
 8008072:	eb42 0303 	adc.w	r3, r2, r3
 8008076:	657b      	str	r3, [r7, #84]	@ 0x54
 8008078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800807c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008080:	f7f8 fe0a 	bl	8000c98 <__aeabi_uldivmod>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4b61      	ldr	r3, [pc, #388]	@ (8008210 <UART_SetConfig+0x2d4>)
 800808a:	fba3 2302 	umull	r2, r3, r3, r2
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	011c      	lsls	r4, r3, #4
 8008092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008096:	2200      	movs	r2, #0
 8008098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800809c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80080a4:	4642      	mov	r2, r8
 80080a6:	464b      	mov	r3, r9
 80080a8:	1891      	adds	r1, r2, r2
 80080aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80080ac:	415b      	adcs	r3, r3
 80080ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080b4:	4641      	mov	r1, r8
 80080b6:	eb12 0a01 	adds.w	sl, r2, r1
 80080ba:	4649      	mov	r1, r9
 80080bc:	eb43 0b01 	adc.w	fp, r3, r1
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080d4:	4692      	mov	sl, r2
 80080d6:	469b      	mov	fp, r3
 80080d8:	4643      	mov	r3, r8
 80080da:	eb1a 0303 	adds.w	r3, sl, r3
 80080de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080e2:	464b      	mov	r3, r9
 80080e4:	eb4b 0303 	adc.w	r3, fp, r3
 80080e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008100:	460b      	mov	r3, r1
 8008102:	18db      	adds	r3, r3, r3
 8008104:	643b      	str	r3, [r7, #64]	@ 0x40
 8008106:	4613      	mov	r3, r2
 8008108:	eb42 0303 	adc.w	r3, r2, r3
 800810c:	647b      	str	r3, [r7, #68]	@ 0x44
 800810e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008116:	f7f8 fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4611      	mov	r1, r2
 8008120:	4b3b      	ldr	r3, [pc, #236]	@ (8008210 <UART_SetConfig+0x2d4>)
 8008122:	fba3 2301 	umull	r2, r3, r3, r1
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	2264      	movs	r2, #100	@ 0x64
 800812a:	fb02 f303 	mul.w	r3, r2, r3
 800812e:	1acb      	subs	r3, r1, r3
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008136:	4b36      	ldr	r3, [pc, #216]	@ (8008210 <UART_SetConfig+0x2d4>)
 8008138:	fba3 2302 	umull	r2, r3, r3, r2
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008144:	441c      	add	r4, r3
 8008146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800814a:	2200      	movs	r2, #0
 800814c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	1891      	adds	r1, r2, r2
 800815e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008160:	415b      	adcs	r3, r3
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008168:	4641      	mov	r1, r8
 800816a:	1851      	adds	r1, r2, r1
 800816c:	6339      	str	r1, [r7, #48]	@ 0x30
 800816e:	4649      	mov	r1, r9
 8008170:	414b      	adcs	r3, r1
 8008172:	637b      	str	r3, [r7, #52]	@ 0x34
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008180:	4659      	mov	r1, fp
 8008182:	00cb      	lsls	r3, r1, #3
 8008184:	4651      	mov	r1, sl
 8008186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800818a:	4651      	mov	r1, sl
 800818c:	00ca      	lsls	r2, r1, #3
 800818e:	4610      	mov	r0, r2
 8008190:	4619      	mov	r1, r3
 8008192:	4603      	mov	r3, r0
 8008194:	4642      	mov	r2, r8
 8008196:	189b      	adds	r3, r3, r2
 8008198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800819c:	464b      	mov	r3, r9
 800819e:	460a      	mov	r2, r1
 80081a0:	eb42 0303 	adc.w	r3, r2, r3
 80081a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80081b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081bc:	460b      	mov	r3, r1
 80081be:	18db      	adds	r3, r3, r3
 80081c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081c2:	4613      	mov	r3, r2
 80081c4:	eb42 0303 	adc.w	r3, r2, r3
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081d2:	f7f8 fd61 	bl	8000c98 <__aeabi_uldivmod>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4b0d      	ldr	r3, [pc, #52]	@ (8008210 <UART_SetConfig+0x2d4>)
 80081dc:	fba3 1302 	umull	r1, r3, r3, r2
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	2164      	movs	r1, #100	@ 0x64
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	3332      	adds	r3, #50	@ 0x32
 80081ee:	4a08      	ldr	r2, [pc, #32]	@ (8008210 <UART_SetConfig+0x2d4>)
 80081f0:	fba2 2303 	umull	r2, r3, r2, r3
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	f003 0207 	and.w	r2, r3, #7
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4422      	add	r2, r4
 8008202:	609a      	str	r2, [r3, #8]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8007d4c:	e106      	b.n	8007f5c <UART_SetConfig+0x4d8>
 8007d4e:	bf00      	nop
 8007d50:	40011000 	.word	0x40011000
 8007d54:	40011400 	.word	0x40011400
 8007d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d6e:	4642      	mov	r2, r8
 8007d70:	464b      	mov	r3, r9
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	6239      	str	r1, [r7, #32]
 8007d76:	415b      	adcs	r3, r3
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d7e:	4641      	mov	r1, r8
 8007d80:	1854      	adds	r4, r2, r1
 8007d82:	4649      	mov	r1, r9
 8007d84:	eb43 0501 	adc.w	r5, r3, r1
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	00eb      	lsls	r3, r5, #3
 8007d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d96:	00e2      	lsls	r2, r4, #3
 8007d98:	4614      	mov	r4, r2
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	4643      	mov	r3, r8
 8007d9e:	18e3      	adds	r3, r4, r3
 8007da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007da4:	464b      	mov	r3, r9
 8007da6:	eb45 0303 	adc.w	r3, r5, r3
 8007daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007dca:	4629      	mov	r1, r5
 8007dcc:	008b      	lsls	r3, r1, #2
 8007dce:	4621      	mov	r1, r4
 8007dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	008a      	lsls	r2, r1, #2
 8007dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ddc:	f7f8 ff5c 	bl	8000c98 <__aeabi_uldivmod>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4b60      	ldr	r3, [pc, #384]	@ (8007f68 <UART_SetConfig+0x4e4>)
 8007de6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	011c      	lsls	r4, r3, #4
 8007dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007df8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	61b9      	str	r1, [r7, #24]
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	61fb      	str	r3, [r7, #28]
 8007e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e10:	4641      	mov	r1, r8
 8007e12:	1851      	adds	r1, r2, r1
 8007e14:	6139      	str	r1, [r7, #16]
 8007e16:	4649      	mov	r1, r9
 8007e18:	414b      	adcs	r3, r1
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e28:	4659      	mov	r1, fp
 8007e2a:	00cb      	lsls	r3, r1, #3
 8007e2c:	4651      	mov	r1, sl
 8007e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e32:	4651      	mov	r1, sl
 8007e34:	00ca      	lsls	r2, r1, #3
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e44:	464b      	mov	r3, r9
 8007e46:	460a      	mov	r2, r1
 8007e48:	eb42 0303 	adc.w	r3, r2, r3
 8007e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e68:	4649      	mov	r1, r9
 8007e6a:	008b      	lsls	r3, r1, #2
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e72:	4641      	mov	r1, r8
 8007e74:	008a      	lsls	r2, r1, #2
 8007e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e7a:	f7f8 ff0d 	bl	8000c98 <__aeabi_uldivmod>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	4b38      	ldr	r3, [pc, #224]	@ (8007f68 <UART_SetConfig+0x4e4>)
 8007e86:	fba3 2301 	umull	r2, r3, r3, r1
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	2264      	movs	r2, #100	@ 0x64
 8007e8e:	fb02 f303 	mul.w	r3, r2, r3
 8007e92:	1acb      	subs	r3, r1, r3
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	3332      	adds	r3, #50	@ 0x32
 8007e98:	4a33      	ldr	r2, [pc, #204]	@ (8007f68 <UART_SetConfig+0x4e4>)
 8007e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ea4:	441c      	add	r4, r3
 8007ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eaa:	2200      	movs	r2, #0
 8007eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007eae:	677a      	str	r2, [r7, #116]	@ 0x74
 8007eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	1891      	adds	r1, r2, r2
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	415b      	adcs	r3, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	1851      	adds	r1, r2, r1
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	4649      	mov	r1, r9
 8007ecc:	414b      	adcs	r3, r1
 8007ece:	607b      	str	r3, [r7, #4]
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007edc:	4659      	mov	r1, fp
 8007ede:	00cb      	lsls	r3, r1, #3
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee6:	4651      	mov	r1, sl
 8007ee8:	00ca      	lsls	r2, r1, #3
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	460a      	mov	r2, r1
 8007efa:	eb42 0303 	adc.w	r3, r2, r3
 8007efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f18:	4649      	mov	r1, r9
 8007f1a:	008b      	lsls	r3, r1, #2
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f22:	4641      	mov	r1, r8
 8007f24:	008a      	lsls	r2, r1, #2
 8007f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f2a:	f7f8 feb5 	bl	8000c98 <__aeabi_uldivmod>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <UART_SetConfig+0x4e4>)
 8007f34:	fba3 1302 	umull	r1, r3, r3, r2
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	2164      	movs	r1, #100	@ 0x64
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	3332      	adds	r3, #50	@ 0x32
 8007f46:	4a08      	ldr	r2, [pc, #32]	@ (8007f68 <UART_SetConfig+0x4e4>)
 8007f48:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4422      	add	r2, r4
 8007f5a:	609a      	str	r2, [r3, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f62:	46bd      	mov	sp, r7
 8007f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f68:	51eb851f 	.word	0x51eb851f

08007f6c <USB_CoreInit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008204:	e106      	b.n	8008414 <UART_SetConfig+0x4d8>
 8008206:	bf00      	nop
 8008208:	40011000 	.word	0x40011000
 800820c:	40011400 	.word	0x40011400
 8008210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008218:	2200      	movs	r2, #0
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800821e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008226:	4642      	mov	r2, r8
 8008228:	464b      	mov	r3, r9
 800822a:	1891      	adds	r1, r2, r2
 800822c:	6239      	str	r1, [r7, #32]
 800822e:	415b      	adcs	r3, r3
 8008230:	627b      	str	r3, [r7, #36]	@ 0x24
 8008232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008236:	4641      	mov	r1, r8
 8008238:	1854      	adds	r4, r2, r1
 800823a:	4649      	mov	r1, r9
 800823c:	eb43 0501 	adc.w	r5, r3, r1
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	00eb      	lsls	r3, r5, #3
 800824a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800824e:	00e2      	lsls	r2, r4, #3
 8008250:	4614      	mov	r4, r2
 8008252:	461d      	mov	r5, r3
 8008254:	4643      	mov	r3, r8
 8008256:	18e3      	adds	r3, r4, r3
 8008258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800825c:	464b      	mov	r3, r9
 800825e:	eb45 0303 	adc.w	r3, r5, r3
 8008262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008282:	4629      	mov	r1, r5
 8008284:	008b      	lsls	r3, r1, #2
 8008286:	4621      	mov	r1, r4
 8008288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800828c:	4621      	mov	r1, r4
 800828e:	008a      	lsls	r2, r1, #2
 8008290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008294:	f7f8 fd00 	bl	8000c98 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4b60      	ldr	r3, [pc, #384]	@ (8008420 <UART_SetConfig+0x4e4>)
 800829e:	fba3 2302 	umull	r2, r3, r3, r2
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	011c      	lsls	r4, r3, #4
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80082b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	1891      	adds	r1, r2, r2
 80082be:	61b9      	str	r1, [r7, #24]
 80082c0:	415b      	adcs	r3, r3
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082c8:	4641      	mov	r1, r8
 80082ca:	1851      	adds	r1, r2, r1
 80082cc:	6139      	str	r1, [r7, #16]
 80082ce:	4649      	mov	r1, r9
 80082d0:	414b      	adcs	r3, r1
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082e0:	4659      	mov	r1, fp
 80082e2:	00cb      	lsls	r3, r1, #3
 80082e4:	4651      	mov	r1, sl
 80082e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ea:	4651      	mov	r1, sl
 80082ec:	00ca      	lsls	r2, r1, #3
 80082ee:	4610      	mov	r0, r2
 80082f0:	4619      	mov	r1, r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	4642      	mov	r2, r8
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082fc:	464b      	mov	r3, r9
 80082fe:	460a      	mov	r2, r1
 8008300:	eb42 0303 	adc.w	r3, r2, r3
 8008304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008320:	4649      	mov	r1, r9
 8008322:	008b      	lsls	r3, r1, #2
 8008324:	4641      	mov	r1, r8
 8008326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800832a:	4641      	mov	r1, r8
 800832c:	008a      	lsls	r2, r1, #2
 800832e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008332:	f7f8 fcb1 	bl	8000c98 <__aeabi_uldivmod>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4611      	mov	r1, r2
 800833c:	4b38      	ldr	r3, [pc, #224]	@ (8008420 <UART_SetConfig+0x4e4>)
 800833e:	fba3 2301 	umull	r2, r3, r3, r1
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	2264      	movs	r2, #100	@ 0x64
 8008346:	fb02 f303 	mul.w	r3, r2, r3
 800834a:	1acb      	subs	r3, r1, r3
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	3332      	adds	r3, #50	@ 0x32
 8008350:	4a33      	ldr	r2, [pc, #204]	@ (8008420 <UART_SetConfig+0x4e4>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800835c:	441c      	add	r4, r3
 800835e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008362:	2200      	movs	r2, #0
 8008364:	673b      	str	r3, [r7, #112]	@ 0x70
 8008366:	677a      	str	r2, [r7, #116]	@ 0x74
 8008368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800836c:	4642      	mov	r2, r8
 800836e:	464b      	mov	r3, r9
 8008370:	1891      	adds	r1, r2, r2
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	415b      	adcs	r3, r3
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800837c:	4641      	mov	r1, r8
 800837e:	1851      	adds	r1, r2, r1
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	4649      	mov	r1, r9
 8008384:	414b      	adcs	r3, r1
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008394:	4659      	mov	r1, fp
 8008396:	00cb      	lsls	r3, r1, #3
 8008398:	4651      	mov	r1, sl
 800839a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800839e:	4651      	mov	r1, sl
 80083a0:	00ca      	lsls	r2, r1, #3
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	4642      	mov	r2, r8
 80083aa:	189b      	adds	r3, r3, r2
 80083ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083ae:	464b      	mov	r3, r9
 80083b0:	460a      	mov	r2, r1
 80083b2:	eb42 0303 	adc.w	r3, r2, r3
 80083b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80083c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80083d0:	4649      	mov	r1, r9
 80083d2:	008b      	lsls	r3, r1, #2
 80083d4:	4641      	mov	r1, r8
 80083d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083da:	4641      	mov	r1, r8
 80083dc:	008a      	lsls	r2, r1, #2
 80083de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083e2:	f7f8 fc59 	bl	8000c98 <__aeabi_uldivmod>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <UART_SetConfig+0x4e4>)
 80083ec:	fba3 1302 	umull	r1, r3, r3, r2
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	2164      	movs	r1, #100	@ 0x64
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	3332      	adds	r3, #50	@ 0x32
 80083fe:	4a08      	ldr	r2, [pc, #32]	@ (8008420 <UART_SetConfig+0x4e4>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4422      	add	r2, r4
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800841a:	46bd      	mov	sp, r7
 800841c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008420:	51eb851f 	.word	0x51eb851f

08008424 <USB_CoreInit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	f107 001c 	add.w	r0, r7, #28
 8007f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d123      	bne.n	8007fce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60da      	str	r2, [r3, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008424:	b084      	sub	sp, #16
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	f107 001c 	add.w	r0, r7, #28
 8008432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800843a:	2b01      	cmp	r3, #1
 800843c:	d123      	bne.n	8008486 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800846a:	2b01      	cmp	r3, #1
 800846c:	d105      	bne.n	800847a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	60da      	str	r2, [r3, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
<<<<<<< HEAD
<<<<<<< HEAD
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fae2 	bl	800958c <USB_CoreReset>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e01b      	b.n	8008006 <USB_CoreInit+0x9a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fae8 	bl	8009a50 <USB_CoreReset>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
 8008484:	e01b      	b.n	80084be <USB_CoreInit+0x9a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
<<<<<<< HEAD
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 fad6 	bl	800958c <USB_CoreReset>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fe4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ff8:	e005      	b.n	8008006 <USB_CoreInit+0x9a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fadc 	bl	8009a50 <USB_CoreReset>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800849c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d106      	bne.n	80084b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80084b0:	e005      	b.n	80084be <USB_CoreInit+0x9a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
<<<<<<< HEAD
<<<<<<< HEAD
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	639a      	str	r2, [r3, #56]	@ 0x38
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  if (cfg.dma_enable == 1U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008006:	7fbb      	ldrb	r3, [r7, #30]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d10b      	bne.n	8008024 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f043 0206 	orr.w	r2, r3, #6
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f043 0220 	orr.w	r2, r3, #32
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008030:	b004      	add	sp, #16
 8008032:	4770      	bx	lr

08008034 <USB_SetTurnaroundTime>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80084be:	7fbb      	ldrb	r3, [r7, #30]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d10b      	bne.n	80084dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f043 0206 	orr.w	r2, r3, #6
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f043 0220 	orr.w	r2, r3, #32
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084e8:	b004      	add	sp, #16
 80084ea:	4770      	bx	lr

080084ec <USB_SetTurnaroundTime>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	71fb      	strb	r3, [r7, #7]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	71fb      	strb	r3, [r7, #7]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
<<<<<<< HEAD
<<<<<<< HEAD
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d165      	bne.n	8008114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4a41      	ldr	r2, [pc, #260]	@ (8008150 <USB_SetTurnaroundTime+0x11c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d906      	bls.n	800805e <USB_SetTurnaroundTime+0x2a>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4a40      	ldr	r2, [pc, #256]	@ (8008154 <USB_SetTurnaroundTime+0x120>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d202      	bcs.n	800805e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008058:	230f      	movs	r3, #15
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e062      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4a3c      	ldr	r2, [pc, #240]	@ (8008154 <USB_SetTurnaroundTime+0x120>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d306      	bcc.n	8008074 <USB_SetTurnaroundTime+0x40>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4a3b      	ldr	r2, [pc, #236]	@ (8008158 <USB_SetTurnaroundTime+0x124>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d202      	bcs.n	8008074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800806e:	230e      	movs	r3, #14
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	e057      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4a38      	ldr	r2, [pc, #224]	@ (8008158 <USB_SetTurnaroundTime+0x124>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d306      	bcc.n	800808a <USB_SetTurnaroundTime+0x56>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a37      	ldr	r2, [pc, #220]	@ (800815c <USB_SetTurnaroundTime+0x128>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d202      	bcs.n	800808a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008084:	230d      	movs	r3, #13
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e04c      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4a33      	ldr	r2, [pc, #204]	@ (800815c <USB_SetTurnaroundTime+0x128>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d306      	bcc.n	80080a0 <USB_SetTurnaroundTime+0x6c>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a32      	ldr	r2, [pc, #200]	@ (8008160 <USB_SetTurnaroundTime+0x12c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d802      	bhi.n	80080a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800809a:	230c      	movs	r3, #12
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e041      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4a2f      	ldr	r2, [pc, #188]	@ (8008160 <USB_SetTurnaroundTime+0x12c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d906      	bls.n	80080b6 <USB_SetTurnaroundTime+0x82>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008164 <USB_SetTurnaroundTime+0x130>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d802      	bhi.n	80080b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080b0:	230b      	movs	r3, #11
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e036      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a2a      	ldr	r2, [pc, #168]	@ (8008164 <USB_SetTurnaroundTime+0x130>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d906      	bls.n	80080cc <USB_SetTurnaroundTime+0x98>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4a29      	ldr	r2, [pc, #164]	@ (8008168 <USB_SetTurnaroundTime+0x134>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d802      	bhi.n	80080cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080c6:	230a      	movs	r3, #10
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e02b      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a26      	ldr	r2, [pc, #152]	@ (8008168 <USB_SetTurnaroundTime+0x134>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d906      	bls.n	80080e2 <USB_SetTurnaroundTime+0xae>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a25      	ldr	r2, [pc, #148]	@ (800816c <USB_SetTurnaroundTime+0x138>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d202      	bcs.n	80080e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080dc:	2309      	movs	r3, #9
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e020      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4a21      	ldr	r2, [pc, #132]	@ (800816c <USB_SetTurnaroundTime+0x138>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d306      	bcc.n	80080f8 <USB_SetTurnaroundTime+0xc4>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4a20      	ldr	r2, [pc, #128]	@ (8008170 <USB_SetTurnaroundTime+0x13c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d802      	bhi.n	80080f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080f2:	2308      	movs	r3, #8
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e015      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <USB_SetTurnaroundTime+0x13c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d906      	bls.n	800810e <USB_SetTurnaroundTime+0xda>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4a1c      	ldr	r2, [pc, #112]	@ (8008174 <USB_SetTurnaroundTime+0x140>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d202      	bcs.n	800810e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008108:	2307      	movs	r3, #7
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e00a      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d165      	bne.n	80085cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4a41      	ldr	r2, [pc, #260]	@ (8008608 <USB_SetTurnaroundTime+0x11c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d906      	bls.n	8008516 <USB_SetTurnaroundTime+0x2a>
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4a40      	ldr	r2, [pc, #256]	@ (800860c <USB_SetTurnaroundTime+0x120>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d202      	bcs.n	8008516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008510:	230f      	movs	r3, #15
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	e062      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4a3c      	ldr	r2, [pc, #240]	@ (800860c <USB_SetTurnaroundTime+0x120>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d306      	bcc.n	800852c <USB_SetTurnaroundTime+0x40>
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4a3b      	ldr	r2, [pc, #236]	@ (8008610 <USB_SetTurnaroundTime+0x124>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d202      	bcs.n	800852c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008526:	230e      	movs	r3, #14
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	e057      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4a38      	ldr	r2, [pc, #224]	@ (8008610 <USB_SetTurnaroundTime+0x124>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d306      	bcc.n	8008542 <USB_SetTurnaroundTime+0x56>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4a37      	ldr	r2, [pc, #220]	@ (8008614 <USB_SetTurnaroundTime+0x128>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d202      	bcs.n	8008542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800853c:	230d      	movs	r3, #13
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e04c      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4a33      	ldr	r2, [pc, #204]	@ (8008614 <USB_SetTurnaroundTime+0x128>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d306      	bcc.n	8008558 <USB_SetTurnaroundTime+0x6c>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4a32      	ldr	r2, [pc, #200]	@ (8008618 <USB_SetTurnaroundTime+0x12c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d802      	bhi.n	8008558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008552:	230c      	movs	r3, #12
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e041      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4a2f      	ldr	r2, [pc, #188]	@ (8008618 <USB_SetTurnaroundTime+0x12c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d906      	bls.n	800856e <USB_SetTurnaroundTime+0x82>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4a2e      	ldr	r2, [pc, #184]	@ (800861c <USB_SetTurnaroundTime+0x130>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d802      	bhi.n	800856e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008568:	230b      	movs	r3, #11
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	e036      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a2a      	ldr	r2, [pc, #168]	@ (800861c <USB_SetTurnaroundTime+0x130>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d906      	bls.n	8008584 <USB_SetTurnaroundTime+0x98>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4a29      	ldr	r2, [pc, #164]	@ (8008620 <USB_SetTurnaroundTime+0x134>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d802      	bhi.n	8008584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800857e:	230a      	movs	r3, #10
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e02b      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4a26      	ldr	r2, [pc, #152]	@ (8008620 <USB_SetTurnaroundTime+0x134>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d906      	bls.n	800859a <USB_SetTurnaroundTime+0xae>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4a25      	ldr	r2, [pc, #148]	@ (8008624 <USB_SetTurnaroundTime+0x138>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d202      	bcs.n	800859a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008594:	2309      	movs	r3, #9
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e020      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	4a21      	ldr	r2, [pc, #132]	@ (8008624 <USB_SetTurnaroundTime+0x138>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d306      	bcc.n	80085b0 <USB_SetTurnaroundTime+0xc4>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a20      	ldr	r2, [pc, #128]	@ (8008628 <USB_SetTurnaroundTime+0x13c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d802      	bhi.n	80085b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085aa:	2308      	movs	r3, #8
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e015      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008628 <USB_SetTurnaroundTime+0x13c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d906      	bls.n	80085c6 <USB_SetTurnaroundTime+0xda>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4a1c      	ldr	r2, [pc, #112]	@ (800862c <USB_SetTurnaroundTime+0x140>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d202      	bcs.n	80085c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085c0:	2307      	movs	r3, #7
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e00a      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
<<<<<<< HEAD
<<<<<<< HEAD
 800810e:	2306      	movs	r3, #6
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	e007      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800811a:	2309      	movs	r3, #9
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e001      	b.n	8008124 <USB_SetTurnaroundTime+0xf0>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80085c6:	2306      	movs	r3, #6
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e007      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085d2:	2309      	movs	r3, #9
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e001      	b.n	80085dc <USB_SetTurnaroundTime+0xf0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8008120:	2309      	movs	r3, #9
 8008122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	029b      	lsls	r3, r3, #10
 8008138:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	00d8acbf 	.word	0x00d8acbf
 8008154:	00e4e1c0 	.word	0x00e4e1c0
 8008158:	00f42400 	.word	0x00f42400
 800815c:	01067380 	.word	0x01067380
 8008160:	011a499f 	.word	0x011a499f
 8008164:	01312cff 	.word	0x01312cff
 8008168:	014ca43f 	.word	0x014ca43f
 800816c:	016e3600 	.word	0x016e3600
 8008170:	01a6ab1f 	.word	0x01a6ab1f
 8008174:	01e84800 	.word	0x01e84800

08008178 <USB_EnableGlobalInt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80085d8:	2309      	movs	r3, #9
 80085da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	029b      	lsls	r3, r3, #10
 80085f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	00d8acbf 	.word	0x00d8acbf
 800860c:	00e4e1c0 	.word	0x00e4e1c0
 8008610:	00f42400 	.word	0x00f42400
 8008614:	01067380 	.word	0x01067380
 8008618:	011a499f 	.word	0x011a499f
 800861c:	01312cff 	.word	0x01312cff
 8008620:	014ca43f 	.word	0x014ca43f
 8008624:	016e3600 	.word	0x016e3600
 8008628:	01a6ab1f 	.word	0x01a6ab1f
 800862c:	01e84800 	.word	0x01e84800

08008630 <USB_EnableGlobalInt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f043 0201 	orr.w	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_DisableGlobalInt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f043 0201 	orr.w	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_DisableGlobalInt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f023 0201 	bic.w	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USB_SetCurrentMode>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f023 0201 	bic.w	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_SetCurrentMode>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d115      	bne.n	800820a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	60da      	str	r2, [r3, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d115      	bne.n	80086c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
<<<<<<< HEAD
 80081ea:	200a      	movs	r0, #10
 80081ec:	f7f9 fd1a 	bl	8001c24 <HAL_Delay>
      ms += 10U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	330a      	adds	r3, #10
 80081f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 f939 	bl	800946e <USB_GetMode>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d01e      	beq.n	8008240 <USB_SetCurrentMode+0x84>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2bc7      	cmp	r3, #199	@ 0xc7
 8008206:	d9f0      	bls.n	80081ea <USB_SetCurrentMode+0x2e>
 8008208:	e01a      	b.n	8008240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d115      	bne.n	800823c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80086a2:	200a      	movs	r0, #10
 80086a4:	f7f9 fb6a 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	330a      	adds	r3, #10
 80086ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f93f 	bl	8009932 <USB_GetMode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d01e      	beq.n	80086f8 <USB_SetCurrentMode+0x84>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80086be:	d9f0      	bls.n	80086a2 <USB_SetCurrentMode+0x2e>
 80086c0:	e01a      	b.n	80086f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d115      	bne.n	80086f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60da      	str	r2, [r3, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
<<<<<<< HEAD
 800821c:	200a      	movs	r0, #10
 800821e:	f7f9 fd01 	bl	8001c24 <HAL_Delay>
      ms += 10U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	330a      	adds	r3, #10
 8008226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f920 	bl	800946e <USB_GetMode>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <USB_SetCurrentMode+0x84>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2bc7      	cmp	r3, #199	@ 0xc7
 8008238:	d9f0      	bls.n	800821c <USB_SetCurrentMode+0x60>
 800823a:	e001      	b.n	8008240 <USB_SetCurrentMode+0x84>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80086d4:	200a      	movs	r0, #10
 80086d6:	f7f9 fb51 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	330a      	adds	r3, #10
 80086de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 f926 	bl	8009932 <USB_GetMode>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <USB_SetCurrentMode+0x84>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80086f0:	d9f0      	bls.n	80086d4 <USB_SetCurrentMode+0x60>
 80086f2:	e001      	b.n	80086f8 <USB_SetCurrentMode+0x84>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
<<<<<<< HEAD
 800823c:	2301      	movs	r3, #1
 800823e:	e005      	b.n	800824c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2bc8      	cmp	r3, #200	@ 0xc8
 8008244:	d101      	bne.n	800824a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USB_DevInit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80086f4:	2301      	movs	r3, #1
 80086f6:	e005      	b.n	8008704 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80086fc:	d101      	bne.n	8008702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USB_DevInit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008254:	b084      	sub	sp, #16
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	e009      	b.n	8008288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	3340      	adds	r3, #64	@ 0x40
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	2200      	movs	r2, #0
 8008280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	3301      	adds	r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b0e      	cmp	r3, #14
 800828c:	d9f2      	bls.n	8008274 <USB_DevInit+0x20>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800870c:	b084      	sub	sp, #16
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800871a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008726:	2300      	movs	r3, #0
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	e009      	b.n	8008740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3340      	adds	r3, #64	@ 0x40
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	3301      	adds	r3, #1
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b0e      	cmp	r3, #14
 8008744:	d9f2      	bls.n	800872c <USB_DevInit+0x20>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800828e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11c      	bne.n	80082d0 <USB_DevInit+0x7c>
=======
 8008746:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800874a:	2b00      	cmp	r3, #0
 800874c:	d11c      	bne.n	8008788 <USB_DevInit+0x7c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 8008746:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800874a:	2b00      	cmp	r3, #0
 800874c:	d11c      	bne.n	8008788 <USB_DevInit+0x7c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
<<<<<<< HEAD
<<<<<<< HEAD
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082a4:	f043 0302 	orr.w	r3, r3, #2
 80082a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80082ce:	e00b      	b.n	80082e8 <USB_DevInit+0x94>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008766:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	639a      	str	r2, [r3, #56]	@ 0x38
 8008786:	e00b      	b.n	80087a0 <USB_DevInit+0x94>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
<<<<<<< HEAD
<<<<<<< HEAD
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	@ 0x38
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	@ 0x38
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082ee:	461a      	mov	r2, r3
 80082f0:	2300      	movs	r3, #0
 80082f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d10d      	bne.n	8008318 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f968 	bl	80085dc <USB_SetDevSpeed>
 800830c:	e008      	b.n	8008320 <USB_DevInit+0xcc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087a6:	461a      	mov	r2, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10d      	bne.n	80087d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f968 	bl	8008a94 <USB_SetDevSpeed>
 80087c4:	e008      	b.n	80087d8 <USB_DevInit+0xcc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< HEAD
<<<<<<< HEAD
 800830e:	2101      	movs	r1, #1
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f963 	bl	80085dc <USB_SetDevSpeed>
 8008316:	e003      	b.n	8008320 <USB_DevInit+0xcc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80087c6:	2101      	movs	r1, #1
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f963 	bl	8008a94 <USB_SetDevSpeed>
 80087ce:	e003      	b.n	80087d8 <USB_DevInit+0xcc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< HEAD
<<<<<<< HEAD
 8008318:	2103      	movs	r1, #3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f95e 	bl	80085dc <USB_SetDevSpeed>
=======
 80087d0:	2103      	movs	r1, #3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f95e 	bl	8008a94 <USB_SetDevSpeed>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 80087d0:	2103      	movs	r1, #3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f95e 	bl	8008a94 <USB_SetDevSpeed>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< HEAD
<<<<<<< HEAD
 8008320:	2110      	movs	r1, #16
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f8fa 	bl	800851c <USB_FlushTxFifo>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f924 	bl	8008580 <USB_FlushRxFifo>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80087d8:	2110      	movs	r1, #16
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8fa 	bl	80089d4 <USB_FlushTxFifo>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f924 	bl	8008a38 <USB_FlushRxFifo>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	461a      	mov	r2, r3
 800834a:	2300      	movs	r3, #0
 800834c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008354:	461a      	mov	r2, r3
 8008356:	2300      	movs	r3, #0
 8008358:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008360:	461a      	mov	r2, r3
 8008362:	2300      	movs	r3, #0
 8008364:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	e043      	b.n	80083f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800837e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008382:	d118      	bne.n	80083b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008396:	461a      	mov	r2, r3
 8008398:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	e013      	b.n	80083c8 <USB_DevInit+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008800:	461a      	mov	r2, r3
 8008802:	2300      	movs	r3, #0
 8008804:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880c:	461a      	mov	r2, r3
 800880e:	2300      	movs	r3, #0
 8008810:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008818:	461a      	mov	r2, r3
 800881a:	2300      	movs	r3, #0
 800881c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	e043      	b.n	80088ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800883a:	d118      	bne.n	800886e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884e:	461a      	mov	r2, r3
 8008850:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e013      	b.n	8008880 <USB_DevInit+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
<<<<<<< HEAD
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ac:	461a      	mov	r2, r3
 80083ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e008      	b.n	80083c8 <USB_DevInit+0x174>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	461a      	mov	r2, r3
 8008866:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	e008      	b.n	8008880 <USB_DevInit+0x174>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c2:	461a      	mov	r2, r3
 80083c4:	2300      	movs	r3, #0
 80083c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	461a      	mov	r2, r3
 80083d6:	2300      	movs	r3, #0
 80083d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e6:	461a      	mov	r2, r3
 80083e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083f8:	461a      	mov	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d3b5      	bcc.n	800836c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	e043      	b.n	800848e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800841c:	d118      	bne.n	8008450 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008430:	461a      	mov	r2, r3
 8008432:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e013      	b.n	8008462 <USB_DevInit+0x20e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887a:	461a      	mov	r2, r3
 800887c:	2300      	movs	r3, #0
 800887e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888c:	461a      	mov	r2, r3
 800888e:	2300      	movs	r3, #0
 8008890:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088b0:	461a      	mov	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d3b5      	bcc.n	8008824 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	e043      	b.n	8008946 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088d4:	d118      	bne.n	8008908 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e8:	461a      	mov	r2, r3
 80088ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	e013      	b.n	800891a <USB_DevInit+0x20e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
<<<<<<< HEAD
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008446:	461a      	mov	r2, r3
 8008448:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e008      	b.n	8008462 <USB_DevInit+0x20e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088fe:	461a      	mov	r2, r3
 8008900:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	e008      	b.n	800891a <USB_DevInit+0x20e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	2300      	movs	r3, #0
 8008460:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008480:	461a      	mov	r2, r3
 8008482:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3301      	adds	r3, #1
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008492:	461a      	mov	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4293      	cmp	r3, r2
 8008498:	d3b5      	bcc.n	8008406 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f043 0210 	orr.w	r2, r3, #16
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	619a      	str	r2, [r3, #24]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008914:	461a      	mov	r2, r3
 8008916:	2300      	movs	r3, #0
 8008918:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008926:	461a      	mov	r2, r3
 8008928:	2300      	movs	r3, #0
 800892a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800893e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3301      	adds	r3, #1
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800894a:	461a      	mov	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	4293      	cmp	r3, r2
 8008950:	d3b5      	bcc.n	80088be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008964:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008972:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008978:	2b00      	cmp	r3, #0
 800897a:	d105      	bne.n	8008988 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	f043 0210 	orr.w	r2, r3, #16
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	619a      	str	r2, [r3, #24]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< HEAD
<<<<<<< HEAD
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699a      	ldr	r2, [r3, #24]
 80084d4:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <USB_DevInit+0x2c4>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6193      	str	r3, [r2, #24]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	4b10      	ldr	r3, [pc, #64]	@ (80089d0 <USB_DevInit+0x2c4>)
 800898e:	4313      	orrs	r3, r2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6193      	str	r3, [r2, #24]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 80084dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f043 0208 	orr.w	r2, r3, #8
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008500:	f043 0304 	orr.w	r3, r3, #4
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008508:	7dfb      	ldrb	r3, [r7, #23]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008514:	b004      	add	sp, #16
 8008516:	4770      	bx	lr
 8008518:	803c3800 	.word	0x803c3800

0800851c <USB_FlushTxFifo>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008994:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f043 0208 	orr.w	r2, r3, #8
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d107      	bne.n	80089c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089b8:	f043 0304 	orr.w	r3, r3, #4
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089cc:	b004      	add	sp, #16
 80089ce:	4770      	bx	lr
 80089d0:	803c3800 	.word	0x803c3800

080089d4 <USB_FlushTxFifo>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008536:	d901      	bls.n	800853c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e01b      	b.n	8008574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	daf2      	bge.n	800852a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	019b      	lsls	r3, r3, #6
 800854c:	f043 0220 	orr.w	r2, r3, #32
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089ee:	d901      	bls.n	80089f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e01b      	b.n	8008a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	daf2      	bge.n	80089e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	019b      	lsls	r3, r3, #6
 8008a04:	f043 0220 	orr.w	r2, r3, #32
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3301      	adds	r3, #1
 8008558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008560:	d901      	bls.n	8008566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e006      	b.n	8008574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b20      	cmp	r3, #32
 8008570:	d0f0      	beq.n	8008554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_FlushRxFifo>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a18:	d901      	bls.n	8008a1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e006      	b.n	8008a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d0f0      	beq.n	8008a0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USB_FlushRxFifo>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008598:	d901      	bls.n	800859e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e018      	b.n	80085d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	daf2      	bge.n	800858c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2210      	movs	r2, #16
 80085ae:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a50:	d901      	bls.n	8008a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e018      	b.n	8008a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	daf2      	bge.n	8008a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2210      	movs	r2, #16
 8008a66:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085bc:	d901      	bls.n	80085c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e006      	b.n	80085d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b10      	cmp	r3, #16
 80085cc:	d0f0      	beq.n	80085b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USB_SetDevSpeed>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a74:	d901      	bls.n	8008a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e006      	b.n	8008a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	2b10      	cmp	r3, #16
 8008a84:	d0f0      	beq.n	8008a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_SetDevSpeed>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085fc:	4313      	orrs	r3, r2
 80085fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USB_GetDevSpeed>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_GetDevSpeed>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800860e:	b480      	push	{r7}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 0306 	and.w	r3, r3, #6
 8008626:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
 8008632:	e00a      	b.n	800864a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d002      	beq.n	8008640 <USB_GetDevSpeed+0x32>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b06      	cmp	r3, #6
 800863e:	d102      	bne.n	8008646 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008640:	2302      	movs	r3, #2
 8008642:	75fb      	strb	r3, [r7, #23]
 8008644:	e001      	b.n	800864a <USB_GetDevSpeed+0x3c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008ac6:	b480      	push	{r7}
 8008ac8:	b087      	sub	sp, #28
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0306 	and.w	r3, r3, #6
 8008ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	75fb      	strb	r3, [r7, #23]
 8008aea:	e00a      	b.n	8008b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d002      	beq.n	8008af8 <USB_GetDevSpeed+0x32>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	d102      	bne.n	8008afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008af8:	2302      	movs	r3, #2
 8008afa:	75fb      	strb	r3, [r7, #23]
 8008afc:	e001      	b.n	8008b02 <USB_GetDevSpeed+0x3c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    speed = 0xFU;
<<<<<<< HEAD
<<<<<<< HEAD
 8008646:	230f      	movs	r3, #15
 8008648:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
}
 800864c:	4618      	mov	r0, r3
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_ActivateEndpoint>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008afe:	230f      	movs	r3, #15
 8008b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_ActivateEndpoint>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d13a      	bne.n	80086ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867a:	69da      	ldr	r2, [r3, #28]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	2101      	movs	r1, #1
 8008686:	fa01 f303 	lsl.w	r3, r1, r3
 800868a:	b29b      	uxth	r3, r3
 800868c:	68f9      	ldr	r1, [r7, #12]
 800868e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008692:	4313      	orrs	r3, r2
 8008694:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d155      	bne.n	8008758 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086d0:	4313      	orrs	r3, r2
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	0151      	lsls	r1, r2, #5
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	440a      	add	r2, r1
 80086da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	e036      	b.n	8008758 <USB_ActivateEndpoint+0x100>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d13a      	bne.n	8008ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d155      	bne.n	8008c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	059b      	lsls	r3, r3, #22
 8008b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e036      	b.n	8008c10 <USB_ActivateEndpoint+0x100>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
<<<<<<< HEAD
<<<<<<< HEAD
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f0:	69da      	ldr	r2, [r3, #28]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	2101      	movs	r1, #1
 80086fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008708:	4313      	orrs	r3, r2
 800870a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d11a      	bne.n	8008758 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	791b      	ldrb	r3, [r3, #4]
 800873c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800873e:	430b      	orrs	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	440a      	add	r2, r1
 800874a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800874e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008756:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba8:	69da      	ldr	r2, [r3, #28]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d11a      	bne.n	8008c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	791b      	ldrb	r3, [r3, #4]
 8008bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c0e:	6013      	str	r3, [r2, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
	...

08008768 <USB_DeactivateEndpoint>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <USB_DeactivateEndpoint>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d161      	bne.n	8008848 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800879a:	d11f      	bne.n	80087dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	2101      	movs	r1, #1
 80087ee:	fa01 f303 	lsl.w	r3, r1, r3
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	43db      	mvns	r3, r3
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087fc:	4013      	ands	r3, r2
 80087fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	2101      	movs	r1, #1
 8008812:	fa01 f303 	lsl.w	r3, r1, r3
 8008816:	b29b      	uxth	r3, r3
 8008818:	43db      	mvns	r3, r3
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008820:	4013      	ands	r3, r2
 8008822:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	0159      	lsls	r1, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	440b      	add	r3, r1
 800883a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883e:	4619      	mov	r1, r3
 8008840:	4b35      	ldr	r3, [pc, #212]	@ (8008918 <USB_DeactivateEndpoint+0x1b0>)
 8008842:	4013      	ands	r3, r2
 8008844:	600b      	str	r3, [r1, #0]
 8008846:	e060      	b.n	800890a <USB_DeactivateEndpoint+0x1a2>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d161      	bne.n	8008d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c52:	d11f      	bne.n	8008c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 030f 	and.w	r3, r3, #15
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	43db      	mvns	r3, r3
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	2101      	movs	r1, #1
 8008cca:	fa01 f303 	lsl.w	r3, r1, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	0159      	lsls	r1, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <USB_DeactivateEndpoint+0x1b0>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	600b      	str	r3, [r1, #0]
 8008cfe:	e060      	b.n	8008dc2 <USB_DeactivateEndpoint+0x1a2>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
<<<<<<< HEAD
<<<<<<< HEAD
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885e:	d11f      	bne.n	80088a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800887a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800887e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800889a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800889e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	43db      	mvns	r3, r3
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c0:	4013      	ands	r3, r2
 80088c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	2101      	movs	r1, #1
 80088d6:	fa01 f303 	lsl.w	r3, r1, r3
 80088da:	041b      	lsls	r3, r3, #16
 80088dc:	43db      	mvns	r3, r3
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088e4:	4013      	ands	r3, r2
 80088e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	0159      	lsls	r1, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	440b      	add	r3, r1
 80088fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008902:	4619      	mov	r1, r3
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <USB_DeactivateEndpoint+0x1b4>)
 8008906:	4013      	ands	r3, r2
 8008908:	600b      	str	r3, [r1, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d16:	d11f      	bne.n	8008d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 030f 	and.w	r3, r3, #15
 8008d68:	2101      	movs	r1, #1
 8008d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6e:	041b      	lsls	r3, r3, #16
 8008d70:	43db      	mvns	r3, r3
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d78:	4013      	ands	r3, r2
 8008d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	43db      	mvns	r3, r3
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	0159      	lsls	r1, r3, #5
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	440b      	add	r3, r1
 8008db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4b05      	ldr	r3, [pc, #20]	@ (8008dd4 <USB_DeactivateEndpoint+0x1b4>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	600b      	str	r3, [r1, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	ec337800 	.word	0xec337800
 800891c:	eff37800 	.word	0xeff37800

08008920 <USB_EPStartXfer>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	ec337800 	.word	0xec337800
 8008dd4:	eff37800 	.word	0xeff37800

08008dd8 <USB_EPStartXfer>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	@ 0x28
 8008924:	af02      	add	r7, sp, #8
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	61bb      	str	r3, [r7, #24]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	@ 0x28
 8008ddc:	af02      	add	r7, sp, #8
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b01      	cmp	r3, #1
 800893e:	f040 817a 	bne.w	8008c36 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d132      	bne.n	80089b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008964:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008968:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800896c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800898c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089a8:	0cdb      	lsrs	r3, r3, #19
 80089aa:	04db      	lsls	r3, r3, #19
 80089ac:	6113      	str	r3, [r2, #16]
 80089ae:	e092      	b.n	8008ad6 <USB_EPStartXfer+0x1b6>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	f040 817f 	bne.w	80090f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d132      	bne.n	8008e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e60:	0cdb      	lsrs	r3, r3, #19
 8008e62:	04db      	lsls	r3, r3, #19
 8008e64:	6113      	str	r3, [r2, #16]
 8008e66:	e097      	b.n	8008f98 <USB_EPStartXfer+0x1c0>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
<<<<<<< HEAD
<<<<<<< HEAD
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ca:	0cdb      	lsrs	r3, r3, #19
 80089cc:	04db      	lsls	r3, r3, #19
 80089ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11a      	bne.n	8008a30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	691a      	ldr	r2, [r3, #16]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d903      	bls.n	8008a0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a2c:	6113      	str	r3, [r2, #16]
 8008a2e:	e01b      	b.n	8008a68 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a3c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6919      	ldr	r1, [r3, #16]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	440b      	add	r3, r1
 8008a48:	1e59      	subs	r1, r3, #1
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a52:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a54:	4ba2      	ldr	r3, [pc, #648]	@ (8008ce0 <USB_EPStartXfer+0x3c0>)
 8008a56:	400b      	ands	r3, r1
 8008a58:	69b9      	ldr	r1, [r7, #24]
 8008a5a:	0148      	lsls	r0, r1, #5
 8008a5c:	69f9      	ldr	r1, [r7, #28]
 8008a5e:	4401      	add	r1, r0
 8008a60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a64:	4313      	orrs	r3, r2
 8008a66:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a7e:	69b9      	ldr	r1, [r7, #24]
 8008a80:	0148      	lsls	r0, r1, #5
 8008a82:	69f9      	ldr	r1, [r7, #28]
 8008a84:	4401      	add	r1, r0
 8008a86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	791b      	ldrb	r3, [r3, #4]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d11f      	bne.n	8008ad6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008ab4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ad4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d14b      	bne.n	8008b74 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af0:	461a      	mov	r2, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d128      	bne.n	8008b52 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d110      	bne.n	8008b32 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	e00f      	b.n	8008b52 <USB_EPStartXfer+0x232>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e82:	0cdb      	lsrs	r3, r3, #19
 8008e84:	04db      	lsls	r3, r3, #19
 8008e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ea6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008eaa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d11a      	bne.n	8008ee8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d903      	bls.n	8008ec6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ee4:	6113      	str	r3, [r2, #16]
 8008ee6:	e044      	b.n	8008f72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	1e5a      	subs	r2, r3, #1
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	8afb      	ldrh	r3, [r7, #22]
 8008f0e:	04d9      	lsls	r1, r3, #19
 8008f10:	4ba4      	ldr	r3, [pc, #656]	@ (80091a4 <USB_EPStartXfer+0x3cc>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	0148      	lsls	r0, r1, #5
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	4401      	add	r1, r0
 8008f1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f20:	4313      	orrs	r3, r2
 8008f22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	791b      	ldrb	r3, [r3, #4]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d122      	bne.n	8008f72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	8afb      	ldrh	r3, [r7, #22]
 8008f5c:	075b      	lsls	r3, r3, #29
 8008f5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f62:	69b9      	ldr	r1, [r7, #24]
 8008f64:	0148      	lsls	r0, r1, #5
 8008f66:	69f9      	ldr	r1, [r7, #28]
 8008f68:	4401      	add	r1, r0
 8008f6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f88:	69b9      	ldr	r1, [r7, #24]
 8008f8a:	0148      	lsls	r0, r1, #5
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	4401      	add	r1, r0
 8008f90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f94:	4313      	orrs	r3, r2
 8008f96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d14b      	bne.n	8009036 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d128      	bne.n	8009014 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d110      	bne.n	8008ff4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	e00f      	b.n	8009014 <USB_EPStartXfer+0x23c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
<<<<<<< HEAD
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b50:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	0151      	lsls	r1, r2, #5
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	440a      	add	r2, r1
 800900a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800900e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009012:	6013      	str	r3, [r2, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
<<<<<<< HEAD
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e165      	b.n	8008e40 <USB_EPStartXfer+0x520>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	0151      	lsls	r1, r2, #5
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	440a      	add	r2, r1
 800902a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800902e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	e166      	b.n	8009304 <USB_EPStartXfer+0x52c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
<<<<<<< HEAD
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	0151      	lsls	r1, r2, #5
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	440a      	add	r2, r1
 8008b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d015      	beq.n	8008bc8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 814d 	beq.w	8008e40 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbc:	69f9      	ldr	r1, [r7, #28]
 8008bbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bc6:	e13b      	b.n	8008e40 <USB_EPStartXfer+0x520>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009050:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009054:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	791b      	ldrb	r3, [r3, #4]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d015      	beq.n	800908a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 814e 	beq.w	8009304 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	2101      	movs	r1, #1
 800907a:	fa01 f303 	lsl.w	r3, r1, r3
 800907e:	69f9      	ldr	r1, [r7, #28]
 8009080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009084:	4313      	orrs	r3, r2
 8009086:	634b      	str	r3, [r1, #52]	@ 0x34
 8009088:	e13c      	b.n	8009304 <USB_EPStartXfer+0x52c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d110      	bne.n	8008bfa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bf2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e00f      	b.n	8008c1a <USB_EPStartXfer+0x2fa>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d110      	bne.n	80090bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	0151      	lsls	r1, r2, #5
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	440a      	add	r2, r1
 80090b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	e00f      	b.n	80090dc <USB_EPStartXfer+0x304>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
<<<<<<< HEAD
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	68d9      	ldr	r1, [r3, #12]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	b298      	uxth	r0, r3
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f9b8 	bl	8008fa4 <USB_WritePacket>
 8008c34:	e104      	b.n	8008e40 <USB_EPStartXfer+0x520>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	68d9      	ldr	r1, [r3, #12]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	b298      	uxth	r0, r3
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4603      	mov	r3, r0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f9b9 	bl	8009468 <USB_WritePacket>
 80090f6:	e105      	b.n	8009304 <USB_EPStartXfer+0x52c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
<<<<<<< HEAD
<<<<<<< HEAD
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	0151      	lsls	r1, r2, #5
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	440a      	add	r2, r1
 8008c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c50:	0cdb      	lsrs	r3, r3, #19
 8008c52:	04db      	lsls	r3, r3, #19
 8008c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c78:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d131      	bne.n	8008ce4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	0151      	lsls	r1, r2, #5
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	440a      	add	r2, r1
 800910e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009112:	0cdb      	lsrs	r3, r3, #19
 8009114:	04db      	lsls	r3, r3, #19
 8009116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	0151      	lsls	r1, r2, #5
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	440a      	add	r2, r1
 800912e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009132:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009136:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800913a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d132      	bne.n	80091a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
<<<<<<< HEAD
<<<<<<< HEAD
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cae:	69b9      	ldr	r1, [r7, #24]
 8008cb0:	0148      	lsls	r0, r1, #5
 8008cb2:	69f9      	ldr	r1, [r7, #28]
 8008cb4:	4401      	add	r1, r0
 8008cb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cdc:	6113      	str	r3, [r2, #16]
 8008cde:	e061      	b.n	8008da4 <USB_EPStartXfer+0x484>
 8008ce0:	1ff80000 	.word	0x1ff80000
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009170:	69b9      	ldr	r1, [r7, #24]
 8009172:	0148      	lsls	r0, r1, #5
 8009174:	69f9      	ldr	r1, [r7, #28]
 8009176:	4401      	add	r1, r0
 8009178:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800917c:	4313      	orrs	r3, r2
 800917e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	440a      	add	r2, r1
 8009196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800919e:	6113      	str	r3, [r2, #16]
 80091a0:	e062      	b.n	8009268 <USB_EPStartXfer+0x490>
 80091a2:	bf00      	nop
 80091a4:	1ff80000 	.word	0x1ff80000
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      if (ep->xfer_len == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d123      	bne.n	8008d34 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d02:	69b9      	ldr	r1, [r7, #24]
 8008d04:	0148      	lsls	r0, r1, #5
 8008d06:	69f9      	ldr	r1, [r7, #28]
 8008d08:	4401      	add	r1, r0
 8008d0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d30:	6113      	str	r3, [r2, #16]
 8008d32:	e037      	b.n	8008da4 <USB_EPStartXfer+0x484>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d123      	bne.n	80091f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c6:	69b9      	ldr	r1, [r7, #24]
 80091c8:	0148      	lsls	r0, r1, #5
 80091ca:	69f9      	ldr	r1, [r7, #28]
 80091cc:	4401      	add	r1, r0
 80091ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091d2:	4313      	orrs	r3, r2
 80091d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	0151      	lsls	r1, r2, #5
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	440a      	add	r2, r1
 80091ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091f4:	6113      	str	r3, [r2, #16]
 80091f6:	e037      	b.n	8009268 <USB_EPStartXfer+0x490>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
<<<<<<< HEAD
<<<<<<< HEAD
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	1e5a      	subs	r2, r3, #1
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	8afa      	ldrh	r2, [r7, #22]
 8008d50:	fb03 f202 	mul.w	r2, r3, r2
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	8afb      	ldrh	r3, [r7, #22]
 8008d68:	04d9      	lsls	r1, r3, #19
 8008d6a:	4b38      	ldr	r3, [pc, #224]	@ (8008e4c <USB_EPStartXfer+0x52c>)
 8008d6c:	400b      	ands	r3, r1
 8008d6e:	69b9      	ldr	r1, [r7, #24]
 8008d70:	0148      	lsls	r0, r1, #5
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	4401      	add	r1, r0
 8008d76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d94:	69b9      	ldr	r1, [r7, #24]
 8008d96:	0148      	lsls	r0, r1, #5
 8008d98:	69f9      	ldr	r1, [r7, #28]
 8008d9a:	4401      	add	r1, r0
 8008d9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da0:	4313      	orrs	r3, r2
 8008da2:	610b      	str	r3, [r1, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	4413      	add	r3, r2
 8009202:	1e5a      	subs	r2, r3, #1
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	fbb2 f3f3 	udiv	r3, r2, r3
 800920c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	8afa      	ldrh	r2, [r7, #22]
 8009214:	fb03 f202 	mul.w	r2, r3, r2
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009228:	691a      	ldr	r2, [r3, #16]
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	04d9      	lsls	r1, r3, #19
 800922e:	4b38      	ldr	r3, [pc, #224]	@ (8009310 <USB_EPStartXfer+0x538>)
 8009230:	400b      	ands	r3, r1
 8009232:	69b9      	ldr	r1, [r7, #24]
 8009234:	0148      	lsls	r0, r1, #5
 8009236:	69f9      	ldr	r1, [r7, #28]
 8009238:	4401      	add	r1, r0
 800923a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800923e:	4313      	orrs	r3, r2
 8009240:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009258:	69b9      	ldr	r1, [r7, #24]
 800925a:	0148      	lsls	r0, r1, #5
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	4401      	add	r1, r0
 8009260:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009264:	4313      	orrs	r3, r2
 8009266:	610b      	str	r3, [r1, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }

    if (dma == 1U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d10d      	bne.n	8008dc6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	68d9      	ldr	r1, [r3, #12]
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	615a      	str	r2, [r3, #20]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d10d      	bne.n	800928a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	68d9      	ldr	r1, [r3, #12]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	460a      	mov	r2, r1
 8009288:	615a      	str	r2, [r3, #20]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }

    if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
<<<<<<< HEAD
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d128      	bne.n	8008e20 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d110      	bne.n	8008e00 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	0151      	lsls	r1, r2, #5
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	440a      	add	r2, r1
 8008df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	e00f      	b.n	8008e20 <USB_EPStartXfer+0x500>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	791b      	ldrb	r3, [r3, #4]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d128      	bne.n	80092e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d110      	bne.n	80092c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	e00f      	b.n	80092e4 <USB_EPStartXfer+0x50c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
<<<<<<< HEAD
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e1e:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e2:	6013      	str	r3, [r2, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
<<<<<<< HEAD
<<<<<<< HEAD
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	1ff80000 	.word	0x1ff80000

08008e50 <USB_EPStopXfer>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3720      	adds	r7, #32
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	1ff80000 	.word	0x1ff80000

08009314 <USB_EPStopXfer>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d14a      	bne.n	8008f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e86:	f040 8086 	bne.w	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ed0:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d14a      	bne.n	80093c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800934a:	f040 8086 	bne.w	800945a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	440a      	add	r2, r1
 8009368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800936c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009370:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009394:	6013      	str	r3, [r2, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      do
      {
        count++;
<<<<<<< HEAD
<<<<<<< HEAD
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d902      	bls.n	8008ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee6:	e056      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f00:	d0e7      	beq.n	8008ed2 <USB_EPStopXfer+0x82>
 8008f02:	e048      	b.n	8008f96 <USB_EPStopXfer+0x146>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d902      	bls.n	80093ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
          break;
 80093aa:	e056      	b.n	800945a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c4:	d0e7      	beq.n	8009396 <USB_EPStopXfer+0x82>
 80093c6:	e048      	b.n	800945a <USB_EPStopXfer+0x146>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
<<<<<<< HEAD
<<<<<<< HEAD
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f1c:	d13b      	bne.n	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f64:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093e0:	d13b      	bne.n	800945a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	7812      	ldrb	r2, [r2, #0]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009404:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009428:	6013      	str	r3, [r2, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

      do
      {
        count++;
<<<<<<< HEAD
<<<<<<< HEAD
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d902      	bls.n	8008f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7a:	e00c      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f94:	d0e7      	beq.n	8008f66 <USB_EPStopXfer+0x116>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009436:	4293      	cmp	r3, r2
 8009438:	d902      	bls.n	8009440 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	75fb      	strb	r3, [r7, #23]
          break;
 800943e:	e00c      	b.n	800945a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009458:	d0e7      	beq.n	800942a <USB_EPStopXfer+0x116>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  return ret;
<<<<<<< HEAD
<<<<<<< HEAD
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_WritePacket>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800945a:	7dfb      	ldrb	r3, [r7, #23]
}
 800945c:	4618      	mov	r0, r3
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_WritePacket>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	@ 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	71fb      	strb	r3, [r7, #7]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	61fb      	str	r3, [r7, #28]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009468:	b480      	push	{r7}
 800946a:	b089      	sub	sp, #36	@ 0x24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	460b      	mov	r3, r1
 8009478:	71fb      	strb	r3, [r7, #7]
 800947a:	4613      	mov	r3, r2
 800947c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	61fb      	str	r3, [r7, #28]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 8008fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d123      	bne.n	8009012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008fca:	88bb      	ldrh	r3, [r7, #4]
 8008fcc:	3303      	adds	r3, #3
 8008fce:	089b      	lsrs	r3, r3, #2
 8008fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e018      	b.n	800900a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	031a      	lsls	r2, r3, #12
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	3301      	adds	r3, #1
 8009002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3301      	adds	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3e2      	bcc.n	8008fd8 <USB_WritePacket+0x34>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d123      	bne.n	80094d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800948e:	88bb      	ldrh	r3, [r7, #4]
 8009490:	3303      	adds	r3, #3
 8009492:	089b      	lsrs	r3, r3, #2
 8009494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009496:	2300      	movs	r3, #0
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	e018      	b.n	80094ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	031a      	lsls	r2, r3, #12
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094a8:	461a      	mov	r2, r3
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	3301      	adds	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3301      	adds	r3, #1
 80094ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	3301      	adds	r3, #1
 80094c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	3301      	adds	r3, #1
 80094c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	3301      	adds	r3, #1
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d3e2      	bcc.n	800949c <USB_WritePacket+0x34>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3724      	adds	r7, #36	@ 0x24
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USB_ReadPacket>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3724      	adds	r7, #36	@ 0x24
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_ReadPacket>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009020:	b480      	push	{r7}
 8009022:	b08b      	sub	sp, #44	@ 0x2c
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	089b      	lsrs	r3, r3, #2
 800903a:	b29b      	uxth	r3, r3
 800903c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009046:	2300      	movs	r3, #0
 8009048:	623b      	str	r3, [r7, #32]
 800904a:	e014      	b.n	8009076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	601a      	str	r2, [r3, #0]
    pDest++;
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	3301      	adds	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	3301      	adds	r3, #1
 8009062:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	3301      	adds	r3, #1
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	3301      	adds	r3, #1
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	3301      	adds	r3, #1
 8009074:	623b      	str	r3, [r7, #32]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	429a      	cmp	r2, r3
 800907c:	d3e6      	bcc.n	800904c <USB_ReadPacket+0x2c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80094e4:	b480      	push	{r7}
 80094e6:	b08b      	sub	sp, #44	@ 0x2c
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	089b      	lsrs	r3, r3, #2
 80094fe:	b29b      	uxth	r3, r3
 8009500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800950a:	2300      	movs	r3, #0
 800950c:	623b      	str	r3, [r7, #32]
 800950e:	e014      	b.n	800953a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	601a      	str	r2, [r3, #0]
    pDest++;
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	3301      	adds	r3, #1
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	3301      	adds	r3, #1
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952a:	3301      	adds	r3, #1
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	3301      	adds	r3, #1
 8009532:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	3301      	adds	r3, #1
 8009538:	623b      	str	r3, [r7, #32]
 800953a:	6a3a      	ldr	r2, [r7, #32]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	429a      	cmp	r2, r3
 8009540:	d3e6      	bcc.n	8009510 <USB_ReadPacket+0x2c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800907e:	8bfb      	ldrh	r3, [r7, #30]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800908e:	461a      	mov	r2, r3
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009542:	8bfb      	ldrh	r3, [r7, #30]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01e      	beq.n	8009586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009552:	461a      	mov	r2, r3
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
<<<<<<< HEAD
<<<<<<< HEAD
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	701a      	strb	r2, [r3, #0]
      i++;
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	3301      	adds	r3, #1
 80090ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	3301      	adds	r3, #1
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090b6:	8bfb      	ldrh	r3, [r7, #30]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090bc:	8bfb      	ldrh	r3, [r7, #30]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1ea      	bne.n	8009098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	372c      	adds	r7, #44	@ 0x2c
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_EPSetStall>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	701a      	strb	r2, [r3, #0]
      i++;
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	3301      	adds	r3, #1
 8009572:	623b      	str	r3, [r7, #32]
      pDest++;
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	3301      	adds	r3, #1
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800957a:	8bfb      	ldrh	r3, [r7, #30]
 800957c:	3b01      	subs	r3, #1
 800957e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009580:	8bfb      	ldrh	r3, [r7, #30]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1ea      	bne.n	800955c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009588:	4618      	mov	r0, r3
 800958a:	372c      	adds	r7, #44	@ 0x2c
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USB_EPSetStall>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d12c      	bne.n	8009146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	db12      	blt.n	8009124 <USB_EPSetStall+0x54>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00f      	beq.n	8009124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800911e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	440a      	add	r2, r1
 800913a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800913e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	e02b      	b.n	800919e <USB_EPSetStall+0xce>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d12c      	bne.n	800960a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	db12      	blt.n	80095e8 <USB_EPSetStall+0x54>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00f      	beq.n	80095e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	e02b      	b.n	8009662 <USB_EPSetStall+0xce>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
<<<<<<< HEAD
<<<<<<< HEAD
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	db12      	blt.n	800917e <USB_EPSetStall+0xae>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	0151      	lsls	r1, r2, #5
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	440a      	add	r2, r1
 8009174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009178:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800917c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	440a      	add	r2, r1
 8009194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800919c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_EPClearStall>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	db12      	blt.n	8009642 <USB_EPSetStall+0xae>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00f      	beq.n	8009642 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	440a      	add	r2, r1
 8009638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800963c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009640:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	0151      	lsls	r1, r2, #5
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	440a      	add	r2, r1
 8009658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800965c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USB_EPClearStall>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d128      	bne.n	800921a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d003      	beq.n	80091f8 <USB_EPClearStall+0x4c>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	791b      	ldrb	r3, [r3, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d138      	bne.n	800926a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	440a      	add	r2, r1
 800920e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	e027      	b.n	800926a <USB_EPClearStall+0xbe>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d128      	bne.n	80096de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d003      	beq.n	80096bc <USB_EPClearStall+0x4c>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	791b      	ldrb	r3, [r3, #4]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d138      	bne.n	800972e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	e027      	b.n	800972e <USB_EPClearStall+0xbe>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
<<<<<<< HEAD
<<<<<<< HEAD
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	440a      	add	r2, r1
 8009230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009234:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d003      	beq.n	800924a <USB_EPClearStall+0x9e>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d10f      	bne.n	800926a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_SetDevAddress>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	791b      	ldrb	r3, [r3, #4]
 8009702:	2b03      	cmp	r3, #3
 8009704:	d003      	beq.n	800970e <USB_EPClearStall+0x9e>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	791b      	ldrb	r3, [r3, #4]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d10f      	bne.n	800972e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800972c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_SetDevAddress>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009296:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800929a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b2:	4313      	orrs	r3, r2
 80092b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_DevConnect>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800975a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800975e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009770:	68f9      	ldr	r1, [r7, #12]
 8009772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009776:	4313      	orrs	r3, r2
 8009778:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_DevConnect>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092f2:	f023 0302 	bic.w	r3, r3, #2
 80092f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USB_DevDisconnect>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097a2:	f023 0303 	bic.w	r3, r3, #3
 80097a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097b6:	f023 0302 	bic.w	r3, r3, #2
 80097ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USB_DevDisconnect>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009334:	f043 0302 	orr.w	r3, r3, #2
 8009338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_ReadInterrupts>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80097ca:	b480      	push	{r7}
 80097cc:	b085      	sub	sp, #20
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097f8:	f043 0302 	orr.w	r3, r3, #2
 80097fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_ReadInterrupts>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009360:	68fb      	ldr	r3, [r7, #12]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USB_ReadDevAllOutEpInterrupt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4013      	ands	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009824:	68fb      	ldr	r3, [r7, #12]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USB_ReadDevAllOutEpInterrupt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4013      	ands	r3, r2
 8009390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	0c1b      	lsrs	r3, r3, #16
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USB_ReadDevAllInEpInterrupt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4013      	ands	r3, r2
 8009854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	0c1b      	lsrs	r3, r3, #16
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <USB_ReadDevAllInEpInterrupt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	4013      	ands	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	b29b      	uxth	r3, r3
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_ReadDevOutEPInterrupt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009866:	b480      	push	{r7}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	4013      	ands	r3, r2
 8009888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	b29b      	uxth	r3, r3
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <USB_ReadDevOutEPInterrupt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009404:	68bb      	ldr	r3, [r7, #8]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_ReadDevInEPInterrupt>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	4013      	ands	r3, r2
 80098c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098c8:	68bb      	ldr	r3, [r7, #8]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USB_ReadDevInEPInterrupt>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	617b      	str	r3, [r7, #20]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80098d6:	b480      	push	{r7}
 80098d8:	b087      	sub	sp, #28
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	617b      	str	r3, [r7, #20]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
<<<<<<< HEAD
<<<<<<< HEAD
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	fa22 f303 	lsr.w	r3, r2, r3
 8009442:	01db      	lsls	r3, r3, #7
 8009444:	b2db      	uxtb	r3, r3
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4013      	ands	r3, r2
 800945e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009460:	68bb      	ldr	r3, [r7, #8]
}
 8009462:	4618      	mov	r0, r3
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_GetMode>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	fa22 f303 	lsr.w	r3, r2, r3
 8009906:	01db      	lsls	r3, r3, #7
 8009908:	b2db      	uxtb	r3, r3
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4013      	ands	r3, r2
 8009922:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009924:	68bb      	ldr	r3, [r7, #8]
}
 8009926:	4618      	mov	r0, r3
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USB_GetMode>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f003 0301 	and.w	r3, r3, #1
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_ActivateSetup>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	f003 0301 	and.w	r3, r3, #1
}
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <USB_ActivateSetup>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_EP0_OutStart>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800994e:	b480      	push	{r7}
 8009950:	b085      	sub	sp, #20
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009968:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_EP0_OutStart>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	460b      	mov	r3, r1
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	333c      	adds	r3, #60	@ 0x3c
 80094e6:	3304      	adds	r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4a26      	ldr	r2, [pc, #152]	@ (8009588 <USB_EP0_OutStart+0xb8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d90a      	bls.n	800950a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009504:	d101      	bne.n	800950a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e037      	b.n	800957a <USB_EP0_OutStart+0xaa>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	460b      	mov	r3, r1
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	333c      	adds	r3, #60	@ 0x3c
 80099aa:	3304      	adds	r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	4a26      	ldr	r2, [pc, #152]	@ (8009a4c <USB_EP0_OutStart+0xb8>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d90a      	bls.n	80099ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c8:	d101      	bne.n	80099ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e037      	b.n	8009a3e <USB_EP0_OutStart+0xaa>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009538:	f043 0318 	orr.w	r3, r3, #24
 800953c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009550:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009552:	7afb      	ldrb	r3, [r7, #11]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10f      	bne.n	8009578 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009572:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	4f54300a 	.word	0x4f54300a

0800958c <USB_CoreReset>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d4:	461a      	mov	r2, r3
 80099d6:	2300      	movs	r3, #0
 80099d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099fc:	f043 0318 	orr.w	r3, r3, #24
 8009a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a16:	7afb      	ldrb	r3, [r7, #11]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10f      	bne.n	8009a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	4f54300a 	.word	0x4f54300a

08009a50 <USB_CoreReset>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a4:	d901      	bls.n	80095aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e01b      	b.n	80095e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	daf2      	bge.n	8009598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	611a      	str	r2, [r3, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a68:	d901      	bls.n	8009a6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e01b      	b.n	8009aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	daf2      	bge.n	8009a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f043 0201 	orr.w	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  do
  {
    count++;
<<<<<<< HEAD
<<<<<<< HEAD
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095ce:	d901      	bls.n	80095d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e006      	b.n	80095e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d0f0      	beq.n	80095c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
	...

080095f0 <USBD_CDC_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a92:	d901      	bls.n	8009a98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e006      	b.n	8009aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d0f0      	beq.n	8009a86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <USBD_CDC_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< HEAD
<<<<<<< HEAD
 80095fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009600:	f002 fc22 	bl	800be48 <USBD_static_malloc>
 8009604:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d109      	bne.n	8009620 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32b0      	adds	r2, #176	@ 0xb0
 8009616:	2100      	movs	r1, #0
 8009618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800961c:	2302      	movs	r3, #2
 800961e:	e0d4      	b.n	80097ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009620:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009624:	2100      	movs	r1, #0
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f003 fbe3 	bl	800cdf2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	32b0      	adds	r2, #176	@ 0xb0
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	32b0      	adds	r2, #176	@ 0xb0
 8009646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009ac0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ac4:	f002 fc94 	bl	800c3f0 <USBD_static_malloc>
 8009ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32b0      	adds	r2, #176	@ 0xb0
 8009ada:	2100      	movs	r1, #0
 8009adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e0d4      	b.n	8009c8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ae4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ae8:	2100      	movs	r1, #0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f003 fc55 	bl	800d39a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	32b0      	adds	r2, #176	@ 0xb0
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	@ 0xb0
 8009b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
<<<<<<< HEAD
<<<<<<< HEAD
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d138      	bne.n	80096ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009658:	4b5e      	ldr	r3, [pc, #376]	@ (80097d4 <USBD_CDC_Init+0x1e4>)
 800965a:	7819      	ldrb	r1, [r3, #0]
 800965c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009660:	2202      	movs	r2, #2
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f002 facd 	bl	800bc02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009668:	4b5a      	ldr	r3, [pc, #360]	@ (80097d4 <USBD_CDC_Init+0x1e4>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3324      	adds	r3, #36	@ 0x24
 800967e:	2201      	movs	r2, #1
 8009680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009682:	4b55      	ldr	r3, [pc, #340]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 8009684:	7819      	ldrb	r1, [r3, #0]
 8009686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800968a:	2202      	movs	r2, #2
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 fab8 	bl	800bc02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009692:	4b51      	ldr	r3, [pc, #324]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 020f 	and.w	r2, r3, #15
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	440b      	add	r3, r1
 80096a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096aa:	2201      	movs	r2, #1
 80096ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096ae:	4b4b      	ldr	r3, [pc, #300]	@ (80097dc <USBD_CDC_Init+0x1ec>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f003 020f 	and.w	r2, r3, #15
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	3326      	adds	r3, #38	@ 0x26
 80096c4:	2210      	movs	r2, #16
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	e035      	b.n	8009736 <USBD_CDC_Init+0x146>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7c1b      	ldrb	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d138      	bne.n	8009b8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b1e:	7819      	ldrb	r1, [r3, #0]
 8009b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b24:	2202      	movs	r2, #2
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f002 fb3f 	bl	800c1aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3324      	adds	r3, #36	@ 0x24
 8009b42:	2201      	movs	r2, #1
 8009b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b46:	4b55      	ldr	r3, [pc, #340]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b4e:	2202      	movs	r2, #2
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 fb2a 	bl	800c1aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b56:	4b51      	ldr	r3, [pc, #324]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 020f 	and.w	r2, r3, #15
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b6e:	2201      	movs	r2, #1
 8009b70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b72:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	3326      	adds	r3, #38	@ 0x26
 8009b88:	2210      	movs	r2, #16
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	e035      	b.n	8009bfa <USBD_CDC_Init+0x146>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
<<<<<<< HEAD
 80096ca:	4b42      	ldr	r3, [pc, #264]	@ (80097d4 <USBD_CDC_Init+0x1e4>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	2340      	movs	r3, #64	@ 0x40
 80096d0:	2202      	movs	r2, #2
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f002 fa95 	bl	800bc02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096d8:	4b3e      	ldr	r3, [pc, #248]	@ (80097d4 <USBD_CDC_Init+0x1e4>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f003 020f 	and.w	r2, r3, #15
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3324      	adds	r3, #36	@ 0x24
 80096ee:	2201      	movs	r2, #1
 80096f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096f2:	4b39      	ldr	r3, [pc, #228]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 80096f4:	7819      	ldrb	r1, [r3, #0]
 80096f6:	2340      	movs	r3, #64	@ 0x40
 80096f8:	2202      	movs	r2, #2
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f002 fa81 	bl	800bc02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009700:	4b35      	ldr	r3, [pc, #212]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 020f 	and.w	r2, r3, #15
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009718:	2201      	movs	r2, #1
 800971a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800971c:	4b2f      	ldr	r3, [pc, #188]	@ (80097dc <USBD_CDC_Init+0x1ec>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	3326      	adds	r3, #38	@ 0x26
 8009732:	2210      	movs	r2, #16
 8009734:	801a      	strh	r2, [r3, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009b8e:	4b42      	ldr	r3, [pc, #264]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b90:	7819      	ldrb	r1, [r3, #0]
 8009b92:	2340      	movs	r3, #64	@ 0x40
 8009b94:	2202      	movs	r2, #2
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f002 fb07 	bl	800c1aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8009c98 <USBD_CDC_Init+0x1e4>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	3324      	adds	r3, #36	@ 0x24
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bb6:	4b39      	ldr	r3, [pc, #228]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009bb8:	7819      	ldrb	r1, [r3, #0]
 8009bba:	2340      	movs	r3, #64	@ 0x40
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f002 faf3 	bl	800c1aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bc4:	4b35      	ldr	r3, [pc, #212]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	f003 020f 	and.w	r2, r3, #15
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bdc:	2201      	movs	r2, #1
 8009bde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009be0:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	3326      	adds	r3, #38	@ 0x26
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	801a      	strh	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< HEAD
<<<<<<< HEAD
 8009736:	4b29      	ldr	r3, [pc, #164]	@ (80097dc <USBD_CDC_Init+0x1ec>)
 8009738:	7819      	ldrb	r1, [r3, #0]
 800973a:	2308      	movs	r3, #8
 800973c:	2203      	movs	r2, #3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f002 fa5f 	bl	800bc02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009744:	4b25      	ldr	r3, [pc, #148]	@ (80097dc <USBD_CDC_Init+0x1ec>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3324      	adds	r3, #36	@ 0x24
 800975a:	2201      	movs	r2, #1
 800975c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	33b0      	adds	r3, #176	@ 0xb0
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009794:	2302      	movs	r3, #2
 8009796:	e018      	b.n	80097ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7c1b      	ldrb	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097a0:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 80097a2:	7819      	ldrb	r1, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f002 fb16 	bl	800bde0 <USBD_LL_PrepareReceive>
 80097b4:	e008      	b.n	80097c8 <USBD_CDC_Init+0x1d8>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009bfa:	4b29      	ldr	r3, [pc, #164]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009bfc:	7819      	ldrb	r1, [r3, #0]
 8009bfe:	2308      	movs	r3, #8
 8009c00:	2203      	movs	r2, #3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fad1 	bl	800c1aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c08:	4b25      	ldr	r3, [pc, #148]	@ (8009ca0 <USBD_CDC_Init+0x1ec>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 020f 	and.w	r2, r3, #15
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	3324      	adds	r3, #36	@ 0x24
 8009c1e:	2201      	movs	r2, #1
 8009c20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	33b0      	adds	r3, #176	@ 0xb0
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e018      	b.n	8009c8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	7c1b      	ldrb	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c64:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009c66:	7819      	ldrb	r1, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f002 fb88 	bl	800c388 <USBD_LL_PrepareReceive>
 8009c78:	e008      	b.n	8009c8c <USBD_CDC_Init+0x1d8>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< HEAD
<<<<<<< HEAD
 80097b6:	4b08      	ldr	r3, [pc, #32]	@ (80097d8 <USBD_CDC_Init+0x1e8>)
 80097b8:	7819      	ldrb	r1, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097c0:	2340      	movs	r3, #64	@ 0x40
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 fb0c 	bl	800bde0 <USBD_LL_PrepareReceive>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009c7a:	4b08      	ldr	r3, [pc, #32]	@ (8009c9c <USBD_CDC_Init+0x1e8>)
 8009c7c:	7819      	ldrb	r1, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c84:	2340      	movs	r3, #64	@ 0x40
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f002 fb7e 	bl	800c388 <USBD_LL_PrepareReceive>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000097 	.word	0x20000097
 80097d8:	20000098 	.word	0x20000098
 80097dc:	20000099 	.word	0x20000099

080097e0 <USBD_CDC_DeInit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20000097 	.word	0x20000097
 8009c9c:	20000098 	.word	0x20000098
 8009ca0:	20000099 	.word	0x20000099

08009ca4 <USBD_CDC_DeInit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
<<<<<<< HEAD
<<<<<<< HEAD
 80097ec:	4b3a      	ldr	r3, [pc, #232]	@ (80098d8 <USBD_CDC_DeInit+0xf8>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f002 fa2b 	bl	800bc4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097f8:	4b37      	ldr	r3, [pc, #220]	@ (80098d8 <USBD_CDC_DeInit+0xf8>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 020f 	and.w	r2, r3, #15
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	3324      	adds	r3, #36	@ 0x24
 800980e:	2200      	movs	r2, #0
 8009810:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009812:	4b32      	ldr	r3, [pc, #200]	@ (80098dc <USBD_CDC_DeInit+0xfc>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 fa18 	bl	800bc4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800981e:	4b2f      	ldr	r3, [pc, #188]	@ (80098dc <USBD_CDC_DeInit+0xfc>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	f003 020f 	and.w	r2, r3, #15
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009836:	2200      	movs	r2, #0
 8009838:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800983a:	4b29      	ldr	r3, [pc, #164]	@ (80098e0 <USBD_CDC_DeInit+0x100>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f002 fa04 	bl	800bc4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009846:	4b26      	ldr	r3, [pc, #152]	@ (80098e0 <USBD_CDC_DeInit+0x100>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	f003 020f 	and.w	r2, r3, #15
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	3324      	adds	r3, #36	@ 0x24
 800985c:	2200      	movs	r2, #0
 800985e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009860:	4b1f      	ldr	r3, [pc, #124]	@ (80098e0 <USBD_CDC_DeInit+0x100>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	3326      	adds	r3, #38	@ 0x26
 8009876:	2200      	movs	r2, #0
 8009878:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	32b0      	adds	r2, #176	@ 0xb0
 8009884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01f      	beq.n	80098cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	33b0      	adds	r3, #176	@ 0xb0
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	32b0      	adds	r2, #176	@ 0xb0
 80098aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f002 fad8 	bl	800be64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	32b0      	adds	r2, #176	@ 0xb0
 80098be:	2100      	movs	r1, #0
 80098c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000097 	.word	0x20000097
 80098dc:	20000098 	.word	0x20000098
 80098e0:	20000099 	.word	0x20000099

080098e4 <USBD_CDC_Setup>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8009d9c <USBD_CDC_DeInit+0xf8>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fa9d 	bl	800c1f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cbc:	4b37      	ldr	r3, [pc, #220]	@ (8009d9c <USBD_CDC_DeInit+0xf8>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3324      	adds	r3, #36	@ 0x24
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cd6:	4b32      	ldr	r3, [pc, #200]	@ (8009da0 <USBD_CDC_DeInit+0xfc>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f002 fa8a 	bl	800c1f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8009da0 <USBD_CDC_DeInit+0xfc>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 020f 	and.w	r2, r3, #15
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cfe:	4b29      	ldr	r3, [pc, #164]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 fa76 	bl	800c1f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 020f 	and.w	r2, r3, #15
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	3324      	adds	r3, #36	@ 0x24
 8009d20:	2200      	movs	r2, #0
 8009d22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d24:	4b1f      	ldr	r3, [pc, #124]	@ (8009da4 <USBD_CDC_DeInit+0x100>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 020f 	and.w	r2, r3, #15
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	440b      	add	r3, r1
 8009d38:	3326      	adds	r3, #38	@ 0x26
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	32b0      	adds	r2, #176	@ 0xb0
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01f      	beq.n	8009d90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	33b0      	adds	r3, #176	@ 0xb0
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	32b0      	adds	r2, #176	@ 0xb0
 8009d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f002 fb4a 	bl	800c40c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32b0      	adds	r2, #176	@ 0xb0
 8009d82:	2100      	movs	r1, #0
 8009d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000097 	.word	0x20000097
 8009da0:	20000098 	.word	0x20000098
 8009da4:	20000099 	.word	0x20000099

08009da8 <USBD_CDC_Setup>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	32b0      	adds	r2, #176	@ 0xb0
 80098f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	e0bf      	b.n	8009a94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800991c:	2b00      	cmp	r3, #0
 800991e:	d050      	beq.n	80099c2 <USBD_CDC_Setup+0xde>
 8009920:	2b20      	cmp	r3, #32
 8009922:	f040 80af 	bne.w	8009a84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d03a      	beq.n	80099a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b25b      	sxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	da1b      	bge.n	8009970 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	33b0      	adds	r3, #176	@ 0xb0
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800994e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	88d2      	ldrh	r2, [r2, #6]
 8009954:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	88db      	ldrh	r3, [r3, #6]
 800995a:	2b07      	cmp	r3, #7
 800995c:	bf28      	it	cs
 800995e:	2307      	movcs	r3, #7
 8009960:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	89fa      	ldrh	r2, [r7, #14]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fd47 	bl	800b3fc <USBD_CtlSendData>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	32b0      	adds	r2, #176	@ 0xb0
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e0bf      	b.n	8009f58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d050      	beq.n	8009e86 <USBD_CDC_Setup+0xde>
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	f040 80af 	bne.w	8009f48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d03a      	beq.n	8009e68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b25b      	sxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da1b      	bge.n	8009e34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	33b0      	adds	r3, #176	@ 0xb0
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	88d2      	ldrh	r2, [r2, #6]
 8009e18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	bf28      	it	cs
 8009e22:	2307      	movcs	r3, #7
 8009e24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	89fa      	ldrh	r2, [r7, #14]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fd93 	bl	800b958 <USBD_CtlSendData>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800996e:	e090      	b.n	8009a92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	785a      	ldrb	r2, [r3, #1]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	88db      	ldrh	r3, [r3, #6]
 800997e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009980:	d803      	bhi.n	800998a <USBD_CDC_Setup+0xa6>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	e000      	b.n	800998c <USBD_CDC_Setup+0xa8>
 800998a:	2240      	movs	r2, #64	@ 0x40
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009992:	6939      	ldr	r1, [r7, #16]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800999a:	461a      	mov	r2, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 fd59 	bl	800b454 <USBD_CtlPrepareRx>
      break;
 80099a2:	e076      	b.n	8009a92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	33b0      	adds	r3, #176	@ 0xb0
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	7850      	ldrb	r0, [r2, #1]
 80099ba:	2200      	movs	r2, #0
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	4798      	blx	r3
      break;
 80099c0:	e067      	b.n	8009a92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	785b      	ldrb	r3, [r3, #1]
 80099c6:	2b0b      	cmp	r3, #11
 80099c8:	d851      	bhi.n	8009a6e <USBD_CDC_Setup+0x18a>
 80099ca:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <USBD_CDC_Setup+0xec>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	08009a01 	.word	0x08009a01
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009a6f 	.word	0x08009a6f
 80099dc:	08009a6f 	.word	0x08009a6f
 80099e0:	08009a6f 	.word	0x08009a6f
 80099e4:	08009a6f 	.word	0x08009a6f
 80099e8:	08009a6f 	.word	0x08009a6f
 80099ec:	08009a6f 	.word	0x08009a6f
 80099f0:	08009a6f 	.word	0x08009a6f
 80099f4:	08009a6f 	.word	0x08009a6f
 80099f8:	08009a2b 	.word	0x08009a2b
 80099fc:	08009a55 	.word	0x08009a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d107      	bne.n	8009a1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a0c:	f107 030a 	add.w	r3, r7, #10
 8009a10:	2202      	movs	r2, #2
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fcf1 	bl	800b3fc <USBD_CtlSendData>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009e32:	e090      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785a      	ldrb	r2, [r3, #1]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e44:	d803      	bhi.n	8009e4e <USBD_CDC_Setup+0xa6>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	e000      	b.n	8009e50 <USBD_CDC_Setup+0xa8>
 8009e4e:	2240      	movs	r2, #64	@ 0x40
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e56:	6939      	ldr	r1, [r7, #16]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fda5 	bl	800b9b0 <USBD_CtlPrepareRx>
      break;
 8009e66:	e076      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	33b0      	adds	r3, #176	@ 0xb0
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	7850      	ldrb	r0, [r2, #1]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	4798      	blx	r3
      break;
 8009e84:	e067      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b0b      	cmp	r3, #11
 8009e8c:	d851      	bhi.n	8009f32 <USBD_CDC_Setup+0x18a>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <USBD_CDC_Setup+0xec>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ec5 	.word	0x08009ec5
 8009e98:	08009f41 	.word	0x08009f41
 8009e9c:	08009f33 	.word	0x08009f33
 8009ea0:	08009f33 	.word	0x08009f33
 8009ea4:	08009f33 	.word	0x08009f33
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f33 	.word	0x08009f33
 8009eb0:	08009f33 	.word	0x08009f33
 8009eb4:	08009f33 	.word	0x08009f33
 8009eb8:	08009f33 	.word	0x08009f33
 8009ebc:	08009eef 	.word	0x08009eef
 8009ec0:	08009f19 	.word	0x08009f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d107      	bne.n	8009ee0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ed0:	f107 030a 	add.w	r3, r7, #10
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 fd3d 	bl	800b958 <USBD_CtlSendData>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 8009a1a:	e032      	b.n	8009a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fc7b 	bl	800b31a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a24:	2303      	movs	r3, #3
 8009a26:	75fb      	strb	r3, [r7, #23]
          break;
 8009a28:	e02b      	b.n	8009a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d107      	bne.n	8009a46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a36:	f107 030d 	add.w	r3, r7, #13
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 fcdc 	bl	800b3fc <USBD_CtlSendData>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009ede:	e032      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fcbb 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	75fb      	strb	r3, [r7, #23]
          break;
 8009eec:	e02b      	b.n	8009f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d107      	bne.n	8009f0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009efa:	f107 030d 	add.w	r3, r7, #13
 8009efe:	2201      	movs	r2, #1
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fd28 	bl	800b958 <USBD_CtlSendData>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 8009a44:	e01d      	b.n	8009a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 fc66 	bl	800b31a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	75fb      	strb	r3, [r7, #23]
          break;
 8009a52:	e016      	b.n	8009a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d00f      	beq.n	8009a80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 fc59 	bl	800b31a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a6c:	e008      	b.n	8009a80 <USBD_CDC_Setup+0x19c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009f08:	e01d      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fca6 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f12:	2303      	movs	r3, #3
 8009f14:	75fb      	strb	r3, [r7, #23]
          break;
 8009f16:	e016      	b.n	8009f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d00f      	beq.n	8009f44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fc99 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f30:	e008      	b.n	8009f44 <USBD_CDC_Setup+0x19c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
<<<<<<< HEAD
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fc52 	bl	800b31a <USBD_CtlError>
          ret = USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	75fb      	strb	r3, [r7, #23]
          break;
 8009a7a:	e002      	b.n	8009a82 <USBD_CDC_Setup+0x19e>
          break;
 8009a7c:	bf00      	nop
 8009a7e:	e008      	b.n	8009a92 <USBD_CDC_Setup+0x1ae>
          break;
 8009a80:	bf00      	nop
      }
      break;
 8009a82:	e006      	b.n	8009a92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fc47 	bl	800b31a <USBD_CtlError>
      ret = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CDC_DataIn>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 fc92 	bl	800b85e <USBD_CtlError>
          ret = USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f3e:	e002      	b.n	8009f46 <USBD_CDC_Setup+0x19e>
          break;
 8009f40:	bf00      	nop
 8009f42:	e008      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>
          break;
 8009f44:	bf00      	nop
      }
      break;
 8009f46:	e006      	b.n	8009f56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fc87 	bl	800b85e <USBD_CtlError>
      ret = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	75fb      	strb	r3, [r7, #23]
      break;
 8009f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_CDC_DataIn>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32b0      	adds	r2, #176	@ 0xb0
 8009aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e065      	b.n	8009b92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	32b0      	adds	r2, #176	@ 0xb0
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	f003 020f 	and.w	r2, r3, #15
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3318      	adds	r3, #24
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d02f      	beq.n	8009b50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	f003 020f 	and.w	r2, r3, #15
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	3318      	adds	r3, #24
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	f003 010f 	and.w	r1, r3, #15
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	440b      	add	r3, r1
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4403      	add	r3, r0
 8009b18:	331c      	adds	r3, #28
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b20:	fb01 f303 	mul.w	r3, r1, r3
 8009b24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d112      	bne.n	8009b50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4613      	mov	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3318      	adds	r3, #24
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b42:	78f9      	ldrb	r1, [r7, #3]
 8009b44:	2300      	movs	r3, #0
 8009b46:	2200      	movs	r2, #0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f002 f928 	bl	800bd9e <USBD_LL_Transmit>
 8009b4e:	e01f      	b.n	8009b90 <USBD_CDC_DataIn+0xf4>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32b0      	adds	r2, #176	@ 0xb0
 8009f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e065      	b.n	800a056 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	32b0      	adds	r2, #176	@ 0xb0
 8009f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	f003 020f 	and.w	r2, r3, #15
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	3318      	adds	r3, #24
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02f      	beq.n	800a014 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	f003 020f 	and.w	r2, r3, #15
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 010f 	and.w	r1, r3, #15
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	440b      	add	r3, r1
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4403      	add	r3, r0
 8009fdc:	331c      	adds	r3, #28
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fe4:	fb01 f303 	mul.w	r3, r1, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d112      	bne.n	800a014 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	f003 020f 	and.w	r2, r3, #15
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	3318      	adds	r3, #24
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a006:	78f9      	ldrb	r1, [r7, #3]
 800a008:	2300      	movs	r3, #0
 800a00a:	2200      	movs	r2, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f002 f99a 	bl	800c346 <USBD_LL_Transmit>
 800a012:	e01f      	b.n	800a054 <USBD_CDC_DataIn+0xf4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	33b0      	adds	r3, #176	@ 0xb0
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d010      	beq.n	8009b90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	33b0      	adds	r3, #176	@ 0xb0
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	4798      	blx	r3
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	33b0      	adds	r3, #176	@ 0xb0
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d010      	beq.n	800a054 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	33b0      	adds	r3, #176	@ 0xb0
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	4798      	blx	r3
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_CDC_DataOut>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CDC_DataOut>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	32b0      	adds	r2, #176	@ 0xb0
 8009bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	32b0      	adds	r2, #176	@ 0xb0
 8009bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e01a      	b.n	8009c02 <USBD_CDC_DataOut+0x68>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	32b0      	adds	r2, #176	@ 0xb0
 800a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	32b0      	adds	r2, #176	@ 0xb0
 800a084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e01a      	b.n	800a0c6 <USBD_CDC_DataOut+0x68>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
<<<<<<< HEAD
<<<<<<< HEAD
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 f926 	bl	800be22 <USBD_LL_GetRxDataSize>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f002 f998 	bl	800c3ca <USBD_LL_GetRxDataSize>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
<<<<<<< HEAD
<<<<<<< HEAD
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	33b0      	adds	r3, #176	@ 0xb0
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_CDC_EP0_RxReady>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	33b0      	adds	r3, #176	@ 0xb0
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_CDC_EP0_RxReady>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32b0      	adds	r2, #176	@ 0xb0
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e024      	b.n	8009c76 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	33b0      	adds	r3, #176	@ 0xb0
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d019      	beq.n	8009c74 <USBD_CDC_EP0_RxReady+0x6a>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c46:	2bff      	cmp	r3, #255	@ 0xff
 8009c48:	d014      	beq.n	8009c74 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	33b0      	adds	r3, #176	@ 0xb0
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	22ff      	movs	r2, #255	@ 0xff
 8009c70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <USBD_CDC_GetFSCfgDesc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	32b0      	adds	r2, #176	@ 0xb0
 800a0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e024      	b.n	800a13a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	33b0      	adds	r3, #176	@ 0xb0
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d019      	beq.n	800a138 <USBD_CDC_EP0_RxReady+0x6a>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a10a:	2bff      	cmp	r3, #255	@ 0xff
 800a10c:	d014      	beq.n	800a138 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	33b0      	adds	r3, #176	@ 0xb0
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a126:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a12e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	22ff      	movs	r2, #255	@ 0xff
 800a134:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <USBD_CDC_GetFSCfgDesc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c88:	2182      	movs	r1, #130	@ 0x82
 8009c8a:	4818      	ldr	r0, [pc, #96]	@ (8009cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c8c:	f000 fd0f 	bl	800a6ae <USBD_GetEpDesc>
 8009c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c92:	2101      	movs	r1, #1
 8009c94:	4815      	ldr	r0, [pc, #84]	@ (8009cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c96:	f000 fd0a 	bl	800a6ae <USBD_GetEpDesc>
 8009c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c9c:	2181      	movs	r1, #129	@ 0x81
 8009c9e:	4813      	ldr	r0, [pc, #76]	@ (8009cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ca0:	f000 fd05 	bl	800a6ae <USBD_GetEpDesc>
 8009ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2210      	movs	r2, #16
 8009cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc0:	711a      	strb	r2, [r3, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d006      	beq.n	8009cda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cd4:	711a      	strb	r2, [r3, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2243      	movs	r2, #67	@ 0x43
 8009cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	@ (8009cec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000054 	.word	0x20000054

08009cf0 <USBD_CDC_GetHSCfgDesc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a14c:	2182      	movs	r1, #130	@ 0x82
 800a14e:	4818      	ldr	r0, [pc, #96]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a150:	f000 fd4f 	bl	800abf2 <USBD_GetEpDesc>
 800a154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a156:	2101      	movs	r1, #1
 800a158:	4815      	ldr	r0, [pc, #84]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a15a:	f000 fd4a 	bl	800abf2 <USBD_GetEpDesc>
 800a15e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a160:	2181      	movs	r1, #129	@ 0x81
 800a162:	4813      	ldr	r0, [pc, #76]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a164:	f000 fd45 	bl	800abf2 <USBD_GetEpDesc>
 800a168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2210      	movs	r2, #16
 800a174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d006      	beq.n	800a18a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2200      	movs	r2, #0
 800a180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a184:	711a      	strb	r2, [r3, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a198:	711a      	strb	r2, [r3, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2243      	movs	r2, #67	@ 0x43
 800a1a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000054 	.word	0x20000054

0800a1b4 <USBD_CDC_GetHSCfgDesc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cf8:	2182      	movs	r1, #130	@ 0x82
 8009cfa:	4818      	ldr	r0, [pc, #96]	@ (8009d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cfc:	f000 fcd7 	bl	800a6ae <USBD_GetEpDesc>
 8009d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d02:	2101      	movs	r1, #1
 8009d04:	4815      	ldr	r0, [pc, #84]	@ (8009d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d06:	f000 fcd2 	bl	800a6ae <USBD_GetEpDesc>
 8009d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d0c:	2181      	movs	r1, #129	@ 0x81
 8009d0e:	4813      	ldr	r0, [pc, #76]	@ (8009d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d10:	f000 fccd 	bl	800a6ae <USBD_GetEpDesc>
 8009d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2210      	movs	r2, #16
 8009d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	711a      	strb	r2, [r3, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f042 0202 	orr.w	r2, r2, #2
 8009d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d006      	beq.n	8009d4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	711a      	strb	r2, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f042 0202 	orr.w	r2, r2, #2
 8009d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2243      	movs	r2, #67	@ 0x43
 8009d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000054 	.word	0x20000054

08009d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1bc:	2182      	movs	r1, #130	@ 0x82
 800a1be:	4818      	ldr	r0, [pc, #96]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1c0:	f000 fd17 	bl	800abf2 <USBD_GetEpDesc>
 800a1c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	4815      	ldr	r0, [pc, #84]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1ca:	f000 fd12 	bl	800abf2 <USBD_GetEpDesc>
 800a1ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1d0:	2181      	movs	r1, #129	@ 0x81
 800a1d2:	4813      	ldr	r0, [pc, #76]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1d4:	f000 fd0d 	bl	800abf2 <USBD_GetEpDesc>
 800a1d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2210      	movs	r2, #16
 800a1e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	711a      	strb	r2, [r3, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f042 0202 	orr.w	r2, r2, #2
 800a1f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	711a      	strb	r2, [r3, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f042 0202 	orr.w	r2, r2, #2
 800a20c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2243      	movs	r2, #67	@ 0x43
 800a212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	@ (800a220 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000054 	.word	0x20000054

0800a224 <USBD_CDC_GetOtherSpeedCfgDesc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d68:	2182      	movs	r1, #130	@ 0x82
 8009d6a:	4818      	ldr	r0, [pc, #96]	@ (8009dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d6c:	f000 fc9f 	bl	800a6ae <USBD_GetEpDesc>
 8009d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d72:	2101      	movs	r1, #1
 8009d74:	4815      	ldr	r0, [pc, #84]	@ (8009dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d76:	f000 fc9a 	bl	800a6ae <USBD_GetEpDesc>
 8009d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d7c:	2181      	movs	r1, #129	@ 0x81
 8009d7e:	4813      	ldr	r0, [pc, #76]	@ (8009dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d80:	f000 fc95 	bl	800a6ae <USBD_GetEpDesc>
 8009d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2210      	movs	r2, #16
 8009d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009da0:	711a      	strb	r2, [r3, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d006      	beq.n	8009dba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db4:	711a      	strb	r2, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2243      	movs	r2, #67	@ 0x43
 8009dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dc0:	4b02      	ldr	r3, [pc, #8]	@ (8009dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000054 	.word	0x20000054

08009dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a22c:	2182      	movs	r1, #130	@ 0x82
 800a22e:	4818      	ldr	r0, [pc, #96]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a230:	f000 fcdf 	bl	800abf2 <USBD_GetEpDesc>
 800a234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a236:	2101      	movs	r1, #1
 800a238:	4815      	ldr	r0, [pc, #84]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a23a:	f000 fcda 	bl	800abf2 <USBD_GetEpDesc>
 800a23e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a240:	2181      	movs	r1, #129	@ 0x81
 800a242:	4813      	ldr	r0, [pc, #76]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a244:	f000 fcd5 	bl	800abf2 <USBD_GetEpDesc>
 800a248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2210      	movs	r2, #16
 800a254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2200      	movs	r2, #0
 800a260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a264:	711a      	strb	r2, [r3, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a278:	711a      	strb	r2, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2243      	movs	r2, #67	@ 0x43
 800a282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a284:	4b02      	ldr	r3, [pc, #8]	@ (800a290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000054 	.word	0x20000054

0800a294 <USBD_CDC_GetDeviceQualifierDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	220a      	movs	r2, #10
 8009ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009dde:	4b03      	ldr	r3, [pc, #12]	@ (8009dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000010 	.word	0x20000010

08009df0 <USBD_CDC_RegisterInterface>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	220a      	movs	r2, #10
 800a2a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2a2:	4b03      	ldr	r3, [pc, #12]	@ (800a2b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	20000010 	.word	0x20000010

0800a2b4 <USBD_CDC_RegisterInterface>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e009      	b.n	8009e18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	33b0      	adds	r3, #176	@ 0xb0
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USBD_CDC_SetTxBuffer>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e009      	b.n	800a2dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	33b0      	adds	r3, #176	@ 0xb0
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USBD_CDC_SetTxBuffer>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	32b0      	adds	r2, #176	@ 0xb0
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e008      	b.n	8009e5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USBD_CDC_SetRxBuffer>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	32b0      	adds	r2, #176	@ 0xb0
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e008      	b.n	800a320 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_CDC_SetRxBuffer>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	32b0      	adds	r2, #176	@ 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e004      	b.n	8009e96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <USBD_CDC_ReceivePacket>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	32b0      	adds	r2, #176	@ 0xb0
 800a340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e004      	b.n	800a35a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
	...

0800a368 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32b0      	adds	r2, #176	@ 0xb0
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e025      	b.n	800a3da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11f      	bne.n	800a3d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3a0:	4b10      	ldr	r3, [pc, #64]	@ (800a3e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 020f 	and.w	r2, r3, #15
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4403      	add	r3, r0
 800a3ba:	3318      	adds	r3, #24
 800a3bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <USBD_CDC_TransmitPacket+0x7c>)
 800a3c0:	7819      	ldrb	r1, [r3, #0]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 ffb9 	bl	800c346 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000097 	.word	0x20000097

0800a3e8 <USBD_CDC_ReceivePacket>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	32b0      	adds	r2, #176	@ 0xb0
 8009eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eba:	60fb      	str	r3, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	32b0      	adds	r2, #176	@ 0xb0
 800a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fe:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	32b0      	adds	r2, #176	@ 0xb0
 8009ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e018      	b.n	8009f04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7c1b      	ldrb	r3, [r3, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10a      	bne.n	8009ef0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009eda:	4b0c      	ldr	r3, [pc, #48]	@ (8009f0c <USBD_CDC_ReceivePacket+0x68>)
 8009edc:	7819      	ldrb	r1, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 ff79 	bl	800bde0 <USBD_LL_PrepareReceive>
 8009eee:	e008      	b.n	8009f02 <USBD_CDC_ReceivePacket+0x5e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	32b0      	adds	r2, #176	@ 0xb0
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	e018      	b.n	800a448 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7c1b      	ldrb	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a41e:	4b0c      	ldr	r3, [pc, #48]	@ (800a450 <USBD_CDC_ReceivePacket+0x68>)
 800a420:	7819      	ldrb	r1, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 ffab 	bl	800c388 <USBD_LL_PrepareReceive>
 800a432:	e008      	b.n	800a446 <USBD_CDC_ReceivePacket+0x5e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< HEAD
<<<<<<< HEAD
 8009ef0:	4b06      	ldr	r3, [pc, #24]	@ (8009f0c <USBD_CDC_ReceivePacket+0x68>)
 8009ef2:	7819      	ldrb	r1, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009efa:	2340      	movs	r3, #64	@ 0x40
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 ff6f 	bl	800bde0 <USBD_LL_PrepareReceive>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a434:	4b06      	ldr	r3, [pc, #24]	@ (800a450 <USBD_CDC_ReceivePacket+0x68>)
 800a436:	7819      	ldrb	r1, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a43e:	2340      	movs	r3, #64	@ 0x40
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 ffa1 	bl	800c388 <USBD_LL_PrepareReceive>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	20000098 	.word	0x20000098

08009f10 <USBD_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000098 	.word	0x20000098

0800a454 <USBD_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	71fb      	strb	r3, [r7, #7]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	71fb      	strb	r3, [r7, #7]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <USBD_Init+0x18>
=======
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_Init+0x18>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_Init+0x18>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f24:	2303      	movs	r3, #3
 8009f26:	e01f      	b.n	8009f68 <USBD_Init+0x58>
=======
 800a468:	2303      	movs	r3, #3
 800a46a:	e01f      	b.n	800a4ac <USBD_Init+0x58>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800a468:	2303      	movs	r3, #3
 800a46a:	e01f      	b.n	800a4ac <USBD_Init+0x58>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	79fa      	ldrb	r2, [r7, #7]
 8009f5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f001 fde9 	bl	800bb34 <USBD_LL_Init>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	79fa      	ldrb	r2, [r7, #7]
 800a49e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f001 fe1b 	bl	800c0dc <USBD_LL_Init>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <USBD_RegisterClass+0x18>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <USBD_RegisterClass+0x18>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f84:	2303      	movs	r3, #3
 8009f86:	e025      	b.n	8009fd4 <USBD_RegisterClass+0x64>
=======
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e025      	b.n	800a518 <USBD_RegisterClass+0x64>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e025      	b.n	800a518 <USBD_RegisterClass+0x64>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
<<<<<<< HEAD
<<<<<<< HEAD
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
=======
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	32ae      	adds	r2, #174	@ 0xae
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00f      	beq.n	8009fc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32ae      	adds	r2, #174	@ 0xae
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	f107 020e 	add.w	r2, r7, #14
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	@ 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00f      	beq.n	800a508 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	@ 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	f107 020e 	add.w	r2, r7, #14
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4798      	blx	r3
 800a500:	4602      	mov	r2, r0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
<<<<<<< HEAD
<<<<<<< HEAD
  pdev->NumClasses ++;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_Start>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  pdev->NumClasses++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_Start>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
<<<<<<< HEAD
<<<<<<< HEAD
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 fdf1 	bl	800bbcc <USBD_LL_Start>
 8009fea:	4603      	mov	r3, r0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_RunTestMode>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 fe23 	bl	800c174 <USBD_LL_Start>
 800a52e:	4603      	mov	r3, r0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_RunTestMode>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8009ffc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBD_SetClassConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a540:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_SetClassConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d009      	beq.n	800a038 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	4611      	mov	r1, r2
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	4798      	blx	r3
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	4611      	mov	r1, r2
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
<<<<<<< HEAD
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_ClrClassConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_ClrClassConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	460b      	mov	r3, r1
 800a590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
<<<<<<< HEAD
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_LL_SetupStage>:
  *         Handle the setup stage
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_SetupStage>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 f90c 	bl	800b2a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a09c:	461a      	mov	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0aa:	f003 031f 	and.w	r3, r3, #31
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d01a      	beq.n	800a0e8 <USBD_LL_SetupStage+0x72>
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d822      	bhi.n	800a0fc <USBD_LL_SetupStage+0x86>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <USBD_LL_SetupStage+0x4a>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d00a      	beq.n	800a0d4 <USBD_LL_SetupStage+0x5e>
 800a0be:	e01d      	b.n	800a0fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fb63 	bl	800a794 <USBD_StdDevReq>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d2:	e020      	b.n	800a116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fbcb 	bl	800a878 <USBD_StdItfReq>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e6:	e016      	b.n	800a116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fc2d 	bl	800a950 <USBD_StdEPReq>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0fa:	e00c      	b.n	800a116 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a102:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 fdbe 	bl	800bc8c <USBD_LL_StallEP>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
      break;
 800a114:	bf00      	nop
  }

  return ret;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_LL_DataOutStage>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f90c 	bl	800b7ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ee:	f003 031f 	and.w	r3, r3, #31
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d01a      	beq.n	800a62c <USBD_LL_SetupStage+0x72>
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d822      	bhi.n	800a640 <USBD_LL_SetupStage+0x86>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <USBD_LL_SetupStage+0x4a>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d00a      	beq.n	800a618 <USBD_LL_SetupStage+0x5e>
 800a602:	e01d      	b.n	800a640 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fb63 	bl	800acd8 <USBD_StdDevReq>
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
      break;
 800a616:	e020      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fbcb 	bl	800adbc <USBD_StdItfReq>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
      break;
 800a62a:	e016      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc2d 	bl	800ae94 <USBD_StdEPReq>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e00c      	b.n	800a65a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a646:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fdf0 	bl	800c234 <USBD_LL_StallEP>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	bf00      	nop
  }

  return ret;
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_LL_DataOutStage>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	460b      	mov	r3, r1
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a132:	7afb      	ldrb	r3, [r7, #11]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d16e      	bne.n	800a216 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a13e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a146:	2b03      	cmp	r3, #3
 800a148:	f040 8098 	bne.w	800a27c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	429a      	cmp	r2, r3
 800a156:	d913      	bls.n	800a180 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	4293      	cmp	r3, r2
 800a170:	bf28      	it	cs
 800a172:	4613      	movcs	r3, r2
 800a174:	461a      	mov	r2, r3
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f001 f988 	bl	800b48e <USBD_CtlContinueRx>
 800a17e:	e07d      	b.n	800a27c <USBD_LL_DataOutStage+0x15c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	460b      	mov	r3, r1
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d16e      	bne.n	800a75a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	f040 8098 	bne.w	800a7c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d913      	bls.n	800a6c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	bf28      	it	cs
 800a6b6:	4613      	movcs	r3, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f001 f994 	bl	800b9ea <USBD_CtlContinueRx>
 800a6c2:	e07d      	b.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
<<<<<<< HEAD
<<<<<<< HEAD
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a186:	f003 031f 	and.w	r3, r3, #31
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d014      	beq.n	800a1b8 <USBD_LL_DataOutStage+0x98>
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d81d      	bhi.n	800a1ce <USBD_LL_DataOutStage+0xae>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <USBD_LL_DataOutStage+0x7c>
 800a196:	2b01      	cmp	r3, #1
 800a198:	d003      	beq.n	800a1a2 <USBD_LL_DataOutStage+0x82>
 800a19a:	e018      	b.n	800a1ce <USBD_LL_DataOutStage+0xae>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d014      	beq.n	800a6fc <USBD_LL_DataOutStage+0x98>
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d81d      	bhi.n	800a712 <USBD_LL_DataOutStage+0xae>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <USBD_LL_DataOutStage+0x7c>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d003      	beq.n	800a6e6 <USBD_LL_DataOutStage+0x82>
 800a6de:	e018      	b.n	800a712 <USBD_LL_DataOutStage+0xae>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 800a19c:	2300      	movs	r3, #0
 800a19e:	75bb      	strb	r3, [r7, #22]
            break;
 800a1a0:	e018      	b.n	800a1d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fa64 	bl	800a67a <USBD_CoreFindIF>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75bb      	strb	r3, [r7, #22]
            break;
 800a1b6:	e00d      	b.n	800a1d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fa66 	bl	800a694 <USBD_CoreFindEP>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75bb      	strb	r3, [r7, #22]
            break;
 800a1cc:	e002      	b.n	800a1d4 <USBD_LL_DataOutStage+0xb4>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	75bb      	strb	r3, [r7, #22]
            break;
 800a6e4:	e018      	b.n	800a718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fa64 	bl	800abbe <USBD_CoreFindIF>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	75bb      	strb	r3, [r7, #22]
            break;
 800a6fa:	e00d      	b.n	800a718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4619      	mov	r1, r3
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fa66 	bl	800abd8 <USBD_CoreFindEP>
 800a70c:	4603      	mov	r3, r0
 800a70e:	75bb      	strb	r3, [r7, #22]
            break;
 800a710:	e002      	b.n	800a718 <USBD_LL_DataOutStage+0xb4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75bb      	strb	r3, [r7, #22]
            break;
 800a1d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1d4:	7dbb      	ldrb	r3, [r7, #22]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d119      	bne.n	800a20e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d113      	bne.n	800a20e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a1e6:	7dba      	ldrb	r2, [r7, #22]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	32ae      	adds	r2, #174	@ 0xae
 800a1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a1f6:	7dba      	ldrb	r2, [r7, #22]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a1fe:	7dba      	ldrb	r2, [r7, #22]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	32ae      	adds	r2, #174	@ 0xae
 800a204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	4798      	blx	r3
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a712:	2300      	movs	r3, #0
 800a714:	75bb      	strb	r3, [r7, #22]
            break;
 800a716:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a718:	7dbb      	ldrb	r3, [r7, #22]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d119      	bne.n	800a752 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b03      	cmp	r3, #3
 800a728:	d113      	bne.n	800a752 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a72a:	7dba      	ldrb	r2, [r7, #22]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	32ae      	adds	r2, #174	@ 0xae
 800a730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a73a:	7dba      	ldrb	r2, [r7, #22]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a742:	7dba      	ldrb	r2, [r7, #22]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	32ae      	adds	r2, #174	@ 0xae
 800a748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	4798      	blx	r3
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
<<<<<<< HEAD
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f001 f94e 	bl	800b4b0 <USBD_CtlSendStatus>
 800a214:	e032      	b.n	800a27c <USBD_LL_DataOutStage+0x15c>
=======
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f001 f95a 	bl	800ba0c <USBD_CtlSendStatus>
 800a758:	e032      	b.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f001 f95a 	bl	800ba0c <USBD_CtlSendStatus>
 800a758:	e032      	b.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
<<<<<<< HEAD
<<<<<<< HEAD
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	4619      	mov	r1, r3
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fa37 	bl	800a694 <USBD_CoreFindEP>
 800a226:	4603      	mov	r3, r0
 800a228:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a22a:	7dbb      	ldrb	r3, [r7, #22]
 800a22c:	2bff      	cmp	r3, #255	@ 0xff
 800a22e:	d025      	beq.n	800a27c <USBD_LL_DataOutStage+0x15c>
 800a230:	7dbb      	ldrb	r3, [r7, #22]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d122      	bne.n	800a27c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d117      	bne.n	800a272 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a242:	7dba      	ldrb	r2, [r7, #22]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	32ae      	adds	r2, #174	@ 0xae
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00f      	beq.n	800a272 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a252:	7dba      	ldrb	r2, [r7, #22]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a25a:	7dba      	ldrb	r2, [r7, #22]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	32ae      	adds	r2, #174	@ 0xae
 800a260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	7afa      	ldrb	r2, [r7, #11]
 800a268:	4611      	mov	r1, r2
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
 800a27a:	e000      	b.n	800a27e <USBD_LL_DataOutStage+0x15e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a760:	b2db      	uxtb	r3, r3
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fa37 	bl	800abd8 <USBD_CoreFindEP>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a76e:	7dbb      	ldrb	r3, [r7, #22]
 800a770:	2bff      	cmp	r3, #255	@ 0xff
 800a772:	d025      	beq.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
 800a774:	7dbb      	ldrb	r3, [r7, #22]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d122      	bne.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d117      	bne.n	800a7b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a786:	7dba      	ldrb	r2, [r7, #22]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	32ae      	adds	r2, #174	@ 0xae
 800a78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00f      	beq.n	800a7b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a796:	7dba      	ldrb	r2, [r7, #22]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a79e:	7dba      	ldrb	r2, [r7, #22]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	32ae      	adds	r2, #174	@ 0xae
 800a7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	7afa      	ldrb	r2, [r7, #11]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	4798      	blx	r3
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	e000      	b.n	800a7c2 <USBD_LL_DataOutStage+0x15e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a286:	b580      	push	{r7, lr}
 800a288:	b086      	sub	sp, #24
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	460b      	mov	r3, r1
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	72fb      	strb	r3, [r7, #11]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b086      	sub	sp, #24
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	72fb      	strb	r3, [r7, #11]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800a294:	7afb      	ldrb	r3, [r7, #11]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d16f      	bne.n	800a37a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3314      	adds	r3, #20
 800a29e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d15a      	bne.n	800a360 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d914      	bls.n	800a2e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f001 f8b0 	bl	800b432 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f001 fd81 	bl	800bde0 <USBD_LL_PrepareReceive>
 800a2de:	e03f      	b.n	800a360 <USBD_LL_DataInStage+0xda>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a7d8:	7afb      	ldrb	r3, [r7, #11]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d16f      	bne.n	800a8be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3314      	adds	r3, #20
 800a7e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d15a      	bne.n	800a8a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d914      	bls.n	800a824 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	1ad2      	subs	r2, r2, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	461a      	mov	r2, r3
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f001 f8bc 	bl	800b98e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a816:	2300      	movs	r3, #0
 800a818:	2200      	movs	r2, #0
 800a81a:	2100      	movs	r1, #0
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f001 fdb3 	bl	800c388 <USBD_LL_PrepareReceive>
 800a822:	e03f      	b.n	800a8a4 <USBD_LL_DataInStage+0xda>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< HEAD
<<<<<<< HEAD
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d11c      	bne.n	800a326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d316      	bcc.n	800a326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a302:	429a      	cmp	r2, r3
 800a304:	d20f      	bcs.n	800a326 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f001 f891 	bl	800b432 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a318:	2300      	movs	r3, #0
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 fd5e 	bl	800bde0 <USBD_LL_PrepareReceive>
 800a324:	e01c      	b.n	800a360 <USBD_LL_DataInStage+0xda>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d11c      	bne.n	800a86a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a838:	429a      	cmp	r2, r3
 800a83a:	d316      	bcc.n	800a86a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a846:	429a      	cmp	r2, r3
 800a848:	d20f      	bcs.n	800a86a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f001 f89d 	bl	800b98e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a85c:	2300      	movs	r3, #0
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f001 fd90 	bl	800c388 <USBD_LL_PrepareReceive>
 800a868:	e01c      	b.n	800a8a4 <USBD_LL_DataInStage+0xda>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
<<<<<<< HEAD
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d10f      	bne.n	800a352 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d009      	beq.n	800a352 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a352:	2180      	movs	r1, #128	@ 0x80
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f001 fc99 	bl	800bc8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f001 f8bb 	bl	800b4d6 <USBD_CtlReceiveStatus>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b03      	cmp	r3, #3
 800a874:	d10f      	bne.n	800a896 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d009      	beq.n	800a896 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a896:	2180      	movs	r1, #128	@ 0x80
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f001 fccb 	bl	800c234 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f001 f8c7 	bl	800ba32 <USBD_CtlReceiveStatus>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d03a      	beq.n	800a3e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff fe42 	bl	8009ff4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a378:	e032      	b.n	800a3e0 <USBD_LL_DataInStage+0x15a>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d03a      	beq.n	800a924 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff fe42 	bl	800a538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8bc:	e032      	b.n	800a924 <USBD_LL_DataInStage+0x15a>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
<<<<<<< HEAD
<<<<<<< HEAD
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a380:	b2db      	uxtb	r3, r3
 800a382:	4619      	mov	r1, r3
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f985 	bl	800a694 <USBD_CoreFindEP>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	2bff      	cmp	r3, #255	@ 0xff
 800a392:	d025      	beq.n	800a3e0 <USBD_LL_DataInStage+0x15a>
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d122      	bne.n	800a3e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d11c      	bne.n	800a3e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3a6:	7dfa      	ldrb	r2, [r7, #23]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	32ae      	adds	r2, #174	@ 0xae
 800a3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d014      	beq.n	800a3e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3b6:	7dfa      	ldrb	r2, [r7, #23]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3be:	7dfa      	ldrb	r2, [r7, #23]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	32ae      	adds	r2, #174	@ 0xae
 800a3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	7afa      	ldrb	r2, [r7, #11]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	4798      	blx	r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3d6:	7dbb      	ldrb	r3, [r7, #22]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a3dc:	7dbb      	ldrb	r3, [r7, #22]
 800a3de:	e000      	b.n	800a3e2 <USBD_LL_DataInStage+0x15c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a8be:	7afb      	ldrb	r3, [r7, #11]
 800a8c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f985 	bl	800abd8 <USBD_CoreFindEP>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	2bff      	cmp	r3, #255	@ 0xff
 800a8d6:	d025      	beq.n	800a924 <USBD_LL_DataInStage+0x15a>
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d122      	bne.n	800a924 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d11c      	bne.n	800a924 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8ea:	7dfa      	ldrb	r2, [r7, #23]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	32ae      	adds	r2, #174	@ 0xae
 800a8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d014      	beq.n	800a924 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8fa:	7dfa      	ldrb	r2, [r7, #23]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a902:	7dfa      	ldrb	r2, [r7, #23]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	32ae      	adds	r2, #174	@ 0xae
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	7afa      	ldrb	r2, [r7, #11]
 800a910:	4611      	mov	r1, r2
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	4798      	blx	r3
 800a916:	4603      	mov	r3, r0
 800a918:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a91a:	7dbb      	ldrb	r3, [r7, #22]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a920:	7dbb      	ldrb	r3, [r7, #22]
 800a922:	e000      	b.n	800a926 <USBD_LL_DataInStage+0x15c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_Reset>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_Reset>:
  *         Handle Reset event
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a422:	2b00      	cmp	r3, #0
 800a424:	d014      	beq.n	800a450 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6852      	ldr	r2, [r2, #4]
 800a43e:	b2d2      	uxtb	r2, r2
 800a440:	4611      	mov	r1, r2
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6852      	ldr	r2, [r2, #4]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	4611      	mov	r1, r2
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< HEAD
<<<<<<< HEAD
 800a450:	2340      	movs	r3, #64	@ 0x40
 800a452:	2200      	movs	r2, #0
 800a454:	2100      	movs	r1, #0
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 fbd3 	bl	800bc02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2240      	movs	r2, #64	@ 0x40
 800a468:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a46c:	2340      	movs	r3, #64	@ 0x40
 800a46e:	2200      	movs	r2, #0
 800a470:	2180      	movs	r1, #128	@ 0x80
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 fbc5 	bl	800bc02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2240      	movs	r2, #64	@ 0x40
 800a482:	621a      	str	r2, [r3, #32]

  return ret;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_SetSpeed>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a994:	2340      	movs	r3, #64	@ 0x40
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f001 fc05 	bl	800c1aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2240      	movs	r2, #64	@ 0x40
 800a9ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9b0:	2340      	movs	r3, #64	@ 0x40
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2180      	movs	r1, #128	@ 0x80
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 fbf7 	bl	800c1aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2240      	movs	r2, #64	@ 0x40
 800a9c6:	621a      	str	r2, [r3, #32]

  return ret;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USBD_LL_SetSpeed>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	78fa      	ldrb	r2, [r7, #3]
 800a49e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_LL_Suspend>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d006      	beq.n	800a4d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2204      	movs	r2, #4
 800a4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USBD_LL_Resume>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d006      	beq.n	800aa14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2204      	movs	r2, #4
 800aa18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USBD_LL_Resume>:
  *         Handle Resume event
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d106      	bne.n	800a508 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USBD_LL_SOF>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d106      	bne.n	800aa4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USBD_LL_SOF>:
  *         Handle SOF event
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d110      	bne.n	800a54c <USBD_LL_SOF+0x36>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d110      	bne.n	800aa90 <USBD_LL_SOF+0x36>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	4798      	blx	r3
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	32ae      	adds	r2, #174	@ 0xae
 800a56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	e01c      	b.n	800a5b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b03      	cmp	r3, #3
 800a582:	d115      	bne.n	800a5b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	@ 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00b      	beq.n	800a5b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	32ae      	adds	r2, #174	@ 0xae
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	32ae      	adds	r2, #174	@ 0xae
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e01c      	b.n	800aaf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d115      	bne.n	800aaf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	32ae      	adds	r2, #174	@ 0xae
 800aad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	32ae      	adds	r2, #174	@ 0xae
 800aae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	32ae      	adds	r2, #174	@ 0xae
 800a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e01c      	b.n	800a616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d115      	bne.n	800a614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	@ 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00b      	beq.n	800a614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32ae      	adds	r2, #174	@ 0xae
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	4611      	mov	r1, r2
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	32ae      	adds	r2, #174	@ 0xae
 800ab14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e01c      	b.n	800ab5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d115      	bne.n	800ab58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	32ae      	adds	r2, #174	@ 0xae
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	@ 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	4611      	mov	r1, r2
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_LL_DevConnected>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_DevConnected>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USBD_LL_DevDisconnected>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USBD_LL_DevDisconnected>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00e      	beq.n	800a670 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6852      	ldr	r2, [r2, #4]
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	4611      	mov	r1, r2
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00e      	beq.n	800abb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6852      	ldr	r2, [r2, #4]
 800aba2:	b2d2      	uxtb	r2, r2
 800aba4:	4611      	mov	r1, r2
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	4798      	blx	r3
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abb0:	2303      	movs	r3, #3
 800abb2:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
<<<<<<< HEAD
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_CoreFindIF>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_CoreFindIF>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< HEAD
<<<<<<< HEAD
 800a686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USBD_CoreFindEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <USBD_CoreFindEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< HEAD
<<<<<<< HEAD
 800a6a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <USBD_GetEpDesc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abe4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <USBD_GetEpDesc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d91f      	bls.n	800a714 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6da:	e013      	b.n	800a704 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6dc:	f107 030a 	add.w	r3, r7, #10
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6978      	ldr	r0, [r7, #20]
 800a6e4:	f000 f81b 	bl	800a71e <USBD_GetNextDesc>
 800a6e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	785b      	ldrb	r3, [r3, #1]
 800a6ee:	2b05      	cmp	r3, #5
 800a6f0:	d108      	bne.n	800a704 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	789b      	ldrb	r3, [r3, #2]
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d008      	beq.n	800a712 <USBD_GetEpDesc+0x64>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b086      	sub	sp, #24
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	885b      	ldrh	r3, [r3, #2]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	7812      	ldrb	r2, [r2, #0]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d91f      	bls.n	800ac58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac1e:	e013      	b.n	800ac48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac20:	f107 030a 	add.w	r3, r7, #10
 800ac24:	4619      	mov	r1, r3
 800ac26:	6978      	ldr	r0, [r7, #20]
 800ac28:	f000 f81b 	bl	800ac62 <USBD_GetNextDesc>
 800ac2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d108      	bne.n	800ac48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	789b      	ldrb	r3, [r3, #2]
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d008      	beq.n	800ac56 <USBD_GetEpDesc+0x64>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
 800a700:	2300      	movs	r3, #0
 800a702:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	885b      	ldrh	r3, [r3, #2]
 800a708:	b29a      	uxth	r2, r3
 800a70a:	897b      	ldrh	r3, [r7, #10]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d8e5      	bhi.n	800a6dc <USBD_GetEpDesc+0x2e>
 800a710:	e000      	b.n	800a714 <USBD_GetEpDesc+0x66>
          break;
 800a712:	bf00      	nop
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	885b      	ldrh	r3, [r3, #2]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	897b      	ldrh	r3, [r7, #10]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d8e5      	bhi.n	800ac20 <USBD_GetEpDesc+0x2e>
 800ac54:	e000      	b.n	800ac58 <USBD_GetEpDesc+0x66>
          break;
 800ac56:	bf00      	nop
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        }
      }
    }
  }

  return (void *)pEpDesc;
<<<<<<< HEAD
<<<<<<< HEAD
 800a714:	693b      	ldr	r3, [r7, #16]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_GetNextDesc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ac58:	693b      	ldr	r3, [r7, #16]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_GetNextDesc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a71e:	b480      	push	{r7}
 800a720:	b085      	sub	sp, #20
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	7812      	ldrb	r2, [r2, #0]
 800a734:	4413      	add	r3, r2
 800a736:	b29a      	uxth	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a748:	68fb      	ldr	r3, [r7, #12]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <SWAPBYTE>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	7812      	ldrb	r2, [r2, #0]
 800ac78:	4413      	add	r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4413      	add	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <SWAPBYTE>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a756:	b480      	push	{r7}
 800a758:	b087      	sub	sp, #28
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ac9a:	b480      	push	{r7}
 800ac9c:	b087      	sub	sp, #28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
<<<<<<< HEAD
<<<<<<< HEAD
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a774:	8a3b      	ldrh	r3, [r7, #16]
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	b21a      	sxth	r2, r3
 800a77a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a77e:	4313      	orrs	r3, r2
 800a780:	b21b      	sxth	r3, r3
 800a782:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a784:	89fb      	ldrh	r3, [r7, #14]
}
 800a786:	4618      	mov	r0, r3
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
	...

0800a794 <USBD_StdDevReq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3301      	adds	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acb8:	8a3b      	ldrh	r3, [r7, #16]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	b21a      	sxth	r2, r3
 800acbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	b21b      	sxth	r3, r3
 800acc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acc8:	89fb      	ldrh	r3, [r7, #14]
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <USBD_StdDevReq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7aa:	2b40      	cmp	r3, #64	@ 0x40
 800a7ac:	d005      	beq.n	800a7ba <USBD_StdDevReq+0x26>
 800a7ae:	2b40      	cmp	r3, #64	@ 0x40
 800a7b0:	d857      	bhi.n	800a862 <USBD_StdDevReq+0xce>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00f      	beq.n	800a7d6 <USBD_StdDevReq+0x42>
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	d153      	bne.n	800a862 <USBD_StdDevReq+0xce>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acee:	2b40      	cmp	r3, #64	@ 0x40
 800acf0:	d005      	beq.n	800acfe <USBD_StdDevReq+0x26>
 800acf2:	2b40      	cmp	r3, #64	@ 0x40
 800acf4:	d857      	bhi.n	800ada6 <USBD_StdDevReq+0xce>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00f      	beq.n	800ad1a <USBD_StdDevReq+0x42>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d153      	bne.n	800ada6 <USBD_StdDevReq+0xce>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
<<<<<<< HEAD
<<<<<<< HEAD
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	32ae      	adds	r2, #174	@ 0xae
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	4798      	blx	r3
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d4:	e04a      	b.n	800a86c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	2b09      	cmp	r3, #9
 800a7dc:	d83b      	bhi.n	800a856 <USBD_StdDevReq+0xc2>
 800a7de:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <USBD_StdDevReq+0x50>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a839 	.word	0x0800a839
 800a7e8:	0800a84d 	.word	0x0800a84d
 800a7ec:	0800a857 	.word	0x0800a857
 800a7f0:	0800a843 	.word	0x0800a843
 800a7f4:	0800a857 	.word	0x0800a857
 800a7f8:	0800a817 	.word	0x0800a817
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a857 	.word	0x0800a857
 800a804:	0800a82f 	.word	0x0800a82f
 800a808:	0800a821 	.word	0x0800a821
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa3c 	bl	800ac8c <USBD_GetDescriptor>
          break;
 800a814:	e024      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fba1 	bl	800af60 <USBD_SetAddress>
          break;
 800a81e:	e01f      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fbe0 	bl	800afe8 <USBD_SetConfig>
 800a828:	4603      	mov	r3, r0
 800a82a:	73fb      	strb	r3, [r7, #15]
          break;
 800a82c:	e018      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fc83 	bl	800b13c <USBD_GetConfig>
          break;
 800a836:	e013      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fcb4 	bl	800b1a8 <USBD_GetStatus>
          break;
 800a840:	e00e      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fce3 	bl	800b210 <USBD_SetFeature>
          break;
 800a84a:	e009      	b.n	800a860 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fd07 	bl	800b262 <USBD_ClrFeature>
          break;
 800a854:	e004      	b.n	800a860 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fd5e 	bl	800b31a <USBD_CtlError>
          break;
 800a85e:	bf00      	nop
      }
      break;
 800a860:	e004      	b.n	800a86c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fd58 	bl	800b31a <USBD_CtlError>
      break;
 800a86a:	bf00      	nop
  }

  return ret;
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop

0800a878 <USBD_StdItfReq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	32ae      	adds	r2, #174	@ 0xae
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
      break;
 800ad18:	e04a      	b.n	800adb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	785b      	ldrb	r3, [r3, #1]
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d83b      	bhi.n	800ad9a <USBD_StdDevReq+0xc2>
 800ad22:	a201      	add	r2, pc, #4	@ (adr r2, 800ad28 <USBD_StdDevReq+0x50>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad7d 	.word	0x0800ad7d
 800ad2c:	0800ad91 	.word	0x0800ad91
 800ad30:	0800ad9b 	.word	0x0800ad9b
 800ad34:	0800ad87 	.word	0x0800ad87
 800ad38:	0800ad9b 	.word	0x0800ad9b
 800ad3c:	0800ad5b 	.word	0x0800ad5b
 800ad40:	0800ad51 	.word	0x0800ad51
 800ad44:	0800ad9b 	.word	0x0800ad9b
 800ad48:	0800ad73 	.word	0x0800ad73
 800ad4c:	0800ad65 	.word	0x0800ad65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa3c 	bl	800b1d0 <USBD_GetDescriptor>
          break;
 800ad58:	e024      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fba1 	bl	800b4a4 <USBD_SetAddress>
          break;
 800ad62:	e01f      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fbe0 	bl	800b52c <USBD_SetConfig>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad70:	e018      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fc83 	bl	800b680 <USBD_GetConfig>
          break;
 800ad7a:	e013      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fcb4 	bl	800b6ec <USBD_GetStatus>
          break;
 800ad84:	e00e      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fce3 	bl	800b754 <USBD_SetFeature>
          break;
 800ad8e:	e009      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fd07 	bl	800b7a6 <USBD_ClrFeature>
          break;
 800ad98:	e004      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fd5e 	bl	800b85e <USBD_CtlError>
          break;
 800ada2:	bf00      	nop
      }
      break;
 800ada4:	e004      	b.n	800adb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fd58 	bl	800b85e <USBD_CtlError>
      break;
 800adae:	bf00      	nop
  }

  return ret;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop

0800adbc <USBD_StdItfReq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a88e:	2b40      	cmp	r3, #64	@ 0x40
 800a890:	d005      	beq.n	800a89e <USBD_StdItfReq+0x26>
 800a892:	2b40      	cmp	r3, #64	@ 0x40
 800a894:	d852      	bhi.n	800a93c <USBD_StdItfReq+0xc4>
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <USBD_StdItfReq+0x26>
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	d14e      	bne.n	800a93c <USBD_StdItfReq+0xc4>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800add2:	2b40      	cmp	r3, #64	@ 0x40
 800add4:	d005      	beq.n	800ade2 <USBD_StdItfReq+0x26>
 800add6:	2b40      	cmp	r3, #64	@ 0x40
 800add8:	d852      	bhi.n	800ae80 <USBD_StdItfReq+0xc4>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <USBD_StdItfReq+0x26>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d14e      	bne.n	800ae80 <USBD_StdItfReq+0xc4>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
<<<<<<< HEAD
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d840      	bhi.n	800a92e <USBD_StdItfReq+0xb6>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	2b02      	cmp	r3, #2
 800adee:	d840      	bhi.n	800ae72 <USBD_StdItfReq+0xb6>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
<<<<<<< HEAD
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	889b      	ldrh	r3, [r3, #4]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d836      	bhi.n	800a924 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	889b      	ldrh	r3, [r3, #4]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff fedb 	bl	800a67a <USBD_CoreFindIF>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2bff      	cmp	r3, #255	@ 0xff
 800a8cc:	d01d      	beq.n	800a90a <USBD_StdItfReq+0x92>
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d11a      	bne.n	800a90a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8d4:	7bba      	ldrb	r2, [r7, #14]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	32ae      	adds	r2, #174	@ 0xae
 800a8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00f      	beq.n	800a904 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a8e4:	7bba      	ldrb	r2, [r7, #14]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8ec:	7bba      	ldrb	r2, [r7, #14]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	32ae      	adds	r2, #174	@ 0xae
 800a8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a902:	e004      	b.n	800a90e <USBD_StdItfReq+0x96>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	889b      	ldrh	r3, [r3, #4]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d836      	bhi.n	800ae68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fedb 	bl	800abbe <USBD_CoreFindIF>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2bff      	cmp	r3, #255	@ 0xff
 800ae10:	d01d      	beq.n	800ae4e <USBD_StdItfReq+0x92>
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11a      	bne.n	800ae4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae18:	7bba      	ldrb	r2, [r7, #14]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	@ 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00f      	beq.n	800ae48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae28:	7bba      	ldrb	r2, [r7, #14]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae30:	7bba      	ldrb	r2, [r7, #14]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32ae      	adds	r2, #174	@ 0xae
 800ae36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae46:	e004      	b.n	800ae52 <USBD_StdItfReq+0x96>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
<<<<<<< HEAD
<<<<<<< HEAD
 800a904:	2303      	movs	r3, #3
 800a906:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a908:	e001      	b.n	800a90e <USBD_StdItfReq+0x96>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ae48:	2303      	movs	r3, #3
 800ae4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae4c:	e001      	b.n	800ae52 <USBD_StdItfReq+0x96>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
<<<<<<< HEAD
<<<<<<< HEAD
 800a90a:	2303      	movs	r3, #3
 800a90c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	88db      	ldrh	r3, [r3, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d110      	bne.n	800a938 <USBD_StdItfReq+0xc0>
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10d      	bne.n	800a938 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fdc7 	bl	800b4b0 <USBD_CtlSendStatus>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ae4e:	2303      	movs	r3, #3
 800ae50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d110      	bne.n	800ae7c <USBD_StdItfReq+0xc0>
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10d      	bne.n	800ae7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fdd3 	bl	800ba0c <USBD_CtlSendStatus>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800a922:	e009      	b.n	800a938 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fcf7 	bl	800b31a <USBD_CtlError>
          break;
 800a92c:	e004      	b.n	800a938 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fcf2 	bl	800b31a <USBD_CtlError>
          break;
 800a936:	e000      	b.n	800a93a <USBD_StdItfReq+0xc2>
          break;
 800a938:	bf00      	nop
      }
      break;
 800a93a:	e004      	b.n	800a946 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fceb 	bl	800b31a <USBD_CtlError>
      break;
 800a944:	bf00      	nop
  }

  return ret;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_StdEPReq>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ae66:	e009      	b.n	800ae7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fcf7 	bl	800b85e <USBD_CtlError>
          break;
 800ae70:	e004      	b.n	800ae7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fcf2 	bl	800b85e <USBD_CtlError>
          break;
 800ae7a:	e000      	b.n	800ae7e <USBD_StdItfReq+0xc2>
          break;
 800ae7c:	bf00      	nop
      }
      break;
 800ae7e:	e004      	b.n	800ae8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fceb 	bl	800b85e <USBD_CtlError>
      break;
 800ae88:	bf00      	nop
  }

  return ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_StdEPReq>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	889b      	ldrh	r3, [r3, #4]
 800a962:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a96c:	2b40      	cmp	r3, #64	@ 0x40
 800a96e:	d007      	beq.n	800a980 <USBD_StdEPReq+0x30>
 800a970:	2b40      	cmp	r3, #64	@ 0x40
 800a972:	f200 817f 	bhi.w	800ac74 <USBD_StdEPReq+0x324>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d02a      	beq.n	800a9d0 <USBD_StdEPReq+0x80>
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	f040 817a 	bne.w	800ac74 <USBD_StdEPReq+0x324>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aeb0:	2b40      	cmp	r3, #64	@ 0x40
 800aeb2:	d007      	beq.n	800aec4 <USBD_StdEPReq+0x30>
 800aeb4:	2b40      	cmp	r3, #64	@ 0x40
 800aeb6:	f200 817f 	bhi.w	800b1b8 <USBD_StdEPReq+0x324>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d02a      	beq.n	800af14 <USBD_StdEPReq+0x80>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	f040 817a 	bne.w	800b1b8 <USBD_StdEPReq+0x324>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
<<<<<<< HEAD
<<<<<<< HEAD
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fe85 	bl	800a694 <USBD_CoreFindEP>
 800a98a:	4603      	mov	r3, r0
 800a98c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a98e:	7b7b      	ldrb	r3, [r7, #13]
 800a990:	2bff      	cmp	r3, #255	@ 0xff
 800a992:	f000 8174 	beq.w	800ac7e <USBD_StdEPReq+0x32e>
 800a996:	7b7b      	ldrb	r3, [r7, #13]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f040 8170 	bne.w	800ac7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a99e:	7b7a      	ldrb	r2, [r7, #13]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9a6:	7b7a      	ldrb	r2, [r7, #13]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	32ae      	adds	r2, #174	@ 0xae
 800a9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 8163 	beq.w	800ac7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9b8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32ae      	adds	r2, #174	@ 0xae
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9ce:	e156      	b.n	800ac7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d008      	beq.n	800a9ea <USBD_StdEPReq+0x9a>
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	f300 8145 	bgt.w	800ac68 <USBD_StdEPReq+0x318>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 809b 	beq.w	800ab1a <USBD_StdEPReq+0x1ca>
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d03c      	beq.n	800aa62 <USBD_StdEPReq+0x112>
 800a9e8:	e13e      	b.n	800ac68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d002      	beq.n	800a9fc <USBD_StdEPReq+0xac>
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d016      	beq.n	800aa28 <USBD_StdEPReq+0xd8>
 800a9fa:	e02c      	b.n	800aa56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <USBD_StdEPReq+0xce>
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b80      	cmp	r3, #128	@ 0x80
 800aa06:	d00a      	beq.n	800aa1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f93d 	bl	800bc8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa12:	2180      	movs	r1, #128	@ 0x80
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f939 	bl	800bc8c <USBD_LL_StallEP>
 800aa1a:	bf00      	nop
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fe85 	bl	800abd8 <USBD_CoreFindEP>
 800aece:	4603      	mov	r3, r0
 800aed0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aed2:	7b7b      	ldrb	r3, [r7, #13]
 800aed4:	2bff      	cmp	r3, #255	@ 0xff
 800aed6:	f000 8174 	beq.w	800b1c2 <USBD_StdEPReq+0x32e>
 800aeda:	7b7b      	ldrb	r3, [r7, #13]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 8170 	bne.w	800b1c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aee2:	7b7a      	ldrb	r2, [r7, #13]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aeea:	7b7a      	ldrb	r2, [r7, #13]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	32ae      	adds	r2, #174	@ 0xae
 800aef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8163 	beq.w	800b1c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aefc:	7b7a      	ldrb	r2, [r7, #13]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	32ae      	adds	r2, #174	@ 0xae
 800af02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4798      	blx	r3
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af12:	e156      	b.n	800b1c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	785b      	ldrb	r3, [r3, #1]
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d008      	beq.n	800af2e <USBD_StdEPReq+0x9a>
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	f300 8145 	bgt.w	800b1ac <USBD_StdEPReq+0x318>
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 809b 	beq.w	800b05e <USBD_StdEPReq+0x1ca>
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d03c      	beq.n	800afa6 <USBD_StdEPReq+0x112>
 800af2c:	e13e      	b.n	800b1ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d002      	beq.n	800af40 <USBD_StdEPReq+0xac>
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d016      	beq.n	800af6c <USBD_StdEPReq+0xd8>
 800af3e:	e02c      	b.n	800af9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00d      	beq.n	800af62 <USBD_StdEPReq+0xce>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b80      	cmp	r3, #128	@ 0x80
 800af4a:	d00a      	beq.n	800af62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 f96f 	bl	800c234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af56:	2180      	movs	r1, #128	@ 0x80
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f96b 	bl	800c234 <USBD_LL_StallEP>
 800af5e:	bf00      	nop
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
<<<<<<< HEAD
 800aa1c:	e020      	b.n	800aa60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fc7a 	bl	800b31a <USBD_CtlError>
              break;
 800aa26:	e01b      	b.n	800aa60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	885b      	ldrh	r3, [r3, #2]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10e      	bne.n	800aa4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <USBD_StdEPReq+0xfe>
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b80      	cmp	r3, #128	@ 0x80
 800aa3a:	d008      	beq.n	800aa4e <USBD_StdEPReq+0xfe>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	88db      	ldrh	r3, [r3, #6]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d104      	bne.n	800aa4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f91f 	bl	800bc8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fd2e 	bl	800b4b0 <USBD_CtlSendStatus>

              break;
 800aa54:	e004      	b.n	800aa60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fc5e 	bl	800b31a <USBD_CtlError>
              break;
 800aa5e:	bf00      	nop
          }
          break;
 800aa60:	e107      	b.n	800ac72 <USBD_StdEPReq+0x322>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800af60:	e020      	b.n	800afa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fc7a 	bl	800b85e <USBD_CtlError>
              break;
 800af6a:	e01b      	b.n	800afa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	885b      	ldrh	r3, [r3, #2]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10e      	bne.n	800af92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <USBD_StdEPReq+0xfe>
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b80      	cmp	r3, #128	@ 0x80
 800af7e:	d008      	beq.n	800af92 <USBD_StdEPReq+0xfe>
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	88db      	ldrh	r3, [r3, #6]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 f951 	bl	800c234 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fd3a 	bl	800ba0c <USBD_CtlSendStatus>

              break;
 800af98:	e004      	b.n	800afa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fc5e 	bl	800b85e <USBD_CtlError>
              break;
 800afa2:	bf00      	nop
          }
          break;
 800afa4:	e107      	b.n	800b1b6 <USBD_StdEPReq+0x322>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
<<<<<<< HEAD
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d002      	beq.n	800aa74 <USBD_StdEPReq+0x124>
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d016      	beq.n	800aaa0 <USBD_StdEPReq+0x150>
 800aa72:	e04b      	b.n	800ab0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00d      	beq.n	800aa96 <USBD_StdEPReq+0x146>
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b80      	cmp	r3, #128	@ 0x80
 800aa7e:	d00a      	beq.n	800aa96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 f901 	bl	800bc8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa8a:	2180      	movs	r1, #128	@ 0x80
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f001 f8fd 	bl	800bc8c <USBD_LL_StallEP>
 800aa92:	bf00      	nop
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d002      	beq.n	800afb8 <USBD_StdEPReq+0x124>
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d016      	beq.n	800afe4 <USBD_StdEPReq+0x150>
 800afb6:	e04b      	b.n	800b050 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00d      	beq.n	800afda <USBD_StdEPReq+0x146>
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
 800afc0:	2b80      	cmp	r3, #128	@ 0x80
 800afc2:	d00a      	beq.n	800afda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 f933 	bl	800c234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afce:	2180      	movs	r1, #128	@ 0x80
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 f92f 	bl	800c234 <USBD_LL_StallEP>
 800afd6:	bf00      	nop
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
<<<<<<< HEAD
 800aa94:	e040      	b.n	800ab18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fc3e 	bl	800b31a <USBD_CtlError>
              break;
 800aa9e:	e03b      	b.n	800ab18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	885b      	ldrh	r3, [r3, #2]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d136      	bne.n	800ab16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f001 f907 	bl	800bcca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fcf7 	bl	800b4b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fde4 	bl	800a694 <USBD_CoreFindEP>
 800aacc:	4603      	mov	r3, r0
 800aace:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aad0:	7b7b      	ldrb	r3, [r7, #13]
 800aad2:	2bff      	cmp	r3, #255	@ 0xff
 800aad4:	d01f      	beq.n	800ab16 <USBD_StdEPReq+0x1c6>
 800aad6:	7b7b      	ldrb	r3, [r7, #13]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d11c      	bne.n	800ab16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aadc:	7b7a      	ldrb	r2, [r7, #13]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aae4:	7b7a      	ldrb	r2, [r7, #13]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	32ae      	adds	r2, #174	@ 0xae
 800aaea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d010      	beq.n	800ab16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aaf4:	7b7a      	ldrb	r2, [r7, #13]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	32ae      	adds	r2, #174	@ 0xae
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	4798      	blx	r3
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800afd8:	e040      	b.n	800b05c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fc3e 	bl	800b85e <USBD_CtlError>
              break;
 800afe2:	e03b      	b.n	800b05c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	885b      	ldrh	r3, [r3, #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d136      	bne.n	800b05a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 f939 	bl	800c272 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fd03 	bl	800ba0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff fde4 	bl	800abd8 <USBD_CoreFindEP>
 800b010:	4603      	mov	r3, r0
 800b012:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b014:	7b7b      	ldrb	r3, [r7, #13]
 800b016:	2bff      	cmp	r3, #255	@ 0xff
 800b018:	d01f      	beq.n	800b05a <USBD_StdEPReq+0x1c6>
 800b01a:	7b7b      	ldrb	r3, [r7, #13]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11c      	bne.n	800b05a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b020:	7b7a      	ldrb	r2, [r7, #13]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b028:	7b7a      	ldrb	r2, [r7, #13]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	32ae      	adds	r2, #174	@ 0xae
 800b02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d010      	beq.n	800b05a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b038:	7b7a      	ldrb	r2, [r7, #13]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32ae      	adds	r2, #174	@ 0xae
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                  }
                }
              }
              break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ab0a:	e004      	b.n	800ab16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fc03 	bl	800b31a <USBD_CtlError>
              break;
 800ab14:	e000      	b.n	800ab18 <USBD_StdEPReq+0x1c8>
              break;
 800ab16:	bf00      	nop
          }
          break;
 800ab18:	e0ab      	b.n	800ac72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d002      	beq.n	800ab2c <USBD_StdEPReq+0x1dc>
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d032      	beq.n	800ab90 <USBD_StdEPReq+0x240>
 800ab2a:	e097      	b.n	800ac5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d007      	beq.n	800ab42 <USBD_StdEPReq+0x1f2>
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b80      	cmp	r3, #128	@ 0x80
 800ab36:	d004      	beq.n	800ab42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fbed 	bl	800b31a <USBD_CtlError>
                break;
 800ab40:	e091      	b.n	800ac66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da0b      	bge.n	800ab62 <USBD_StdEPReq+0x212>
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab50:	4613      	mov	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	3310      	adds	r3, #16
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3304      	adds	r3, #4
 800ab60:	e00b      	b.n	800ab7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	4413      	add	r3, r2
 800ab78:	3304      	adds	r3, #4
 800ab7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2202      	movs	r2, #2
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fc37 	bl	800b3fc <USBD_CtlSendData>
              break;
 800ab8e:	e06a      	b.n	800ac66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	da11      	bge.n	800abbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	f003 020f 	and.w	r2, r3, #15
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	3324      	adds	r3, #36	@ 0x24
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d117      	bne.n	800abe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fbb0 	bl	800b31a <USBD_CtlError>
                  break;
 800abba:	e054      	b.n	800ac66 <USBD_StdEPReq+0x316>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b04e:	e004      	b.n	800b05a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fc03 	bl	800b85e <USBD_CtlError>
              break;
 800b058:	e000      	b.n	800b05c <USBD_StdEPReq+0x1c8>
              break;
 800b05a:	bf00      	nop
          }
          break;
 800b05c:	e0ab      	b.n	800b1b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d002      	beq.n	800b070 <USBD_StdEPReq+0x1dc>
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d032      	beq.n	800b0d4 <USBD_StdEPReq+0x240>
 800b06e:	e097      	b.n	800b1a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d007      	beq.n	800b086 <USBD_StdEPReq+0x1f2>
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b80      	cmp	r3, #128	@ 0x80
 800b07a:	d004      	beq.n	800b086 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fbed 	bl	800b85e <USBD_CtlError>
                break;
 800b084:	e091      	b.n	800b1aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da0b      	bge.n	800b0a6 <USBD_StdEPReq+0x212>
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	3310      	adds	r3, #16
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	e00b      	b.n	800b0be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	3304      	adds	r3, #4
 800b0be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc43 	bl	800b958 <USBD_CtlSendData>
              break;
 800b0d2:	e06a      	b.n	800b1aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	da11      	bge.n	800b100 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 020f 	and.w	r2, r3, #15
 800b0e2:	6879      	ldr	r1, [r7, #4]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	3324      	adds	r3, #36	@ 0x24
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d117      	bne.n	800b126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fbb0 	bl	800b85e <USBD_CtlError>
                  break;
 800b0fe:	e054      	b.n	800b1aa <USBD_StdEPReq+0x316>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	f003 020f 	and.w	r2, r3, #15
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d104      	bne.n	800abe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fb9d 	bl	800b31a <USBD_CtlError>
                  break;
 800abe0:	e041      	b.n	800ac66 <USBD_StdEPReq+0x316>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	f003 020f 	and.w	r2, r3, #15
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	440b      	add	r3, r1
 800b112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb9d 	bl	800b85e <USBD_CtlError>
                  break;
 800b124:	e041      	b.n	800b1aa <USBD_StdEPReq+0x316>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
<<<<<<< HEAD
 800abe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da0b      	bge.n	800ac02 <USBD_StdEPReq+0x2b2>
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	3310      	adds	r3, #16
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	3304      	adds	r3, #4
 800ac00:	e00b      	b.n	800ac1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	4413      	add	r3, r2
 800ac18:	3304      	adds	r3, #4
 800ac1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <USBD_StdEPReq+0x2d8>
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b80      	cmp	r3, #128	@ 0x80
 800ac26:	d103      	bne.n	800ac30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	e00e      	b.n	800ac4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 f867 	bl	800bd08 <USBD_LL_IsStallEP>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2201      	movs	r2, #1
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	e002      	b.n	800ac4e <USBD_StdEPReq+0x2fe>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da0b      	bge.n	800b146 <USBD_StdEPReq+0x2b2>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	3310      	adds	r3, #16
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	4413      	add	r3, r2
 800b142:	3304      	adds	r3, #4
 800b144:	e00b      	b.n	800b15e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	4413      	add	r3, r2
 800b15c:	3304      	adds	r3, #4
 800b15e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <USBD_StdEPReq+0x2d8>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b80      	cmp	r3, #128	@ 0x80
 800b16a:	d103      	bne.n	800b174 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e00e      	b.n	800b192 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 f899 	bl	800c2b0 <USBD_LL_IsStallEP>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2201      	movs	r2, #1
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	e002      	b.n	800b192 <USBD_StdEPReq+0x2fe>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
<<<<<<< HEAD
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2202      	movs	r2, #2
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fbd1 	bl	800b3fc <USBD_CtlSendData>
              break;
 800ac5a:	e004      	b.n	800ac66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb5b 	bl	800b31a <USBD_CtlError>
              break;
 800ac64:	bf00      	nop
          }
          break;
 800ac66:	e004      	b.n	800ac72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb55 	bl	800b31a <USBD_CtlError>
          break;
 800ac70:	bf00      	nop
      }
      break;
 800ac72:	e005      	b.n	800ac80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fb4f 	bl	800b31a <USBD_CtlError>
      break;
 800ac7c:	e000      	b.n	800ac80 <USBD_StdEPReq+0x330>
      break;
 800ac7e:	bf00      	nop
  }

  return ret;
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <USBD_GetDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2202      	movs	r2, #2
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fbdd 	bl	800b958 <USBD_CtlSendData>
              break;
 800b19e:	e004      	b.n	800b1aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fb5b 	bl	800b85e <USBD_CtlError>
              break;
 800b1a8:	bf00      	nop
          }
          break;
 800b1aa:	e004      	b.n	800b1b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fb55 	bl	800b85e <USBD_CtlError>
          break;
 800b1b4:	bf00      	nop
      }
      break;
 800b1b6:	e005      	b.n	800b1c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fb4f 	bl	800b85e <USBD_CtlError>
      break;
 800b1c0:	e000      	b.n	800b1c4 <USBD_StdEPReq+0x330>
      break;
 800b1c2:	bf00      	nop
  }

  return ret;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <USBD_GetDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	885b      	ldrh	r3, [r3, #2]
 800aca6:	0a1b      	lsrs	r3, r3, #8
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	3b01      	subs	r3, #1
 800acac:	2b06      	cmp	r3, #6
 800acae:	f200 8128 	bhi.w	800af02 <USBD_GetDescriptor+0x276>
 800acb2:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <USBD_GetDescriptor+0x2c>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800acd5 	.word	0x0800acd5
 800acbc:	0800aced 	.word	0x0800aced
 800acc0:	0800ad2d 	.word	0x0800ad2d
 800acc4:	0800af03 	.word	0x0800af03
 800acc8:	0800af03 	.word	0x0800af03
 800accc:	0800aea3 	.word	0x0800aea3
 800acd0:	0800aecf 	.word	0x0800aecf
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	885b      	ldrh	r3, [r3, #2]
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	2b06      	cmp	r3, #6
 800b1f2:	f200 8128 	bhi.w	800b446 <USBD_GetDescriptor+0x276>
 800b1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1fc <USBD_GetDescriptor+0x2c>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b219 	.word	0x0800b219
 800b200:	0800b231 	.word	0x0800b231
 800b204:	0800b271 	.word	0x0800b271
 800b208:	0800b447 	.word	0x0800b447
 800b20c:	0800b447 	.word	0x0800b447
 800b210:	0800b3e7 	.word	0x0800b3e7
 800b214:	0800b413 	.word	0x0800b413
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
<<<<<<< HEAD
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
      break;
 800acea:	e112      	b.n	800af12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7c1b      	ldrb	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10d      	bne.n	800ad10 <USBD_GetDescriptor+0x84>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
      break;
 800b22e:	e112      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7c1b      	ldrb	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10d      	bne.n	800b254 <USBD_GetDescriptor+0x84>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
<<<<<<< HEAD
<<<<<<< HEAD
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfc:	f107 0208 	add.w	r2, r7, #8
 800ad00:	4610      	mov	r0, r2
 800ad02:	4798      	blx	r3
 800ad04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	701a      	strb	r2, [r3, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	2202      	movs	r2, #2
 800b250:	701a      	strb	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ad0e:	e100      	b.n	800af12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	f107 0208 	add.w	r2, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	2202      	movs	r2, #2
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	e0f2      	b.n	800af12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	885b      	ldrh	r3, [r3, #2]
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	f200 80ac 	bhi.w	800ae90 <USBD_GetDescriptor+0x204>
 800ad38:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <USBD_GetDescriptor+0xb4>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ad59 	.word	0x0800ad59
 800ad44:	0800ad8d 	.word	0x0800ad8d
 800ad48:	0800adc1 	.word	0x0800adc1
 800ad4c:	0800adf5 	.word	0x0800adf5
 800ad50:	0800ae29 	.word	0x0800ae29
 800ad54:	0800ae5d 	.word	0x0800ae5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7c12      	ldrb	r2, [r2, #16]
 800ad70:	f107 0108 	add.w	r1, r7, #8
 800ad74:	4610      	mov	r0, r2
 800ad76:	4798      	blx	r3
 800ad78:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b252:	e100      	b.n	800b456 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25c:	f107 0208 	add.w	r2, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	2202      	movs	r2, #2
 800b26c:	701a      	strb	r2, [r3, #0]
      break;
 800b26e:	e0f2      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b05      	cmp	r3, #5
 800b278:	f200 80ac 	bhi.w	800b3d4 <USBD_GetDescriptor+0x204>
 800b27c:	a201      	add	r2, pc, #4	@ (adr r2, 800b284 <USBD_GetDescriptor+0xb4>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b29d 	.word	0x0800b29d
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b305 	.word	0x0800b305
 800b290:	0800b339 	.word	0x0800b339
 800b294:	0800b36d 	.word	0x0800b36d
 800b298:	0800b3a1 	.word	0x0800b3a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ad7a:	e091      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 facb 	bl	800b31a <USBD_CtlError>
            err++;
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	3301      	adds	r3, #1
 800ad88:	72fb      	strb	r3, [r7, #11]
          break;
 800ad8a:	e089      	b.n	800aea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	7c12      	ldrb	r2, [r2, #16]
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b2be:	e091      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 facb 	bl	800b85e <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e089      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800adae:	e077      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fab1 	bl	800b31a <USBD_CtlError>
            err++;
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	3301      	adds	r3, #1
 800adbc:	72fb      	strb	r3, [r7, #11]
          break;
 800adbe:	e06f      	b.n	800aea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7c12      	ldrb	r2, [r2, #16]
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b2f2:	e077      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fab1 	bl	800b85e <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e06f      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ade2:	e05d      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa97 	bl	800b31a <USBD_CtlError>
            err++;
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	3301      	adds	r3, #1
 800adf0:	72fb      	strb	r3, [r7, #11]
          break;
 800adf2:	e055      	b.n	800aea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00b      	beq.n	800ae18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	7c12      	ldrb	r2, [r2, #16]
 800ae0c:	f107 0108 	add.w	r1, r7, #8
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b326:	e05d      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa97 	bl	800b85e <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e055      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ae16:	e043      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa7d 	bl	800b31a <USBD_CtlError>
            err++;
 800ae20:	7afb      	ldrb	r3, [r7, #11]
 800ae22:	3301      	adds	r3, #1
 800ae24:	72fb      	strb	r3, [r7, #11]
          break;
 800ae26:	e03b      	b.n	800aea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	7c12      	ldrb	r2, [r2, #16]
 800ae40:	f107 0108 	add.w	r1, r7, #8
 800ae44:	4610      	mov	r0, r2
 800ae46:	4798      	blx	r3
 800ae48:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b35a:	e043      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa7d 	bl	800b85e <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e03b      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ae4a:	e029      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa63 	bl	800b31a <USBD_CtlError>
            err++;
 800ae54:	7afb      	ldrb	r3, [r7, #11]
 800ae56:	3301      	adds	r3, #1
 800ae58:	72fb      	strb	r3, [r7, #11]
          break;
 800ae5a:	e021      	b.n	800aea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	7c12      	ldrb	r2, [r2, #16]
 800ae74:	f107 0108 	add.w	r1, r7, #8
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b38e:	e029      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa63 	bl	800b85e <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e021      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
<<<<<<< HEAD
 800ae7e:	e00f      	b.n	800aea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa49 	bl	800b31a <USBD_CtlError>
            err++;
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8e:	e007      	b.n	800aea0 <USBD_GetDescriptor+0x214>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b3c2:	e00f      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa49 	bl	800b85e <USBD_CtlError>
            err++;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d2:	e007      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
<<<<<<< HEAD
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa41 	bl	800b31a <USBD_CtlError>
          err++;
 800ae98:	7afb      	ldrb	r3, [r7, #11]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae9e:	bf00      	nop
      }
      break;
 800aea0:	e037      	b.n	800af12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	7c1b      	ldrb	r3, [r3, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <USBD_GetDescriptor+0x232>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa41 	bl	800b85e <USBD_CtlError>
          err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3e2:	bf00      	nop
      }
      break;
 800b3e4:	e037      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_GetDescriptor+0x232>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
<<<<<<< HEAD
<<<<<<< HEAD
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb2:	f107 0208 	add.w	r2, r7, #8
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	4798      	blx	r3
 800aeba:	60f8      	str	r0, [r7, #12]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
 800b3fe:	60f8      	str	r0, [r7, #12]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800aebc:	e029      	b.n	800af12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa2a 	bl	800b31a <USBD_CtlError>
        err++;
 800aec6:	7afb      	ldrb	r3, [r7, #11]
 800aec8:	3301      	adds	r3, #1
 800aeca:	72fb      	strb	r3, [r7, #11]
      break;
 800aecc:	e021      	b.n	800af12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	7c1b      	ldrb	r3, [r3, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10d      	bne.n	800aef2 <USBD_GetDescriptor+0x266>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b400:	e029      	b.n	800b456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fa2a 	bl	800b85e <USBD_CtlError>
        err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
      break;
 800b410:	e021      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10d      	bne.n	800b436 <USBD_GetDescriptor+0x266>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
<<<<<<< HEAD
<<<<<<< HEAD
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aede:	f107 0208 	add.w	r2, r7, #8
 800aee2:	4610      	mov	r0, r2
 800aee4:	4798      	blx	r3
 800aee6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	2207      	movs	r2, #7
 800aeee:	701a      	strb	r2, [r3, #0]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	2207      	movs	r2, #7
 800b432:	701a      	strb	r2, [r3, #0]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800aef0:	e00f      	b.n	800af12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa10 	bl	800b31a <USBD_CtlError>
        err++;
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	3301      	adds	r3, #1
 800aefe:	72fb      	strb	r3, [r7, #11]
      break;
 800af00:	e007      	b.n	800af12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa08 	bl	800b31a <USBD_CtlError>
      err++;
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	3301      	adds	r3, #1
 800af0e:	72fb      	strb	r3, [r7, #11]
      break;
 800af10:	bf00      	nop
  }

  if (err != 0U)
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11e      	bne.n	800af56 <USBD_GetDescriptor+0x2ca>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b434:	e00f      	b.n	800b456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa10 	bl	800b85e <USBD_CtlError>
        err++;
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	3301      	adds	r3, #1
 800b442:	72fb      	strb	r3, [r7, #11]
      break;
 800b444:	e007      	b.n	800b456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa08 	bl	800b85e <USBD_CtlError>
      err++;
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	3301      	adds	r3, #1
 800b452:	72fb      	strb	r3, [r7, #11]
      break;
 800b454:	bf00      	nop
  }

  if (err != 0U)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11e      	bne.n	800b49a <USBD_GetDescriptor+0x2ca>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	88db      	ldrh	r3, [r3, #6]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d016      	beq.n	800af4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af20:	893b      	ldrh	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88da      	ldrh	r2, [r3, #6]
 800af2a:	893b      	ldrh	r3, [r7, #8]
 800af2c:	4293      	cmp	r3, r2
 800af2e:	bf28      	it	cs
 800af30:	4613      	movcs	r3, r2
 800af32:	b29b      	uxth	r3, r3
 800af34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af36:	893b      	ldrh	r3, [r7, #8]
 800af38:	461a      	mov	r2, r3
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fa5d 	bl	800b3fc <USBD_CtlSendData>
 800af42:	e009      	b.n	800af58 <USBD_GetDescriptor+0x2cc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	88db      	ldrh	r3, [r3, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b464:	893b      	ldrh	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88da      	ldrh	r2, [r3, #6]
 800b46e:	893b      	ldrh	r3, [r7, #8]
 800b470:	4293      	cmp	r3, r2
 800b472:	bf28      	it	cs
 800b474:	4613      	movcs	r3, r2
 800b476:	b29b      	uxth	r3, r3
 800b478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b47a:	893b      	ldrh	r3, [r7, #8]
 800b47c:	461a      	mov	r2, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa69 	bl	800b958 <USBD_CtlSendData>
 800b486:	e009      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< HEAD
<<<<<<< HEAD
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f9e7 	bl	800b31a <USBD_CtlError>
 800af4c:	e004      	b.n	800af58 <USBD_GetDescriptor+0x2cc>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9e7 	bl	800b85e <USBD_CtlError>
 800b490:	e004      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
<<<<<<< HEAD
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 faae 	bl	800b4b0 <USBD_CtlSendStatus>
 800af54:	e000      	b.n	800af58 <USBD_GetDescriptor+0x2cc>
    return;
 800af56:	bf00      	nop
  }
}
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop

0800af60 <USBD_SetAddress>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 faba 	bl	800ba0c <USBD_CtlSendStatus>
 800b498:	e000      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
    return;
 800b49a:	bf00      	nop
  }
}
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop

0800b4a4 <USBD_SetAddress>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	889b      	ldrh	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d131      	bne.n	800afd6 <USBD_SetAddress+0x76>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	88db      	ldrh	r3, [r3, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d12d      	bne.n	800afd6 <USBD_SetAddress+0x76>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	885b      	ldrh	r3, [r3, #2]
 800af7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800af80:	d829      	bhi.n	800afd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	885b      	ldrh	r3, [r3, #2]
 800af86:	b2db      	uxtb	r3, r3
 800af88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b03      	cmp	r3, #3
 800af98:	d104      	bne.n	800afa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f9bc 	bl	800b31a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa2:	e01d      	b.n	800afe0 <USBD_SetAddress+0x80>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d131      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12d      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	885b      	ldrh	r3, [r3, #2]
 800b4c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4c4:	d829      	bhi.n	800b51a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d104      	bne.n	800b4e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f9bc 	bl	800b85e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e01d      	b.n	800b524 <USBD_SetAddress+0x80>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
<<<<<<< HEAD
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7bfa      	ldrb	r2, [r7, #15]
 800afa8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afac:	7bfb      	ldrb	r3, [r7, #15]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fed5 	bl	800bd60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fa7a 	bl	800b4b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afca:	e009      	b.n	800afe0 <USBD_SetAddress+0x80>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7bfa      	ldrb	r2, [r7, #15]
 800b4ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 ff07 	bl	800c308 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa86 	bl	800ba0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	e009      	b.n	800b524 <USBD_SetAddress+0x80>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
<<<<<<< HEAD
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd4:	e004      	b.n	800afe0 <USBD_SetAddress+0x80>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b518:	e004      	b.n	800b524 <USBD_SetAddress+0x80>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
<<<<<<< HEAD
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f99e 	bl	800b31a <USBD_CtlError>
  }
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_SetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f99e 	bl	800b85e <USBD_CtlError>
  }
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_SetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	885b      	ldrh	r3, [r3, #2]
 800affa:	b2da      	uxtb	r2, r3
 800affc:	4b4e      	ldr	r3, [pc, #312]	@ (800b138 <USBD_SetConfig+0x150>)
 800affe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b000:	4b4d      	ldr	r3, [pc, #308]	@ (800b138 <USBD_SetConfig+0x150>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d905      	bls.n	800b014 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f985 	bl	800b31a <USBD_CtlError>
    return USBD_FAIL;
 800b010:	2303      	movs	r3, #3
 800b012:	e08c      	b.n	800b12e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d002      	beq.n	800b026 <USBD_SetConfig+0x3e>
 800b020:	2b03      	cmp	r3, #3
 800b022:	d029      	beq.n	800b078 <USBD_SetConfig+0x90>
 800b024:	e075      	b.n	800b112 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b026:	4b44      	ldr	r3, [pc, #272]	@ (800b138 <USBD_SetConfig+0x150>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d020      	beq.n	800b070 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b02e:	4b42      	ldr	r3, [pc, #264]	@ (800b138 <USBD_SetConfig+0x150>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b038:	4b3f      	ldr	r3, [pc, #252]	@ (800b138 <USBD_SetConfig+0x150>)
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7fe ffe3 	bl	800a00a <USBD_SetClassConfig>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d008      	beq.n	800b060 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f962 	bl	800b31a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2202      	movs	r2, #2
 800b05a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	4b4e      	ldr	r3, [pc, #312]	@ (800b67c <USBD_SetConfig+0x150>)
 800b542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b544:	4b4d      	ldr	r3, [pc, #308]	@ (800b67c <USBD_SetConfig+0x150>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d905      	bls.n	800b558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f985 	bl	800b85e <USBD_CtlError>
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e08c      	b.n	800b672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d002      	beq.n	800b56a <USBD_SetConfig+0x3e>
 800b564:	2b03      	cmp	r3, #3
 800b566:	d029      	beq.n	800b5bc <USBD_SetConfig+0x90>
 800b568:	e075      	b.n	800b656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b56a:	4b44      	ldr	r3, [pc, #272]	@ (800b67c <USBD_SetConfig+0x150>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d020      	beq.n	800b5b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b572:	4b42      	ldr	r3, [pc, #264]	@ (800b67c <USBD_SetConfig+0x150>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b57c:	4b3f      	ldr	r3, [pc, #252]	@ (800b67c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7fe ffe3 	bl	800a54e <USBD_SetClassConfig>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f962 	bl	800b85e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800b05e:	e065      	b.n	800b12c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fa25 	bl	800b4b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2203      	movs	r2, #3
 800b06a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b06e:	e05d      	b.n	800b12c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fa1d 	bl	800b4b0 <USBD_CtlSendStatus>
      break;
 800b076:	e059      	b.n	800b12c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b078:	4b2f      	ldr	r3, [pc, #188]	@ (800b138 <USBD_SetConfig+0x150>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d112      	bne.n	800b0a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b088:	4b2b      	ldr	r3, [pc, #172]	@ (800b138 <USBD_SetConfig+0x150>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b092:	4b29      	ldr	r3, [pc, #164]	@ (800b138 <USBD_SetConfig+0x150>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7fe ffd2 	bl	800a042 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa06 	bl	800b4b0 <USBD_CtlSendStatus>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b5a2:	e065      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa31 	bl	800ba0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5b2:	e05d      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa29 	bl	800ba0c <USBD_CtlSendStatus>
      break;
 800b5ba:	e059      	b.n	800b670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	@ (800b67c <USBD_SetConfig+0x150>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d112      	bne.n	800b5ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b67c <USBD_SetConfig+0x150>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5d6:	4b29      	ldr	r3, [pc, #164]	@ (800b67c <USBD_SetConfig+0x150>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7fe ffd2 	bl	800a586 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa12 	bl	800ba0c <USBD_CtlSendStatus>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 800b0a4:	e042      	b.n	800b12c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0a6:	4b24      	ldr	r3, [pc, #144]	@ (800b138 <USBD_SetConfig+0x150>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d02a      	beq.n	800b10a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7fe ffc0 	bl	800a042 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b138 <USBD_SetConfig+0x150>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b138 <USBD_SetConfig+0x150>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe ff99 	bl	800a00a <USBD_SetClassConfig>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00f      	beq.n	800b102 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f918 	bl	800b31a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fe ffa5 	bl	800a042 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b100:	e014      	b.n	800b12c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f9d4 	bl	800b4b0 <USBD_CtlSendStatus>
      break;
 800b108:	e010      	b.n	800b12c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f9d0 	bl	800b4b0 <USBD_CtlSendStatus>
      break;
 800b110:	e00c      	b.n	800b12c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f900 	bl	800b31a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b11a:	4b07      	ldr	r3, [pc, #28]	@ (800b138 <USBD_SetConfig+0x150>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fe ff8e 	bl	800a042 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	73fb      	strb	r3, [r7, #15]
      break;
 800b12a:	bf00      	nop
  }

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	200006fc 	.word	0x200006fc

0800b13c <USBD_GetConfig>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b5e8:	e042      	b.n	800b670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5ea:	4b24      	ldr	r3, [pc, #144]	@ (800b67c <USBD_SetConfig+0x150>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d02a      	beq.n	800b64e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe ffc0 	bl	800a586 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b606:	4b1d      	ldr	r3, [pc, #116]	@ (800b67c <USBD_SetConfig+0x150>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b610:	4b1a      	ldr	r3, [pc, #104]	@ (800b67c <USBD_SetConfig+0x150>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fe ff99 	bl	800a54e <USBD_SetClassConfig>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f918 	bl	800b85e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe ffa5 	bl	800a586 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b644:	e014      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9e0 	bl	800ba0c <USBD_CtlSendStatus>
      break;
 800b64c:	e010      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9dc 	bl	800ba0c <USBD_CtlSendStatus>
      break;
 800b654:	e00c      	b.n	800b670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f900 	bl	800b85e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <USBD_SetConfig+0x150>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe ff8e 	bl	800a586 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	73fb      	strb	r3, [r7, #15]
      break;
 800b66e:	bf00      	nop
  }

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000724 	.word	0x20000724

0800b680 <USBD_GetConfig>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d004      	beq.n	800b158 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f8e2 	bl	800b31a <USBD_CtlError>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	88db      	ldrh	r3, [r3, #6]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d004      	beq.n	800b69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8e2 	bl	800b85e <USBD_CtlError>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 800b156:	e023      	b.n	800b1a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	dc02      	bgt.n	800b16a <USBD_GetConfig+0x2e>
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc03      	bgt.n	800b170 <USBD_GetConfig+0x34>
 800b168:	e015      	b.n	800b196 <USBD_GetConfig+0x5a>
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d00b      	beq.n	800b186 <USBD_GetConfig+0x4a>
 800b16e:	e012      	b.n	800b196 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3308      	adds	r3, #8
 800b17a:	2201      	movs	r2, #1
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f93c 	bl	800b3fc <USBD_CtlSendData>
        break;
 800b184:	e00c      	b.n	800b1a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3304      	adds	r3, #4
 800b18a:	2201      	movs	r2, #1
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f934 	bl	800b3fc <USBD_CtlSendData>
        break;
 800b194:	e004      	b.n	800b1a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f8be 	bl	800b31a <USBD_CtlError>
        break;
 800b19e:	bf00      	nop
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_GetStatus>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b69a:	e023      	b.n	800b6e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	dc02      	bgt.n	800b6ae <USBD_GetConfig+0x2e>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc03      	bgt.n	800b6b4 <USBD_GetConfig+0x34>
 800b6ac:	e015      	b.n	800b6da <USBD_GetConfig+0x5a>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d00b      	beq.n	800b6ca <USBD_GetConfig+0x4a>
 800b6b2:	e012      	b.n	800b6da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f948 	bl	800b958 <USBD_CtlSendData>
        break;
 800b6c8:	e00c      	b.n	800b6e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f940 	bl	800b958 <USBD_CtlSendData>
        break;
 800b6d8:	e004      	b.n	800b6e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8be 	bl	800b85e <USBD_CtlError>
        break;
 800b6e2:	bf00      	nop
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_GetStatus>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d81e      	bhi.n	800b1fe <USBD_GetStatus+0x56>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b02      	cmp	r3, #2
 800b702:	d81e      	bhi.n	800b742 <USBD_GetStatus+0x56>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
<<<<<<< HEAD
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	88db      	ldrh	r3, [r3, #6]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d004      	beq.n	800b1d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f8a5 	bl	800b31a <USBD_CtlError>
        break;
 800b1d0:	e01a      	b.n	800b208 <USBD_GetStatus+0x60>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	88db      	ldrh	r3, [r3, #6]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d004      	beq.n	800b716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8a5 	bl	800b85e <USBD_CtlError>
        break;
 800b714:	e01a      	b.n	800b74c <USBD_GetStatus+0x60>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
<<<<<<< HEAD
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	60da      	str	r2, [r3, #12]
=======
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	60da      	str	r2, [r3, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	60da      	str	r2, [r3, #12]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f043 0202 	orr.w	r2, r3, #2
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	330c      	adds	r3, #12
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f900 	bl	800b3fc <USBD_CtlSendData>
      break;
 800b1fc:	e004      	b.n	800b208 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f88a 	bl	800b31a <USBD_CtlError>
      break;
 800b206:	bf00      	nop
  }
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_SetFeature>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f043 0202 	orr.w	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	330c      	adds	r3, #12
 800b736:	2202      	movs	r2, #2
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f90c 	bl	800b958 <USBD_CtlSendData>
      break;
 800b740:	e004      	b.n	800b74c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f88a 	bl	800b85e <USBD_CtlError>
      break;
 800b74a:	bf00      	nop
  }
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_SetFeature>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d107      	bne.n	800b232 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f940 	bl	800b4b0 <USBD_CtlSendStatus>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d107      	bne.n	800b776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f94c 	bl	800ba0c <USBD_CtlSendStatus>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 800b230:	e013      	b.n	800b25a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d10b      	bne.n	800b252 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	889b      	ldrh	r3, [r3, #4]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	b2da      	uxtb	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f930 	bl	800b4b0 <USBD_CtlSendStatus>
}
 800b250:	e003      	b.n	800b25a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f860 	bl	800b31a <USBD_CtlError>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_ClrFeature>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b774:	e013      	b.n	800b79e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d10b      	bne.n	800b796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	889b      	ldrh	r3, [r3, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	b2da      	uxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f93c 	bl	800ba0c <USBD_CtlSendStatus>
}
 800b794:	e003      	b.n	800b79e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f860 	bl	800b85e <USBD_CtlError>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_ClrFeature>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b272:	b2db      	uxtb	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	2b02      	cmp	r3, #2
 800b278:	d80b      	bhi.n	800b292 <USBD_ClrFeature+0x30>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d80b      	bhi.n	800b7d6 <USBD_ClrFeature+0x30>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
<<<<<<< HEAD
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	885b      	ldrh	r3, [r3, #2]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d10c      	bne.n	800b29c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f910 	bl	800b4b0 <USBD_CtlSendStatus>
      }
      break;
 800b290:	e004      	b.n	800b29c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f840 	bl	800b31a <USBD_CtlError>
      break;
 800b29a:	e000      	b.n	800b29e <USBD_ClrFeature+0x3c>
      break;
 800b29c:	bf00      	nop
  }
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d10c      	bne.n	800b7e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f91c 	bl	800ba0c <USBD_CtlSendStatus>
      }
      break;
 800b7d4:	e004      	b.n	800b7e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f840 	bl	800b85e <USBD_CtlError>
      break;
 800b7de:	e000      	b.n	800b7e2 <USBD_ClrFeature+0x3c>
      break;
 800b7e0:	bf00      	nop
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_ParseSetupRequest>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	781a      	ldrb	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f7ff fa40 	bl	800a756 <SWAPBYTE>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7ff fa33 	bl	800a756 <SWAPBYTE>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3301      	adds	r3, #1
 800b302:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff fa26 	bl	800a756 <SWAPBYTE>
 800b30a:	4603      	mov	r3, r0
 800b30c:	461a      	mov	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	80da      	strh	r2, [r3, #6]
}
 800b312:	bf00      	nop
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBD_CtlError>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fa40 	bl	800ac9a <SWAPBYTE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fa33 	bl	800ac9a <SWAPBYTE>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3301      	adds	r3, #1
 800b846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fa26 	bl	800ac9a <SWAPBYTE>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	80da      	strh	r2, [r3, #6]
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlError>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b324:	2180      	movs	r1, #128	@ 0x80
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fcb0 	bl	800bc8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b32c:	2100      	movs	r1, #0
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fcac 	bl	800bc8c <USBD_LL_StallEP>
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <USBD_GetString>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b868:	2180      	movs	r1, #128	@ 0x80
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fce2 	bl	800c234 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fcde 	bl	800c234 <USBD_LL_StallEP>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetString>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b348:	2300      	movs	r3, #0
 800b34a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d036      	beq.n	800b3c0 <USBD_GetString+0x84>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d042      	beq.n	800b91c <USBD_GetString+0x9c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
    return;
  }

  pdesc = desc;
<<<<<<< HEAD
<<<<<<< HEAD
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b356:	6938      	ldr	r0, [r7, #16]
 800b358:	f000 f836 	bl	800b3c8 <USBD_GetLen>
 800b35c:	4603      	mov	r3, r0
 800b35e:	3301      	adds	r3, #1
 800b360:	b29b      	uxth	r3, r3
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b36a:	7dfb      	ldrb	r3, [r7, #23]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	4413      	add	r3, r2
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7812      	ldrb	r2, [r2, #0]
 800b374:	701a      	strb	r2, [r3, #0]
  idx++;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	3301      	adds	r3, #1
 800b37a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	4413      	add	r3, r2
 800b382:	2203      	movs	r2, #3
 800b384:	701a      	strb	r2, [r3, #0]
  idx++;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	3301      	adds	r3, #1
 800b38a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b38c:	e013      	b.n	800b3b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	4413      	add	r3, r2
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	7812      	ldrb	r2, [r2, #0]
 800b398:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3301      	adds	r3, #1
 800b39e:	613b      	str	r3, [r7, #16]
    idx++;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e7      	bne.n	800b38e <USBD_GetString+0x52>
 800b3be:	e000      	b.n	800b3c2 <USBD_GetString+0x86>
    return;
 800b3c0:	bf00      	nop
  }
}
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_GetLen>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f000 f842 	bl	800b924 <USBD_GetLen>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8aa:	d808      	bhi.n	800b8be <USBD_GetString+0x3e>
 800b8ac:	6938      	ldr	r0, [r7, #16]
 800b8ae:	f000 f839 	bl	800b924 <USBD_GetLen>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	e001      	b.n	800b8c2 <USBD_GetString+0x42>
 800b8be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	7812      	ldrb	r2, [r2, #0]
 800b8d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	4413      	add	r3, r2
 800b8de:	2203      	movs	r2, #3
 800b8e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8e8:	e013      	b.n	800b912 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	7812      	ldrb	r2, [r2, #0]
 800b8f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]
    idx++;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	3301      	adds	r3, #1
 800b900:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	4413      	add	r3, r2
 800b908:	2200      	movs	r2, #0
 800b90a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	3301      	adds	r3, #1
 800b910:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e7      	bne.n	800b8ea <USBD_GetString+0x6a>
 800b91a:	e000      	b.n	800b91e <USBD_GetString+0x9e>
    return;
 800b91c:	bf00      	nop
  }
}
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_GetLen>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3d8:	e005      	b.n	800b3e6 <USBD_GetLen+0x1e>
  {
    len++;
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1f5      	bne.n	800b3da <USBD_GetLen+0x12>
  }

  return len;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_CtlSendData>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b934:	e005      	b.n	800b942 <USBD_GetLen+0x1e>
  {
    len++;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	3301      	adds	r3, #1
 800b93a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3301      	adds	r3, #1
 800b940:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f5      	bne.n	800b936 <USBD_GetLen+0x12>
  }

  return len;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USBD_CtlSendData>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	619a      	str	r2, [r3, #24]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2202      	movs	r2, #2
 800b968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	619a      	str	r2, [r3, #24]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< HEAD
<<<<<<< HEAD
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	61da      	str	r2, [r3, #28]
=======
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	61da      	str	r2, [r3, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	61da      	str	r2, [r3, #28]
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< HEAD
<<<<<<< HEAD
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	2100      	movs	r1, #0
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fcbb 	bl	800bd9e <USBD_LL_Transmit>

  return USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_CtlContinueSendData>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	2100      	movs	r1, #0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 fce1 	bl	800c346 <USBD_LL_Transmit>

  return USBD_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_CtlContinueSendData>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	2100      	movs	r1, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 fcaa 	bl	800bd9e <USBD_LL_Transmit>

  return USBD_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_CtlPrepareRx>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	2100      	movs	r1, #0
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 fcd0 	bl	800c346 <USBD_LL_Transmit>

  return USBD_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_CtlPrepareRx>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2203      	movs	r2, #3
 800b464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2203      	movs	r2, #3
 800b9c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< HEAD
<<<<<<< HEAD
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
=======
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< HEAD
<<<<<<< HEAD
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	2100      	movs	r1, #0
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fcae 	bl	800bde0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_CtlContinueRx>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 fcd4 	bl	800c388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_CtlContinueRx>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	2100      	movs	r1, #0
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f000 fc9d 	bl	800bde0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_CtlSendStatus>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 fcc3 	bl	800c388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_CtlSendStatus>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2204      	movs	r2, #4
 800b4bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fc69 	bl	800bd9e <USBD_LL_Transmit>

  return USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_CtlReceiveStatus>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2204      	movs	r2, #4
 800ba18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2100      	movs	r1, #0
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fc8f 	bl	800c346 <USBD_LL_Transmit>

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_CtlReceiveStatus>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fc77 	bl	800bde0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <MX_USB_DEVICE_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba42:	2300      	movs	r3, #0
 800ba44:	2200      	movs	r2, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fc9d 	bl	800c388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <MX_USB_DEVICE_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
=======
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 800b500:	2200      	movs	r2, #0
 800b502:	4912      	ldr	r1, [pc, #72]	@ (800b54c <MX_USB_DEVICE_Init+0x50>)
 800b504:	4812      	ldr	r0, [pc, #72]	@ (800b550 <MX_USB_DEVICE_Init+0x54>)
 800b506:	f7fe fd03 	bl	8009f10 <USBD_Init>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b510:	f7f6 f838 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b514:	490f      	ldr	r1, [pc, #60]	@ (800b554 <MX_USB_DEVICE_Init+0x58>)
 800b516:	480e      	ldr	r0, [pc, #56]	@ (800b550 <MX_USB_DEVICE_Init+0x54>)
 800b518:	f7fe fd2a 	bl	8009f70 <USBD_RegisterClass>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b522:	f7f6 f82f 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b526:	490c      	ldr	r1, [pc, #48]	@ (800b558 <MX_USB_DEVICE_Init+0x5c>)
 800b528:	4809      	ldr	r0, [pc, #36]	@ (800b550 <MX_USB_DEVICE_Init+0x54>)
 800b52a:	f7fe fc61 	bl	8009df0 <USBD_CDC_RegisterInterface>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b534:	f7f6 f826 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b538:	4805      	ldr	r0, [pc, #20]	@ (800b550 <MX_USB_DEVICE_Init+0x54>)
 800b53a:	f7fe fd4f 	bl	8009fdc <USBD_Start>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b544:	f7f6 f81e 	bl	8001584 <Error_Handler>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4912      	ldr	r1, [pc, #72]	@ (800baa8 <MX_USB_DEVICE_Init+0x50>)
 800ba60:	4812      	ldr	r0, [pc, #72]	@ (800baac <MX_USB_DEVICE_Init+0x54>)
 800ba62:	f7fe fcf7 	bl	800a454 <USBD_Init>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba6c:	f7f5 fe24 	bl	80016b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba70:	490f      	ldr	r1, [pc, #60]	@ (800bab0 <MX_USB_DEVICE_Init+0x58>)
 800ba72:	480e      	ldr	r0, [pc, #56]	@ (800baac <MX_USB_DEVICE_Init+0x54>)
 800ba74:	f7fe fd1e 	bl	800a4b4 <USBD_RegisterClass>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba7e:	f7f5 fe1b 	bl	80016b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba82:	490c      	ldr	r1, [pc, #48]	@ (800bab4 <MX_USB_DEVICE_Init+0x5c>)
 800ba84:	4809      	ldr	r0, [pc, #36]	@ (800baac <MX_USB_DEVICE_Init+0x54>)
 800ba86:	f7fe fc15 	bl	800a2b4 <USBD_CDC_RegisterInterface>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba90:	f7f5 fe12 	bl	80016b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba94:	4805      	ldr	r0, [pc, #20]	@ (800baac <MX_USB_DEVICE_Init+0x54>)
 800ba96:	f7fe fd43 	bl	800a520 <USBD_Start>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baa0:	f7f5 fe0a 	bl	80016b8 <Error_Handler>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
<<<<<<< HEAD
 800b548:	bf00      	nop
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	200000b0 	.word	0x200000b0
 800b550:	20000700 	.word	0x20000700
 800b554:	2000001c 	.word	0x2000001c
 800b558:	2000009c 	.word	0x2000009c

0800b55c <CDC_Init_FS>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800baa4:	bf00      	nop
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	200000b0 	.word	0x200000b0
 800baac:	20000728 	.word	0x20000728
 800bab0:	2000001c 	.word	0x2000001c
 800bab4:	2000009c 	.word	0x2000009c

0800bab8 <CDC_Init_FS>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b560:	2200      	movs	r2, #0
 800b562:	4905      	ldr	r1, [pc, #20]	@ (800b578 <CDC_Init_FS+0x1c>)
 800b564:	4805      	ldr	r0, [pc, #20]	@ (800b57c <CDC_Init_FS+0x20>)
 800b566:	f7fe fc5d 	bl	8009e24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b56a:	4905      	ldr	r1, [pc, #20]	@ (800b580 <CDC_Init_FS+0x24>)
 800b56c:	4803      	ldr	r0, [pc, #12]	@ (800b57c <CDC_Init_FS+0x20>)
 800b56e:	f7fe fc7b 	bl	8009e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b572:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b574:	4618      	mov	r0, r3
 800b576:	bd80      	pop	{r7, pc}
 800b578:	200011dc 	.word	0x200011dc
 800b57c:	20000700 	.word	0x20000700
 800b580:	200009dc 	.word	0x200009dc

0800b584 <CDC_DeInit_FS>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800babc:	2200      	movs	r2, #0
 800babe:	4905      	ldr	r1, [pc, #20]	@ (800bad4 <CDC_Init_FS+0x1c>)
 800bac0:	4805      	ldr	r0, [pc, #20]	@ (800bad8 <CDC_Init_FS+0x20>)
 800bac2:	f7fe fc11 	bl	800a2e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bac6:	4905      	ldr	r1, [pc, #20]	@ (800badc <CDC_Init_FS+0x24>)
 800bac8:	4803      	ldr	r0, [pc, #12]	@ (800bad8 <CDC_Init_FS+0x20>)
 800baca:	f7fe fc2f 	bl	800a32c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bace:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20001204 	.word	0x20001204
 800bad8:	20000728 	.word	0x20000728
 800badc:	20000a04 	.word	0x20000a04

0800bae0 <CDC_DeInit_FS>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <CDC_Control_FS>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bae4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <CDC_Control_FS>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	2b23      	cmp	r3, #35	@ 0x23
 800b5a8:	d84a      	bhi.n	800b640 <CDC_Control_FS+0xac>
 800b5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b0 <CDC_Control_FS+0x1c>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b641 	.word	0x0800b641
 800b5b4:	0800b641 	.word	0x0800b641
 800b5b8:	0800b641 	.word	0x0800b641
 800b5bc:	0800b641 	.word	0x0800b641
 800b5c0:	0800b641 	.word	0x0800b641
 800b5c4:	0800b641 	.word	0x0800b641
 800b5c8:	0800b641 	.word	0x0800b641
 800b5cc:	0800b641 	.word	0x0800b641
 800b5d0:	0800b641 	.word	0x0800b641
 800b5d4:	0800b641 	.word	0x0800b641
 800b5d8:	0800b641 	.word	0x0800b641
 800b5dc:	0800b641 	.word	0x0800b641
 800b5e0:	0800b641 	.word	0x0800b641
 800b5e4:	0800b641 	.word	0x0800b641
 800b5e8:	0800b641 	.word	0x0800b641
 800b5ec:	0800b641 	.word	0x0800b641
 800b5f0:	0800b641 	.word	0x0800b641
 800b5f4:	0800b641 	.word	0x0800b641
 800b5f8:	0800b641 	.word	0x0800b641
 800b5fc:	0800b641 	.word	0x0800b641
 800b600:	0800b641 	.word	0x0800b641
 800b604:	0800b641 	.word	0x0800b641
 800b608:	0800b641 	.word	0x0800b641
 800b60c:	0800b641 	.word	0x0800b641
 800b610:	0800b641 	.word	0x0800b641
 800b614:	0800b641 	.word	0x0800b641
 800b618:	0800b641 	.word	0x0800b641
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b641 	.word	0x0800b641
 800b624:	0800b641 	.word	0x0800b641
 800b628:	0800b641 	.word	0x0800b641
 800b62c:	0800b641 	.word	0x0800b641
 800b630:	0800b641 	.word	0x0800b641
 800b634:	0800b641 	.word	0x0800b641
 800b638:	0800b641 	.word	0x0800b641
 800b63c:	0800b641 	.word	0x0800b641
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
 800bafc:	4613      	mov	r3, r2
 800bafe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	2b23      	cmp	r3, #35	@ 0x23
 800bb04:	d84a      	bhi.n	800bb9c <CDC_Control_FS+0xac>
 800bb06:	a201      	add	r2, pc, #4	@ (adr r2, 800bb0c <CDC_Control_FS+0x1c>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bb9d 	.word	0x0800bb9d
 800bb10:	0800bb9d 	.word	0x0800bb9d
 800bb14:	0800bb9d 	.word	0x0800bb9d
 800bb18:	0800bb9d 	.word	0x0800bb9d
 800bb1c:	0800bb9d 	.word	0x0800bb9d
 800bb20:	0800bb9d 	.word	0x0800bb9d
 800bb24:	0800bb9d 	.word	0x0800bb9d
 800bb28:	0800bb9d 	.word	0x0800bb9d
 800bb2c:	0800bb9d 	.word	0x0800bb9d
 800bb30:	0800bb9d 	.word	0x0800bb9d
 800bb34:	0800bb9d 	.word	0x0800bb9d
 800bb38:	0800bb9d 	.word	0x0800bb9d
 800bb3c:	0800bb9d 	.word	0x0800bb9d
 800bb40:	0800bb9d 	.word	0x0800bb9d
 800bb44:	0800bb9d 	.word	0x0800bb9d
 800bb48:	0800bb9d 	.word	0x0800bb9d
 800bb4c:	0800bb9d 	.word	0x0800bb9d
 800bb50:	0800bb9d 	.word	0x0800bb9d
 800bb54:	0800bb9d 	.word	0x0800bb9d
 800bb58:	0800bb9d 	.word	0x0800bb9d
 800bb5c:	0800bb9d 	.word	0x0800bb9d
 800bb60:	0800bb9d 	.word	0x0800bb9d
 800bb64:	0800bb9d 	.word	0x0800bb9d
 800bb68:	0800bb9d 	.word	0x0800bb9d
 800bb6c:	0800bb9d 	.word	0x0800bb9d
 800bb70:	0800bb9d 	.word	0x0800bb9d
 800bb74:	0800bb9d 	.word	0x0800bb9d
 800bb78:	0800bb9d 	.word	0x0800bb9d
 800bb7c:	0800bb9d 	.word	0x0800bb9d
 800bb80:	0800bb9d 	.word	0x0800bb9d
 800bb84:	0800bb9d 	.word	0x0800bb9d
 800bb88:	0800bb9d 	.word	0x0800bb9d
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bb9d 	.word	0x0800bb9d
 800bb94:	0800bb9d 	.word	0x0800bb9d
 800bb98:	0800bb9d 	.word	0x0800bb9d
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
<<<<<<< HEAD
 800b640:	bf00      	nop
  }

  return (USBD_OK);
 800b642:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <CDC_Receive_FS>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bb9c:	bf00      	nop
  }

  return (USBD_OK);
 800bb9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <CDC_Receive_FS>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4805      	ldr	r0, [pc, #20]	@ (800b674 <CDC_Receive_FS+0x24>)
 800b65e:	f7fe fc03 	bl	8009e68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b662:	4804      	ldr	r0, [pc, #16]	@ (800b674 <CDC_Receive_FS+0x24>)
 800b664:	f7fe fc1e 	bl	8009ea4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b668:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20000700 	.word	0x20000700

0800b678 <CDC_TransmitCplt_FS>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbb6:	6879      	ldr	r1, [r7, #4]
 800bbb8:	4805      	ldr	r0, [pc, #20]	@ (800bbd0 <CDC_Receive_FS+0x24>)
 800bbba:	f7fe fbb7 	bl	800a32c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbbe:	4804      	ldr	r0, [pc, #16]	@ (800bbd0 <CDC_Receive_FS+0x24>)
 800bbc0:	f7fe fc12 	bl	800a3e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20000728 	.word	0x20000728

0800bbd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	@ (800bc1c <CDC_Transmit_FS+0x48>)
 800bbe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e00b      	b.n	800bc12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbfa:	887b      	ldrh	r3, [r7, #2]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	4806      	ldr	r0, [pc, #24]	@ (800bc1c <CDC_Transmit_FS+0x48>)
 800bc02:	f7fe fb71 	bl	800a2e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc06:	4805      	ldr	r0, [pc, #20]	@ (800bc1c <CDC_Transmit_FS+0x48>)
 800bc08:	f7fe fbae 	bl	800a368 <USBD_CDC_TransmitPacket>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000728 	.word	0x20000728

0800bc20 <CDC_TransmitCplt_FS>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	75fb      	strb	r3, [r7, #23]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	75fb      	strb	r3, [r7, #23]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< HEAD
<<<<<<< HEAD
 800b68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <USBD_FS_DeviceDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bc32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <USBD_FS_DeviceDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2212      	movs	r2, #18
 800b6ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	@ (800b6bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	200000cc 	.word	0x200000cc

0800b6c0 <USBD_FS_LangIDStrDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	6039      	str	r1, [r7, #0]
 800bc4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2212      	movs	r2, #18
 800bc54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc56:	4b03      	ldr	r3, [pc, #12]	@ (800bc64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	200000cc 	.word	0x200000cc

0800bc68 <USBD_FS_LangIDStrDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2204      	movs	r2, #4
 800b6d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6d2:	4b03      	ldr	r3, [pc, #12]	@ (800b6e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	200000e0 	.word	0x200000e0

0800b6e4 <USBD_FS_ProductStrDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2204      	movs	r2, #4
 800bc78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc7a:	4b03      	ldr	r3, [pc, #12]	@ (800bc88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	200000e0 	.word	0x200000e0

0800bc8c <USBD_FS_ProductStrDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	6039      	str	r1, [r7, #0]
 800b6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d105      	bne.n	800b702 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4907      	ldr	r1, [pc, #28]	@ (800b718 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6fa:	4808      	ldr	r0, [pc, #32]	@ (800b71c <USBD_FS_ProductStrDescriptor+0x38>)
 800b6fc:	f7ff fe1e 	bl	800b33c <USBD_GetString>
 800b700:	e004      	b.n	800b70c <USBD_FS_ProductStrDescriptor+0x28>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d105      	bne.n	800bcaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4907      	ldr	r1, [pc, #28]	@ (800bcc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bca2:	4808      	ldr	r0, [pc, #32]	@ (800bcc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bca4:	f7ff fdec 	bl	800b880 <USBD_GetString>
 800bca8:	e004      	b.n	800bcb4 <USBD_FS_ProductStrDescriptor+0x28>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
<<<<<<< HEAD
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	4904      	ldr	r1, [pc, #16]	@ (800b718 <USBD_FS_ProductStrDescriptor+0x34>)
 800b706:	4805      	ldr	r0, [pc, #20]	@ (800b71c <USBD_FS_ProductStrDescriptor+0x38>)
 800b708:	f7ff fe18 	bl	800b33c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b70c:	4b02      	ldr	r3, [pc, #8]	@ (800b718 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	200019dc 	.word	0x200019dc
 800b71c:	080105b8 	.word	0x080105b8

0800b720 <USBD_FS_ManufacturerStrDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	4904      	ldr	r1, [pc, #16]	@ (800bcc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcae:	4805      	ldr	r0, [pc, #20]	@ (800bcc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcb0:	f7ff fde6 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcb4:	4b02      	ldr	r3, [pc, #8]	@ (800bcc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20001a04 	.word	0x20001a04
 800bcc4:	08011a28 	.word	0x08011a28

0800bcc8 <USBD_FS_ManufacturerStrDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	6039      	str	r1, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	4904      	ldr	r1, [pc, #16]	@ (800b740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b730:	4804      	ldr	r0, [pc, #16]	@ (800b744 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b732:	f7ff fe03 	bl	800b33c <USBD_GetString>
  return USBD_StrDesc;
 800b736:	4b02      	ldr	r3, [pc, #8]	@ (800b740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	200019dc 	.word	0x200019dc
 800b744:	080105d0 	.word	0x080105d0

0800b748 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	6039      	str	r1, [r7, #0]
 800b752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	221a      	movs	r2, #26
 800b758:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b75a:	f000 f843 	bl	800b7e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b75e:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b760:	4618      	mov	r0, r3
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	200000e4 	.word	0x200000e4

0800b76c <USBD_FS_ConfigStrDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	4904      	ldr	r1, [pc, #16]	@ (800bce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcd8:	4804      	ldr	r0, [pc, #16]	@ (800bcec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcda:	f7ff fdd1 	bl	800b880 <USBD_GetString>
  return USBD_StrDesc;
 800bcde:	4b02      	ldr	r3, [pc, #8]	@ (800bce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20001a04 	.word	0x20001a04
 800bcec:	08011a40 	.word	0x08011a40

0800bcf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	6039      	str	r1, [r7, #0]
 800bcfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	221a      	movs	r2, #26
 800bd00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd02:	f000 f843 	bl	800bd8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd06:	4b02      	ldr	r3, [pc, #8]	@ (800bd10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	200000e4 	.word	0x200000e4

0800bd14 <USBD_FS_ConfigStrDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	6039      	str	r1, [r7, #0]
 800b776:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d105      	bne.n	800b78a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	4907      	ldr	r1, [pc, #28]	@ (800b7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b782:	4808      	ldr	r0, [pc, #32]	@ (800b7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b784:	f7ff fdda 	bl	800b33c <USBD_GetString>
 800b788:	e004      	b.n	800b794 <USBD_FS_ConfigStrDescriptor+0x28>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d105      	bne.n	800bd32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	4907      	ldr	r1, [pc, #28]	@ (800bd48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd2a:	4808      	ldr	r0, [pc, #32]	@ (800bd4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd2c:	f7ff fda8 	bl	800b880 <USBD_GetString>
 800bd30:	e004      	b.n	800bd3c <USBD_FS_ConfigStrDescriptor+0x28>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
<<<<<<< HEAD
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	4904      	ldr	r1, [pc, #16]	@ (800b7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b78e:	4805      	ldr	r0, [pc, #20]	@ (800b7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b790:	f7ff fdd4 	bl	800b33c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b794:	4b02      	ldr	r3, [pc, #8]	@ (800b7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	200019dc 	.word	0x200019dc
 800b7a4:	080105e4 	.word	0x080105e4

0800b7a8 <USBD_FS_InterfaceStrDescriptor>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	4904      	ldr	r1, [pc, #16]	@ (800bd48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd36:	4805      	ldr	r0, [pc, #20]	@ (800bd4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd38:	f7ff fda2 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd3c:	4b02      	ldr	r3, [pc, #8]	@ (800bd48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20001a04 	.word	0x20001a04
 800bd4c:	08011a54 	.word	0x08011a54

0800bd50 <USBD_FS_InterfaceStrDescriptor>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d105      	bne.n	800b7c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	4907      	ldr	r1, [pc, #28]	@ (800b7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7be:	4808      	ldr	r0, [pc, #32]	@ (800b7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7c0:	f7ff fdbc 	bl	800b33c <USBD_GetString>
 800b7c4:	e004      	b.n	800b7d0 <USBD_FS_InterfaceStrDescriptor+0x28>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4907      	ldr	r1, [pc, #28]	@ (800bd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd66:	4808      	ldr	r0, [pc, #32]	@ (800bd88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd68:	f7ff fd8a 	bl	800b880 <USBD_GetString>
 800bd6c:	e004      	b.n	800bd78 <USBD_FS_InterfaceStrDescriptor+0x28>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
<<<<<<< HEAD
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	4904      	ldr	r1, [pc, #16]	@ (800b7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ca:	4805      	ldr	r0, [pc, #20]	@ (800b7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7cc:	f7ff fdb6 	bl	800b33c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d0:	4b02      	ldr	r3, [pc, #8]	@ (800b7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	200019dc 	.word	0x200019dc
 800b7e0:	080105f0 	.word	0x080105f0

0800b7e4 <Get_SerialNum>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	4904      	ldr	r1, [pc, #16]	@ (800bd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd72:	4805      	ldr	r0, [pc, #20]	@ (800bd88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd74:	f7ff fd84 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd78:	4b02      	ldr	r3, [pc, #8]	@ (800bd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20001a04 	.word	0x20001a04
 800bd88:	08011a60 	.word	0x08011a60

0800bd8c <Get_SerialNum>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
=======
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< HEAD
<<<<<<< HEAD
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b828 <Get_SerialNum+0x44>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b82c <Get_SerialNum+0x48>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b830 <Get_SerialNum+0x4c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d009      	beq.n	800b81e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b80a:	2208      	movs	r2, #8
 800b80c:	4909      	ldr	r1, [pc, #36]	@ (800b834 <Get_SerialNum+0x50>)
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 f814 	bl	800b83c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b814:	2204      	movs	r2, #4
 800b816:	4908      	ldr	r1, [pc, #32]	@ (800b838 <Get_SerialNum+0x54>)
 800b818:	68b8      	ldr	r0, [r7, #8]
 800b81a:	f000 f80f 	bl	800b83c <IntToUnicode>
  }
}
 800b81e:	bf00      	nop
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	1fff7a10 	.word	0x1fff7a10
 800b82c:	1fff7a14 	.word	0x1fff7a14
 800b830:	1fff7a18 	.word	0x1fff7a18
 800b834:	200000e6 	.word	0x200000e6
 800b838:	200000f6 	.word	0x200000f6

0800b83c <IntToUnicode>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bd92:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <Get_SerialNum+0x44>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd98:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd4 <Get_SerialNum+0x48>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <Get_SerialNum+0x4c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4413      	add	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d009      	beq.n	800bdc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdb2:	2208      	movs	r2, #8
 800bdb4:	4909      	ldr	r1, [pc, #36]	@ (800bddc <Get_SerialNum+0x50>)
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 f814 	bl	800bde4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	4908      	ldr	r1, [pc, #32]	@ (800bde0 <Get_SerialNum+0x54>)
 800bdc0:	68b8      	ldr	r0, [r7, #8]
 800bdc2:	f000 f80f 	bl	800bde4 <IntToUnicode>
  }
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	1fff7a10 	.word	0x1fff7a10
 800bdd4:	1fff7a14 	.word	0x1fff7a14
 800bdd8:	1fff7a18 	.word	0x1fff7a18
 800bddc:	200000e6 	.word	0x200000e6
 800bde0:	200000f6 	.word	0x200000f6

0800bde4 <IntToUnicode>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b84e:	2300      	movs	r3, #0
 800b850:	75fb      	strb	r3, [r7, #23]
 800b852:	e027      	b.n	800b8a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	0f1b      	lsrs	r3, r3, #28
 800b858:	2b09      	cmp	r3, #9
 800b85a:	d80b      	bhi.n	800b874 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	0f1b      	lsrs	r3, r3, #28
 800b860:	b2da      	uxtb	r2, r3
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	4619      	mov	r1, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	440b      	add	r3, r1
 800b86c:	3230      	adds	r2, #48	@ 0x30
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	e00a      	b.n	800b88a <IntToUnicode+0x4e>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	75fb      	strb	r3, [r7, #23]
 800bdfa:	e027      	b.n	800be4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	0f1b      	lsrs	r3, r3, #28
 800be00:	2b09      	cmp	r3, #9
 800be02:	d80b      	bhi.n	800be1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	0f1b      	lsrs	r3, r3, #28
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4619      	mov	r1, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	440b      	add	r3, r1
 800be14:	3230      	adds	r2, #48	@ 0x30
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	e00a      	b.n	800be32 <IntToUnicode+0x4e>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
<<<<<<< HEAD
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	0f1b      	lsrs	r3, r3, #28
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	4619      	mov	r1, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	440b      	add	r3, r1
 800b884:	3237      	adds	r2, #55	@ 0x37
 800b886:	b2d2      	uxtb	r2, r2
 800b888:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	3301      	adds	r3, #1
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	75fb      	strb	r3, [r7, #23]
 800b8a4:	7dfa      	ldrb	r2, [r7, #23]
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d3d3      	bcc.n	800b854 <IntToUnicode+0x18>
  }
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
	...

0800b8bc <HAL_PCD_MspInit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	0f1b      	lsrs	r3, r3, #28
 800be20:	b2da      	uxtb	r2, r3
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4619      	mov	r1, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	440b      	add	r3, r1
 800be2c:	3237      	adds	r2, #55	@ 0x37
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	3301      	adds	r3, #1
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	4413      	add	r3, r2
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	3301      	adds	r3, #1
 800be4a:	75fb      	strb	r3, [r7, #23]
 800be4c:	7dfa      	ldrb	r2, [r7, #23]
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	429a      	cmp	r2, r3
 800be52:	d3d3      	bcc.n	800bdfc <IntToUnicode+0x18>
  }
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
	...

0800be64 <HAL_PCD_MspInit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	@ 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	605a      	str	r2, [r3, #4]
 800b8ce:	609a      	str	r2, [r3, #8]
 800b8d0:	60da      	str	r2, [r3, #12]
 800b8d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8dc:	d13a      	bne.n	800b954 <HAL_PCD_MspInit+0x98>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	@ 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be6c:	f107 0314 	add.w	r3, r7, #20
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	605a      	str	r2, [r3, #4]
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	60da      	str	r2, [r3, #12]
 800be7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be84:	d13a      	bne.n	800befc <HAL_PCD_MspInit+0x98>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
 800b8e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8e6:	4a1d      	ldr	r2, [pc, #116]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b8e8:	f043 0301 	orr.w	r3, r3, #1
 800b8ec:	6313      	str	r3, [r2, #48]	@ 0x30
 800b8ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	693b      	ldr	r3, [r7, #16]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800be86:	2300      	movs	r3, #0
 800be88:	613b      	str	r3, [r7, #16]
 800be8a:	4b1e      	ldr	r3, [pc, #120]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800be8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be8e:	4a1d      	ldr	r2, [pc, #116]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	6313      	str	r3, [r2, #48]	@ 0x30
 800be96:	4b1b      	ldr	r3, [pc, #108]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800be98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	613b      	str	r3, [r7, #16]
 800bea0:	693b      	ldr	r3, [r7, #16]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
<<<<<<< HEAD
 800b8fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b8fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b900:	2302      	movs	r3, #2
 800b902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b904:	2300      	movs	r3, #0
 800b906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b908:	2303      	movs	r3, #3
 800b90a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b90c:	230a      	movs	r3, #10
 800b90e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4619      	mov	r1, r3
 800b916:	4812      	ldr	r0, [pc, #72]	@ (800b960 <HAL_PCD_MspInit+0xa4>)
 800b918:	f7f6 fe8a 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b91c:	4b0f      	ldr	r3, [pc, #60]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b920:	4a0e      	ldr	r2, [pc, #56]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b926:	6353      	str	r3, [r2, #52]	@ 0x34
 800b928:	2300      	movs	r3, #0
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b930:	4a0a      	ldr	r2, [pc, #40]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b936:	6453      	str	r3, [r2, #68]	@ 0x44
 800b938:	4b08      	ldr	r3, [pc, #32]	@ (800b95c <HAL_PCD_MspInit+0xa0>)
 800b93a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b93c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b944:	2200      	movs	r2, #0
 800b946:	2100      	movs	r1, #0
 800b948:	2043      	movs	r0, #67	@ 0x43
 800b94a:	f7f6 fd9a 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b94e:	2043      	movs	r0, #67	@ 0x43
 800b950:	f7f6 fdb3 	bl	80024ba <HAL_NVIC_EnableIRQ>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bea2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea8:	2302      	movs	r3, #2
 800beaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beac:	2300      	movs	r3, #0
 800beae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beb0:	2303      	movs	r3, #3
 800beb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800beb4:	230a      	movs	r3, #10
 800beb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beb8:	f107 0314 	add.w	r3, r7, #20
 800bebc:	4619      	mov	r1, r3
 800bebe:	4812      	ldr	r0, [pc, #72]	@ (800bf08 <HAL_PCD_MspInit+0xa4>)
 800bec0:	f7f6 fdda 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bec4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800bec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec8:	4a0e      	ldr	r2, [pc, #56]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800beca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bece:	6353      	str	r3, [r2, #52]	@ 0x34
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	4b0b      	ldr	r3, [pc, #44]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800bed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bed8:	4a0a      	ldr	r2, [pc, #40]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800beda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bede:	6453      	str	r3, [r2, #68]	@ 0x44
 800bee0:	4b08      	ldr	r3, [pc, #32]	@ (800bf04 <HAL_PCD_MspInit+0xa0>)
 800bee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	2043      	movs	r0, #67	@ 0x43
 800bef2:	f7f6 fcea 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bef6:	2043      	movs	r0, #67	@ 0x43
 800bef8:	f7f6 fd03 	bl	8002902 <HAL_NVIC_EnableIRQ>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 800b954:	bf00      	nop
 800b956:	3728      	adds	r7, #40	@ 0x28
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	40023800 	.word	0x40023800
 800b960:	40020000 	.word	0x40020000

0800b964 <HAL_PCD_SetupStageCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800befc:	bf00      	nop
 800befe:	3728      	adds	r7, #40	@ 0x28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	40023800 	.word	0x40023800
 800bf08:	40020000 	.word	0x40020000

0800bf0c <HAL_PCD_SetupStageCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fb7b 	bl	800a076 <USBD_LL_SetupStage>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_PCD_DataOutStageCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf20:	4619      	mov	r1, r3
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fe fb49 	bl	800a5ba <USBD_LL_SetupStage>
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_PCD_DataOutStageCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	440b      	add	r3, r1
 800b9a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7fe fbb5 	bl	800a120 <USBD_LL_DataOutStage>
}
 800b9b6:	bf00      	nop
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_PCD_DataInStageCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf42:	78fa      	ldrb	r2, [r7, #3]
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7fe fb83 	bl	800a664 <USBD_LL_DataOutStage>
}
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <HAL_PCD_DataInStageCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b9d0:	78fa      	ldrb	r2, [r7, #3]
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	3320      	adds	r3, #32
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7fe fc4e 	bl	800a286 <USBD_LL_DataInStage>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_PCD_SOFCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	3320      	adds	r3, #32
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f7fe fc1c 	bl	800a7ca <USBD_LL_DataInStage>
}
 800bf92:	bf00      	nop
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <HAL_PCD_SOFCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fd88 	bl	800a516 <USBD_LL_SOF>
}
 800ba06:	bf00      	nop
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <HAL_PCD_ResetCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fe fd56 	bl	800aa5a <USBD_LL_SOF>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_PCD_ResetCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba16:	2301      	movs	r3, #1
 800ba18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	79db      	ldrb	r3, [r3, #7]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d001      	beq.n	800ba26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba22:	f7f5 fdaf 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba2c:	7bfa      	ldrb	r2, [r7, #15]
 800ba2e:	4611      	mov	r1, r2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fd2c 	bl	800a48e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fcd4 	bl	800a3ea <USBD_LL_Reset>
}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <HAL_PCD_SuspendCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	79db      	ldrb	r3, [r3, #7]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d001      	beq.n	800bfce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfca:	f7f5 fb75 	bl	80016b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfd4:	7bfa      	ldrb	r2, [r7, #15]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fcfa 	bl	800a9d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fca2 	bl	800a92e <USBD_LL_Reset>
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <HAL_PCD_SuspendCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe fd27 	bl	800a4ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6812      	ldr	r2, [r2, #0]
 800ba6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba72:	f043 0301 	orr.w	r3, r3, #1
 800ba76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7adb      	ldrb	r3, [r3, #11]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba80:	4b04      	ldr	r3, [pc, #16]	@ (800ba94 <HAL_PCD_SuspendCallback+0x48>)
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	4a03      	ldr	r2, [pc, #12]	@ (800ba94 <HAL_PCD_SuspendCallback+0x48>)
 800ba86:	f043 0306 	orr.w	r3, r3, #6
 800ba8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	e000ed00 	.word	0xe000ed00

0800ba98 <HAL_PCD_ResumeCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fcf5 	bl	800a9f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c01a:	f043 0301 	orr.w	r3, r3, #1
 800c01e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7adb      	ldrb	r3, [r3, #11]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c028:	4b04      	ldr	r3, [pc, #16]	@ (800c03c <HAL_PCD_SuspendCallback+0x48>)
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	4a03      	ldr	r2, [pc, #12]	@ (800c03c <HAL_PCD_SuspendCallback+0x48>)
 800c02e:	f043 0306 	orr.w	r3, r3, #6
 800c032:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	e000ed00 	.word	0xe000ed00

0800c040 <HAL_PCD_ResumeCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
<<<<<<< HEAD
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fd1d 	bl	800a4e6 <USBD_LL_Resume>
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_PCD_ISOOUTIncompleteCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fceb 	bl	800aa2a <USBD_LL_Resume>
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_PCD_ISOOUTIncompleteCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bac6:	78fa      	ldrb	r2, [r7, #3]
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe fd75 	bl	800a5ba <USBD_LL_IsoOUTIncomplete>
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <HAL_PCD_ISOINIncompleteCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c06e:	78fa      	ldrb	r2, [r7, #3]
 800c070:	4611      	mov	r1, r2
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fd43 	bl	800aafe <USBD_LL_IsoOUTIncomplete>
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_PCD_ISOINIncompleteCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baea:	78fa      	ldrb	r2, [r7, #3]
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fd31 	bl	800a556 <USBD_LL_IsoINIncomplete>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <HAL_PCD_ConnectCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fcff 	bl	800aa9a <USBD_LL_IsoINIncomplete>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_PCD_ConnectCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe fd87 	bl	800a61e <USBD_LL_DevConnected>
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_PCD_DisconnectCallback>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fd55 	bl	800ab62 <USBD_LL_DevConnected>
}
 800c0b8:	bf00      	nop
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <HAL_PCD_DisconnectCallback>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fd84 	bl	800a634 <USBD_LL_DevDisconnected>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_LL_Init>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fd52 	bl	800ab78 <USBD_LL_DevDisconnected>
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_LL_Init>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d13c      	bne.n	800bbbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb44:	4a20      	ldr	r2, [pc, #128]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb54:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bb5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb5e:	2204      	movs	r2, #4
 800bb60:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb62:	4b19      	ldr	r3, [pc, #100]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb64:	2202      	movs	r2, #2
 800bb66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb68:	4b17      	ldr	r3, [pc, #92]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb6e:	4b16      	ldr	r3, [pc, #88]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb70:	2202      	movs	r2, #2
 800bb72:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb74:	4b14      	ldr	r3, [pc, #80]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb7a:	4b13      	ldr	r3, [pc, #76]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb80:	4b11      	ldr	r3, [pc, #68]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb86:	4b10      	ldr	r3, [pc, #64]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb92:	480d      	ldr	r0, [pc, #52]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bb94:	f7f8 fccf 	bl	8004536 <HAL_PCD_Init>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb9e:	f7f5 fcf1 	bl	8001584 <Error_Handler>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d13c      	bne.n	800c166 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0ec:	4a20      	ldr	r2, [pc, #128]	@ (800c170 <USBD_LL_Init+0x94>)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c170 <USBD_LL_Init+0x94>)
 800c0f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0fc:	4b1c      	ldr	r3, [pc, #112]	@ (800c170 <USBD_LL_Init+0x94>)
 800c0fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c102:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c104:	4b1a      	ldr	r3, [pc, #104]	@ (800c170 <USBD_LL_Init+0x94>)
 800c106:	2204      	movs	r2, #4
 800c108:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c10a:	4b19      	ldr	r3, [pc, #100]	@ (800c170 <USBD_LL_Init+0x94>)
 800c10c:	2202      	movs	r2, #2
 800c10e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c110:	4b17      	ldr	r3, [pc, #92]	@ (800c170 <USBD_LL_Init+0x94>)
 800c112:	2200      	movs	r2, #0
 800c114:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c116:	4b16      	ldr	r3, [pc, #88]	@ (800c170 <USBD_LL_Init+0x94>)
 800c118:	2202      	movs	r2, #2
 800c11a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c11c:	4b14      	ldr	r3, [pc, #80]	@ (800c170 <USBD_LL_Init+0x94>)
 800c11e:	2200      	movs	r2, #0
 800c120:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c122:	4b13      	ldr	r3, [pc, #76]	@ (800c170 <USBD_LL_Init+0x94>)
 800c124:	2200      	movs	r2, #0
 800c126:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c128:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <USBD_LL_Init+0x94>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c12e:	4b10      	ldr	r3, [pc, #64]	@ (800c170 <USBD_LL_Init+0x94>)
 800c130:	2200      	movs	r2, #0
 800c132:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c134:	4b0e      	ldr	r3, [pc, #56]	@ (800c170 <USBD_LL_Init+0x94>)
 800c136:	2200      	movs	r2, #0
 800c138:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c13a:	480d      	ldr	r0, [pc, #52]	@ (800c170 <USBD_LL_Init+0x94>)
 800c13c:	f7f8 fc1f 	bl	800497e <HAL_PCD_Init>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c146:	f7f5 fab7 	bl	80016b8 <Error_Handler>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
<<<<<<< HEAD
<<<<<<< HEAD
 800bba2:	2180      	movs	r1, #128	@ 0x80
 800bba4:	4808      	ldr	r0, [pc, #32]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bba6:	f7f9 fefa 	bl	800599e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bbaa:	2240      	movs	r2, #64	@ 0x40
 800bbac:	2100      	movs	r1, #0
 800bbae:	4806      	ldr	r0, [pc, #24]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bbb0:	f7f9 feae 	bl	8005910 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbb4:	2280      	movs	r2, #128	@ 0x80
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	4803      	ldr	r0, [pc, #12]	@ (800bbc8 <USBD_LL_Init+0x94>)
 800bbba:	f7f9 fea9 	bl	8005910 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	20001bdc 	.word	0x20001bdc

0800bbcc <USBD_LL_Start>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c14a:	2180      	movs	r1, #128	@ 0x80
 800c14c:	4808      	ldr	r0, [pc, #32]	@ (800c170 <USBD_LL_Init+0x94>)
 800c14e:	f7f9 fe4c 	bl	8005dea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c152:	2240      	movs	r2, #64	@ 0x40
 800c154:	2100      	movs	r1, #0
 800c156:	4806      	ldr	r0, [pc, #24]	@ (800c170 <USBD_LL_Init+0x94>)
 800c158:	f7f9 fe00 	bl	8005d5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c15c:	2280      	movs	r2, #128	@ 0x80
 800c15e:	2101      	movs	r1, #1
 800c160:	4803      	ldr	r0, [pc, #12]	@ (800c170 <USBD_LL_Init+0x94>)
 800c162:	f7f9 fdfb 	bl	8005d5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20001c04 	.word	0x20001c04

0800c174 <USBD_LL_Start>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f8 fdb6 	bl	8004754 <HAL_PCD_Start>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 f942 	bl	800be78 <USBD_Get_USB_Status>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_OpenEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f8 fd06 	bl	8004b9c <HAL_PCD_Start>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f942 	bl	800c420 <USBD_Get_USB_Status>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_LL_OpenEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	461a      	mov	r2, r3
 800bc10:	4603      	mov	r3, r0
 800bc12:	70fb      	strb	r3, [r7, #3]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70bb      	strb	r3, [r7, #2]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc2a:	78bb      	ldrb	r3, [r7, #2]
 800bc2c:	883a      	ldrh	r2, [r7, #0]
 800bc2e:	78f9      	ldrb	r1, [r7, #3]
 800bc30:	f7f9 fa8a 	bl	8005148 <HAL_PCD_EP_Open>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f91c 	bl	800be78 <USBD_Get_USB_Status>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_LL_CloseEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	70fb      	strb	r3, [r7, #3]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70bb      	strb	r3, [r7, #2]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c1d2:	78bb      	ldrb	r3, [r7, #2]
 800c1d4:	883a      	ldrh	r2, [r7, #0]
 800c1d6:	78f9      	ldrb	r1, [r7, #3]
 800c1d8:	f7f9 f9da 	bl	8005590 <HAL_PCD_EP_Open>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 f91c 	bl	800c420 <USBD_Get_USB_Status>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_LL_CloseEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc68:	78fa      	ldrb	r2, [r7, #3]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f9 fad3 	bl	8005218 <HAL_PCD_EP_Close>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 f8fd 	bl	800be78 <USBD_Get_USB_Status>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_StallEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c210:	78fa      	ldrb	r2, [r7, #3]
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f7f9 fa25 	bl	8005664 <HAL_PCD_EP_Close>
 800c21a:	4603      	mov	r3, r0
 800c21c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	4618      	mov	r0, r3
 800c222:	f000 f8fd 	bl	800c420 <USBD_Get_USB_Status>
 800c226:	4603      	mov	r3, r0
 800c228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_LL_StallEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bca6:	78fa      	ldrb	r2, [r7, #3]
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7f9 fb8b 	bl	80053c6 <HAL_PCD_EP_SetStall>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 f8de 	bl	800be78 <USBD_Get_USB_Status>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_LL_ClearStallEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c24e:	78fa      	ldrb	r2, [r7, #3]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7f9 fadd 	bl	8005812 <HAL_PCD_EP_SetStall>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 f8de 	bl	800c420 <USBD_Get_USB_Status>
 800c264:	4603      	mov	r3, r0
 800c266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c268:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_LL_ClearStallEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bce4:	78fa      	ldrb	r2, [r7, #3]
 800bce6:	4611      	mov	r1, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f9 fbcf 	bl	800548c <HAL_PCD_EP_ClrStall>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf2:	7bfb      	ldrb	r3, [r7, #15]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 f8bf 	bl	800be78 <USBD_Get_USB_Status>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_IsStallEP>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c28c:	78fa      	ldrb	r2, [r7, #3]
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f7f9 fb21 	bl	80058d8 <HAL_PCD_EP_ClrStall>
 800c296:	4603      	mov	r3, r0
 800c298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f8bf 	bl	800c420 <USBD_Get_USB_Status>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_LL_IsStallEP>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da0b      	bge.n	800bd3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd2a:	68f9      	ldr	r1, [r7, #12]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	4413      	add	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	440b      	add	r3, r1
 800bd36:	3316      	adds	r3, #22
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	e00b      	b.n	800bd54 <USBD_LL_IsStallEP+0x4c>
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da0b      	bge.n	800c2e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2cc:	78fb      	ldrb	r3, [r7, #3]
 800c2ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2d2:	68f9      	ldr	r1, [r7, #12]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	440b      	add	r3, r1
 800c2de:	3316      	adds	r3, #22
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	e00b      	b.n	800c2fc <USBD_LL_IsStallEP+0x4c>
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
<<<<<<< HEAD
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bd52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <USBD_LL_SetUSBAddress>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c2e4:	78fb      	ldrb	r3, [r7, #3]
 800c2e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2ea:	68f9      	ldr	r1, [r7, #12]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	440b      	add	r3, r1
 800c2f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c2fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <USBD_LL_SetUSBAddress>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f9 f9be 	bl	8005100 <HAL_PCD_SetAddress>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f874 	bl	800be78 <USBD_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_Transmit>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c322:	78fa      	ldrb	r2, [r7, #3]
 800c324:	4611      	mov	r1, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7f9 f90e 	bl	8005548 <HAL_PCD_SetAddress>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f874 	bl	800c420 <USBD_Get_USB_Status>
 800c338:	4603      	mov	r3, r0
 800c33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_LL_Transmit>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b086      	sub	sp, #24
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdbc:	7af9      	ldrb	r1, [r7, #11]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	f7f9 fac6 	bl	8005352 <HAL_PCD_EP_Transmit>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f853 	bl	800be78 <USBD_Get_USB_Status>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_LL_PrepareReceive>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c346:	b580      	push	{r7, lr}
 800c348:	b086      	sub	sp, #24
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
 800c352:	460b      	mov	r3, r1
 800c354:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c364:	7af9      	ldrb	r1, [r7, #11]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	f7f9 fa18 	bl	800579e <HAL_PCD_EP_Transmit>
 800c36e:	4603      	mov	r3, r0
 800c370:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f853 	bl	800c420 <USBD_Get_USB_Status>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c37e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_LL_PrepareReceive>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	603b      	str	r3, [r7, #0]
 800bdec:	460b      	mov	r3, r1
 800bdee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdfe:	7af9      	ldrb	r1, [r7, #11]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	f7f9 fa52 	bl	80052ac <HAL_PCD_EP_Receive>
 800be08:	4603      	mov	r3, r0
 800be0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 f832 	bl	800be78 <USBD_Get_USB_Status>
 800be14:	4603      	mov	r3, r0
 800be16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be18:	7dbb      	ldrb	r3, [r7, #22]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_LL_GetRxDataSize>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	607a      	str	r2, [r7, #4]
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	460b      	mov	r3, r1
 800c396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3a6:	7af9      	ldrb	r1, [r7, #11]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	f7f9 f9a4 	bl	80056f8 <HAL_PCD_EP_Receive>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 f832 	bl	800c420 <USBD_Get_USB_Status>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_LL_GetRxDataSize>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f9 fa72 	bl	8005322 <HAL_PCD_EP_GetRxCount>
 800be3e:	4603      	mov	r3, r0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_static_malloc>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3dc:	78fa      	ldrb	r2, [r7, #3]
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f9 f9c4 	bl	800576e <HAL_PCD_EP_GetRxCount>
 800c3e6:	4603      	mov	r3, r0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_static_malloc>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be50:	4b03      	ldr	r3, [pc, #12]	@ (800be60 <USBD_static_malloc+0x18>)
}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	200020c0 	.word	0x200020c0

0800be64 <USBD_static_free>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3f8:	4b03      	ldr	r3, [pc, #12]	@ (800c408 <USBD_static_malloc+0x18>)
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	200020e8 	.word	0x200020e8

0800c40c <USBD_static_free>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]

}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USBD_Get_USB_Status>:
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]

}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <USBD_Get_USB_Status>:
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d817      	bhi.n	800bebc <USBD_Get_USB_Status+0x44>
 800be8c:	a201      	add	r2, pc, #4	@ (adr r2, 800be94 <USBD_Get_USB_Status+0x1c>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bea5 	.word	0x0800bea5
 800be98:	0800beab 	.word	0x0800beab
 800be9c:	0800beb1 	.word	0x0800beb1
 800bea0:	0800beb7 	.word	0x0800beb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
    break;
 800bea8:	e00b      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beaa:	2303      	movs	r3, #3
 800beac:	73fb      	strb	r3, [r7, #15]
    break;
 800beae:	e008      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800beb0:	2301      	movs	r3, #1
 800beb2:	73fb      	strb	r3, [r7, #15]
    break;
 800beb4:	e005      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beb6:	2303      	movs	r3, #3
 800beb8:	73fb      	strb	r3, [r7, #15]
    break;
 800beba:	e002      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bebc:	2303      	movs	r3, #3
 800bebe:	73fb      	strb	r3, [r7, #15]
    break;
 800bec0:	bf00      	nop
  }
  return usb_status;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <__cvt>:
 800bed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed4:	ec57 6b10 	vmov	r6, r7, d0
 800bed8:	2f00      	cmp	r7, #0
 800beda:	460c      	mov	r4, r1
 800bedc:	4619      	mov	r1, r3
 800bede:	463b      	mov	r3, r7
 800bee0:	bfbb      	ittet	lt
 800bee2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bee6:	461f      	movlt	r7, r3
 800bee8:	2300      	movge	r3, #0
 800beea:	232d      	movlt	r3, #45	@ 0x2d
 800beec:	700b      	strb	r3, [r1, #0]
 800beee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bef0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bef4:	4691      	mov	r9, r2
 800bef6:	f023 0820 	bic.w	r8, r3, #32
 800befa:	bfbc      	itt	lt
 800befc:	4632      	movlt	r2, r6
 800befe:	4616      	movlt	r6, r2
 800bf00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf04:	d005      	beq.n	800bf12 <__cvt+0x42>
 800bf06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf0a:	d100      	bne.n	800bf0e <__cvt+0x3e>
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	2102      	movs	r1, #2
 800bf10:	e000      	b.n	800bf14 <__cvt+0x44>
 800bf12:	2103      	movs	r1, #3
 800bf14:	ab03      	add	r3, sp, #12
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	ab02      	add	r3, sp, #8
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	ec47 6b10 	vmov	d0, r6, r7
 800bf20:	4653      	mov	r3, sl
 800bf22:	4622      	mov	r2, r4
 800bf24:	f001 f874 	bl	800d010 <_dtoa_r>
 800bf28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	d119      	bne.n	800bf64 <__cvt+0x94>
 800bf30:	f019 0f01 	tst.w	r9, #1
 800bf34:	d00e      	beq.n	800bf54 <__cvt+0x84>
 800bf36:	eb00 0904 	add.w	r9, r0, r4
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf46:	b108      	cbz	r0, 800bf4c <__cvt+0x7c>
 800bf48:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf4c:	2230      	movs	r2, #48	@ 0x30
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	454b      	cmp	r3, r9
 800bf52:	d31e      	bcc.n	800bf92 <__cvt+0xc2>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf58:	1b5b      	subs	r3, r3, r5
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	b004      	add	sp, #16
 800bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf68:	eb00 0904 	add.w	r9, r0, r4
 800bf6c:	d1e5      	bne.n	800bf3a <__cvt+0x6a>
 800bf6e:	7803      	ldrb	r3, [r0, #0]
 800bf70:	2b30      	cmp	r3, #48	@ 0x30
 800bf72:	d10a      	bne.n	800bf8a <__cvt+0xba>
 800bf74:	2200      	movs	r2, #0
 800bf76:	2300      	movs	r3, #0
 800bf78:	4630      	mov	r0, r6
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf80:	b918      	cbnz	r0, 800bf8a <__cvt+0xba>
 800bf82:	f1c4 0401 	rsb	r4, r4, #1
 800bf86:	f8ca 4000 	str.w	r4, [sl]
 800bf8a:	f8da 3000 	ldr.w	r3, [sl]
 800bf8e:	4499      	add	r9, r3
 800bf90:	e7d3      	b.n	800bf3a <__cvt+0x6a>
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	9103      	str	r1, [sp, #12]
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	e7d9      	b.n	800bf4e <__cvt+0x7e>

0800bf9a <__exponent>:
 800bf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	bfba      	itte	lt
 800bfa0:	4249      	neglt	r1, r1
 800bfa2:	232d      	movlt	r3, #45	@ 0x2d
 800bfa4:	232b      	movge	r3, #43	@ 0x2b
 800bfa6:	2909      	cmp	r1, #9
 800bfa8:	7002      	strb	r2, [r0, #0]
 800bfaa:	7043      	strb	r3, [r0, #1]
 800bfac:	dd29      	ble.n	800c002 <__exponent+0x68>
 800bfae:	f10d 0307 	add.w	r3, sp, #7
 800bfb2:	461d      	mov	r5, r3
 800bfb4:	270a      	movs	r7, #10
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	fbb1 f6f7 	udiv	r6, r1, r7
 800bfbc:	fb07 1416 	mls	r4, r7, r6, r1
 800bfc0:	3430      	adds	r4, #48	@ 0x30
 800bfc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	2c63      	cmp	r4, #99	@ 0x63
 800bfca:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfce:	4631      	mov	r1, r6
 800bfd0:	dcf1      	bgt.n	800bfb6 <__exponent+0x1c>
 800bfd2:	3130      	adds	r1, #48	@ 0x30
 800bfd4:	1e94      	subs	r4, r2, #2
 800bfd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bfda:	1c41      	adds	r1, r0, #1
 800bfdc:	4623      	mov	r3, r4
 800bfde:	42ab      	cmp	r3, r5
 800bfe0:	d30a      	bcc.n	800bff8 <__exponent+0x5e>
 800bfe2:	f10d 0309 	add.w	r3, sp, #9
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	42ac      	cmp	r4, r5
 800bfea:	bf88      	it	hi
 800bfec:	2300      	movhi	r3, #0
 800bfee:	3302      	adds	r3, #2
 800bff0:	4403      	add	r3, r0
 800bff2:	1a18      	subs	r0, r3, r0
 800bff4:	b003      	add	sp, #12
 800bff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bffc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c000:	e7ed      	b.n	800bfde <__exponent+0x44>
 800c002:	2330      	movs	r3, #48	@ 0x30
 800c004:	3130      	adds	r1, #48	@ 0x30
 800c006:	7083      	strb	r3, [r0, #2]
 800c008:	70c1      	strb	r1, [r0, #3]
 800c00a:	1d03      	adds	r3, r0, #4
 800c00c:	e7f1      	b.n	800bff2 <__exponent+0x58>
	...

0800c010 <_printf_float>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	b08d      	sub	sp, #52	@ 0x34
 800c016:	460c      	mov	r4, r1
 800c018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c01c:	4616      	mov	r6, r2
 800c01e:	461f      	mov	r7, r3
 800c020:	4605      	mov	r5, r0
 800c022:	f000 feef 	bl	800ce04 <_localeconv_r>
 800c026:	6803      	ldr	r3, [r0, #0]
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7f4 f928 	bl	8000280 <strlen>
 800c030:	2300      	movs	r3, #0
 800c032:	930a      	str	r3, [sp, #40]	@ 0x28
 800c034:	f8d8 3000 	ldr.w	r3, [r8]
 800c038:	9005      	str	r0, [sp, #20]
 800c03a:	3307      	adds	r3, #7
 800c03c:	f023 0307 	bic.w	r3, r3, #7
 800c040:	f103 0208 	add.w	r2, r3, #8
 800c044:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c048:	f8d4 b000 	ldr.w	fp, [r4]
 800c04c:	f8c8 2000 	str.w	r2, [r8]
 800c050:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c054:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c058:	9307      	str	r3, [sp, #28]
 800c05a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c05e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c066:	4b9c      	ldr	r3, [pc, #624]	@ (800c2d8 <_printf_float+0x2c8>)
 800c068:	f04f 32ff 	mov.w	r2, #4294967295
 800c06c:	f7f4 fd66 	bl	8000b3c <__aeabi_dcmpun>
 800c070:	bb70      	cbnz	r0, 800c0d0 <_printf_float+0xc0>
 800c072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c076:	4b98      	ldr	r3, [pc, #608]	@ (800c2d8 <_printf_float+0x2c8>)
 800c078:	f04f 32ff 	mov.w	r2, #4294967295
 800c07c:	f7f4 fd40 	bl	8000b00 <__aeabi_dcmple>
 800c080:	bb30      	cbnz	r0, 800c0d0 <_printf_float+0xc0>
 800c082:	2200      	movs	r2, #0
 800c084:	2300      	movs	r3, #0
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f7f4 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800c08e:	b110      	cbz	r0, 800c096 <_printf_float+0x86>
 800c090:	232d      	movs	r3, #45	@ 0x2d
 800c092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c096:	4a91      	ldr	r2, [pc, #580]	@ (800c2dc <_printf_float+0x2cc>)
 800c098:	4b91      	ldr	r3, [pc, #580]	@ (800c2e0 <_printf_float+0x2d0>)
 800c09a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c09e:	bf94      	ite	ls
 800c0a0:	4690      	movls	r8, r2
 800c0a2:	4698      	movhi	r8, r3
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	f02b 0304 	bic.w	r3, fp, #4
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	f04f 0900 	mov.w	r9, #0
 800c0b2:	9700      	str	r7, [sp, #0]
 800c0b4:	4633      	mov	r3, r6
 800c0b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f9d2 	bl	800c464 <_printf_common>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f040 808d 	bne.w	800c1e0 <_printf_float+0x1d0>
 800c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ca:	b00d      	add	sp, #52	@ 0x34
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fd30 	bl	8000b3c <__aeabi_dcmpun>
 800c0dc:	b140      	cbz	r0, 800c0f0 <_printf_float+0xe0>
 800c0de:	464b      	mov	r3, r9
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfbc      	itt	lt
 800c0e4:	232d      	movlt	r3, #45	@ 0x2d
 800c0e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c0ea:	4a7e      	ldr	r2, [pc, #504]	@ (800c2e4 <_printf_float+0x2d4>)
 800c0ec:	4b7e      	ldr	r3, [pc, #504]	@ (800c2e8 <_printf_float+0x2d8>)
 800c0ee:	e7d4      	b.n	800c09a <_printf_float+0x8a>
 800c0f0:	6863      	ldr	r3, [r4, #4]
 800c0f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c0f6:	9206      	str	r2, [sp, #24]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	d13b      	bne.n	800c174 <_printf_float+0x164>
 800c0fc:	2306      	movs	r3, #6
 800c0fe:	6063      	str	r3, [r4, #4]
 800c100:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c104:	2300      	movs	r3, #0
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	9303      	str	r3, [sp, #12]
 800c10a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c10c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c110:	ab09      	add	r3, sp, #36	@ 0x24
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	6861      	ldr	r1, [r4, #4]
 800c116:	ec49 8b10 	vmov	d0, r8, r9
 800c11a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c11e:	4628      	mov	r0, r5
 800c120:	f7ff fed6 	bl	800bed0 <__cvt>
 800c124:	9b06      	ldr	r3, [sp, #24]
 800c126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c128:	2b47      	cmp	r3, #71	@ 0x47
 800c12a:	4680      	mov	r8, r0
 800c12c:	d129      	bne.n	800c182 <_printf_float+0x172>
 800c12e:	1cc8      	adds	r0, r1, #3
 800c130:	db02      	blt.n	800c138 <_printf_float+0x128>
 800c132:	6863      	ldr	r3, [r4, #4]
 800c134:	4299      	cmp	r1, r3
 800c136:	dd41      	ble.n	800c1bc <_printf_float+0x1ac>
 800c138:	f1aa 0a02 	sub.w	sl, sl, #2
 800c13c:	fa5f fa8a 	uxtb.w	sl, sl
 800c140:	3901      	subs	r1, #1
 800c142:	4652      	mov	r2, sl
 800c144:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c148:	9109      	str	r1, [sp, #36]	@ 0x24
 800c14a:	f7ff ff26 	bl	800bf9a <__exponent>
 800c14e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c150:	1813      	adds	r3, r2, r0
 800c152:	2a01      	cmp	r2, #1
 800c154:	4681      	mov	r9, r0
 800c156:	6123      	str	r3, [r4, #16]
 800c158:	dc02      	bgt.n	800c160 <_printf_float+0x150>
 800c15a:	6822      	ldr	r2, [r4, #0]
 800c15c:	07d2      	lsls	r2, r2, #31
 800c15e:	d501      	bpl.n	800c164 <_printf_float+0x154>
 800c160:	3301      	adds	r3, #1
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0a2      	beq.n	800c0b2 <_printf_float+0xa2>
 800c16c:	232d      	movs	r3, #45	@ 0x2d
 800c16e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c172:	e79e      	b.n	800c0b2 <_printf_float+0xa2>
 800c174:	9a06      	ldr	r2, [sp, #24]
 800c176:	2a47      	cmp	r2, #71	@ 0x47
 800c178:	d1c2      	bne.n	800c100 <_printf_float+0xf0>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1c0      	bne.n	800c100 <_printf_float+0xf0>
 800c17e:	2301      	movs	r3, #1
 800c180:	e7bd      	b.n	800c0fe <_printf_float+0xee>
 800c182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c186:	d9db      	bls.n	800c140 <_printf_float+0x130>
 800c188:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c18c:	d118      	bne.n	800c1c0 <_printf_float+0x1b0>
 800c18e:	2900      	cmp	r1, #0
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	dd0b      	ble.n	800c1ac <_printf_float+0x19c>
 800c194:	6121      	str	r1, [r4, #16]
 800c196:	b913      	cbnz	r3, 800c19e <_printf_float+0x18e>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	07d0      	lsls	r0, r2, #31
 800c19c:	d502      	bpl.n	800c1a4 <_printf_float+0x194>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	440b      	add	r3, r1
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c1a6:	f04f 0900 	mov.w	r9, #0
 800c1aa:	e7db      	b.n	800c164 <_printf_float+0x154>
 800c1ac:	b913      	cbnz	r3, 800c1b4 <_printf_float+0x1a4>
 800c1ae:	6822      	ldr	r2, [r4, #0]
 800c1b0:	07d2      	lsls	r2, r2, #31
 800c1b2:	d501      	bpl.n	800c1b8 <_printf_float+0x1a8>
 800c1b4:	3302      	adds	r3, #2
 800c1b6:	e7f4      	b.n	800c1a2 <_printf_float+0x192>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e7f2      	b.n	800c1a2 <_printf_float+0x192>
 800c1bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1c2:	4299      	cmp	r1, r3
 800c1c4:	db05      	blt.n	800c1d2 <_printf_float+0x1c2>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	6121      	str	r1, [r4, #16]
 800c1ca:	07d8      	lsls	r0, r3, #31
 800c1cc:	d5ea      	bpl.n	800c1a4 <_printf_float+0x194>
 800c1ce:	1c4b      	adds	r3, r1, #1
 800c1d0:	e7e7      	b.n	800c1a2 <_printf_float+0x192>
 800c1d2:	2900      	cmp	r1, #0
 800c1d4:	bfd4      	ite	le
 800c1d6:	f1c1 0202 	rsble	r2, r1, #2
 800c1da:	2201      	movgt	r2, #1
 800c1dc:	4413      	add	r3, r2
 800c1de:	e7e0      	b.n	800c1a2 <_printf_float+0x192>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	055a      	lsls	r2, r3, #21
 800c1e4:	d407      	bmi.n	800c1f6 <_printf_float+0x1e6>
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b8      	blx	r7
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d12b      	bne.n	800c24c <_printf_float+0x23c>
 800c1f4:	e767      	b.n	800c0c6 <_printf_float+0xb6>
 800c1f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c1fa:	f240 80dd 	bls.w	800c3b8 <_printf_float+0x3a8>
 800c1fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c202:	2200      	movs	r2, #0
 800c204:	2300      	movs	r3, #0
 800c206:	f7f4 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d033      	beq.n	800c276 <_printf_float+0x266>
 800c20e:	4a37      	ldr	r2, [pc, #220]	@ (800c2ec <_printf_float+0x2dc>)
 800c210:	2301      	movs	r3, #1
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	f43f af54 	beq.w	800c0c6 <_printf_float+0xb6>
 800c21e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c222:	4543      	cmp	r3, r8
 800c224:	db02      	blt.n	800c22c <_printf_float+0x21c>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	07d8      	lsls	r0, r3, #31
 800c22a:	d50f      	bpl.n	800c24c <_printf_float+0x23c>
 800c22c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c230:	4631      	mov	r1, r6
 800c232:	4628      	mov	r0, r5
 800c234:	47b8      	blx	r7
 800c236:	3001      	adds	r0, #1
 800c238:	f43f af45 	beq.w	800c0c6 <_printf_float+0xb6>
 800c23c:	f04f 0900 	mov.w	r9, #0
 800c240:	f108 38ff 	add.w	r8, r8, #4294967295
 800c244:	f104 0a1a 	add.w	sl, r4, #26
 800c248:	45c8      	cmp	r8, r9
 800c24a:	dc09      	bgt.n	800c260 <_printf_float+0x250>
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	079b      	lsls	r3, r3, #30
 800c250:	f100 8103 	bmi.w	800c45a <_printf_float+0x44a>
 800c254:	68e0      	ldr	r0, [r4, #12]
 800c256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c258:	4298      	cmp	r0, r3
 800c25a:	bfb8      	it	lt
 800c25c:	4618      	movlt	r0, r3
 800c25e:	e734      	b.n	800c0ca <_printf_float+0xba>
 800c260:	2301      	movs	r3, #1
 800c262:	4652      	mov	r2, sl
 800c264:	4631      	mov	r1, r6
 800c266:	4628      	mov	r0, r5
 800c268:	47b8      	blx	r7
 800c26a:	3001      	adds	r0, #1
 800c26c:	f43f af2b 	beq.w	800c0c6 <_printf_float+0xb6>
 800c270:	f109 0901 	add.w	r9, r9, #1
 800c274:	e7e8      	b.n	800c248 <_printf_float+0x238>
 800c276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dc39      	bgt.n	800c2f0 <_printf_float+0x2e0>
 800c27c:	4a1b      	ldr	r2, [pc, #108]	@ (800c2ec <_printf_float+0x2dc>)
 800c27e:	2301      	movs	r3, #1
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	f43f af1d 	beq.w	800c0c6 <_printf_float+0xb6>
 800c28c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c290:	ea59 0303 	orrs.w	r3, r9, r3
 800c294:	d102      	bne.n	800c29c <_printf_float+0x28c>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	07d9      	lsls	r1, r3, #31
 800c29a:	d5d7      	bpl.n	800c24c <_printf_float+0x23c>
 800c29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af0d 	beq.w	800c0c6 <_printf_float+0xb6>
 800c2ac:	f04f 0a00 	mov.w	sl, #0
 800c2b0:	f104 0b1a 	add.w	fp, r4, #26
 800c2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b6:	425b      	negs	r3, r3
 800c2b8:	4553      	cmp	r3, sl
 800c2ba:	dc01      	bgt.n	800c2c0 <_printf_float+0x2b0>
 800c2bc:	464b      	mov	r3, r9
 800c2be:	e793      	b.n	800c1e8 <_printf_float+0x1d8>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	465a      	mov	r2, fp
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	47b8      	blx	r7
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	f43f aefb 	beq.w	800c0c6 <_printf_float+0xb6>
 800c2d0:	f10a 0a01 	add.w	sl, sl, #1
 800c2d4:	e7ee      	b.n	800c2b4 <_printf_float+0x2a4>
 800c2d6:	bf00      	nop
 800c2d8:	7fefffff 	.word	0x7fefffff
 800c2dc:	08010618 	.word	0x08010618
 800c2e0:	0801061c 	.word	0x0801061c
 800c2e4:	08010620 	.word	0x08010620
 800c2e8:	08010624 	.word	0x08010624
 800c2ec:	08010628 	.word	0x08010628
 800c2f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c2f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c2f6:	4553      	cmp	r3, sl
 800c2f8:	bfa8      	it	ge
 800c2fa:	4653      	movge	r3, sl
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	4699      	mov	r9, r3
 800c300:	dc36      	bgt.n	800c370 <_printf_float+0x360>
 800c302:	f04f 0b00 	mov.w	fp, #0
 800c306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c30a:	f104 021a 	add.w	r2, r4, #26
 800c30e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c310:	9306      	str	r3, [sp, #24]
 800c312:	eba3 0309 	sub.w	r3, r3, r9
 800c316:	455b      	cmp	r3, fp
 800c318:	dc31      	bgt.n	800c37e <_printf_float+0x36e>
 800c31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c31c:	459a      	cmp	sl, r3
 800c31e:	dc3a      	bgt.n	800c396 <_printf_float+0x386>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	07da      	lsls	r2, r3, #31
 800c324:	d437      	bmi.n	800c396 <_printf_float+0x386>
 800c326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c328:	ebaa 0903 	sub.w	r9, sl, r3
 800c32c:	9b06      	ldr	r3, [sp, #24]
 800c32e:	ebaa 0303 	sub.w	r3, sl, r3
 800c332:	4599      	cmp	r9, r3
 800c334:	bfa8      	it	ge
 800c336:	4699      	movge	r9, r3
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	dc33      	bgt.n	800c3a6 <_printf_float+0x396>
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c346:	f104 0b1a 	add.w	fp, r4, #26
 800c34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34c:	ebaa 0303 	sub.w	r3, sl, r3
 800c350:	eba3 0309 	sub.w	r3, r3, r9
 800c354:	4543      	cmp	r3, r8
 800c356:	f77f af79 	ble.w	800c24c <_printf_float+0x23c>
 800c35a:	2301      	movs	r3, #1
 800c35c:	465a      	mov	r2, fp
 800c35e:	4631      	mov	r1, r6
 800c360:	4628      	mov	r0, r5
 800c362:	47b8      	blx	r7
 800c364:	3001      	adds	r0, #1
 800c366:	f43f aeae 	beq.w	800c0c6 <_printf_float+0xb6>
 800c36a:	f108 0801 	add.w	r8, r8, #1
 800c36e:	e7ec      	b.n	800c34a <_printf_float+0x33a>
 800c370:	4642      	mov	r2, r8
 800c372:	4631      	mov	r1, r6
 800c374:	4628      	mov	r0, r5
 800c376:	47b8      	blx	r7
 800c378:	3001      	adds	r0, #1
 800c37a:	d1c2      	bne.n	800c302 <_printf_float+0x2f2>
 800c37c:	e6a3      	b.n	800c0c6 <_printf_float+0xb6>
 800c37e:	2301      	movs	r3, #1
 800c380:	4631      	mov	r1, r6
 800c382:	4628      	mov	r0, r5
 800c384:	9206      	str	r2, [sp, #24]
 800c386:	47b8      	blx	r7
 800c388:	3001      	adds	r0, #1
 800c38a:	f43f ae9c 	beq.w	800c0c6 <_printf_float+0xb6>
 800c38e:	9a06      	ldr	r2, [sp, #24]
 800c390:	f10b 0b01 	add.w	fp, fp, #1
 800c394:	e7bb      	b.n	800c30e <_printf_float+0x2fe>
 800c396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c39a:	4631      	mov	r1, r6
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b8      	blx	r7
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	d1c0      	bne.n	800c326 <_printf_float+0x316>
 800c3a4:	e68f      	b.n	800c0c6 <_printf_float+0xb6>
 800c3a6:	9a06      	ldr	r2, [sp, #24]
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	4442      	add	r2, r8
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	47b8      	blx	r7
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d1c3      	bne.n	800c33e <_printf_float+0x32e>
 800c3b6:	e686      	b.n	800c0c6 <_printf_float+0xb6>
 800c3b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c3bc:	f1ba 0f01 	cmp.w	sl, #1
 800c3c0:	dc01      	bgt.n	800c3c6 <_printf_float+0x3b6>
 800c3c2:	07db      	lsls	r3, r3, #31
 800c3c4:	d536      	bpl.n	800c434 <_printf_float+0x424>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	4642      	mov	r2, r8
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b8      	blx	r7
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f43f ae78 	beq.w	800c0c6 <_printf_float+0xb6>
 800c3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f ae70 	beq.w	800c0c6 <_printf_float+0xb6>
 800c3e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3f2:	f7f4 fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3f6:	b9c0      	cbnz	r0, 800c42a <_printf_float+0x41a>
 800c3f8:	4653      	mov	r3, sl
 800c3fa:	f108 0201 	add.w	r2, r8, #1
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	d10c      	bne.n	800c422 <_printf_float+0x412>
 800c408:	e65d      	b.n	800c0c6 <_printf_float+0xb6>
 800c40a:	2301      	movs	r3, #1
 800c40c:	465a      	mov	r2, fp
 800c40e:	4631      	mov	r1, r6
 800c410:	4628      	mov	r0, r5
 800c412:	47b8      	blx	r7
 800c414:	3001      	adds	r0, #1
 800c416:	f43f ae56 	beq.w	800c0c6 <_printf_float+0xb6>
 800c41a:	f108 0801 	add.w	r8, r8, #1
 800c41e:	45d0      	cmp	r8, sl
 800c420:	dbf3      	blt.n	800c40a <_printf_float+0x3fa>
 800c422:	464b      	mov	r3, r9
 800c424:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c428:	e6df      	b.n	800c1ea <_printf_float+0x1da>
 800c42a:	f04f 0800 	mov.w	r8, #0
 800c42e:	f104 0b1a 	add.w	fp, r4, #26
 800c432:	e7f4      	b.n	800c41e <_printf_float+0x40e>
 800c434:	2301      	movs	r3, #1
 800c436:	4642      	mov	r2, r8
 800c438:	e7e1      	b.n	800c3fe <_printf_float+0x3ee>
 800c43a:	2301      	movs	r3, #1
 800c43c:	464a      	mov	r2, r9
 800c43e:	4631      	mov	r1, r6
 800c440:	4628      	mov	r0, r5
 800c442:	47b8      	blx	r7
 800c444:	3001      	adds	r0, #1
 800c446:	f43f ae3e 	beq.w	800c0c6 <_printf_float+0xb6>
 800c44a:	f108 0801 	add.w	r8, r8, #1
 800c44e:	68e3      	ldr	r3, [r4, #12]
 800c450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c452:	1a5b      	subs	r3, r3, r1
 800c454:	4543      	cmp	r3, r8
 800c456:	dcf0      	bgt.n	800c43a <_printf_float+0x42a>
 800c458:	e6fc      	b.n	800c254 <_printf_float+0x244>
 800c45a:	f04f 0800 	mov.w	r8, #0
 800c45e:	f104 0919 	add.w	r9, r4, #25
 800c462:	e7f4      	b.n	800c44e <_printf_float+0x43e>

0800c464 <_printf_common>:
 800c464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	4616      	mov	r6, r2
 800c46a:	4698      	mov	r8, r3
 800c46c:	688a      	ldr	r2, [r1, #8]
 800c46e:	690b      	ldr	r3, [r1, #16]
 800c470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c474:	4293      	cmp	r3, r2
 800c476:	bfb8      	it	lt
 800c478:	4613      	movlt	r3, r2
 800c47a:	6033      	str	r3, [r6, #0]
 800c47c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c480:	4607      	mov	r7, r0
 800c482:	460c      	mov	r4, r1
 800c484:	b10a      	cbz	r2, 800c48a <_printf_common+0x26>
 800c486:	3301      	adds	r3, #1
 800c488:	6033      	str	r3, [r6, #0]
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	0699      	lsls	r1, r3, #26
 800c48e:	bf42      	ittt	mi
 800c490:	6833      	ldrmi	r3, [r6, #0]
 800c492:	3302      	addmi	r3, #2
 800c494:	6033      	strmi	r3, [r6, #0]
 800c496:	6825      	ldr	r5, [r4, #0]
 800c498:	f015 0506 	ands.w	r5, r5, #6
 800c49c:	d106      	bne.n	800c4ac <_printf_common+0x48>
 800c49e:	f104 0a19 	add.w	sl, r4, #25
 800c4a2:	68e3      	ldr	r3, [r4, #12]
 800c4a4:	6832      	ldr	r2, [r6, #0]
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	42ab      	cmp	r3, r5
 800c4aa:	dc26      	bgt.n	800c4fa <_printf_common+0x96>
 800c4ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	3b00      	subs	r3, #0
 800c4b4:	bf18      	it	ne
 800c4b6:	2301      	movne	r3, #1
 800c4b8:	0692      	lsls	r2, r2, #26
 800c4ba:	d42b      	bmi.n	800c514 <_printf_common+0xb0>
 800c4bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4c0:	4641      	mov	r1, r8
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	47c8      	blx	r9
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d01e      	beq.n	800c508 <_printf_common+0xa4>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	6922      	ldr	r2, [r4, #16]
 800c4ce:	f003 0306 	and.w	r3, r3, #6
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	bf02      	ittt	eq
 800c4d6:	68e5      	ldreq	r5, [r4, #12]
 800c4d8:	6833      	ldreq	r3, [r6, #0]
 800c4da:	1aed      	subeq	r5, r5, r3
 800c4dc:	68a3      	ldr	r3, [r4, #8]
 800c4de:	bf0c      	ite	eq
 800c4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4e4:	2500      	movne	r5, #0
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	bfc4      	itt	gt
 800c4ea:	1a9b      	subgt	r3, r3, r2
 800c4ec:	18ed      	addgt	r5, r5, r3
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	341a      	adds	r4, #26
 800c4f2:	42b5      	cmp	r5, r6
 800c4f4:	d11a      	bne.n	800c52c <_printf_common+0xc8>
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	e008      	b.n	800c50c <_printf_common+0xa8>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4652      	mov	r2, sl
 800c4fe:	4641      	mov	r1, r8
 800c500:	4638      	mov	r0, r7
 800c502:	47c8      	blx	r9
 800c504:	3001      	adds	r0, #1
 800c506:	d103      	bne.n	800c510 <_printf_common+0xac>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c510:	3501      	adds	r5, #1
 800c512:	e7c6      	b.n	800c4a2 <_printf_common+0x3e>
 800c514:	18e1      	adds	r1, r4, r3
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	2030      	movs	r0, #48	@ 0x30
 800c51a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c51e:	4422      	add	r2, r4
 800c520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c528:	3302      	adds	r3, #2
 800c52a:	e7c7      	b.n	800c4bc <_printf_common+0x58>
 800c52c:	2301      	movs	r3, #1
 800c52e:	4622      	mov	r2, r4
 800c530:	4641      	mov	r1, r8
 800c532:	4638      	mov	r0, r7
 800c534:	47c8      	blx	r9
 800c536:	3001      	adds	r0, #1
 800c538:	d0e6      	beq.n	800c508 <_printf_common+0xa4>
 800c53a:	3601      	adds	r6, #1
 800c53c:	e7d9      	b.n	800c4f2 <_printf_common+0x8e>
	...

0800c540 <_printf_i>:
 800c540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	7e0f      	ldrb	r7, [r1, #24]
 800c546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c548:	2f78      	cmp	r7, #120	@ 0x78
 800c54a:	4691      	mov	r9, r2
 800c54c:	4680      	mov	r8, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	469a      	mov	sl, r3
 800c552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c556:	d807      	bhi.n	800c568 <_printf_i+0x28>
 800c558:	2f62      	cmp	r7, #98	@ 0x62
 800c55a:	d80a      	bhi.n	800c572 <_printf_i+0x32>
 800c55c:	2f00      	cmp	r7, #0
 800c55e:	f000 80d2 	beq.w	800c706 <_printf_i+0x1c6>
 800c562:	2f58      	cmp	r7, #88	@ 0x58
 800c564:	f000 80b9 	beq.w	800c6da <_printf_i+0x19a>
 800c568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c56c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c570:	e03a      	b.n	800c5e8 <_printf_i+0xa8>
 800c572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c576:	2b15      	cmp	r3, #21
 800c578:	d8f6      	bhi.n	800c568 <_printf_i+0x28>
 800c57a:	a101      	add	r1, pc, #4	@ (adr r1, 800c580 <_printf_i+0x40>)
 800c57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c580:	0800c5d9 	.word	0x0800c5d9
 800c584:	0800c5ed 	.word	0x0800c5ed
 800c588:	0800c569 	.word	0x0800c569
 800c58c:	0800c569 	.word	0x0800c569
 800c590:	0800c569 	.word	0x0800c569
 800c594:	0800c569 	.word	0x0800c569
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c569 	.word	0x0800c569
 800c5a0:	0800c569 	.word	0x0800c569
 800c5a4:	0800c569 	.word	0x0800c569
 800c5a8:	0800c569 	.word	0x0800c569
 800c5ac:	0800c6ed 	.word	0x0800c6ed
 800c5b0:	0800c617 	.word	0x0800c617
 800c5b4:	0800c6a7 	.word	0x0800c6a7
 800c5b8:	0800c569 	.word	0x0800c569
 800c5bc:	0800c569 	.word	0x0800c569
 800c5c0:	0800c70f 	.word	0x0800c70f
 800c5c4:	0800c569 	.word	0x0800c569
 800c5c8:	0800c617 	.word	0x0800c617
 800c5cc:	0800c569 	.word	0x0800c569
 800c5d0:	0800c569 	.word	0x0800c569
 800c5d4:	0800c6af 	.word	0x0800c6af
 800c5d8:	6833      	ldr	r3, [r6, #0]
 800c5da:	1d1a      	adds	r2, r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6032      	str	r2, [r6, #0]
 800c5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e09d      	b.n	800c728 <_printf_i+0x1e8>
 800c5ec:	6833      	ldr	r3, [r6, #0]
 800c5ee:	6820      	ldr	r0, [r4, #0]
 800c5f0:	1d19      	adds	r1, r3, #4
 800c5f2:	6031      	str	r1, [r6, #0]
 800c5f4:	0606      	lsls	r6, r0, #24
 800c5f6:	d501      	bpl.n	800c5fc <_printf_i+0xbc>
 800c5f8:	681d      	ldr	r5, [r3, #0]
 800c5fa:	e003      	b.n	800c604 <_printf_i+0xc4>
 800c5fc:	0645      	lsls	r5, r0, #25
 800c5fe:	d5fb      	bpl.n	800c5f8 <_printf_i+0xb8>
 800c600:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c604:	2d00      	cmp	r5, #0
 800c606:	da03      	bge.n	800c610 <_printf_i+0xd0>
 800c608:	232d      	movs	r3, #45	@ 0x2d
 800c60a:	426d      	negs	r5, r5
 800c60c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c610:	4859      	ldr	r0, [pc, #356]	@ (800c778 <_printf_i+0x238>)
 800c612:	230a      	movs	r3, #10
 800c614:	e011      	b.n	800c63a <_printf_i+0xfa>
 800c616:	6821      	ldr	r1, [r4, #0]
 800c618:	6833      	ldr	r3, [r6, #0]
 800c61a:	0608      	lsls	r0, r1, #24
 800c61c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c620:	d402      	bmi.n	800c628 <_printf_i+0xe8>
 800c622:	0649      	lsls	r1, r1, #25
 800c624:	bf48      	it	mi
 800c626:	b2ad      	uxthmi	r5, r5
 800c628:	2f6f      	cmp	r7, #111	@ 0x6f
 800c62a:	4853      	ldr	r0, [pc, #332]	@ (800c778 <_printf_i+0x238>)
 800c62c:	6033      	str	r3, [r6, #0]
 800c62e:	bf14      	ite	ne
 800c630:	230a      	movne	r3, #10
 800c632:	2308      	moveq	r3, #8
 800c634:	2100      	movs	r1, #0
 800c636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c63a:	6866      	ldr	r6, [r4, #4]
 800c63c:	60a6      	str	r6, [r4, #8]
 800c63e:	2e00      	cmp	r6, #0
 800c640:	bfa2      	ittt	ge
 800c642:	6821      	ldrge	r1, [r4, #0]
 800c644:	f021 0104 	bicge.w	r1, r1, #4
 800c648:	6021      	strge	r1, [r4, #0]
 800c64a:	b90d      	cbnz	r5, 800c650 <_printf_i+0x110>
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	d04b      	beq.n	800c6e8 <_printf_i+0x1a8>
 800c650:	4616      	mov	r6, r2
 800c652:	fbb5 f1f3 	udiv	r1, r5, r3
 800c656:	fb03 5711 	mls	r7, r3, r1, r5
 800c65a:	5dc7      	ldrb	r7, [r0, r7]
 800c65c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c660:	462f      	mov	r7, r5
 800c662:	42bb      	cmp	r3, r7
 800c664:	460d      	mov	r5, r1
 800c666:	d9f4      	bls.n	800c652 <_printf_i+0x112>
 800c668:	2b08      	cmp	r3, #8
 800c66a:	d10b      	bne.n	800c684 <_printf_i+0x144>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	07df      	lsls	r7, r3, #31
 800c670:	d508      	bpl.n	800c684 <_printf_i+0x144>
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	6861      	ldr	r1, [r4, #4]
 800c676:	4299      	cmp	r1, r3
 800c678:	bfde      	ittt	le
 800c67a:	2330      	movle	r3, #48	@ 0x30
 800c67c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c680:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c684:	1b92      	subs	r2, r2, r6
 800c686:	6122      	str	r2, [r4, #16]
 800c688:	f8cd a000 	str.w	sl, [sp]
 800c68c:	464b      	mov	r3, r9
 800c68e:	aa03      	add	r2, sp, #12
 800c690:	4621      	mov	r1, r4
 800c692:	4640      	mov	r0, r8
 800c694:	f7ff fee6 	bl	800c464 <_printf_common>
 800c698:	3001      	adds	r0, #1
 800c69a:	d14a      	bne.n	800c732 <_printf_i+0x1f2>
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b004      	add	sp, #16
 800c6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	f043 0320 	orr.w	r3, r3, #32
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	4833      	ldr	r0, [pc, #204]	@ (800c77c <_printf_i+0x23c>)
 800c6b0:	2778      	movs	r7, #120	@ 0x78
 800c6b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	6831      	ldr	r1, [r6, #0]
 800c6ba:	061f      	lsls	r7, r3, #24
 800c6bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6c0:	d402      	bmi.n	800c6c8 <_printf_i+0x188>
 800c6c2:	065f      	lsls	r7, r3, #25
 800c6c4:	bf48      	it	mi
 800c6c6:	b2ad      	uxthmi	r5, r5
 800c6c8:	6031      	str	r1, [r6, #0]
 800c6ca:	07d9      	lsls	r1, r3, #31
 800c6cc:	bf44      	itt	mi
 800c6ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c6d2:	6023      	strmi	r3, [r4, #0]
 800c6d4:	b11d      	cbz	r5, 800c6de <_printf_i+0x19e>
 800c6d6:	2310      	movs	r3, #16
 800c6d8:	e7ac      	b.n	800c634 <_printf_i+0xf4>
 800c6da:	4827      	ldr	r0, [pc, #156]	@ (800c778 <_printf_i+0x238>)
 800c6dc:	e7e9      	b.n	800c6b2 <_printf_i+0x172>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	f023 0320 	bic.w	r3, r3, #32
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	e7f6      	b.n	800c6d6 <_printf_i+0x196>
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	e7bd      	b.n	800c668 <_printf_i+0x128>
 800c6ec:	6833      	ldr	r3, [r6, #0]
 800c6ee:	6825      	ldr	r5, [r4, #0]
 800c6f0:	6961      	ldr	r1, [r4, #20]
 800c6f2:	1d18      	adds	r0, r3, #4
 800c6f4:	6030      	str	r0, [r6, #0]
 800c6f6:	062e      	lsls	r6, r5, #24
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	d501      	bpl.n	800c700 <_printf_i+0x1c0>
 800c6fc:	6019      	str	r1, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <_printf_i+0x1c6>
 800c700:	0668      	lsls	r0, r5, #25
 800c702:	d5fb      	bpl.n	800c6fc <_printf_i+0x1bc>
 800c704:	8019      	strh	r1, [r3, #0]
 800c706:	2300      	movs	r3, #0
 800c708:	6123      	str	r3, [r4, #16]
 800c70a:	4616      	mov	r6, r2
 800c70c:	e7bc      	b.n	800c688 <_printf_i+0x148>
 800c70e:	6833      	ldr	r3, [r6, #0]
 800c710:	1d1a      	adds	r2, r3, #4
 800c712:	6032      	str	r2, [r6, #0]
 800c714:	681e      	ldr	r6, [r3, #0]
 800c716:	6862      	ldr	r2, [r4, #4]
 800c718:	2100      	movs	r1, #0
 800c71a:	4630      	mov	r0, r6
 800c71c:	f7f3 fd60 	bl	80001e0 <memchr>
 800c720:	b108      	cbz	r0, 800c726 <_printf_i+0x1e6>
 800c722:	1b80      	subs	r0, r0, r6
 800c724:	6060      	str	r0, [r4, #4]
 800c726:	6863      	ldr	r3, [r4, #4]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	2300      	movs	r3, #0
 800c72c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c730:	e7aa      	b.n	800c688 <_printf_i+0x148>
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	4632      	mov	r2, r6
 800c736:	4649      	mov	r1, r9
 800c738:	4640      	mov	r0, r8
 800c73a:	47d0      	blx	sl
 800c73c:	3001      	adds	r0, #1
 800c73e:	d0ad      	beq.n	800c69c <_printf_i+0x15c>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	079b      	lsls	r3, r3, #30
 800c744:	d413      	bmi.n	800c76e <_printf_i+0x22e>
 800c746:	68e0      	ldr	r0, [r4, #12]
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	4298      	cmp	r0, r3
 800c74c:	bfb8      	it	lt
 800c74e:	4618      	movlt	r0, r3
 800c750:	e7a6      	b.n	800c6a0 <_printf_i+0x160>
 800c752:	2301      	movs	r3, #1
 800c754:	4632      	mov	r2, r6
 800c756:	4649      	mov	r1, r9
 800c758:	4640      	mov	r0, r8
 800c75a:	47d0      	blx	sl
 800c75c:	3001      	adds	r0, #1
 800c75e:	d09d      	beq.n	800c69c <_printf_i+0x15c>
 800c760:	3501      	adds	r5, #1
 800c762:	68e3      	ldr	r3, [r4, #12]
 800c764:	9903      	ldr	r1, [sp, #12]
 800c766:	1a5b      	subs	r3, r3, r1
 800c768:	42ab      	cmp	r3, r5
 800c76a:	dcf2      	bgt.n	800c752 <_printf_i+0x212>
 800c76c:	e7eb      	b.n	800c746 <_printf_i+0x206>
 800c76e:	2500      	movs	r5, #0
 800c770:	f104 0619 	add.w	r6, r4, #25
 800c774:	e7f5      	b.n	800c762 <_printf_i+0x222>
 800c776:	bf00      	nop
 800c778:	0801062a 	.word	0x0801062a
 800c77c:	0801063b 	.word	0x0801063b

0800c780 <_scanf_float>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	b087      	sub	sp, #28
 800c786:	4617      	mov	r7, r2
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	688b      	ldr	r3, [r1, #8]
 800c78c:	1e5a      	subs	r2, r3, #1
 800c78e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c792:	bf81      	itttt	hi
 800c794:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c798:	eb03 0b05 	addhi.w	fp, r3, r5
 800c79c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c7a0:	608b      	strhi	r3, [r1, #8]
 800c7a2:	680b      	ldr	r3, [r1, #0]
 800c7a4:	460a      	mov	r2, r1
 800c7a6:	f04f 0500 	mov.w	r5, #0
 800c7aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c7ae:	f842 3b1c 	str.w	r3, [r2], #28
 800c7b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	bf98      	it	ls
 800c7bc:	f04f 0b00 	movls.w	fp, #0
 800c7c0:	9201      	str	r2, [sp, #4]
 800c7c2:	4616      	mov	r6, r2
 800c7c4:	46aa      	mov	sl, r5
 800c7c6:	46a9      	mov	r9, r5
 800c7c8:	9502      	str	r5, [sp, #8]
 800c7ca:	68a2      	ldr	r2, [r4, #8]
 800c7cc:	b152      	cbz	r2, 800c7e4 <_scanf_float+0x64>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	2b4e      	cmp	r3, #78	@ 0x4e
 800c7d4:	d864      	bhi.n	800c8a0 <_scanf_float+0x120>
 800c7d6:	2b40      	cmp	r3, #64	@ 0x40
 800c7d8:	d83c      	bhi.n	800c854 <_scanf_float+0xd4>
 800c7da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c7de:	b2c8      	uxtb	r0, r1
 800c7e0:	280e      	cmp	r0, #14
 800c7e2:	d93a      	bls.n	800c85a <_scanf_float+0xda>
 800c7e4:	f1b9 0f00 	cmp.w	r9, #0
 800c7e8:	d003      	beq.n	800c7f2 <_scanf_float+0x72>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7f6:	f1ba 0f01 	cmp.w	sl, #1
 800c7fa:	f200 8117 	bhi.w	800ca2c <_scanf_float+0x2ac>
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	429e      	cmp	r6, r3
 800c802:	f200 8108 	bhi.w	800ca16 <_scanf_float+0x296>
 800c806:	2001      	movs	r0, #1
 800c808:	b007      	add	sp, #28
 800c80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c812:	2a0d      	cmp	r2, #13
 800c814:	d8e6      	bhi.n	800c7e4 <_scanf_float+0x64>
 800c816:	a101      	add	r1, pc, #4	@ (adr r1, 800c81c <_scanf_float+0x9c>)
 800c818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c81c:	0800c963 	.word	0x0800c963
 800c820:	0800c7e5 	.word	0x0800c7e5
 800c824:	0800c7e5 	.word	0x0800c7e5
 800c828:	0800c7e5 	.word	0x0800c7e5
 800c82c:	0800c9c3 	.word	0x0800c9c3
 800c830:	0800c99b 	.word	0x0800c99b
 800c834:	0800c7e5 	.word	0x0800c7e5
 800c838:	0800c7e5 	.word	0x0800c7e5
 800c83c:	0800c971 	.word	0x0800c971
 800c840:	0800c7e5 	.word	0x0800c7e5
 800c844:	0800c7e5 	.word	0x0800c7e5
 800c848:	0800c7e5 	.word	0x0800c7e5
 800c84c:	0800c7e5 	.word	0x0800c7e5
 800c850:	0800c929 	.word	0x0800c929
 800c854:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c858:	e7db      	b.n	800c812 <_scanf_float+0x92>
 800c85a:	290e      	cmp	r1, #14
 800c85c:	d8c2      	bhi.n	800c7e4 <_scanf_float+0x64>
 800c85e:	a001      	add	r0, pc, #4	@ (adr r0, 800c864 <_scanf_float+0xe4>)
 800c860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c864:	0800c919 	.word	0x0800c919
 800c868:	0800c7e5 	.word	0x0800c7e5
 800c86c:	0800c919 	.word	0x0800c919
 800c870:	0800c9af 	.word	0x0800c9af
 800c874:	0800c7e5 	.word	0x0800c7e5
 800c878:	0800c8c1 	.word	0x0800c8c1
 800c87c:	0800c8ff 	.word	0x0800c8ff
 800c880:	0800c8ff 	.word	0x0800c8ff
 800c884:	0800c8ff 	.word	0x0800c8ff
 800c888:	0800c8ff 	.word	0x0800c8ff
 800c88c:	0800c8ff 	.word	0x0800c8ff
 800c890:	0800c8ff 	.word	0x0800c8ff
 800c894:	0800c8ff 	.word	0x0800c8ff
 800c898:	0800c8ff 	.word	0x0800c8ff
 800c89c:	0800c8ff 	.word	0x0800c8ff
 800c8a0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c8a2:	d809      	bhi.n	800c8b8 <_scanf_float+0x138>
 800c8a4:	2b60      	cmp	r3, #96	@ 0x60
 800c8a6:	d8b2      	bhi.n	800c80e <_scanf_float+0x8e>
 800c8a8:	2b54      	cmp	r3, #84	@ 0x54
 800c8aa:	d07b      	beq.n	800c9a4 <_scanf_float+0x224>
 800c8ac:	2b59      	cmp	r3, #89	@ 0x59
 800c8ae:	d199      	bne.n	800c7e4 <_scanf_float+0x64>
 800c8b0:	2d07      	cmp	r5, #7
 800c8b2:	d197      	bne.n	800c7e4 <_scanf_float+0x64>
 800c8b4:	2508      	movs	r5, #8
 800c8b6:	e02c      	b.n	800c912 <_scanf_float+0x192>
 800c8b8:	2b74      	cmp	r3, #116	@ 0x74
 800c8ba:	d073      	beq.n	800c9a4 <_scanf_float+0x224>
 800c8bc:	2b79      	cmp	r3, #121	@ 0x79
 800c8be:	e7f6      	b.n	800c8ae <_scanf_float+0x12e>
 800c8c0:	6821      	ldr	r1, [r4, #0]
 800c8c2:	05c8      	lsls	r0, r1, #23
 800c8c4:	d51b      	bpl.n	800c8fe <_scanf_float+0x17e>
 800c8c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c8ca:	6021      	str	r1, [r4, #0]
 800c8cc:	f109 0901 	add.w	r9, r9, #1
 800c8d0:	f1bb 0f00 	cmp.w	fp, #0
 800c8d4:	d003      	beq.n	800c8de <_scanf_float+0x15e>
 800c8d6:	3201      	adds	r2, #1
 800c8d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8dc:	60a2      	str	r2, [r4, #8]
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	60a3      	str	r3, [r4, #8]
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	607b      	str	r3, [r7, #4]
 800c8f2:	f340 8087 	ble.w	800ca04 <_scanf_float+0x284>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	e765      	b.n	800c7ca <_scanf_float+0x4a>
 800c8fe:	eb1a 0105 	adds.w	r1, sl, r5
 800c902:	f47f af6f 	bne.w	800c7e4 <_scanf_float+0x64>
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c90c:	6022      	str	r2, [r4, #0]
 800c90e:	460d      	mov	r5, r1
 800c910:	468a      	mov	sl, r1
 800c912:	f806 3b01 	strb.w	r3, [r6], #1
 800c916:	e7e2      	b.n	800c8de <_scanf_float+0x15e>
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	0610      	lsls	r0, r2, #24
 800c91c:	f57f af62 	bpl.w	800c7e4 <_scanf_float+0x64>
 800c920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c924:	6022      	str	r2, [r4, #0]
 800c926:	e7f4      	b.n	800c912 <_scanf_float+0x192>
 800c928:	f1ba 0f00 	cmp.w	sl, #0
 800c92c:	d10e      	bne.n	800c94c <_scanf_float+0x1cc>
 800c92e:	f1b9 0f00 	cmp.w	r9, #0
 800c932:	d10e      	bne.n	800c952 <_scanf_float+0x1d2>
 800c934:	6822      	ldr	r2, [r4, #0]
 800c936:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c93a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c93e:	d108      	bne.n	800c952 <_scanf_float+0x1d2>
 800c940:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c944:	6022      	str	r2, [r4, #0]
 800c946:	f04f 0a01 	mov.w	sl, #1
 800c94a:	e7e2      	b.n	800c912 <_scanf_float+0x192>
 800c94c:	f1ba 0f02 	cmp.w	sl, #2
 800c950:	d055      	beq.n	800c9fe <_scanf_float+0x27e>
 800c952:	2d01      	cmp	r5, #1
 800c954:	d002      	beq.n	800c95c <_scanf_float+0x1dc>
 800c956:	2d04      	cmp	r5, #4
 800c958:	f47f af44 	bne.w	800c7e4 <_scanf_float+0x64>
 800c95c:	3501      	adds	r5, #1
 800c95e:	b2ed      	uxtb	r5, r5
 800c960:	e7d7      	b.n	800c912 <_scanf_float+0x192>
 800c962:	f1ba 0f01 	cmp.w	sl, #1
 800c966:	f47f af3d 	bne.w	800c7e4 <_scanf_float+0x64>
 800c96a:	f04f 0a02 	mov.w	sl, #2
 800c96e:	e7d0      	b.n	800c912 <_scanf_float+0x192>
 800c970:	b97d      	cbnz	r5, 800c992 <_scanf_float+0x212>
 800c972:	f1b9 0f00 	cmp.w	r9, #0
 800c976:	f47f af38 	bne.w	800c7ea <_scanf_float+0x6a>
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c980:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c984:	f040 8108 	bne.w	800cb98 <_scanf_float+0x418>
 800c988:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c98c:	6022      	str	r2, [r4, #0]
 800c98e:	2501      	movs	r5, #1
 800c990:	e7bf      	b.n	800c912 <_scanf_float+0x192>
 800c992:	2d03      	cmp	r5, #3
 800c994:	d0e2      	beq.n	800c95c <_scanf_float+0x1dc>
 800c996:	2d05      	cmp	r5, #5
 800c998:	e7de      	b.n	800c958 <_scanf_float+0x1d8>
 800c99a:	2d02      	cmp	r5, #2
 800c99c:	f47f af22 	bne.w	800c7e4 <_scanf_float+0x64>
 800c9a0:	2503      	movs	r5, #3
 800c9a2:	e7b6      	b.n	800c912 <_scanf_float+0x192>
 800c9a4:	2d06      	cmp	r5, #6
 800c9a6:	f47f af1d 	bne.w	800c7e4 <_scanf_float+0x64>
 800c9aa:	2507      	movs	r5, #7
 800c9ac:	e7b1      	b.n	800c912 <_scanf_float+0x192>
 800c9ae:	6822      	ldr	r2, [r4, #0]
 800c9b0:	0591      	lsls	r1, r2, #22
 800c9b2:	f57f af17 	bpl.w	800c7e4 <_scanf_float+0x64>
 800c9b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c9ba:	6022      	str	r2, [r4, #0]
 800c9bc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c9c0:	e7a7      	b.n	800c912 <_scanf_float+0x192>
 800c9c2:	6822      	ldr	r2, [r4, #0]
 800c9c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c9c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c9cc:	d006      	beq.n	800c9dc <_scanf_float+0x25c>
 800c9ce:	0550      	lsls	r0, r2, #21
 800c9d0:	f57f af08 	bpl.w	800c7e4 <_scanf_float+0x64>
 800c9d4:	f1b9 0f00 	cmp.w	r9, #0
 800c9d8:	f000 80de 	beq.w	800cb98 <_scanf_float+0x418>
 800c9dc:	0591      	lsls	r1, r2, #22
 800c9de:	bf58      	it	pl
 800c9e0:	9902      	ldrpl	r1, [sp, #8]
 800c9e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9e6:	bf58      	it	pl
 800c9e8:	eba9 0101 	subpl.w	r1, r9, r1
 800c9ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c9f0:	bf58      	it	pl
 800c9f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c9f6:	6022      	str	r2, [r4, #0]
 800c9f8:	f04f 0900 	mov.w	r9, #0
 800c9fc:	e789      	b.n	800c912 <_scanf_float+0x192>
 800c9fe:	f04f 0a03 	mov.w	sl, #3
 800ca02:	e786      	b.n	800c912 <_scanf_float+0x192>
 800ca04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca08:	4639      	mov	r1, r7
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4798      	blx	r3
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	f43f aedb 	beq.w	800c7ca <_scanf_float+0x4a>
 800ca14:	e6e6      	b.n	800c7e4 <_scanf_float+0x64>
 800ca16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca1e:	463a      	mov	r2, r7
 800ca20:	4640      	mov	r0, r8
 800ca22:	4798      	blx	r3
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	6123      	str	r3, [r4, #16]
 800ca2a:	e6e8      	b.n	800c7fe <_scanf_float+0x7e>
 800ca2c:	1e6b      	subs	r3, r5, #1
 800ca2e:	2b06      	cmp	r3, #6
 800ca30:	d824      	bhi.n	800ca7c <_scanf_float+0x2fc>
 800ca32:	2d02      	cmp	r5, #2
 800ca34:	d836      	bhi.n	800caa4 <_scanf_float+0x324>
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	429e      	cmp	r6, r3
 800ca3a:	f67f aee4 	bls.w	800c806 <_scanf_float+0x86>
 800ca3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca46:	463a      	mov	r2, r7
 800ca48:	4640      	mov	r0, r8
 800ca4a:	4798      	blx	r3
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	6123      	str	r3, [r4, #16]
 800ca52:	e7f0      	b.n	800ca36 <_scanf_float+0x2b6>
 800ca54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ca5c:	463a      	mov	r2, r7
 800ca5e:	4640      	mov	r0, r8
 800ca60:	4798      	blx	r3
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	6123      	str	r3, [r4, #16]
 800ca68:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca6c:	fa5f fa8a 	uxtb.w	sl, sl
 800ca70:	f1ba 0f02 	cmp.w	sl, #2
 800ca74:	d1ee      	bne.n	800ca54 <_scanf_float+0x2d4>
 800ca76:	3d03      	subs	r5, #3
 800ca78:	b2ed      	uxtb	r5, r5
 800ca7a:	1b76      	subs	r6, r6, r5
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	05da      	lsls	r2, r3, #23
 800ca80:	d530      	bpl.n	800cae4 <_scanf_float+0x364>
 800ca82:	055b      	lsls	r3, r3, #21
 800ca84:	d511      	bpl.n	800caaa <_scanf_float+0x32a>
 800ca86:	9b01      	ldr	r3, [sp, #4]
 800ca88:	429e      	cmp	r6, r3
 800ca8a:	f67f aebc 	bls.w	800c806 <_scanf_float+0x86>
 800ca8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca96:	463a      	mov	r2, r7
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4798      	blx	r3
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	6123      	str	r3, [r4, #16]
 800caa2:	e7f0      	b.n	800ca86 <_scanf_float+0x306>
 800caa4:	46aa      	mov	sl, r5
 800caa6:	46b3      	mov	fp, r6
 800caa8:	e7de      	b.n	800ca68 <_scanf_float+0x2e8>
 800caaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800caae:	6923      	ldr	r3, [r4, #16]
 800cab0:	2965      	cmp	r1, #101	@ 0x65
 800cab2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cab6:	f106 35ff 	add.w	r5, r6, #4294967295
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	d00c      	beq.n	800cad8 <_scanf_float+0x358>
 800cabe:	2945      	cmp	r1, #69	@ 0x45
 800cac0:	d00a      	beq.n	800cad8 <_scanf_float+0x358>
 800cac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cac6:	463a      	mov	r2, r7
 800cac8:	4640      	mov	r0, r8
 800caca:	4798      	blx	r3
 800cacc:	6923      	ldr	r3, [r4, #16]
 800cace:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	1eb5      	subs	r5, r6, #2
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cadc:	463a      	mov	r2, r7
 800cade:	4640      	mov	r0, r8
 800cae0:	4798      	blx	r3
 800cae2:	462e      	mov	r6, r5
 800cae4:	6822      	ldr	r2, [r4, #0]
 800cae6:	f012 0210 	ands.w	r2, r2, #16
 800caea:	d001      	beq.n	800caf0 <_scanf_float+0x370>
 800caec:	2000      	movs	r0, #0
 800caee:	e68b      	b.n	800c808 <_scanf_float+0x88>
 800caf0:	7032      	strb	r2, [r6, #0]
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800caf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cafc:	d11c      	bne.n	800cb38 <_scanf_float+0x3b8>
 800cafe:	9b02      	ldr	r3, [sp, #8]
 800cb00:	454b      	cmp	r3, r9
 800cb02:	eba3 0209 	sub.w	r2, r3, r9
 800cb06:	d123      	bne.n	800cb50 <_scanf_float+0x3d0>
 800cb08:	9901      	ldr	r1, [sp, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	f002 fbf7 	bl	800f300 <_strtod_r>
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	6821      	ldr	r1, [r4, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f011 0f02 	tst.w	r1, #2
 800cb1c:	ec57 6b10 	vmov	r6, r7, d0
 800cb20:	f103 0204 	add.w	r2, r3, #4
 800cb24:	d01f      	beq.n	800cb66 <_scanf_float+0x3e6>
 800cb26:	9903      	ldr	r1, [sp, #12]
 800cb28:	600a      	str	r2, [r1, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	e9c3 6700 	strd	r6, r7, [r3]
 800cb30:	68e3      	ldr	r3, [r4, #12]
 800cb32:	3301      	adds	r3, #1
 800cb34:	60e3      	str	r3, [r4, #12]
 800cb36:	e7d9      	b.n	800caec <_scanf_float+0x36c>
 800cb38:	9b04      	ldr	r3, [sp, #16]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0e4      	beq.n	800cb08 <_scanf_float+0x388>
 800cb3e:	9905      	ldr	r1, [sp, #20]
 800cb40:	230a      	movs	r3, #10
 800cb42:	3101      	adds	r1, #1
 800cb44:	4640      	mov	r0, r8
 800cb46:	f002 fc5b 	bl	800f400 <_strtol_r>
 800cb4a:	9b04      	ldr	r3, [sp, #16]
 800cb4c:	9e05      	ldr	r6, [sp, #20]
 800cb4e:	1ac2      	subs	r2, r0, r3
 800cb50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cb54:	429e      	cmp	r6, r3
 800cb56:	bf28      	it	cs
 800cb58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cb5c:	4910      	ldr	r1, [pc, #64]	@ (800cba0 <_scanf_float+0x420>)
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f000 f8e4 	bl	800cd2c <siprintf>
 800cb64:	e7d0      	b.n	800cb08 <_scanf_float+0x388>
 800cb66:	f011 0f04 	tst.w	r1, #4
 800cb6a:	9903      	ldr	r1, [sp, #12]
 800cb6c:	600a      	str	r2, [r1, #0]
 800cb6e:	d1dc      	bne.n	800cb2a <_scanf_float+0x3aa>
 800cb70:	681d      	ldr	r5, [r3, #0]
 800cb72:	4632      	mov	r2, r6
 800cb74:	463b      	mov	r3, r7
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 ffdf 	bl	8000b3c <__aeabi_dcmpun>
 800cb7e:	b128      	cbz	r0, 800cb8c <_scanf_float+0x40c>
 800cb80:	4808      	ldr	r0, [pc, #32]	@ (800cba4 <_scanf_float+0x424>)
 800cb82:	f000 f9b7 	bl	800cef4 <nanf>
 800cb86:	ed85 0a00 	vstr	s0, [r5]
 800cb8a:	e7d1      	b.n	800cb30 <_scanf_float+0x3b0>
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f4 f832 	bl	8000bf8 <__aeabi_d2f>
 800cb94:	6028      	str	r0, [r5, #0]
 800cb96:	e7cb      	b.n	800cb30 <_scanf_float+0x3b0>
 800cb98:	f04f 0900 	mov.w	r9, #0
 800cb9c:	e629      	b.n	800c7f2 <_scanf_float+0x72>
 800cb9e:	bf00      	nop
 800cba0:	0801064c 	.word	0x0801064c
 800cba4:	080109e5 	.word	0x080109e5

0800cba8 <std>:
 800cba8:	2300      	movs	r3, #0
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	4604      	mov	r4, r0
 800cbae:	e9c0 3300 	strd	r3, r3, [r0]
 800cbb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbb6:	6083      	str	r3, [r0, #8]
 800cbb8:	8181      	strh	r1, [r0, #12]
 800cbba:	6643      	str	r3, [r0, #100]	@ 0x64
 800cbbc:	81c2      	strh	r2, [r0, #14]
 800cbbe:	6183      	str	r3, [r0, #24]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	2208      	movs	r2, #8
 800cbc4:	305c      	adds	r0, #92	@ 0x5c
 800cbc6:	f000 f914 	bl	800cdf2 <memset>
 800cbca:	4b0d      	ldr	r3, [pc, #52]	@ (800cc00 <std+0x58>)
 800cbcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cbce:	4b0d      	ldr	r3, [pc, #52]	@ (800cc04 <std+0x5c>)
 800cbd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cc08 <std+0x60>)
 800cbd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <std+0x64>)
 800cbd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cbda:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <std+0x68>)
 800cbdc:	6224      	str	r4, [r4, #32]
 800cbde:	429c      	cmp	r4, r3
 800cbe0:	d006      	beq.n	800cbf0 <std+0x48>
 800cbe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cbe6:	4294      	cmp	r4, r2
 800cbe8:	d002      	beq.n	800cbf0 <std+0x48>
 800cbea:	33d0      	adds	r3, #208	@ 0xd0
 800cbec:	429c      	cmp	r4, r3
 800cbee:	d105      	bne.n	800cbfc <std+0x54>
 800cbf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf8:	f000 b978 	b.w	800ceec <__retarget_lock_init_recursive>
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	bf00      	nop
 800cc00:	0800cd6d 	.word	0x0800cd6d
 800cc04:	0800cd8f 	.word	0x0800cd8f
 800cc08:	0800cdc7 	.word	0x0800cdc7
 800cc0c:	0800cdeb 	.word	0x0800cdeb
 800cc10:	200022e0 	.word	0x200022e0

0800cc14 <stdio_exit_handler>:
 800cc14:	4a02      	ldr	r2, [pc, #8]	@ (800cc20 <stdio_exit_handler+0xc>)
 800cc16:	4903      	ldr	r1, [pc, #12]	@ (800cc24 <stdio_exit_handler+0x10>)
 800cc18:	4803      	ldr	r0, [pc, #12]	@ (800cc28 <stdio_exit_handler+0x14>)
 800cc1a:	f000 b869 	b.w	800ccf0 <_fwalk_sglue>
 800cc1e:	bf00      	nop
 800cc20:	20000100 	.word	0x20000100
 800cc24:	0800f7bd 	.word	0x0800f7bd
 800cc28:	20000110 	.word	0x20000110

0800cc2c <cleanup_stdio>:
 800cc2c:	6841      	ldr	r1, [r0, #4]
 800cc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cc60 <cleanup_stdio+0x34>)
 800cc30:	4299      	cmp	r1, r3
 800cc32:	b510      	push	{r4, lr}
 800cc34:	4604      	mov	r4, r0
 800cc36:	d001      	beq.n	800cc3c <cleanup_stdio+0x10>
 800cc38:	f002 fdc0 	bl	800f7bc <_fflush_r>
 800cc3c:	68a1      	ldr	r1, [r4, #8]
 800cc3e:	4b09      	ldr	r3, [pc, #36]	@ (800cc64 <cleanup_stdio+0x38>)
 800cc40:	4299      	cmp	r1, r3
 800cc42:	d002      	beq.n	800cc4a <cleanup_stdio+0x1e>
 800cc44:	4620      	mov	r0, r4
 800cc46:	f002 fdb9 	bl	800f7bc <_fflush_r>
 800cc4a:	68e1      	ldr	r1, [r4, #12]
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <cleanup_stdio+0x3c>)
 800cc4e:	4299      	cmp	r1, r3
 800cc50:	d004      	beq.n	800cc5c <cleanup_stdio+0x30>
 800cc52:	4620      	mov	r0, r4
 800cc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc58:	f002 bdb0 	b.w	800f7bc <_fflush_r>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	200022e0 	.word	0x200022e0
 800cc64:	20002348 	.word	0x20002348
 800cc68:	200023b0 	.word	0x200023b0

0800cc6c <global_stdio_init.part.0>:
 800cc6c:	b510      	push	{r4, lr}
 800cc6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc9c <global_stdio_init.part.0+0x30>)
 800cc70:	4c0b      	ldr	r4, [pc, #44]	@ (800cca0 <global_stdio_init.part.0+0x34>)
 800cc72:	4a0c      	ldr	r2, [pc, #48]	@ (800cca4 <global_stdio_init.part.0+0x38>)
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	4620      	mov	r0, r4
 800cc78:	2200      	movs	r2, #0
 800cc7a:	2104      	movs	r1, #4
 800cc7c:	f7ff ff94 	bl	800cba8 <std>
 800cc80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cc84:	2201      	movs	r2, #1
 800cc86:	2109      	movs	r1, #9
 800cc88:	f7ff ff8e 	bl	800cba8 <std>
 800cc8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cc90:	2202      	movs	r2, #2
 800cc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc96:	2112      	movs	r1, #18
 800cc98:	f7ff bf86 	b.w	800cba8 <std>
 800cc9c:	20002418 	.word	0x20002418
 800cca0:	200022e0 	.word	0x200022e0
 800cca4:	0800cc15 	.word	0x0800cc15

0800cca8 <__sfp_lock_acquire>:
 800cca8:	4801      	ldr	r0, [pc, #4]	@ (800ccb0 <__sfp_lock_acquire+0x8>)
 800ccaa:	f000 b920 	b.w	800ceee <__retarget_lock_acquire_recursive>
 800ccae:	bf00      	nop
 800ccb0:	20002421 	.word	0x20002421

0800ccb4 <__sfp_lock_release>:
 800ccb4:	4801      	ldr	r0, [pc, #4]	@ (800ccbc <__sfp_lock_release+0x8>)
 800ccb6:	f000 b91b 	b.w	800cef0 <__retarget_lock_release_recursive>
 800ccba:	bf00      	nop
 800ccbc:	20002421 	.word	0x20002421

0800ccc0 <__sinit>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	f7ff fff0 	bl	800cca8 <__sfp_lock_acquire>
 800ccc8:	6a23      	ldr	r3, [r4, #32]
 800ccca:	b11b      	cbz	r3, 800ccd4 <__sinit+0x14>
 800cccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd0:	f7ff bff0 	b.w	800ccb4 <__sfp_lock_release>
 800ccd4:	4b04      	ldr	r3, [pc, #16]	@ (800cce8 <__sinit+0x28>)
 800ccd6:	6223      	str	r3, [r4, #32]
 800ccd8:	4b04      	ldr	r3, [pc, #16]	@ (800ccec <__sinit+0x2c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1f5      	bne.n	800cccc <__sinit+0xc>
 800cce0:	f7ff ffc4 	bl	800cc6c <global_stdio_init.part.0>
 800cce4:	e7f2      	b.n	800cccc <__sinit+0xc>
 800cce6:	bf00      	nop
 800cce8:	0800cc2d 	.word	0x0800cc2d
 800ccec:	20002418 	.word	0x20002418

0800ccf0 <_fwalk_sglue>:
 800ccf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf4:	4607      	mov	r7, r0
 800ccf6:	4688      	mov	r8, r1
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	2600      	movs	r6, #0
 800ccfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd00:	f1b9 0901 	subs.w	r9, r9, #1
 800cd04:	d505      	bpl.n	800cd12 <_fwalk_sglue+0x22>
 800cd06:	6824      	ldr	r4, [r4, #0]
 800cd08:	2c00      	cmp	r4, #0
 800cd0a:	d1f7      	bne.n	800ccfc <_fwalk_sglue+0xc>
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d907      	bls.n	800cd28 <_fwalk_sglue+0x38>
 800cd18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	d003      	beq.n	800cd28 <_fwalk_sglue+0x38>
 800cd20:	4629      	mov	r1, r5
 800cd22:	4638      	mov	r0, r7
 800cd24:	47c0      	blx	r8
 800cd26:	4306      	orrs	r6, r0
 800cd28:	3568      	adds	r5, #104	@ 0x68
 800cd2a:	e7e9      	b.n	800cd00 <_fwalk_sglue+0x10>

0800cd2c <siprintf>:
 800cd2c:	b40e      	push	{r1, r2, r3}
 800cd2e:	b500      	push	{lr}
 800cd30:	b09c      	sub	sp, #112	@ 0x70
 800cd32:	ab1d      	add	r3, sp, #116	@ 0x74
 800cd34:	9002      	str	r0, [sp, #8]
 800cd36:	9006      	str	r0, [sp, #24]
 800cd38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cd3c:	4809      	ldr	r0, [pc, #36]	@ (800cd64 <siprintf+0x38>)
 800cd3e:	9107      	str	r1, [sp, #28]
 800cd40:	9104      	str	r1, [sp, #16]
 800cd42:	4909      	ldr	r1, [pc, #36]	@ (800cd68 <siprintf+0x3c>)
 800cd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd48:	9105      	str	r1, [sp, #20]
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	a902      	add	r1, sp, #8
 800cd50:	f002 fbb4 	bl	800f4bc <_svfiprintf_r>
 800cd54:	9b02      	ldr	r3, [sp, #8]
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	b01c      	add	sp, #112	@ 0x70
 800cd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd60:	b003      	add	sp, #12
 800cd62:	4770      	bx	lr
 800cd64:	2000010c 	.word	0x2000010c
 800cd68:	ffff0208 	.word	0xffff0208

0800cd6c <__sread>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	460c      	mov	r4, r1
 800cd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd74:	f000 f86c 	bl	800ce50 <_read_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	bfab      	itete	ge
 800cd7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd7e:	89a3      	ldrhlt	r3, [r4, #12]
 800cd80:	181b      	addge	r3, r3, r0
 800cd82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd86:	bfac      	ite	ge
 800cd88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd8a:	81a3      	strhlt	r3, [r4, #12]
 800cd8c:	bd10      	pop	{r4, pc}

0800cd8e <__swrite>:
 800cd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd92:	461f      	mov	r7, r3
 800cd94:	898b      	ldrh	r3, [r1, #12]
 800cd96:	05db      	lsls	r3, r3, #23
 800cd98:	4605      	mov	r5, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4616      	mov	r6, r2
 800cd9e:	d505      	bpl.n	800cdac <__swrite+0x1e>
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	2302      	movs	r3, #2
 800cda6:	2200      	movs	r2, #0
 800cda8:	f000 f840 	bl	800ce2c <_lseek_r>
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdb6:	81a3      	strh	r3, [r4, #12]
 800cdb8:	4632      	mov	r2, r6
 800cdba:	463b      	mov	r3, r7
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	f000 b857 	b.w	800ce74 <_write_r>

0800cdc6 <__sseek>:
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	460c      	mov	r4, r1
 800cdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdce:	f000 f82d 	bl	800ce2c <_lseek_r>
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	bf15      	itete	ne
 800cdd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cdda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cde2:	81a3      	strheq	r3, [r4, #12]
 800cde4:	bf18      	it	ne
 800cde6:	81a3      	strhne	r3, [r4, #12]
 800cde8:	bd10      	pop	{r4, pc}

0800cdea <__sclose>:
 800cdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdee:	f000 b80d 	b.w	800ce0c <_close_r>

0800cdf2 <memset>:
 800cdf2:	4402      	add	r2, r0
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d100      	bne.n	800cdfc <memset+0xa>
 800cdfa:	4770      	bx	lr
 800cdfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ce00:	e7f9      	b.n	800cdf6 <memset+0x4>
	...

0800ce04 <_localeconv_r>:
 800ce04:	4800      	ldr	r0, [pc, #0]	@ (800ce08 <_localeconv_r+0x4>)
 800ce06:	4770      	bx	lr
 800ce08:	2000024c 	.word	0x2000024c

0800ce0c <_close_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	4d06      	ldr	r5, [pc, #24]	@ (800ce28 <_close_r+0x1c>)
 800ce10:	2300      	movs	r3, #0
 800ce12:	4604      	mov	r4, r0
 800ce14:	4608      	mov	r0, r1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	f7f4 fdec 	bl	80019f4 <_close>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	d102      	bne.n	800ce26 <_close_r+0x1a>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	b103      	cbz	r3, 800ce26 <_close_r+0x1a>
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	2000241c 	.word	0x2000241c

0800ce2c <_lseek_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d07      	ldr	r5, [pc, #28]	@ (800ce4c <_lseek_r+0x20>)
 800ce30:	4604      	mov	r4, r0
 800ce32:	4608      	mov	r0, r1
 800ce34:	4611      	mov	r1, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	602a      	str	r2, [r5, #0]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f7f4 fe01 	bl	8001a42 <_lseek>
 800ce40:	1c43      	adds	r3, r0, #1
 800ce42:	d102      	bne.n	800ce4a <_lseek_r+0x1e>
 800ce44:	682b      	ldr	r3, [r5, #0]
 800ce46:	b103      	cbz	r3, 800ce4a <_lseek_r+0x1e>
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	2000241c 	.word	0x2000241c

0800ce50 <_read_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4d07      	ldr	r5, [pc, #28]	@ (800ce70 <_read_r+0x20>)
 800ce54:	4604      	mov	r4, r0
 800ce56:	4608      	mov	r0, r1
 800ce58:	4611      	mov	r1, r2
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	602a      	str	r2, [r5, #0]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f7f4 fd8f 	bl	8001982 <_read>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_read_r+0x1e>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_read_r+0x1e>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	2000241c 	.word	0x2000241c

0800ce74 <_write_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	@ (800ce94 <_write_r+0x20>)
 800ce78:	4604      	mov	r4, r0
 800ce7a:	4608      	mov	r0, r1
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f7f4 fd9a 	bl	80019bc <_write>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_write_r+0x1e>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_write_r+0x1e>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	2000241c 	.word	0x2000241c

0800ce98 <__errno>:
 800ce98:	4b01      	ldr	r3, [pc, #4]	@ (800cea0 <__errno+0x8>)
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	2000010c 	.word	0x2000010c

0800cea4 <__libc_init_array>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4d0d      	ldr	r5, [pc, #52]	@ (800cedc <__libc_init_array+0x38>)
 800cea8:	4c0d      	ldr	r4, [pc, #52]	@ (800cee0 <__libc_init_array+0x3c>)
 800ceaa:	1b64      	subs	r4, r4, r5
 800ceac:	10a4      	asrs	r4, r4, #2
 800ceae:	2600      	movs	r6, #0
 800ceb0:	42a6      	cmp	r6, r4
 800ceb2:	d109      	bne.n	800cec8 <__libc_init_array+0x24>
 800ceb4:	4d0b      	ldr	r5, [pc, #44]	@ (800cee4 <__libc_init_array+0x40>)
 800ceb6:	4c0c      	ldr	r4, [pc, #48]	@ (800cee8 <__libc_init_array+0x44>)
 800ceb8:	f003 fb70 	bl	801059c <_init>
 800cebc:	1b64      	subs	r4, r4, r5
 800cebe:	10a4      	asrs	r4, r4, #2
 800cec0:	2600      	movs	r6, #0
 800cec2:	42a6      	cmp	r6, r4
 800cec4:	d105      	bne.n	800ced2 <__libc_init_array+0x2e>
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cecc:	4798      	blx	r3
 800cece:	3601      	adds	r6, #1
 800ced0:	e7ee      	b.n	800ceb0 <__libc_init_array+0xc>
 800ced2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced6:	4798      	blx	r3
 800ced8:	3601      	adds	r6, #1
 800ceda:	e7f2      	b.n	800cec2 <__libc_init_array+0x1e>
 800cedc:	08010a50 	.word	0x08010a50
 800cee0:	08010a50 	.word	0x08010a50
 800cee4:	08010a50 	.word	0x08010a50
 800cee8:	08010a54 	.word	0x08010a54

0800ceec <__retarget_lock_init_recursive>:
 800ceec:	4770      	bx	lr

0800ceee <__retarget_lock_acquire_recursive>:
 800ceee:	4770      	bx	lr

0800cef0 <__retarget_lock_release_recursive>:
 800cef0:	4770      	bx	lr
	...

0800cef4 <nanf>:
 800cef4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cefc <nanf+0x8>
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	7fc00000 	.word	0x7fc00000

0800cf00 <quorem>:
 800cf00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	6903      	ldr	r3, [r0, #16]
 800cf06:	690c      	ldr	r4, [r1, #16]
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	4607      	mov	r7, r0
 800cf0c:	db7e      	blt.n	800d00c <quorem+0x10c>
 800cf0e:	3c01      	subs	r4, #1
 800cf10:	f101 0814 	add.w	r8, r1, #20
 800cf14:	00a3      	lsls	r3, r4, #2
 800cf16:	f100 0514 	add.w	r5, r0, #20
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf32:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf36:	d32e      	bcc.n	800cf96 <quorem+0x96>
 800cf38:	f04f 0a00 	mov.w	sl, #0
 800cf3c:	46c4      	mov	ip, r8
 800cf3e:	46ae      	mov	lr, r5
 800cf40:	46d3      	mov	fp, sl
 800cf42:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf46:	b298      	uxth	r0, r3
 800cf48:	fb06 a000 	mla	r0, r6, r0, sl
 800cf4c:	0c02      	lsrs	r2, r0, #16
 800cf4e:	0c1b      	lsrs	r3, r3, #16
 800cf50:	fb06 2303 	mla	r3, r6, r3, r2
 800cf54:	f8de 2000 	ldr.w	r2, [lr]
 800cf58:	b280      	uxth	r0, r0
 800cf5a:	b292      	uxth	r2, r2
 800cf5c:	1a12      	subs	r2, r2, r0
 800cf5e:	445a      	add	r2, fp
 800cf60:	f8de 0000 	ldr.w	r0, [lr]
 800cf64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cf6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cf72:	b292      	uxth	r2, r2
 800cf74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cf78:	45e1      	cmp	r9, ip
 800cf7a:	f84e 2b04 	str.w	r2, [lr], #4
 800cf7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cf82:	d2de      	bcs.n	800cf42 <quorem+0x42>
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	58eb      	ldr	r3, [r5, r3]
 800cf88:	b92b      	cbnz	r3, 800cf96 <quorem+0x96>
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	3b04      	subs	r3, #4
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	461a      	mov	r2, r3
 800cf92:	d32f      	bcc.n	800cff4 <quorem+0xf4>
 800cf94:	613c      	str	r4, [r7, #16]
 800cf96:	4638      	mov	r0, r7
 800cf98:	f001 f9c2 	bl	800e320 <__mcmp>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	db25      	blt.n	800cfec <quorem+0xec>
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfa8:	f8d1 c000 	ldr.w	ip, [r1]
 800cfac:	fa1f fe82 	uxth.w	lr, r2
 800cfb0:	fa1f f38c 	uxth.w	r3, ip
 800cfb4:	eba3 030e 	sub.w	r3, r3, lr
 800cfb8:	4403      	add	r3, r0
 800cfba:	0c12      	lsrs	r2, r2, #16
 800cfbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cfc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfca:	45c1      	cmp	r9, r8
 800cfcc:	f841 3b04 	str.w	r3, [r1], #4
 800cfd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cfd4:	d2e6      	bcs.n	800cfa4 <quorem+0xa4>
 800cfd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfde:	b922      	cbnz	r2, 800cfea <quorem+0xea>
 800cfe0:	3b04      	subs	r3, #4
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	d30b      	bcc.n	800d000 <quorem+0x100>
 800cfe8:	613c      	str	r4, [r7, #16]
 800cfea:	3601      	adds	r6, #1
 800cfec:	4630      	mov	r0, r6
 800cfee:	b003      	add	sp, #12
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	6812      	ldr	r2, [r2, #0]
 800cff6:	3b04      	subs	r3, #4
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	d1cb      	bne.n	800cf94 <quorem+0x94>
 800cffc:	3c01      	subs	r4, #1
 800cffe:	e7c6      	b.n	800cf8e <quorem+0x8e>
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	3b04      	subs	r3, #4
 800d004:	2a00      	cmp	r2, #0
 800d006:	d1ef      	bne.n	800cfe8 <quorem+0xe8>
 800d008:	3c01      	subs	r4, #1
 800d00a:	e7ea      	b.n	800cfe2 <quorem+0xe2>
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7ee      	b.n	800cfee <quorem+0xee>

0800d010 <_dtoa_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	69c7      	ldr	r7, [r0, #28]
 800d016:	b099      	sub	sp, #100	@ 0x64
 800d018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d01c:	ec55 4b10 	vmov	r4, r5, d0
 800d020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d022:	9109      	str	r1, [sp, #36]	@ 0x24
 800d024:	4683      	mov	fp, r0
 800d026:	920e      	str	r2, [sp, #56]	@ 0x38
 800d028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d02a:	b97f      	cbnz	r7, 800d04c <_dtoa_r+0x3c>
 800d02c:	2010      	movs	r0, #16
 800d02e:	f000 fdfd 	bl	800dc2c <malloc>
 800d032:	4602      	mov	r2, r0
 800d034:	f8cb 001c 	str.w	r0, [fp, #28]
 800d038:	b920      	cbnz	r0, 800d044 <_dtoa_r+0x34>
 800d03a:	4ba7      	ldr	r3, [pc, #668]	@ (800d2d8 <_dtoa_r+0x2c8>)
 800d03c:	21ef      	movs	r1, #239	@ 0xef
 800d03e:	48a7      	ldr	r0, [pc, #668]	@ (800d2dc <_dtoa_r+0x2cc>)
 800d040:	f002 fc36 	bl	800f8b0 <__assert_func>
 800d044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d048:	6007      	str	r7, [r0, #0]
 800d04a:	60c7      	str	r7, [r0, #12]
 800d04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d050:	6819      	ldr	r1, [r3, #0]
 800d052:	b159      	cbz	r1, 800d06c <_dtoa_r+0x5c>
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	604a      	str	r2, [r1, #4]
 800d058:	2301      	movs	r3, #1
 800d05a:	4093      	lsls	r3, r2
 800d05c:	608b      	str	r3, [r1, #8]
 800d05e:	4658      	mov	r0, fp
 800d060:	f000 feda 	bl	800de18 <_Bfree>
 800d064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	1e2b      	subs	r3, r5, #0
 800d06e:	bfb9      	ittee	lt
 800d070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d074:	9303      	strlt	r3, [sp, #12]
 800d076:	2300      	movge	r3, #0
 800d078:	6033      	strge	r3, [r6, #0]
 800d07a:	9f03      	ldr	r7, [sp, #12]
 800d07c:	4b98      	ldr	r3, [pc, #608]	@ (800d2e0 <_dtoa_r+0x2d0>)
 800d07e:	bfbc      	itt	lt
 800d080:	2201      	movlt	r2, #1
 800d082:	6032      	strlt	r2, [r6, #0]
 800d084:	43bb      	bics	r3, r7
 800d086:	d112      	bne.n	800d0ae <_dtoa_r+0x9e>
 800d088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d08e:	6013      	str	r3, [r2, #0]
 800d090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d094:	4323      	orrs	r3, r4
 800d096:	f000 854d 	beq.w	800db34 <_dtoa_r+0xb24>
 800d09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d2f4 <_dtoa_r+0x2e4>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 854f 	beq.w	800db44 <_dtoa_r+0xb34>
 800d0a6:	f10a 0303 	add.w	r3, sl, #3
 800d0aa:	f000 bd49 	b.w	800db40 <_dtoa_r+0xb30>
 800d0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	ec51 0b17 	vmov	r0, r1, d7
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d0be:	f7f3 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c2:	4680      	mov	r8, r0
 800d0c4:	b158      	cbz	r0, 800d0de <_dtoa_r+0xce>
 800d0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0ce:	b113      	cbz	r3, 800d0d6 <_dtoa_r+0xc6>
 800d0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0d2:	4b84      	ldr	r3, [pc, #528]	@ (800d2e4 <_dtoa_r+0x2d4>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d2f8 <_dtoa_r+0x2e8>
 800d0da:	f000 bd33 	b.w	800db44 <_dtoa_r+0xb34>
 800d0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800d0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f001 fa3a 	bl	800e560 <__d2b>
 800d0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d0f0:	4681      	mov	r9, r0
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	d077      	beq.n	800d1e6 <_dtoa_r+0x1d6>
 800d0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d110:	4619      	mov	r1, r3
 800d112:	2200      	movs	r2, #0
 800d114:	4b74      	ldr	r3, [pc, #464]	@ (800d2e8 <_dtoa_r+0x2d8>)
 800d116:	f7f3 f8bf 	bl	8000298 <__aeabi_dsub>
 800d11a:	a369      	add	r3, pc, #420	@ (adr r3, 800d2c0 <_dtoa_r+0x2b0>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 fa72 	bl	8000608 <__aeabi_dmul>
 800d124:	a368      	add	r3, pc, #416	@ (adr r3, 800d2c8 <_dtoa_r+0x2b8>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f7f3 f8b7 	bl	800029c <__adddf3>
 800d12e:	4604      	mov	r4, r0
 800d130:	4630      	mov	r0, r6
 800d132:	460d      	mov	r5, r1
 800d134:	f7f3 f9fe 	bl	8000534 <__aeabi_i2d>
 800d138:	a365      	add	r3, pc, #404	@ (adr r3, 800d2d0 <_dtoa_r+0x2c0>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	f7f3 fa63 	bl	8000608 <__aeabi_dmul>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 f8a7 	bl	800029c <__adddf3>
 800d14e:	4604      	mov	r4, r0
 800d150:	460d      	mov	r5, r1
 800d152:	f7f3 fd09 	bl	8000b68 <__aeabi_d2iz>
 800d156:	2200      	movs	r2, #0
 800d158:	4607      	mov	r7, r0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fcc4 	bl	8000aec <__aeabi_dcmplt>
 800d164:	b140      	cbz	r0, 800d178 <_dtoa_r+0x168>
 800d166:	4638      	mov	r0, r7
 800d168:	f7f3 f9e4 	bl	8000534 <__aeabi_i2d>
 800d16c:	4622      	mov	r2, r4
 800d16e:	462b      	mov	r3, r5
 800d170:	f7f3 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d174:	b900      	cbnz	r0, 800d178 <_dtoa_r+0x168>
 800d176:	3f01      	subs	r7, #1
 800d178:	2f16      	cmp	r7, #22
 800d17a:	d851      	bhi.n	800d220 <_dtoa_r+0x210>
 800d17c:	4b5b      	ldr	r3, [pc, #364]	@ (800d2ec <_dtoa_r+0x2dc>)
 800d17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d18a:	f7f3 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d048      	beq.n	800d224 <_dtoa_r+0x214>
 800d192:	3f01      	subs	r7, #1
 800d194:	2300      	movs	r3, #0
 800d196:	9312      	str	r3, [sp, #72]	@ 0x48
 800d198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d19a:	1b9b      	subs	r3, r3, r6
 800d19c:	1e5a      	subs	r2, r3, #1
 800d19e:	bf44      	itt	mi
 800d1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d1a4:	2300      	movmi	r3, #0
 800d1a6:	9208      	str	r2, [sp, #32]
 800d1a8:	bf54      	ite	pl
 800d1aa:	f04f 0800 	movpl.w	r8, #0
 800d1ae:	9308      	strmi	r3, [sp, #32]
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	db39      	blt.n	800d228 <_dtoa_r+0x218>
 800d1b4:	9b08      	ldr	r3, [sp, #32]
 800d1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d1b8:	443b      	add	r3, r7
 800d1ba:	9308      	str	r3, [sp, #32]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c2:	2b09      	cmp	r3, #9
 800d1c4:	d864      	bhi.n	800d290 <_dtoa_r+0x280>
 800d1c6:	2b05      	cmp	r3, #5
 800d1c8:	bfc4      	itt	gt
 800d1ca:	3b04      	subgt	r3, #4
 800d1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800d1d4:	bfcc      	ite	gt
 800d1d6:	2400      	movgt	r4, #0
 800d1d8:	2401      	movle	r4, #1
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d863      	bhi.n	800d2a6 <_dtoa_r+0x296>
 800d1de:	e8df f003 	tbb	[pc, r3]
 800d1e2:	372a      	.short	0x372a
 800d1e4:	5535      	.short	0x5535
 800d1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d1ea:	441e      	add	r6, r3
 800d1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d1f0:	2b20      	cmp	r3, #32
 800d1f2:	bfc1      	itttt	gt
 800d1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d1f8:	409f      	lslgt	r7, r3
 800d1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d202:	bfd6      	itet	le
 800d204:	f1c3 0320 	rsble	r3, r3, #32
 800d208:	ea47 0003 	orrgt.w	r0, r7, r3
 800d20c:	fa04 f003 	lslle.w	r0, r4, r3
 800d210:	f7f3 f980 	bl	8000514 <__aeabi_ui2d>
 800d214:	2201      	movs	r2, #1
 800d216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d21a:	3e01      	subs	r6, #1
 800d21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d21e:	e777      	b.n	800d110 <_dtoa_r+0x100>
 800d220:	2301      	movs	r3, #1
 800d222:	e7b8      	b.n	800d196 <_dtoa_r+0x186>
 800d224:	9012      	str	r0, [sp, #72]	@ 0x48
 800d226:	e7b7      	b.n	800d198 <_dtoa_r+0x188>
 800d228:	427b      	negs	r3, r7
 800d22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d22c:	2300      	movs	r3, #0
 800d22e:	eba8 0807 	sub.w	r8, r8, r7
 800d232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d234:	e7c4      	b.n	800d1c0 <_dtoa_r+0x1b0>
 800d236:	2300      	movs	r3, #0
 800d238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	dc35      	bgt.n	800d2ac <_dtoa_r+0x29c>
 800d240:	2301      	movs	r3, #1
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	9307      	str	r3, [sp, #28]
 800d246:	461a      	mov	r2, r3
 800d248:	920e      	str	r2, [sp, #56]	@ 0x38
 800d24a:	e00b      	b.n	800d264 <_dtoa_r+0x254>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e7f3      	b.n	800d238 <_dtoa_r+0x228>
 800d250:	2300      	movs	r3, #0
 800d252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	9307      	str	r3, [sp, #28]
 800d260:	bfb8      	it	lt
 800d262:	2301      	movlt	r3, #1
 800d264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d268:	2100      	movs	r1, #0
 800d26a:	2204      	movs	r2, #4
 800d26c:	f102 0514 	add.w	r5, r2, #20
 800d270:	429d      	cmp	r5, r3
 800d272:	d91f      	bls.n	800d2b4 <_dtoa_r+0x2a4>
 800d274:	6041      	str	r1, [r0, #4]
 800d276:	4658      	mov	r0, fp
 800d278:	f000 fd8e 	bl	800dd98 <_Balloc>
 800d27c:	4682      	mov	sl, r0
 800d27e:	2800      	cmp	r0, #0
 800d280:	d13c      	bne.n	800d2fc <_dtoa_r+0x2ec>
 800d282:	4b1b      	ldr	r3, [pc, #108]	@ (800d2f0 <_dtoa_r+0x2e0>)
 800d284:	4602      	mov	r2, r0
 800d286:	f240 11af 	movw	r1, #431	@ 0x1af
 800d28a:	e6d8      	b.n	800d03e <_dtoa_r+0x2e>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7e0      	b.n	800d252 <_dtoa_r+0x242>
 800d290:	2401      	movs	r4, #1
 800d292:	2300      	movs	r3, #0
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d298:	f04f 33ff 	mov.w	r3, #4294967295
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2312      	movs	r3, #18
 800d2a4:	e7d0      	b.n	800d248 <_dtoa_r+0x238>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2aa:	e7f5      	b.n	800d298 <_dtoa_r+0x288>
 800d2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	9307      	str	r3, [sp, #28]
 800d2b2:	e7d7      	b.n	800d264 <_dtoa_r+0x254>
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	0052      	lsls	r2, r2, #1
 800d2b8:	e7d8      	b.n	800d26c <_dtoa_r+0x25c>
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	636f4361 	.word	0x636f4361
 800d2c4:	3fd287a7 	.word	0x3fd287a7
 800d2c8:	8b60c8b3 	.word	0x8b60c8b3
 800d2cc:	3fc68a28 	.word	0x3fc68a28
 800d2d0:	509f79fb 	.word	0x509f79fb
 800d2d4:	3fd34413 	.word	0x3fd34413
 800d2d8:	0801065e 	.word	0x0801065e
 800d2dc:	08010675 	.word	0x08010675
 800d2e0:	7ff00000 	.word	0x7ff00000
 800d2e4:	08010629 	.word	0x08010629
 800d2e8:	3ff80000 	.word	0x3ff80000
 800d2ec:	08010770 	.word	0x08010770
 800d2f0:	080106cd 	.word	0x080106cd
 800d2f4:	0801065a 	.word	0x0801065a
 800d2f8:	08010628 	.word	0x08010628
 800d2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d300:	6018      	str	r0, [r3, #0]
 800d302:	9b07      	ldr	r3, [sp, #28]
 800d304:	2b0e      	cmp	r3, #14
 800d306:	f200 80a4 	bhi.w	800d452 <_dtoa_r+0x442>
 800d30a:	2c00      	cmp	r4, #0
 800d30c:	f000 80a1 	beq.w	800d452 <_dtoa_r+0x442>
 800d310:	2f00      	cmp	r7, #0
 800d312:	dd33      	ble.n	800d37c <_dtoa_r+0x36c>
 800d314:	4bad      	ldr	r3, [pc, #692]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d316:	f007 020f 	and.w	r2, r7, #15
 800d31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d31e:	ed93 7b00 	vldr	d7, [r3]
 800d322:	05f8      	lsls	r0, r7, #23
 800d324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d32c:	d516      	bpl.n	800d35c <_dtoa_r+0x34c>
 800d32e:	4ba8      	ldr	r3, [pc, #672]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d338:	f7f3 fa90 	bl	800085c <__aeabi_ddiv>
 800d33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d340:	f004 040f 	and.w	r4, r4, #15
 800d344:	2603      	movs	r6, #3
 800d346:	4da2      	ldr	r5, [pc, #648]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d348:	b954      	cbnz	r4, 800d360 <_dtoa_r+0x350>
 800d34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d352:	f7f3 fa83 	bl	800085c <__aeabi_ddiv>
 800d356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d35a:	e028      	b.n	800d3ae <_dtoa_r+0x39e>
 800d35c:	2602      	movs	r6, #2
 800d35e:	e7f2      	b.n	800d346 <_dtoa_r+0x336>
 800d360:	07e1      	lsls	r1, r4, #31
 800d362:	d508      	bpl.n	800d376 <_dtoa_r+0x366>
 800d364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d36c:	f7f3 f94c 	bl	8000608 <__aeabi_dmul>
 800d370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d374:	3601      	adds	r6, #1
 800d376:	1064      	asrs	r4, r4, #1
 800d378:	3508      	adds	r5, #8
 800d37a:	e7e5      	b.n	800d348 <_dtoa_r+0x338>
 800d37c:	f000 80d2 	beq.w	800d524 <_dtoa_r+0x514>
 800d380:	427c      	negs	r4, r7
 800d382:	4b92      	ldr	r3, [pc, #584]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d384:	4d92      	ldr	r5, [pc, #584]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d386:	f004 020f 	and.w	r2, r4, #15
 800d38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d396:	f7f3 f937 	bl	8000608 <__aeabi_dmul>
 800d39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d39e:	1124      	asrs	r4, r4, #4
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	2602      	movs	r6, #2
 800d3a4:	2c00      	cmp	r4, #0
 800d3a6:	f040 80b2 	bne.w	800d50e <_dtoa_r+0x4fe>
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1d3      	bne.n	800d356 <_dtoa_r+0x346>
 800d3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 80b7 	beq.w	800d528 <_dtoa_r+0x518>
 800d3ba:	4b86      	ldr	r3, [pc, #536]	@ (800d5d4 <_dtoa_r+0x5c4>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4620      	mov	r0, r4
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	f7f3 fb93 	bl	8000aec <__aeabi_dcmplt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f000 80ae 	beq.w	800d528 <_dtoa_r+0x518>
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 80aa 	beq.w	800d528 <_dtoa_r+0x518>
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd37      	ble.n	800d44a <_dtoa_r+0x43a>
 800d3da:	1e7b      	subs	r3, r7, #1
 800d3dc:	9304      	str	r3, [sp, #16]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7f3 f90f 	bl	8000608 <__aeabi_dmul>
 800d3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ee:	9c00      	ldr	r4, [sp, #0]
 800d3f0:	3601      	adds	r6, #1
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7f3 f89e 	bl	8000534 <__aeabi_i2d>
 800d3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3fc:	f7f3 f904 	bl	8000608 <__aeabi_dmul>
 800d400:	4b76      	ldr	r3, [pc, #472]	@ (800d5dc <_dtoa_r+0x5cc>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f2 ff4a 	bl	800029c <__adddf3>
 800d408:	4605      	mov	r5, r0
 800d40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d40e:	2c00      	cmp	r4, #0
 800d410:	f040 808d 	bne.w	800d52e <_dtoa_r+0x51e>
 800d414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d418:	4b71      	ldr	r3, [pc, #452]	@ (800d5e0 <_dtoa_r+0x5d0>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	f7f2 ff3c 	bl	8000298 <__aeabi_dsub>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d428:	462a      	mov	r2, r5
 800d42a:	4633      	mov	r3, r6
 800d42c:	f7f3 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 800d430:	2800      	cmp	r0, #0
 800d432:	f040 828b 	bne.w	800d94c <_dtoa_r+0x93c>
 800d436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d43a:	462a      	mov	r2, r5
 800d43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d440:	f7f3 fb54 	bl	8000aec <__aeabi_dcmplt>
 800d444:	2800      	cmp	r0, #0
 800d446:	f040 8128 	bne.w	800d69a <_dtoa_r+0x68a>
 800d44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d454:	2b00      	cmp	r3, #0
 800d456:	f2c0 815a 	blt.w	800d70e <_dtoa_r+0x6fe>
 800d45a:	2f0e      	cmp	r7, #14
 800d45c:	f300 8157 	bgt.w	800d70e <_dtoa_r+0x6fe>
 800d460:	4b5a      	ldr	r3, [pc, #360]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d466:	ed93 7b00 	vldr	d7, [r3]
 800d46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	ed8d 7b00 	vstr	d7, [sp]
 800d472:	da03      	bge.n	800d47c <_dtoa_r+0x46c>
 800d474:	9b07      	ldr	r3, [sp, #28]
 800d476:	2b00      	cmp	r3, #0
 800d478:	f340 8101 	ble.w	800d67e <_dtoa_r+0x66e>
 800d47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d480:	4656      	mov	r6, sl
 800d482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d486:	4620      	mov	r0, r4
 800d488:	4629      	mov	r1, r5
 800d48a:	f7f3 f9e7 	bl	800085c <__aeabi_ddiv>
 800d48e:	f7f3 fb6b 	bl	8000b68 <__aeabi_d2iz>
 800d492:	4680      	mov	r8, r0
 800d494:	f7f3 f84e 	bl	8000534 <__aeabi_i2d>
 800d498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d49c:	f7f3 f8b4 	bl	8000608 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d4ac:	f7f2 fef4 	bl	8000298 <__aeabi_dsub>
 800d4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800d4b4:	9d07      	ldr	r5, [sp, #28]
 800d4b6:	eba6 040a 	sub.w	r4, r6, sl
 800d4ba:	42a5      	cmp	r5, r4
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	f040 8117 	bne.w	800d6f2 <_dtoa_r+0x6e2>
 800d4c4:	f7f2 feea 	bl	800029c <__adddf3>
 800d4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	f7f3 fb2a 	bl	8000b28 <__aeabi_dcmpgt>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 80f9 	bne.w	800d6cc <_dtoa_r+0x6bc>
 800d4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f3 faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4e6:	b118      	cbz	r0, 800d4f0 <_dtoa_r+0x4e0>
 800d4e8:	f018 0f01 	tst.w	r8, #1
 800d4ec:	f040 80ee 	bne.w	800d6cc <_dtoa_r+0x6bc>
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4658      	mov	r0, fp
 800d4f4:	f000 fc90 	bl	800de18 <_Bfree>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	7033      	strb	r3, [r6, #0]
 800d4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4fe:	3701      	adds	r7, #1
 800d500:	601f      	str	r7, [r3, #0]
 800d502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 831d 	beq.w	800db44 <_dtoa_r+0xb34>
 800d50a:	601e      	str	r6, [r3, #0]
 800d50c:	e31a      	b.n	800db44 <_dtoa_r+0xb34>
 800d50e:	07e2      	lsls	r2, r4, #31
 800d510:	d505      	bpl.n	800d51e <_dtoa_r+0x50e>
 800d512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d516:	f7f3 f877 	bl	8000608 <__aeabi_dmul>
 800d51a:	3601      	adds	r6, #1
 800d51c:	2301      	movs	r3, #1
 800d51e:	1064      	asrs	r4, r4, #1
 800d520:	3508      	adds	r5, #8
 800d522:	e73f      	b.n	800d3a4 <_dtoa_r+0x394>
 800d524:	2602      	movs	r6, #2
 800d526:	e742      	b.n	800d3ae <_dtoa_r+0x39e>
 800d528:	9c07      	ldr	r4, [sp, #28]
 800d52a:	9704      	str	r7, [sp, #16]
 800d52c:	e761      	b.n	800d3f2 <_dtoa_r+0x3e2>
 800d52e:	4b27      	ldr	r3, [pc, #156]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d53a:	4454      	add	r4, sl
 800d53c:	2900      	cmp	r1, #0
 800d53e:	d053      	beq.n	800d5e8 <_dtoa_r+0x5d8>
 800d540:	4928      	ldr	r1, [pc, #160]	@ (800d5e4 <_dtoa_r+0x5d4>)
 800d542:	2000      	movs	r0, #0
 800d544:	f7f3 f98a 	bl	800085c <__aeabi_ddiv>
 800d548:	4633      	mov	r3, r6
 800d54a:	462a      	mov	r2, r5
 800d54c:	f7f2 fea4 	bl	8000298 <__aeabi_dsub>
 800d550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d554:	4656      	mov	r6, sl
 800d556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d55a:	f7f3 fb05 	bl	8000b68 <__aeabi_d2iz>
 800d55e:	4605      	mov	r5, r0
 800d560:	f7f2 ffe8 	bl	8000534 <__aeabi_i2d>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d56c:	f7f2 fe94 	bl	8000298 <__aeabi_dsub>
 800d570:	3530      	adds	r5, #48	@ 0x30
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d57a:	f806 5b01 	strb.w	r5, [r6], #1
 800d57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d582:	f7f3 fab3 	bl	8000aec <__aeabi_dcmplt>
 800d586:	2800      	cmp	r0, #0
 800d588:	d171      	bne.n	800d66e <_dtoa_r+0x65e>
 800d58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d58e:	4911      	ldr	r1, [pc, #68]	@ (800d5d4 <_dtoa_r+0x5c4>)
 800d590:	2000      	movs	r0, #0
 800d592:	f7f2 fe81 	bl	8000298 <__aeabi_dsub>
 800d596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d59a:	f7f3 faa7 	bl	8000aec <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 8095 	bne.w	800d6ce <_dtoa_r+0x6be>
 800d5a4:	42a6      	cmp	r6, r4
 800d5a6:	f43f af50 	beq.w	800d44a <_dtoa_r+0x43a>
 800d5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f7f3 f829 	bl	8000608 <__aeabi_dmul>
 800d5b6:	4b08      	ldr	r3, [pc, #32]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5bc:	2200      	movs	r2, #0
 800d5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c2:	f7f3 f821 	bl	8000608 <__aeabi_dmul>
 800d5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ca:	e7c4      	b.n	800d556 <_dtoa_r+0x546>
 800d5cc:	08010770 	.word	0x08010770
 800d5d0:	08010748 	.word	0x08010748
 800d5d4:	3ff00000 	.word	0x3ff00000
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	401c0000 	.word	0x401c0000
 800d5e0:	40140000 	.word	0x40140000
 800d5e4:	3fe00000 	.word	0x3fe00000
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7f3 f80c 	bl	8000608 <__aeabi_dmul>
 800d5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d5f6:	4656      	mov	r6, sl
 800d5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5fc:	f7f3 fab4 	bl	8000b68 <__aeabi_d2iz>
 800d600:	4605      	mov	r5, r0
 800d602:	f7f2 ff97 	bl	8000534 <__aeabi_i2d>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d60e:	f7f2 fe43 	bl	8000298 <__aeabi_dsub>
 800d612:	3530      	adds	r5, #48	@ 0x30
 800d614:	f806 5b01 	strb.w	r5, [r6], #1
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	42a6      	cmp	r6, r4
 800d61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d622:	f04f 0200 	mov.w	r2, #0
 800d626:	d124      	bne.n	800d672 <_dtoa_r+0x662>
 800d628:	4bac      	ldr	r3, [pc, #688]	@ (800d8dc <_dtoa_r+0x8cc>)
 800d62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d62e:	f7f2 fe35 	bl	800029c <__adddf3>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d63a:	f7f3 fa75 	bl	8000b28 <__aeabi_dcmpgt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d145      	bne.n	800d6ce <_dtoa_r+0x6be>
 800d642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d646:	49a5      	ldr	r1, [pc, #660]	@ (800d8dc <_dtoa_r+0x8cc>)
 800d648:	2000      	movs	r0, #0
 800d64a:	f7f2 fe25 	bl	8000298 <__aeabi_dsub>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d656:	f7f3 fa49 	bl	8000aec <__aeabi_dcmplt>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	f43f aef5 	beq.w	800d44a <_dtoa_r+0x43a>
 800d660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d662:	1e73      	subs	r3, r6, #1
 800d664:	9315      	str	r3, [sp, #84]	@ 0x54
 800d666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d66a:	2b30      	cmp	r3, #48	@ 0x30
 800d66c:	d0f8      	beq.n	800d660 <_dtoa_r+0x650>
 800d66e:	9f04      	ldr	r7, [sp, #16]
 800d670:	e73e      	b.n	800d4f0 <_dtoa_r+0x4e0>
 800d672:	4b9b      	ldr	r3, [pc, #620]	@ (800d8e0 <_dtoa_r+0x8d0>)
 800d674:	f7f2 ffc8 	bl	8000608 <__aeabi_dmul>
 800d678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67c:	e7bc      	b.n	800d5f8 <_dtoa_r+0x5e8>
 800d67e:	d10c      	bne.n	800d69a <_dtoa_r+0x68a>
 800d680:	4b98      	ldr	r3, [pc, #608]	@ (800d8e4 <_dtoa_r+0x8d4>)
 800d682:	2200      	movs	r2, #0
 800d684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d688:	f7f2 ffbe 	bl	8000608 <__aeabi_dmul>
 800d68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d690:	f7f3 fa40 	bl	8000b14 <__aeabi_dcmpge>
 800d694:	2800      	cmp	r0, #0
 800d696:	f000 8157 	beq.w	800d948 <_dtoa_r+0x938>
 800d69a:	2400      	movs	r4, #0
 800d69c:	4625      	mov	r5, r4
 800d69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	4656      	mov	r6, sl
 800d6a6:	2700      	movs	r7, #0
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4658      	mov	r0, fp
 800d6ac:	f000 fbb4 	bl	800de18 <_Bfree>
 800d6b0:	2d00      	cmp	r5, #0
 800d6b2:	d0dc      	beq.n	800d66e <_dtoa_r+0x65e>
 800d6b4:	b12f      	cbz	r7, 800d6c2 <_dtoa_r+0x6b2>
 800d6b6:	42af      	cmp	r7, r5
 800d6b8:	d003      	beq.n	800d6c2 <_dtoa_r+0x6b2>
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	4658      	mov	r0, fp
 800d6be:	f000 fbab 	bl	800de18 <_Bfree>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4658      	mov	r0, fp
 800d6c6:	f000 fba7 	bl	800de18 <_Bfree>
 800d6ca:	e7d0      	b.n	800d66e <_dtoa_r+0x65e>
 800d6cc:	9704      	str	r7, [sp, #16]
 800d6ce:	4633      	mov	r3, r6
 800d6d0:	461e      	mov	r6, r3
 800d6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6d6:	2a39      	cmp	r2, #57	@ 0x39
 800d6d8:	d107      	bne.n	800d6ea <_dtoa_r+0x6da>
 800d6da:	459a      	cmp	sl, r3
 800d6dc:	d1f8      	bne.n	800d6d0 <_dtoa_r+0x6c0>
 800d6de:	9a04      	ldr	r2, [sp, #16]
 800d6e0:	3201      	adds	r2, #1
 800d6e2:	9204      	str	r2, [sp, #16]
 800d6e4:	2230      	movs	r2, #48	@ 0x30
 800d6e6:	f88a 2000 	strb.w	r2, [sl]
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e7bd      	b.n	800d66e <_dtoa_r+0x65e>
 800d6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800d8e0 <_dtoa_r+0x8d0>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	4604      	mov	r4, r0
 800d700:	460d      	mov	r5, r1
 800d702:	f7f3 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f aebb 	beq.w	800d482 <_dtoa_r+0x472>
 800d70c:	e6f0      	b.n	800d4f0 <_dtoa_r+0x4e0>
 800d70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d710:	2a00      	cmp	r2, #0
 800d712:	f000 80db 	beq.w	800d8cc <_dtoa_r+0x8bc>
 800d716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d718:	2a01      	cmp	r2, #1
 800d71a:	f300 80bf 	bgt.w	800d89c <_dtoa_r+0x88c>
 800d71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d720:	2a00      	cmp	r2, #0
 800d722:	f000 80b7 	beq.w	800d894 <_dtoa_r+0x884>
 800d726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d72c:	4646      	mov	r6, r8
 800d72e:	9a08      	ldr	r2, [sp, #32]
 800d730:	2101      	movs	r1, #1
 800d732:	441a      	add	r2, r3
 800d734:	4658      	mov	r0, fp
 800d736:	4498      	add	r8, r3
 800d738:	9208      	str	r2, [sp, #32]
 800d73a:	f000 fc6b 	bl	800e014 <__i2b>
 800d73e:	4605      	mov	r5, r0
 800d740:	b15e      	cbz	r6, 800d75a <_dtoa_r+0x74a>
 800d742:	9b08      	ldr	r3, [sp, #32]
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd08      	ble.n	800d75a <_dtoa_r+0x74a>
 800d748:	42b3      	cmp	r3, r6
 800d74a:	9a08      	ldr	r2, [sp, #32]
 800d74c:	bfa8      	it	ge
 800d74e:	4633      	movge	r3, r6
 800d750:	eba8 0803 	sub.w	r8, r8, r3
 800d754:	1af6      	subs	r6, r6, r3
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	9308      	str	r3, [sp, #32]
 800d75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d75c:	b1f3      	cbz	r3, 800d79c <_dtoa_r+0x78c>
 800d75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 80b7 	beq.w	800d8d4 <_dtoa_r+0x8c4>
 800d766:	b18c      	cbz	r4, 800d78c <_dtoa_r+0x77c>
 800d768:	4629      	mov	r1, r5
 800d76a:	4622      	mov	r2, r4
 800d76c:	4658      	mov	r0, fp
 800d76e:	f000 fd11 	bl	800e194 <__pow5mult>
 800d772:	464a      	mov	r2, r9
 800d774:	4601      	mov	r1, r0
 800d776:	4605      	mov	r5, r0
 800d778:	4658      	mov	r0, fp
 800d77a:	f000 fc61 	bl	800e040 <__multiply>
 800d77e:	4649      	mov	r1, r9
 800d780:	9004      	str	r0, [sp, #16]
 800d782:	4658      	mov	r0, fp
 800d784:	f000 fb48 	bl	800de18 <_Bfree>
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	4699      	mov	r9, r3
 800d78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78e:	1b1a      	subs	r2, r3, r4
 800d790:	d004      	beq.n	800d79c <_dtoa_r+0x78c>
 800d792:	4649      	mov	r1, r9
 800d794:	4658      	mov	r0, fp
 800d796:	f000 fcfd 	bl	800e194 <__pow5mult>
 800d79a:	4681      	mov	r9, r0
 800d79c:	2101      	movs	r1, #1
 800d79e:	4658      	mov	r0, fp
 800d7a0:	f000 fc38 	bl	800e014 <__i2b>
 800d7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 81cf 	beq.w	800db4c <_dtoa_r+0xb3c>
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	4658      	mov	r0, fp
 800d7b4:	f000 fcee 	bl	800e194 <__pow5mult>
 800d7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	4604      	mov	r4, r0
 800d7be:	f300 8095 	bgt.w	800d8ec <_dtoa_r+0x8dc>
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f040 8087 	bne.w	800d8d8 <_dtoa_r+0x8c8>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 8089 	bne.w	800d8e8 <_dtoa_r+0x8d8>
 800d7d6:	9b03      	ldr	r3, [sp, #12]
 800d7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7dc:	0d1b      	lsrs	r3, r3, #20
 800d7de:	051b      	lsls	r3, r3, #20
 800d7e0:	b12b      	cbz	r3, 800d7ee <_dtoa_r+0x7de>
 800d7e2:	9b08      	ldr	r3, [sp, #32]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	9308      	str	r3, [sp, #32]
 800d7e8:	f108 0801 	add.w	r8, r8, #1
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 81b0 	beq.w	800db58 <_dtoa_r+0xb48>
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7fe:	6918      	ldr	r0, [r3, #16]
 800d800:	f000 fbbc 	bl	800df7c <__hi0bits>
 800d804:	f1c0 0020 	rsb	r0, r0, #32
 800d808:	9b08      	ldr	r3, [sp, #32]
 800d80a:	4418      	add	r0, r3
 800d80c:	f010 001f 	ands.w	r0, r0, #31
 800d810:	d077      	beq.n	800d902 <_dtoa_r+0x8f2>
 800d812:	f1c0 0320 	rsb	r3, r0, #32
 800d816:	2b04      	cmp	r3, #4
 800d818:	dd6b      	ble.n	800d8f2 <_dtoa_r+0x8e2>
 800d81a:	9b08      	ldr	r3, [sp, #32]
 800d81c:	f1c0 001c 	rsb	r0, r0, #28
 800d820:	4403      	add	r3, r0
 800d822:	4480      	add	r8, r0
 800d824:	4406      	add	r6, r0
 800d826:	9308      	str	r3, [sp, #32]
 800d828:	f1b8 0f00 	cmp.w	r8, #0
 800d82c:	dd05      	ble.n	800d83a <_dtoa_r+0x82a>
 800d82e:	4649      	mov	r1, r9
 800d830:	4642      	mov	r2, r8
 800d832:	4658      	mov	r0, fp
 800d834:	f000 fd08 	bl	800e248 <__lshift>
 800d838:	4681      	mov	r9, r0
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dd05      	ble.n	800d84c <_dtoa_r+0x83c>
 800d840:	4621      	mov	r1, r4
 800d842:	461a      	mov	r2, r3
 800d844:	4658      	mov	r0, fp
 800d846:	f000 fcff 	bl	800e248 <__lshift>
 800d84a:	4604      	mov	r4, r0
 800d84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d059      	beq.n	800d906 <_dtoa_r+0x8f6>
 800d852:	4621      	mov	r1, r4
 800d854:	4648      	mov	r0, r9
 800d856:	f000 fd63 	bl	800e320 <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	da53      	bge.n	800d906 <_dtoa_r+0x8f6>
 800d85e:	1e7b      	subs	r3, r7, #1
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	4649      	mov	r1, r9
 800d864:	2300      	movs	r3, #0
 800d866:	220a      	movs	r2, #10
 800d868:	4658      	mov	r0, fp
 800d86a:	f000 faf7 	bl	800de5c <__multadd>
 800d86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d870:	4681      	mov	r9, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 8172 	beq.w	800db5c <_dtoa_r+0xb4c>
 800d878:	2300      	movs	r3, #0
 800d87a:	4629      	mov	r1, r5
 800d87c:	220a      	movs	r2, #10
 800d87e:	4658      	mov	r0, fp
 800d880:	f000 faec 	bl	800de5c <__multadd>
 800d884:	9b00      	ldr	r3, [sp, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	4605      	mov	r5, r0
 800d88a:	dc67      	bgt.n	800d95c <_dtoa_r+0x94c>
 800d88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d88e:	2b02      	cmp	r3, #2
 800d890:	dc41      	bgt.n	800d916 <_dtoa_r+0x906>
 800d892:	e063      	b.n	800d95c <_dtoa_r+0x94c>
 800d894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d89a:	e746      	b.n	800d72a <_dtoa_r+0x71a>
 800d89c:	9b07      	ldr	r3, [sp, #28]
 800d89e:	1e5c      	subs	r4, r3, #1
 800d8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	bfbf      	itttt	lt
 800d8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d8ac:	1ae3      	sublt	r3, r4, r3
 800d8ae:	bfb4      	ite	lt
 800d8b0:	18d2      	addlt	r2, r2, r3
 800d8b2:	1b1c      	subge	r4, r3, r4
 800d8b4:	9b07      	ldr	r3, [sp, #28]
 800d8b6:	bfbc      	itt	lt
 800d8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d8ba:	2400      	movlt	r4, #0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bfb5      	itete	lt
 800d8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800d8c4:	9b07      	ldrge	r3, [sp, #28]
 800d8c6:	2300      	movlt	r3, #0
 800d8c8:	4646      	movge	r6, r8
 800d8ca:	e730      	b.n	800d72e <_dtoa_r+0x71e>
 800d8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d8d0:	4646      	mov	r6, r8
 800d8d2:	e735      	b.n	800d740 <_dtoa_r+0x730>
 800d8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8d6:	e75c      	b.n	800d792 <_dtoa_r+0x782>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e788      	b.n	800d7ee <_dtoa_r+0x7de>
 800d8dc:	3fe00000 	.word	0x3fe00000
 800d8e0:	40240000 	.word	0x40240000
 800d8e4:	40140000 	.word	0x40140000
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	e780      	b.n	800d7ee <_dtoa_r+0x7de>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8f0:	e782      	b.n	800d7f8 <_dtoa_r+0x7e8>
 800d8f2:	d099      	beq.n	800d828 <_dtoa_r+0x818>
 800d8f4:	9a08      	ldr	r2, [sp, #32]
 800d8f6:	331c      	adds	r3, #28
 800d8f8:	441a      	add	r2, r3
 800d8fa:	4498      	add	r8, r3
 800d8fc:	441e      	add	r6, r3
 800d8fe:	9208      	str	r2, [sp, #32]
 800d900:	e792      	b.n	800d828 <_dtoa_r+0x818>
 800d902:	4603      	mov	r3, r0
 800d904:	e7f6      	b.n	800d8f4 <_dtoa_r+0x8e4>
 800d906:	9b07      	ldr	r3, [sp, #28]
 800d908:	9704      	str	r7, [sp, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dc20      	bgt.n	800d950 <_dtoa_r+0x940>
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d912:	2b02      	cmp	r3, #2
 800d914:	dd1e      	ble.n	800d954 <_dtoa_r+0x944>
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f47f aec0 	bne.w	800d69e <_dtoa_r+0x68e>
 800d91e:	4621      	mov	r1, r4
 800d920:	2205      	movs	r2, #5
 800d922:	4658      	mov	r0, fp
 800d924:	f000 fa9a 	bl	800de5c <__multadd>
 800d928:	4601      	mov	r1, r0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4648      	mov	r0, r9
 800d92e:	f000 fcf7 	bl	800e320 <__mcmp>
 800d932:	2800      	cmp	r0, #0
 800d934:	f77f aeb3 	ble.w	800d69e <_dtoa_r+0x68e>
 800d938:	4656      	mov	r6, sl
 800d93a:	2331      	movs	r3, #49	@ 0x31
 800d93c:	f806 3b01 	strb.w	r3, [r6], #1
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	3301      	adds	r3, #1
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	e6ae      	b.n	800d6a6 <_dtoa_r+0x696>
 800d948:	9c07      	ldr	r4, [sp, #28]
 800d94a:	9704      	str	r7, [sp, #16]
 800d94c:	4625      	mov	r5, r4
 800d94e:	e7f3      	b.n	800d938 <_dtoa_r+0x928>
 800d950:	9b07      	ldr	r3, [sp, #28]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8104 	beq.w	800db64 <_dtoa_r+0xb54>
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	dd05      	ble.n	800d96c <_dtoa_r+0x95c>
 800d960:	4629      	mov	r1, r5
 800d962:	4632      	mov	r2, r6
 800d964:	4658      	mov	r0, fp
 800d966:	f000 fc6f 	bl	800e248 <__lshift>
 800d96a:	4605      	mov	r5, r0
 800d96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d05a      	beq.n	800da28 <_dtoa_r+0xa18>
 800d972:	6869      	ldr	r1, [r5, #4]
 800d974:	4658      	mov	r0, fp
 800d976:	f000 fa0f 	bl	800dd98 <_Balloc>
 800d97a:	4606      	mov	r6, r0
 800d97c:	b928      	cbnz	r0, 800d98a <_dtoa_r+0x97a>
 800d97e:	4b84      	ldr	r3, [pc, #528]	@ (800db90 <_dtoa_r+0xb80>)
 800d980:	4602      	mov	r2, r0
 800d982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d986:	f7ff bb5a 	b.w	800d03e <_dtoa_r+0x2e>
 800d98a:	692a      	ldr	r2, [r5, #16]
 800d98c:	3202      	adds	r2, #2
 800d98e:	0092      	lsls	r2, r2, #2
 800d990:	f105 010c 	add.w	r1, r5, #12
 800d994:	300c      	adds	r0, #12
 800d996:	f001 ff75 	bl	800f884 <memcpy>
 800d99a:	2201      	movs	r2, #1
 800d99c:	4631      	mov	r1, r6
 800d99e:	4658      	mov	r0, fp
 800d9a0:	f000 fc52 	bl	800e248 <__lshift>
 800d9a4:	f10a 0301 	add.w	r3, sl, #1
 800d9a8:	9307      	str	r3, [sp, #28]
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	4453      	add	r3, sl
 800d9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9b0:	9b02      	ldr	r3, [sp, #8]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	462f      	mov	r7, r5
 800d9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	9b07      	ldr	r3, [sp, #28]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	4648      	mov	r0, r9
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	f7ff fa9b 	bl	800cf00 <quorem>
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	9002      	str	r0, [sp, #8]
 800d9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d9d2:	4648      	mov	r0, r9
 800d9d4:	f000 fca4 	bl	800e320 <__mcmp>
 800d9d8:	462a      	mov	r2, r5
 800d9da:	9008      	str	r0, [sp, #32]
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f000 fcba 	bl	800e358 <__mdiff>
 800d9e4:	68c2      	ldr	r2, [r0, #12]
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	bb02      	cbnz	r2, 800da2c <_dtoa_r+0xa1c>
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fc97 	bl	800e320 <__mcmp>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4658      	mov	r0, fp
 800d9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9fa:	f000 fa0d 	bl	800de18 <_Bfree>
 800d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da02:	9e07      	ldr	r6, [sp, #28]
 800da04:	ea43 0102 	orr.w	r1, r3, r2
 800da08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da0a:	4319      	orrs	r1, r3
 800da0c:	d110      	bne.n	800da30 <_dtoa_r+0xa20>
 800da0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da12:	d029      	beq.n	800da68 <_dtoa_r+0xa58>
 800da14:	9b08      	ldr	r3, [sp, #32]
 800da16:	2b00      	cmp	r3, #0
 800da18:	dd02      	ble.n	800da20 <_dtoa_r+0xa10>
 800da1a:	9b02      	ldr	r3, [sp, #8]
 800da1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800da20:	9b00      	ldr	r3, [sp, #0]
 800da22:	f883 8000 	strb.w	r8, [r3]
 800da26:	e63f      	b.n	800d6a8 <_dtoa_r+0x698>
 800da28:	4628      	mov	r0, r5
 800da2a:	e7bb      	b.n	800d9a4 <_dtoa_r+0x994>
 800da2c:	2201      	movs	r2, #1
 800da2e:	e7e1      	b.n	800d9f4 <_dtoa_r+0x9e4>
 800da30:	9b08      	ldr	r3, [sp, #32]
 800da32:	2b00      	cmp	r3, #0
 800da34:	db04      	blt.n	800da40 <_dtoa_r+0xa30>
 800da36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da38:	430b      	orrs	r3, r1
 800da3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da3c:	430b      	orrs	r3, r1
 800da3e:	d120      	bne.n	800da82 <_dtoa_r+0xa72>
 800da40:	2a00      	cmp	r2, #0
 800da42:	dded      	ble.n	800da20 <_dtoa_r+0xa10>
 800da44:	4649      	mov	r1, r9
 800da46:	2201      	movs	r2, #1
 800da48:	4658      	mov	r0, fp
 800da4a:	f000 fbfd 	bl	800e248 <__lshift>
 800da4e:	4621      	mov	r1, r4
 800da50:	4681      	mov	r9, r0
 800da52:	f000 fc65 	bl	800e320 <__mcmp>
 800da56:	2800      	cmp	r0, #0
 800da58:	dc03      	bgt.n	800da62 <_dtoa_r+0xa52>
 800da5a:	d1e1      	bne.n	800da20 <_dtoa_r+0xa10>
 800da5c:	f018 0f01 	tst.w	r8, #1
 800da60:	d0de      	beq.n	800da20 <_dtoa_r+0xa10>
 800da62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da66:	d1d8      	bne.n	800da1a <_dtoa_r+0xa0a>
 800da68:	9a00      	ldr	r2, [sp, #0]
 800da6a:	2339      	movs	r3, #57	@ 0x39
 800da6c:	7013      	strb	r3, [r2, #0]
 800da6e:	4633      	mov	r3, r6
 800da70:	461e      	mov	r6, r3
 800da72:	3b01      	subs	r3, #1
 800da74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da78:	2a39      	cmp	r2, #57	@ 0x39
 800da7a:	d052      	beq.n	800db22 <_dtoa_r+0xb12>
 800da7c:	3201      	adds	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	e612      	b.n	800d6a8 <_dtoa_r+0x698>
 800da82:	2a00      	cmp	r2, #0
 800da84:	dd07      	ble.n	800da96 <_dtoa_r+0xa86>
 800da86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da8a:	d0ed      	beq.n	800da68 <_dtoa_r+0xa58>
 800da8c:	9a00      	ldr	r2, [sp, #0]
 800da8e:	f108 0301 	add.w	r3, r8, #1
 800da92:	7013      	strb	r3, [r2, #0]
 800da94:	e608      	b.n	800d6a8 <_dtoa_r+0x698>
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800da9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d028      	beq.n	800daf6 <_dtoa_r+0xae6>
 800daa4:	4649      	mov	r1, r9
 800daa6:	2300      	movs	r3, #0
 800daa8:	220a      	movs	r2, #10
 800daaa:	4658      	mov	r0, fp
 800daac:	f000 f9d6 	bl	800de5c <__multadd>
 800dab0:	42af      	cmp	r7, r5
 800dab2:	4681      	mov	r9, r0
 800dab4:	f04f 0300 	mov.w	r3, #0
 800dab8:	f04f 020a 	mov.w	r2, #10
 800dabc:	4639      	mov	r1, r7
 800dabe:	4658      	mov	r0, fp
 800dac0:	d107      	bne.n	800dad2 <_dtoa_r+0xac2>
 800dac2:	f000 f9cb 	bl	800de5c <__multadd>
 800dac6:	4607      	mov	r7, r0
 800dac8:	4605      	mov	r5, r0
 800daca:	9b07      	ldr	r3, [sp, #28]
 800dacc:	3301      	adds	r3, #1
 800dace:	9307      	str	r3, [sp, #28]
 800dad0:	e774      	b.n	800d9bc <_dtoa_r+0x9ac>
 800dad2:	f000 f9c3 	bl	800de5c <__multadd>
 800dad6:	4629      	mov	r1, r5
 800dad8:	4607      	mov	r7, r0
 800dada:	2300      	movs	r3, #0
 800dadc:	220a      	movs	r2, #10
 800dade:	4658      	mov	r0, fp
 800dae0:	f000 f9bc 	bl	800de5c <__multadd>
 800dae4:	4605      	mov	r5, r0
 800dae6:	e7f0      	b.n	800daca <_dtoa_r+0xaba>
 800dae8:	9b00      	ldr	r3, [sp, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfcc      	ite	gt
 800daee:	461e      	movgt	r6, r3
 800daf0:	2601      	movle	r6, #1
 800daf2:	4456      	add	r6, sl
 800daf4:	2700      	movs	r7, #0
 800daf6:	4649      	mov	r1, r9
 800daf8:	2201      	movs	r2, #1
 800dafa:	4658      	mov	r0, fp
 800dafc:	f000 fba4 	bl	800e248 <__lshift>
 800db00:	4621      	mov	r1, r4
 800db02:	4681      	mov	r9, r0
 800db04:	f000 fc0c 	bl	800e320 <__mcmp>
 800db08:	2800      	cmp	r0, #0
 800db0a:	dcb0      	bgt.n	800da6e <_dtoa_r+0xa5e>
 800db0c:	d102      	bne.n	800db14 <_dtoa_r+0xb04>
 800db0e:	f018 0f01 	tst.w	r8, #1
 800db12:	d1ac      	bne.n	800da6e <_dtoa_r+0xa5e>
 800db14:	4633      	mov	r3, r6
 800db16:	461e      	mov	r6, r3
 800db18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db1c:	2a30      	cmp	r2, #48	@ 0x30
 800db1e:	d0fa      	beq.n	800db16 <_dtoa_r+0xb06>
 800db20:	e5c2      	b.n	800d6a8 <_dtoa_r+0x698>
 800db22:	459a      	cmp	sl, r3
 800db24:	d1a4      	bne.n	800da70 <_dtoa_r+0xa60>
 800db26:	9b04      	ldr	r3, [sp, #16]
 800db28:	3301      	adds	r3, #1
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	2331      	movs	r3, #49	@ 0x31
 800db2e:	f88a 3000 	strb.w	r3, [sl]
 800db32:	e5b9      	b.n	800d6a8 <_dtoa_r+0x698>
 800db34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800db94 <_dtoa_r+0xb84>
 800db3a:	b11b      	cbz	r3, 800db44 <_dtoa_r+0xb34>
 800db3c:	f10a 0308 	add.w	r3, sl, #8
 800db40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db42:	6013      	str	r3, [r2, #0]
 800db44:	4650      	mov	r0, sl
 800db46:	b019      	add	sp, #100	@ 0x64
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4e:	2b01      	cmp	r3, #1
 800db50:	f77f ae37 	ble.w	800d7c2 <_dtoa_r+0x7b2>
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	930a      	str	r3, [sp, #40]	@ 0x28
 800db58:	2001      	movs	r0, #1
 800db5a:	e655      	b.n	800d808 <_dtoa_r+0x7f8>
 800db5c:	9b00      	ldr	r3, [sp, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f77f aed6 	ble.w	800d910 <_dtoa_r+0x900>
 800db64:	4656      	mov	r6, sl
 800db66:	4621      	mov	r1, r4
 800db68:	4648      	mov	r0, r9
 800db6a:	f7ff f9c9 	bl	800cf00 <quorem>
 800db6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db72:	f806 8b01 	strb.w	r8, [r6], #1
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	eba6 020a 	sub.w	r2, r6, sl
 800db7c:	4293      	cmp	r3, r2
 800db7e:	ddb3      	ble.n	800dae8 <_dtoa_r+0xad8>
 800db80:	4649      	mov	r1, r9
 800db82:	2300      	movs	r3, #0
 800db84:	220a      	movs	r2, #10
 800db86:	4658      	mov	r0, fp
 800db88:	f000 f968 	bl	800de5c <__multadd>
 800db8c:	4681      	mov	r9, r0
 800db8e:	e7ea      	b.n	800db66 <_dtoa_r+0xb56>
 800db90:	080106cd 	.word	0x080106cd
 800db94:	08010651 	.word	0x08010651

0800db98 <_free_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4605      	mov	r5, r0
 800db9c:	2900      	cmp	r1, #0
 800db9e:	d041      	beq.n	800dc24 <_free_r+0x8c>
 800dba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba4:	1f0c      	subs	r4, r1, #4
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	bfb8      	it	lt
 800dbaa:	18e4      	addlt	r4, r4, r3
 800dbac:	f000 f8e8 	bl	800dd80 <__malloc_lock>
 800dbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800dc28 <_free_r+0x90>)
 800dbb2:	6813      	ldr	r3, [r2, #0]
 800dbb4:	b933      	cbnz	r3, 800dbc4 <_free_r+0x2c>
 800dbb6:	6063      	str	r3, [r4, #4]
 800dbb8:	6014      	str	r4, [r2, #0]
 800dbba:	4628      	mov	r0, r5
 800dbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbc0:	f000 b8e4 	b.w	800dd8c <__malloc_unlock>
 800dbc4:	42a3      	cmp	r3, r4
 800dbc6:	d908      	bls.n	800dbda <_free_r+0x42>
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	1821      	adds	r1, r4, r0
 800dbcc:	428b      	cmp	r3, r1
 800dbce:	bf01      	itttt	eq
 800dbd0:	6819      	ldreq	r1, [r3, #0]
 800dbd2:	685b      	ldreq	r3, [r3, #4]
 800dbd4:	1809      	addeq	r1, r1, r0
 800dbd6:	6021      	streq	r1, [r4, #0]
 800dbd8:	e7ed      	b.n	800dbb6 <_free_r+0x1e>
 800dbda:	461a      	mov	r2, r3
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	b10b      	cbz	r3, 800dbe4 <_free_r+0x4c>
 800dbe0:	42a3      	cmp	r3, r4
 800dbe2:	d9fa      	bls.n	800dbda <_free_r+0x42>
 800dbe4:	6811      	ldr	r1, [r2, #0]
 800dbe6:	1850      	adds	r0, r2, r1
 800dbe8:	42a0      	cmp	r0, r4
 800dbea:	d10b      	bne.n	800dc04 <_free_r+0x6c>
 800dbec:	6820      	ldr	r0, [r4, #0]
 800dbee:	4401      	add	r1, r0
 800dbf0:	1850      	adds	r0, r2, r1
 800dbf2:	4283      	cmp	r3, r0
 800dbf4:	6011      	str	r1, [r2, #0]
 800dbf6:	d1e0      	bne.n	800dbba <_free_r+0x22>
 800dbf8:	6818      	ldr	r0, [r3, #0]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	6053      	str	r3, [r2, #4]
 800dbfe:	4408      	add	r0, r1
 800dc00:	6010      	str	r0, [r2, #0]
 800dc02:	e7da      	b.n	800dbba <_free_r+0x22>
 800dc04:	d902      	bls.n	800dc0c <_free_r+0x74>
 800dc06:	230c      	movs	r3, #12
 800dc08:	602b      	str	r3, [r5, #0]
 800dc0a:	e7d6      	b.n	800dbba <_free_r+0x22>
 800dc0c:	6820      	ldr	r0, [r4, #0]
 800dc0e:	1821      	adds	r1, r4, r0
 800dc10:	428b      	cmp	r3, r1
 800dc12:	bf04      	itt	eq
 800dc14:	6819      	ldreq	r1, [r3, #0]
 800dc16:	685b      	ldreq	r3, [r3, #4]
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	bf04      	itt	eq
 800dc1c:	1809      	addeq	r1, r1, r0
 800dc1e:	6021      	streq	r1, [r4, #0]
 800dc20:	6054      	str	r4, [r2, #4]
 800dc22:	e7ca      	b.n	800dbba <_free_r+0x22>
 800dc24:	bd38      	pop	{r3, r4, r5, pc}
 800dc26:	bf00      	nop
 800dc28:	20002428 	.word	0x20002428

0800dc2c <malloc>:
 800dc2c:	4b02      	ldr	r3, [pc, #8]	@ (800dc38 <malloc+0xc>)
 800dc2e:	4601      	mov	r1, r0
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	f000 b825 	b.w	800dc80 <_malloc_r>
 800dc36:	bf00      	nop
 800dc38:	2000010c 	.word	0x2000010c

0800dc3c <sbrk_aligned>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	4e0f      	ldr	r6, [pc, #60]	@ (800dc7c <sbrk_aligned+0x40>)
 800dc40:	460c      	mov	r4, r1
 800dc42:	6831      	ldr	r1, [r6, #0]
 800dc44:	4605      	mov	r5, r0
 800dc46:	b911      	cbnz	r1, 800dc4e <sbrk_aligned+0x12>
 800dc48:	f001 fe0c 	bl	800f864 <_sbrk_r>
 800dc4c:	6030      	str	r0, [r6, #0]
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4628      	mov	r0, r5
 800dc52:	f001 fe07 	bl	800f864 <_sbrk_r>
 800dc56:	1c43      	adds	r3, r0, #1
 800dc58:	d103      	bne.n	800dc62 <sbrk_aligned+0x26>
 800dc5a:	f04f 34ff 	mov.w	r4, #4294967295
 800dc5e:	4620      	mov	r0, r4
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	1cc4      	adds	r4, r0, #3
 800dc64:	f024 0403 	bic.w	r4, r4, #3
 800dc68:	42a0      	cmp	r0, r4
 800dc6a:	d0f8      	beq.n	800dc5e <sbrk_aligned+0x22>
 800dc6c:	1a21      	subs	r1, r4, r0
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f001 fdf8 	bl	800f864 <_sbrk_r>
 800dc74:	3001      	adds	r0, #1
 800dc76:	d1f2      	bne.n	800dc5e <sbrk_aligned+0x22>
 800dc78:	e7ef      	b.n	800dc5a <sbrk_aligned+0x1e>
 800dc7a:	bf00      	nop
 800dc7c:	20002424 	.word	0x20002424

0800dc80 <_malloc_r>:
 800dc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc84:	1ccd      	adds	r5, r1, #3
 800dc86:	f025 0503 	bic.w	r5, r5, #3
 800dc8a:	3508      	adds	r5, #8
 800dc8c:	2d0c      	cmp	r5, #12
 800dc8e:	bf38      	it	cc
 800dc90:	250c      	movcc	r5, #12
 800dc92:	2d00      	cmp	r5, #0
 800dc94:	4606      	mov	r6, r0
 800dc96:	db01      	blt.n	800dc9c <_malloc_r+0x1c>
 800dc98:	42a9      	cmp	r1, r5
 800dc9a:	d904      	bls.n	800dca6 <_malloc_r+0x26>
 800dc9c:	230c      	movs	r3, #12
 800dc9e:	6033      	str	r3, [r6, #0]
 800dca0:	2000      	movs	r0, #0
 800dca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd7c <_malloc_r+0xfc>
 800dcaa:	f000 f869 	bl	800dd80 <__malloc_lock>
 800dcae:	f8d8 3000 	ldr.w	r3, [r8]
 800dcb2:	461c      	mov	r4, r3
 800dcb4:	bb44      	cbnz	r4, 800dd08 <_malloc_r+0x88>
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7ff ffbf 	bl	800dc3c <sbrk_aligned>
 800dcbe:	1c43      	adds	r3, r0, #1
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	d158      	bne.n	800dd76 <_malloc_r+0xf6>
 800dcc4:	f8d8 4000 	ldr.w	r4, [r8]
 800dcc8:	4627      	mov	r7, r4
 800dcca:	2f00      	cmp	r7, #0
 800dccc:	d143      	bne.n	800dd56 <_malloc_r+0xd6>
 800dcce:	2c00      	cmp	r4, #0
 800dcd0:	d04b      	beq.n	800dd6a <_malloc_r+0xea>
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	eb04 0903 	add.w	r9, r4, r3
 800dcdc:	f001 fdc2 	bl	800f864 <_sbrk_r>
 800dce0:	4581      	cmp	r9, r0
 800dce2:	d142      	bne.n	800dd6a <_malloc_r+0xea>
 800dce4:	6821      	ldr	r1, [r4, #0]
 800dce6:	1a6d      	subs	r5, r5, r1
 800dce8:	4629      	mov	r1, r5
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7ff ffa6 	bl	800dc3c <sbrk_aligned>
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	d03a      	beq.n	800dd6a <_malloc_r+0xea>
 800dcf4:	6823      	ldr	r3, [r4, #0]
 800dcf6:	442b      	add	r3, r5
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	f8d8 3000 	ldr.w	r3, [r8]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	bb62      	cbnz	r2, 800dd5c <_malloc_r+0xdc>
 800dd02:	f8c8 7000 	str.w	r7, [r8]
 800dd06:	e00f      	b.n	800dd28 <_malloc_r+0xa8>
 800dd08:	6822      	ldr	r2, [r4, #0]
 800dd0a:	1b52      	subs	r2, r2, r5
 800dd0c:	d420      	bmi.n	800dd50 <_malloc_r+0xd0>
 800dd0e:	2a0b      	cmp	r2, #11
 800dd10:	d917      	bls.n	800dd42 <_malloc_r+0xc2>
 800dd12:	1961      	adds	r1, r4, r5
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	6025      	str	r5, [r4, #0]
 800dd18:	bf18      	it	ne
 800dd1a:	6059      	strne	r1, [r3, #4]
 800dd1c:	6863      	ldr	r3, [r4, #4]
 800dd1e:	bf08      	it	eq
 800dd20:	f8c8 1000 	streq.w	r1, [r8]
 800dd24:	5162      	str	r2, [r4, r5]
 800dd26:	604b      	str	r3, [r1, #4]
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f000 f82f 	bl	800dd8c <__malloc_unlock>
 800dd2e:	f104 000b 	add.w	r0, r4, #11
 800dd32:	1d23      	adds	r3, r4, #4
 800dd34:	f020 0007 	bic.w	r0, r0, #7
 800dd38:	1ac2      	subs	r2, r0, r3
 800dd3a:	bf1c      	itt	ne
 800dd3c:	1a1b      	subne	r3, r3, r0
 800dd3e:	50a3      	strne	r3, [r4, r2]
 800dd40:	e7af      	b.n	800dca2 <_malloc_r+0x22>
 800dd42:	6862      	ldr	r2, [r4, #4]
 800dd44:	42a3      	cmp	r3, r4
 800dd46:	bf0c      	ite	eq
 800dd48:	f8c8 2000 	streq.w	r2, [r8]
 800dd4c:	605a      	strne	r2, [r3, #4]
 800dd4e:	e7eb      	b.n	800dd28 <_malloc_r+0xa8>
 800dd50:	4623      	mov	r3, r4
 800dd52:	6864      	ldr	r4, [r4, #4]
 800dd54:	e7ae      	b.n	800dcb4 <_malloc_r+0x34>
 800dd56:	463c      	mov	r4, r7
 800dd58:	687f      	ldr	r7, [r7, #4]
 800dd5a:	e7b6      	b.n	800dcca <_malloc_r+0x4a>
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	42a3      	cmp	r3, r4
 800dd62:	d1fb      	bne.n	800dd5c <_malloc_r+0xdc>
 800dd64:	2300      	movs	r3, #0
 800dd66:	6053      	str	r3, [r2, #4]
 800dd68:	e7de      	b.n	800dd28 <_malloc_r+0xa8>
 800dd6a:	230c      	movs	r3, #12
 800dd6c:	6033      	str	r3, [r6, #0]
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f000 f80c 	bl	800dd8c <__malloc_unlock>
 800dd74:	e794      	b.n	800dca0 <_malloc_r+0x20>
 800dd76:	6005      	str	r5, [r0, #0]
 800dd78:	e7d6      	b.n	800dd28 <_malloc_r+0xa8>
 800dd7a:	bf00      	nop
 800dd7c:	20002428 	.word	0x20002428

0800dd80 <__malloc_lock>:
 800dd80:	4801      	ldr	r0, [pc, #4]	@ (800dd88 <__malloc_lock+0x8>)
 800dd82:	f7ff b8b4 	b.w	800ceee <__retarget_lock_acquire_recursive>
 800dd86:	bf00      	nop
 800dd88:	20002420 	.word	0x20002420

0800dd8c <__malloc_unlock>:
 800dd8c:	4801      	ldr	r0, [pc, #4]	@ (800dd94 <__malloc_unlock+0x8>)
 800dd8e:	f7ff b8af 	b.w	800cef0 <__retarget_lock_release_recursive>
 800dd92:	bf00      	nop
 800dd94:	20002420 	.word	0x20002420

0800dd98 <_Balloc>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	69c6      	ldr	r6, [r0, #28]
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	460d      	mov	r5, r1
 800dda0:	b976      	cbnz	r6, 800ddc0 <_Balloc+0x28>
 800dda2:	2010      	movs	r0, #16
 800dda4:	f7ff ff42 	bl	800dc2c <malloc>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	61e0      	str	r0, [r4, #28]
 800ddac:	b920      	cbnz	r0, 800ddb8 <_Balloc+0x20>
 800ddae:	4b18      	ldr	r3, [pc, #96]	@ (800de10 <_Balloc+0x78>)
 800ddb0:	4818      	ldr	r0, [pc, #96]	@ (800de14 <_Balloc+0x7c>)
 800ddb2:	216b      	movs	r1, #107	@ 0x6b
 800ddb4:	f001 fd7c 	bl	800f8b0 <__assert_func>
 800ddb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddbc:	6006      	str	r6, [r0, #0]
 800ddbe:	60c6      	str	r6, [r0, #12]
 800ddc0:	69e6      	ldr	r6, [r4, #28]
 800ddc2:	68f3      	ldr	r3, [r6, #12]
 800ddc4:	b183      	cbz	r3, 800dde8 <_Balloc+0x50>
 800ddc6:	69e3      	ldr	r3, [r4, #28]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddce:	b9b8      	cbnz	r0, 800de00 <_Balloc+0x68>
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	fa01 f605 	lsl.w	r6, r1, r5
 800ddd6:	1d72      	adds	r2, r6, #5
 800ddd8:	0092      	lsls	r2, r2, #2
 800ddda:	4620      	mov	r0, r4
 800dddc:	f001 fd86 	bl	800f8ec <_calloc_r>
 800dde0:	b160      	cbz	r0, 800ddfc <_Balloc+0x64>
 800dde2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dde6:	e00e      	b.n	800de06 <_Balloc+0x6e>
 800dde8:	2221      	movs	r2, #33	@ 0x21
 800ddea:	2104      	movs	r1, #4
 800ddec:	4620      	mov	r0, r4
 800ddee:	f001 fd7d 	bl	800f8ec <_calloc_r>
 800ddf2:	69e3      	ldr	r3, [r4, #28]
 800ddf4:	60f0      	str	r0, [r6, #12]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1e4      	bne.n	800ddc6 <_Balloc+0x2e>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}
 800de00:	6802      	ldr	r2, [r0, #0]
 800de02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de06:	2300      	movs	r3, #0
 800de08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de0c:	e7f7      	b.n	800ddfe <_Balloc+0x66>
 800de0e:	bf00      	nop
 800de10:	0801065e 	.word	0x0801065e
 800de14:	080106de 	.word	0x080106de

0800de18 <_Bfree>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	69c6      	ldr	r6, [r0, #28]
 800de1c:	4605      	mov	r5, r0
 800de1e:	460c      	mov	r4, r1
 800de20:	b976      	cbnz	r6, 800de40 <_Bfree+0x28>
 800de22:	2010      	movs	r0, #16
 800de24:	f7ff ff02 	bl	800dc2c <malloc>
 800de28:	4602      	mov	r2, r0
 800de2a:	61e8      	str	r0, [r5, #28]
 800de2c:	b920      	cbnz	r0, 800de38 <_Bfree+0x20>
 800de2e:	4b09      	ldr	r3, [pc, #36]	@ (800de54 <_Bfree+0x3c>)
 800de30:	4809      	ldr	r0, [pc, #36]	@ (800de58 <_Bfree+0x40>)
 800de32:	218f      	movs	r1, #143	@ 0x8f
 800de34:	f001 fd3c 	bl	800f8b0 <__assert_func>
 800de38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de3c:	6006      	str	r6, [r0, #0]
 800de3e:	60c6      	str	r6, [r0, #12]
 800de40:	b13c      	cbz	r4, 800de52 <_Bfree+0x3a>
 800de42:	69eb      	ldr	r3, [r5, #28]
 800de44:	6862      	ldr	r2, [r4, #4]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de4c:	6021      	str	r1, [r4, #0]
 800de4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de52:	bd70      	pop	{r4, r5, r6, pc}
 800de54:	0801065e 	.word	0x0801065e
 800de58:	080106de 	.word	0x080106de

0800de5c <__multadd>:
 800de5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de60:	690d      	ldr	r5, [r1, #16]
 800de62:	4607      	mov	r7, r0
 800de64:	460c      	mov	r4, r1
 800de66:	461e      	mov	r6, r3
 800de68:	f101 0c14 	add.w	ip, r1, #20
 800de6c:	2000      	movs	r0, #0
 800de6e:	f8dc 3000 	ldr.w	r3, [ip]
 800de72:	b299      	uxth	r1, r3
 800de74:	fb02 6101 	mla	r1, r2, r1, r6
 800de78:	0c1e      	lsrs	r6, r3, #16
 800de7a:	0c0b      	lsrs	r3, r1, #16
 800de7c:	fb02 3306 	mla	r3, r2, r6, r3
 800de80:	b289      	uxth	r1, r1
 800de82:	3001      	adds	r0, #1
 800de84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de88:	4285      	cmp	r5, r0
 800de8a:	f84c 1b04 	str.w	r1, [ip], #4
 800de8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de92:	dcec      	bgt.n	800de6e <__multadd+0x12>
 800de94:	b30e      	cbz	r6, 800deda <__multadd+0x7e>
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	42ab      	cmp	r3, r5
 800de9a:	dc19      	bgt.n	800ded0 <__multadd+0x74>
 800de9c:	6861      	ldr	r1, [r4, #4]
 800de9e:	4638      	mov	r0, r7
 800dea0:	3101      	adds	r1, #1
 800dea2:	f7ff ff79 	bl	800dd98 <_Balloc>
 800dea6:	4680      	mov	r8, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <__multadd+0x5a>
 800deaa:	4602      	mov	r2, r0
 800deac:	4b0c      	ldr	r3, [pc, #48]	@ (800dee0 <__multadd+0x84>)
 800deae:	480d      	ldr	r0, [pc, #52]	@ (800dee4 <__multadd+0x88>)
 800deb0:	21ba      	movs	r1, #186	@ 0xba
 800deb2:	f001 fcfd 	bl	800f8b0 <__assert_func>
 800deb6:	6922      	ldr	r2, [r4, #16]
 800deb8:	3202      	adds	r2, #2
 800deba:	f104 010c 	add.w	r1, r4, #12
 800debe:	0092      	lsls	r2, r2, #2
 800dec0:	300c      	adds	r0, #12
 800dec2:	f001 fcdf 	bl	800f884 <memcpy>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4638      	mov	r0, r7
 800deca:	f7ff ffa5 	bl	800de18 <_Bfree>
 800dece:	4644      	mov	r4, r8
 800ded0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ded4:	3501      	adds	r5, #1
 800ded6:	615e      	str	r6, [r3, #20]
 800ded8:	6125      	str	r5, [r4, #16]
 800deda:	4620      	mov	r0, r4
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	080106cd 	.word	0x080106cd
 800dee4:	080106de 	.word	0x080106de

0800dee8 <__s2b>:
 800dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deec:	460c      	mov	r4, r1
 800deee:	4615      	mov	r5, r2
 800def0:	461f      	mov	r7, r3
 800def2:	2209      	movs	r2, #9
 800def4:	3308      	adds	r3, #8
 800def6:	4606      	mov	r6, r0
 800def8:	fb93 f3f2 	sdiv	r3, r3, r2
 800defc:	2100      	movs	r1, #0
 800defe:	2201      	movs	r2, #1
 800df00:	429a      	cmp	r2, r3
 800df02:	db09      	blt.n	800df18 <__s2b+0x30>
 800df04:	4630      	mov	r0, r6
 800df06:	f7ff ff47 	bl	800dd98 <_Balloc>
 800df0a:	b940      	cbnz	r0, 800df1e <__s2b+0x36>
 800df0c:	4602      	mov	r2, r0
 800df0e:	4b19      	ldr	r3, [pc, #100]	@ (800df74 <__s2b+0x8c>)
 800df10:	4819      	ldr	r0, [pc, #100]	@ (800df78 <__s2b+0x90>)
 800df12:	21d3      	movs	r1, #211	@ 0xd3
 800df14:	f001 fccc 	bl	800f8b0 <__assert_func>
 800df18:	0052      	lsls	r2, r2, #1
 800df1a:	3101      	adds	r1, #1
 800df1c:	e7f0      	b.n	800df00 <__s2b+0x18>
 800df1e:	9b08      	ldr	r3, [sp, #32]
 800df20:	6143      	str	r3, [r0, #20]
 800df22:	2d09      	cmp	r5, #9
 800df24:	f04f 0301 	mov.w	r3, #1
 800df28:	6103      	str	r3, [r0, #16]
 800df2a:	dd16      	ble.n	800df5a <__s2b+0x72>
 800df2c:	f104 0909 	add.w	r9, r4, #9
 800df30:	46c8      	mov	r8, r9
 800df32:	442c      	add	r4, r5
 800df34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df38:	4601      	mov	r1, r0
 800df3a:	3b30      	subs	r3, #48	@ 0x30
 800df3c:	220a      	movs	r2, #10
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ff8c 	bl	800de5c <__multadd>
 800df44:	45a0      	cmp	r8, r4
 800df46:	d1f5      	bne.n	800df34 <__s2b+0x4c>
 800df48:	f1a5 0408 	sub.w	r4, r5, #8
 800df4c:	444c      	add	r4, r9
 800df4e:	1b2d      	subs	r5, r5, r4
 800df50:	1963      	adds	r3, r4, r5
 800df52:	42bb      	cmp	r3, r7
 800df54:	db04      	blt.n	800df60 <__s2b+0x78>
 800df56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df5a:	340a      	adds	r4, #10
 800df5c:	2509      	movs	r5, #9
 800df5e:	e7f6      	b.n	800df4e <__s2b+0x66>
 800df60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df64:	4601      	mov	r1, r0
 800df66:	3b30      	subs	r3, #48	@ 0x30
 800df68:	220a      	movs	r2, #10
 800df6a:	4630      	mov	r0, r6
 800df6c:	f7ff ff76 	bl	800de5c <__multadd>
 800df70:	e7ee      	b.n	800df50 <__s2b+0x68>
 800df72:	bf00      	nop
 800df74:	080106cd 	.word	0x080106cd
 800df78:	080106de 	.word	0x080106de

0800df7c <__hi0bits>:
 800df7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df80:	4603      	mov	r3, r0
 800df82:	bf36      	itet	cc
 800df84:	0403      	lslcc	r3, r0, #16
 800df86:	2000      	movcs	r0, #0
 800df88:	2010      	movcc	r0, #16
 800df8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df8e:	bf3c      	itt	cc
 800df90:	021b      	lslcc	r3, r3, #8
 800df92:	3008      	addcc	r0, #8
 800df94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df98:	bf3c      	itt	cc
 800df9a:	011b      	lslcc	r3, r3, #4
 800df9c:	3004      	addcc	r0, #4
 800df9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfa2:	bf3c      	itt	cc
 800dfa4:	009b      	lslcc	r3, r3, #2
 800dfa6:	3002      	addcc	r0, #2
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	db05      	blt.n	800dfb8 <__hi0bits+0x3c>
 800dfac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfb0:	f100 0001 	add.w	r0, r0, #1
 800dfb4:	bf08      	it	eq
 800dfb6:	2020      	moveq	r0, #32
 800dfb8:	4770      	bx	lr

0800dfba <__lo0bits>:
 800dfba:	6803      	ldr	r3, [r0, #0]
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	f013 0007 	ands.w	r0, r3, #7
 800dfc2:	d00b      	beq.n	800dfdc <__lo0bits+0x22>
 800dfc4:	07d9      	lsls	r1, r3, #31
 800dfc6:	d421      	bmi.n	800e00c <__lo0bits+0x52>
 800dfc8:	0798      	lsls	r0, r3, #30
 800dfca:	bf49      	itett	mi
 800dfcc:	085b      	lsrmi	r3, r3, #1
 800dfce:	089b      	lsrpl	r3, r3, #2
 800dfd0:	2001      	movmi	r0, #1
 800dfd2:	6013      	strmi	r3, [r2, #0]
 800dfd4:	bf5c      	itt	pl
 800dfd6:	6013      	strpl	r3, [r2, #0]
 800dfd8:	2002      	movpl	r0, #2
 800dfda:	4770      	bx	lr
 800dfdc:	b299      	uxth	r1, r3
 800dfde:	b909      	cbnz	r1, 800dfe4 <__lo0bits+0x2a>
 800dfe0:	0c1b      	lsrs	r3, r3, #16
 800dfe2:	2010      	movs	r0, #16
 800dfe4:	b2d9      	uxtb	r1, r3
 800dfe6:	b909      	cbnz	r1, 800dfec <__lo0bits+0x32>
 800dfe8:	3008      	adds	r0, #8
 800dfea:	0a1b      	lsrs	r3, r3, #8
 800dfec:	0719      	lsls	r1, r3, #28
 800dfee:	bf04      	itt	eq
 800dff0:	091b      	lsreq	r3, r3, #4
 800dff2:	3004      	addeq	r0, #4
 800dff4:	0799      	lsls	r1, r3, #30
 800dff6:	bf04      	itt	eq
 800dff8:	089b      	lsreq	r3, r3, #2
 800dffa:	3002      	addeq	r0, #2
 800dffc:	07d9      	lsls	r1, r3, #31
 800dffe:	d403      	bmi.n	800e008 <__lo0bits+0x4e>
 800e000:	085b      	lsrs	r3, r3, #1
 800e002:	f100 0001 	add.w	r0, r0, #1
 800e006:	d003      	beq.n	800e010 <__lo0bits+0x56>
 800e008:	6013      	str	r3, [r2, #0]
 800e00a:	4770      	bx	lr
 800e00c:	2000      	movs	r0, #0
 800e00e:	4770      	bx	lr
 800e010:	2020      	movs	r0, #32
 800e012:	4770      	bx	lr

0800e014 <__i2b>:
 800e014:	b510      	push	{r4, lr}
 800e016:	460c      	mov	r4, r1
 800e018:	2101      	movs	r1, #1
 800e01a:	f7ff febd 	bl	800dd98 <_Balloc>
 800e01e:	4602      	mov	r2, r0
 800e020:	b928      	cbnz	r0, 800e02e <__i2b+0x1a>
 800e022:	4b05      	ldr	r3, [pc, #20]	@ (800e038 <__i2b+0x24>)
 800e024:	4805      	ldr	r0, [pc, #20]	@ (800e03c <__i2b+0x28>)
 800e026:	f240 1145 	movw	r1, #325	@ 0x145
 800e02a:	f001 fc41 	bl	800f8b0 <__assert_func>
 800e02e:	2301      	movs	r3, #1
 800e030:	6144      	str	r4, [r0, #20]
 800e032:	6103      	str	r3, [r0, #16]
 800e034:	bd10      	pop	{r4, pc}
 800e036:	bf00      	nop
 800e038:	080106cd 	.word	0x080106cd
 800e03c:	080106de 	.word	0x080106de

0800e040 <__multiply>:
 800e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	4614      	mov	r4, r2
 800e046:	690a      	ldr	r2, [r1, #16]
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	bfa8      	it	ge
 800e04e:	4623      	movge	r3, r4
 800e050:	460f      	mov	r7, r1
 800e052:	bfa4      	itt	ge
 800e054:	460c      	movge	r4, r1
 800e056:	461f      	movge	r7, r3
 800e058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e05c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e060:	68a3      	ldr	r3, [r4, #8]
 800e062:	6861      	ldr	r1, [r4, #4]
 800e064:	eb0a 0609 	add.w	r6, sl, r9
 800e068:	42b3      	cmp	r3, r6
 800e06a:	b085      	sub	sp, #20
 800e06c:	bfb8      	it	lt
 800e06e:	3101      	addlt	r1, #1
 800e070:	f7ff fe92 	bl	800dd98 <_Balloc>
 800e074:	b930      	cbnz	r0, 800e084 <__multiply+0x44>
 800e076:	4602      	mov	r2, r0
 800e078:	4b44      	ldr	r3, [pc, #272]	@ (800e18c <__multiply+0x14c>)
 800e07a:	4845      	ldr	r0, [pc, #276]	@ (800e190 <__multiply+0x150>)
 800e07c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e080:	f001 fc16 	bl	800f8b0 <__assert_func>
 800e084:	f100 0514 	add.w	r5, r0, #20
 800e088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e08c:	462b      	mov	r3, r5
 800e08e:	2200      	movs	r2, #0
 800e090:	4543      	cmp	r3, r8
 800e092:	d321      	bcc.n	800e0d8 <__multiply+0x98>
 800e094:	f107 0114 	add.w	r1, r7, #20
 800e098:	f104 0214 	add.w	r2, r4, #20
 800e09c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e0a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0a4:	9302      	str	r3, [sp, #8]
 800e0a6:	1b13      	subs	r3, r2, r4
 800e0a8:	3b15      	subs	r3, #21
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	f104 0715 	add.w	r7, r4, #21
 800e0b4:	42ba      	cmp	r2, r7
 800e0b6:	bf38      	it	cc
 800e0b8:	2304      	movcc	r3, #4
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	9103      	str	r1, [sp, #12]
 800e0c0:	428b      	cmp	r3, r1
 800e0c2:	d80c      	bhi.n	800e0de <__multiply+0x9e>
 800e0c4:	2e00      	cmp	r6, #0
 800e0c6:	dd03      	ble.n	800e0d0 <__multiply+0x90>
 800e0c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d05b      	beq.n	800e188 <__multiply+0x148>
 800e0d0:	6106      	str	r6, [r0, #16]
 800e0d2:	b005      	add	sp, #20
 800e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d8:	f843 2b04 	str.w	r2, [r3], #4
 800e0dc:	e7d8      	b.n	800e090 <__multiply+0x50>
 800e0de:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0e2:	f1ba 0f00 	cmp.w	sl, #0
 800e0e6:	d024      	beq.n	800e132 <__multiply+0xf2>
 800e0e8:	f104 0e14 	add.w	lr, r4, #20
 800e0ec:	46a9      	mov	r9, r5
 800e0ee:	f04f 0c00 	mov.w	ip, #0
 800e0f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0f6:	f8d9 3000 	ldr.w	r3, [r9]
 800e0fa:	fa1f fb87 	uxth.w	fp, r7
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	fb0a 330b 	mla	r3, sl, fp, r3
 800e104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e108:	f8d9 7000 	ldr.w	r7, [r9]
 800e10c:	4463      	add	r3, ip
 800e10e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e112:	fb0a c70b 	mla	r7, sl, fp, ip
 800e116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e120:	4572      	cmp	r2, lr
 800e122:	f849 3b04 	str.w	r3, [r9], #4
 800e126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e12a:	d8e2      	bhi.n	800e0f2 <__multiply+0xb2>
 800e12c:	9b01      	ldr	r3, [sp, #4]
 800e12e:	f845 c003 	str.w	ip, [r5, r3]
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e138:	3104      	adds	r1, #4
 800e13a:	f1b9 0f00 	cmp.w	r9, #0
 800e13e:	d021      	beq.n	800e184 <__multiply+0x144>
 800e140:	682b      	ldr	r3, [r5, #0]
 800e142:	f104 0c14 	add.w	ip, r4, #20
 800e146:	46ae      	mov	lr, r5
 800e148:	f04f 0a00 	mov.w	sl, #0
 800e14c:	f8bc b000 	ldrh.w	fp, [ip]
 800e150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e154:	fb09 770b 	mla	r7, r9, fp, r7
 800e158:	4457      	add	r7, sl
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e160:	f84e 3b04 	str.w	r3, [lr], #4
 800e164:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e16c:	f8be 3000 	ldrh.w	r3, [lr]
 800e170:	fb09 330a 	mla	r3, r9, sl, r3
 800e174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e178:	4562      	cmp	r2, ip
 800e17a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e17e:	d8e5      	bhi.n	800e14c <__multiply+0x10c>
 800e180:	9f01      	ldr	r7, [sp, #4]
 800e182:	51eb      	str	r3, [r5, r7]
 800e184:	3504      	adds	r5, #4
 800e186:	e799      	b.n	800e0bc <__multiply+0x7c>
 800e188:	3e01      	subs	r6, #1
 800e18a:	e79b      	b.n	800e0c4 <__multiply+0x84>
 800e18c:	080106cd 	.word	0x080106cd
 800e190:	080106de 	.word	0x080106de

0800e194 <__pow5mult>:
 800e194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e198:	4615      	mov	r5, r2
 800e19a:	f012 0203 	ands.w	r2, r2, #3
 800e19e:	4607      	mov	r7, r0
 800e1a0:	460e      	mov	r6, r1
 800e1a2:	d007      	beq.n	800e1b4 <__pow5mult+0x20>
 800e1a4:	4c25      	ldr	r4, [pc, #148]	@ (800e23c <__pow5mult+0xa8>)
 800e1a6:	3a01      	subs	r2, #1
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1ae:	f7ff fe55 	bl	800de5c <__multadd>
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	10ad      	asrs	r5, r5, #2
 800e1b6:	d03d      	beq.n	800e234 <__pow5mult+0xa0>
 800e1b8:	69fc      	ldr	r4, [r7, #28]
 800e1ba:	b97c      	cbnz	r4, 800e1dc <__pow5mult+0x48>
 800e1bc:	2010      	movs	r0, #16
 800e1be:	f7ff fd35 	bl	800dc2c <malloc>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	61f8      	str	r0, [r7, #28]
 800e1c6:	b928      	cbnz	r0, 800e1d4 <__pow5mult+0x40>
 800e1c8:	4b1d      	ldr	r3, [pc, #116]	@ (800e240 <__pow5mult+0xac>)
 800e1ca:	481e      	ldr	r0, [pc, #120]	@ (800e244 <__pow5mult+0xb0>)
 800e1cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1d0:	f001 fb6e 	bl	800f8b0 <__assert_func>
 800e1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1d8:	6004      	str	r4, [r0, #0]
 800e1da:	60c4      	str	r4, [r0, #12]
 800e1dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1e4:	b94c      	cbnz	r4, 800e1fa <__pow5mult+0x66>
 800e1e6:	f240 2171 	movw	r1, #625	@ 0x271
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f7ff ff12 	bl	800e014 <__i2b>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	6003      	str	r3, [r0, #0]
 800e1fa:	f04f 0900 	mov.w	r9, #0
 800e1fe:	07eb      	lsls	r3, r5, #31
 800e200:	d50a      	bpl.n	800e218 <__pow5mult+0x84>
 800e202:	4631      	mov	r1, r6
 800e204:	4622      	mov	r2, r4
 800e206:	4638      	mov	r0, r7
 800e208:	f7ff ff1a 	bl	800e040 <__multiply>
 800e20c:	4631      	mov	r1, r6
 800e20e:	4680      	mov	r8, r0
 800e210:	4638      	mov	r0, r7
 800e212:	f7ff fe01 	bl	800de18 <_Bfree>
 800e216:	4646      	mov	r6, r8
 800e218:	106d      	asrs	r5, r5, #1
 800e21a:	d00b      	beq.n	800e234 <__pow5mult+0xa0>
 800e21c:	6820      	ldr	r0, [r4, #0]
 800e21e:	b938      	cbnz	r0, 800e230 <__pow5mult+0x9c>
 800e220:	4622      	mov	r2, r4
 800e222:	4621      	mov	r1, r4
 800e224:	4638      	mov	r0, r7
 800e226:	f7ff ff0b 	bl	800e040 <__multiply>
 800e22a:	6020      	str	r0, [r4, #0]
 800e22c:	f8c0 9000 	str.w	r9, [r0]
 800e230:	4604      	mov	r4, r0
 800e232:	e7e4      	b.n	800e1fe <__pow5mult+0x6a>
 800e234:	4630      	mov	r0, r6
 800e236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23a:	bf00      	nop
 800e23c:	08010738 	.word	0x08010738
 800e240:	0801065e 	.word	0x0801065e
 800e244:	080106de 	.word	0x080106de

0800e248 <__lshift>:
 800e248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	460c      	mov	r4, r1
 800e24e:	6849      	ldr	r1, [r1, #4]
 800e250:	6923      	ldr	r3, [r4, #16]
 800e252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e256:	68a3      	ldr	r3, [r4, #8]
 800e258:	4607      	mov	r7, r0
 800e25a:	4691      	mov	r9, r2
 800e25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e260:	f108 0601 	add.w	r6, r8, #1
 800e264:	42b3      	cmp	r3, r6
 800e266:	db0b      	blt.n	800e280 <__lshift+0x38>
 800e268:	4638      	mov	r0, r7
 800e26a:	f7ff fd95 	bl	800dd98 <_Balloc>
 800e26e:	4605      	mov	r5, r0
 800e270:	b948      	cbnz	r0, 800e286 <__lshift+0x3e>
 800e272:	4602      	mov	r2, r0
 800e274:	4b28      	ldr	r3, [pc, #160]	@ (800e318 <__lshift+0xd0>)
 800e276:	4829      	ldr	r0, [pc, #164]	@ (800e31c <__lshift+0xd4>)
 800e278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e27c:	f001 fb18 	bl	800f8b0 <__assert_func>
 800e280:	3101      	adds	r1, #1
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	e7ee      	b.n	800e264 <__lshift+0x1c>
 800e286:	2300      	movs	r3, #0
 800e288:	f100 0114 	add.w	r1, r0, #20
 800e28c:	f100 0210 	add.w	r2, r0, #16
 800e290:	4618      	mov	r0, r3
 800e292:	4553      	cmp	r3, sl
 800e294:	db33      	blt.n	800e2fe <__lshift+0xb6>
 800e296:	6920      	ldr	r0, [r4, #16]
 800e298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e29c:	f104 0314 	add.w	r3, r4, #20
 800e2a0:	f019 091f 	ands.w	r9, r9, #31
 800e2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2ac:	d02b      	beq.n	800e306 <__lshift+0xbe>
 800e2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800e2b2:	468a      	mov	sl, r1
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	6818      	ldr	r0, [r3, #0]
 800e2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800e2bc:	4310      	orrs	r0, r2
 800e2be:	f84a 0b04 	str.w	r0, [sl], #4
 800e2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2c6:	459c      	cmp	ip, r3
 800e2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2cc:	d8f3      	bhi.n	800e2b6 <__lshift+0x6e>
 800e2ce:	ebac 0304 	sub.w	r3, ip, r4
 800e2d2:	3b15      	subs	r3, #21
 800e2d4:	f023 0303 	bic.w	r3, r3, #3
 800e2d8:	3304      	adds	r3, #4
 800e2da:	f104 0015 	add.w	r0, r4, #21
 800e2de:	4584      	cmp	ip, r0
 800e2e0:	bf38      	it	cc
 800e2e2:	2304      	movcc	r3, #4
 800e2e4:	50ca      	str	r2, [r1, r3]
 800e2e6:	b10a      	cbz	r2, 800e2ec <__lshift+0xa4>
 800e2e8:	f108 0602 	add.w	r6, r8, #2
 800e2ec:	3e01      	subs	r6, #1
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	612e      	str	r6, [r5, #16]
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	f7ff fd90 	bl	800de18 <_Bfree>
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800e302:	3301      	adds	r3, #1
 800e304:	e7c5      	b.n	800e292 <__lshift+0x4a>
 800e306:	3904      	subs	r1, #4
 800e308:	f853 2b04 	ldr.w	r2, [r3], #4
 800e30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e310:	459c      	cmp	ip, r3
 800e312:	d8f9      	bhi.n	800e308 <__lshift+0xc0>
 800e314:	e7ea      	b.n	800e2ec <__lshift+0xa4>
 800e316:	bf00      	nop
 800e318:	080106cd 	.word	0x080106cd
 800e31c:	080106de 	.word	0x080106de

0800e320 <__mcmp>:
 800e320:	690a      	ldr	r2, [r1, #16]
 800e322:	4603      	mov	r3, r0
 800e324:	6900      	ldr	r0, [r0, #16]
 800e326:	1a80      	subs	r0, r0, r2
 800e328:	b530      	push	{r4, r5, lr}
 800e32a:	d10e      	bne.n	800e34a <__mcmp+0x2a>
 800e32c:	3314      	adds	r3, #20
 800e32e:	3114      	adds	r1, #20
 800e330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e33c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e340:	4295      	cmp	r5, r2
 800e342:	d003      	beq.n	800e34c <__mcmp+0x2c>
 800e344:	d205      	bcs.n	800e352 <__mcmp+0x32>
 800e346:	f04f 30ff 	mov.w	r0, #4294967295
 800e34a:	bd30      	pop	{r4, r5, pc}
 800e34c:	42a3      	cmp	r3, r4
 800e34e:	d3f3      	bcc.n	800e338 <__mcmp+0x18>
 800e350:	e7fb      	b.n	800e34a <__mcmp+0x2a>
 800e352:	2001      	movs	r0, #1
 800e354:	e7f9      	b.n	800e34a <__mcmp+0x2a>
	...

0800e358 <__mdiff>:
 800e358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	4689      	mov	r9, r1
 800e35e:	4606      	mov	r6, r0
 800e360:	4611      	mov	r1, r2
 800e362:	4648      	mov	r0, r9
 800e364:	4614      	mov	r4, r2
 800e366:	f7ff ffdb 	bl	800e320 <__mcmp>
 800e36a:	1e05      	subs	r5, r0, #0
 800e36c:	d112      	bne.n	800e394 <__mdiff+0x3c>
 800e36e:	4629      	mov	r1, r5
 800e370:	4630      	mov	r0, r6
 800e372:	f7ff fd11 	bl	800dd98 <_Balloc>
 800e376:	4602      	mov	r2, r0
 800e378:	b928      	cbnz	r0, 800e386 <__mdiff+0x2e>
 800e37a:	4b3f      	ldr	r3, [pc, #252]	@ (800e478 <__mdiff+0x120>)
 800e37c:	f240 2137 	movw	r1, #567	@ 0x237
 800e380:	483e      	ldr	r0, [pc, #248]	@ (800e47c <__mdiff+0x124>)
 800e382:	f001 fa95 	bl	800f8b0 <__assert_func>
 800e386:	2301      	movs	r3, #1
 800e388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e38c:	4610      	mov	r0, r2
 800e38e:	b003      	add	sp, #12
 800e390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e394:	bfbc      	itt	lt
 800e396:	464b      	movlt	r3, r9
 800e398:	46a1      	movlt	r9, r4
 800e39a:	4630      	mov	r0, r6
 800e39c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3a0:	bfba      	itte	lt
 800e3a2:	461c      	movlt	r4, r3
 800e3a4:	2501      	movlt	r5, #1
 800e3a6:	2500      	movge	r5, #0
 800e3a8:	f7ff fcf6 	bl	800dd98 <_Balloc>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	b918      	cbnz	r0, 800e3b8 <__mdiff+0x60>
 800e3b0:	4b31      	ldr	r3, [pc, #196]	@ (800e478 <__mdiff+0x120>)
 800e3b2:	f240 2145 	movw	r1, #581	@ 0x245
 800e3b6:	e7e3      	b.n	800e380 <__mdiff+0x28>
 800e3b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3bc:	6926      	ldr	r6, [r4, #16]
 800e3be:	60c5      	str	r5, [r0, #12]
 800e3c0:	f109 0310 	add.w	r3, r9, #16
 800e3c4:	f109 0514 	add.w	r5, r9, #20
 800e3c8:	f104 0e14 	add.w	lr, r4, #20
 800e3cc:	f100 0b14 	add.w	fp, r0, #20
 800e3d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	46d9      	mov	r9, fp
 800e3dc:	f04f 0c00 	mov.w	ip, #0
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3ea:	9301      	str	r3, [sp, #4]
 800e3ec:	fa1f f38a 	uxth.w	r3, sl
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	b283      	uxth	r3, r0
 800e3f4:	1acb      	subs	r3, r1, r3
 800e3f6:	0c00      	lsrs	r0, r0, #16
 800e3f8:	4463      	add	r3, ip
 800e3fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e3fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e402:	b29b      	uxth	r3, r3
 800e404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e408:	4576      	cmp	r6, lr
 800e40a:	f849 3b04 	str.w	r3, [r9], #4
 800e40e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e412:	d8e5      	bhi.n	800e3e0 <__mdiff+0x88>
 800e414:	1b33      	subs	r3, r6, r4
 800e416:	3b15      	subs	r3, #21
 800e418:	f023 0303 	bic.w	r3, r3, #3
 800e41c:	3415      	adds	r4, #21
 800e41e:	3304      	adds	r3, #4
 800e420:	42a6      	cmp	r6, r4
 800e422:	bf38      	it	cc
 800e424:	2304      	movcc	r3, #4
 800e426:	441d      	add	r5, r3
 800e428:	445b      	add	r3, fp
 800e42a:	461e      	mov	r6, r3
 800e42c:	462c      	mov	r4, r5
 800e42e:	4544      	cmp	r4, r8
 800e430:	d30e      	bcc.n	800e450 <__mdiff+0xf8>
 800e432:	f108 0103 	add.w	r1, r8, #3
 800e436:	1b49      	subs	r1, r1, r5
 800e438:	f021 0103 	bic.w	r1, r1, #3
 800e43c:	3d03      	subs	r5, #3
 800e43e:	45a8      	cmp	r8, r5
 800e440:	bf38      	it	cc
 800e442:	2100      	movcc	r1, #0
 800e444:	440b      	add	r3, r1
 800e446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e44a:	b191      	cbz	r1, 800e472 <__mdiff+0x11a>
 800e44c:	6117      	str	r7, [r2, #16]
 800e44e:	e79d      	b.n	800e38c <__mdiff+0x34>
 800e450:	f854 1b04 	ldr.w	r1, [r4], #4
 800e454:	46e6      	mov	lr, ip
 800e456:	0c08      	lsrs	r0, r1, #16
 800e458:	fa1c fc81 	uxtah	ip, ip, r1
 800e45c:	4471      	add	r1, lr
 800e45e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e462:	b289      	uxth	r1, r1
 800e464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e468:	f846 1b04 	str.w	r1, [r6], #4
 800e46c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e470:	e7dd      	b.n	800e42e <__mdiff+0xd6>
 800e472:	3f01      	subs	r7, #1
 800e474:	e7e7      	b.n	800e446 <__mdiff+0xee>
 800e476:	bf00      	nop
 800e478:	080106cd 	.word	0x080106cd
 800e47c:	080106de 	.word	0x080106de

0800e480 <__ulp>:
 800e480:	b082      	sub	sp, #8
 800e482:	ed8d 0b00 	vstr	d0, [sp]
 800e486:	9a01      	ldr	r2, [sp, #4]
 800e488:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c8 <__ulp+0x48>)
 800e48a:	4013      	ands	r3, r2
 800e48c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e490:	2b00      	cmp	r3, #0
 800e492:	dc08      	bgt.n	800e4a6 <__ulp+0x26>
 800e494:	425b      	negs	r3, r3
 800e496:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e49a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e49e:	da04      	bge.n	800e4aa <__ulp+0x2a>
 800e4a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4a4:	4113      	asrs	r3, r2
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	e008      	b.n	800e4bc <__ulp+0x3c>
 800e4aa:	f1a2 0314 	sub.w	r3, r2, #20
 800e4ae:	2b1e      	cmp	r3, #30
 800e4b0:	bfda      	itte	le
 800e4b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e4b6:	40da      	lsrle	r2, r3
 800e4b8:	2201      	movgt	r2, #1
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4610      	mov	r0, r2
 800e4c0:	ec41 0b10 	vmov	d0, r0, r1
 800e4c4:	b002      	add	sp, #8
 800e4c6:	4770      	bx	lr
 800e4c8:	7ff00000 	.word	0x7ff00000

0800e4cc <__b2d>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	6906      	ldr	r6, [r0, #16]
 800e4d2:	f100 0814 	add.w	r8, r0, #20
 800e4d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e4da:	1f37      	subs	r7, r6, #4
 800e4dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	f7ff fd4b 	bl	800df7c <__hi0bits>
 800e4e6:	f1c0 0320 	rsb	r3, r0, #32
 800e4ea:	280a      	cmp	r0, #10
 800e4ec:	600b      	str	r3, [r1, #0]
 800e4ee:	491b      	ldr	r1, [pc, #108]	@ (800e55c <__b2d+0x90>)
 800e4f0:	dc15      	bgt.n	800e51e <__b2d+0x52>
 800e4f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e4f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e4fa:	45b8      	cmp	r8, r7
 800e4fc:	ea43 0501 	orr.w	r5, r3, r1
 800e500:	bf34      	ite	cc
 800e502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e506:	2300      	movcs	r3, #0
 800e508:	3015      	adds	r0, #21
 800e50a:	fa02 f000 	lsl.w	r0, r2, r0
 800e50e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e512:	4303      	orrs	r3, r0
 800e514:	461c      	mov	r4, r3
 800e516:	ec45 4b10 	vmov	d0, r4, r5
 800e51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51e:	45b8      	cmp	r8, r7
 800e520:	bf3a      	itte	cc
 800e522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e526:	f1a6 0708 	subcc.w	r7, r6, #8
 800e52a:	2300      	movcs	r3, #0
 800e52c:	380b      	subs	r0, #11
 800e52e:	d012      	beq.n	800e556 <__b2d+0x8a>
 800e530:	f1c0 0120 	rsb	r1, r0, #32
 800e534:	fa23 f401 	lsr.w	r4, r3, r1
 800e538:	4082      	lsls	r2, r0
 800e53a:	4322      	orrs	r2, r4
 800e53c:	4547      	cmp	r7, r8
 800e53e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e542:	bf8c      	ite	hi
 800e544:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e548:	2200      	movls	r2, #0
 800e54a:	4083      	lsls	r3, r0
 800e54c:	40ca      	lsrs	r2, r1
 800e54e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e552:	4313      	orrs	r3, r2
 800e554:	e7de      	b.n	800e514 <__b2d+0x48>
 800e556:	ea42 0501 	orr.w	r5, r2, r1
 800e55a:	e7db      	b.n	800e514 <__b2d+0x48>
 800e55c:	3ff00000 	.word	0x3ff00000

0800e560 <__d2b>:
 800e560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e564:	460f      	mov	r7, r1
 800e566:	2101      	movs	r1, #1
 800e568:	ec59 8b10 	vmov	r8, r9, d0
 800e56c:	4616      	mov	r6, r2
 800e56e:	f7ff fc13 	bl	800dd98 <_Balloc>
 800e572:	4604      	mov	r4, r0
 800e574:	b930      	cbnz	r0, 800e584 <__d2b+0x24>
 800e576:	4602      	mov	r2, r0
 800e578:	4b23      	ldr	r3, [pc, #140]	@ (800e608 <__d2b+0xa8>)
 800e57a:	4824      	ldr	r0, [pc, #144]	@ (800e60c <__d2b+0xac>)
 800e57c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e580:	f001 f996 	bl	800f8b0 <__assert_func>
 800e584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e58c:	b10d      	cbz	r5, 800e592 <__d2b+0x32>
 800e58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	f1b8 0300 	subs.w	r3, r8, #0
 800e598:	d023      	beq.n	800e5e2 <__d2b+0x82>
 800e59a:	4668      	mov	r0, sp
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	f7ff fd0c 	bl	800dfba <__lo0bits>
 800e5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5a6:	b1d0      	cbz	r0, 800e5de <__d2b+0x7e>
 800e5a8:	f1c0 0320 	rsb	r3, r0, #32
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	430b      	orrs	r3, r1
 800e5b2:	40c2      	lsrs	r2, r0
 800e5b4:	6163      	str	r3, [r4, #20]
 800e5b6:	9201      	str	r2, [sp, #4]
 800e5b8:	9b01      	ldr	r3, [sp, #4]
 800e5ba:	61a3      	str	r3, [r4, #24]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bf0c      	ite	eq
 800e5c0:	2201      	moveq	r2, #1
 800e5c2:	2202      	movne	r2, #2
 800e5c4:	6122      	str	r2, [r4, #16]
 800e5c6:	b1a5      	cbz	r5, 800e5f2 <__d2b+0x92>
 800e5c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5cc:	4405      	add	r5, r0
 800e5ce:	603d      	str	r5, [r7, #0]
 800e5d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5d4:	6030      	str	r0, [r6, #0]
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	b003      	add	sp, #12
 800e5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5de:	6161      	str	r1, [r4, #20]
 800e5e0:	e7ea      	b.n	800e5b8 <__d2b+0x58>
 800e5e2:	a801      	add	r0, sp, #4
 800e5e4:	f7ff fce9 	bl	800dfba <__lo0bits>
 800e5e8:	9b01      	ldr	r3, [sp, #4]
 800e5ea:	6163      	str	r3, [r4, #20]
 800e5ec:	3020      	adds	r0, #32
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	e7e8      	b.n	800e5c4 <__d2b+0x64>
 800e5f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e5fa:	6038      	str	r0, [r7, #0]
 800e5fc:	6918      	ldr	r0, [r3, #16]
 800e5fe:	f7ff fcbd 	bl	800df7c <__hi0bits>
 800e602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e606:	e7e5      	b.n	800e5d4 <__d2b+0x74>
 800e608:	080106cd 	.word	0x080106cd
 800e60c:	080106de 	.word	0x080106de

0800e610 <__ratio>:
 800e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	b085      	sub	sp, #20
 800e616:	e9cd 1000 	strd	r1, r0, [sp]
 800e61a:	a902      	add	r1, sp, #8
 800e61c:	f7ff ff56 	bl	800e4cc <__b2d>
 800e620:	9800      	ldr	r0, [sp, #0]
 800e622:	a903      	add	r1, sp, #12
 800e624:	ec55 4b10 	vmov	r4, r5, d0
 800e628:	f7ff ff50 	bl	800e4cc <__b2d>
 800e62c:	9b01      	ldr	r3, [sp, #4]
 800e62e:	6919      	ldr	r1, [r3, #16]
 800e630:	9b00      	ldr	r3, [sp, #0]
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	1ac9      	subs	r1, r1, r3
 800e636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e63a:	1a9b      	subs	r3, r3, r2
 800e63c:	ec5b ab10 	vmov	sl, fp, d0
 800e640:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e644:	2b00      	cmp	r3, #0
 800e646:	bfce      	itee	gt
 800e648:	462a      	movgt	r2, r5
 800e64a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e64e:	465a      	movle	r2, fp
 800e650:	462f      	mov	r7, r5
 800e652:	46d9      	mov	r9, fp
 800e654:	bfcc      	ite	gt
 800e656:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e65a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e65e:	464b      	mov	r3, r9
 800e660:	4652      	mov	r2, sl
 800e662:	4620      	mov	r0, r4
 800e664:	4639      	mov	r1, r7
 800e666:	f7f2 f8f9 	bl	800085c <__aeabi_ddiv>
 800e66a:	ec41 0b10 	vmov	d0, r0, r1
 800e66e:	b005      	add	sp, #20
 800e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e674 <__copybits>:
 800e674:	3901      	subs	r1, #1
 800e676:	b570      	push	{r4, r5, r6, lr}
 800e678:	1149      	asrs	r1, r1, #5
 800e67a:	6914      	ldr	r4, [r2, #16]
 800e67c:	3101      	adds	r1, #1
 800e67e:	f102 0314 	add.w	r3, r2, #20
 800e682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e68a:	1f05      	subs	r5, r0, #4
 800e68c:	42a3      	cmp	r3, r4
 800e68e:	d30c      	bcc.n	800e6aa <__copybits+0x36>
 800e690:	1aa3      	subs	r3, r4, r2
 800e692:	3b11      	subs	r3, #17
 800e694:	f023 0303 	bic.w	r3, r3, #3
 800e698:	3211      	adds	r2, #17
 800e69a:	42a2      	cmp	r2, r4
 800e69c:	bf88      	it	hi
 800e69e:	2300      	movhi	r3, #0
 800e6a0:	4418      	add	r0, r3
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	4288      	cmp	r0, r1
 800e6a6:	d305      	bcc.n	800e6b4 <__copybits+0x40>
 800e6a8:	bd70      	pop	{r4, r5, r6, pc}
 800e6aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6b2:	e7eb      	b.n	800e68c <__copybits+0x18>
 800e6b4:	f840 3b04 	str.w	r3, [r0], #4
 800e6b8:	e7f4      	b.n	800e6a4 <__copybits+0x30>

0800e6ba <__any_on>:
 800e6ba:	f100 0214 	add.w	r2, r0, #20
 800e6be:	6900      	ldr	r0, [r0, #16]
 800e6c0:	114b      	asrs	r3, r1, #5
 800e6c2:	4298      	cmp	r0, r3
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	db11      	blt.n	800e6ec <__any_on+0x32>
 800e6c8:	dd0a      	ble.n	800e6e0 <__any_on+0x26>
 800e6ca:	f011 011f 	ands.w	r1, r1, #31
 800e6ce:	d007      	beq.n	800e6e0 <__any_on+0x26>
 800e6d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6d4:	fa24 f001 	lsr.w	r0, r4, r1
 800e6d8:	fa00 f101 	lsl.w	r1, r0, r1
 800e6dc:	428c      	cmp	r4, r1
 800e6de:	d10b      	bne.n	800e6f8 <__any_on+0x3e>
 800e6e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d803      	bhi.n	800e6f0 <__any_on+0x36>
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	bd10      	pop	{r4, pc}
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	e7f7      	b.n	800e6e0 <__any_on+0x26>
 800e6f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d0f5      	beq.n	800e6e4 <__any_on+0x2a>
 800e6f8:	2001      	movs	r0, #1
 800e6fa:	e7f6      	b.n	800e6ea <__any_on+0x30>

0800e6fc <sulp>:
 800e6fc:	b570      	push	{r4, r5, r6, lr}
 800e6fe:	4604      	mov	r4, r0
 800e700:	460d      	mov	r5, r1
 800e702:	ec45 4b10 	vmov	d0, r4, r5
 800e706:	4616      	mov	r6, r2
 800e708:	f7ff feba 	bl	800e480 <__ulp>
 800e70c:	ec51 0b10 	vmov	r0, r1, d0
 800e710:	b17e      	cbz	r6, 800e732 <sulp+0x36>
 800e712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dd09      	ble.n	800e732 <sulp+0x36>
 800e71e:	051b      	lsls	r3, r3, #20
 800e720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e724:	2400      	movs	r4, #0
 800e726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e72a:	4622      	mov	r2, r4
 800e72c:	462b      	mov	r3, r5
 800e72e:	f7f1 ff6b 	bl	8000608 <__aeabi_dmul>
 800e732:	ec41 0b10 	vmov	d0, r0, r1
 800e736:	bd70      	pop	{r4, r5, r6, pc}

0800e738 <_strtod_l>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	b09f      	sub	sp, #124	@ 0x7c
 800e73e:	460c      	mov	r4, r1
 800e740:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e742:	2200      	movs	r2, #0
 800e744:	921a      	str	r2, [sp, #104]	@ 0x68
 800e746:	9005      	str	r0, [sp, #20]
 800e748:	f04f 0a00 	mov.w	sl, #0
 800e74c:	f04f 0b00 	mov.w	fp, #0
 800e750:	460a      	mov	r2, r1
 800e752:	9219      	str	r2, [sp, #100]	@ 0x64
 800e754:	7811      	ldrb	r1, [r2, #0]
 800e756:	292b      	cmp	r1, #43	@ 0x2b
 800e758:	d04a      	beq.n	800e7f0 <_strtod_l+0xb8>
 800e75a:	d838      	bhi.n	800e7ce <_strtod_l+0x96>
 800e75c:	290d      	cmp	r1, #13
 800e75e:	d832      	bhi.n	800e7c6 <_strtod_l+0x8e>
 800e760:	2908      	cmp	r1, #8
 800e762:	d832      	bhi.n	800e7ca <_strtod_l+0x92>
 800e764:	2900      	cmp	r1, #0
 800e766:	d03b      	beq.n	800e7e0 <_strtod_l+0xa8>
 800e768:	2200      	movs	r2, #0
 800e76a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e76c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e76e:	782a      	ldrb	r2, [r5, #0]
 800e770:	2a30      	cmp	r2, #48	@ 0x30
 800e772:	f040 80b3 	bne.w	800e8dc <_strtod_l+0x1a4>
 800e776:	786a      	ldrb	r2, [r5, #1]
 800e778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e77c:	2a58      	cmp	r2, #88	@ 0x58
 800e77e:	d16e      	bne.n	800e85e <_strtod_l+0x126>
 800e780:	9302      	str	r3, [sp, #8]
 800e782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	ab1a      	add	r3, sp, #104	@ 0x68
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	4a8e      	ldr	r2, [pc, #568]	@ (800e9c4 <_strtod_l+0x28c>)
 800e78c:	9805      	ldr	r0, [sp, #20]
 800e78e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e790:	a919      	add	r1, sp, #100	@ 0x64
 800e792:	f001 f927 	bl	800f9e4 <__gethex>
 800e796:	f010 060f 	ands.w	r6, r0, #15
 800e79a:	4604      	mov	r4, r0
 800e79c:	d005      	beq.n	800e7aa <_strtod_l+0x72>
 800e79e:	2e06      	cmp	r6, #6
 800e7a0:	d128      	bne.n	800e7f4 <_strtod_l+0xbc>
 800e7a2:	3501      	adds	r5, #1
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f040 858e 	bne.w	800f2ce <_strtod_l+0xb96>
 800e7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7b4:	b1cb      	cbz	r3, 800e7ea <_strtod_l+0xb2>
 800e7b6:	4652      	mov	r2, sl
 800e7b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e7bc:	ec43 2b10 	vmov	d0, r2, r3
 800e7c0:	b01f      	add	sp, #124	@ 0x7c
 800e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c6:	2920      	cmp	r1, #32
 800e7c8:	d1ce      	bne.n	800e768 <_strtod_l+0x30>
 800e7ca:	3201      	adds	r2, #1
 800e7cc:	e7c1      	b.n	800e752 <_strtod_l+0x1a>
 800e7ce:	292d      	cmp	r1, #45	@ 0x2d
 800e7d0:	d1ca      	bne.n	800e768 <_strtod_l+0x30>
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e7d6:	1c51      	adds	r1, r2, #1
 800e7d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e7da:	7852      	ldrb	r2, [r2, #1]
 800e7dc:	2a00      	cmp	r2, #0
 800e7de:	d1c5      	bne.n	800e76c <_strtod_l+0x34>
 800e7e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e7e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f040 8570 	bne.w	800f2ca <_strtod_l+0xb92>
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	465b      	mov	r3, fp
 800e7ee:	e7e5      	b.n	800e7bc <_strtod_l+0x84>
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	e7ef      	b.n	800e7d4 <_strtod_l+0x9c>
 800e7f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e7f6:	b13a      	cbz	r2, 800e808 <_strtod_l+0xd0>
 800e7f8:	2135      	movs	r1, #53	@ 0x35
 800e7fa:	a81c      	add	r0, sp, #112	@ 0x70
 800e7fc:	f7ff ff3a 	bl	800e674 <__copybits>
 800e800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e802:	9805      	ldr	r0, [sp, #20]
 800e804:	f7ff fb08 	bl	800de18 <_Bfree>
 800e808:	3e01      	subs	r6, #1
 800e80a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e80c:	2e04      	cmp	r6, #4
 800e80e:	d806      	bhi.n	800e81e <_strtod_l+0xe6>
 800e810:	e8df f006 	tbb	[pc, r6]
 800e814:	201d0314 	.word	0x201d0314
 800e818:	14          	.byte	0x14
 800e819:	00          	.byte	0x00
 800e81a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e81e:	05e1      	lsls	r1, r4, #23
 800e820:	bf48      	it	mi
 800e822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e82a:	0d1b      	lsrs	r3, r3, #20
 800e82c:	051b      	lsls	r3, r3, #20
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1bb      	bne.n	800e7aa <_strtod_l+0x72>
 800e832:	f7fe fb31 	bl	800ce98 <__errno>
 800e836:	2322      	movs	r3, #34	@ 0x22
 800e838:	6003      	str	r3, [r0, #0]
 800e83a:	e7b6      	b.n	800e7aa <_strtod_l+0x72>
 800e83c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e84c:	e7e7      	b.n	800e81e <_strtod_l+0xe6>
 800e84e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e9cc <_strtod_l+0x294>
 800e852:	e7e4      	b.n	800e81e <_strtod_l+0xe6>
 800e854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e858:	f04f 3aff 	mov.w	sl, #4294967295
 800e85c:	e7df      	b.n	800e81e <_strtod_l+0xe6>
 800e85e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e860:	1c5a      	adds	r2, r3, #1
 800e862:	9219      	str	r2, [sp, #100]	@ 0x64
 800e864:	785b      	ldrb	r3, [r3, #1]
 800e866:	2b30      	cmp	r3, #48	@ 0x30
 800e868:	d0f9      	beq.n	800e85e <_strtod_l+0x126>
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d09d      	beq.n	800e7aa <_strtod_l+0x72>
 800e86e:	2301      	movs	r3, #1
 800e870:	9309      	str	r3, [sp, #36]	@ 0x24
 800e872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e874:	930c      	str	r3, [sp, #48]	@ 0x30
 800e876:	2300      	movs	r3, #0
 800e878:	9308      	str	r3, [sp, #32]
 800e87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e87c:	461f      	mov	r7, r3
 800e87e:	220a      	movs	r2, #10
 800e880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e882:	7805      	ldrb	r5, [r0, #0]
 800e884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e888:	b2d9      	uxtb	r1, r3
 800e88a:	2909      	cmp	r1, #9
 800e88c:	d928      	bls.n	800e8e0 <_strtod_l+0x1a8>
 800e88e:	494e      	ldr	r1, [pc, #312]	@ (800e9c8 <_strtod_l+0x290>)
 800e890:	2201      	movs	r2, #1
 800e892:	f000 ffd5 	bl	800f840 <strncmp>
 800e896:	2800      	cmp	r0, #0
 800e898:	d032      	beq.n	800e900 <_strtod_l+0x1c8>
 800e89a:	2000      	movs	r0, #0
 800e89c:	462a      	mov	r2, r5
 800e89e:	4681      	mov	r9, r0
 800e8a0:	463d      	mov	r5, r7
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2a65      	cmp	r2, #101	@ 0x65
 800e8a6:	d001      	beq.n	800e8ac <_strtod_l+0x174>
 800e8a8:	2a45      	cmp	r2, #69	@ 0x45
 800e8aa:	d114      	bne.n	800e8d6 <_strtod_l+0x19e>
 800e8ac:	b91d      	cbnz	r5, 800e8b6 <_strtod_l+0x17e>
 800e8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b0:	4302      	orrs	r2, r0
 800e8b2:	d095      	beq.n	800e7e0 <_strtod_l+0xa8>
 800e8b4:	2500      	movs	r5, #0
 800e8b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e8b8:	1c62      	adds	r2, r4, #1
 800e8ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8bc:	7862      	ldrb	r2, [r4, #1]
 800e8be:	2a2b      	cmp	r2, #43	@ 0x2b
 800e8c0:	d077      	beq.n	800e9b2 <_strtod_l+0x27a>
 800e8c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e8c4:	d07b      	beq.n	800e9be <_strtod_l+0x286>
 800e8c6:	f04f 0c00 	mov.w	ip, #0
 800e8ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e8ce:	2909      	cmp	r1, #9
 800e8d0:	f240 8082 	bls.w	800e9d8 <_strtod_l+0x2a0>
 800e8d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	e0a2      	b.n	800ea22 <_strtod_l+0x2ea>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e7c7      	b.n	800e870 <_strtod_l+0x138>
 800e8e0:	2f08      	cmp	r7, #8
 800e8e2:	bfd5      	itete	le
 800e8e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e8e6:	9908      	ldrgt	r1, [sp, #32]
 800e8e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e8ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e8f0:	f100 0001 	add.w	r0, r0, #1
 800e8f4:	bfd4      	ite	le
 800e8f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e8f8:	9308      	strgt	r3, [sp, #32]
 800e8fa:	3701      	adds	r7, #1
 800e8fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e8fe:	e7bf      	b.n	800e880 <_strtod_l+0x148>
 800e900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	9219      	str	r2, [sp, #100]	@ 0x64
 800e906:	785a      	ldrb	r2, [r3, #1]
 800e908:	b37f      	cbz	r7, 800e96a <_strtod_l+0x232>
 800e90a:	4681      	mov	r9, r0
 800e90c:	463d      	mov	r5, r7
 800e90e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e912:	2b09      	cmp	r3, #9
 800e914:	d912      	bls.n	800e93c <_strtod_l+0x204>
 800e916:	2301      	movs	r3, #1
 800e918:	e7c4      	b.n	800e8a4 <_strtod_l+0x16c>
 800e91a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e920:	785a      	ldrb	r2, [r3, #1]
 800e922:	3001      	adds	r0, #1
 800e924:	2a30      	cmp	r2, #48	@ 0x30
 800e926:	d0f8      	beq.n	800e91a <_strtod_l+0x1e2>
 800e928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e92c:	2b08      	cmp	r3, #8
 800e92e:	f200 84d3 	bhi.w	800f2d8 <_strtod_l+0xba0>
 800e932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e934:	930c      	str	r3, [sp, #48]	@ 0x30
 800e936:	4681      	mov	r9, r0
 800e938:	2000      	movs	r0, #0
 800e93a:	4605      	mov	r5, r0
 800e93c:	3a30      	subs	r2, #48	@ 0x30
 800e93e:	f100 0301 	add.w	r3, r0, #1
 800e942:	d02a      	beq.n	800e99a <_strtod_l+0x262>
 800e944:	4499      	add	r9, r3
 800e946:	eb00 0c05 	add.w	ip, r0, r5
 800e94a:	462b      	mov	r3, r5
 800e94c:	210a      	movs	r1, #10
 800e94e:	4563      	cmp	r3, ip
 800e950:	d10d      	bne.n	800e96e <_strtod_l+0x236>
 800e952:	1c69      	adds	r1, r5, #1
 800e954:	4401      	add	r1, r0
 800e956:	4428      	add	r0, r5
 800e958:	2808      	cmp	r0, #8
 800e95a:	dc16      	bgt.n	800e98a <_strtod_l+0x252>
 800e95c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e95e:	230a      	movs	r3, #10
 800e960:	fb03 2300 	mla	r3, r3, r0, r2
 800e964:	930a      	str	r3, [sp, #40]	@ 0x28
 800e966:	2300      	movs	r3, #0
 800e968:	e018      	b.n	800e99c <_strtod_l+0x264>
 800e96a:	4638      	mov	r0, r7
 800e96c:	e7da      	b.n	800e924 <_strtod_l+0x1ec>
 800e96e:	2b08      	cmp	r3, #8
 800e970:	f103 0301 	add.w	r3, r3, #1
 800e974:	dc03      	bgt.n	800e97e <_strtod_l+0x246>
 800e976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e978:	434e      	muls	r6, r1
 800e97a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e97c:	e7e7      	b.n	800e94e <_strtod_l+0x216>
 800e97e:	2b10      	cmp	r3, #16
 800e980:	bfde      	ittt	le
 800e982:	9e08      	ldrle	r6, [sp, #32]
 800e984:	434e      	mulle	r6, r1
 800e986:	9608      	strle	r6, [sp, #32]
 800e988:	e7e1      	b.n	800e94e <_strtod_l+0x216>
 800e98a:	280f      	cmp	r0, #15
 800e98c:	dceb      	bgt.n	800e966 <_strtod_l+0x22e>
 800e98e:	9808      	ldr	r0, [sp, #32]
 800e990:	230a      	movs	r3, #10
 800e992:	fb03 2300 	mla	r3, r3, r0, r2
 800e996:	9308      	str	r3, [sp, #32]
 800e998:	e7e5      	b.n	800e966 <_strtod_l+0x22e>
 800e99a:	4629      	mov	r1, r5
 800e99c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e99e:	1c50      	adds	r0, r2, #1
 800e9a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e9a2:	7852      	ldrb	r2, [r2, #1]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	460d      	mov	r5, r1
 800e9a8:	e7b1      	b.n	800e90e <_strtod_l+0x1d6>
 800e9aa:	f04f 0900 	mov.w	r9, #0
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e77d      	b.n	800e8ae <_strtod_l+0x176>
 800e9b2:	f04f 0c00 	mov.w	ip, #0
 800e9b6:	1ca2      	adds	r2, r4, #2
 800e9b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9ba:	78a2      	ldrb	r2, [r4, #2]
 800e9bc:	e785      	b.n	800e8ca <_strtod_l+0x192>
 800e9be:	f04f 0c01 	mov.w	ip, #1
 800e9c2:	e7f8      	b.n	800e9b6 <_strtod_l+0x27e>
 800e9c4:	08010850 	.word	0x08010850
 800e9c8:	08010838 	.word	0x08010838
 800e9cc:	7ff00000 	.word	0x7ff00000
 800e9d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e9d2:	1c51      	adds	r1, r2, #1
 800e9d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e9d6:	7852      	ldrb	r2, [r2, #1]
 800e9d8:	2a30      	cmp	r2, #48	@ 0x30
 800e9da:	d0f9      	beq.n	800e9d0 <_strtod_l+0x298>
 800e9dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e9e0:	2908      	cmp	r1, #8
 800e9e2:	f63f af78 	bhi.w	800e8d6 <_strtod_l+0x19e>
 800e9e6:	3a30      	subs	r2, #48	@ 0x30
 800e9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e9ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e9ee:	f04f 080a 	mov.w	r8, #10
 800e9f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e9f4:	1c56      	adds	r6, r2, #1
 800e9f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e9f8:	7852      	ldrb	r2, [r2, #1]
 800e9fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e9fe:	f1be 0f09 	cmp.w	lr, #9
 800ea02:	d939      	bls.n	800ea78 <_strtod_l+0x340>
 800ea04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea06:	1a76      	subs	r6, r6, r1
 800ea08:	2e08      	cmp	r6, #8
 800ea0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ea0e:	dc03      	bgt.n	800ea18 <_strtod_l+0x2e0>
 800ea10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea12:	4588      	cmp	r8, r1
 800ea14:	bfa8      	it	ge
 800ea16:	4688      	movge	r8, r1
 800ea18:	f1bc 0f00 	cmp.w	ip, #0
 800ea1c:	d001      	beq.n	800ea22 <_strtod_l+0x2ea>
 800ea1e:	f1c8 0800 	rsb	r8, r8, #0
 800ea22:	2d00      	cmp	r5, #0
 800ea24:	d14e      	bne.n	800eac4 <_strtod_l+0x38c>
 800ea26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea28:	4308      	orrs	r0, r1
 800ea2a:	f47f aebe 	bne.w	800e7aa <_strtod_l+0x72>
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f47f aed6 	bne.w	800e7e0 <_strtod_l+0xa8>
 800ea34:	2a69      	cmp	r2, #105	@ 0x69
 800ea36:	d028      	beq.n	800ea8a <_strtod_l+0x352>
 800ea38:	dc25      	bgt.n	800ea86 <_strtod_l+0x34e>
 800ea3a:	2a49      	cmp	r2, #73	@ 0x49
 800ea3c:	d025      	beq.n	800ea8a <_strtod_l+0x352>
 800ea3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ea40:	f47f aece 	bne.w	800e7e0 <_strtod_l+0xa8>
 800ea44:	499b      	ldr	r1, [pc, #620]	@ (800ecb4 <_strtod_l+0x57c>)
 800ea46:	a819      	add	r0, sp, #100	@ 0x64
 800ea48:	f001 f9ee 	bl	800fe28 <__match>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	f43f aec7 	beq.w	800e7e0 <_strtod_l+0xa8>
 800ea52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	2b28      	cmp	r3, #40	@ 0x28
 800ea58:	d12e      	bne.n	800eab8 <_strtod_l+0x380>
 800ea5a:	4997      	ldr	r1, [pc, #604]	@ (800ecb8 <_strtod_l+0x580>)
 800ea5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ea5e:	a819      	add	r0, sp, #100	@ 0x64
 800ea60:	f001 f9f6 	bl	800fe50 <__hexnan>
 800ea64:	2805      	cmp	r0, #5
 800ea66:	d127      	bne.n	800eab8 <_strtod_l+0x380>
 800ea68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ea6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ea72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ea76:	e698      	b.n	800e7aa <_strtod_l+0x72>
 800ea78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea7a:	fb08 2101 	mla	r1, r8, r1, r2
 800ea7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ea82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea84:	e7b5      	b.n	800e9f2 <_strtod_l+0x2ba>
 800ea86:	2a6e      	cmp	r2, #110	@ 0x6e
 800ea88:	e7da      	b.n	800ea40 <_strtod_l+0x308>
 800ea8a:	498c      	ldr	r1, [pc, #560]	@ (800ecbc <_strtod_l+0x584>)
 800ea8c:	a819      	add	r0, sp, #100	@ 0x64
 800ea8e:	f001 f9cb 	bl	800fe28 <__match>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	f43f aea4 	beq.w	800e7e0 <_strtod_l+0xa8>
 800ea98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea9a:	4989      	ldr	r1, [pc, #548]	@ (800ecc0 <_strtod_l+0x588>)
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	a819      	add	r0, sp, #100	@ 0x64
 800eaa0:	9319      	str	r3, [sp, #100]	@ 0x64
 800eaa2:	f001 f9c1 	bl	800fe28 <__match>
 800eaa6:	b910      	cbnz	r0, 800eaae <_strtod_l+0x376>
 800eaa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaaa:	3301      	adds	r3, #1
 800eaac:	9319      	str	r3, [sp, #100]	@ 0x64
 800eaae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ecd0 <_strtod_l+0x598>
 800eab2:	f04f 0a00 	mov.w	sl, #0
 800eab6:	e678      	b.n	800e7aa <_strtod_l+0x72>
 800eab8:	4882      	ldr	r0, [pc, #520]	@ (800ecc4 <_strtod_l+0x58c>)
 800eaba:	f000 fef1 	bl	800f8a0 <nan>
 800eabe:	ec5b ab10 	vmov	sl, fp, d0
 800eac2:	e672      	b.n	800e7aa <_strtod_l+0x72>
 800eac4:	eba8 0309 	sub.w	r3, r8, r9
 800eac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eaca:	9309      	str	r3, [sp, #36]	@ 0x24
 800eacc:	2f00      	cmp	r7, #0
 800eace:	bf08      	it	eq
 800ead0:	462f      	moveq	r7, r5
 800ead2:	2d10      	cmp	r5, #16
 800ead4:	462c      	mov	r4, r5
 800ead6:	bfa8      	it	ge
 800ead8:	2410      	movge	r4, #16
 800eada:	f7f1 fd1b 	bl	8000514 <__aeabi_ui2d>
 800eade:	2d09      	cmp	r5, #9
 800eae0:	4682      	mov	sl, r0
 800eae2:	468b      	mov	fp, r1
 800eae4:	dc13      	bgt.n	800eb0e <_strtod_l+0x3d6>
 800eae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f43f ae5e 	beq.w	800e7aa <_strtod_l+0x72>
 800eaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf0:	dd78      	ble.n	800ebe4 <_strtod_l+0x4ac>
 800eaf2:	2b16      	cmp	r3, #22
 800eaf4:	dc5f      	bgt.n	800ebb6 <_strtod_l+0x47e>
 800eaf6:	4974      	ldr	r1, [pc, #464]	@ (800ecc8 <_strtod_l+0x590>)
 800eaf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb00:	4652      	mov	r2, sl
 800eb02:	465b      	mov	r3, fp
 800eb04:	f7f1 fd80 	bl	8000608 <__aeabi_dmul>
 800eb08:	4682      	mov	sl, r0
 800eb0a:	468b      	mov	fp, r1
 800eb0c:	e64d      	b.n	800e7aa <_strtod_l+0x72>
 800eb0e:	4b6e      	ldr	r3, [pc, #440]	@ (800ecc8 <_strtod_l+0x590>)
 800eb10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eb18:	f7f1 fd76 	bl	8000608 <__aeabi_dmul>
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	9808      	ldr	r0, [sp, #32]
 800eb20:	468b      	mov	fp, r1
 800eb22:	f7f1 fcf7 	bl	8000514 <__aeabi_ui2d>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4650      	mov	r0, sl
 800eb2c:	4659      	mov	r1, fp
 800eb2e:	f7f1 fbb5 	bl	800029c <__adddf3>
 800eb32:	2d0f      	cmp	r5, #15
 800eb34:	4682      	mov	sl, r0
 800eb36:	468b      	mov	fp, r1
 800eb38:	ddd5      	ble.n	800eae6 <_strtod_l+0x3ae>
 800eb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb3c:	1b2c      	subs	r4, r5, r4
 800eb3e:	441c      	add	r4, r3
 800eb40:	2c00      	cmp	r4, #0
 800eb42:	f340 8096 	ble.w	800ec72 <_strtod_l+0x53a>
 800eb46:	f014 030f 	ands.w	r3, r4, #15
 800eb4a:	d00a      	beq.n	800eb62 <_strtod_l+0x42a>
 800eb4c:	495e      	ldr	r1, [pc, #376]	@ (800ecc8 <_strtod_l+0x590>)
 800eb4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb52:	4652      	mov	r2, sl
 800eb54:	465b      	mov	r3, fp
 800eb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb5a:	f7f1 fd55 	bl	8000608 <__aeabi_dmul>
 800eb5e:	4682      	mov	sl, r0
 800eb60:	468b      	mov	fp, r1
 800eb62:	f034 040f 	bics.w	r4, r4, #15
 800eb66:	d073      	beq.n	800ec50 <_strtod_l+0x518>
 800eb68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800eb6c:	dd48      	ble.n	800ec00 <_strtod_l+0x4c8>
 800eb6e:	2400      	movs	r4, #0
 800eb70:	46a0      	mov	r8, r4
 800eb72:	940a      	str	r4, [sp, #40]	@ 0x28
 800eb74:	46a1      	mov	r9, r4
 800eb76:	9a05      	ldr	r2, [sp, #20]
 800eb78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ecd0 <_strtod_l+0x598>
 800eb7c:	2322      	movs	r3, #34	@ 0x22
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	f04f 0a00 	mov.w	sl, #0
 800eb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f43f ae0f 	beq.w	800e7aa <_strtod_l+0x72>
 800eb8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb8e:	9805      	ldr	r0, [sp, #20]
 800eb90:	f7ff f942 	bl	800de18 <_Bfree>
 800eb94:	9805      	ldr	r0, [sp, #20]
 800eb96:	4649      	mov	r1, r9
 800eb98:	f7ff f93e 	bl	800de18 <_Bfree>
 800eb9c:	9805      	ldr	r0, [sp, #20]
 800eb9e:	4641      	mov	r1, r8
 800eba0:	f7ff f93a 	bl	800de18 <_Bfree>
 800eba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eba6:	9805      	ldr	r0, [sp, #20]
 800eba8:	f7ff f936 	bl	800de18 <_Bfree>
 800ebac:	9805      	ldr	r0, [sp, #20]
 800ebae:	4621      	mov	r1, r4
 800ebb0:	f7ff f932 	bl	800de18 <_Bfree>
 800ebb4:	e5f9      	b.n	800e7aa <_strtod_l+0x72>
 800ebb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	dbbc      	blt.n	800eb3a <_strtod_l+0x402>
 800ebc0:	4c41      	ldr	r4, [pc, #260]	@ (800ecc8 <_strtod_l+0x590>)
 800ebc2:	f1c5 050f 	rsb	r5, r5, #15
 800ebc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ebca:	4652      	mov	r2, sl
 800ebcc:	465b      	mov	r3, fp
 800ebce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd2:	f7f1 fd19 	bl	8000608 <__aeabi_dmul>
 800ebd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd8:	1b5d      	subs	r5, r3, r5
 800ebda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ebde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ebe2:	e78f      	b.n	800eb04 <_strtod_l+0x3cc>
 800ebe4:	3316      	adds	r3, #22
 800ebe6:	dba8      	blt.n	800eb3a <_strtod_l+0x402>
 800ebe8:	4b37      	ldr	r3, [pc, #220]	@ (800ecc8 <_strtod_l+0x590>)
 800ebea:	eba9 0808 	sub.w	r8, r9, r8
 800ebee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ebf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ebf6:	4650      	mov	r0, sl
 800ebf8:	4659      	mov	r1, fp
 800ebfa:	f7f1 fe2f 	bl	800085c <__aeabi_ddiv>
 800ebfe:	e783      	b.n	800eb08 <_strtod_l+0x3d0>
 800ec00:	4b32      	ldr	r3, [pc, #200]	@ (800eccc <_strtod_l+0x594>)
 800ec02:	9308      	str	r3, [sp, #32]
 800ec04:	2300      	movs	r3, #0
 800ec06:	1124      	asrs	r4, r4, #4
 800ec08:	4650      	mov	r0, sl
 800ec0a:	4659      	mov	r1, fp
 800ec0c:	461e      	mov	r6, r3
 800ec0e:	2c01      	cmp	r4, #1
 800ec10:	dc21      	bgt.n	800ec56 <_strtod_l+0x51e>
 800ec12:	b10b      	cbz	r3, 800ec18 <_strtod_l+0x4e0>
 800ec14:	4682      	mov	sl, r0
 800ec16:	468b      	mov	fp, r1
 800ec18:	492c      	ldr	r1, [pc, #176]	@ (800eccc <_strtod_l+0x594>)
 800ec1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ec1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ec22:	4652      	mov	r2, sl
 800ec24:	465b      	mov	r3, fp
 800ec26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec2a:	f7f1 fced 	bl	8000608 <__aeabi_dmul>
 800ec2e:	4b28      	ldr	r3, [pc, #160]	@ (800ecd0 <_strtod_l+0x598>)
 800ec30:	460a      	mov	r2, r1
 800ec32:	400b      	ands	r3, r1
 800ec34:	4927      	ldr	r1, [pc, #156]	@ (800ecd4 <_strtod_l+0x59c>)
 800ec36:	428b      	cmp	r3, r1
 800ec38:	4682      	mov	sl, r0
 800ec3a:	d898      	bhi.n	800eb6e <_strtod_l+0x436>
 800ec3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ec40:	428b      	cmp	r3, r1
 800ec42:	bf86      	itte	hi
 800ec44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ecd8 <_strtod_l+0x5a0>
 800ec48:	f04f 3aff 	movhi.w	sl, #4294967295
 800ec4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ec50:	2300      	movs	r3, #0
 800ec52:	9308      	str	r3, [sp, #32]
 800ec54:	e07a      	b.n	800ed4c <_strtod_l+0x614>
 800ec56:	07e2      	lsls	r2, r4, #31
 800ec58:	d505      	bpl.n	800ec66 <_strtod_l+0x52e>
 800ec5a:	9b08      	ldr	r3, [sp, #32]
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fcd2 	bl	8000608 <__aeabi_dmul>
 800ec64:	2301      	movs	r3, #1
 800ec66:	9a08      	ldr	r2, [sp, #32]
 800ec68:	3208      	adds	r2, #8
 800ec6a:	3601      	adds	r6, #1
 800ec6c:	1064      	asrs	r4, r4, #1
 800ec6e:	9208      	str	r2, [sp, #32]
 800ec70:	e7cd      	b.n	800ec0e <_strtod_l+0x4d6>
 800ec72:	d0ed      	beq.n	800ec50 <_strtod_l+0x518>
 800ec74:	4264      	negs	r4, r4
 800ec76:	f014 020f 	ands.w	r2, r4, #15
 800ec7a:	d00a      	beq.n	800ec92 <_strtod_l+0x55a>
 800ec7c:	4b12      	ldr	r3, [pc, #72]	@ (800ecc8 <_strtod_l+0x590>)
 800ec7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec82:	4650      	mov	r0, sl
 800ec84:	4659      	mov	r1, fp
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	f7f1 fde7 	bl	800085c <__aeabi_ddiv>
 800ec8e:	4682      	mov	sl, r0
 800ec90:	468b      	mov	fp, r1
 800ec92:	1124      	asrs	r4, r4, #4
 800ec94:	d0dc      	beq.n	800ec50 <_strtod_l+0x518>
 800ec96:	2c1f      	cmp	r4, #31
 800ec98:	dd20      	ble.n	800ecdc <_strtod_l+0x5a4>
 800ec9a:	2400      	movs	r4, #0
 800ec9c:	46a0      	mov	r8, r4
 800ec9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800eca0:	46a1      	mov	r9, r4
 800eca2:	9a05      	ldr	r2, [sp, #20]
 800eca4:	2322      	movs	r3, #34	@ 0x22
 800eca6:	f04f 0a00 	mov.w	sl, #0
 800ecaa:	f04f 0b00 	mov.w	fp, #0
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	e768      	b.n	800eb84 <_strtod_l+0x44c>
 800ecb2:	bf00      	nop
 800ecb4:	08010625 	.word	0x08010625
 800ecb8:	0801083c 	.word	0x0801083c
 800ecbc:	0801061d 	.word	0x0801061d
 800ecc0:	08010654 	.word	0x08010654
 800ecc4:	080109e5 	.word	0x080109e5
 800ecc8:	08010770 	.word	0x08010770
 800eccc:	08010748 	.word	0x08010748
 800ecd0:	7ff00000 	.word	0x7ff00000
 800ecd4:	7ca00000 	.word	0x7ca00000
 800ecd8:	7fefffff 	.word	0x7fefffff
 800ecdc:	f014 0310 	ands.w	r3, r4, #16
 800ece0:	bf18      	it	ne
 800ece2:	236a      	movne	r3, #106	@ 0x6a
 800ece4:	4ea9      	ldr	r6, [pc, #676]	@ (800ef8c <_strtod_l+0x854>)
 800ece6:	9308      	str	r3, [sp, #32]
 800ece8:	4650      	mov	r0, sl
 800ecea:	4659      	mov	r1, fp
 800ecec:	2300      	movs	r3, #0
 800ecee:	07e2      	lsls	r2, r4, #31
 800ecf0:	d504      	bpl.n	800ecfc <_strtod_l+0x5c4>
 800ecf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecf6:	f7f1 fc87 	bl	8000608 <__aeabi_dmul>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	1064      	asrs	r4, r4, #1
 800ecfe:	f106 0608 	add.w	r6, r6, #8
 800ed02:	d1f4      	bne.n	800ecee <_strtod_l+0x5b6>
 800ed04:	b10b      	cbz	r3, 800ed0a <_strtod_l+0x5d2>
 800ed06:	4682      	mov	sl, r0
 800ed08:	468b      	mov	fp, r1
 800ed0a:	9b08      	ldr	r3, [sp, #32]
 800ed0c:	b1b3      	cbz	r3, 800ed3c <_strtod_l+0x604>
 800ed0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ed12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	4659      	mov	r1, fp
 800ed1a:	dd0f      	ble.n	800ed3c <_strtod_l+0x604>
 800ed1c:	2b1f      	cmp	r3, #31
 800ed1e:	dd55      	ble.n	800edcc <_strtod_l+0x694>
 800ed20:	2b34      	cmp	r3, #52	@ 0x34
 800ed22:	bfde      	ittt	le
 800ed24:	f04f 33ff 	movle.w	r3, #4294967295
 800ed28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ed2c:	4093      	lslle	r3, r2
 800ed2e:	f04f 0a00 	mov.w	sl, #0
 800ed32:	bfcc      	ite	gt
 800ed34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ed38:	ea03 0b01 	andle.w	fp, r3, r1
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2300      	movs	r3, #0
 800ed40:	4650      	mov	r0, sl
 800ed42:	4659      	mov	r1, fp
 800ed44:	f7f1 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d1a6      	bne.n	800ec9a <_strtod_l+0x562>
 800ed4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ed52:	9805      	ldr	r0, [sp, #20]
 800ed54:	462b      	mov	r3, r5
 800ed56:	463a      	mov	r2, r7
 800ed58:	f7ff f8c6 	bl	800dee8 <__s2b>
 800ed5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	f43f af05 	beq.w	800eb6e <_strtod_l+0x436>
 800ed64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	eba9 0308 	sub.w	r3, r9, r8
 800ed6c:	bfa8      	it	ge
 800ed6e:	2300      	movge	r3, #0
 800ed70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ed72:	2400      	movs	r4, #0
 800ed74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ed78:	9316      	str	r3, [sp, #88]	@ 0x58
 800ed7a:	46a0      	mov	r8, r4
 800ed7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed7e:	9805      	ldr	r0, [sp, #20]
 800ed80:	6859      	ldr	r1, [r3, #4]
 800ed82:	f7ff f809 	bl	800dd98 <_Balloc>
 800ed86:	4681      	mov	r9, r0
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f43f aef4 	beq.w	800eb76 <_strtod_l+0x43e>
 800ed8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed90:	691a      	ldr	r2, [r3, #16]
 800ed92:	3202      	adds	r2, #2
 800ed94:	f103 010c 	add.w	r1, r3, #12
 800ed98:	0092      	lsls	r2, r2, #2
 800ed9a:	300c      	adds	r0, #12
 800ed9c:	f000 fd72 	bl	800f884 <memcpy>
 800eda0:	ec4b ab10 	vmov	d0, sl, fp
 800eda4:	9805      	ldr	r0, [sp, #20]
 800eda6:	aa1c      	add	r2, sp, #112	@ 0x70
 800eda8:	a91b      	add	r1, sp, #108	@ 0x6c
 800edaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800edae:	f7ff fbd7 	bl	800e560 <__d2b>
 800edb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f43f aede 	beq.w	800eb76 <_strtod_l+0x43e>
 800edba:	9805      	ldr	r0, [sp, #20]
 800edbc:	2101      	movs	r1, #1
 800edbe:	f7ff f929 	bl	800e014 <__i2b>
 800edc2:	4680      	mov	r8, r0
 800edc4:	b948      	cbnz	r0, 800edda <_strtod_l+0x6a2>
 800edc6:	f04f 0800 	mov.w	r8, #0
 800edca:	e6d4      	b.n	800eb76 <_strtod_l+0x43e>
 800edcc:	f04f 32ff 	mov.w	r2, #4294967295
 800edd0:	fa02 f303 	lsl.w	r3, r2, r3
 800edd4:	ea03 0a0a 	and.w	sl, r3, sl
 800edd8:	e7b0      	b.n	800ed3c <_strtod_l+0x604>
 800edda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800edde:	2d00      	cmp	r5, #0
 800ede0:	bfab      	itete	ge
 800ede2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ede4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ede6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ede8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800edea:	bfac      	ite	ge
 800edec:	18ef      	addge	r7, r5, r3
 800edee:	1b5e      	sublt	r6, r3, r5
 800edf0:	9b08      	ldr	r3, [sp, #32]
 800edf2:	1aed      	subs	r5, r5, r3
 800edf4:	4415      	add	r5, r2
 800edf6:	4b66      	ldr	r3, [pc, #408]	@ (800ef90 <_strtod_l+0x858>)
 800edf8:	3d01      	subs	r5, #1
 800edfa:	429d      	cmp	r5, r3
 800edfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ee00:	da50      	bge.n	800eea4 <_strtod_l+0x76c>
 800ee02:	1b5b      	subs	r3, r3, r5
 800ee04:	2b1f      	cmp	r3, #31
 800ee06:	eba2 0203 	sub.w	r2, r2, r3
 800ee0a:	f04f 0101 	mov.w	r1, #1
 800ee0e:	dc3d      	bgt.n	800ee8c <_strtod_l+0x754>
 800ee10:	fa01 f303 	lsl.w	r3, r1, r3
 800ee14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee16:	2300      	movs	r3, #0
 800ee18:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee1a:	18bd      	adds	r5, r7, r2
 800ee1c:	9b08      	ldr	r3, [sp, #32]
 800ee1e:	42af      	cmp	r7, r5
 800ee20:	4416      	add	r6, r2
 800ee22:	441e      	add	r6, r3
 800ee24:	463b      	mov	r3, r7
 800ee26:	bfa8      	it	ge
 800ee28:	462b      	movge	r3, r5
 800ee2a:	42b3      	cmp	r3, r6
 800ee2c:	bfa8      	it	ge
 800ee2e:	4633      	movge	r3, r6
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bfc2      	ittt	gt
 800ee34:	1aed      	subgt	r5, r5, r3
 800ee36:	1af6      	subgt	r6, r6, r3
 800ee38:	1aff      	subgt	r7, r7, r3
 800ee3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dd16      	ble.n	800ee6e <_strtod_l+0x736>
 800ee40:	4641      	mov	r1, r8
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	461a      	mov	r2, r3
 800ee46:	f7ff f9a5 	bl	800e194 <__pow5mult>
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d0ba      	beq.n	800edc6 <_strtod_l+0x68e>
 800ee50:	4601      	mov	r1, r0
 800ee52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ee54:	9805      	ldr	r0, [sp, #20]
 800ee56:	f7ff f8f3 	bl	800e040 <__multiply>
 800ee5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	f43f ae8a 	beq.w	800eb76 <_strtod_l+0x43e>
 800ee62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee64:	9805      	ldr	r0, [sp, #20]
 800ee66:	f7fe ffd7 	bl	800de18 <_Bfree>
 800ee6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee6e:	2d00      	cmp	r5, #0
 800ee70:	dc1d      	bgt.n	800eeae <_strtod_l+0x776>
 800ee72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	dd23      	ble.n	800eec0 <_strtod_l+0x788>
 800ee78:	4649      	mov	r1, r9
 800ee7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee7c:	9805      	ldr	r0, [sp, #20]
 800ee7e:	f7ff f989 	bl	800e194 <__pow5mult>
 800ee82:	4681      	mov	r9, r0
 800ee84:	b9e0      	cbnz	r0, 800eec0 <_strtod_l+0x788>
 800ee86:	f04f 0900 	mov.w	r9, #0
 800ee8a:	e674      	b.n	800eb76 <_strtod_l+0x43e>
 800ee8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ee90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ee94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ee98:	35e2      	adds	r5, #226	@ 0xe2
 800ee9a:	fa01 f305 	lsl.w	r3, r1, r5
 800ee9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eea2:	e7ba      	b.n	800ee1a <_strtod_l+0x6e2>
 800eea4:	2300      	movs	r3, #0
 800eea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eea8:	2301      	movs	r3, #1
 800eeaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eeac:	e7b5      	b.n	800ee1a <_strtod_l+0x6e2>
 800eeae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeb0:	9805      	ldr	r0, [sp, #20]
 800eeb2:	462a      	mov	r2, r5
 800eeb4:	f7ff f9c8 	bl	800e248 <__lshift>
 800eeb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d1d9      	bne.n	800ee72 <_strtod_l+0x73a>
 800eebe:	e65a      	b.n	800eb76 <_strtod_l+0x43e>
 800eec0:	2e00      	cmp	r6, #0
 800eec2:	dd07      	ble.n	800eed4 <_strtod_l+0x79c>
 800eec4:	4649      	mov	r1, r9
 800eec6:	9805      	ldr	r0, [sp, #20]
 800eec8:	4632      	mov	r2, r6
 800eeca:	f7ff f9bd 	bl	800e248 <__lshift>
 800eece:	4681      	mov	r9, r0
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d0d8      	beq.n	800ee86 <_strtod_l+0x74e>
 800eed4:	2f00      	cmp	r7, #0
 800eed6:	dd08      	ble.n	800eeea <_strtod_l+0x7b2>
 800eed8:	4641      	mov	r1, r8
 800eeda:	9805      	ldr	r0, [sp, #20]
 800eedc:	463a      	mov	r2, r7
 800eede:	f7ff f9b3 	bl	800e248 <__lshift>
 800eee2:	4680      	mov	r8, r0
 800eee4:	2800      	cmp	r0, #0
 800eee6:	f43f ae46 	beq.w	800eb76 <_strtod_l+0x43e>
 800eeea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeec:	9805      	ldr	r0, [sp, #20]
 800eeee:	464a      	mov	r2, r9
 800eef0:	f7ff fa32 	bl	800e358 <__mdiff>
 800eef4:	4604      	mov	r4, r0
 800eef6:	2800      	cmp	r0, #0
 800eef8:	f43f ae3d 	beq.w	800eb76 <_strtod_l+0x43e>
 800eefc:	68c3      	ldr	r3, [r0, #12]
 800eefe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef00:	2300      	movs	r3, #0
 800ef02:	60c3      	str	r3, [r0, #12]
 800ef04:	4641      	mov	r1, r8
 800ef06:	f7ff fa0b 	bl	800e320 <__mcmp>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	da46      	bge.n	800ef9c <_strtod_l+0x864>
 800ef0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef10:	ea53 030a 	orrs.w	r3, r3, sl
 800ef14:	d16c      	bne.n	800eff0 <_strtod_l+0x8b8>
 800ef16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d168      	bne.n	800eff0 <_strtod_l+0x8b8>
 800ef1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef22:	0d1b      	lsrs	r3, r3, #20
 800ef24:	051b      	lsls	r3, r3, #20
 800ef26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef2a:	d961      	bls.n	800eff0 <_strtod_l+0x8b8>
 800ef2c:	6963      	ldr	r3, [r4, #20]
 800ef2e:	b913      	cbnz	r3, 800ef36 <_strtod_l+0x7fe>
 800ef30:	6923      	ldr	r3, [r4, #16]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	dd5c      	ble.n	800eff0 <_strtod_l+0x8b8>
 800ef36:	4621      	mov	r1, r4
 800ef38:	2201      	movs	r2, #1
 800ef3a:	9805      	ldr	r0, [sp, #20]
 800ef3c:	f7ff f984 	bl	800e248 <__lshift>
 800ef40:	4641      	mov	r1, r8
 800ef42:	4604      	mov	r4, r0
 800ef44:	f7ff f9ec 	bl	800e320 <__mcmp>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	dd51      	ble.n	800eff0 <_strtod_l+0x8b8>
 800ef4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef50:	9a08      	ldr	r2, [sp, #32]
 800ef52:	0d1b      	lsrs	r3, r3, #20
 800ef54:	051b      	lsls	r3, r3, #20
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	d06b      	beq.n	800f032 <_strtod_l+0x8fa>
 800ef5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef5e:	d868      	bhi.n	800f032 <_strtod_l+0x8fa>
 800ef60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ef64:	f67f ae9d 	bls.w	800eca2 <_strtod_l+0x56a>
 800ef68:	4b0a      	ldr	r3, [pc, #40]	@ (800ef94 <_strtod_l+0x85c>)
 800ef6a:	4650      	mov	r0, sl
 800ef6c:	4659      	mov	r1, fp
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f7f1 fb4a 	bl	8000608 <__aeabi_dmul>
 800ef74:	4b08      	ldr	r3, [pc, #32]	@ (800ef98 <_strtod_l+0x860>)
 800ef76:	400b      	ands	r3, r1
 800ef78:	4682      	mov	sl, r0
 800ef7a:	468b      	mov	fp, r1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f47f ae05 	bne.w	800eb8c <_strtod_l+0x454>
 800ef82:	9a05      	ldr	r2, [sp, #20]
 800ef84:	2322      	movs	r3, #34	@ 0x22
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	e600      	b.n	800eb8c <_strtod_l+0x454>
 800ef8a:	bf00      	nop
 800ef8c:	08010868 	.word	0x08010868
 800ef90:	fffffc02 	.word	0xfffffc02
 800ef94:	39500000 	.word	0x39500000
 800ef98:	7ff00000 	.word	0x7ff00000
 800ef9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800efa0:	d165      	bne.n	800f06e <_strtod_l+0x936>
 800efa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800efa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efa8:	b35a      	cbz	r2, 800f002 <_strtod_l+0x8ca>
 800efaa:	4a9f      	ldr	r2, [pc, #636]	@ (800f228 <_strtod_l+0xaf0>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d12b      	bne.n	800f008 <_strtod_l+0x8d0>
 800efb0:	9b08      	ldr	r3, [sp, #32]
 800efb2:	4651      	mov	r1, sl
 800efb4:	b303      	cbz	r3, 800eff8 <_strtod_l+0x8c0>
 800efb6:	4b9d      	ldr	r3, [pc, #628]	@ (800f22c <_strtod_l+0xaf4>)
 800efb8:	465a      	mov	r2, fp
 800efba:	4013      	ands	r3, r2
 800efbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800efc0:	f04f 32ff 	mov.w	r2, #4294967295
 800efc4:	d81b      	bhi.n	800effe <_strtod_l+0x8c6>
 800efc6:	0d1b      	lsrs	r3, r3, #20
 800efc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800efcc:	fa02 f303 	lsl.w	r3, r2, r3
 800efd0:	4299      	cmp	r1, r3
 800efd2:	d119      	bne.n	800f008 <_strtod_l+0x8d0>
 800efd4:	4b96      	ldr	r3, [pc, #600]	@ (800f230 <_strtod_l+0xaf8>)
 800efd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efd8:	429a      	cmp	r2, r3
 800efda:	d102      	bne.n	800efe2 <_strtod_l+0x8aa>
 800efdc:	3101      	adds	r1, #1
 800efde:	f43f adca 	beq.w	800eb76 <_strtod_l+0x43e>
 800efe2:	4b92      	ldr	r3, [pc, #584]	@ (800f22c <_strtod_l+0xaf4>)
 800efe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efe6:	401a      	ands	r2, r3
 800efe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800efec:	f04f 0a00 	mov.w	sl, #0
 800eff0:	9b08      	ldr	r3, [sp, #32]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1b8      	bne.n	800ef68 <_strtod_l+0x830>
 800eff6:	e5c9      	b.n	800eb8c <_strtod_l+0x454>
 800eff8:	f04f 33ff 	mov.w	r3, #4294967295
 800effc:	e7e8      	b.n	800efd0 <_strtod_l+0x898>
 800effe:	4613      	mov	r3, r2
 800f000:	e7e6      	b.n	800efd0 <_strtod_l+0x898>
 800f002:	ea53 030a 	orrs.w	r3, r3, sl
 800f006:	d0a1      	beq.n	800ef4c <_strtod_l+0x814>
 800f008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f00a:	b1db      	cbz	r3, 800f044 <_strtod_l+0x90c>
 800f00c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f00e:	4213      	tst	r3, r2
 800f010:	d0ee      	beq.n	800eff0 <_strtod_l+0x8b8>
 800f012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f014:	9a08      	ldr	r2, [sp, #32]
 800f016:	4650      	mov	r0, sl
 800f018:	4659      	mov	r1, fp
 800f01a:	b1bb      	cbz	r3, 800f04c <_strtod_l+0x914>
 800f01c:	f7ff fb6e 	bl	800e6fc <sulp>
 800f020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f024:	ec53 2b10 	vmov	r2, r3, d0
 800f028:	f7f1 f938 	bl	800029c <__adddf3>
 800f02c:	4682      	mov	sl, r0
 800f02e:	468b      	mov	fp, r1
 800f030:	e7de      	b.n	800eff0 <_strtod_l+0x8b8>
 800f032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f03a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f03e:	f04f 3aff 	mov.w	sl, #4294967295
 800f042:	e7d5      	b.n	800eff0 <_strtod_l+0x8b8>
 800f044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f046:	ea13 0f0a 	tst.w	r3, sl
 800f04a:	e7e1      	b.n	800f010 <_strtod_l+0x8d8>
 800f04c:	f7ff fb56 	bl	800e6fc <sulp>
 800f050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f054:	ec53 2b10 	vmov	r2, r3, d0
 800f058:	f7f1 f91e 	bl	8000298 <__aeabi_dsub>
 800f05c:	2200      	movs	r2, #0
 800f05e:	2300      	movs	r3, #0
 800f060:	4682      	mov	sl, r0
 800f062:	468b      	mov	fp, r1
 800f064:	f7f1 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800f068:	2800      	cmp	r0, #0
 800f06a:	d0c1      	beq.n	800eff0 <_strtod_l+0x8b8>
 800f06c:	e619      	b.n	800eca2 <_strtod_l+0x56a>
 800f06e:	4641      	mov	r1, r8
 800f070:	4620      	mov	r0, r4
 800f072:	f7ff facd 	bl	800e610 <__ratio>
 800f076:	ec57 6b10 	vmov	r6, r7, d0
 800f07a:	2200      	movs	r2, #0
 800f07c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	f7f1 fd3c 	bl	8000b00 <__aeabi_dcmple>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d06f      	beq.n	800f16c <_strtod_l+0xa34>
 800f08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d17a      	bne.n	800f188 <_strtod_l+0xa50>
 800f092:	f1ba 0f00 	cmp.w	sl, #0
 800f096:	d158      	bne.n	800f14a <_strtod_l+0xa12>
 800f098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d15a      	bne.n	800f158 <_strtod_l+0xa20>
 800f0a2:	4b64      	ldr	r3, [pc, #400]	@ (800f234 <_strtod_l+0xafc>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	f7f1 fd1f 	bl	8000aec <__aeabi_dcmplt>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d159      	bne.n	800f166 <_strtod_l+0xa2e>
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	4b60      	ldr	r3, [pc, #384]	@ (800f238 <_strtod_l+0xb00>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f7f1 faa5 	bl	8000608 <__aeabi_dmul>
 800f0be:	4606      	mov	r6, r0
 800f0c0:	460f      	mov	r7, r1
 800f0c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f0c6:	9606      	str	r6, [sp, #24]
 800f0c8:	9307      	str	r3, [sp, #28]
 800f0ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0ce:	4d57      	ldr	r5, [pc, #348]	@ (800f22c <_strtod_l+0xaf4>)
 800f0d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0d6:	401d      	ands	r5, r3
 800f0d8:	4b58      	ldr	r3, [pc, #352]	@ (800f23c <_strtod_l+0xb04>)
 800f0da:	429d      	cmp	r5, r3
 800f0dc:	f040 80b2 	bne.w	800f244 <_strtod_l+0xb0c>
 800f0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f0e6:	ec4b ab10 	vmov	d0, sl, fp
 800f0ea:	f7ff f9c9 	bl	800e480 <__ulp>
 800f0ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0f2:	ec51 0b10 	vmov	r0, r1, d0
 800f0f6:	f7f1 fa87 	bl	8000608 <__aeabi_dmul>
 800f0fa:	4652      	mov	r2, sl
 800f0fc:	465b      	mov	r3, fp
 800f0fe:	f7f1 f8cd 	bl	800029c <__adddf3>
 800f102:	460b      	mov	r3, r1
 800f104:	4949      	ldr	r1, [pc, #292]	@ (800f22c <_strtod_l+0xaf4>)
 800f106:	4a4e      	ldr	r2, [pc, #312]	@ (800f240 <_strtod_l+0xb08>)
 800f108:	4019      	ands	r1, r3
 800f10a:	4291      	cmp	r1, r2
 800f10c:	4682      	mov	sl, r0
 800f10e:	d942      	bls.n	800f196 <_strtod_l+0xa5e>
 800f110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f112:	4b47      	ldr	r3, [pc, #284]	@ (800f230 <_strtod_l+0xaf8>)
 800f114:	429a      	cmp	r2, r3
 800f116:	d103      	bne.n	800f120 <_strtod_l+0x9e8>
 800f118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f11a:	3301      	adds	r3, #1
 800f11c:	f43f ad2b 	beq.w	800eb76 <_strtod_l+0x43e>
 800f120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f230 <_strtod_l+0xaf8>
 800f124:	f04f 3aff 	mov.w	sl, #4294967295
 800f128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f12a:	9805      	ldr	r0, [sp, #20]
 800f12c:	f7fe fe74 	bl	800de18 <_Bfree>
 800f130:	9805      	ldr	r0, [sp, #20]
 800f132:	4649      	mov	r1, r9
 800f134:	f7fe fe70 	bl	800de18 <_Bfree>
 800f138:	9805      	ldr	r0, [sp, #20]
 800f13a:	4641      	mov	r1, r8
 800f13c:	f7fe fe6c 	bl	800de18 <_Bfree>
 800f140:	9805      	ldr	r0, [sp, #20]
 800f142:	4621      	mov	r1, r4
 800f144:	f7fe fe68 	bl	800de18 <_Bfree>
 800f148:	e618      	b.n	800ed7c <_strtod_l+0x644>
 800f14a:	f1ba 0f01 	cmp.w	sl, #1
 800f14e:	d103      	bne.n	800f158 <_strtod_l+0xa20>
 800f150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f152:	2b00      	cmp	r3, #0
 800f154:	f43f ada5 	beq.w	800eca2 <_strtod_l+0x56a>
 800f158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f208 <_strtod_l+0xad0>
 800f15c:	4f35      	ldr	r7, [pc, #212]	@ (800f234 <_strtod_l+0xafc>)
 800f15e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f162:	2600      	movs	r6, #0
 800f164:	e7b1      	b.n	800f0ca <_strtod_l+0x992>
 800f166:	4f34      	ldr	r7, [pc, #208]	@ (800f238 <_strtod_l+0xb00>)
 800f168:	2600      	movs	r6, #0
 800f16a:	e7aa      	b.n	800f0c2 <_strtod_l+0x98a>
 800f16c:	4b32      	ldr	r3, [pc, #200]	@ (800f238 <_strtod_l+0xb00>)
 800f16e:	4630      	mov	r0, r6
 800f170:	4639      	mov	r1, r7
 800f172:	2200      	movs	r2, #0
 800f174:	f7f1 fa48 	bl	8000608 <__aeabi_dmul>
 800f178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f17a:	4606      	mov	r6, r0
 800f17c:	460f      	mov	r7, r1
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d09f      	beq.n	800f0c2 <_strtod_l+0x98a>
 800f182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f186:	e7a0      	b.n	800f0ca <_strtod_l+0x992>
 800f188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f210 <_strtod_l+0xad8>
 800f18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f190:	ec57 6b17 	vmov	r6, r7, d7
 800f194:	e799      	b.n	800f0ca <_strtod_l+0x992>
 800f196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f19a:	9b08      	ldr	r3, [sp, #32]
 800f19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1c1      	bne.n	800f128 <_strtod_l+0x9f0>
 800f1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1a8:	0d1b      	lsrs	r3, r3, #20
 800f1aa:	051b      	lsls	r3, r3, #20
 800f1ac:	429d      	cmp	r5, r3
 800f1ae:	d1bb      	bne.n	800f128 <_strtod_l+0x9f0>
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	4639      	mov	r1, r7
 800f1b4:	f7f1 fd88 	bl	8000cc8 <__aeabi_d2lz>
 800f1b8:	f7f1 f9f8 	bl	80005ac <__aeabi_l2d>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	4639      	mov	r1, r7
 800f1c4:	f7f1 f868 	bl	8000298 <__aeabi_dsub>
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f1d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1d6:	ea46 060a 	orr.w	r6, r6, sl
 800f1da:	431e      	orrs	r6, r3
 800f1dc:	d06f      	beq.n	800f2be <_strtod_l+0xb86>
 800f1de:	a30e      	add	r3, pc, #56	@ (adr r3, 800f218 <_strtod_l+0xae0>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 fc82 	bl	8000aec <__aeabi_dcmplt>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	f47f accf 	bne.w	800eb8c <_strtod_l+0x454>
 800f1ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800f220 <_strtod_l+0xae8>)
 800f1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1f8:	f7f1 fc96 	bl	8000b28 <__aeabi_dcmpgt>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d093      	beq.n	800f128 <_strtod_l+0x9f0>
 800f200:	e4c4      	b.n	800eb8c <_strtod_l+0x454>
 800f202:	bf00      	nop
 800f204:	f3af 8000 	nop.w
 800f208:	00000000 	.word	0x00000000
 800f20c:	bff00000 	.word	0xbff00000
 800f210:	00000000 	.word	0x00000000
 800f214:	3ff00000 	.word	0x3ff00000
 800f218:	94a03595 	.word	0x94a03595
 800f21c:	3fdfffff 	.word	0x3fdfffff
 800f220:	35afe535 	.word	0x35afe535
 800f224:	3fe00000 	.word	0x3fe00000
 800f228:	000fffff 	.word	0x000fffff
 800f22c:	7ff00000 	.word	0x7ff00000
 800f230:	7fefffff 	.word	0x7fefffff
 800f234:	3ff00000 	.word	0x3ff00000
 800f238:	3fe00000 	.word	0x3fe00000
 800f23c:	7fe00000 	.word	0x7fe00000
 800f240:	7c9fffff 	.word	0x7c9fffff
 800f244:	9b08      	ldr	r3, [sp, #32]
 800f246:	b323      	cbz	r3, 800f292 <_strtod_l+0xb5a>
 800f248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f24c:	d821      	bhi.n	800f292 <_strtod_l+0xb5a>
 800f24e:	a328      	add	r3, pc, #160	@ (adr r3, 800f2f0 <_strtod_l+0xbb8>)
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	4630      	mov	r0, r6
 800f256:	4639      	mov	r1, r7
 800f258:	f7f1 fc52 	bl	8000b00 <__aeabi_dcmple>
 800f25c:	b1a0      	cbz	r0, 800f288 <_strtod_l+0xb50>
 800f25e:	4639      	mov	r1, r7
 800f260:	4630      	mov	r0, r6
 800f262:	f7f1 fca9 	bl	8000bb8 <__aeabi_d2uiz>
 800f266:	2801      	cmp	r0, #1
 800f268:	bf38      	it	cc
 800f26a:	2001      	movcc	r0, #1
 800f26c:	f7f1 f952 	bl	8000514 <__aeabi_ui2d>
 800f270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f272:	4606      	mov	r6, r0
 800f274:	460f      	mov	r7, r1
 800f276:	b9fb      	cbnz	r3, 800f2b8 <_strtod_l+0xb80>
 800f278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f27c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f27e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f28a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f28e:	1b5b      	subs	r3, r3, r5
 800f290:	9311      	str	r3, [sp, #68]	@ 0x44
 800f292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f29a:	f7ff f8f1 	bl	800e480 <__ulp>
 800f29e:	4650      	mov	r0, sl
 800f2a0:	ec53 2b10 	vmov	r2, r3, d0
 800f2a4:	4659      	mov	r1, fp
 800f2a6:	f7f1 f9af 	bl	8000608 <__aeabi_dmul>
 800f2aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f2ae:	f7f0 fff5 	bl	800029c <__adddf3>
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	468b      	mov	fp, r1
 800f2b6:	e770      	b.n	800f19a <_strtod_l+0xa62>
 800f2b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f2bc:	e7e0      	b.n	800f280 <_strtod_l+0xb48>
 800f2be:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2f8 <_strtod_l+0xbc0>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f7f1 fc12 	bl	8000aec <__aeabi_dcmplt>
 800f2c8:	e798      	b.n	800f1fc <_strtod_l+0xac4>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	f7ff ba6d 	b.w	800e7b2 <_strtod_l+0x7a>
 800f2d8:	2a65      	cmp	r2, #101	@ 0x65
 800f2da:	f43f ab66 	beq.w	800e9aa <_strtod_l+0x272>
 800f2de:	2a45      	cmp	r2, #69	@ 0x45
 800f2e0:	f43f ab63 	beq.w	800e9aa <_strtod_l+0x272>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	f7ff bb9e 	b.w	800ea26 <_strtod_l+0x2ee>
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	ffc00000 	.word	0xffc00000
 800f2f4:	41dfffff 	.word	0x41dfffff
 800f2f8:	94a03595 	.word	0x94a03595
 800f2fc:	3fcfffff 	.word	0x3fcfffff

0800f300 <_strtod_r>:
 800f300:	4b01      	ldr	r3, [pc, #4]	@ (800f308 <_strtod_r+0x8>)
 800f302:	f7ff ba19 	b.w	800e738 <_strtod_l>
 800f306:	bf00      	nop
 800f308:	2000015c 	.word	0x2000015c

0800f30c <_strtol_l.constprop.0>:
 800f30c:	2b24      	cmp	r3, #36	@ 0x24
 800f30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f312:	4686      	mov	lr, r0
 800f314:	4690      	mov	r8, r2
 800f316:	d801      	bhi.n	800f31c <_strtol_l.constprop.0+0x10>
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d106      	bne.n	800f32a <_strtol_l.constprop.0+0x1e>
 800f31c:	f7fd fdbc 	bl	800ce98 <__errno>
 800f320:	2316      	movs	r3, #22
 800f322:	6003      	str	r3, [r0, #0]
 800f324:	2000      	movs	r0, #0
 800f326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32a:	4834      	ldr	r0, [pc, #208]	@ (800f3fc <_strtol_l.constprop.0+0xf0>)
 800f32c:	460d      	mov	r5, r1
 800f32e:	462a      	mov	r2, r5
 800f330:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f334:	5d06      	ldrb	r6, [r0, r4]
 800f336:	f016 0608 	ands.w	r6, r6, #8
 800f33a:	d1f8      	bne.n	800f32e <_strtol_l.constprop.0+0x22>
 800f33c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f33e:	d12d      	bne.n	800f39c <_strtol_l.constprop.0+0x90>
 800f340:	782c      	ldrb	r4, [r5, #0]
 800f342:	2601      	movs	r6, #1
 800f344:	1c95      	adds	r5, r2, #2
 800f346:	f033 0210 	bics.w	r2, r3, #16
 800f34a:	d109      	bne.n	800f360 <_strtol_l.constprop.0+0x54>
 800f34c:	2c30      	cmp	r4, #48	@ 0x30
 800f34e:	d12a      	bne.n	800f3a6 <_strtol_l.constprop.0+0x9a>
 800f350:	782a      	ldrb	r2, [r5, #0]
 800f352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f356:	2a58      	cmp	r2, #88	@ 0x58
 800f358:	d125      	bne.n	800f3a6 <_strtol_l.constprop.0+0x9a>
 800f35a:	786c      	ldrb	r4, [r5, #1]
 800f35c:	2310      	movs	r3, #16
 800f35e:	3502      	adds	r5, #2
 800f360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f364:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f368:	2200      	movs	r2, #0
 800f36a:	fbbc f9f3 	udiv	r9, ip, r3
 800f36e:	4610      	mov	r0, r2
 800f370:	fb03 ca19 	mls	sl, r3, r9, ip
 800f374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f378:	2f09      	cmp	r7, #9
 800f37a:	d81b      	bhi.n	800f3b4 <_strtol_l.constprop.0+0xa8>
 800f37c:	463c      	mov	r4, r7
 800f37e:	42a3      	cmp	r3, r4
 800f380:	dd27      	ble.n	800f3d2 <_strtol_l.constprop.0+0xc6>
 800f382:	1c57      	adds	r7, r2, #1
 800f384:	d007      	beq.n	800f396 <_strtol_l.constprop.0+0x8a>
 800f386:	4581      	cmp	r9, r0
 800f388:	d320      	bcc.n	800f3cc <_strtol_l.constprop.0+0xc0>
 800f38a:	d101      	bne.n	800f390 <_strtol_l.constprop.0+0x84>
 800f38c:	45a2      	cmp	sl, r4
 800f38e:	db1d      	blt.n	800f3cc <_strtol_l.constprop.0+0xc0>
 800f390:	fb00 4003 	mla	r0, r0, r3, r4
 800f394:	2201      	movs	r2, #1
 800f396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f39a:	e7eb      	b.n	800f374 <_strtol_l.constprop.0+0x68>
 800f39c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f39e:	bf04      	itt	eq
 800f3a0:	782c      	ldrbeq	r4, [r5, #0]
 800f3a2:	1c95      	addeq	r5, r2, #2
 800f3a4:	e7cf      	b.n	800f346 <_strtol_l.constprop.0+0x3a>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1da      	bne.n	800f360 <_strtol_l.constprop.0+0x54>
 800f3aa:	2c30      	cmp	r4, #48	@ 0x30
 800f3ac:	bf0c      	ite	eq
 800f3ae:	2308      	moveq	r3, #8
 800f3b0:	230a      	movne	r3, #10
 800f3b2:	e7d5      	b.n	800f360 <_strtol_l.constprop.0+0x54>
 800f3b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f3b8:	2f19      	cmp	r7, #25
 800f3ba:	d801      	bhi.n	800f3c0 <_strtol_l.constprop.0+0xb4>
 800f3bc:	3c37      	subs	r4, #55	@ 0x37
 800f3be:	e7de      	b.n	800f37e <_strtol_l.constprop.0+0x72>
 800f3c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f3c4:	2f19      	cmp	r7, #25
 800f3c6:	d804      	bhi.n	800f3d2 <_strtol_l.constprop.0+0xc6>
 800f3c8:	3c57      	subs	r4, #87	@ 0x57
 800f3ca:	e7d8      	b.n	800f37e <_strtol_l.constprop.0+0x72>
 800f3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d0:	e7e1      	b.n	800f396 <_strtol_l.constprop.0+0x8a>
 800f3d2:	1c53      	adds	r3, r2, #1
 800f3d4:	d108      	bne.n	800f3e8 <_strtol_l.constprop.0+0xdc>
 800f3d6:	2322      	movs	r3, #34	@ 0x22
 800f3d8:	f8ce 3000 	str.w	r3, [lr]
 800f3dc:	4660      	mov	r0, ip
 800f3de:	f1b8 0f00 	cmp.w	r8, #0
 800f3e2:	d0a0      	beq.n	800f326 <_strtol_l.constprop.0+0x1a>
 800f3e4:	1e69      	subs	r1, r5, #1
 800f3e6:	e006      	b.n	800f3f6 <_strtol_l.constprop.0+0xea>
 800f3e8:	b106      	cbz	r6, 800f3ec <_strtol_l.constprop.0+0xe0>
 800f3ea:	4240      	negs	r0, r0
 800f3ec:	f1b8 0f00 	cmp.w	r8, #0
 800f3f0:	d099      	beq.n	800f326 <_strtol_l.constprop.0+0x1a>
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	d1f6      	bne.n	800f3e4 <_strtol_l.constprop.0+0xd8>
 800f3f6:	f8c8 1000 	str.w	r1, [r8]
 800f3fa:	e794      	b.n	800f326 <_strtol_l.constprop.0+0x1a>
 800f3fc:	08010891 	.word	0x08010891

0800f400 <_strtol_r>:
 800f400:	f7ff bf84 	b.w	800f30c <_strtol_l.constprop.0>

0800f404 <__ssputs_r>:
 800f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f408:	688e      	ldr	r6, [r1, #8]
 800f40a:	461f      	mov	r7, r3
 800f40c:	42be      	cmp	r6, r7
 800f40e:	680b      	ldr	r3, [r1, #0]
 800f410:	4682      	mov	sl, r0
 800f412:	460c      	mov	r4, r1
 800f414:	4690      	mov	r8, r2
 800f416:	d82d      	bhi.n	800f474 <__ssputs_r+0x70>
 800f418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f41c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f420:	d026      	beq.n	800f470 <__ssputs_r+0x6c>
 800f422:	6965      	ldr	r5, [r4, #20]
 800f424:	6909      	ldr	r1, [r1, #16]
 800f426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f42a:	eba3 0901 	sub.w	r9, r3, r1
 800f42e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f432:	1c7b      	adds	r3, r7, #1
 800f434:	444b      	add	r3, r9
 800f436:	106d      	asrs	r5, r5, #1
 800f438:	429d      	cmp	r5, r3
 800f43a:	bf38      	it	cc
 800f43c:	461d      	movcc	r5, r3
 800f43e:	0553      	lsls	r3, r2, #21
 800f440:	d527      	bpl.n	800f492 <__ssputs_r+0x8e>
 800f442:	4629      	mov	r1, r5
 800f444:	f7fe fc1c 	bl	800dc80 <_malloc_r>
 800f448:	4606      	mov	r6, r0
 800f44a:	b360      	cbz	r0, 800f4a6 <__ssputs_r+0xa2>
 800f44c:	6921      	ldr	r1, [r4, #16]
 800f44e:	464a      	mov	r2, r9
 800f450:	f000 fa18 	bl	800f884 <memcpy>
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f45e:	81a3      	strh	r3, [r4, #12]
 800f460:	6126      	str	r6, [r4, #16]
 800f462:	6165      	str	r5, [r4, #20]
 800f464:	444e      	add	r6, r9
 800f466:	eba5 0509 	sub.w	r5, r5, r9
 800f46a:	6026      	str	r6, [r4, #0]
 800f46c:	60a5      	str	r5, [r4, #8]
 800f46e:	463e      	mov	r6, r7
 800f470:	42be      	cmp	r6, r7
 800f472:	d900      	bls.n	800f476 <__ssputs_r+0x72>
 800f474:	463e      	mov	r6, r7
 800f476:	6820      	ldr	r0, [r4, #0]
 800f478:	4632      	mov	r2, r6
 800f47a:	4641      	mov	r1, r8
 800f47c:	f000 f9c6 	bl	800f80c <memmove>
 800f480:	68a3      	ldr	r3, [r4, #8]
 800f482:	1b9b      	subs	r3, r3, r6
 800f484:	60a3      	str	r3, [r4, #8]
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	4433      	add	r3, r6
 800f48a:	6023      	str	r3, [r4, #0]
 800f48c:	2000      	movs	r0, #0
 800f48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f492:	462a      	mov	r2, r5
 800f494:	f000 fd89 	bl	800ffaa <_realloc_r>
 800f498:	4606      	mov	r6, r0
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d1e0      	bne.n	800f460 <__ssputs_r+0x5c>
 800f49e:	6921      	ldr	r1, [r4, #16]
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	f7fe fb79 	bl	800db98 <_free_r>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	f8ca 3000 	str.w	r3, [sl]
 800f4ac:	89a3      	ldrh	r3, [r4, #12]
 800f4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4b2:	81a3      	strh	r3, [r4, #12]
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b8:	e7e9      	b.n	800f48e <__ssputs_r+0x8a>
	...

0800f4bc <_svfiprintf_r>:
 800f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c0:	4698      	mov	r8, r3
 800f4c2:	898b      	ldrh	r3, [r1, #12]
 800f4c4:	061b      	lsls	r3, r3, #24
 800f4c6:	b09d      	sub	sp, #116	@ 0x74
 800f4c8:	4607      	mov	r7, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	4614      	mov	r4, r2
 800f4ce:	d510      	bpl.n	800f4f2 <_svfiprintf_r+0x36>
 800f4d0:	690b      	ldr	r3, [r1, #16]
 800f4d2:	b973      	cbnz	r3, 800f4f2 <_svfiprintf_r+0x36>
 800f4d4:	2140      	movs	r1, #64	@ 0x40
 800f4d6:	f7fe fbd3 	bl	800dc80 <_malloc_r>
 800f4da:	6028      	str	r0, [r5, #0]
 800f4dc:	6128      	str	r0, [r5, #16]
 800f4de:	b930      	cbnz	r0, 800f4ee <_svfiprintf_r+0x32>
 800f4e0:	230c      	movs	r3, #12
 800f4e2:	603b      	str	r3, [r7, #0]
 800f4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e8:	b01d      	add	sp, #116	@ 0x74
 800f4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ee:	2340      	movs	r3, #64	@ 0x40
 800f4f0:	616b      	str	r3, [r5, #20]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4f6:	2320      	movs	r3, #32
 800f4f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f500:	2330      	movs	r3, #48	@ 0x30
 800f502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f6a0 <_svfiprintf_r+0x1e4>
 800f506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f50a:	f04f 0901 	mov.w	r9, #1
 800f50e:	4623      	mov	r3, r4
 800f510:	469a      	mov	sl, r3
 800f512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f516:	b10a      	cbz	r2, 800f51c <_svfiprintf_r+0x60>
 800f518:	2a25      	cmp	r2, #37	@ 0x25
 800f51a:	d1f9      	bne.n	800f510 <_svfiprintf_r+0x54>
 800f51c:	ebba 0b04 	subs.w	fp, sl, r4
 800f520:	d00b      	beq.n	800f53a <_svfiprintf_r+0x7e>
 800f522:	465b      	mov	r3, fp
 800f524:	4622      	mov	r2, r4
 800f526:	4629      	mov	r1, r5
 800f528:	4638      	mov	r0, r7
 800f52a:	f7ff ff6b 	bl	800f404 <__ssputs_r>
 800f52e:	3001      	adds	r0, #1
 800f530:	f000 80a7 	beq.w	800f682 <_svfiprintf_r+0x1c6>
 800f534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f536:	445a      	add	r2, fp
 800f538:	9209      	str	r2, [sp, #36]	@ 0x24
 800f53a:	f89a 3000 	ldrb.w	r3, [sl]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 809f 	beq.w	800f682 <_svfiprintf_r+0x1c6>
 800f544:	2300      	movs	r3, #0
 800f546:	f04f 32ff 	mov.w	r2, #4294967295
 800f54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f54e:	f10a 0a01 	add.w	sl, sl, #1
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	9307      	str	r3, [sp, #28]
 800f556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f55a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f55c:	4654      	mov	r4, sl
 800f55e:	2205      	movs	r2, #5
 800f560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f564:	484e      	ldr	r0, [pc, #312]	@ (800f6a0 <_svfiprintf_r+0x1e4>)
 800f566:	f7f0 fe3b 	bl	80001e0 <memchr>
 800f56a:	9a04      	ldr	r2, [sp, #16]
 800f56c:	b9d8      	cbnz	r0, 800f5a6 <_svfiprintf_r+0xea>
 800f56e:	06d0      	lsls	r0, r2, #27
 800f570:	bf44      	itt	mi
 800f572:	2320      	movmi	r3, #32
 800f574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f578:	0711      	lsls	r1, r2, #28
 800f57a:	bf44      	itt	mi
 800f57c:	232b      	movmi	r3, #43	@ 0x2b
 800f57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f582:	f89a 3000 	ldrb.w	r3, [sl]
 800f586:	2b2a      	cmp	r3, #42	@ 0x2a
 800f588:	d015      	beq.n	800f5b6 <_svfiprintf_r+0xfa>
 800f58a:	9a07      	ldr	r2, [sp, #28]
 800f58c:	4654      	mov	r4, sl
 800f58e:	2000      	movs	r0, #0
 800f590:	f04f 0c0a 	mov.w	ip, #10
 800f594:	4621      	mov	r1, r4
 800f596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f59a:	3b30      	subs	r3, #48	@ 0x30
 800f59c:	2b09      	cmp	r3, #9
 800f59e:	d94b      	bls.n	800f638 <_svfiprintf_r+0x17c>
 800f5a0:	b1b0      	cbz	r0, 800f5d0 <_svfiprintf_r+0x114>
 800f5a2:	9207      	str	r2, [sp, #28]
 800f5a4:	e014      	b.n	800f5d0 <_svfiprintf_r+0x114>
 800f5a6:	eba0 0308 	sub.w	r3, r0, r8
 800f5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	9304      	str	r3, [sp, #16]
 800f5b2:	46a2      	mov	sl, r4
 800f5b4:	e7d2      	b.n	800f55c <_svfiprintf_r+0xa0>
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	1d19      	adds	r1, r3, #4
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	9103      	str	r1, [sp, #12]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	bfbb      	ittet	lt
 800f5c2:	425b      	neglt	r3, r3
 800f5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f5c8:	9307      	strge	r3, [sp, #28]
 800f5ca:	9307      	strlt	r3, [sp, #28]
 800f5cc:	bfb8      	it	lt
 800f5ce:	9204      	strlt	r2, [sp, #16]
 800f5d0:	7823      	ldrb	r3, [r4, #0]
 800f5d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5d4:	d10a      	bne.n	800f5ec <_svfiprintf_r+0x130>
 800f5d6:	7863      	ldrb	r3, [r4, #1]
 800f5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5da:	d132      	bne.n	800f642 <_svfiprintf_r+0x186>
 800f5dc:	9b03      	ldr	r3, [sp, #12]
 800f5de:	1d1a      	adds	r2, r3, #4
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	9203      	str	r2, [sp, #12]
 800f5e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5e8:	3402      	adds	r4, #2
 800f5ea:	9305      	str	r3, [sp, #20]
 800f5ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f6b0 <_svfiprintf_r+0x1f4>
 800f5f0:	7821      	ldrb	r1, [r4, #0]
 800f5f2:	2203      	movs	r2, #3
 800f5f4:	4650      	mov	r0, sl
 800f5f6:	f7f0 fdf3 	bl	80001e0 <memchr>
 800f5fa:	b138      	cbz	r0, 800f60c <_svfiprintf_r+0x150>
 800f5fc:	9b04      	ldr	r3, [sp, #16]
 800f5fe:	eba0 000a 	sub.w	r0, r0, sl
 800f602:	2240      	movs	r2, #64	@ 0x40
 800f604:	4082      	lsls	r2, r0
 800f606:	4313      	orrs	r3, r2
 800f608:	3401      	adds	r4, #1
 800f60a:	9304      	str	r3, [sp, #16]
 800f60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f610:	4824      	ldr	r0, [pc, #144]	@ (800f6a4 <_svfiprintf_r+0x1e8>)
 800f612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f616:	2206      	movs	r2, #6
 800f618:	f7f0 fde2 	bl	80001e0 <memchr>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d036      	beq.n	800f68e <_svfiprintf_r+0x1d2>
 800f620:	4b21      	ldr	r3, [pc, #132]	@ (800f6a8 <_svfiprintf_r+0x1ec>)
 800f622:	bb1b      	cbnz	r3, 800f66c <_svfiprintf_r+0x1b0>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	3307      	adds	r3, #7
 800f628:	f023 0307 	bic.w	r3, r3, #7
 800f62c:	3308      	adds	r3, #8
 800f62e:	9303      	str	r3, [sp, #12]
 800f630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f632:	4433      	add	r3, r6
 800f634:	9309      	str	r3, [sp, #36]	@ 0x24
 800f636:	e76a      	b.n	800f50e <_svfiprintf_r+0x52>
 800f638:	fb0c 3202 	mla	r2, ip, r2, r3
 800f63c:	460c      	mov	r4, r1
 800f63e:	2001      	movs	r0, #1
 800f640:	e7a8      	b.n	800f594 <_svfiprintf_r+0xd8>
 800f642:	2300      	movs	r3, #0
 800f644:	3401      	adds	r4, #1
 800f646:	9305      	str	r3, [sp, #20]
 800f648:	4619      	mov	r1, r3
 800f64a:	f04f 0c0a 	mov.w	ip, #10
 800f64e:	4620      	mov	r0, r4
 800f650:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f654:	3a30      	subs	r2, #48	@ 0x30
 800f656:	2a09      	cmp	r2, #9
 800f658:	d903      	bls.n	800f662 <_svfiprintf_r+0x1a6>
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0c6      	beq.n	800f5ec <_svfiprintf_r+0x130>
 800f65e:	9105      	str	r1, [sp, #20]
 800f660:	e7c4      	b.n	800f5ec <_svfiprintf_r+0x130>
 800f662:	fb0c 2101 	mla	r1, ip, r1, r2
 800f666:	4604      	mov	r4, r0
 800f668:	2301      	movs	r3, #1
 800f66a:	e7f0      	b.n	800f64e <_svfiprintf_r+0x192>
 800f66c:	ab03      	add	r3, sp, #12
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	462a      	mov	r2, r5
 800f672:	4b0e      	ldr	r3, [pc, #56]	@ (800f6ac <_svfiprintf_r+0x1f0>)
 800f674:	a904      	add	r1, sp, #16
 800f676:	4638      	mov	r0, r7
 800f678:	f7fc fcca 	bl	800c010 <_printf_float>
 800f67c:	1c42      	adds	r2, r0, #1
 800f67e:	4606      	mov	r6, r0
 800f680:	d1d6      	bne.n	800f630 <_svfiprintf_r+0x174>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	065b      	lsls	r3, r3, #25
 800f686:	f53f af2d 	bmi.w	800f4e4 <_svfiprintf_r+0x28>
 800f68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f68c:	e72c      	b.n	800f4e8 <_svfiprintf_r+0x2c>
 800f68e:	ab03      	add	r3, sp, #12
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	462a      	mov	r2, r5
 800f694:	4b05      	ldr	r3, [pc, #20]	@ (800f6ac <_svfiprintf_r+0x1f0>)
 800f696:	a904      	add	r1, sp, #16
 800f698:	4638      	mov	r0, r7
 800f69a:	f7fc ff51 	bl	800c540 <_printf_i>
 800f69e:	e7ed      	b.n	800f67c <_svfiprintf_r+0x1c0>
 800f6a0:	08010991 	.word	0x08010991
 800f6a4:	0801099b 	.word	0x0801099b
 800f6a8:	0800c011 	.word	0x0800c011
 800f6ac:	0800f405 	.word	0x0800f405
 800f6b0:	08010997 	.word	0x08010997

0800f6b4 <__sflush_r>:
 800f6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	0716      	lsls	r6, r2, #28
 800f6be:	4605      	mov	r5, r0
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	d454      	bmi.n	800f76e <__sflush_r+0xba>
 800f6c4:	684b      	ldr	r3, [r1, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	dc02      	bgt.n	800f6d0 <__sflush_r+0x1c>
 800f6ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	dd48      	ble.n	800f762 <__sflush_r+0xae>
 800f6d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6d2:	2e00      	cmp	r6, #0
 800f6d4:	d045      	beq.n	800f762 <__sflush_r+0xae>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6dc:	682f      	ldr	r7, [r5, #0]
 800f6de:	6a21      	ldr	r1, [r4, #32]
 800f6e0:	602b      	str	r3, [r5, #0]
 800f6e2:	d030      	beq.n	800f746 <__sflush_r+0x92>
 800f6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	0759      	lsls	r1, r3, #29
 800f6ea:	d505      	bpl.n	800f6f8 <__sflush_r+0x44>
 800f6ec:	6863      	ldr	r3, [r4, #4]
 800f6ee:	1ad2      	subs	r2, r2, r3
 800f6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6f2:	b10b      	cbz	r3, 800f6f8 <__sflush_r+0x44>
 800f6f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6f6:	1ad2      	subs	r2, r2, r3
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6fc:	6a21      	ldr	r1, [r4, #32]
 800f6fe:	4628      	mov	r0, r5
 800f700:	47b0      	blx	r6
 800f702:	1c43      	adds	r3, r0, #1
 800f704:	89a3      	ldrh	r3, [r4, #12]
 800f706:	d106      	bne.n	800f716 <__sflush_r+0x62>
 800f708:	6829      	ldr	r1, [r5, #0]
 800f70a:	291d      	cmp	r1, #29
 800f70c:	d82b      	bhi.n	800f766 <__sflush_r+0xb2>
 800f70e:	4a2a      	ldr	r2, [pc, #168]	@ (800f7b8 <__sflush_r+0x104>)
 800f710:	410a      	asrs	r2, r1
 800f712:	07d6      	lsls	r6, r2, #31
 800f714:	d427      	bmi.n	800f766 <__sflush_r+0xb2>
 800f716:	2200      	movs	r2, #0
 800f718:	6062      	str	r2, [r4, #4]
 800f71a:	04d9      	lsls	r1, r3, #19
 800f71c:	6922      	ldr	r2, [r4, #16]
 800f71e:	6022      	str	r2, [r4, #0]
 800f720:	d504      	bpl.n	800f72c <__sflush_r+0x78>
 800f722:	1c42      	adds	r2, r0, #1
 800f724:	d101      	bne.n	800f72a <__sflush_r+0x76>
 800f726:	682b      	ldr	r3, [r5, #0]
 800f728:	b903      	cbnz	r3, 800f72c <__sflush_r+0x78>
 800f72a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f72e:	602f      	str	r7, [r5, #0]
 800f730:	b1b9      	cbz	r1, 800f762 <__sflush_r+0xae>
 800f732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f736:	4299      	cmp	r1, r3
 800f738:	d002      	beq.n	800f740 <__sflush_r+0x8c>
 800f73a:	4628      	mov	r0, r5
 800f73c:	f7fe fa2c 	bl	800db98 <_free_r>
 800f740:	2300      	movs	r3, #0
 800f742:	6363      	str	r3, [r4, #52]	@ 0x34
 800f744:	e00d      	b.n	800f762 <__sflush_r+0xae>
 800f746:	2301      	movs	r3, #1
 800f748:	4628      	mov	r0, r5
 800f74a:	47b0      	blx	r6
 800f74c:	4602      	mov	r2, r0
 800f74e:	1c50      	adds	r0, r2, #1
 800f750:	d1c9      	bne.n	800f6e6 <__sflush_r+0x32>
 800f752:	682b      	ldr	r3, [r5, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0c6      	beq.n	800f6e6 <__sflush_r+0x32>
 800f758:	2b1d      	cmp	r3, #29
 800f75a:	d001      	beq.n	800f760 <__sflush_r+0xac>
 800f75c:	2b16      	cmp	r3, #22
 800f75e:	d11e      	bne.n	800f79e <__sflush_r+0xea>
 800f760:	602f      	str	r7, [r5, #0]
 800f762:	2000      	movs	r0, #0
 800f764:	e022      	b.n	800f7ac <__sflush_r+0xf8>
 800f766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76a:	b21b      	sxth	r3, r3
 800f76c:	e01b      	b.n	800f7a6 <__sflush_r+0xf2>
 800f76e:	690f      	ldr	r7, [r1, #16]
 800f770:	2f00      	cmp	r7, #0
 800f772:	d0f6      	beq.n	800f762 <__sflush_r+0xae>
 800f774:	0793      	lsls	r3, r2, #30
 800f776:	680e      	ldr	r6, [r1, #0]
 800f778:	bf08      	it	eq
 800f77a:	694b      	ldreq	r3, [r1, #20]
 800f77c:	600f      	str	r7, [r1, #0]
 800f77e:	bf18      	it	ne
 800f780:	2300      	movne	r3, #0
 800f782:	eba6 0807 	sub.w	r8, r6, r7
 800f786:	608b      	str	r3, [r1, #8]
 800f788:	f1b8 0f00 	cmp.w	r8, #0
 800f78c:	dde9      	ble.n	800f762 <__sflush_r+0xae>
 800f78e:	6a21      	ldr	r1, [r4, #32]
 800f790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f792:	4643      	mov	r3, r8
 800f794:	463a      	mov	r2, r7
 800f796:	4628      	mov	r0, r5
 800f798:	47b0      	blx	r6
 800f79a:	2800      	cmp	r0, #0
 800f79c:	dc08      	bgt.n	800f7b0 <__sflush_r+0xfc>
 800f79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b0:	4407      	add	r7, r0
 800f7b2:	eba8 0800 	sub.w	r8, r8, r0
 800f7b6:	e7e7      	b.n	800f788 <__sflush_r+0xd4>
 800f7b8:	dfbffffe 	.word	0xdfbffffe

0800f7bc <_fflush_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	690b      	ldr	r3, [r1, #16]
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	b913      	cbnz	r3, 800f7cc <_fflush_r+0x10>
 800f7c6:	2500      	movs	r5, #0
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	b118      	cbz	r0, 800f7d6 <_fflush_r+0x1a>
 800f7ce:	6a03      	ldr	r3, [r0, #32]
 800f7d0:	b90b      	cbnz	r3, 800f7d6 <_fflush_r+0x1a>
 800f7d2:	f7fd fa75 	bl	800ccc0 <__sinit>
 800f7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d0f3      	beq.n	800f7c6 <_fflush_r+0xa>
 800f7de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7e0:	07d0      	lsls	r0, r2, #31
 800f7e2:	d404      	bmi.n	800f7ee <_fflush_r+0x32>
 800f7e4:	0599      	lsls	r1, r3, #22
 800f7e6:	d402      	bmi.n	800f7ee <_fflush_r+0x32>
 800f7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ea:	f7fd fb80 	bl	800ceee <__retarget_lock_acquire_recursive>
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	f7ff ff5f 	bl	800f6b4 <__sflush_r>
 800f7f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7f8:	07da      	lsls	r2, r3, #31
 800f7fa:	4605      	mov	r5, r0
 800f7fc:	d4e4      	bmi.n	800f7c8 <_fflush_r+0xc>
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	059b      	lsls	r3, r3, #22
 800f802:	d4e1      	bmi.n	800f7c8 <_fflush_r+0xc>
 800f804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f806:	f7fd fb73 	bl	800cef0 <__retarget_lock_release_recursive>
 800f80a:	e7dd      	b.n	800f7c8 <_fflush_r+0xc>

0800f80c <memmove>:
 800f80c:	4288      	cmp	r0, r1
 800f80e:	b510      	push	{r4, lr}
 800f810:	eb01 0402 	add.w	r4, r1, r2
 800f814:	d902      	bls.n	800f81c <memmove+0x10>
 800f816:	4284      	cmp	r4, r0
 800f818:	4623      	mov	r3, r4
 800f81a:	d807      	bhi.n	800f82c <memmove+0x20>
 800f81c:	1e43      	subs	r3, r0, #1
 800f81e:	42a1      	cmp	r1, r4
 800f820:	d008      	beq.n	800f834 <memmove+0x28>
 800f822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f82a:	e7f8      	b.n	800f81e <memmove+0x12>
 800f82c:	4402      	add	r2, r0
 800f82e:	4601      	mov	r1, r0
 800f830:	428a      	cmp	r2, r1
 800f832:	d100      	bne.n	800f836 <memmove+0x2a>
 800f834:	bd10      	pop	{r4, pc}
 800f836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f83e:	e7f7      	b.n	800f830 <memmove+0x24>

0800f840 <strncmp>:
 800f840:	b510      	push	{r4, lr}
 800f842:	b16a      	cbz	r2, 800f860 <strncmp+0x20>
 800f844:	3901      	subs	r1, #1
 800f846:	1884      	adds	r4, r0, r2
 800f848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f84c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f850:	429a      	cmp	r2, r3
 800f852:	d103      	bne.n	800f85c <strncmp+0x1c>
 800f854:	42a0      	cmp	r0, r4
 800f856:	d001      	beq.n	800f85c <strncmp+0x1c>
 800f858:	2a00      	cmp	r2, #0
 800f85a:	d1f5      	bne.n	800f848 <strncmp+0x8>
 800f85c:	1ad0      	subs	r0, r2, r3
 800f85e:	bd10      	pop	{r4, pc}
 800f860:	4610      	mov	r0, r2
 800f862:	e7fc      	b.n	800f85e <strncmp+0x1e>

0800f864 <_sbrk_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d06      	ldr	r5, [pc, #24]	@ (800f880 <_sbrk_r+0x1c>)
 800f868:	2300      	movs	r3, #0
 800f86a:	4604      	mov	r4, r0
 800f86c:	4608      	mov	r0, r1
 800f86e:	602b      	str	r3, [r5, #0]
 800f870:	f7f2 f8f4 	bl	8001a5c <_sbrk>
 800f874:	1c43      	adds	r3, r0, #1
 800f876:	d102      	bne.n	800f87e <_sbrk_r+0x1a>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	b103      	cbz	r3, 800f87e <_sbrk_r+0x1a>
 800f87c:	6023      	str	r3, [r4, #0]
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	2000241c 	.word	0x2000241c

0800f884 <memcpy>:
 800f884:	440a      	add	r2, r1
 800f886:	4291      	cmp	r1, r2
 800f888:	f100 33ff 	add.w	r3, r0, #4294967295
 800f88c:	d100      	bne.n	800f890 <memcpy+0xc>
 800f88e:	4770      	bx	lr
 800f890:	b510      	push	{r4, lr}
 800f892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f89a:	4291      	cmp	r1, r2
 800f89c:	d1f9      	bne.n	800f892 <memcpy+0xe>
 800f89e:	bd10      	pop	{r4, pc}

0800f8a0 <nan>:
 800f8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f8a8 <nan+0x8>
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	00000000 	.word	0x00000000
 800f8ac:	7ff80000 	.word	0x7ff80000

0800f8b0 <__assert_func>:
 800f8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8b2:	4614      	mov	r4, r2
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	4b09      	ldr	r3, [pc, #36]	@ (800f8dc <__assert_func+0x2c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	68d8      	ldr	r0, [r3, #12]
 800f8be:	b954      	cbnz	r4, 800f8d6 <__assert_func+0x26>
 800f8c0:	4b07      	ldr	r3, [pc, #28]	@ (800f8e0 <__assert_func+0x30>)
 800f8c2:	461c      	mov	r4, r3
 800f8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8c8:	9100      	str	r1, [sp, #0]
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	4905      	ldr	r1, [pc, #20]	@ (800f8e4 <__assert_func+0x34>)
 800f8ce:	f000 fba7 	bl	8010020 <fiprintf>
 800f8d2:	f000 fbb7 	bl	8010044 <abort>
 800f8d6:	4b04      	ldr	r3, [pc, #16]	@ (800f8e8 <__assert_func+0x38>)
 800f8d8:	e7f4      	b.n	800f8c4 <__assert_func+0x14>
 800f8da:	bf00      	nop
 800f8dc:	2000010c 	.word	0x2000010c
 800f8e0:	080109e5 	.word	0x080109e5
 800f8e4:	080109b7 	.word	0x080109b7
 800f8e8:	080109aa 	.word	0x080109aa

0800f8ec <_calloc_r>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	fba1 5402 	umull	r5, r4, r1, r2
 800f8f2:	b93c      	cbnz	r4, 800f904 <_calloc_r+0x18>
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	f7fe f9c3 	bl	800dc80 <_malloc_r>
 800f8fa:	4606      	mov	r6, r0
 800f8fc:	b928      	cbnz	r0, 800f90a <_calloc_r+0x1e>
 800f8fe:	2600      	movs	r6, #0
 800f900:	4630      	mov	r0, r6
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	220c      	movs	r2, #12
 800f906:	6002      	str	r2, [r0, #0]
 800f908:	e7f9      	b.n	800f8fe <_calloc_r+0x12>
 800f90a:	462a      	mov	r2, r5
 800f90c:	4621      	mov	r1, r4
 800f90e:	f7fd fa70 	bl	800cdf2 <memset>
 800f912:	e7f5      	b.n	800f900 <_calloc_r+0x14>

0800f914 <rshift>:
 800f914:	6903      	ldr	r3, [r0, #16]
 800f916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f91a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f91e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f922:	f100 0414 	add.w	r4, r0, #20
 800f926:	dd45      	ble.n	800f9b4 <rshift+0xa0>
 800f928:	f011 011f 	ands.w	r1, r1, #31
 800f92c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f934:	d10c      	bne.n	800f950 <rshift+0x3c>
 800f936:	f100 0710 	add.w	r7, r0, #16
 800f93a:	4629      	mov	r1, r5
 800f93c:	42b1      	cmp	r1, r6
 800f93e:	d334      	bcc.n	800f9aa <rshift+0x96>
 800f940:	1a9b      	subs	r3, r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	1eea      	subs	r2, r5, #3
 800f946:	4296      	cmp	r6, r2
 800f948:	bf38      	it	cc
 800f94a:	2300      	movcc	r3, #0
 800f94c:	4423      	add	r3, r4
 800f94e:	e015      	b.n	800f97c <rshift+0x68>
 800f950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f954:	f1c1 0820 	rsb	r8, r1, #32
 800f958:	40cf      	lsrs	r7, r1
 800f95a:	f105 0e04 	add.w	lr, r5, #4
 800f95e:	46a1      	mov	r9, r4
 800f960:	4576      	cmp	r6, lr
 800f962:	46f4      	mov	ip, lr
 800f964:	d815      	bhi.n	800f992 <rshift+0x7e>
 800f966:	1a9a      	subs	r2, r3, r2
 800f968:	0092      	lsls	r2, r2, #2
 800f96a:	3a04      	subs	r2, #4
 800f96c:	3501      	adds	r5, #1
 800f96e:	42ae      	cmp	r6, r5
 800f970:	bf38      	it	cc
 800f972:	2200      	movcc	r2, #0
 800f974:	18a3      	adds	r3, r4, r2
 800f976:	50a7      	str	r7, [r4, r2]
 800f978:	b107      	cbz	r7, 800f97c <rshift+0x68>
 800f97a:	3304      	adds	r3, #4
 800f97c:	1b1a      	subs	r2, r3, r4
 800f97e:	42a3      	cmp	r3, r4
 800f980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f984:	bf08      	it	eq
 800f986:	2300      	moveq	r3, #0
 800f988:	6102      	str	r2, [r0, #16]
 800f98a:	bf08      	it	eq
 800f98c:	6143      	streq	r3, [r0, #20]
 800f98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f992:	f8dc c000 	ldr.w	ip, [ip]
 800f996:	fa0c fc08 	lsl.w	ip, ip, r8
 800f99a:	ea4c 0707 	orr.w	r7, ip, r7
 800f99e:	f849 7b04 	str.w	r7, [r9], #4
 800f9a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9a6:	40cf      	lsrs	r7, r1
 800f9a8:	e7da      	b.n	800f960 <rshift+0x4c>
 800f9aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9b2:	e7c3      	b.n	800f93c <rshift+0x28>
 800f9b4:	4623      	mov	r3, r4
 800f9b6:	e7e1      	b.n	800f97c <rshift+0x68>

0800f9b8 <__hexdig_fun>:
 800f9b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f9bc:	2b09      	cmp	r3, #9
 800f9be:	d802      	bhi.n	800f9c6 <__hexdig_fun+0xe>
 800f9c0:	3820      	subs	r0, #32
 800f9c2:	b2c0      	uxtb	r0, r0
 800f9c4:	4770      	bx	lr
 800f9c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f9ca:	2b05      	cmp	r3, #5
 800f9cc:	d801      	bhi.n	800f9d2 <__hexdig_fun+0x1a>
 800f9ce:	3847      	subs	r0, #71	@ 0x47
 800f9d0:	e7f7      	b.n	800f9c2 <__hexdig_fun+0xa>
 800f9d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f9d6:	2b05      	cmp	r3, #5
 800f9d8:	d801      	bhi.n	800f9de <__hexdig_fun+0x26>
 800f9da:	3827      	subs	r0, #39	@ 0x27
 800f9dc:	e7f1      	b.n	800f9c2 <__hexdig_fun+0xa>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	4770      	bx	lr
	...

0800f9e4 <__gethex>:
 800f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e8:	b085      	sub	sp, #20
 800f9ea:	468a      	mov	sl, r1
 800f9ec:	9302      	str	r3, [sp, #8]
 800f9ee:	680b      	ldr	r3, [r1, #0]
 800f9f0:	9001      	str	r0, [sp, #4]
 800f9f2:	4690      	mov	r8, r2
 800f9f4:	1c9c      	adds	r4, r3, #2
 800f9f6:	46a1      	mov	r9, r4
 800f9f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f9fc:	2830      	cmp	r0, #48	@ 0x30
 800f9fe:	d0fa      	beq.n	800f9f6 <__gethex+0x12>
 800fa00:	eba9 0303 	sub.w	r3, r9, r3
 800fa04:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa08:	f7ff ffd6 	bl	800f9b8 <__hexdig_fun>
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d168      	bne.n	800fae4 <__gethex+0x100>
 800fa12:	49a0      	ldr	r1, [pc, #640]	@ (800fc94 <__gethex+0x2b0>)
 800fa14:	2201      	movs	r2, #1
 800fa16:	4648      	mov	r0, r9
 800fa18:	f7ff ff12 	bl	800f840 <strncmp>
 800fa1c:	4607      	mov	r7, r0
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d167      	bne.n	800faf2 <__gethex+0x10e>
 800fa22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa26:	4626      	mov	r6, r4
 800fa28:	f7ff ffc6 	bl	800f9b8 <__hexdig_fun>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d062      	beq.n	800faf6 <__gethex+0x112>
 800fa30:	4623      	mov	r3, r4
 800fa32:	7818      	ldrb	r0, [r3, #0]
 800fa34:	2830      	cmp	r0, #48	@ 0x30
 800fa36:	4699      	mov	r9, r3
 800fa38:	f103 0301 	add.w	r3, r3, #1
 800fa3c:	d0f9      	beq.n	800fa32 <__gethex+0x4e>
 800fa3e:	f7ff ffbb 	bl	800f9b8 <__hexdig_fun>
 800fa42:	fab0 f580 	clz	r5, r0
 800fa46:	096d      	lsrs	r5, r5, #5
 800fa48:	f04f 0b01 	mov.w	fp, #1
 800fa4c:	464a      	mov	r2, r9
 800fa4e:	4616      	mov	r6, r2
 800fa50:	3201      	adds	r2, #1
 800fa52:	7830      	ldrb	r0, [r6, #0]
 800fa54:	f7ff ffb0 	bl	800f9b8 <__hexdig_fun>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d1f8      	bne.n	800fa4e <__gethex+0x6a>
 800fa5c:	498d      	ldr	r1, [pc, #564]	@ (800fc94 <__gethex+0x2b0>)
 800fa5e:	2201      	movs	r2, #1
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7ff feed 	bl	800f840 <strncmp>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d13f      	bne.n	800faea <__gethex+0x106>
 800fa6a:	b944      	cbnz	r4, 800fa7e <__gethex+0x9a>
 800fa6c:	1c74      	adds	r4, r6, #1
 800fa6e:	4622      	mov	r2, r4
 800fa70:	4616      	mov	r6, r2
 800fa72:	3201      	adds	r2, #1
 800fa74:	7830      	ldrb	r0, [r6, #0]
 800fa76:	f7ff ff9f 	bl	800f9b8 <__hexdig_fun>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d1f8      	bne.n	800fa70 <__gethex+0x8c>
 800fa7e:	1ba4      	subs	r4, r4, r6
 800fa80:	00a7      	lsls	r7, r4, #2
 800fa82:	7833      	ldrb	r3, [r6, #0]
 800fa84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fa88:	2b50      	cmp	r3, #80	@ 0x50
 800fa8a:	d13e      	bne.n	800fb0a <__gethex+0x126>
 800fa8c:	7873      	ldrb	r3, [r6, #1]
 800fa8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa90:	d033      	beq.n	800fafa <__gethex+0x116>
 800fa92:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa94:	d034      	beq.n	800fb00 <__gethex+0x11c>
 800fa96:	1c71      	adds	r1, r6, #1
 800fa98:	2400      	movs	r4, #0
 800fa9a:	7808      	ldrb	r0, [r1, #0]
 800fa9c:	f7ff ff8c 	bl	800f9b8 <__hexdig_fun>
 800faa0:	1e43      	subs	r3, r0, #1
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b18      	cmp	r3, #24
 800faa6:	d830      	bhi.n	800fb0a <__gethex+0x126>
 800faa8:	f1a0 0210 	sub.w	r2, r0, #16
 800faac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fab0:	f7ff ff82 	bl	800f9b8 <__hexdig_fun>
 800fab4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fab8:	fa5f fc8c 	uxtb.w	ip, ip
 800fabc:	f1bc 0f18 	cmp.w	ip, #24
 800fac0:	f04f 030a 	mov.w	r3, #10
 800fac4:	d91e      	bls.n	800fb04 <__gethex+0x120>
 800fac6:	b104      	cbz	r4, 800faca <__gethex+0xe6>
 800fac8:	4252      	negs	r2, r2
 800faca:	4417      	add	r7, r2
 800facc:	f8ca 1000 	str.w	r1, [sl]
 800fad0:	b1ed      	cbz	r5, 800fb0e <__gethex+0x12a>
 800fad2:	f1bb 0f00 	cmp.w	fp, #0
 800fad6:	bf0c      	ite	eq
 800fad8:	2506      	moveq	r5, #6
 800fada:	2500      	movne	r5, #0
 800fadc:	4628      	mov	r0, r5
 800fade:	b005      	add	sp, #20
 800fae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae4:	2500      	movs	r5, #0
 800fae6:	462c      	mov	r4, r5
 800fae8:	e7b0      	b.n	800fa4c <__gethex+0x68>
 800faea:	2c00      	cmp	r4, #0
 800faec:	d1c7      	bne.n	800fa7e <__gethex+0x9a>
 800faee:	4627      	mov	r7, r4
 800faf0:	e7c7      	b.n	800fa82 <__gethex+0x9e>
 800faf2:	464e      	mov	r6, r9
 800faf4:	462f      	mov	r7, r5
 800faf6:	2501      	movs	r5, #1
 800faf8:	e7c3      	b.n	800fa82 <__gethex+0x9e>
 800fafa:	2400      	movs	r4, #0
 800fafc:	1cb1      	adds	r1, r6, #2
 800fafe:	e7cc      	b.n	800fa9a <__gethex+0xb6>
 800fb00:	2401      	movs	r4, #1
 800fb02:	e7fb      	b.n	800fafc <__gethex+0x118>
 800fb04:	fb03 0002 	mla	r0, r3, r2, r0
 800fb08:	e7ce      	b.n	800faa8 <__gethex+0xc4>
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	e7de      	b.n	800facc <__gethex+0xe8>
 800fb0e:	eba6 0309 	sub.w	r3, r6, r9
 800fb12:	3b01      	subs	r3, #1
 800fb14:	4629      	mov	r1, r5
 800fb16:	2b07      	cmp	r3, #7
 800fb18:	dc0a      	bgt.n	800fb30 <__gethex+0x14c>
 800fb1a:	9801      	ldr	r0, [sp, #4]
 800fb1c:	f7fe f93c 	bl	800dd98 <_Balloc>
 800fb20:	4604      	mov	r4, r0
 800fb22:	b940      	cbnz	r0, 800fb36 <__gethex+0x152>
 800fb24:	4b5c      	ldr	r3, [pc, #368]	@ (800fc98 <__gethex+0x2b4>)
 800fb26:	4602      	mov	r2, r0
 800fb28:	21e4      	movs	r1, #228	@ 0xe4
 800fb2a:	485c      	ldr	r0, [pc, #368]	@ (800fc9c <__gethex+0x2b8>)
 800fb2c:	f7ff fec0 	bl	800f8b0 <__assert_func>
 800fb30:	3101      	adds	r1, #1
 800fb32:	105b      	asrs	r3, r3, #1
 800fb34:	e7ef      	b.n	800fb16 <__gethex+0x132>
 800fb36:	f100 0a14 	add.w	sl, r0, #20
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	4655      	mov	r5, sl
 800fb3e:	469b      	mov	fp, r3
 800fb40:	45b1      	cmp	r9, r6
 800fb42:	d337      	bcc.n	800fbb4 <__gethex+0x1d0>
 800fb44:	f845 bb04 	str.w	fp, [r5], #4
 800fb48:	eba5 050a 	sub.w	r5, r5, sl
 800fb4c:	10ad      	asrs	r5, r5, #2
 800fb4e:	6125      	str	r5, [r4, #16]
 800fb50:	4658      	mov	r0, fp
 800fb52:	f7fe fa13 	bl	800df7c <__hi0bits>
 800fb56:	016d      	lsls	r5, r5, #5
 800fb58:	f8d8 6000 	ldr.w	r6, [r8]
 800fb5c:	1a2d      	subs	r5, r5, r0
 800fb5e:	42b5      	cmp	r5, r6
 800fb60:	dd54      	ble.n	800fc0c <__gethex+0x228>
 800fb62:	1bad      	subs	r5, r5, r6
 800fb64:	4629      	mov	r1, r5
 800fb66:	4620      	mov	r0, r4
 800fb68:	f7fe fda7 	bl	800e6ba <__any_on>
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	b178      	cbz	r0, 800fb90 <__gethex+0x1ac>
 800fb70:	1e6b      	subs	r3, r5, #1
 800fb72:	1159      	asrs	r1, r3, #5
 800fb74:	f003 021f 	and.w	r2, r3, #31
 800fb78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb7c:	f04f 0901 	mov.w	r9, #1
 800fb80:	fa09 f202 	lsl.w	r2, r9, r2
 800fb84:	420a      	tst	r2, r1
 800fb86:	d003      	beq.n	800fb90 <__gethex+0x1ac>
 800fb88:	454b      	cmp	r3, r9
 800fb8a:	dc36      	bgt.n	800fbfa <__gethex+0x216>
 800fb8c:	f04f 0902 	mov.w	r9, #2
 800fb90:	4629      	mov	r1, r5
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7ff febe 	bl	800f914 <rshift>
 800fb98:	442f      	add	r7, r5
 800fb9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb9e:	42bb      	cmp	r3, r7
 800fba0:	da42      	bge.n	800fc28 <__gethex+0x244>
 800fba2:	9801      	ldr	r0, [sp, #4]
 800fba4:	4621      	mov	r1, r4
 800fba6:	f7fe f937 	bl	800de18 <_Bfree>
 800fbaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbac:	2300      	movs	r3, #0
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	25a3      	movs	r5, #163	@ 0xa3
 800fbb2:	e793      	b.n	800fadc <__gethex+0xf8>
 800fbb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fbb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800fbba:	d012      	beq.n	800fbe2 <__gethex+0x1fe>
 800fbbc:	2b20      	cmp	r3, #32
 800fbbe:	d104      	bne.n	800fbca <__gethex+0x1e6>
 800fbc0:	f845 bb04 	str.w	fp, [r5], #4
 800fbc4:	f04f 0b00 	mov.w	fp, #0
 800fbc8:	465b      	mov	r3, fp
 800fbca:	7830      	ldrb	r0, [r6, #0]
 800fbcc:	9303      	str	r3, [sp, #12]
 800fbce:	f7ff fef3 	bl	800f9b8 <__hexdig_fun>
 800fbd2:	9b03      	ldr	r3, [sp, #12]
 800fbd4:	f000 000f 	and.w	r0, r0, #15
 800fbd8:	4098      	lsls	r0, r3
 800fbda:	ea4b 0b00 	orr.w	fp, fp, r0
 800fbde:	3304      	adds	r3, #4
 800fbe0:	e7ae      	b.n	800fb40 <__gethex+0x15c>
 800fbe2:	45b1      	cmp	r9, r6
 800fbe4:	d8ea      	bhi.n	800fbbc <__gethex+0x1d8>
 800fbe6:	492b      	ldr	r1, [pc, #172]	@ (800fc94 <__gethex+0x2b0>)
 800fbe8:	9303      	str	r3, [sp, #12]
 800fbea:	2201      	movs	r2, #1
 800fbec:	4630      	mov	r0, r6
 800fbee:	f7ff fe27 	bl	800f840 <strncmp>
 800fbf2:	9b03      	ldr	r3, [sp, #12]
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	d1e1      	bne.n	800fbbc <__gethex+0x1d8>
 800fbf8:	e7a2      	b.n	800fb40 <__gethex+0x15c>
 800fbfa:	1ea9      	subs	r1, r5, #2
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7fe fd5c 	bl	800e6ba <__any_on>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d0c2      	beq.n	800fb8c <__gethex+0x1a8>
 800fc06:	f04f 0903 	mov.w	r9, #3
 800fc0a:	e7c1      	b.n	800fb90 <__gethex+0x1ac>
 800fc0c:	da09      	bge.n	800fc22 <__gethex+0x23e>
 800fc0e:	1b75      	subs	r5, r6, r5
 800fc10:	4621      	mov	r1, r4
 800fc12:	9801      	ldr	r0, [sp, #4]
 800fc14:	462a      	mov	r2, r5
 800fc16:	f7fe fb17 	bl	800e248 <__lshift>
 800fc1a:	1b7f      	subs	r7, r7, r5
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	f100 0a14 	add.w	sl, r0, #20
 800fc22:	f04f 0900 	mov.w	r9, #0
 800fc26:	e7b8      	b.n	800fb9a <__gethex+0x1b6>
 800fc28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc2c:	42bd      	cmp	r5, r7
 800fc2e:	dd6f      	ble.n	800fd10 <__gethex+0x32c>
 800fc30:	1bed      	subs	r5, r5, r7
 800fc32:	42ae      	cmp	r6, r5
 800fc34:	dc34      	bgt.n	800fca0 <__gethex+0x2bc>
 800fc36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d022      	beq.n	800fc84 <__gethex+0x2a0>
 800fc3e:	2b03      	cmp	r3, #3
 800fc40:	d024      	beq.n	800fc8c <__gethex+0x2a8>
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d115      	bne.n	800fc72 <__gethex+0x28e>
 800fc46:	42ae      	cmp	r6, r5
 800fc48:	d113      	bne.n	800fc72 <__gethex+0x28e>
 800fc4a:	2e01      	cmp	r6, #1
 800fc4c:	d10b      	bne.n	800fc66 <__gethex+0x282>
 800fc4e:	9a02      	ldr	r2, [sp, #8]
 800fc50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc54:	6013      	str	r3, [r2, #0]
 800fc56:	2301      	movs	r3, #1
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	f8ca 3000 	str.w	r3, [sl]
 800fc5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc60:	2562      	movs	r5, #98	@ 0x62
 800fc62:	601c      	str	r4, [r3, #0]
 800fc64:	e73a      	b.n	800fadc <__gethex+0xf8>
 800fc66:	1e71      	subs	r1, r6, #1
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f7fe fd26 	bl	800e6ba <__any_on>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d1ed      	bne.n	800fc4e <__gethex+0x26a>
 800fc72:	9801      	ldr	r0, [sp, #4]
 800fc74:	4621      	mov	r1, r4
 800fc76:	f7fe f8cf 	bl	800de18 <_Bfree>
 800fc7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	2550      	movs	r5, #80	@ 0x50
 800fc82:	e72b      	b.n	800fadc <__gethex+0xf8>
 800fc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d1f3      	bne.n	800fc72 <__gethex+0x28e>
 800fc8a:	e7e0      	b.n	800fc4e <__gethex+0x26a>
 800fc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1dd      	bne.n	800fc4e <__gethex+0x26a>
 800fc92:	e7ee      	b.n	800fc72 <__gethex+0x28e>
 800fc94:	08010838 	.word	0x08010838
 800fc98:	080106cd 	.word	0x080106cd
 800fc9c:	080109e6 	.word	0x080109e6
 800fca0:	1e6f      	subs	r7, r5, #1
 800fca2:	f1b9 0f00 	cmp.w	r9, #0
 800fca6:	d130      	bne.n	800fd0a <__gethex+0x326>
 800fca8:	b127      	cbz	r7, 800fcb4 <__gethex+0x2d0>
 800fcaa:	4639      	mov	r1, r7
 800fcac:	4620      	mov	r0, r4
 800fcae:	f7fe fd04 	bl	800e6ba <__any_on>
 800fcb2:	4681      	mov	r9, r0
 800fcb4:	117a      	asrs	r2, r7, #5
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fcbc:	f007 071f 	and.w	r7, r7, #31
 800fcc0:	40bb      	lsls	r3, r7
 800fcc2:	4213      	tst	r3, r2
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	bf18      	it	ne
 800fcca:	f049 0902 	orrne.w	r9, r9, #2
 800fcce:	f7ff fe21 	bl	800f914 <rshift>
 800fcd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fcd6:	1b76      	subs	r6, r6, r5
 800fcd8:	2502      	movs	r5, #2
 800fcda:	f1b9 0f00 	cmp.w	r9, #0
 800fcde:	d047      	beq.n	800fd70 <__gethex+0x38c>
 800fce0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	d015      	beq.n	800fd14 <__gethex+0x330>
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d017      	beq.n	800fd1c <__gethex+0x338>
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d109      	bne.n	800fd04 <__gethex+0x320>
 800fcf0:	f019 0f02 	tst.w	r9, #2
 800fcf4:	d006      	beq.n	800fd04 <__gethex+0x320>
 800fcf6:	f8da 3000 	ldr.w	r3, [sl]
 800fcfa:	ea49 0903 	orr.w	r9, r9, r3
 800fcfe:	f019 0f01 	tst.w	r9, #1
 800fd02:	d10e      	bne.n	800fd22 <__gethex+0x33e>
 800fd04:	f045 0510 	orr.w	r5, r5, #16
 800fd08:	e032      	b.n	800fd70 <__gethex+0x38c>
 800fd0a:	f04f 0901 	mov.w	r9, #1
 800fd0e:	e7d1      	b.n	800fcb4 <__gethex+0x2d0>
 800fd10:	2501      	movs	r5, #1
 800fd12:	e7e2      	b.n	800fcda <__gethex+0x2f6>
 800fd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd16:	f1c3 0301 	rsb	r3, r3, #1
 800fd1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0f0      	beq.n	800fd04 <__gethex+0x320>
 800fd22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd26:	f104 0314 	add.w	r3, r4, #20
 800fd2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd32:	f04f 0c00 	mov.w	ip, #0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd40:	d01b      	beq.n	800fd7a <__gethex+0x396>
 800fd42:	3201      	adds	r2, #1
 800fd44:	6002      	str	r2, [r0, #0]
 800fd46:	2d02      	cmp	r5, #2
 800fd48:	f104 0314 	add.w	r3, r4, #20
 800fd4c:	d13c      	bne.n	800fdc8 <__gethex+0x3e4>
 800fd4e:	f8d8 2000 	ldr.w	r2, [r8]
 800fd52:	3a01      	subs	r2, #1
 800fd54:	42b2      	cmp	r2, r6
 800fd56:	d109      	bne.n	800fd6c <__gethex+0x388>
 800fd58:	1171      	asrs	r1, r6, #5
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd60:	f006 061f 	and.w	r6, r6, #31
 800fd64:	fa02 f606 	lsl.w	r6, r2, r6
 800fd68:	421e      	tst	r6, r3
 800fd6a:	d13a      	bne.n	800fde2 <__gethex+0x3fe>
 800fd6c:	f045 0520 	orr.w	r5, r5, #32
 800fd70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd72:	601c      	str	r4, [r3, #0]
 800fd74:	9b02      	ldr	r3, [sp, #8]
 800fd76:	601f      	str	r7, [r3, #0]
 800fd78:	e6b0      	b.n	800fadc <__gethex+0xf8>
 800fd7a:	4299      	cmp	r1, r3
 800fd7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd80:	d8d9      	bhi.n	800fd36 <__gethex+0x352>
 800fd82:	68a3      	ldr	r3, [r4, #8]
 800fd84:	459b      	cmp	fp, r3
 800fd86:	db17      	blt.n	800fdb8 <__gethex+0x3d4>
 800fd88:	6861      	ldr	r1, [r4, #4]
 800fd8a:	9801      	ldr	r0, [sp, #4]
 800fd8c:	3101      	adds	r1, #1
 800fd8e:	f7fe f803 	bl	800dd98 <_Balloc>
 800fd92:	4681      	mov	r9, r0
 800fd94:	b918      	cbnz	r0, 800fd9e <__gethex+0x3ba>
 800fd96:	4b1a      	ldr	r3, [pc, #104]	@ (800fe00 <__gethex+0x41c>)
 800fd98:	4602      	mov	r2, r0
 800fd9a:	2184      	movs	r1, #132	@ 0x84
 800fd9c:	e6c5      	b.n	800fb2a <__gethex+0x146>
 800fd9e:	6922      	ldr	r2, [r4, #16]
 800fda0:	3202      	adds	r2, #2
 800fda2:	f104 010c 	add.w	r1, r4, #12
 800fda6:	0092      	lsls	r2, r2, #2
 800fda8:	300c      	adds	r0, #12
 800fdaa:	f7ff fd6b 	bl	800f884 <memcpy>
 800fdae:	4621      	mov	r1, r4
 800fdb0:	9801      	ldr	r0, [sp, #4]
 800fdb2:	f7fe f831 	bl	800de18 <_Bfree>
 800fdb6:	464c      	mov	r4, r9
 800fdb8:	6923      	ldr	r3, [r4, #16]
 800fdba:	1c5a      	adds	r2, r3, #1
 800fdbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdc0:	6122      	str	r2, [r4, #16]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	615a      	str	r2, [r3, #20]
 800fdc6:	e7be      	b.n	800fd46 <__gethex+0x362>
 800fdc8:	6922      	ldr	r2, [r4, #16]
 800fdca:	455a      	cmp	r2, fp
 800fdcc:	dd0b      	ble.n	800fde6 <__gethex+0x402>
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f7ff fd9f 	bl	800f914 <rshift>
 800fdd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdda:	3701      	adds	r7, #1
 800fddc:	42bb      	cmp	r3, r7
 800fdde:	f6ff aee0 	blt.w	800fba2 <__gethex+0x1be>
 800fde2:	2501      	movs	r5, #1
 800fde4:	e7c2      	b.n	800fd6c <__gethex+0x388>
 800fde6:	f016 061f 	ands.w	r6, r6, #31
 800fdea:	d0fa      	beq.n	800fde2 <__gethex+0x3fe>
 800fdec:	4453      	add	r3, sl
 800fdee:	f1c6 0620 	rsb	r6, r6, #32
 800fdf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fdf6:	f7fe f8c1 	bl	800df7c <__hi0bits>
 800fdfa:	42b0      	cmp	r0, r6
 800fdfc:	dbe7      	blt.n	800fdce <__gethex+0x3ea>
 800fdfe:	e7f0      	b.n	800fde2 <__gethex+0x3fe>
 800fe00:	080106cd 	.word	0x080106cd

0800fe04 <L_shift>:
 800fe04:	f1c2 0208 	rsb	r2, r2, #8
 800fe08:	0092      	lsls	r2, r2, #2
 800fe0a:	b570      	push	{r4, r5, r6, lr}
 800fe0c:	f1c2 0620 	rsb	r6, r2, #32
 800fe10:	6843      	ldr	r3, [r0, #4]
 800fe12:	6804      	ldr	r4, [r0, #0]
 800fe14:	fa03 f506 	lsl.w	r5, r3, r6
 800fe18:	432c      	orrs	r4, r5
 800fe1a:	40d3      	lsrs	r3, r2
 800fe1c:	6004      	str	r4, [r0, #0]
 800fe1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe22:	4288      	cmp	r0, r1
 800fe24:	d3f4      	bcc.n	800fe10 <L_shift+0xc>
 800fe26:	bd70      	pop	{r4, r5, r6, pc}

0800fe28 <__match>:
 800fe28:	b530      	push	{r4, r5, lr}
 800fe2a:	6803      	ldr	r3, [r0, #0]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe32:	b914      	cbnz	r4, 800fe3a <__match+0x12>
 800fe34:	6003      	str	r3, [r0, #0]
 800fe36:	2001      	movs	r0, #1
 800fe38:	bd30      	pop	{r4, r5, pc}
 800fe3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fe42:	2d19      	cmp	r5, #25
 800fe44:	bf98      	it	ls
 800fe46:	3220      	addls	r2, #32
 800fe48:	42a2      	cmp	r2, r4
 800fe4a:	d0f0      	beq.n	800fe2e <__match+0x6>
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	e7f3      	b.n	800fe38 <__match+0x10>

0800fe50 <__hexnan>:
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	680b      	ldr	r3, [r1, #0]
 800fe56:	6801      	ldr	r1, [r0, #0]
 800fe58:	115e      	asrs	r6, r3, #5
 800fe5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe5e:	f013 031f 	ands.w	r3, r3, #31
 800fe62:	b087      	sub	sp, #28
 800fe64:	bf18      	it	ne
 800fe66:	3604      	addne	r6, #4
 800fe68:	2500      	movs	r5, #0
 800fe6a:	1f37      	subs	r7, r6, #4
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	4690      	mov	r8, r2
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe76:	46b9      	mov	r9, r7
 800fe78:	463c      	mov	r4, r7
 800fe7a:	9502      	str	r5, [sp, #8]
 800fe7c:	46ab      	mov	fp, r5
 800fe7e:	784a      	ldrb	r2, [r1, #1]
 800fe80:	1c4b      	adds	r3, r1, #1
 800fe82:	9303      	str	r3, [sp, #12]
 800fe84:	b342      	cbz	r2, 800fed8 <__hexnan+0x88>
 800fe86:	4610      	mov	r0, r2
 800fe88:	9105      	str	r1, [sp, #20]
 800fe8a:	9204      	str	r2, [sp, #16]
 800fe8c:	f7ff fd94 	bl	800f9b8 <__hexdig_fun>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d151      	bne.n	800ff38 <__hexnan+0xe8>
 800fe94:	9a04      	ldr	r2, [sp, #16]
 800fe96:	9905      	ldr	r1, [sp, #20]
 800fe98:	2a20      	cmp	r2, #32
 800fe9a:	d818      	bhi.n	800fece <__hexnan+0x7e>
 800fe9c:	9b02      	ldr	r3, [sp, #8]
 800fe9e:	459b      	cmp	fp, r3
 800fea0:	dd13      	ble.n	800feca <__hexnan+0x7a>
 800fea2:	454c      	cmp	r4, r9
 800fea4:	d206      	bcs.n	800feb4 <__hexnan+0x64>
 800fea6:	2d07      	cmp	r5, #7
 800fea8:	dc04      	bgt.n	800feb4 <__hexnan+0x64>
 800feaa:	462a      	mov	r2, r5
 800feac:	4649      	mov	r1, r9
 800feae:	4620      	mov	r0, r4
 800feb0:	f7ff ffa8 	bl	800fe04 <L_shift>
 800feb4:	4544      	cmp	r4, r8
 800feb6:	d952      	bls.n	800ff5e <__hexnan+0x10e>
 800feb8:	2300      	movs	r3, #0
 800feba:	f1a4 0904 	sub.w	r9, r4, #4
 800febe:	f844 3c04 	str.w	r3, [r4, #-4]
 800fec2:	f8cd b008 	str.w	fp, [sp, #8]
 800fec6:	464c      	mov	r4, r9
 800fec8:	461d      	mov	r5, r3
 800feca:	9903      	ldr	r1, [sp, #12]
 800fecc:	e7d7      	b.n	800fe7e <__hexnan+0x2e>
 800fece:	2a29      	cmp	r2, #41	@ 0x29
 800fed0:	d157      	bne.n	800ff82 <__hexnan+0x132>
 800fed2:	3102      	adds	r1, #2
 800fed4:	f8ca 1000 	str.w	r1, [sl]
 800fed8:	f1bb 0f00 	cmp.w	fp, #0
 800fedc:	d051      	beq.n	800ff82 <__hexnan+0x132>
 800fede:	454c      	cmp	r4, r9
 800fee0:	d206      	bcs.n	800fef0 <__hexnan+0xa0>
 800fee2:	2d07      	cmp	r5, #7
 800fee4:	dc04      	bgt.n	800fef0 <__hexnan+0xa0>
 800fee6:	462a      	mov	r2, r5
 800fee8:	4649      	mov	r1, r9
 800feea:	4620      	mov	r0, r4
 800feec:	f7ff ff8a 	bl	800fe04 <L_shift>
 800fef0:	4544      	cmp	r4, r8
 800fef2:	d936      	bls.n	800ff62 <__hexnan+0x112>
 800fef4:	f1a8 0204 	sub.w	r2, r8, #4
 800fef8:	4623      	mov	r3, r4
 800fefa:	f853 1b04 	ldr.w	r1, [r3], #4
 800fefe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff02:	429f      	cmp	r7, r3
 800ff04:	d2f9      	bcs.n	800fefa <__hexnan+0xaa>
 800ff06:	1b3b      	subs	r3, r7, r4
 800ff08:	f023 0303 	bic.w	r3, r3, #3
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	3401      	adds	r4, #1
 800ff10:	3e03      	subs	r6, #3
 800ff12:	42b4      	cmp	r4, r6
 800ff14:	bf88      	it	hi
 800ff16:	2304      	movhi	r3, #4
 800ff18:	4443      	add	r3, r8
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f843 2b04 	str.w	r2, [r3], #4
 800ff20:	429f      	cmp	r7, r3
 800ff22:	d2fb      	bcs.n	800ff1c <__hexnan+0xcc>
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	b91b      	cbnz	r3, 800ff30 <__hexnan+0xe0>
 800ff28:	4547      	cmp	r7, r8
 800ff2a:	d128      	bne.n	800ff7e <__hexnan+0x12e>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	2005      	movs	r0, #5
 800ff32:	b007      	add	sp, #28
 800ff34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff38:	3501      	adds	r5, #1
 800ff3a:	2d08      	cmp	r5, #8
 800ff3c:	f10b 0b01 	add.w	fp, fp, #1
 800ff40:	dd06      	ble.n	800ff50 <__hexnan+0x100>
 800ff42:	4544      	cmp	r4, r8
 800ff44:	d9c1      	bls.n	800feca <__hexnan+0x7a>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff4c:	2501      	movs	r5, #1
 800ff4e:	3c04      	subs	r4, #4
 800ff50:	6822      	ldr	r2, [r4, #0]
 800ff52:	f000 000f 	and.w	r0, r0, #15
 800ff56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff5a:	6020      	str	r0, [r4, #0]
 800ff5c:	e7b5      	b.n	800feca <__hexnan+0x7a>
 800ff5e:	2508      	movs	r5, #8
 800ff60:	e7b3      	b.n	800feca <__hexnan+0x7a>
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0dd      	beq.n	800ff24 <__hexnan+0xd4>
 800ff68:	f1c3 0320 	rsb	r3, r3, #32
 800ff6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff70:	40da      	lsrs	r2, r3
 800ff72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff76:	4013      	ands	r3, r2
 800ff78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff7c:	e7d2      	b.n	800ff24 <__hexnan+0xd4>
 800ff7e:	3f04      	subs	r7, #4
 800ff80:	e7d0      	b.n	800ff24 <__hexnan+0xd4>
 800ff82:	2004      	movs	r0, #4
 800ff84:	e7d5      	b.n	800ff32 <__hexnan+0xe2>

0800ff86 <__ascii_mbtowc>:
 800ff86:	b082      	sub	sp, #8
 800ff88:	b901      	cbnz	r1, 800ff8c <__ascii_mbtowc+0x6>
 800ff8a:	a901      	add	r1, sp, #4
 800ff8c:	b142      	cbz	r2, 800ffa0 <__ascii_mbtowc+0x1a>
 800ff8e:	b14b      	cbz	r3, 800ffa4 <__ascii_mbtowc+0x1e>
 800ff90:	7813      	ldrb	r3, [r2, #0]
 800ff92:	600b      	str	r3, [r1, #0]
 800ff94:	7812      	ldrb	r2, [r2, #0]
 800ff96:	1e10      	subs	r0, r2, #0
 800ff98:	bf18      	it	ne
 800ff9a:	2001      	movne	r0, #1
 800ff9c:	b002      	add	sp, #8
 800ff9e:	4770      	bx	lr
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	e7fb      	b.n	800ff9c <__ascii_mbtowc+0x16>
 800ffa4:	f06f 0001 	mvn.w	r0, #1
 800ffa8:	e7f8      	b.n	800ff9c <__ascii_mbtowc+0x16>

0800ffaa <_realloc_r>:
 800ffaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffae:	4680      	mov	r8, r0
 800ffb0:	4615      	mov	r5, r2
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	b921      	cbnz	r1, 800ffc0 <_realloc_r+0x16>
 800ffb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffba:	4611      	mov	r1, r2
 800ffbc:	f7fd be60 	b.w	800dc80 <_malloc_r>
 800ffc0:	b92a      	cbnz	r2, 800ffce <_realloc_r+0x24>
 800ffc2:	f7fd fde9 	bl	800db98 <_free_r>
 800ffc6:	2400      	movs	r4, #0
 800ffc8:	4620      	mov	r0, r4
 800ffca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffce:	f000 f840 	bl	8010052 <_malloc_usable_size_r>
 800ffd2:	4285      	cmp	r5, r0
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	d802      	bhi.n	800ffde <_realloc_r+0x34>
 800ffd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ffdc:	d8f4      	bhi.n	800ffc8 <_realloc_r+0x1e>
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	f7fd fe4d 	bl	800dc80 <_malloc_r>
 800ffe6:	4607      	mov	r7, r0
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d0ec      	beq.n	800ffc6 <_realloc_r+0x1c>
 800ffec:	42b5      	cmp	r5, r6
 800ffee:	462a      	mov	r2, r5
 800fff0:	4621      	mov	r1, r4
 800fff2:	bf28      	it	cs
 800fff4:	4632      	movcs	r2, r6
 800fff6:	f7ff fc45 	bl	800f884 <memcpy>
 800fffa:	4621      	mov	r1, r4
 800fffc:	4640      	mov	r0, r8
 800fffe:	f7fd fdcb 	bl	800db98 <_free_r>
 8010002:	463c      	mov	r4, r7
 8010004:	e7e0      	b.n	800ffc8 <_realloc_r+0x1e>

08010006 <__ascii_wctomb>:
 8010006:	4603      	mov	r3, r0
 8010008:	4608      	mov	r0, r1
 801000a:	b141      	cbz	r1, 801001e <__ascii_wctomb+0x18>
 801000c:	2aff      	cmp	r2, #255	@ 0xff
 801000e:	d904      	bls.n	801001a <__ascii_wctomb+0x14>
 8010010:	228a      	movs	r2, #138	@ 0x8a
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	f04f 30ff 	mov.w	r0, #4294967295
 8010018:	4770      	bx	lr
 801001a:	700a      	strb	r2, [r1, #0]
 801001c:	2001      	movs	r0, #1
 801001e:	4770      	bx	lr

08010020 <fiprintf>:
 8010020:	b40e      	push	{r1, r2, r3}
 8010022:	b503      	push	{r0, r1, lr}
 8010024:	4601      	mov	r1, r0
 8010026:	ab03      	add	r3, sp, #12
 8010028:	4805      	ldr	r0, [pc, #20]	@ (8010040 <fiprintf+0x20>)
 801002a:	f853 2b04 	ldr.w	r2, [r3], #4
 801002e:	6800      	ldr	r0, [r0, #0]
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	f000 f83f 	bl	80100b4 <_vfiprintf_r>
 8010036:	b002      	add	sp, #8
 8010038:	f85d eb04 	ldr.w	lr, [sp], #4
 801003c:	b003      	add	sp, #12
 801003e:	4770      	bx	lr
 8010040:	2000010c 	.word	0x2000010c

08010044 <abort>:
 8010044:	b508      	push	{r3, lr}
 8010046:	2006      	movs	r0, #6
 8010048:	f000 fa08 	bl	801045c <raise>
 801004c:	2001      	movs	r0, #1
 801004e:	f7f1 fc8d 	bl	800196c <_exit>

08010052 <_malloc_usable_size_r>:
 8010052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010056:	1f18      	subs	r0, r3, #4
 8010058:	2b00      	cmp	r3, #0
 801005a:	bfbc      	itt	lt
 801005c:	580b      	ldrlt	r3, [r1, r0]
 801005e:	18c0      	addlt	r0, r0, r3
 8010060:	4770      	bx	lr

08010062 <__sfputc_r>:
 8010062:	6893      	ldr	r3, [r2, #8]
 8010064:	3b01      	subs	r3, #1
 8010066:	2b00      	cmp	r3, #0
 8010068:	b410      	push	{r4}
 801006a:	6093      	str	r3, [r2, #8]
 801006c:	da08      	bge.n	8010080 <__sfputc_r+0x1e>
 801006e:	6994      	ldr	r4, [r2, #24]
 8010070:	42a3      	cmp	r3, r4
 8010072:	db01      	blt.n	8010078 <__sfputc_r+0x16>
 8010074:	290a      	cmp	r1, #10
 8010076:	d103      	bne.n	8010080 <__sfputc_r+0x1e>
 8010078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801007c:	f000 b932 	b.w	80102e4 <__swbuf_r>
 8010080:	6813      	ldr	r3, [r2, #0]
 8010082:	1c58      	adds	r0, r3, #1
 8010084:	6010      	str	r0, [r2, #0]
 8010086:	7019      	strb	r1, [r3, #0]
 8010088:	4608      	mov	r0, r1
 801008a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801008e:	4770      	bx	lr

08010090 <__sfputs_r>:
 8010090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010092:	4606      	mov	r6, r0
 8010094:	460f      	mov	r7, r1
 8010096:	4614      	mov	r4, r2
 8010098:	18d5      	adds	r5, r2, r3
 801009a:	42ac      	cmp	r4, r5
 801009c:	d101      	bne.n	80100a2 <__sfputs_r+0x12>
 801009e:	2000      	movs	r0, #0
 80100a0:	e007      	b.n	80100b2 <__sfputs_r+0x22>
 80100a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a6:	463a      	mov	r2, r7
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff ffda 	bl	8010062 <__sfputc_r>
 80100ae:	1c43      	adds	r3, r0, #1
 80100b0:	d1f3      	bne.n	801009a <__sfputs_r+0xa>
 80100b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100b4 <_vfiprintf_r>:
 80100b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	460d      	mov	r5, r1
 80100ba:	b09d      	sub	sp, #116	@ 0x74
 80100bc:	4614      	mov	r4, r2
 80100be:	4698      	mov	r8, r3
 80100c0:	4606      	mov	r6, r0
 80100c2:	b118      	cbz	r0, 80100cc <_vfiprintf_r+0x18>
 80100c4:	6a03      	ldr	r3, [r0, #32]
 80100c6:	b90b      	cbnz	r3, 80100cc <_vfiprintf_r+0x18>
 80100c8:	f7fc fdfa 	bl	800ccc0 <__sinit>
 80100cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100ce:	07d9      	lsls	r1, r3, #31
 80100d0:	d405      	bmi.n	80100de <_vfiprintf_r+0x2a>
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	059a      	lsls	r2, r3, #22
 80100d6:	d402      	bmi.n	80100de <_vfiprintf_r+0x2a>
 80100d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100da:	f7fc ff08 	bl	800ceee <__retarget_lock_acquire_recursive>
 80100de:	89ab      	ldrh	r3, [r5, #12]
 80100e0:	071b      	lsls	r3, r3, #28
 80100e2:	d501      	bpl.n	80100e8 <_vfiprintf_r+0x34>
 80100e4:	692b      	ldr	r3, [r5, #16]
 80100e6:	b99b      	cbnz	r3, 8010110 <_vfiprintf_r+0x5c>
 80100e8:	4629      	mov	r1, r5
 80100ea:	4630      	mov	r0, r6
 80100ec:	f000 f938 	bl	8010360 <__swsetup_r>
 80100f0:	b170      	cbz	r0, 8010110 <_vfiprintf_r+0x5c>
 80100f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100f4:	07dc      	lsls	r4, r3, #31
 80100f6:	d504      	bpl.n	8010102 <_vfiprintf_r+0x4e>
 80100f8:	f04f 30ff 	mov.w	r0, #4294967295
 80100fc:	b01d      	add	sp, #116	@ 0x74
 80100fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010102:	89ab      	ldrh	r3, [r5, #12]
 8010104:	0598      	lsls	r0, r3, #22
 8010106:	d4f7      	bmi.n	80100f8 <_vfiprintf_r+0x44>
 8010108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801010a:	f7fc fef1 	bl	800cef0 <__retarget_lock_release_recursive>
 801010e:	e7f3      	b.n	80100f8 <_vfiprintf_r+0x44>
 8010110:	2300      	movs	r3, #0
 8010112:	9309      	str	r3, [sp, #36]	@ 0x24
 8010114:	2320      	movs	r3, #32
 8010116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801011a:	f8cd 800c 	str.w	r8, [sp, #12]
 801011e:	2330      	movs	r3, #48	@ 0x30
 8010120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80102d0 <_vfiprintf_r+0x21c>
 8010124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010128:	f04f 0901 	mov.w	r9, #1
 801012c:	4623      	mov	r3, r4
 801012e:	469a      	mov	sl, r3
 8010130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010134:	b10a      	cbz	r2, 801013a <_vfiprintf_r+0x86>
 8010136:	2a25      	cmp	r2, #37	@ 0x25
 8010138:	d1f9      	bne.n	801012e <_vfiprintf_r+0x7a>
 801013a:	ebba 0b04 	subs.w	fp, sl, r4
 801013e:	d00b      	beq.n	8010158 <_vfiprintf_r+0xa4>
 8010140:	465b      	mov	r3, fp
 8010142:	4622      	mov	r2, r4
 8010144:	4629      	mov	r1, r5
 8010146:	4630      	mov	r0, r6
 8010148:	f7ff ffa2 	bl	8010090 <__sfputs_r>
 801014c:	3001      	adds	r0, #1
 801014e:	f000 80a7 	beq.w	80102a0 <_vfiprintf_r+0x1ec>
 8010152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010154:	445a      	add	r2, fp
 8010156:	9209      	str	r2, [sp, #36]	@ 0x24
 8010158:	f89a 3000 	ldrb.w	r3, [sl]
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 809f 	beq.w	80102a0 <_vfiprintf_r+0x1ec>
 8010162:	2300      	movs	r3, #0
 8010164:	f04f 32ff 	mov.w	r2, #4294967295
 8010168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801016c:	f10a 0a01 	add.w	sl, sl, #1
 8010170:	9304      	str	r3, [sp, #16]
 8010172:	9307      	str	r3, [sp, #28]
 8010174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010178:	931a      	str	r3, [sp, #104]	@ 0x68
 801017a:	4654      	mov	r4, sl
 801017c:	2205      	movs	r2, #5
 801017e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010182:	4853      	ldr	r0, [pc, #332]	@ (80102d0 <_vfiprintf_r+0x21c>)
 8010184:	f7f0 f82c 	bl	80001e0 <memchr>
 8010188:	9a04      	ldr	r2, [sp, #16]
 801018a:	b9d8      	cbnz	r0, 80101c4 <_vfiprintf_r+0x110>
 801018c:	06d1      	lsls	r1, r2, #27
 801018e:	bf44      	itt	mi
 8010190:	2320      	movmi	r3, #32
 8010192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010196:	0713      	lsls	r3, r2, #28
 8010198:	bf44      	itt	mi
 801019a:	232b      	movmi	r3, #43	@ 0x2b
 801019c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101a0:	f89a 3000 	ldrb.w	r3, [sl]
 80101a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a6:	d015      	beq.n	80101d4 <_vfiprintf_r+0x120>
 80101a8:	9a07      	ldr	r2, [sp, #28]
 80101aa:	4654      	mov	r4, sl
 80101ac:	2000      	movs	r0, #0
 80101ae:	f04f 0c0a 	mov.w	ip, #10
 80101b2:	4621      	mov	r1, r4
 80101b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101b8:	3b30      	subs	r3, #48	@ 0x30
 80101ba:	2b09      	cmp	r3, #9
 80101bc:	d94b      	bls.n	8010256 <_vfiprintf_r+0x1a2>
 80101be:	b1b0      	cbz	r0, 80101ee <_vfiprintf_r+0x13a>
 80101c0:	9207      	str	r2, [sp, #28]
 80101c2:	e014      	b.n	80101ee <_vfiprintf_r+0x13a>
 80101c4:	eba0 0308 	sub.w	r3, r0, r8
 80101c8:	fa09 f303 	lsl.w	r3, r9, r3
 80101cc:	4313      	orrs	r3, r2
 80101ce:	9304      	str	r3, [sp, #16]
 80101d0:	46a2      	mov	sl, r4
 80101d2:	e7d2      	b.n	801017a <_vfiprintf_r+0xc6>
 80101d4:	9b03      	ldr	r3, [sp, #12]
 80101d6:	1d19      	adds	r1, r3, #4
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	9103      	str	r1, [sp, #12]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	bfbb      	ittet	lt
 80101e0:	425b      	neglt	r3, r3
 80101e2:	f042 0202 	orrlt.w	r2, r2, #2
 80101e6:	9307      	strge	r3, [sp, #28]
 80101e8:	9307      	strlt	r3, [sp, #28]
 80101ea:	bfb8      	it	lt
 80101ec:	9204      	strlt	r2, [sp, #16]
 80101ee:	7823      	ldrb	r3, [r4, #0]
 80101f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80101f2:	d10a      	bne.n	801020a <_vfiprintf_r+0x156>
 80101f4:	7863      	ldrb	r3, [r4, #1]
 80101f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80101f8:	d132      	bne.n	8010260 <_vfiprintf_r+0x1ac>
 80101fa:	9b03      	ldr	r3, [sp, #12]
 80101fc:	1d1a      	adds	r2, r3, #4
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	9203      	str	r2, [sp, #12]
 8010202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010206:	3402      	adds	r4, #2
 8010208:	9305      	str	r3, [sp, #20]
 801020a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80102e0 <_vfiprintf_r+0x22c>
 801020e:	7821      	ldrb	r1, [r4, #0]
 8010210:	2203      	movs	r2, #3
 8010212:	4650      	mov	r0, sl
 8010214:	f7ef ffe4 	bl	80001e0 <memchr>
 8010218:	b138      	cbz	r0, 801022a <_vfiprintf_r+0x176>
 801021a:	9b04      	ldr	r3, [sp, #16]
 801021c:	eba0 000a 	sub.w	r0, r0, sl
 8010220:	2240      	movs	r2, #64	@ 0x40
 8010222:	4082      	lsls	r2, r0
 8010224:	4313      	orrs	r3, r2
 8010226:	3401      	adds	r4, #1
 8010228:	9304      	str	r3, [sp, #16]
 801022a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801022e:	4829      	ldr	r0, [pc, #164]	@ (80102d4 <_vfiprintf_r+0x220>)
 8010230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010234:	2206      	movs	r2, #6
 8010236:	f7ef ffd3 	bl	80001e0 <memchr>
 801023a:	2800      	cmp	r0, #0
 801023c:	d03f      	beq.n	80102be <_vfiprintf_r+0x20a>
 801023e:	4b26      	ldr	r3, [pc, #152]	@ (80102d8 <_vfiprintf_r+0x224>)
 8010240:	bb1b      	cbnz	r3, 801028a <_vfiprintf_r+0x1d6>
 8010242:	9b03      	ldr	r3, [sp, #12]
 8010244:	3307      	adds	r3, #7
 8010246:	f023 0307 	bic.w	r3, r3, #7
 801024a:	3308      	adds	r3, #8
 801024c:	9303      	str	r3, [sp, #12]
 801024e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010250:	443b      	add	r3, r7
 8010252:	9309      	str	r3, [sp, #36]	@ 0x24
 8010254:	e76a      	b.n	801012c <_vfiprintf_r+0x78>
 8010256:	fb0c 3202 	mla	r2, ip, r2, r3
 801025a:	460c      	mov	r4, r1
 801025c:	2001      	movs	r0, #1
 801025e:	e7a8      	b.n	80101b2 <_vfiprintf_r+0xfe>
 8010260:	2300      	movs	r3, #0
 8010262:	3401      	adds	r4, #1
 8010264:	9305      	str	r3, [sp, #20]
 8010266:	4619      	mov	r1, r3
 8010268:	f04f 0c0a 	mov.w	ip, #10
 801026c:	4620      	mov	r0, r4
 801026e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010272:	3a30      	subs	r2, #48	@ 0x30
 8010274:	2a09      	cmp	r2, #9
 8010276:	d903      	bls.n	8010280 <_vfiprintf_r+0x1cc>
 8010278:	2b00      	cmp	r3, #0
 801027a:	d0c6      	beq.n	801020a <_vfiprintf_r+0x156>
 801027c:	9105      	str	r1, [sp, #20]
 801027e:	e7c4      	b.n	801020a <_vfiprintf_r+0x156>
 8010280:	fb0c 2101 	mla	r1, ip, r1, r2
 8010284:	4604      	mov	r4, r0
 8010286:	2301      	movs	r3, #1
 8010288:	e7f0      	b.n	801026c <_vfiprintf_r+0x1b8>
 801028a:	ab03      	add	r3, sp, #12
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	462a      	mov	r2, r5
 8010290:	4b12      	ldr	r3, [pc, #72]	@ (80102dc <_vfiprintf_r+0x228>)
 8010292:	a904      	add	r1, sp, #16
 8010294:	4630      	mov	r0, r6
 8010296:	f7fb febb 	bl	800c010 <_printf_float>
 801029a:	4607      	mov	r7, r0
 801029c:	1c78      	adds	r0, r7, #1
 801029e:	d1d6      	bne.n	801024e <_vfiprintf_r+0x19a>
 80102a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80102a2:	07d9      	lsls	r1, r3, #31
 80102a4:	d405      	bmi.n	80102b2 <_vfiprintf_r+0x1fe>
 80102a6:	89ab      	ldrh	r3, [r5, #12]
 80102a8:	059a      	lsls	r2, r3, #22
 80102aa:	d402      	bmi.n	80102b2 <_vfiprintf_r+0x1fe>
 80102ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102ae:	f7fc fe1f 	bl	800cef0 <__retarget_lock_release_recursive>
 80102b2:	89ab      	ldrh	r3, [r5, #12]
 80102b4:	065b      	lsls	r3, r3, #25
 80102b6:	f53f af1f 	bmi.w	80100f8 <_vfiprintf_r+0x44>
 80102ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102bc:	e71e      	b.n	80100fc <_vfiprintf_r+0x48>
 80102be:	ab03      	add	r3, sp, #12
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	462a      	mov	r2, r5
 80102c4:	4b05      	ldr	r3, [pc, #20]	@ (80102dc <_vfiprintf_r+0x228>)
 80102c6:	a904      	add	r1, sp, #16
 80102c8:	4630      	mov	r0, r6
 80102ca:	f7fc f939 	bl	800c540 <_printf_i>
 80102ce:	e7e4      	b.n	801029a <_vfiprintf_r+0x1e6>
 80102d0:	08010991 	.word	0x08010991
 80102d4:	0801099b 	.word	0x0801099b
 80102d8:	0800c011 	.word	0x0800c011
 80102dc:	08010091 	.word	0x08010091
 80102e0:	08010997 	.word	0x08010997

080102e4 <__swbuf_r>:
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	460e      	mov	r6, r1
 80102e8:	4614      	mov	r4, r2
 80102ea:	4605      	mov	r5, r0
 80102ec:	b118      	cbz	r0, 80102f6 <__swbuf_r+0x12>
 80102ee:	6a03      	ldr	r3, [r0, #32]
 80102f0:	b90b      	cbnz	r3, 80102f6 <__swbuf_r+0x12>
 80102f2:	f7fc fce5 	bl	800ccc0 <__sinit>
 80102f6:	69a3      	ldr	r3, [r4, #24]
 80102f8:	60a3      	str	r3, [r4, #8]
 80102fa:	89a3      	ldrh	r3, [r4, #12]
 80102fc:	071a      	lsls	r2, r3, #28
 80102fe:	d501      	bpl.n	8010304 <__swbuf_r+0x20>
 8010300:	6923      	ldr	r3, [r4, #16]
 8010302:	b943      	cbnz	r3, 8010316 <__swbuf_r+0x32>
 8010304:	4621      	mov	r1, r4
 8010306:	4628      	mov	r0, r5
 8010308:	f000 f82a 	bl	8010360 <__swsetup_r>
 801030c:	b118      	cbz	r0, 8010316 <__swbuf_r+0x32>
 801030e:	f04f 37ff 	mov.w	r7, #4294967295
 8010312:	4638      	mov	r0, r7
 8010314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	6922      	ldr	r2, [r4, #16]
 801031a:	1a98      	subs	r0, r3, r2
 801031c:	6963      	ldr	r3, [r4, #20]
 801031e:	b2f6      	uxtb	r6, r6
 8010320:	4283      	cmp	r3, r0
 8010322:	4637      	mov	r7, r6
 8010324:	dc05      	bgt.n	8010332 <__swbuf_r+0x4e>
 8010326:	4621      	mov	r1, r4
 8010328:	4628      	mov	r0, r5
 801032a:	f7ff fa47 	bl	800f7bc <_fflush_r>
 801032e:	2800      	cmp	r0, #0
 8010330:	d1ed      	bne.n	801030e <__swbuf_r+0x2a>
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	3b01      	subs	r3, #1
 8010336:	60a3      	str	r3, [r4, #8]
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	1c5a      	adds	r2, r3, #1
 801033c:	6022      	str	r2, [r4, #0]
 801033e:	701e      	strb	r6, [r3, #0]
 8010340:	6962      	ldr	r2, [r4, #20]
 8010342:	1c43      	adds	r3, r0, #1
 8010344:	429a      	cmp	r2, r3
 8010346:	d004      	beq.n	8010352 <__swbuf_r+0x6e>
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	07db      	lsls	r3, r3, #31
 801034c:	d5e1      	bpl.n	8010312 <__swbuf_r+0x2e>
 801034e:	2e0a      	cmp	r6, #10
 8010350:	d1df      	bne.n	8010312 <__swbuf_r+0x2e>
 8010352:	4621      	mov	r1, r4
 8010354:	4628      	mov	r0, r5
 8010356:	f7ff fa31 	bl	800f7bc <_fflush_r>
 801035a:	2800      	cmp	r0, #0
 801035c:	d0d9      	beq.n	8010312 <__swbuf_r+0x2e>
 801035e:	e7d6      	b.n	801030e <__swbuf_r+0x2a>

08010360 <__swsetup_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4b29      	ldr	r3, [pc, #164]	@ (8010408 <__swsetup_r+0xa8>)
 8010364:	4605      	mov	r5, r0
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	460c      	mov	r4, r1
 801036a:	b118      	cbz	r0, 8010374 <__swsetup_r+0x14>
 801036c:	6a03      	ldr	r3, [r0, #32]
 801036e:	b90b      	cbnz	r3, 8010374 <__swsetup_r+0x14>
 8010370:	f7fc fca6 	bl	800ccc0 <__sinit>
 8010374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010378:	0719      	lsls	r1, r3, #28
 801037a:	d422      	bmi.n	80103c2 <__swsetup_r+0x62>
 801037c:	06da      	lsls	r2, r3, #27
 801037e:	d407      	bmi.n	8010390 <__swsetup_r+0x30>
 8010380:	2209      	movs	r2, #9
 8010382:	602a      	str	r2, [r5, #0]
 8010384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010388:	81a3      	strh	r3, [r4, #12]
 801038a:	f04f 30ff 	mov.w	r0, #4294967295
 801038e:	e033      	b.n	80103f8 <__swsetup_r+0x98>
 8010390:	0758      	lsls	r0, r3, #29
 8010392:	d512      	bpl.n	80103ba <__swsetup_r+0x5a>
 8010394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010396:	b141      	cbz	r1, 80103aa <__swsetup_r+0x4a>
 8010398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801039c:	4299      	cmp	r1, r3
 801039e:	d002      	beq.n	80103a6 <__swsetup_r+0x46>
 80103a0:	4628      	mov	r0, r5
 80103a2:	f7fd fbf9 	bl	800db98 <_free_r>
 80103a6:	2300      	movs	r3, #0
 80103a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80103aa:	89a3      	ldrh	r3, [r4, #12]
 80103ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80103b0:	81a3      	strh	r3, [r4, #12]
 80103b2:	2300      	movs	r3, #0
 80103b4:	6063      	str	r3, [r4, #4]
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	f043 0308 	orr.w	r3, r3, #8
 80103c0:	81a3      	strh	r3, [r4, #12]
 80103c2:	6923      	ldr	r3, [r4, #16]
 80103c4:	b94b      	cbnz	r3, 80103da <__swsetup_r+0x7a>
 80103c6:	89a3      	ldrh	r3, [r4, #12]
 80103c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80103cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103d0:	d003      	beq.n	80103da <__swsetup_r+0x7a>
 80103d2:	4621      	mov	r1, r4
 80103d4:	4628      	mov	r0, r5
 80103d6:	f000 f883 	bl	80104e0 <__smakebuf_r>
 80103da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103de:	f013 0201 	ands.w	r2, r3, #1
 80103e2:	d00a      	beq.n	80103fa <__swsetup_r+0x9a>
 80103e4:	2200      	movs	r2, #0
 80103e6:	60a2      	str	r2, [r4, #8]
 80103e8:	6962      	ldr	r2, [r4, #20]
 80103ea:	4252      	negs	r2, r2
 80103ec:	61a2      	str	r2, [r4, #24]
 80103ee:	6922      	ldr	r2, [r4, #16]
 80103f0:	b942      	cbnz	r2, 8010404 <__swsetup_r+0xa4>
 80103f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80103f6:	d1c5      	bne.n	8010384 <__swsetup_r+0x24>
 80103f8:	bd38      	pop	{r3, r4, r5, pc}
 80103fa:	0799      	lsls	r1, r3, #30
 80103fc:	bf58      	it	pl
 80103fe:	6962      	ldrpl	r2, [r4, #20]
 8010400:	60a2      	str	r2, [r4, #8]
 8010402:	e7f4      	b.n	80103ee <__swsetup_r+0x8e>
 8010404:	2000      	movs	r0, #0
 8010406:	e7f7      	b.n	80103f8 <__swsetup_r+0x98>
 8010408:	2000010c 	.word	0x2000010c

0801040c <_raise_r>:
 801040c:	291f      	cmp	r1, #31
 801040e:	b538      	push	{r3, r4, r5, lr}
 8010410:	4605      	mov	r5, r0
 8010412:	460c      	mov	r4, r1
 8010414:	d904      	bls.n	8010420 <_raise_r+0x14>
 8010416:	2316      	movs	r3, #22
 8010418:	6003      	str	r3, [r0, #0]
 801041a:	f04f 30ff 	mov.w	r0, #4294967295
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010422:	b112      	cbz	r2, 801042a <_raise_r+0x1e>
 8010424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010428:	b94b      	cbnz	r3, 801043e <_raise_r+0x32>
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f830 	bl	8010490 <_getpid_r>
 8010430:	4622      	mov	r2, r4
 8010432:	4601      	mov	r1, r0
 8010434:	4628      	mov	r0, r5
 8010436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801043a:	f000 b817 	b.w	801046c <_kill_r>
 801043e:	2b01      	cmp	r3, #1
 8010440:	d00a      	beq.n	8010458 <_raise_r+0x4c>
 8010442:	1c59      	adds	r1, r3, #1
 8010444:	d103      	bne.n	801044e <_raise_r+0x42>
 8010446:	2316      	movs	r3, #22
 8010448:	6003      	str	r3, [r0, #0]
 801044a:	2001      	movs	r0, #1
 801044c:	e7e7      	b.n	801041e <_raise_r+0x12>
 801044e:	2100      	movs	r1, #0
 8010450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010454:	4620      	mov	r0, r4
 8010456:	4798      	blx	r3
 8010458:	2000      	movs	r0, #0
 801045a:	e7e0      	b.n	801041e <_raise_r+0x12>

0801045c <raise>:
 801045c:	4b02      	ldr	r3, [pc, #8]	@ (8010468 <raise+0xc>)
 801045e:	4601      	mov	r1, r0
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f7ff bfd3 	b.w	801040c <_raise_r>
 8010466:	bf00      	nop
 8010468:	2000010c 	.word	0x2000010c

0801046c <_kill_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d07      	ldr	r5, [pc, #28]	@ (801048c <_kill_r+0x20>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	4611      	mov	r1, r2
 8010478:	602b      	str	r3, [r5, #0]
 801047a:	f7f1 fa67 	bl	800194c <_kill>
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	d102      	bne.n	8010488 <_kill_r+0x1c>
 8010482:	682b      	ldr	r3, [r5, #0]
 8010484:	b103      	cbz	r3, 8010488 <_kill_r+0x1c>
 8010486:	6023      	str	r3, [r4, #0]
 8010488:	bd38      	pop	{r3, r4, r5, pc}
 801048a:	bf00      	nop
 801048c:	2000241c 	.word	0x2000241c

08010490 <_getpid_r>:
 8010490:	f7f1 ba54 	b.w	800193c <_getpid>

08010494 <__swhatbuf_r>:
 8010494:	b570      	push	{r4, r5, r6, lr}
 8010496:	460c      	mov	r4, r1
 8010498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801049c:	2900      	cmp	r1, #0
 801049e:	b096      	sub	sp, #88	@ 0x58
 80104a0:	4615      	mov	r5, r2
 80104a2:	461e      	mov	r6, r3
 80104a4:	da0d      	bge.n	80104c2 <__swhatbuf_r+0x2e>
 80104a6:	89a3      	ldrh	r3, [r4, #12]
 80104a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104ac:	f04f 0100 	mov.w	r1, #0
 80104b0:	bf14      	ite	ne
 80104b2:	2340      	movne	r3, #64	@ 0x40
 80104b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104b8:	2000      	movs	r0, #0
 80104ba:	6031      	str	r1, [r6, #0]
 80104bc:	602b      	str	r3, [r5, #0]
 80104be:	b016      	add	sp, #88	@ 0x58
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
 80104c2:	466a      	mov	r2, sp
 80104c4:	f000 f848 	bl	8010558 <_fstat_r>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	dbec      	blt.n	80104a6 <__swhatbuf_r+0x12>
 80104cc:	9901      	ldr	r1, [sp, #4]
 80104ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104d6:	4259      	negs	r1, r3
 80104d8:	4159      	adcs	r1, r3
 80104da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104de:	e7eb      	b.n	80104b8 <__swhatbuf_r+0x24>

080104e0 <__smakebuf_r>:
 80104e0:	898b      	ldrh	r3, [r1, #12]
 80104e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104e4:	079d      	lsls	r5, r3, #30
 80104e6:	4606      	mov	r6, r0
 80104e8:	460c      	mov	r4, r1
 80104ea:	d507      	bpl.n	80104fc <__smakebuf_r+0x1c>
 80104ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	6123      	str	r3, [r4, #16]
 80104f4:	2301      	movs	r3, #1
 80104f6:	6163      	str	r3, [r4, #20]
 80104f8:	b003      	add	sp, #12
 80104fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104fc:	ab01      	add	r3, sp, #4
 80104fe:	466a      	mov	r2, sp
 8010500:	f7ff ffc8 	bl	8010494 <__swhatbuf_r>
 8010504:	9f00      	ldr	r7, [sp, #0]
 8010506:	4605      	mov	r5, r0
 8010508:	4639      	mov	r1, r7
 801050a:	4630      	mov	r0, r6
 801050c:	f7fd fbb8 	bl	800dc80 <_malloc_r>
 8010510:	b948      	cbnz	r0, 8010526 <__smakebuf_r+0x46>
 8010512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010516:	059a      	lsls	r2, r3, #22
 8010518:	d4ee      	bmi.n	80104f8 <__smakebuf_r+0x18>
 801051a:	f023 0303 	bic.w	r3, r3, #3
 801051e:	f043 0302 	orr.w	r3, r3, #2
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	e7e2      	b.n	80104ec <__smakebuf_r+0xc>
 8010526:	89a3      	ldrh	r3, [r4, #12]
 8010528:	6020      	str	r0, [r4, #0]
 801052a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801052e:	81a3      	strh	r3, [r4, #12]
 8010530:	9b01      	ldr	r3, [sp, #4]
 8010532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010536:	b15b      	cbz	r3, 8010550 <__smakebuf_r+0x70>
 8010538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801053c:	4630      	mov	r0, r6
 801053e:	f000 f81d 	bl	801057c <_isatty_r>
 8010542:	b128      	cbz	r0, 8010550 <__smakebuf_r+0x70>
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	f023 0303 	bic.w	r3, r3, #3
 801054a:	f043 0301 	orr.w	r3, r3, #1
 801054e:	81a3      	strh	r3, [r4, #12]
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	431d      	orrs	r5, r3
 8010554:	81a5      	strh	r5, [r4, #12]
 8010556:	e7cf      	b.n	80104f8 <__smakebuf_r+0x18>

08010558 <_fstat_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d07      	ldr	r5, [pc, #28]	@ (8010578 <_fstat_r+0x20>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	4611      	mov	r1, r2
 8010564:	602b      	str	r3, [r5, #0]
 8010566:	f7f1 fa51 	bl	8001a0c <_fstat>
 801056a:	1c43      	adds	r3, r0, #1
 801056c:	d102      	bne.n	8010574 <_fstat_r+0x1c>
 801056e:	682b      	ldr	r3, [r5, #0]
 8010570:	b103      	cbz	r3, 8010574 <_fstat_r+0x1c>
 8010572:	6023      	str	r3, [r4, #0]
 8010574:	bd38      	pop	{r3, r4, r5, pc}
 8010576:	bf00      	nop
 8010578:	2000241c 	.word	0x2000241c

0801057c <_isatty_r>:
 801057c:	b538      	push	{r3, r4, r5, lr}
 801057e:	4d06      	ldr	r5, [pc, #24]	@ (8010598 <_isatty_r+0x1c>)
 8010580:	2300      	movs	r3, #0
 8010582:	4604      	mov	r4, r0
 8010584:	4608      	mov	r0, r1
 8010586:	602b      	str	r3, [r5, #0]
 8010588:	f7f1 fa50 	bl	8001a2c <_isatty>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_isatty_r+0x1a>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	b103      	cbz	r3, 8010596 <_isatty_r+0x1a>
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	2000241c 	.word	0x2000241c

0801059c <_init>:
 801059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059e:	bf00      	nop
 80105a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105a2:	bc08      	pop	{r3}
 80105a4:	469e      	mov	lr, r3
 80105a6:	4770      	bx	lr

080105a8 <_fini>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	bf00      	nop
 80105ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ae:	bc08      	pop	{r3}
 80105b0:	469e      	mov	lr, r3
 80105b2:	4770      	bx	lr
=======
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	2b03      	cmp	r3, #3
 800c432:	d817      	bhi.n	800c464 <USBD_Get_USB_Status+0x44>
 800c434:	a201      	add	r2, pc, #4	@ (adr r2, 800c43c <USBD_Get_USB_Status+0x1c>)
 800c436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43a:	bf00      	nop
 800c43c:	0800c44d 	.word	0x0800c44d
 800c440:	0800c453 	.word	0x0800c453
 800c444:	0800c459 	.word	0x0800c459
 800c448:	0800c45f 	.word	0x0800c45f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
    break;
 800c450:	e00b      	b.n	800c46a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
    break;
 800c456:	e008      	b.n	800c46a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c458:	2301      	movs	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	e005      	b.n	800c46a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c45e:	2303      	movs	r3, #3
 800c460:	73fb      	strb	r3, [r7, #15]
    break;
 800c462:	e002      	b.n	800c46a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c464:	2303      	movs	r3, #3
 800c466:	73fb      	strb	r3, [r7, #15]
    break;
 800c468:	bf00      	nop
  }
  return usb_status;
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <__cvt>:
 800c478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c47c:	ec57 6b10 	vmov	r6, r7, d0
 800c480:	2f00      	cmp	r7, #0
 800c482:	460c      	mov	r4, r1
 800c484:	4619      	mov	r1, r3
 800c486:	463b      	mov	r3, r7
 800c488:	bfbb      	ittet	lt
 800c48a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c48e:	461f      	movlt	r7, r3
 800c490:	2300      	movge	r3, #0
 800c492:	232d      	movlt	r3, #45	@ 0x2d
 800c494:	700b      	strb	r3, [r1, #0]
 800c496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c498:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c49c:	4691      	mov	r9, r2
 800c49e:	f023 0820 	bic.w	r8, r3, #32
 800c4a2:	bfbc      	itt	lt
 800c4a4:	4632      	movlt	r2, r6
 800c4a6:	4616      	movlt	r6, r2
 800c4a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4ac:	d005      	beq.n	800c4ba <__cvt+0x42>
 800c4ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c4b2:	d100      	bne.n	800c4b6 <__cvt+0x3e>
 800c4b4:	3401      	adds	r4, #1
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	e000      	b.n	800c4bc <__cvt+0x44>
 800c4ba:	2103      	movs	r1, #3
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	ab02      	add	r3, sp, #8
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	ec47 6b10 	vmov	d0, r6, r7
 800c4c8:	4653      	mov	r3, sl
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	f001 f874 	bl	800d5b8 <_dtoa_r>
 800c4d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	d119      	bne.n	800c50c <__cvt+0x94>
 800c4d8:	f019 0f01 	tst.w	r9, #1
 800c4dc:	d00e      	beq.n	800c4fc <__cvt+0x84>
 800c4de:	eb00 0904 	add.w	r9, r0, r4
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	f7f4 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4ee:	b108      	cbz	r0, 800c4f4 <__cvt+0x7c>
 800c4f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4f4:	2230      	movs	r2, #48	@ 0x30
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	454b      	cmp	r3, r9
 800c4fa:	d31e      	bcc.n	800c53a <__cvt+0xc2>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c500:	1b5b      	subs	r3, r3, r5
 800c502:	4628      	mov	r0, r5
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	b004      	add	sp, #16
 800c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c510:	eb00 0904 	add.w	r9, r0, r4
 800c514:	d1e5      	bne.n	800c4e2 <__cvt+0x6a>
 800c516:	7803      	ldrb	r3, [r0, #0]
 800c518:	2b30      	cmp	r3, #48	@ 0x30
 800c51a:	d10a      	bne.n	800c532 <__cvt+0xba>
 800c51c:	2200      	movs	r2, #0
 800c51e:	2300      	movs	r3, #0
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	f7f4 fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c528:	b918      	cbnz	r0, 800c532 <__cvt+0xba>
 800c52a:	f1c4 0401 	rsb	r4, r4, #1
 800c52e:	f8ca 4000 	str.w	r4, [sl]
 800c532:	f8da 3000 	ldr.w	r3, [sl]
 800c536:	4499      	add	r9, r3
 800c538:	e7d3      	b.n	800c4e2 <__cvt+0x6a>
 800c53a:	1c59      	adds	r1, r3, #1
 800c53c:	9103      	str	r1, [sp, #12]
 800c53e:	701a      	strb	r2, [r3, #0]
 800c540:	e7d9      	b.n	800c4f6 <__cvt+0x7e>

0800c542 <__exponent>:
 800c542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c544:	2900      	cmp	r1, #0
 800c546:	bfba      	itte	lt
 800c548:	4249      	neglt	r1, r1
 800c54a:	232d      	movlt	r3, #45	@ 0x2d
 800c54c:	232b      	movge	r3, #43	@ 0x2b
 800c54e:	2909      	cmp	r1, #9
 800c550:	7002      	strb	r2, [r0, #0]
 800c552:	7043      	strb	r3, [r0, #1]
 800c554:	dd29      	ble.n	800c5aa <__exponent+0x68>
 800c556:	f10d 0307 	add.w	r3, sp, #7
 800c55a:	461d      	mov	r5, r3
 800c55c:	270a      	movs	r7, #10
 800c55e:	461a      	mov	r2, r3
 800c560:	fbb1 f6f7 	udiv	r6, r1, r7
 800c564:	fb07 1416 	mls	r4, r7, r6, r1
 800c568:	3430      	adds	r4, #48	@ 0x30
 800c56a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c56e:	460c      	mov	r4, r1
 800c570:	2c63      	cmp	r4, #99	@ 0x63
 800c572:	f103 33ff 	add.w	r3, r3, #4294967295
 800c576:	4631      	mov	r1, r6
 800c578:	dcf1      	bgt.n	800c55e <__exponent+0x1c>
 800c57a:	3130      	adds	r1, #48	@ 0x30
 800c57c:	1e94      	subs	r4, r2, #2
 800c57e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c582:	1c41      	adds	r1, r0, #1
 800c584:	4623      	mov	r3, r4
 800c586:	42ab      	cmp	r3, r5
 800c588:	d30a      	bcc.n	800c5a0 <__exponent+0x5e>
 800c58a:	f10d 0309 	add.w	r3, sp, #9
 800c58e:	1a9b      	subs	r3, r3, r2
 800c590:	42ac      	cmp	r4, r5
 800c592:	bf88      	it	hi
 800c594:	2300      	movhi	r3, #0
 800c596:	3302      	adds	r3, #2
 800c598:	4403      	add	r3, r0
 800c59a:	1a18      	subs	r0, r3, r0
 800c59c:	b003      	add	sp, #12
 800c59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c5a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c5a8:	e7ed      	b.n	800c586 <__exponent+0x44>
 800c5aa:	2330      	movs	r3, #48	@ 0x30
 800c5ac:	3130      	adds	r1, #48	@ 0x30
 800c5ae:	7083      	strb	r3, [r0, #2]
 800c5b0:	70c1      	strb	r1, [r0, #3]
 800c5b2:	1d03      	adds	r3, r0, #4
 800c5b4:	e7f1      	b.n	800c59a <__exponent+0x58>
	...

0800c5b8 <_printf_float>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	b08d      	sub	sp, #52	@ 0x34
 800c5be:	460c      	mov	r4, r1
 800c5c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5c4:	4616      	mov	r6, r2
 800c5c6:	461f      	mov	r7, r3
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	f000 feef 	bl	800d3ac <_localeconv_r>
 800c5ce:	6803      	ldr	r3, [r0, #0]
 800c5d0:	9304      	str	r3, [sp, #16]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f3 fe54 	bl	8000280 <strlen>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e0:	9005      	str	r0, [sp, #20]
 800c5e2:	3307      	adds	r3, #7
 800c5e4:	f023 0307 	bic.w	r3, r3, #7
 800c5e8:	f103 0208 	add.w	r2, r3, #8
 800c5ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5f0:	f8d4 b000 	ldr.w	fp, [r4]
 800c5f4:	f8c8 2000 	str.w	r2, [r8]
 800c5f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c600:	9307      	str	r3, [sp, #28]
 800c602:	f8cd 8018 	str.w	r8, [sp, #24]
 800c606:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c60e:	4b9c      	ldr	r3, [pc, #624]	@ (800c880 <_printf_float+0x2c8>)
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	f7f4 fa92 	bl	8000b3c <__aeabi_dcmpun>
 800c618:	bb70      	cbnz	r0, 800c678 <_printf_float+0xc0>
 800c61a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61e:	4b98      	ldr	r3, [pc, #608]	@ (800c880 <_printf_float+0x2c8>)
 800c620:	f04f 32ff 	mov.w	r2, #4294967295
 800c624:	f7f4 fa6c 	bl	8000b00 <__aeabi_dcmple>
 800c628:	bb30      	cbnz	r0, 800c678 <_printf_float+0xc0>
 800c62a:	2200      	movs	r2, #0
 800c62c:	2300      	movs	r3, #0
 800c62e:	4640      	mov	r0, r8
 800c630:	4649      	mov	r1, r9
 800c632:	f7f4 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800c636:	b110      	cbz	r0, 800c63e <_printf_float+0x86>
 800c638:	232d      	movs	r3, #45	@ 0x2d
 800c63a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c63e:	4a91      	ldr	r2, [pc, #580]	@ (800c884 <_printf_float+0x2cc>)
 800c640:	4b91      	ldr	r3, [pc, #580]	@ (800c888 <_printf_float+0x2d0>)
 800c642:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c646:	bf94      	ite	ls
 800c648:	4690      	movls	r8, r2
 800c64a:	4698      	movhi	r8, r3
 800c64c:	2303      	movs	r3, #3
 800c64e:	6123      	str	r3, [r4, #16]
 800c650:	f02b 0304 	bic.w	r3, fp, #4
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	9700      	str	r7, [sp, #0]
 800c65c:	4633      	mov	r3, r6
 800c65e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f000 f9d2 	bl	800ca0c <_printf_common>
 800c668:	3001      	adds	r0, #1
 800c66a:	f040 808d 	bne.w	800c788 <_printf_float+0x1d0>
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295
 800c672:	b00d      	add	sp, #52	@ 0x34
 800c674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f4 fa5c 	bl	8000b3c <__aeabi_dcmpun>
 800c684:	b140      	cbz	r0, 800c698 <_printf_float+0xe0>
 800c686:	464b      	mov	r3, r9
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bfbc      	itt	lt
 800c68c:	232d      	movlt	r3, #45	@ 0x2d
 800c68e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c692:	4a7e      	ldr	r2, [pc, #504]	@ (800c88c <_printf_float+0x2d4>)
 800c694:	4b7e      	ldr	r3, [pc, #504]	@ (800c890 <_printf_float+0x2d8>)
 800c696:	e7d4      	b.n	800c642 <_printf_float+0x8a>
 800c698:	6863      	ldr	r3, [r4, #4]
 800c69a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c69e:	9206      	str	r2, [sp, #24]
 800c6a0:	1c5a      	adds	r2, r3, #1
 800c6a2:	d13b      	bne.n	800c71c <_printf_float+0x164>
 800c6a4:	2306      	movs	r3, #6
 800c6a6:	6063      	str	r3, [r4, #4]
 800c6a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	6022      	str	r2, [r4, #0]
 800c6b0:	9303      	str	r3, [sp, #12]
 800c6b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c6b8:	ab09      	add	r3, sp, #36	@ 0x24
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	ec49 8b10 	vmov	d0, r8, r9
 800c6c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	f7ff fed6 	bl	800c478 <__cvt>
 800c6cc:	9b06      	ldr	r3, [sp, #24]
 800c6ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6d0:	2b47      	cmp	r3, #71	@ 0x47
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	d129      	bne.n	800c72a <_printf_float+0x172>
 800c6d6:	1cc8      	adds	r0, r1, #3
 800c6d8:	db02      	blt.n	800c6e0 <_printf_float+0x128>
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	4299      	cmp	r1, r3
 800c6de:	dd41      	ble.n	800c764 <_printf_float+0x1ac>
 800c6e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6e4:	fa5f fa8a 	uxtb.w	sl, sl
 800c6e8:	3901      	subs	r1, #1
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6f2:	f7ff ff26 	bl	800c542 <__exponent>
 800c6f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6f8:	1813      	adds	r3, r2, r0
 800c6fa:	2a01      	cmp	r2, #1
 800c6fc:	4681      	mov	r9, r0
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	dc02      	bgt.n	800c708 <_printf_float+0x150>
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	07d2      	lsls	r2, r2, #31
 800c706:	d501      	bpl.n	800c70c <_printf_float+0x154>
 800c708:	3301      	adds	r3, #1
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0a2      	beq.n	800c65a <_printf_float+0xa2>
 800c714:	232d      	movs	r3, #45	@ 0x2d
 800c716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c71a:	e79e      	b.n	800c65a <_printf_float+0xa2>
 800c71c:	9a06      	ldr	r2, [sp, #24]
 800c71e:	2a47      	cmp	r2, #71	@ 0x47
 800c720:	d1c2      	bne.n	800c6a8 <_printf_float+0xf0>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1c0      	bne.n	800c6a8 <_printf_float+0xf0>
 800c726:	2301      	movs	r3, #1
 800c728:	e7bd      	b.n	800c6a6 <_printf_float+0xee>
 800c72a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c72e:	d9db      	bls.n	800c6e8 <_printf_float+0x130>
 800c730:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c734:	d118      	bne.n	800c768 <_printf_float+0x1b0>
 800c736:	2900      	cmp	r1, #0
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	dd0b      	ble.n	800c754 <_printf_float+0x19c>
 800c73c:	6121      	str	r1, [r4, #16]
 800c73e:	b913      	cbnz	r3, 800c746 <_printf_float+0x18e>
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	07d0      	lsls	r0, r2, #31
 800c744:	d502      	bpl.n	800c74c <_printf_float+0x194>
 800c746:	3301      	adds	r3, #1
 800c748:	440b      	add	r3, r1
 800c74a:	6123      	str	r3, [r4, #16]
 800c74c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c74e:	f04f 0900 	mov.w	r9, #0
 800c752:	e7db      	b.n	800c70c <_printf_float+0x154>
 800c754:	b913      	cbnz	r3, 800c75c <_printf_float+0x1a4>
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	07d2      	lsls	r2, r2, #31
 800c75a:	d501      	bpl.n	800c760 <_printf_float+0x1a8>
 800c75c:	3302      	adds	r3, #2
 800c75e:	e7f4      	b.n	800c74a <_printf_float+0x192>
 800c760:	2301      	movs	r3, #1
 800c762:	e7f2      	b.n	800c74a <_printf_float+0x192>
 800c764:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c76a:	4299      	cmp	r1, r3
 800c76c:	db05      	blt.n	800c77a <_printf_float+0x1c2>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	6121      	str	r1, [r4, #16]
 800c772:	07d8      	lsls	r0, r3, #31
 800c774:	d5ea      	bpl.n	800c74c <_printf_float+0x194>
 800c776:	1c4b      	adds	r3, r1, #1
 800c778:	e7e7      	b.n	800c74a <_printf_float+0x192>
 800c77a:	2900      	cmp	r1, #0
 800c77c:	bfd4      	ite	le
 800c77e:	f1c1 0202 	rsble	r2, r1, #2
 800c782:	2201      	movgt	r2, #1
 800c784:	4413      	add	r3, r2
 800c786:	e7e0      	b.n	800c74a <_printf_float+0x192>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	055a      	lsls	r2, r3, #21
 800c78c:	d407      	bmi.n	800c79e <_printf_float+0x1e6>
 800c78e:	6923      	ldr	r3, [r4, #16]
 800c790:	4642      	mov	r2, r8
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	d12b      	bne.n	800c7f4 <_printf_float+0x23c>
 800c79c:	e767      	b.n	800c66e <_printf_float+0xb6>
 800c79e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c7a2:	f240 80dd 	bls.w	800c960 <_printf_float+0x3a8>
 800c7a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f7f4 f993 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d033      	beq.n	800c81e <_printf_float+0x266>
 800c7b6:	4a37      	ldr	r2, [pc, #220]	@ (800c894 <_printf_float+0x2dc>)
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	4628      	mov	r0, r5
 800c7be:	47b8      	blx	r7
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	f43f af54 	beq.w	800c66e <_printf_float+0xb6>
 800c7c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7ca:	4543      	cmp	r3, r8
 800c7cc:	db02      	blt.n	800c7d4 <_printf_float+0x21c>
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	07d8      	lsls	r0, r3, #31
 800c7d2:	d50f      	bpl.n	800c7f4 <_printf_float+0x23c>
 800c7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7d8:	4631      	mov	r1, r6
 800c7da:	4628      	mov	r0, r5
 800c7dc:	47b8      	blx	r7
 800c7de:	3001      	adds	r0, #1
 800c7e0:	f43f af45 	beq.w	800c66e <_printf_float+0xb6>
 800c7e4:	f04f 0900 	mov.w	r9, #0
 800c7e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7ec:	f104 0a1a 	add.w	sl, r4, #26
 800c7f0:	45c8      	cmp	r8, r9
 800c7f2:	dc09      	bgt.n	800c808 <_printf_float+0x250>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	079b      	lsls	r3, r3, #30
 800c7f8:	f100 8103 	bmi.w	800ca02 <_printf_float+0x44a>
 800c7fc:	68e0      	ldr	r0, [r4, #12]
 800c7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c800:	4298      	cmp	r0, r3
 800c802:	bfb8      	it	lt
 800c804:	4618      	movlt	r0, r3
 800c806:	e734      	b.n	800c672 <_printf_float+0xba>
 800c808:	2301      	movs	r3, #1
 800c80a:	4652      	mov	r2, sl
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	f43f af2b 	beq.w	800c66e <_printf_float+0xb6>
 800c818:	f109 0901 	add.w	r9, r9, #1
 800c81c:	e7e8      	b.n	800c7f0 <_printf_float+0x238>
 800c81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c820:	2b00      	cmp	r3, #0
 800c822:	dc39      	bgt.n	800c898 <_printf_float+0x2e0>
 800c824:	4a1b      	ldr	r2, [pc, #108]	@ (800c894 <_printf_float+0x2dc>)
 800c826:	2301      	movs	r3, #1
 800c828:	4631      	mov	r1, r6
 800c82a:	4628      	mov	r0, r5
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	f43f af1d 	beq.w	800c66e <_printf_float+0xb6>
 800c834:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c838:	ea59 0303 	orrs.w	r3, r9, r3
 800c83c:	d102      	bne.n	800c844 <_printf_float+0x28c>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	07d9      	lsls	r1, r3, #31
 800c842:	d5d7      	bpl.n	800c7f4 <_printf_float+0x23c>
 800c844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c848:	4631      	mov	r1, r6
 800c84a:	4628      	mov	r0, r5
 800c84c:	47b8      	blx	r7
 800c84e:	3001      	adds	r0, #1
 800c850:	f43f af0d 	beq.w	800c66e <_printf_float+0xb6>
 800c854:	f04f 0a00 	mov.w	sl, #0
 800c858:	f104 0b1a 	add.w	fp, r4, #26
 800c85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c85e:	425b      	negs	r3, r3
 800c860:	4553      	cmp	r3, sl
 800c862:	dc01      	bgt.n	800c868 <_printf_float+0x2b0>
 800c864:	464b      	mov	r3, r9
 800c866:	e793      	b.n	800c790 <_printf_float+0x1d8>
 800c868:	2301      	movs	r3, #1
 800c86a:	465a      	mov	r2, fp
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f aefb 	beq.w	800c66e <_printf_float+0xb6>
 800c878:	f10a 0a01 	add.w	sl, sl, #1
 800c87c:	e7ee      	b.n	800c85c <_printf_float+0x2a4>
 800c87e:	bf00      	nop
 800c880:	7fefffff 	.word	0x7fefffff
 800c884:	08011a88 	.word	0x08011a88
 800c888:	08011a8c 	.word	0x08011a8c
 800c88c:	08011a90 	.word	0x08011a90
 800c890:	08011a94 	.word	0x08011a94
 800c894:	08011a98 	.word	0x08011a98
 800c898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c89a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c89e:	4553      	cmp	r3, sl
 800c8a0:	bfa8      	it	ge
 800c8a2:	4653      	movge	r3, sl
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	4699      	mov	r9, r3
 800c8a8:	dc36      	bgt.n	800c918 <_printf_float+0x360>
 800c8aa:	f04f 0b00 	mov.w	fp, #0
 800c8ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8b2:	f104 021a 	add.w	r2, r4, #26
 800c8b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8b8:	9306      	str	r3, [sp, #24]
 800c8ba:	eba3 0309 	sub.w	r3, r3, r9
 800c8be:	455b      	cmp	r3, fp
 800c8c0:	dc31      	bgt.n	800c926 <_printf_float+0x36e>
 800c8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c4:	459a      	cmp	sl, r3
 800c8c6:	dc3a      	bgt.n	800c93e <_printf_float+0x386>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	07da      	lsls	r2, r3, #31
 800c8cc:	d437      	bmi.n	800c93e <_printf_float+0x386>
 800c8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d0:	ebaa 0903 	sub.w	r9, sl, r3
 800c8d4:	9b06      	ldr	r3, [sp, #24]
 800c8d6:	ebaa 0303 	sub.w	r3, sl, r3
 800c8da:	4599      	cmp	r9, r3
 800c8dc:	bfa8      	it	ge
 800c8de:	4699      	movge	r9, r3
 800c8e0:	f1b9 0f00 	cmp.w	r9, #0
 800c8e4:	dc33      	bgt.n	800c94e <_printf_float+0x396>
 800c8e6:	f04f 0800 	mov.w	r8, #0
 800c8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8ee:	f104 0b1a 	add.w	fp, r4, #26
 800c8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f4:	ebaa 0303 	sub.w	r3, sl, r3
 800c8f8:	eba3 0309 	sub.w	r3, r3, r9
 800c8fc:	4543      	cmp	r3, r8
 800c8fe:	f77f af79 	ble.w	800c7f4 <_printf_float+0x23c>
 800c902:	2301      	movs	r3, #1
 800c904:	465a      	mov	r2, fp
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	f43f aeae 	beq.w	800c66e <_printf_float+0xb6>
 800c912:	f108 0801 	add.w	r8, r8, #1
 800c916:	e7ec      	b.n	800c8f2 <_printf_float+0x33a>
 800c918:	4642      	mov	r2, r8
 800c91a:	4631      	mov	r1, r6
 800c91c:	4628      	mov	r0, r5
 800c91e:	47b8      	blx	r7
 800c920:	3001      	adds	r0, #1
 800c922:	d1c2      	bne.n	800c8aa <_printf_float+0x2f2>
 800c924:	e6a3      	b.n	800c66e <_printf_float+0xb6>
 800c926:	2301      	movs	r3, #1
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	9206      	str	r2, [sp, #24]
 800c92e:	47b8      	blx	r7
 800c930:	3001      	adds	r0, #1
 800c932:	f43f ae9c 	beq.w	800c66e <_printf_float+0xb6>
 800c936:	9a06      	ldr	r2, [sp, #24]
 800c938:	f10b 0b01 	add.w	fp, fp, #1
 800c93c:	e7bb      	b.n	800c8b6 <_printf_float+0x2fe>
 800c93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c942:	4631      	mov	r1, r6
 800c944:	4628      	mov	r0, r5
 800c946:	47b8      	blx	r7
 800c948:	3001      	adds	r0, #1
 800c94a:	d1c0      	bne.n	800c8ce <_printf_float+0x316>
 800c94c:	e68f      	b.n	800c66e <_printf_float+0xb6>
 800c94e:	9a06      	ldr	r2, [sp, #24]
 800c950:	464b      	mov	r3, r9
 800c952:	4442      	add	r2, r8
 800c954:	4631      	mov	r1, r6
 800c956:	4628      	mov	r0, r5
 800c958:	47b8      	blx	r7
 800c95a:	3001      	adds	r0, #1
 800c95c:	d1c3      	bne.n	800c8e6 <_printf_float+0x32e>
 800c95e:	e686      	b.n	800c66e <_printf_float+0xb6>
 800c960:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c964:	f1ba 0f01 	cmp.w	sl, #1
 800c968:	dc01      	bgt.n	800c96e <_printf_float+0x3b6>
 800c96a:	07db      	lsls	r3, r3, #31
 800c96c:	d536      	bpl.n	800c9dc <_printf_float+0x424>
 800c96e:	2301      	movs	r3, #1
 800c970:	4642      	mov	r2, r8
 800c972:	4631      	mov	r1, r6
 800c974:	4628      	mov	r0, r5
 800c976:	47b8      	blx	r7
 800c978:	3001      	adds	r0, #1
 800c97a:	f43f ae78 	beq.w	800c66e <_printf_float+0xb6>
 800c97e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c982:	4631      	mov	r1, r6
 800c984:	4628      	mov	r0, r5
 800c986:	47b8      	blx	r7
 800c988:	3001      	adds	r0, #1
 800c98a:	f43f ae70 	beq.w	800c66e <_printf_float+0xb6>
 800c98e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c992:	2200      	movs	r2, #0
 800c994:	2300      	movs	r3, #0
 800c996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c99a:	f7f4 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c99e:	b9c0      	cbnz	r0, 800c9d2 <_printf_float+0x41a>
 800c9a0:	4653      	mov	r3, sl
 800c9a2:	f108 0201 	add.w	r2, r8, #1
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d10c      	bne.n	800c9ca <_printf_float+0x412>
 800c9b0:	e65d      	b.n	800c66e <_printf_float+0xb6>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	465a      	mov	r2, fp
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b8      	blx	r7
 800c9bc:	3001      	adds	r0, #1
 800c9be:	f43f ae56 	beq.w	800c66e <_printf_float+0xb6>
 800c9c2:	f108 0801 	add.w	r8, r8, #1
 800c9c6:	45d0      	cmp	r8, sl
 800c9c8:	dbf3      	blt.n	800c9b2 <_printf_float+0x3fa>
 800c9ca:	464b      	mov	r3, r9
 800c9cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9d0:	e6df      	b.n	800c792 <_printf_float+0x1da>
 800c9d2:	f04f 0800 	mov.w	r8, #0
 800c9d6:	f104 0b1a 	add.w	fp, r4, #26
 800c9da:	e7f4      	b.n	800c9c6 <_printf_float+0x40e>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	4642      	mov	r2, r8
 800c9e0:	e7e1      	b.n	800c9a6 <_printf_float+0x3ee>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	464a      	mov	r2, r9
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	47b8      	blx	r7
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	f43f ae3e 	beq.w	800c66e <_printf_float+0xb6>
 800c9f2:	f108 0801 	add.w	r8, r8, #1
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9fa:	1a5b      	subs	r3, r3, r1
 800c9fc:	4543      	cmp	r3, r8
 800c9fe:	dcf0      	bgt.n	800c9e2 <_printf_float+0x42a>
 800ca00:	e6fc      	b.n	800c7fc <_printf_float+0x244>
 800ca02:	f04f 0800 	mov.w	r8, #0
 800ca06:	f104 0919 	add.w	r9, r4, #25
 800ca0a:	e7f4      	b.n	800c9f6 <_printf_float+0x43e>

0800ca0c <_printf_common>:
 800ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	4616      	mov	r6, r2
 800ca12:	4698      	mov	r8, r3
 800ca14:	688a      	ldr	r2, [r1, #8]
 800ca16:	690b      	ldr	r3, [r1, #16]
 800ca18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	bfb8      	it	lt
 800ca20:	4613      	movlt	r3, r2
 800ca22:	6033      	str	r3, [r6, #0]
 800ca24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca28:	4607      	mov	r7, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	b10a      	cbz	r2, 800ca32 <_printf_common+0x26>
 800ca2e:	3301      	adds	r3, #1
 800ca30:	6033      	str	r3, [r6, #0]
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	0699      	lsls	r1, r3, #26
 800ca36:	bf42      	ittt	mi
 800ca38:	6833      	ldrmi	r3, [r6, #0]
 800ca3a:	3302      	addmi	r3, #2
 800ca3c:	6033      	strmi	r3, [r6, #0]
 800ca3e:	6825      	ldr	r5, [r4, #0]
 800ca40:	f015 0506 	ands.w	r5, r5, #6
 800ca44:	d106      	bne.n	800ca54 <_printf_common+0x48>
 800ca46:	f104 0a19 	add.w	sl, r4, #25
 800ca4a:	68e3      	ldr	r3, [r4, #12]
 800ca4c:	6832      	ldr	r2, [r6, #0]
 800ca4e:	1a9b      	subs	r3, r3, r2
 800ca50:	42ab      	cmp	r3, r5
 800ca52:	dc26      	bgt.n	800caa2 <_printf_common+0x96>
 800ca54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	3b00      	subs	r3, #0
 800ca5c:	bf18      	it	ne
 800ca5e:	2301      	movne	r3, #1
 800ca60:	0692      	lsls	r2, r2, #26
 800ca62:	d42b      	bmi.n	800cabc <_printf_common+0xb0>
 800ca64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca68:	4641      	mov	r1, r8
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	47c8      	blx	r9
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d01e      	beq.n	800cab0 <_printf_common+0xa4>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	6922      	ldr	r2, [r4, #16]
 800ca76:	f003 0306 	and.w	r3, r3, #6
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	bf02      	ittt	eq
 800ca7e:	68e5      	ldreq	r5, [r4, #12]
 800ca80:	6833      	ldreq	r3, [r6, #0]
 800ca82:	1aed      	subeq	r5, r5, r3
 800ca84:	68a3      	ldr	r3, [r4, #8]
 800ca86:	bf0c      	ite	eq
 800ca88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca8c:	2500      	movne	r5, #0
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	bfc4      	itt	gt
 800ca92:	1a9b      	subgt	r3, r3, r2
 800ca94:	18ed      	addgt	r5, r5, r3
 800ca96:	2600      	movs	r6, #0
 800ca98:	341a      	adds	r4, #26
 800ca9a:	42b5      	cmp	r5, r6
 800ca9c:	d11a      	bne.n	800cad4 <_printf_common+0xc8>
 800ca9e:	2000      	movs	r0, #0
 800caa0:	e008      	b.n	800cab4 <_printf_common+0xa8>
 800caa2:	2301      	movs	r3, #1
 800caa4:	4652      	mov	r2, sl
 800caa6:	4641      	mov	r1, r8
 800caa8:	4638      	mov	r0, r7
 800caaa:	47c8      	blx	r9
 800caac:	3001      	adds	r0, #1
 800caae:	d103      	bne.n	800cab8 <_printf_common+0xac>
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab8:	3501      	adds	r5, #1
 800caba:	e7c6      	b.n	800ca4a <_printf_common+0x3e>
 800cabc:	18e1      	adds	r1, r4, r3
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	2030      	movs	r0, #48	@ 0x30
 800cac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cac6:	4422      	add	r2, r4
 800cac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cacc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cad0:	3302      	adds	r3, #2
 800cad2:	e7c7      	b.n	800ca64 <_printf_common+0x58>
 800cad4:	2301      	movs	r3, #1
 800cad6:	4622      	mov	r2, r4
 800cad8:	4641      	mov	r1, r8
 800cada:	4638      	mov	r0, r7
 800cadc:	47c8      	blx	r9
 800cade:	3001      	adds	r0, #1
 800cae0:	d0e6      	beq.n	800cab0 <_printf_common+0xa4>
 800cae2:	3601      	adds	r6, #1
 800cae4:	e7d9      	b.n	800ca9a <_printf_common+0x8e>
	...

0800cae8 <_printf_i>:
 800cae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caec:	7e0f      	ldrb	r7, [r1, #24]
 800caee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800caf0:	2f78      	cmp	r7, #120	@ 0x78
 800caf2:	4691      	mov	r9, r2
 800caf4:	4680      	mov	r8, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	469a      	mov	sl, r3
 800cafa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cafe:	d807      	bhi.n	800cb10 <_printf_i+0x28>
 800cb00:	2f62      	cmp	r7, #98	@ 0x62
 800cb02:	d80a      	bhi.n	800cb1a <_printf_i+0x32>
 800cb04:	2f00      	cmp	r7, #0
 800cb06:	f000 80d2 	beq.w	800ccae <_printf_i+0x1c6>
 800cb0a:	2f58      	cmp	r7, #88	@ 0x58
 800cb0c:	f000 80b9 	beq.w	800cc82 <_printf_i+0x19a>
 800cb10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb18:	e03a      	b.n	800cb90 <_printf_i+0xa8>
 800cb1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb1e:	2b15      	cmp	r3, #21
 800cb20:	d8f6      	bhi.n	800cb10 <_printf_i+0x28>
 800cb22:	a101      	add	r1, pc, #4	@ (adr r1, 800cb28 <_printf_i+0x40>)
 800cb24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb28:	0800cb81 	.word	0x0800cb81
 800cb2c:	0800cb95 	.word	0x0800cb95
 800cb30:	0800cb11 	.word	0x0800cb11
 800cb34:	0800cb11 	.word	0x0800cb11
 800cb38:	0800cb11 	.word	0x0800cb11
 800cb3c:	0800cb11 	.word	0x0800cb11
 800cb40:	0800cb95 	.word	0x0800cb95
 800cb44:	0800cb11 	.word	0x0800cb11
 800cb48:	0800cb11 	.word	0x0800cb11
 800cb4c:	0800cb11 	.word	0x0800cb11
 800cb50:	0800cb11 	.word	0x0800cb11
 800cb54:	0800cc95 	.word	0x0800cc95
 800cb58:	0800cbbf 	.word	0x0800cbbf
 800cb5c:	0800cc4f 	.word	0x0800cc4f
 800cb60:	0800cb11 	.word	0x0800cb11
 800cb64:	0800cb11 	.word	0x0800cb11
 800cb68:	0800ccb7 	.word	0x0800ccb7
 800cb6c:	0800cb11 	.word	0x0800cb11
 800cb70:	0800cbbf 	.word	0x0800cbbf
 800cb74:	0800cb11 	.word	0x0800cb11
 800cb78:	0800cb11 	.word	0x0800cb11
 800cb7c:	0800cc57 	.word	0x0800cc57
 800cb80:	6833      	ldr	r3, [r6, #0]
 800cb82:	1d1a      	adds	r2, r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6032      	str	r2, [r6, #0]
 800cb88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb90:	2301      	movs	r3, #1
 800cb92:	e09d      	b.n	800ccd0 <_printf_i+0x1e8>
 800cb94:	6833      	ldr	r3, [r6, #0]
 800cb96:	6820      	ldr	r0, [r4, #0]
 800cb98:	1d19      	adds	r1, r3, #4
 800cb9a:	6031      	str	r1, [r6, #0]
 800cb9c:	0606      	lsls	r6, r0, #24
 800cb9e:	d501      	bpl.n	800cba4 <_printf_i+0xbc>
 800cba0:	681d      	ldr	r5, [r3, #0]
 800cba2:	e003      	b.n	800cbac <_printf_i+0xc4>
 800cba4:	0645      	lsls	r5, r0, #25
 800cba6:	d5fb      	bpl.n	800cba0 <_printf_i+0xb8>
 800cba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	da03      	bge.n	800cbb8 <_printf_i+0xd0>
 800cbb0:	232d      	movs	r3, #45	@ 0x2d
 800cbb2:	426d      	negs	r5, r5
 800cbb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbb8:	4859      	ldr	r0, [pc, #356]	@ (800cd20 <_printf_i+0x238>)
 800cbba:	230a      	movs	r3, #10
 800cbbc:	e011      	b.n	800cbe2 <_printf_i+0xfa>
 800cbbe:	6821      	ldr	r1, [r4, #0]
 800cbc0:	6833      	ldr	r3, [r6, #0]
 800cbc2:	0608      	lsls	r0, r1, #24
 800cbc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbc8:	d402      	bmi.n	800cbd0 <_printf_i+0xe8>
 800cbca:	0649      	lsls	r1, r1, #25
 800cbcc:	bf48      	it	mi
 800cbce:	b2ad      	uxthmi	r5, r5
 800cbd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbd2:	4853      	ldr	r0, [pc, #332]	@ (800cd20 <_printf_i+0x238>)
 800cbd4:	6033      	str	r3, [r6, #0]
 800cbd6:	bf14      	ite	ne
 800cbd8:	230a      	movne	r3, #10
 800cbda:	2308      	moveq	r3, #8
 800cbdc:	2100      	movs	r1, #0
 800cbde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbe2:	6866      	ldr	r6, [r4, #4]
 800cbe4:	60a6      	str	r6, [r4, #8]
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	bfa2      	ittt	ge
 800cbea:	6821      	ldrge	r1, [r4, #0]
 800cbec:	f021 0104 	bicge.w	r1, r1, #4
 800cbf0:	6021      	strge	r1, [r4, #0]
 800cbf2:	b90d      	cbnz	r5, 800cbf8 <_printf_i+0x110>
 800cbf4:	2e00      	cmp	r6, #0
 800cbf6:	d04b      	beq.n	800cc90 <_printf_i+0x1a8>
 800cbf8:	4616      	mov	r6, r2
 800cbfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbfe:	fb03 5711 	mls	r7, r3, r1, r5
 800cc02:	5dc7      	ldrb	r7, [r0, r7]
 800cc04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc08:	462f      	mov	r7, r5
 800cc0a:	42bb      	cmp	r3, r7
 800cc0c:	460d      	mov	r5, r1
 800cc0e:	d9f4      	bls.n	800cbfa <_printf_i+0x112>
 800cc10:	2b08      	cmp	r3, #8
 800cc12:	d10b      	bne.n	800cc2c <_printf_i+0x144>
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	07df      	lsls	r7, r3, #31
 800cc18:	d508      	bpl.n	800cc2c <_printf_i+0x144>
 800cc1a:	6923      	ldr	r3, [r4, #16]
 800cc1c:	6861      	ldr	r1, [r4, #4]
 800cc1e:	4299      	cmp	r1, r3
 800cc20:	bfde      	ittt	le
 800cc22:	2330      	movle	r3, #48	@ 0x30
 800cc24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc2c:	1b92      	subs	r2, r2, r6
 800cc2e:	6122      	str	r2, [r4, #16]
 800cc30:	f8cd a000 	str.w	sl, [sp]
 800cc34:	464b      	mov	r3, r9
 800cc36:	aa03      	add	r2, sp, #12
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f7ff fee6 	bl	800ca0c <_printf_common>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d14a      	bne.n	800ccda <_printf_i+0x1f2>
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	b004      	add	sp, #16
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	f043 0320 	orr.w	r3, r3, #32
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	4833      	ldr	r0, [pc, #204]	@ (800cd24 <_printf_i+0x23c>)
 800cc58:	2778      	movs	r7, #120	@ 0x78
 800cc5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	6831      	ldr	r1, [r6, #0]
 800cc62:	061f      	lsls	r7, r3, #24
 800cc64:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc68:	d402      	bmi.n	800cc70 <_printf_i+0x188>
 800cc6a:	065f      	lsls	r7, r3, #25
 800cc6c:	bf48      	it	mi
 800cc6e:	b2ad      	uxthmi	r5, r5
 800cc70:	6031      	str	r1, [r6, #0]
 800cc72:	07d9      	lsls	r1, r3, #31
 800cc74:	bf44      	itt	mi
 800cc76:	f043 0320 	orrmi.w	r3, r3, #32
 800cc7a:	6023      	strmi	r3, [r4, #0]
 800cc7c:	b11d      	cbz	r5, 800cc86 <_printf_i+0x19e>
 800cc7e:	2310      	movs	r3, #16
 800cc80:	e7ac      	b.n	800cbdc <_printf_i+0xf4>
 800cc82:	4827      	ldr	r0, [pc, #156]	@ (800cd20 <_printf_i+0x238>)
 800cc84:	e7e9      	b.n	800cc5a <_printf_i+0x172>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	f023 0320 	bic.w	r3, r3, #32
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	e7f6      	b.n	800cc7e <_printf_i+0x196>
 800cc90:	4616      	mov	r6, r2
 800cc92:	e7bd      	b.n	800cc10 <_printf_i+0x128>
 800cc94:	6833      	ldr	r3, [r6, #0]
 800cc96:	6825      	ldr	r5, [r4, #0]
 800cc98:	6961      	ldr	r1, [r4, #20]
 800cc9a:	1d18      	adds	r0, r3, #4
 800cc9c:	6030      	str	r0, [r6, #0]
 800cc9e:	062e      	lsls	r6, r5, #24
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	d501      	bpl.n	800cca8 <_printf_i+0x1c0>
 800cca4:	6019      	str	r1, [r3, #0]
 800cca6:	e002      	b.n	800ccae <_printf_i+0x1c6>
 800cca8:	0668      	lsls	r0, r5, #25
 800ccaa:	d5fb      	bpl.n	800cca4 <_printf_i+0x1bc>
 800ccac:	8019      	strh	r1, [r3, #0]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	4616      	mov	r6, r2
 800ccb4:	e7bc      	b.n	800cc30 <_printf_i+0x148>
 800ccb6:	6833      	ldr	r3, [r6, #0]
 800ccb8:	1d1a      	adds	r2, r3, #4
 800ccba:	6032      	str	r2, [r6, #0]
 800ccbc:	681e      	ldr	r6, [r3, #0]
 800ccbe:	6862      	ldr	r2, [r4, #4]
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7f3 fa8c 	bl	80001e0 <memchr>
 800ccc8:	b108      	cbz	r0, 800ccce <_printf_i+0x1e6>
 800ccca:	1b80      	subs	r0, r0, r6
 800cccc:	6060      	str	r0, [r4, #4]
 800ccce:	6863      	ldr	r3, [r4, #4]
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd8:	e7aa      	b.n	800cc30 <_printf_i+0x148>
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4649      	mov	r1, r9
 800cce0:	4640      	mov	r0, r8
 800cce2:	47d0      	blx	sl
 800cce4:	3001      	adds	r0, #1
 800cce6:	d0ad      	beq.n	800cc44 <_printf_i+0x15c>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	079b      	lsls	r3, r3, #30
 800ccec:	d413      	bmi.n	800cd16 <_printf_i+0x22e>
 800ccee:	68e0      	ldr	r0, [r4, #12]
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	4298      	cmp	r0, r3
 800ccf4:	bfb8      	it	lt
 800ccf6:	4618      	movlt	r0, r3
 800ccf8:	e7a6      	b.n	800cc48 <_printf_i+0x160>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4640      	mov	r0, r8
 800cd02:	47d0      	blx	sl
 800cd04:	3001      	adds	r0, #1
 800cd06:	d09d      	beq.n	800cc44 <_printf_i+0x15c>
 800cd08:	3501      	adds	r5, #1
 800cd0a:	68e3      	ldr	r3, [r4, #12]
 800cd0c:	9903      	ldr	r1, [sp, #12]
 800cd0e:	1a5b      	subs	r3, r3, r1
 800cd10:	42ab      	cmp	r3, r5
 800cd12:	dcf2      	bgt.n	800ccfa <_printf_i+0x212>
 800cd14:	e7eb      	b.n	800ccee <_printf_i+0x206>
 800cd16:	2500      	movs	r5, #0
 800cd18:	f104 0619 	add.w	r6, r4, #25
 800cd1c:	e7f5      	b.n	800cd0a <_printf_i+0x222>
 800cd1e:	bf00      	nop
 800cd20:	08011a9a 	.word	0x08011a9a
 800cd24:	08011aab 	.word	0x08011aab

0800cd28 <_scanf_float>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	b087      	sub	sp, #28
 800cd2e:	4617      	mov	r7, r2
 800cd30:	9303      	str	r3, [sp, #12]
 800cd32:	688b      	ldr	r3, [r1, #8]
 800cd34:	1e5a      	subs	r2, r3, #1
 800cd36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cd3a:	bf81      	itttt	hi
 800cd3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cd40:	eb03 0b05 	addhi.w	fp, r3, r5
 800cd44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cd48:	608b      	strhi	r3, [r1, #8]
 800cd4a:	680b      	ldr	r3, [r1, #0]
 800cd4c:	460a      	mov	r2, r1
 800cd4e:	f04f 0500 	mov.w	r5, #0
 800cd52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cd56:	f842 3b1c 	str.w	r3, [r2], #28
 800cd5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd5e:	4680      	mov	r8, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	bf98      	it	ls
 800cd64:	f04f 0b00 	movls.w	fp, #0
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	4616      	mov	r6, r2
 800cd6c:	46aa      	mov	sl, r5
 800cd6e:	46a9      	mov	r9, r5
 800cd70:	9502      	str	r5, [sp, #8]
 800cd72:	68a2      	ldr	r2, [r4, #8]
 800cd74:	b152      	cbz	r2, 800cd8c <_scanf_float+0x64>
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b4e      	cmp	r3, #78	@ 0x4e
 800cd7c:	d864      	bhi.n	800ce48 <_scanf_float+0x120>
 800cd7e:	2b40      	cmp	r3, #64	@ 0x40
 800cd80:	d83c      	bhi.n	800cdfc <_scanf_float+0xd4>
 800cd82:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cd86:	b2c8      	uxtb	r0, r1
 800cd88:	280e      	cmp	r0, #14
 800cd8a:	d93a      	bls.n	800ce02 <_scanf_float+0xda>
 800cd8c:	f1b9 0f00 	cmp.w	r9, #0
 800cd90:	d003      	beq.n	800cd9a <_scanf_float+0x72>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd9e:	f1ba 0f01 	cmp.w	sl, #1
 800cda2:	f200 8117 	bhi.w	800cfd4 <_scanf_float+0x2ac>
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	f200 8108 	bhi.w	800cfbe <_scanf_float+0x296>
 800cdae:	2001      	movs	r0, #1
 800cdb0:	b007      	add	sp, #28
 800cdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cdba:	2a0d      	cmp	r2, #13
 800cdbc:	d8e6      	bhi.n	800cd8c <_scanf_float+0x64>
 800cdbe:	a101      	add	r1, pc, #4	@ (adr r1, 800cdc4 <_scanf_float+0x9c>)
 800cdc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cdc4:	0800cf0b 	.word	0x0800cf0b
 800cdc8:	0800cd8d 	.word	0x0800cd8d
 800cdcc:	0800cd8d 	.word	0x0800cd8d
 800cdd0:	0800cd8d 	.word	0x0800cd8d
 800cdd4:	0800cf6b 	.word	0x0800cf6b
 800cdd8:	0800cf43 	.word	0x0800cf43
 800cddc:	0800cd8d 	.word	0x0800cd8d
 800cde0:	0800cd8d 	.word	0x0800cd8d
 800cde4:	0800cf19 	.word	0x0800cf19
 800cde8:	0800cd8d 	.word	0x0800cd8d
 800cdec:	0800cd8d 	.word	0x0800cd8d
 800cdf0:	0800cd8d 	.word	0x0800cd8d
 800cdf4:	0800cd8d 	.word	0x0800cd8d
 800cdf8:	0800ced1 	.word	0x0800ced1
 800cdfc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ce00:	e7db      	b.n	800cdba <_scanf_float+0x92>
 800ce02:	290e      	cmp	r1, #14
 800ce04:	d8c2      	bhi.n	800cd8c <_scanf_float+0x64>
 800ce06:	a001      	add	r0, pc, #4	@ (adr r0, 800ce0c <_scanf_float+0xe4>)
 800ce08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ce0c:	0800cec1 	.word	0x0800cec1
 800ce10:	0800cd8d 	.word	0x0800cd8d
 800ce14:	0800cec1 	.word	0x0800cec1
 800ce18:	0800cf57 	.word	0x0800cf57
 800ce1c:	0800cd8d 	.word	0x0800cd8d
 800ce20:	0800ce69 	.word	0x0800ce69
 800ce24:	0800cea7 	.word	0x0800cea7
 800ce28:	0800cea7 	.word	0x0800cea7
 800ce2c:	0800cea7 	.word	0x0800cea7
 800ce30:	0800cea7 	.word	0x0800cea7
 800ce34:	0800cea7 	.word	0x0800cea7
 800ce38:	0800cea7 	.word	0x0800cea7
 800ce3c:	0800cea7 	.word	0x0800cea7
 800ce40:	0800cea7 	.word	0x0800cea7
 800ce44:	0800cea7 	.word	0x0800cea7
 800ce48:	2b6e      	cmp	r3, #110	@ 0x6e
 800ce4a:	d809      	bhi.n	800ce60 <_scanf_float+0x138>
 800ce4c:	2b60      	cmp	r3, #96	@ 0x60
 800ce4e:	d8b2      	bhi.n	800cdb6 <_scanf_float+0x8e>
 800ce50:	2b54      	cmp	r3, #84	@ 0x54
 800ce52:	d07b      	beq.n	800cf4c <_scanf_float+0x224>
 800ce54:	2b59      	cmp	r3, #89	@ 0x59
 800ce56:	d199      	bne.n	800cd8c <_scanf_float+0x64>
 800ce58:	2d07      	cmp	r5, #7
 800ce5a:	d197      	bne.n	800cd8c <_scanf_float+0x64>
 800ce5c:	2508      	movs	r5, #8
 800ce5e:	e02c      	b.n	800ceba <_scanf_float+0x192>
 800ce60:	2b74      	cmp	r3, #116	@ 0x74
 800ce62:	d073      	beq.n	800cf4c <_scanf_float+0x224>
 800ce64:	2b79      	cmp	r3, #121	@ 0x79
 800ce66:	e7f6      	b.n	800ce56 <_scanf_float+0x12e>
 800ce68:	6821      	ldr	r1, [r4, #0]
 800ce6a:	05c8      	lsls	r0, r1, #23
 800ce6c:	d51b      	bpl.n	800cea6 <_scanf_float+0x17e>
 800ce6e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ce72:	6021      	str	r1, [r4, #0]
 800ce74:	f109 0901 	add.w	r9, r9, #1
 800ce78:	f1bb 0f00 	cmp.w	fp, #0
 800ce7c:	d003      	beq.n	800ce86 <_scanf_float+0x15e>
 800ce7e:	3201      	adds	r2, #1
 800ce80:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce84:	60a2      	str	r2, [r4, #8]
 800ce86:	68a3      	ldr	r3, [r4, #8]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	60a3      	str	r3, [r4, #8]
 800ce8c:	6923      	ldr	r3, [r4, #16]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	607b      	str	r3, [r7, #4]
 800ce9a:	f340 8087 	ble.w	800cfac <_scanf_float+0x284>
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	e765      	b.n	800cd72 <_scanf_float+0x4a>
 800cea6:	eb1a 0105 	adds.w	r1, sl, r5
 800ceaa:	f47f af6f 	bne.w	800cd8c <_scanf_float+0x64>
 800ceae:	6822      	ldr	r2, [r4, #0]
 800ceb0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ceb4:	6022      	str	r2, [r4, #0]
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	468a      	mov	sl, r1
 800ceba:	f806 3b01 	strb.w	r3, [r6], #1
 800cebe:	e7e2      	b.n	800ce86 <_scanf_float+0x15e>
 800cec0:	6822      	ldr	r2, [r4, #0]
 800cec2:	0610      	lsls	r0, r2, #24
 800cec4:	f57f af62 	bpl.w	800cd8c <_scanf_float+0x64>
 800cec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cecc:	6022      	str	r2, [r4, #0]
 800cece:	e7f4      	b.n	800ceba <_scanf_float+0x192>
 800ced0:	f1ba 0f00 	cmp.w	sl, #0
 800ced4:	d10e      	bne.n	800cef4 <_scanf_float+0x1cc>
 800ced6:	f1b9 0f00 	cmp.w	r9, #0
 800ceda:	d10e      	bne.n	800cefa <_scanf_float+0x1d2>
 800cedc:	6822      	ldr	r2, [r4, #0]
 800cede:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cee2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cee6:	d108      	bne.n	800cefa <_scanf_float+0x1d2>
 800cee8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ceec:	6022      	str	r2, [r4, #0]
 800ceee:	f04f 0a01 	mov.w	sl, #1
 800cef2:	e7e2      	b.n	800ceba <_scanf_float+0x192>
 800cef4:	f1ba 0f02 	cmp.w	sl, #2
 800cef8:	d055      	beq.n	800cfa6 <_scanf_float+0x27e>
 800cefa:	2d01      	cmp	r5, #1
 800cefc:	d002      	beq.n	800cf04 <_scanf_float+0x1dc>
 800cefe:	2d04      	cmp	r5, #4
 800cf00:	f47f af44 	bne.w	800cd8c <_scanf_float+0x64>
 800cf04:	3501      	adds	r5, #1
 800cf06:	b2ed      	uxtb	r5, r5
 800cf08:	e7d7      	b.n	800ceba <_scanf_float+0x192>
 800cf0a:	f1ba 0f01 	cmp.w	sl, #1
 800cf0e:	f47f af3d 	bne.w	800cd8c <_scanf_float+0x64>
 800cf12:	f04f 0a02 	mov.w	sl, #2
 800cf16:	e7d0      	b.n	800ceba <_scanf_float+0x192>
 800cf18:	b97d      	cbnz	r5, 800cf3a <_scanf_float+0x212>
 800cf1a:	f1b9 0f00 	cmp.w	r9, #0
 800cf1e:	f47f af38 	bne.w	800cd92 <_scanf_float+0x6a>
 800cf22:	6822      	ldr	r2, [r4, #0]
 800cf24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cf28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cf2c:	f040 8108 	bne.w	800d140 <_scanf_float+0x418>
 800cf30:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cf34:	6022      	str	r2, [r4, #0]
 800cf36:	2501      	movs	r5, #1
 800cf38:	e7bf      	b.n	800ceba <_scanf_float+0x192>
 800cf3a:	2d03      	cmp	r5, #3
 800cf3c:	d0e2      	beq.n	800cf04 <_scanf_float+0x1dc>
 800cf3e:	2d05      	cmp	r5, #5
 800cf40:	e7de      	b.n	800cf00 <_scanf_float+0x1d8>
 800cf42:	2d02      	cmp	r5, #2
 800cf44:	f47f af22 	bne.w	800cd8c <_scanf_float+0x64>
 800cf48:	2503      	movs	r5, #3
 800cf4a:	e7b6      	b.n	800ceba <_scanf_float+0x192>
 800cf4c:	2d06      	cmp	r5, #6
 800cf4e:	f47f af1d 	bne.w	800cd8c <_scanf_float+0x64>
 800cf52:	2507      	movs	r5, #7
 800cf54:	e7b1      	b.n	800ceba <_scanf_float+0x192>
 800cf56:	6822      	ldr	r2, [r4, #0]
 800cf58:	0591      	lsls	r1, r2, #22
 800cf5a:	f57f af17 	bpl.w	800cd8c <_scanf_float+0x64>
 800cf5e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cf62:	6022      	str	r2, [r4, #0]
 800cf64:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf68:	e7a7      	b.n	800ceba <_scanf_float+0x192>
 800cf6a:	6822      	ldr	r2, [r4, #0]
 800cf6c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cf70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cf74:	d006      	beq.n	800cf84 <_scanf_float+0x25c>
 800cf76:	0550      	lsls	r0, r2, #21
 800cf78:	f57f af08 	bpl.w	800cd8c <_scanf_float+0x64>
 800cf7c:	f1b9 0f00 	cmp.w	r9, #0
 800cf80:	f000 80de 	beq.w	800d140 <_scanf_float+0x418>
 800cf84:	0591      	lsls	r1, r2, #22
 800cf86:	bf58      	it	pl
 800cf88:	9902      	ldrpl	r1, [sp, #8]
 800cf8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cf8e:	bf58      	it	pl
 800cf90:	eba9 0101 	subpl.w	r1, r9, r1
 800cf94:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cf98:	bf58      	it	pl
 800cf9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cf9e:	6022      	str	r2, [r4, #0]
 800cfa0:	f04f 0900 	mov.w	r9, #0
 800cfa4:	e789      	b.n	800ceba <_scanf_float+0x192>
 800cfa6:	f04f 0a03 	mov.w	sl, #3
 800cfaa:	e786      	b.n	800ceba <_scanf_float+0x192>
 800cfac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	4640      	mov	r0, r8
 800cfb4:	4798      	blx	r3
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f43f aedb 	beq.w	800cd72 <_scanf_float+0x4a>
 800cfbc:	e6e6      	b.n	800cd8c <_scanf_float+0x64>
 800cfbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfc6:	463a      	mov	r2, r7
 800cfc8:	4640      	mov	r0, r8
 800cfca:	4798      	blx	r3
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	6123      	str	r3, [r4, #16]
 800cfd2:	e6e8      	b.n	800cda6 <_scanf_float+0x7e>
 800cfd4:	1e6b      	subs	r3, r5, #1
 800cfd6:	2b06      	cmp	r3, #6
 800cfd8:	d824      	bhi.n	800d024 <_scanf_float+0x2fc>
 800cfda:	2d02      	cmp	r5, #2
 800cfdc:	d836      	bhi.n	800d04c <_scanf_float+0x324>
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	429e      	cmp	r6, r3
 800cfe2:	f67f aee4 	bls.w	800cdae <_scanf_float+0x86>
 800cfe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfee:	463a      	mov	r2, r7
 800cff0:	4640      	mov	r0, r8
 800cff2:	4798      	blx	r3
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	6123      	str	r3, [r4, #16]
 800cffa:	e7f0      	b.n	800cfde <_scanf_float+0x2b6>
 800cffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d000:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d004:	463a      	mov	r2, r7
 800d006:	4640      	mov	r0, r8
 800d008:	4798      	blx	r3
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	6123      	str	r3, [r4, #16]
 800d010:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d014:	fa5f fa8a 	uxtb.w	sl, sl
 800d018:	f1ba 0f02 	cmp.w	sl, #2
 800d01c:	d1ee      	bne.n	800cffc <_scanf_float+0x2d4>
 800d01e:	3d03      	subs	r5, #3
 800d020:	b2ed      	uxtb	r5, r5
 800d022:	1b76      	subs	r6, r6, r5
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	05da      	lsls	r2, r3, #23
 800d028:	d530      	bpl.n	800d08c <_scanf_float+0x364>
 800d02a:	055b      	lsls	r3, r3, #21
 800d02c:	d511      	bpl.n	800d052 <_scanf_float+0x32a>
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	429e      	cmp	r6, r3
 800d032:	f67f aebc 	bls.w	800cdae <_scanf_float+0x86>
 800d036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d03a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d03e:	463a      	mov	r2, r7
 800d040:	4640      	mov	r0, r8
 800d042:	4798      	blx	r3
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	3b01      	subs	r3, #1
 800d048:	6123      	str	r3, [r4, #16]
 800d04a:	e7f0      	b.n	800d02e <_scanf_float+0x306>
 800d04c:	46aa      	mov	sl, r5
 800d04e:	46b3      	mov	fp, r6
 800d050:	e7de      	b.n	800d010 <_scanf_float+0x2e8>
 800d052:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d056:	6923      	ldr	r3, [r4, #16]
 800d058:	2965      	cmp	r1, #101	@ 0x65
 800d05a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d05e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	d00c      	beq.n	800d080 <_scanf_float+0x358>
 800d066:	2945      	cmp	r1, #69	@ 0x45
 800d068:	d00a      	beq.n	800d080 <_scanf_float+0x358>
 800d06a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d06e:	463a      	mov	r2, r7
 800d070:	4640      	mov	r0, r8
 800d072:	4798      	blx	r3
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	1eb5      	subs	r5, r6, #2
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d084:	463a      	mov	r2, r7
 800d086:	4640      	mov	r0, r8
 800d088:	4798      	blx	r3
 800d08a:	462e      	mov	r6, r5
 800d08c:	6822      	ldr	r2, [r4, #0]
 800d08e:	f012 0210 	ands.w	r2, r2, #16
 800d092:	d001      	beq.n	800d098 <_scanf_float+0x370>
 800d094:	2000      	movs	r0, #0
 800d096:	e68b      	b.n	800cdb0 <_scanf_float+0x88>
 800d098:	7032      	strb	r2, [r6, #0]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d0a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0a4:	d11c      	bne.n	800d0e0 <_scanf_float+0x3b8>
 800d0a6:	9b02      	ldr	r3, [sp, #8]
 800d0a8:	454b      	cmp	r3, r9
 800d0aa:	eba3 0209 	sub.w	r2, r3, r9
 800d0ae:	d123      	bne.n	800d0f8 <_scanf_float+0x3d0>
 800d0b0:	9901      	ldr	r1, [sp, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	f002 fbf7 	bl	800f8a8 <_strtod_r>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	6821      	ldr	r1, [r4, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f011 0f02 	tst.w	r1, #2
 800d0c4:	ec57 6b10 	vmov	r6, r7, d0
 800d0c8:	f103 0204 	add.w	r2, r3, #4
 800d0cc:	d01f      	beq.n	800d10e <_scanf_float+0x3e6>
 800d0ce:	9903      	ldr	r1, [sp, #12]
 800d0d0:	600a      	str	r2, [r1, #0]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	e9c3 6700 	strd	r6, r7, [r3]
 800d0d8:	68e3      	ldr	r3, [r4, #12]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	60e3      	str	r3, [r4, #12]
 800d0de:	e7d9      	b.n	800d094 <_scanf_float+0x36c>
 800d0e0:	9b04      	ldr	r3, [sp, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0e4      	beq.n	800d0b0 <_scanf_float+0x388>
 800d0e6:	9905      	ldr	r1, [sp, #20]
 800d0e8:	230a      	movs	r3, #10
 800d0ea:	3101      	adds	r1, #1
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	f002 fc5b 	bl	800f9a8 <_strtol_r>
 800d0f2:	9b04      	ldr	r3, [sp, #16]
 800d0f4:	9e05      	ldr	r6, [sp, #20]
 800d0f6:	1ac2      	subs	r2, r0, r3
 800d0f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d0fc:	429e      	cmp	r6, r3
 800d0fe:	bf28      	it	cs
 800d100:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d104:	4910      	ldr	r1, [pc, #64]	@ (800d148 <_scanf_float+0x420>)
 800d106:	4630      	mov	r0, r6
 800d108:	f000 f8e4 	bl	800d2d4 <siprintf>
 800d10c:	e7d0      	b.n	800d0b0 <_scanf_float+0x388>
 800d10e:	f011 0f04 	tst.w	r1, #4
 800d112:	9903      	ldr	r1, [sp, #12]
 800d114:	600a      	str	r2, [r1, #0]
 800d116:	d1dc      	bne.n	800d0d2 <_scanf_float+0x3aa>
 800d118:	681d      	ldr	r5, [r3, #0]
 800d11a:	4632      	mov	r2, r6
 800d11c:	463b      	mov	r3, r7
 800d11e:	4630      	mov	r0, r6
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 fd0b 	bl	8000b3c <__aeabi_dcmpun>
 800d126:	b128      	cbz	r0, 800d134 <_scanf_float+0x40c>
 800d128:	4808      	ldr	r0, [pc, #32]	@ (800d14c <_scanf_float+0x424>)
 800d12a:	f000 f9b7 	bl	800d49c <nanf>
 800d12e:	ed85 0a00 	vstr	s0, [r5]
 800d132:	e7d1      	b.n	800d0d8 <_scanf_float+0x3b0>
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 fd5e 	bl	8000bf8 <__aeabi_d2f>
 800d13c:	6028      	str	r0, [r5, #0]
 800d13e:	e7cb      	b.n	800d0d8 <_scanf_float+0x3b0>
 800d140:	f04f 0900 	mov.w	r9, #0
 800d144:	e629      	b.n	800cd9a <_scanf_float+0x72>
 800d146:	bf00      	nop
 800d148:	08011abc 	.word	0x08011abc
 800d14c:	08011e55 	.word	0x08011e55

0800d150 <std>:
 800d150:	2300      	movs	r3, #0
 800d152:	b510      	push	{r4, lr}
 800d154:	4604      	mov	r4, r0
 800d156:	e9c0 3300 	strd	r3, r3, [r0]
 800d15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d15e:	6083      	str	r3, [r0, #8]
 800d160:	8181      	strh	r1, [r0, #12]
 800d162:	6643      	str	r3, [r0, #100]	@ 0x64
 800d164:	81c2      	strh	r2, [r0, #14]
 800d166:	6183      	str	r3, [r0, #24]
 800d168:	4619      	mov	r1, r3
 800d16a:	2208      	movs	r2, #8
 800d16c:	305c      	adds	r0, #92	@ 0x5c
 800d16e:	f000 f914 	bl	800d39a <memset>
 800d172:	4b0d      	ldr	r3, [pc, #52]	@ (800d1a8 <std+0x58>)
 800d174:	6263      	str	r3, [r4, #36]	@ 0x24
 800d176:	4b0d      	ldr	r3, [pc, #52]	@ (800d1ac <std+0x5c>)
 800d178:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d17a:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b0 <std+0x60>)
 800d17c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d17e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b4 <std+0x64>)
 800d180:	6323      	str	r3, [r4, #48]	@ 0x30
 800d182:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <std+0x68>)
 800d184:	6224      	str	r4, [r4, #32]
 800d186:	429c      	cmp	r4, r3
 800d188:	d006      	beq.n	800d198 <std+0x48>
 800d18a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d18e:	4294      	cmp	r4, r2
 800d190:	d002      	beq.n	800d198 <std+0x48>
 800d192:	33d0      	adds	r3, #208	@ 0xd0
 800d194:	429c      	cmp	r4, r3
 800d196:	d105      	bne.n	800d1a4 <std+0x54>
 800d198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a0:	f000 b978 	b.w	800d494 <__retarget_lock_init_recursive>
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800d315 	.word	0x0800d315
 800d1ac:	0800d337 	.word	0x0800d337
 800d1b0:	0800d36f 	.word	0x0800d36f
 800d1b4:	0800d393 	.word	0x0800d393
 800d1b8:	20002308 	.word	0x20002308

0800d1bc <stdio_exit_handler>:
 800d1bc:	4a02      	ldr	r2, [pc, #8]	@ (800d1c8 <stdio_exit_handler+0xc>)
 800d1be:	4903      	ldr	r1, [pc, #12]	@ (800d1cc <stdio_exit_handler+0x10>)
 800d1c0:	4803      	ldr	r0, [pc, #12]	@ (800d1d0 <stdio_exit_handler+0x14>)
 800d1c2:	f000 b869 	b.w	800d298 <_fwalk_sglue>
 800d1c6:	bf00      	nop
 800d1c8:	20000100 	.word	0x20000100
 800d1cc:	0800fd65 	.word	0x0800fd65
 800d1d0:	20000110 	.word	0x20000110

0800d1d4 <cleanup_stdio>:
 800d1d4:	6841      	ldr	r1, [r0, #4]
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d208 <cleanup_stdio+0x34>)
 800d1d8:	4299      	cmp	r1, r3
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	4604      	mov	r4, r0
 800d1de:	d001      	beq.n	800d1e4 <cleanup_stdio+0x10>
 800d1e0:	f002 fdc0 	bl	800fd64 <_fflush_r>
 800d1e4:	68a1      	ldr	r1, [r4, #8]
 800d1e6:	4b09      	ldr	r3, [pc, #36]	@ (800d20c <cleanup_stdio+0x38>)
 800d1e8:	4299      	cmp	r1, r3
 800d1ea:	d002      	beq.n	800d1f2 <cleanup_stdio+0x1e>
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f002 fdb9 	bl	800fd64 <_fflush_r>
 800d1f2:	68e1      	ldr	r1, [r4, #12]
 800d1f4:	4b06      	ldr	r3, [pc, #24]	@ (800d210 <cleanup_stdio+0x3c>)
 800d1f6:	4299      	cmp	r1, r3
 800d1f8:	d004      	beq.n	800d204 <cleanup_stdio+0x30>
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d200:	f002 bdb0 	b.w	800fd64 <_fflush_r>
 800d204:	bd10      	pop	{r4, pc}
 800d206:	bf00      	nop
 800d208:	20002308 	.word	0x20002308
 800d20c:	20002370 	.word	0x20002370
 800d210:	200023d8 	.word	0x200023d8

0800d214 <global_stdio_init.part.0>:
 800d214:	b510      	push	{r4, lr}
 800d216:	4b0b      	ldr	r3, [pc, #44]	@ (800d244 <global_stdio_init.part.0+0x30>)
 800d218:	4c0b      	ldr	r4, [pc, #44]	@ (800d248 <global_stdio_init.part.0+0x34>)
 800d21a:	4a0c      	ldr	r2, [pc, #48]	@ (800d24c <global_stdio_init.part.0+0x38>)
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	4620      	mov	r0, r4
 800d220:	2200      	movs	r2, #0
 800d222:	2104      	movs	r1, #4
 800d224:	f7ff ff94 	bl	800d150 <std>
 800d228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d22c:	2201      	movs	r2, #1
 800d22e:	2109      	movs	r1, #9
 800d230:	f7ff ff8e 	bl	800d150 <std>
 800d234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d238:	2202      	movs	r2, #2
 800d23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d23e:	2112      	movs	r1, #18
 800d240:	f7ff bf86 	b.w	800d150 <std>
 800d244:	20002440 	.word	0x20002440
 800d248:	20002308 	.word	0x20002308
 800d24c:	0800d1bd 	.word	0x0800d1bd

0800d250 <__sfp_lock_acquire>:
 800d250:	4801      	ldr	r0, [pc, #4]	@ (800d258 <__sfp_lock_acquire+0x8>)
 800d252:	f000 b920 	b.w	800d496 <__retarget_lock_acquire_recursive>
 800d256:	bf00      	nop
 800d258:	20002449 	.word	0x20002449

0800d25c <__sfp_lock_release>:
 800d25c:	4801      	ldr	r0, [pc, #4]	@ (800d264 <__sfp_lock_release+0x8>)
 800d25e:	f000 b91b 	b.w	800d498 <__retarget_lock_release_recursive>
 800d262:	bf00      	nop
 800d264:	20002449 	.word	0x20002449

0800d268 <__sinit>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	4604      	mov	r4, r0
 800d26c:	f7ff fff0 	bl	800d250 <__sfp_lock_acquire>
 800d270:	6a23      	ldr	r3, [r4, #32]
 800d272:	b11b      	cbz	r3, 800d27c <__sinit+0x14>
 800d274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d278:	f7ff bff0 	b.w	800d25c <__sfp_lock_release>
 800d27c:	4b04      	ldr	r3, [pc, #16]	@ (800d290 <__sinit+0x28>)
 800d27e:	6223      	str	r3, [r4, #32]
 800d280:	4b04      	ldr	r3, [pc, #16]	@ (800d294 <__sinit+0x2c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1f5      	bne.n	800d274 <__sinit+0xc>
 800d288:	f7ff ffc4 	bl	800d214 <global_stdio_init.part.0>
 800d28c:	e7f2      	b.n	800d274 <__sinit+0xc>
 800d28e:	bf00      	nop
 800d290:	0800d1d5 	.word	0x0800d1d5
 800d294:	20002440 	.word	0x20002440

0800d298 <_fwalk_sglue>:
 800d298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d29c:	4607      	mov	r7, r0
 800d29e:	4688      	mov	r8, r1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	2600      	movs	r6, #0
 800d2a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d2ac:	d505      	bpl.n	800d2ba <_fwalk_sglue+0x22>
 800d2ae:	6824      	ldr	r4, [r4, #0]
 800d2b0:	2c00      	cmp	r4, #0
 800d2b2:	d1f7      	bne.n	800d2a4 <_fwalk_sglue+0xc>
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ba:	89ab      	ldrh	r3, [r5, #12]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d907      	bls.n	800d2d0 <_fwalk_sglue+0x38>
 800d2c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	d003      	beq.n	800d2d0 <_fwalk_sglue+0x38>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	47c0      	blx	r8
 800d2ce:	4306      	orrs	r6, r0
 800d2d0:	3568      	adds	r5, #104	@ 0x68
 800d2d2:	e7e9      	b.n	800d2a8 <_fwalk_sglue+0x10>

0800d2d4 <siprintf>:
 800d2d4:	b40e      	push	{r1, r2, r3}
 800d2d6:	b500      	push	{lr}
 800d2d8:	b09c      	sub	sp, #112	@ 0x70
 800d2da:	ab1d      	add	r3, sp, #116	@ 0x74
 800d2dc:	9002      	str	r0, [sp, #8]
 800d2de:	9006      	str	r0, [sp, #24]
 800d2e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d2e4:	4809      	ldr	r0, [pc, #36]	@ (800d30c <siprintf+0x38>)
 800d2e6:	9107      	str	r1, [sp, #28]
 800d2e8:	9104      	str	r1, [sp, #16]
 800d2ea:	4909      	ldr	r1, [pc, #36]	@ (800d310 <siprintf+0x3c>)
 800d2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f0:	9105      	str	r1, [sp, #20]
 800d2f2:	6800      	ldr	r0, [r0, #0]
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	a902      	add	r1, sp, #8
 800d2f8:	f002 fbb4 	bl	800fa64 <_svfiprintf_r>
 800d2fc:	9b02      	ldr	r3, [sp, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	b01c      	add	sp, #112	@ 0x70
 800d304:	f85d eb04 	ldr.w	lr, [sp], #4
 800d308:	b003      	add	sp, #12
 800d30a:	4770      	bx	lr
 800d30c:	2000010c 	.word	0x2000010c
 800d310:	ffff0208 	.word	0xffff0208

0800d314 <__sread>:
 800d314:	b510      	push	{r4, lr}
 800d316:	460c      	mov	r4, r1
 800d318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d31c:	f000 f86c 	bl	800d3f8 <_read_r>
 800d320:	2800      	cmp	r0, #0
 800d322:	bfab      	itete	ge
 800d324:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d326:	89a3      	ldrhlt	r3, [r4, #12]
 800d328:	181b      	addge	r3, r3, r0
 800d32a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d32e:	bfac      	ite	ge
 800d330:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d332:	81a3      	strhlt	r3, [r4, #12]
 800d334:	bd10      	pop	{r4, pc}

0800d336 <__swrite>:
 800d336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33a:	461f      	mov	r7, r3
 800d33c:	898b      	ldrh	r3, [r1, #12]
 800d33e:	05db      	lsls	r3, r3, #23
 800d340:	4605      	mov	r5, r0
 800d342:	460c      	mov	r4, r1
 800d344:	4616      	mov	r6, r2
 800d346:	d505      	bpl.n	800d354 <__swrite+0x1e>
 800d348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34c:	2302      	movs	r3, #2
 800d34e:	2200      	movs	r2, #0
 800d350:	f000 f840 	bl	800d3d4 <_lseek_r>
 800d354:	89a3      	ldrh	r3, [r4, #12]
 800d356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d35a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	4632      	mov	r2, r6
 800d362:	463b      	mov	r3, r7
 800d364:	4628      	mov	r0, r5
 800d366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36a:	f000 b857 	b.w	800d41c <_write_r>

0800d36e <__sseek>:
 800d36e:	b510      	push	{r4, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d376:	f000 f82d 	bl	800d3d4 <_lseek_r>
 800d37a:	1c43      	adds	r3, r0, #1
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	bf15      	itete	ne
 800d380:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d38a:	81a3      	strheq	r3, [r4, #12]
 800d38c:	bf18      	it	ne
 800d38e:	81a3      	strhne	r3, [r4, #12]
 800d390:	bd10      	pop	{r4, pc}

0800d392 <__sclose>:
 800d392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d396:	f000 b80d 	b.w	800d3b4 <_close_r>

0800d39a <memset>:
 800d39a:	4402      	add	r2, r0
 800d39c:	4603      	mov	r3, r0
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d100      	bne.n	800d3a4 <memset+0xa>
 800d3a2:	4770      	bx	lr
 800d3a4:	f803 1b01 	strb.w	r1, [r3], #1
 800d3a8:	e7f9      	b.n	800d39e <memset+0x4>
	...

0800d3ac <_localeconv_r>:
 800d3ac:	4800      	ldr	r0, [pc, #0]	@ (800d3b0 <_localeconv_r+0x4>)
 800d3ae:	4770      	bx	lr
 800d3b0:	2000024c 	.word	0x2000024c

0800d3b4 <_close_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4d06      	ldr	r5, [pc, #24]	@ (800d3d0 <_close_r+0x1c>)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	602b      	str	r3, [r5, #0]
 800d3c0:	f7f4 fbc4 	bl	8001b4c <_close>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_close_r+0x1a>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_close_r+0x1a>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	20002444 	.word	0x20002444

0800d3d4 <_lseek_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4d07      	ldr	r5, [pc, #28]	@ (800d3f4 <_lseek_r+0x20>)
 800d3d8:	4604      	mov	r4, r0
 800d3da:	4608      	mov	r0, r1
 800d3dc:	4611      	mov	r1, r2
 800d3de:	2200      	movs	r2, #0
 800d3e0:	602a      	str	r2, [r5, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	f7f4 fbd9 	bl	8001b9a <_lseek>
 800d3e8:	1c43      	adds	r3, r0, #1
 800d3ea:	d102      	bne.n	800d3f2 <_lseek_r+0x1e>
 800d3ec:	682b      	ldr	r3, [r5, #0]
 800d3ee:	b103      	cbz	r3, 800d3f2 <_lseek_r+0x1e>
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	20002444 	.word	0x20002444

0800d3f8 <_read_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	@ (800d418 <_read_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7f4 fb67 	bl	8001ada <_read>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_read_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_read_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	20002444 	.word	0x20002444

0800d41c <_write_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d07      	ldr	r5, [pc, #28]	@ (800d43c <_write_r+0x20>)
 800d420:	4604      	mov	r4, r0
 800d422:	4608      	mov	r0, r1
 800d424:	4611      	mov	r1, r2
 800d426:	2200      	movs	r2, #0
 800d428:	602a      	str	r2, [r5, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	f7f4 fb72 	bl	8001b14 <_write>
 800d430:	1c43      	adds	r3, r0, #1
 800d432:	d102      	bne.n	800d43a <_write_r+0x1e>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	b103      	cbz	r3, 800d43a <_write_r+0x1e>
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	bd38      	pop	{r3, r4, r5, pc}
 800d43c:	20002444 	.word	0x20002444

0800d440 <__errno>:
 800d440:	4b01      	ldr	r3, [pc, #4]	@ (800d448 <__errno+0x8>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	2000010c 	.word	0x2000010c

0800d44c <__libc_init_array>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	4d0d      	ldr	r5, [pc, #52]	@ (800d484 <__libc_init_array+0x38>)
 800d450:	4c0d      	ldr	r4, [pc, #52]	@ (800d488 <__libc_init_array+0x3c>)
 800d452:	1b64      	subs	r4, r4, r5
 800d454:	10a4      	asrs	r4, r4, #2
 800d456:	2600      	movs	r6, #0
 800d458:	42a6      	cmp	r6, r4
 800d45a:	d109      	bne.n	800d470 <__libc_init_array+0x24>
 800d45c:	4d0b      	ldr	r5, [pc, #44]	@ (800d48c <__libc_init_array+0x40>)
 800d45e:	4c0c      	ldr	r4, [pc, #48]	@ (800d490 <__libc_init_array+0x44>)
 800d460:	f004 fad0 	bl	8011a04 <_init>
 800d464:	1b64      	subs	r4, r4, r5
 800d466:	10a4      	asrs	r4, r4, #2
 800d468:	2600      	movs	r6, #0
 800d46a:	42a6      	cmp	r6, r4
 800d46c:	d105      	bne.n	800d47a <__libc_init_array+0x2e>
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	f855 3b04 	ldr.w	r3, [r5], #4
 800d474:	4798      	blx	r3
 800d476:	3601      	adds	r6, #1
 800d478:	e7ee      	b.n	800d458 <__libc_init_array+0xc>
 800d47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d47e:	4798      	blx	r3
 800d480:	3601      	adds	r6, #1
 800d482:	e7f2      	b.n	800d46a <__libc_init_array+0x1e>
 800d484:	08011ef0 	.word	0x08011ef0
 800d488:	08011ef0 	.word	0x08011ef0
 800d48c:	08011ef0 	.word	0x08011ef0
 800d490:	08011ef4 	.word	0x08011ef4

0800d494 <__retarget_lock_init_recursive>:
 800d494:	4770      	bx	lr

0800d496 <__retarget_lock_acquire_recursive>:
 800d496:	4770      	bx	lr

0800d498 <__retarget_lock_release_recursive>:
 800d498:	4770      	bx	lr
	...

0800d49c <nanf>:
 800d49c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d4a4 <nanf+0x8>
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	7fc00000 	.word	0x7fc00000

0800d4a8 <quorem>:
 800d4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	6903      	ldr	r3, [r0, #16]
 800d4ae:	690c      	ldr	r4, [r1, #16]
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	4607      	mov	r7, r0
 800d4b4:	db7e      	blt.n	800d5b4 <quorem+0x10c>
 800d4b6:	3c01      	subs	r4, #1
 800d4b8:	f101 0814 	add.w	r8, r1, #20
 800d4bc:	00a3      	lsls	r3, r4, #2
 800d4be:	f100 0514 	add.w	r5, r0, #20
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4da:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4de:	d32e      	bcc.n	800d53e <quorem+0x96>
 800d4e0:	f04f 0a00 	mov.w	sl, #0
 800d4e4:	46c4      	mov	ip, r8
 800d4e6:	46ae      	mov	lr, r5
 800d4e8:	46d3      	mov	fp, sl
 800d4ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4ee:	b298      	uxth	r0, r3
 800d4f0:	fb06 a000 	mla	r0, r6, r0, sl
 800d4f4:	0c02      	lsrs	r2, r0, #16
 800d4f6:	0c1b      	lsrs	r3, r3, #16
 800d4f8:	fb06 2303 	mla	r3, r6, r3, r2
 800d4fc:	f8de 2000 	ldr.w	r2, [lr]
 800d500:	b280      	uxth	r0, r0
 800d502:	b292      	uxth	r2, r2
 800d504:	1a12      	subs	r2, r2, r0
 800d506:	445a      	add	r2, fp
 800d508:	f8de 0000 	ldr.w	r0, [lr]
 800d50c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d510:	b29b      	uxth	r3, r3
 800d512:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d516:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d51a:	b292      	uxth	r2, r2
 800d51c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d520:	45e1      	cmp	r9, ip
 800d522:	f84e 2b04 	str.w	r2, [lr], #4
 800d526:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d52a:	d2de      	bcs.n	800d4ea <quorem+0x42>
 800d52c:	9b00      	ldr	r3, [sp, #0]
 800d52e:	58eb      	ldr	r3, [r5, r3]
 800d530:	b92b      	cbnz	r3, 800d53e <quorem+0x96>
 800d532:	9b01      	ldr	r3, [sp, #4]
 800d534:	3b04      	subs	r3, #4
 800d536:	429d      	cmp	r5, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	d32f      	bcc.n	800d59c <quorem+0xf4>
 800d53c:	613c      	str	r4, [r7, #16]
 800d53e:	4638      	mov	r0, r7
 800d540:	f001 f9c2 	bl	800e8c8 <__mcmp>
 800d544:	2800      	cmp	r0, #0
 800d546:	db25      	blt.n	800d594 <quorem+0xec>
 800d548:	4629      	mov	r1, r5
 800d54a:	2000      	movs	r0, #0
 800d54c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d550:	f8d1 c000 	ldr.w	ip, [r1]
 800d554:	fa1f fe82 	uxth.w	lr, r2
 800d558:	fa1f f38c 	uxth.w	r3, ip
 800d55c:	eba3 030e 	sub.w	r3, r3, lr
 800d560:	4403      	add	r3, r0
 800d562:	0c12      	lsrs	r2, r2, #16
 800d564:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d568:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d572:	45c1      	cmp	r9, r8
 800d574:	f841 3b04 	str.w	r3, [r1], #4
 800d578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d57c:	d2e6      	bcs.n	800d54c <quorem+0xa4>
 800d57e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d586:	b922      	cbnz	r2, 800d592 <quorem+0xea>
 800d588:	3b04      	subs	r3, #4
 800d58a:	429d      	cmp	r5, r3
 800d58c:	461a      	mov	r2, r3
 800d58e:	d30b      	bcc.n	800d5a8 <quorem+0x100>
 800d590:	613c      	str	r4, [r7, #16]
 800d592:	3601      	adds	r6, #1
 800d594:	4630      	mov	r0, r6
 800d596:	b003      	add	sp, #12
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	3b04      	subs	r3, #4
 800d5a0:	2a00      	cmp	r2, #0
 800d5a2:	d1cb      	bne.n	800d53c <quorem+0x94>
 800d5a4:	3c01      	subs	r4, #1
 800d5a6:	e7c6      	b.n	800d536 <quorem+0x8e>
 800d5a8:	6812      	ldr	r2, [r2, #0]
 800d5aa:	3b04      	subs	r3, #4
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	d1ef      	bne.n	800d590 <quorem+0xe8>
 800d5b0:	3c01      	subs	r4, #1
 800d5b2:	e7ea      	b.n	800d58a <quorem+0xe2>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e7ee      	b.n	800d596 <quorem+0xee>

0800d5b8 <_dtoa_r>:
 800d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5bc:	69c7      	ldr	r7, [r0, #28]
 800d5be:	b099      	sub	sp, #100	@ 0x64
 800d5c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5c4:	ec55 4b10 	vmov	r4, r5, d0
 800d5c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d5ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5cc:	4683      	mov	fp, r0
 800d5ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5d2:	b97f      	cbnz	r7, 800d5f4 <_dtoa_r+0x3c>
 800d5d4:	2010      	movs	r0, #16
 800d5d6:	f000 fdfd 	bl	800e1d4 <malloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d5e0:	b920      	cbnz	r0, 800d5ec <_dtoa_r+0x34>
 800d5e2:	4ba7      	ldr	r3, [pc, #668]	@ (800d880 <_dtoa_r+0x2c8>)
 800d5e4:	21ef      	movs	r1, #239	@ 0xef
 800d5e6:	48a7      	ldr	r0, [pc, #668]	@ (800d884 <_dtoa_r+0x2cc>)
 800d5e8:	f002 fc36 	bl	800fe58 <__assert_func>
 800d5ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d5f0:	6007      	str	r7, [r0, #0]
 800d5f2:	60c7      	str	r7, [r0, #12]
 800d5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d5f8:	6819      	ldr	r1, [r3, #0]
 800d5fa:	b159      	cbz	r1, 800d614 <_dtoa_r+0x5c>
 800d5fc:	685a      	ldr	r2, [r3, #4]
 800d5fe:	604a      	str	r2, [r1, #4]
 800d600:	2301      	movs	r3, #1
 800d602:	4093      	lsls	r3, r2
 800d604:	608b      	str	r3, [r1, #8]
 800d606:	4658      	mov	r0, fp
 800d608:	f000 feda 	bl	800e3c0 <_Bfree>
 800d60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d610:	2200      	movs	r2, #0
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	1e2b      	subs	r3, r5, #0
 800d616:	bfb9      	ittee	lt
 800d618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d61c:	9303      	strlt	r3, [sp, #12]
 800d61e:	2300      	movge	r3, #0
 800d620:	6033      	strge	r3, [r6, #0]
 800d622:	9f03      	ldr	r7, [sp, #12]
 800d624:	4b98      	ldr	r3, [pc, #608]	@ (800d888 <_dtoa_r+0x2d0>)
 800d626:	bfbc      	itt	lt
 800d628:	2201      	movlt	r2, #1
 800d62a:	6032      	strlt	r2, [r6, #0]
 800d62c:	43bb      	bics	r3, r7
 800d62e:	d112      	bne.n	800d656 <_dtoa_r+0x9e>
 800d630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d632:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d63c:	4323      	orrs	r3, r4
 800d63e:	f000 854d 	beq.w	800e0dc <_dtoa_r+0xb24>
 800d642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d89c <_dtoa_r+0x2e4>
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 854f 	beq.w	800e0ec <_dtoa_r+0xb34>
 800d64e:	f10a 0303 	add.w	r3, sl, #3
 800d652:	f000 bd49 	b.w	800e0e8 <_dtoa_r+0xb30>
 800d656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d65a:	2200      	movs	r2, #0
 800d65c:	ec51 0b17 	vmov	r0, r1, d7
 800d660:	2300      	movs	r3, #0
 800d662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d666:	f7f3 fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 800d66a:	4680      	mov	r8, r0
 800d66c:	b158      	cbz	r0, 800d686 <_dtoa_r+0xce>
 800d66e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d670:	2301      	movs	r3, #1
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d676:	b113      	cbz	r3, 800d67e <_dtoa_r+0xc6>
 800d678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d67a:	4b84      	ldr	r3, [pc, #528]	@ (800d88c <_dtoa_r+0x2d4>)
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d8a0 <_dtoa_r+0x2e8>
 800d682:	f000 bd33 	b.w	800e0ec <_dtoa_r+0xb34>
 800d686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d68a:	aa16      	add	r2, sp, #88	@ 0x58
 800d68c:	a917      	add	r1, sp, #92	@ 0x5c
 800d68e:	4658      	mov	r0, fp
 800d690:	f001 fa3a 	bl	800eb08 <__d2b>
 800d694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d698:	4681      	mov	r9, r0
 800d69a:	2e00      	cmp	r6, #0
 800d69c:	d077      	beq.n	800d78e <_dtoa_r+0x1d6>
 800d69e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d6b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d6b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4b74      	ldr	r3, [pc, #464]	@ (800d890 <_dtoa_r+0x2d8>)
 800d6be:	f7f2 fdeb 	bl	8000298 <__aeabi_dsub>
 800d6c2:	a369      	add	r3, pc, #420	@ (adr r3, 800d868 <_dtoa_r+0x2b0>)
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	f7f2 ff9e 	bl	8000608 <__aeabi_dmul>
 800d6cc:	a368      	add	r3, pc, #416	@ (adr r3, 800d870 <_dtoa_r+0x2b8>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f2 fde3 	bl	800029c <__adddf3>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	4630      	mov	r0, r6
 800d6da:	460d      	mov	r5, r1
 800d6dc:	f7f2 ff2a 	bl	8000534 <__aeabi_i2d>
 800d6e0:	a365      	add	r3, pc, #404	@ (adr r3, 800d878 <_dtoa_r+0x2c0>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f2 ff8f 	bl	8000608 <__aeabi_dmul>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f2 fdd3 	bl	800029c <__adddf3>
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	f7f3 fa35 	bl	8000b68 <__aeabi_d2iz>
 800d6fe:	2200      	movs	r2, #0
 800d700:	4607      	mov	r7, r0
 800d702:	2300      	movs	r3, #0
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f3 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800d70c:	b140      	cbz	r0, 800d720 <_dtoa_r+0x168>
 800d70e:	4638      	mov	r0, r7
 800d710:	f7f2 ff10 	bl	8000534 <__aeabi_i2d>
 800d714:	4622      	mov	r2, r4
 800d716:	462b      	mov	r3, r5
 800d718:	f7f3 f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800d71c:	b900      	cbnz	r0, 800d720 <_dtoa_r+0x168>
 800d71e:	3f01      	subs	r7, #1
 800d720:	2f16      	cmp	r7, #22
 800d722:	d851      	bhi.n	800d7c8 <_dtoa_r+0x210>
 800d724:	4b5b      	ldr	r3, [pc, #364]	@ (800d894 <_dtoa_r+0x2dc>)
 800d726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d732:	f7f3 f9db 	bl	8000aec <__aeabi_dcmplt>
 800d736:	2800      	cmp	r0, #0
 800d738:	d048      	beq.n	800d7cc <_dtoa_r+0x214>
 800d73a:	3f01      	subs	r7, #1
 800d73c:	2300      	movs	r3, #0
 800d73e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d742:	1b9b      	subs	r3, r3, r6
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	bf44      	itt	mi
 800d748:	f1c3 0801 	rsbmi	r8, r3, #1
 800d74c:	2300      	movmi	r3, #0
 800d74e:	9208      	str	r2, [sp, #32]
 800d750:	bf54      	ite	pl
 800d752:	f04f 0800 	movpl.w	r8, #0
 800d756:	9308      	strmi	r3, [sp, #32]
 800d758:	2f00      	cmp	r7, #0
 800d75a:	db39      	blt.n	800d7d0 <_dtoa_r+0x218>
 800d75c:	9b08      	ldr	r3, [sp, #32]
 800d75e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d760:	443b      	add	r3, r7
 800d762:	9308      	str	r3, [sp, #32]
 800d764:	2300      	movs	r3, #0
 800d766:	930a      	str	r3, [sp, #40]	@ 0x28
 800d768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d76a:	2b09      	cmp	r3, #9
 800d76c:	d864      	bhi.n	800d838 <_dtoa_r+0x280>
 800d76e:	2b05      	cmp	r3, #5
 800d770:	bfc4      	itt	gt
 800d772:	3b04      	subgt	r3, #4
 800d774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d778:	f1a3 0302 	sub.w	r3, r3, #2
 800d77c:	bfcc      	ite	gt
 800d77e:	2400      	movgt	r4, #0
 800d780:	2401      	movle	r4, #1
 800d782:	2b03      	cmp	r3, #3
 800d784:	d863      	bhi.n	800d84e <_dtoa_r+0x296>
 800d786:	e8df f003 	tbb	[pc, r3]
 800d78a:	372a      	.short	0x372a
 800d78c:	5535      	.short	0x5535
 800d78e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d792:	441e      	add	r6, r3
 800d794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d798:	2b20      	cmp	r3, #32
 800d79a:	bfc1      	itttt	gt
 800d79c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d7a0:	409f      	lslgt	r7, r3
 800d7a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d7a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d7aa:	bfd6      	itet	le
 800d7ac:	f1c3 0320 	rsble	r3, r3, #32
 800d7b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d7b4:	fa04 f003 	lslle.w	r0, r4, r3
 800d7b8:	f7f2 feac 	bl	8000514 <__aeabi_ui2d>
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d7c2:	3e01      	subs	r6, #1
 800d7c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d7c6:	e777      	b.n	800d6b8 <_dtoa_r+0x100>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e7b8      	b.n	800d73e <_dtoa_r+0x186>
 800d7cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d7ce:	e7b7      	b.n	800d740 <_dtoa_r+0x188>
 800d7d0:	427b      	negs	r3, r7
 800d7d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	eba8 0807 	sub.w	r8, r8, r7
 800d7da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7dc:	e7c4      	b.n	800d768 <_dtoa_r+0x1b0>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	dc35      	bgt.n	800d854 <_dtoa_r+0x29c>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	9307      	str	r3, [sp, #28]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7f2:	e00b      	b.n	800d80c <_dtoa_r+0x254>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e7f3      	b.n	800d7e0 <_dtoa_r+0x228>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7fe:	18fb      	adds	r3, r7, r3
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	3301      	adds	r3, #1
 800d804:	2b01      	cmp	r3, #1
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	bfb8      	it	lt
 800d80a:	2301      	movlt	r3, #1
 800d80c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d810:	2100      	movs	r1, #0
 800d812:	2204      	movs	r2, #4
 800d814:	f102 0514 	add.w	r5, r2, #20
 800d818:	429d      	cmp	r5, r3
 800d81a:	d91f      	bls.n	800d85c <_dtoa_r+0x2a4>
 800d81c:	6041      	str	r1, [r0, #4]
 800d81e:	4658      	mov	r0, fp
 800d820:	f000 fd8e 	bl	800e340 <_Balloc>
 800d824:	4682      	mov	sl, r0
 800d826:	2800      	cmp	r0, #0
 800d828:	d13c      	bne.n	800d8a4 <_dtoa_r+0x2ec>
 800d82a:	4b1b      	ldr	r3, [pc, #108]	@ (800d898 <_dtoa_r+0x2e0>)
 800d82c:	4602      	mov	r2, r0
 800d82e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d832:	e6d8      	b.n	800d5e6 <_dtoa_r+0x2e>
 800d834:	2301      	movs	r3, #1
 800d836:	e7e0      	b.n	800d7fa <_dtoa_r+0x242>
 800d838:	2401      	movs	r4, #1
 800d83a:	2300      	movs	r3, #0
 800d83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d83e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d840:	f04f 33ff 	mov.w	r3, #4294967295
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	2200      	movs	r2, #0
 800d84a:	2312      	movs	r3, #18
 800d84c:	e7d0      	b.n	800d7f0 <_dtoa_r+0x238>
 800d84e:	2301      	movs	r3, #1
 800d850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d852:	e7f5      	b.n	800d840 <_dtoa_r+0x288>
 800d854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	9307      	str	r3, [sp, #28]
 800d85a:	e7d7      	b.n	800d80c <_dtoa_r+0x254>
 800d85c:	3101      	adds	r1, #1
 800d85e:	0052      	lsls	r2, r2, #1
 800d860:	e7d8      	b.n	800d814 <_dtoa_r+0x25c>
 800d862:	bf00      	nop
 800d864:	f3af 8000 	nop.w
 800d868:	636f4361 	.word	0x636f4361
 800d86c:	3fd287a7 	.word	0x3fd287a7
 800d870:	8b60c8b3 	.word	0x8b60c8b3
 800d874:	3fc68a28 	.word	0x3fc68a28
 800d878:	509f79fb 	.word	0x509f79fb
 800d87c:	3fd34413 	.word	0x3fd34413
 800d880:	08011ace 	.word	0x08011ace
 800d884:	08011ae5 	.word	0x08011ae5
 800d888:	7ff00000 	.word	0x7ff00000
 800d88c:	08011a99 	.word	0x08011a99
 800d890:	3ff80000 	.word	0x3ff80000
 800d894:	08011be0 	.word	0x08011be0
 800d898:	08011b3d 	.word	0x08011b3d
 800d89c:	08011aca 	.word	0x08011aca
 800d8a0:	08011a98 	.word	0x08011a98
 800d8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d8a8:	6018      	str	r0, [r3, #0]
 800d8aa:	9b07      	ldr	r3, [sp, #28]
 800d8ac:	2b0e      	cmp	r3, #14
 800d8ae:	f200 80a4 	bhi.w	800d9fa <_dtoa_r+0x442>
 800d8b2:	2c00      	cmp	r4, #0
 800d8b4:	f000 80a1 	beq.w	800d9fa <_dtoa_r+0x442>
 800d8b8:	2f00      	cmp	r7, #0
 800d8ba:	dd33      	ble.n	800d924 <_dtoa_r+0x36c>
 800d8bc:	4bad      	ldr	r3, [pc, #692]	@ (800db74 <_dtoa_r+0x5bc>)
 800d8be:	f007 020f 	and.w	r2, r7, #15
 800d8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8c6:	ed93 7b00 	vldr	d7, [r3]
 800d8ca:	05f8      	lsls	r0, r7, #23
 800d8cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d8d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d8d4:	d516      	bpl.n	800d904 <_dtoa_r+0x34c>
 800d8d6:	4ba8      	ldr	r3, [pc, #672]	@ (800db78 <_dtoa_r+0x5c0>)
 800d8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d8e0:	f7f2 ffbc 	bl	800085c <__aeabi_ddiv>
 800d8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8e8:	f004 040f 	and.w	r4, r4, #15
 800d8ec:	2603      	movs	r6, #3
 800d8ee:	4da2      	ldr	r5, [pc, #648]	@ (800db78 <_dtoa_r+0x5c0>)
 800d8f0:	b954      	cbnz	r4, 800d908 <_dtoa_r+0x350>
 800d8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8fa:	f7f2 ffaf 	bl	800085c <__aeabi_ddiv>
 800d8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d902:	e028      	b.n	800d956 <_dtoa_r+0x39e>
 800d904:	2602      	movs	r6, #2
 800d906:	e7f2      	b.n	800d8ee <_dtoa_r+0x336>
 800d908:	07e1      	lsls	r1, r4, #31
 800d90a:	d508      	bpl.n	800d91e <_dtoa_r+0x366>
 800d90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d910:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d914:	f7f2 fe78 	bl	8000608 <__aeabi_dmul>
 800d918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d91c:	3601      	adds	r6, #1
 800d91e:	1064      	asrs	r4, r4, #1
 800d920:	3508      	adds	r5, #8
 800d922:	e7e5      	b.n	800d8f0 <_dtoa_r+0x338>
 800d924:	f000 80d2 	beq.w	800dacc <_dtoa_r+0x514>
 800d928:	427c      	negs	r4, r7
 800d92a:	4b92      	ldr	r3, [pc, #584]	@ (800db74 <_dtoa_r+0x5bc>)
 800d92c:	4d92      	ldr	r5, [pc, #584]	@ (800db78 <_dtoa_r+0x5c0>)
 800d92e:	f004 020f 	and.w	r2, r4, #15
 800d932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d93e:	f7f2 fe63 	bl	8000608 <__aeabi_dmul>
 800d942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d946:	1124      	asrs	r4, r4, #4
 800d948:	2300      	movs	r3, #0
 800d94a:	2602      	movs	r6, #2
 800d94c:	2c00      	cmp	r4, #0
 800d94e:	f040 80b2 	bne.w	800dab6 <_dtoa_r+0x4fe>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1d3      	bne.n	800d8fe <_dtoa_r+0x346>
 800d956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 80b7 	beq.w	800dad0 <_dtoa_r+0x518>
 800d962:	4b86      	ldr	r3, [pc, #536]	@ (800db7c <_dtoa_r+0x5c4>)
 800d964:	2200      	movs	r2, #0
 800d966:	4620      	mov	r0, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	f7f3 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800d96e:	2800      	cmp	r0, #0
 800d970:	f000 80ae 	beq.w	800dad0 <_dtoa_r+0x518>
 800d974:	9b07      	ldr	r3, [sp, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	f000 80aa 	beq.w	800dad0 <_dtoa_r+0x518>
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	dd37      	ble.n	800d9f2 <_dtoa_r+0x43a>
 800d982:	1e7b      	subs	r3, r7, #1
 800d984:	9304      	str	r3, [sp, #16]
 800d986:	4620      	mov	r0, r4
 800d988:	4b7d      	ldr	r3, [pc, #500]	@ (800db80 <_dtoa_r+0x5c8>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	4629      	mov	r1, r5
 800d98e:	f7f2 fe3b 	bl	8000608 <__aeabi_dmul>
 800d992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d996:	9c00      	ldr	r4, [sp, #0]
 800d998:	3601      	adds	r6, #1
 800d99a:	4630      	mov	r0, r6
 800d99c:	f7f2 fdca 	bl	8000534 <__aeabi_i2d>
 800d9a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9a4:	f7f2 fe30 	bl	8000608 <__aeabi_dmul>
 800d9a8:	4b76      	ldr	r3, [pc, #472]	@ (800db84 <_dtoa_r+0x5cc>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f7f2 fc76 	bl	800029c <__adddf3>
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	f040 808d 	bne.w	800dad6 <_dtoa_r+0x51e>
 800d9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9c0:	4b71      	ldr	r3, [pc, #452]	@ (800db88 <_dtoa_r+0x5d0>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f7f2 fc68 	bl	8000298 <__aeabi_dsub>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4633      	mov	r3, r6
 800d9d4:	f7f3 f8a8 	bl	8000b28 <__aeabi_dcmpgt>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f040 828b 	bne.w	800def4 <_dtoa_r+0x93c>
 800d9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d9e8:	f7f3 f880 	bl	8000aec <__aeabi_dcmplt>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	f040 8128 	bne.w	800dc42 <_dtoa_r+0x68a>
 800d9f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d9f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f2c0 815a 	blt.w	800dcb6 <_dtoa_r+0x6fe>
 800da02:	2f0e      	cmp	r7, #14
 800da04:	f300 8157 	bgt.w	800dcb6 <_dtoa_r+0x6fe>
 800da08:	4b5a      	ldr	r3, [pc, #360]	@ (800db74 <_dtoa_r+0x5bc>)
 800da0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da0e:	ed93 7b00 	vldr	d7, [r3]
 800da12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da14:	2b00      	cmp	r3, #0
 800da16:	ed8d 7b00 	vstr	d7, [sp]
 800da1a:	da03      	bge.n	800da24 <_dtoa_r+0x46c>
 800da1c:	9b07      	ldr	r3, [sp, #28]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f340 8101 	ble.w	800dc26 <_dtoa_r+0x66e>
 800da24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800da28:	4656      	mov	r6, sl
 800da2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 ff13 	bl	800085c <__aeabi_ddiv>
 800da36:	f7f3 f897 	bl	8000b68 <__aeabi_d2iz>
 800da3a:	4680      	mov	r8, r0
 800da3c:	f7f2 fd7a 	bl	8000534 <__aeabi_i2d>
 800da40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da44:	f7f2 fde0 	bl	8000608 <__aeabi_dmul>
 800da48:	4602      	mov	r2, r0
 800da4a:	460b      	mov	r3, r1
 800da4c:	4620      	mov	r0, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800da54:	f7f2 fc20 	bl	8000298 <__aeabi_dsub>
 800da58:	f806 4b01 	strb.w	r4, [r6], #1
 800da5c:	9d07      	ldr	r5, [sp, #28]
 800da5e:	eba6 040a 	sub.w	r4, r6, sl
 800da62:	42a5      	cmp	r5, r4
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	f040 8117 	bne.w	800dc9a <_dtoa_r+0x6e2>
 800da6c:	f7f2 fc16 	bl	800029c <__adddf3>
 800da70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da74:	4604      	mov	r4, r0
 800da76:	460d      	mov	r5, r1
 800da78:	f7f3 f856 	bl	8000b28 <__aeabi_dcmpgt>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f040 80f9 	bne.w	800dc74 <_dtoa_r+0x6bc>
 800da82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da86:	4620      	mov	r0, r4
 800da88:	4629      	mov	r1, r5
 800da8a:	f7f3 f825 	bl	8000ad8 <__aeabi_dcmpeq>
 800da8e:	b118      	cbz	r0, 800da98 <_dtoa_r+0x4e0>
 800da90:	f018 0f01 	tst.w	r8, #1
 800da94:	f040 80ee 	bne.w	800dc74 <_dtoa_r+0x6bc>
 800da98:	4649      	mov	r1, r9
 800da9a:	4658      	mov	r0, fp
 800da9c:	f000 fc90 	bl	800e3c0 <_Bfree>
 800daa0:	2300      	movs	r3, #0
 800daa2:	7033      	strb	r3, [r6, #0]
 800daa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800daa6:	3701      	adds	r7, #1
 800daa8:	601f      	str	r7, [r3, #0]
 800daaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 831d 	beq.w	800e0ec <_dtoa_r+0xb34>
 800dab2:	601e      	str	r6, [r3, #0]
 800dab4:	e31a      	b.n	800e0ec <_dtoa_r+0xb34>
 800dab6:	07e2      	lsls	r2, r4, #31
 800dab8:	d505      	bpl.n	800dac6 <_dtoa_r+0x50e>
 800daba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dabe:	f7f2 fda3 	bl	8000608 <__aeabi_dmul>
 800dac2:	3601      	adds	r6, #1
 800dac4:	2301      	movs	r3, #1
 800dac6:	1064      	asrs	r4, r4, #1
 800dac8:	3508      	adds	r5, #8
 800daca:	e73f      	b.n	800d94c <_dtoa_r+0x394>
 800dacc:	2602      	movs	r6, #2
 800dace:	e742      	b.n	800d956 <_dtoa_r+0x39e>
 800dad0:	9c07      	ldr	r4, [sp, #28]
 800dad2:	9704      	str	r7, [sp, #16]
 800dad4:	e761      	b.n	800d99a <_dtoa_r+0x3e2>
 800dad6:	4b27      	ldr	r3, [pc, #156]	@ (800db74 <_dtoa_r+0x5bc>)
 800dad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dae2:	4454      	add	r4, sl
 800dae4:	2900      	cmp	r1, #0
 800dae6:	d053      	beq.n	800db90 <_dtoa_r+0x5d8>
 800dae8:	4928      	ldr	r1, [pc, #160]	@ (800db8c <_dtoa_r+0x5d4>)
 800daea:	2000      	movs	r0, #0
 800daec:	f7f2 feb6 	bl	800085c <__aeabi_ddiv>
 800daf0:	4633      	mov	r3, r6
 800daf2:	462a      	mov	r2, r5
 800daf4:	f7f2 fbd0 	bl	8000298 <__aeabi_dsub>
 800daf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dafc:	4656      	mov	r6, sl
 800dafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db02:	f7f3 f831 	bl	8000b68 <__aeabi_d2iz>
 800db06:	4605      	mov	r5, r0
 800db08:	f7f2 fd14 	bl	8000534 <__aeabi_i2d>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db14:	f7f2 fbc0 	bl	8000298 <__aeabi_dsub>
 800db18:	3530      	adds	r5, #48	@ 0x30
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db22:	f806 5b01 	strb.w	r5, [r6], #1
 800db26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db2a:	f7f2 ffdf 	bl	8000aec <__aeabi_dcmplt>
 800db2e:	2800      	cmp	r0, #0
 800db30:	d171      	bne.n	800dc16 <_dtoa_r+0x65e>
 800db32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db36:	4911      	ldr	r1, [pc, #68]	@ (800db7c <_dtoa_r+0x5c4>)
 800db38:	2000      	movs	r0, #0
 800db3a:	f7f2 fbad 	bl	8000298 <__aeabi_dsub>
 800db3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db42:	f7f2 ffd3 	bl	8000aec <__aeabi_dcmplt>
 800db46:	2800      	cmp	r0, #0
 800db48:	f040 8095 	bne.w	800dc76 <_dtoa_r+0x6be>
 800db4c:	42a6      	cmp	r6, r4
 800db4e:	f43f af50 	beq.w	800d9f2 <_dtoa_r+0x43a>
 800db52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800db56:	4b0a      	ldr	r3, [pc, #40]	@ (800db80 <_dtoa_r+0x5c8>)
 800db58:	2200      	movs	r2, #0
 800db5a:	f7f2 fd55 	bl	8000608 <__aeabi_dmul>
 800db5e:	4b08      	ldr	r3, [pc, #32]	@ (800db80 <_dtoa_r+0x5c8>)
 800db60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db64:	2200      	movs	r2, #0
 800db66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db6a:	f7f2 fd4d 	bl	8000608 <__aeabi_dmul>
 800db6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db72:	e7c4      	b.n	800dafe <_dtoa_r+0x546>
 800db74:	08011be0 	.word	0x08011be0
 800db78:	08011bb8 	.word	0x08011bb8
 800db7c:	3ff00000 	.word	0x3ff00000
 800db80:	40240000 	.word	0x40240000
 800db84:	401c0000 	.word	0x401c0000
 800db88:	40140000 	.word	0x40140000
 800db8c:	3fe00000 	.word	0x3fe00000
 800db90:	4631      	mov	r1, r6
 800db92:	4628      	mov	r0, r5
 800db94:	f7f2 fd38 	bl	8000608 <__aeabi_dmul>
 800db98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800db9e:	4656      	mov	r6, sl
 800dba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dba4:	f7f2 ffe0 	bl	8000b68 <__aeabi_d2iz>
 800dba8:	4605      	mov	r5, r0
 800dbaa:	f7f2 fcc3 	bl	8000534 <__aeabi_i2d>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbb6:	f7f2 fb6f 	bl	8000298 <__aeabi_dsub>
 800dbba:	3530      	adds	r5, #48	@ 0x30
 800dbbc:	f806 5b01 	strb.w	r5, [r6], #1
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	42a6      	cmp	r6, r4
 800dbc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbca:	f04f 0200 	mov.w	r2, #0
 800dbce:	d124      	bne.n	800dc1a <_dtoa_r+0x662>
 800dbd0:	4bac      	ldr	r3, [pc, #688]	@ (800de84 <_dtoa_r+0x8cc>)
 800dbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dbd6:	f7f2 fb61 	bl	800029c <__adddf3>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbe2:	f7f2 ffa1 	bl	8000b28 <__aeabi_dcmpgt>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d145      	bne.n	800dc76 <_dtoa_r+0x6be>
 800dbea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dbee:	49a5      	ldr	r1, [pc, #660]	@ (800de84 <_dtoa_r+0x8cc>)
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	f7f2 fb51 	bl	8000298 <__aeabi_dsub>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbfe:	f7f2 ff75 	bl	8000aec <__aeabi_dcmplt>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	f43f aef5 	beq.w	800d9f2 <_dtoa_r+0x43a>
 800dc08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dc0a:	1e73      	subs	r3, r6, #1
 800dc0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800dc0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc12:	2b30      	cmp	r3, #48	@ 0x30
 800dc14:	d0f8      	beq.n	800dc08 <_dtoa_r+0x650>
 800dc16:	9f04      	ldr	r7, [sp, #16]
 800dc18:	e73e      	b.n	800da98 <_dtoa_r+0x4e0>
 800dc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800de88 <_dtoa_r+0x8d0>)
 800dc1c:	f7f2 fcf4 	bl	8000608 <__aeabi_dmul>
 800dc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc24:	e7bc      	b.n	800dba0 <_dtoa_r+0x5e8>
 800dc26:	d10c      	bne.n	800dc42 <_dtoa_r+0x68a>
 800dc28:	4b98      	ldr	r3, [pc, #608]	@ (800de8c <_dtoa_r+0x8d4>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc30:	f7f2 fcea 	bl	8000608 <__aeabi_dmul>
 800dc34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc38:	f7f2 ff6c 	bl	8000b14 <__aeabi_dcmpge>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f000 8157 	beq.w	800def0 <_dtoa_r+0x938>
 800dc42:	2400      	movs	r4, #0
 800dc44:	4625      	mov	r5, r4
 800dc46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc48:	43db      	mvns	r3, r3
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	4656      	mov	r6, sl
 800dc4e:	2700      	movs	r7, #0
 800dc50:	4621      	mov	r1, r4
 800dc52:	4658      	mov	r0, fp
 800dc54:	f000 fbb4 	bl	800e3c0 <_Bfree>
 800dc58:	2d00      	cmp	r5, #0
 800dc5a:	d0dc      	beq.n	800dc16 <_dtoa_r+0x65e>
 800dc5c:	b12f      	cbz	r7, 800dc6a <_dtoa_r+0x6b2>
 800dc5e:	42af      	cmp	r7, r5
 800dc60:	d003      	beq.n	800dc6a <_dtoa_r+0x6b2>
 800dc62:	4639      	mov	r1, r7
 800dc64:	4658      	mov	r0, fp
 800dc66:	f000 fbab 	bl	800e3c0 <_Bfree>
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4658      	mov	r0, fp
 800dc6e:	f000 fba7 	bl	800e3c0 <_Bfree>
 800dc72:	e7d0      	b.n	800dc16 <_dtoa_r+0x65e>
 800dc74:	9704      	str	r7, [sp, #16]
 800dc76:	4633      	mov	r3, r6
 800dc78:	461e      	mov	r6, r3
 800dc7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc7e:	2a39      	cmp	r2, #57	@ 0x39
 800dc80:	d107      	bne.n	800dc92 <_dtoa_r+0x6da>
 800dc82:	459a      	cmp	sl, r3
 800dc84:	d1f8      	bne.n	800dc78 <_dtoa_r+0x6c0>
 800dc86:	9a04      	ldr	r2, [sp, #16]
 800dc88:	3201      	adds	r2, #1
 800dc8a:	9204      	str	r2, [sp, #16]
 800dc8c:	2230      	movs	r2, #48	@ 0x30
 800dc8e:	f88a 2000 	strb.w	r2, [sl]
 800dc92:	781a      	ldrb	r2, [r3, #0]
 800dc94:	3201      	adds	r2, #1
 800dc96:	701a      	strb	r2, [r3, #0]
 800dc98:	e7bd      	b.n	800dc16 <_dtoa_r+0x65e>
 800dc9a:	4b7b      	ldr	r3, [pc, #492]	@ (800de88 <_dtoa_r+0x8d0>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f7f2 fcb3 	bl	8000608 <__aeabi_dmul>
 800dca2:	2200      	movs	r2, #0
 800dca4:	2300      	movs	r3, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	460d      	mov	r5, r1
 800dcaa:	f7f2 ff15 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f43f aebb 	beq.w	800da2a <_dtoa_r+0x472>
 800dcb4:	e6f0      	b.n	800da98 <_dtoa_r+0x4e0>
 800dcb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dcb8:	2a00      	cmp	r2, #0
 800dcba:	f000 80db 	beq.w	800de74 <_dtoa_r+0x8bc>
 800dcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcc0:	2a01      	cmp	r2, #1
 800dcc2:	f300 80bf 	bgt.w	800de44 <_dtoa_r+0x88c>
 800dcc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	f000 80b7 	beq.w	800de3c <_dtoa_r+0x884>
 800dcce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dcd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dcd4:	4646      	mov	r6, r8
 800dcd6:	9a08      	ldr	r2, [sp, #32]
 800dcd8:	2101      	movs	r1, #1
 800dcda:	441a      	add	r2, r3
 800dcdc:	4658      	mov	r0, fp
 800dcde:	4498      	add	r8, r3
 800dce0:	9208      	str	r2, [sp, #32]
 800dce2:	f000 fc6b 	bl	800e5bc <__i2b>
 800dce6:	4605      	mov	r5, r0
 800dce8:	b15e      	cbz	r6, 800dd02 <_dtoa_r+0x74a>
 800dcea:	9b08      	ldr	r3, [sp, #32]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd08      	ble.n	800dd02 <_dtoa_r+0x74a>
 800dcf0:	42b3      	cmp	r3, r6
 800dcf2:	9a08      	ldr	r2, [sp, #32]
 800dcf4:	bfa8      	it	ge
 800dcf6:	4633      	movge	r3, r6
 800dcf8:	eba8 0803 	sub.w	r8, r8, r3
 800dcfc:	1af6      	subs	r6, r6, r3
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	9308      	str	r3, [sp, #32]
 800dd02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd04:	b1f3      	cbz	r3, 800dd44 <_dtoa_r+0x78c>
 800dd06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 80b7 	beq.w	800de7c <_dtoa_r+0x8c4>
 800dd0e:	b18c      	cbz	r4, 800dd34 <_dtoa_r+0x77c>
 800dd10:	4629      	mov	r1, r5
 800dd12:	4622      	mov	r2, r4
 800dd14:	4658      	mov	r0, fp
 800dd16:	f000 fd11 	bl	800e73c <__pow5mult>
 800dd1a:	464a      	mov	r2, r9
 800dd1c:	4601      	mov	r1, r0
 800dd1e:	4605      	mov	r5, r0
 800dd20:	4658      	mov	r0, fp
 800dd22:	f000 fc61 	bl	800e5e8 <__multiply>
 800dd26:	4649      	mov	r1, r9
 800dd28:	9004      	str	r0, [sp, #16]
 800dd2a:	4658      	mov	r0, fp
 800dd2c:	f000 fb48 	bl	800e3c0 <_Bfree>
 800dd30:	9b04      	ldr	r3, [sp, #16]
 800dd32:	4699      	mov	r9, r3
 800dd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd36:	1b1a      	subs	r2, r3, r4
 800dd38:	d004      	beq.n	800dd44 <_dtoa_r+0x78c>
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	4658      	mov	r0, fp
 800dd3e:	f000 fcfd 	bl	800e73c <__pow5mult>
 800dd42:	4681      	mov	r9, r0
 800dd44:	2101      	movs	r1, #1
 800dd46:	4658      	mov	r0, fp
 800dd48:	f000 fc38 	bl	800e5bc <__i2b>
 800dd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd4e:	4604      	mov	r4, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 81cf 	beq.w	800e0f4 <_dtoa_r+0xb3c>
 800dd56:	461a      	mov	r2, r3
 800dd58:	4601      	mov	r1, r0
 800dd5a:	4658      	mov	r0, fp
 800dd5c:	f000 fcee 	bl	800e73c <__pow5mult>
 800dd60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	4604      	mov	r4, r0
 800dd66:	f300 8095 	bgt.w	800de94 <_dtoa_r+0x8dc>
 800dd6a:	9b02      	ldr	r3, [sp, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8087 	bne.w	800de80 <_dtoa_r+0x8c8>
 800dd72:	9b03      	ldr	r3, [sp, #12]
 800dd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f040 8089 	bne.w	800de90 <_dtoa_r+0x8d8>
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd84:	0d1b      	lsrs	r3, r3, #20
 800dd86:	051b      	lsls	r3, r3, #20
 800dd88:	b12b      	cbz	r3, 800dd96 <_dtoa_r+0x7de>
 800dd8a:	9b08      	ldr	r3, [sp, #32]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	9308      	str	r3, [sp, #32]
 800dd90:	f108 0801 	add.w	r8, r8, #1
 800dd94:	2301      	movs	r3, #1
 800dd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 81b0 	beq.w	800e100 <_dtoa_r+0xb48>
 800dda0:	6923      	ldr	r3, [r4, #16]
 800dda2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dda6:	6918      	ldr	r0, [r3, #16]
 800dda8:	f000 fbbc 	bl	800e524 <__hi0bits>
 800ddac:	f1c0 0020 	rsb	r0, r0, #32
 800ddb0:	9b08      	ldr	r3, [sp, #32]
 800ddb2:	4418      	add	r0, r3
 800ddb4:	f010 001f 	ands.w	r0, r0, #31
 800ddb8:	d077      	beq.n	800deaa <_dtoa_r+0x8f2>
 800ddba:	f1c0 0320 	rsb	r3, r0, #32
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	dd6b      	ble.n	800de9a <_dtoa_r+0x8e2>
 800ddc2:	9b08      	ldr	r3, [sp, #32]
 800ddc4:	f1c0 001c 	rsb	r0, r0, #28
 800ddc8:	4403      	add	r3, r0
 800ddca:	4480      	add	r8, r0
 800ddcc:	4406      	add	r6, r0
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	f1b8 0f00 	cmp.w	r8, #0
 800ddd4:	dd05      	ble.n	800dde2 <_dtoa_r+0x82a>
 800ddd6:	4649      	mov	r1, r9
 800ddd8:	4642      	mov	r2, r8
 800ddda:	4658      	mov	r0, fp
 800dddc:	f000 fd08 	bl	800e7f0 <__lshift>
 800dde0:	4681      	mov	r9, r0
 800dde2:	9b08      	ldr	r3, [sp, #32]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd05      	ble.n	800ddf4 <_dtoa_r+0x83c>
 800dde8:	4621      	mov	r1, r4
 800ddea:	461a      	mov	r2, r3
 800ddec:	4658      	mov	r0, fp
 800ddee:	f000 fcff 	bl	800e7f0 <__lshift>
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d059      	beq.n	800deae <_dtoa_r+0x8f6>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4648      	mov	r0, r9
 800ddfe:	f000 fd63 	bl	800e8c8 <__mcmp>
 800de02:	2800      	cmp	r0, #0
 800de04:	da53      	bge.n	800deae <_dtoa_r+0x8f6>
 800de06:	1e7b      	subs	r3, r7, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	4649      	mov	r1, r9
 800de0c:	2300      	movs	r3, #0
 800de0e:	220a      	movs	r2, #10
 800de10:	4658      	mov	r0, fp
 800de12:	f000 faf7 	bl	800e404 <__multadd>
 800de16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de18:	4681      	mov	r9, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 8172 	beq.w	800e104 <_dtoa_r+0xb4c>
 800de20:	2300      	movs	r3, #0
 800de22:	4629      	mov	r1, r5
 800de24:	220a      	movs	r2, #10
 800de26:	4658      	mov	r0, fp
 800de28:	f000 faec 	bl	800e404 <__multadd>
 800de2c:	9b00      	ldr	r3, [sp, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	4605      	mov	r5, r0
 800de32:	dc67      	bgt.n	800df04 <_dtoa_r+0x94c>
 800de34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de36:	2b02      	cmp	r3, #2
 800de38:	dc41      	bgt.n	800debe <_dtoa_r+0x906>
 800de3a:	e063      	b.n	800df04 <_dtoa_r+0x94c>
 800de3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800de42:	e746      	b.n	800dcd2 <_dtoa_r+0x71a>
 800de44:	9b07      	ldr	r3, [sp, #28]
 800de46:	1e5c      	subs	r4, r3, #1
 800de48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de4a:	42a3      	cmp	r3, r4
 800de4c:	bfbf      	itttt	lt
 800de4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800de50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800de52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800de54:	1ae3      	sublt	r3, r4, r3
 800de56:	bfb4      	ite	lt
 800de58:	18d2      	addlt	r2, r2, r3
 800de5a:	1b1c      	subge	r4, r3, r4
 800de5c:	9b07      	ldr	r3, [sp, #28]
 800de5e:	bfbc      	itt	lt
 800de60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800de62:	2400      	movlt	r4, #0
 800de64:	2b00      	cmp	r3, #0
 800de66:	bfb5      	itete	lt
 800de68:	eba8 0603 	sublt.w	r6, r8, r3
 800de6c:	9b07      	ldrge	r3, [sp, #28]
 800de6e:	2300      	movlt	r3, #0
 800de70:	4646      	movge	r6, r8
 800de72:	e730      	b.n	800dcd6 <_dtoa_r+0x71e>
 800de74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800de78:	4646      	mov	r6, r8
 800de7a:	e735      	b.n	800dce8 <_dtoa_r+0x730>
 800de7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de7e:	e75c      	b.n	800dd3a <_dtoa_r+0x782>
 800de80:	2300      	movs	r3, #0
 800de82:	e788      	b.n	800dd96 <_dtoa_r+0x7de>
 800de84:	3fe00000 	.word	0x3fe00000
 800de88:	40240000 	.word	0x40240000
 800de8c:	40140000 	.word	0x40140000
 800de90:	9b02      	ldr	r3, [sp, #8]
 800de92:	e780      	b.n	800dd96 <_dtoa_r+0x7de>
 800de94:	2300      	movs	r3, #0
 800de96:	930a      	str	r3, [sp, #40]	@ 0x28
 800de98:	e782      	b.n	800dda0 <_dtoa_r+0x7e8>
 800de9a:	d099      	beq.n	800ddd0 <_dtoa_r+0x818>
 800de9c:	9a08      	ldr	r2, [sp, #32]
 800de9e:	331c      	adds	r3, #28
 800dea0:	441a      	add	r2, r3
 800dea2:	4498      	add	r8, r3
 800dea4:	441e      	add	r6, r3
 800dea6:	9208      	str	r2, [sp, #32]
 800dea8:	e792      	b.n	800ddd0 <_dtoa_r+0x818>
 800deaa:	4603      	mov	r3, r0
 800deac:	e7f6      	b.n	800de9c <_dtoa_r+0x8e4>
 800deae:	9b07      	ldr	r3, [sp, #28]
 800deb0:	9704      	str	r7, [sp, #16]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dc20      	bgt.n	800def8 <_dtoa_r+0x940>
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deba:	2b02      	cmp	r3, #2
 800debc:	dd1e      	ble.n	800defc <_dtoa_r+0x944>
 800debe:	9b00      	ldr	r3, [sp, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f47f aec0 	bne.w	800dc46 <_dtoa_r+0x68e>
 800dec6:	4621      	mov	r1, r4
 800dec8:	2205      	movs	r2, #5
 800deca:	4658      	mov	r0, fp
 800decc:	f000 fa9a 	bl	800e404 <__multadd>
 800ded0:	4601      	mov	r1, r0
 800ded2:	4604      	mov	r4, r0
 800ded4:	4648      	mov	r0, r9
 800ded6:	f000 fcf7 	bl	800e8c8 <__mcmp>
 800deda:	2800      	cmp	r0, #0
 800dedc:	f77f aeb3 	ble.w	800dc46 <_dtoa_r+0x68e>
 800dee0:	4656      	mov	r6, sl
 800dee2:	2331      	movs	r3, #49	@ 0x31
 800dee4:	f806 3b01 	strb.w	r3, [r6], #1
 800dee8:	9b04      	ldr	r3, [sp, #16]
 800deea:	3301      	adds	r3, #1
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	e6ae      	b.n	800dc4e <_dtoa_r+0x696>
 800def0:	9c07      	ldr	r4, [sp, #28]
 800def2:	9704      	str	r7, [sp, #16]
 800def4:	4625      	mov	r5, r4
 800def6:	e7f3      	b.n	800dee0 <_dtoa_r+0x928>
 800def8:	9b07      	ldr	r3, [sp, #28]
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 8104 	beq.w	800e10c <_dtoa_r+0xb54>
 800df04:	2e00      	cmp	r6, #0
 800df06:	dd05      	ble.n	800df14 <_dtoa_r+0x95c>
 800df08:	4629      	mov	r1, r5
 800df0a:	4632      	mov	r2, r6
 800df0c:	4658      	mov	r0, fp
 800df0e:	f000 fc6f 	bl	800e7f0 <__lshift>
 800df12:	4605      	mov	r5, r0
 800df14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df16:	2b00      	cmp	r3, #0
 800df18:	d05a      	beq.n	800dfd0 <_dtoa_r+0xa18>
 800df1a:	6869      	ldr	r1, [r5, #4]
 800df1c:	4658      	mov	r0, fp
 800df1e:	f000 fa0f 	bl	800e340 <_Balloc>
 800df22:	4606      	mov	r6, r0
 800df24:	b928      	cbnz	r0, 800df32 <_dtoa_r+0x97a>
 800df26:	4b84      	ldr	r3, [pc, #528]	@ (800e138 <_dtoa_r+0xb80>)
 800df28:	4602      	mov	r2, r0
 800df2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800df2e:	f7ff bb5a 	b.w	800d5e6 <_dtoa_r+0x2e>
 800df32:	692a      	ldr	r2, [r5, #16]
 800df34:	3202      	adds	r2, #2
 800df36:	0092      	lsls	r2, r2, #2
 800df38:	f105 010c 	add.w	r1, r5, #12
 800df3c:	300c      	adds	r0, #12
 800df3e:	f001 ff75 	bl	800fe2c <memcpy>
 800df42:	2201      	movs	r2, #1
 800df44:	4631      	mov	r1, r6
 800df46:	4658      	mov	r0, fp
 800df48:	f000 fc52 	bl	800e7f0 <__lshift>
 800df4c:	f10a 0301 	add.w	r3, sl, #1
 800df50:	9307      	str	r3, [sp, #28]
 800df52:	9b00      	ldr	r3, [sp, #0]
 800df54:	4453      	add	r3, sl
 800df56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df58:	9b02      	ldr	r3, [sp, #8]
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	462f      	mov	r7, r5
 800df60:	930a      	str	r3, [sp, #40]	@ 0x28
 800df62:	4605      	mov	r5, r0
 800df64:	9b07      	ldr	r3, [sp, #28]
 800df66:	4621      	mov	r1, r4
 800df68:	3b01      	subs	r3, #1
 800df6a:	4648      	mov	r0, r9
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	f7ff fa9b 	bl	800d4a8 <quorem>
 800df72:	4639      	mov	r1, r7
 800df74:	9002      	str	r0, [sp, #8]
 800df76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df7a:	4648      	mov	r0, r9
 800df7c:	f000 fca4 	bl	800e8c8 <__mcmp>
 800df80:	462a      	mov	r2, r5
 800df82:	9008      	str	r0, [sp, #32]
 800df84:	4621      	mov	r1, r4
 800df86:	4658      	mov	r0, fp
 800df88:	f000 fcba 	bl	800e900 <__mdiff>
 800df8c:	68c2      	ldr	r2, [r0, #12]
 800df8e:	4606      	mov	r6, r0
 800df90:	bb02      	cbnz	r2, 800dfd4 <_dtoa_r+0xa1c>
 800df92:	4601      	mov	r1, r0
 800df94:	4648      	mov	r0, r9
 800df96:	f000 fc97 	bl	800e8c8 <__mcmp>
 800df9a:	4602      	mov	r2, r0
 800df9c:	4631      	mov	r1, r6
 800df9e:	4658      	mov	r0, fp
 800dfa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfa2:	f000 fa0d 	bl	800e3c0 <_Bfree>
 800dfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfaa:	9e07      	ldr	r6, [sp, #28]
 800dfac:	ea43 0102 	orr.w	r1, r3, r2
 800dfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfb2:	4319      	orrs	r1, r3
 800dfb4:	d110      	bne.n	800dfd8 <_dtoa_r+0xa20>
 800dfb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dfba:	d029      	beq.n	800e010 <_dtoa_r+0xa58>
 800dfbc:	9b08      	ldr	r3, [sp, #32]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	dd02      	ble.n	800dfc8 <_dtoa_r+0xa10>
 800dfc2:	9b02      	ldr	r3, [sp, #8]
 800dfc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dfc8:	9b00      	ldr	r3, [sp, #0]
 800dfca:	f883 8000 	strb.w	r8, [r3]
 800dfce:	e63f      	b.n	800dc50 <_dtoa_r+0x698>
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	e7bb      	b.n	800df4c <_dtoa_r+0x994>
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	e7e1      	b.n	800df9c <_dtoa_r+0x9e4>
 800dfd8:	9b08      	ldr	r3, [sp, #32]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	db04      	blt.n	800dfe8 <_dtoa_r+0xa30>
 800dfde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfe0:	430b      	orrs	r3, r1
 800dfe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfe4:	430b      	orrs	r3, r1
 800dfe6:	d120      	bne.n	800e02a <_dtoa_r+0xa72>
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	dded      	ble.n	800dfc8 <_dtoa_r+0xa10>
 800dfec:	4649      	mov	r1, r9
 800dfee:	2201      	movs	r2, #1
 800dff0:	4658      	mov	r0, fp
 800dff2:	f000 fbfd 	bl	800e7f0 <__lshift>
 800dff6:	4621      	mov	r1, r4
 800dff8:	4681      	mov	r9, r0
 800dffa:	f000 fc65 	bl	800e8c8 <__mcmp>
 800dffe:	2800      	cmp	r0, #0
 800e000:	dc03      	bgt.n	800e00a <_dtoa_r+0xa52>
 800e002:	d1e1      	bne.n	800dfc8 <_dtoa_r+0xa10>
 800e004:	f018 0f01 	tst.w	r8, #1
 800e008:	d0de      	beq.n	800dfc8 <_dtoa_r+0xa10>
 800e00a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e00e:	d1d8      	bne.n	800dfc2 <_dtoa_r+0xa0a>
 800e010:	9a00      	ldr	r2, [sp, #0]
 800e012:	2339      	movs	r3, #57	@ 0x39
 800e014:	7013      	strb	r3, [r2, #0]
 800e016:	4633      	mov	r3, r6
 800e018:	461e      	mov	r6, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e020:	2a39      	cmp	r2, #57	@ 0x39
 800e022:	d052      	beq.n	800e0ca <_dtoa_r+0xb12>
 800e024:	3201      	adds	r2, #1
 800e026:	701a      	strb	r2, [r3, #0]
 800e028:	e612      	b.n	800dc50 <_dtoa_r+0x698>
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	dd07      	ble.n	800e03e <_dtoa_r+0xa86>
 800e02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e032:	d0ed      	beq.n	800e010 <_dtoa_r+0xa58>
 800e034:	9a00      	ldr	r2, [sp, #0]
 800e036:	f108 0301 	add.w	r3, r8, #1
 800e03a:	7013      	strb	r3, [r2, #0]
 800e03c:	e608      	b.n	800dc50 <_dtoa_r+0x698>
 800e03e:	9b07      	ldr	r3, [sp, #28]
 800e040:	9a07      	ldr	r2, [sp, #28]
 800e042:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e048:	4293      	cmp	r3, r2
 800e04a:	d028      	beq.n	800e09e <_dtoa_r+0xae6>
 800e04c:	4649      	mov	r1, r9
 800e04e:	2300      	movs	r3, #0
 800e050:	220a      	movs	r2, #10
 800e052:	4658      	mov	r0, fp
 800e054:	f000 f9d6 	bl	800e404 <__multadd>
 800e058:	42af      	cmp	r7, r5
 800e05a:	4681      	mov	r9, r0
 800e05c:	f04f 0300 	mov.w	r3, #0
 800e060:	f04f 020a 	mov.w	r2, #10
 800e064:	4639      	mov	r1, r7
 800e066:	4658      	mov	r0, fp
 800e068:	d107      	bne.n	800e07a <_dtoa_r+0xac2>
 800e06a:	f000 f9cb 	bl	800e404 <__multadd>
 800e06e:	4607      	mov	r7, r0
 800e070:	4605      	mov	r5, r0
 800e072:	9b07      	ldr	r3, [sp, #28]
 800e074:	3301      	adds	r3, #1
 800e076:	9307      	str	r3, [sp, #28]
 800e078:	e774      	b.n	800df64 <_dtoa_r+0x9ac>
 800e07a:	f000 f9c3 	bl	800e404 <__multadd>
 800e07e:	4629      	mov	r1, r5
 800e080:	4607      	mov	r7, r0
 800e082:	2300      	movs	r3, #0
 800e084:	220a      	movs	r2, #10
 800e086:	4658      	mov	r0, fp
 800e088:	f000 f9bc 	bl	800e404 <__multadd>
 800e08c:	4605      	mov	r5, r0
 800e08e:	e7f0      	b.n	800e072 <_dtoa_r+0xaba>
 800e090:	9b00      	ldr	r3, [sp, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	bfcc      	ite	gt
 800e096:	461e      	movgt	r6, r3
 800e098:	2601      	movle	r6, #1
 800e09a:	4456      	add	r6, sl
 800e09c:	2700      	movs	r7, #0
 800e09e:	4649      	mov	r1, r9
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	4658      	mov	r0, fp
 800e0a4:	f000 fba4 	bl	800e7f0 <__lshift>
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4681      	mov	r9, r0
 800e0ac:	f000 fc0c 	bl	800e8c8 <__mcmp>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	dcb0      	bgt.n	800e016 <_dtoa_r+0xa5e>
 800e0b4:	d102      	bne.n	800e0bc <_dtoa_r+0xb04>
 800e0b6:	f018 0f01 	tst.w	r8, #1
 800e0ba:	d1ac      	bne.n	800e016 <_dtoa_r+0xa5e>
 800e0bc:	4633      	mov	r3, r6
 800e0be:	461e      	mov	r6, r3
 800e0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0c4:	2a30      	cmp	r2, #48	@ 0x30
 800e0c6:	d0fa      	beq.n	800e0be <_dtoa_r+0xb06>
 800e0c8:	e5c2      	b.n	800dc50 <_dtoa_r+0x698>
 800e0ca:	459a      	cmp	sl, r3
 800e0cc:	d1a4      	bne.n	800e018 <_dtoa_r+0xa60>
 800e0ce:	9b04      	ldr	r3, [sp, #16]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	9304      	str	r3, [sp, #16]
 800e0d4:	2331      	movs	r3, #49	@ 0x31
 800e0d6:	f88a 3000 	strb.w	r3, [sl]
 800e0da:	e5b9      	b.n	800dc50 <_dtoa_r+0x698>
 800e0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e13c <_dtoa_r+0xb84>
 800e0e2:	b11b      	cbz	r3, 800e0ec <_dtoa_r+0xb34>
 800e0e4:	f10a 0308 	add.w	r3, sl, #8
 800e0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	4650      	mov	r0, sl
 800e0ee:	b019      	add	sp, #100	@ 0x64
 800e0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	f77f ae37 	ble.w	800dd6a <_dtoa_r+0x7b2>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e100:	2001      	movs	r0, #1
 800e102:	e655      	b.n	800ddb0 <_dtoa_r+0x7f8>
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f77f aed6 	ble.w	800deb8 <_dtoa_r+0x900>
 800e10c:	4656      	mov	r6, sl
 800e10e:	4621      	mov	r1, r4
 800e110:	4648      	mov	r0, r9
 800e112:	f7ff f9c9 	bl	800d4a8 <quorem>
 800e116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e11a:	f806 8b01 	strb.w	r8, [r6], #1
 800e11e:	9b00      	ldr	r3, [sp, #0]
 800e120:	eba6 020a 	sub.w	r2, r6, sl
 800e124:	4293      	cmp	r3, r2
 800e126:	ddb3      	ble.n	800e090 <_dtoa_r+0xad8>
 800e128:	4649      	mov	r1, r9
 800e12a:	2300      	movs	r3, #0
 800e12c:	220a      	movs	r2, #10
 800e12e:	4658      	mov	r0, fp
 800e130:	f000 f968 	bl	800e404 <__multadd>
 800e134:	4681      	mov	r9, r0
 800e136:	e7ea      	b.n	800e10e <_dtoa_r+0xb56>
 800e138:	08011b3d 	.word	0x08011b3d
 800e13c:	08011ac1 	.word	0x08011ac1

0800e140 <_free_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4605      	mov	r5, r0
 800e144:	2900      	cmp	r1, #0
 800e146:	d041      	beq.n	800e1cc <_free_r+0x8c>
 800e148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e14c:	1f0c      	subs	r4, r1, #4
 800e14e:	2b00      	cmp	r3, #0
 800e150:	bfb8      	it	lt
 800e152:	18e4      	addlt	r4, r4, r3
 800e154:	f000 f8e8 	bl	800e328 <__malloc_lock>
 800e158:	4a1d      	ldr	r2, [pc, #116]	@ (800e1d0 <_free_r+0x90>)
 800e15a:	6813      	ldr	r3, [r2, #0]
 800e15c:	b933      	cbnz	r3, 800e16c <_free_r+0x2c>
 800e15e:	6063      	str	r3, [r4, #4]
 800e160:	6014      	str	r4, [r2, #0]
 800e162:	4628      	mov	r0, r5
 800e164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e168:	f000 b8e4 	b.w	800e334 <__malloc_unlock>
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	d908      	bls.n	800e182 <_free_r+0x42>
 800e170:	6820      	ldr	r0, [r4, #0]
 800e172:	1821      	adds	r1, r4, r0
 800e174:	428b      	cmp	r3, r1
 800e176:	bf01      	itttt	eq
 800e178:	6819      	ldreq	r1, [r3, #0]
 800e17a:	685b      	ldreq	r3, [r3, #4]
 800e17c:	1809      	addeq	r1, r1, r0
 800e17e:	6021      	streq	r1, [r4, #0]
 800e180:	e7ed      	b.n	800e15e <_free_r+0x1e>
 800e182:	461a      	mov	r2, r3
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	b10b      	cbz	r3, 800e18c <_free_r+0x4c>
 800e188:	42a3      	cmp	r3, r4
 800e18a:	d9fa      	bls.n	800e182 <_free_r+0x42>
 800e18c:	6811      	ldr	r1, [r2, #0]
 800e18e:	1850      	adds	r0, r2, r1
 800e190:	42a0      	cmp	r0, r4
 800e192:	d10b      	bne.n	800e1ac <_free_r+0x6c>
 800e194:	6820      	ldr	r0, [r4, #0]
 800e196:	4401      	add	r1, r0
 800e198:	1850      	adds	r0, r2, r1
 800e19a:	4283      	cmp	r3, r0
 800e19c:	6011      	str	r1, [r2, #0]
 800e19e:	d1e0      	bne.n	800e162 <_free_r+0x22>
 800e1a0:	6818      	ldr	r0, [r3, #0]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	6053      	str	r3, [r2, #4]
 800e1a6:	4408      	add	r0, r1
 800e1a8:	6010      	str	r0, [r2, #0]
 800e1aa:	e7da      	b.n	800e162 <_free_r+0x22>
 800e1ac:	d902      	bls.n	800e1b4 <_free_r+0x74>
 800e1ae:	230c      	movs	r3, #12
 800e1b0:	602b      	str	r3, [r5, #0]
 800e1b2:	e7d6      	b.n	800e162 <_free_r+0x22>
 800e1b4:	6820      	ldr	r0, [r4, #0]
 800e1b6:	1821      	adds	r1, r4, r0
 800e1b8:	428b      	cmp	r3, r1
 800e1ba:	bf04      	itt	eq
 800e1bc:	6819      	ldreq	r1, [r3, #0]
 800e1be:	685b      	ldreq	r3, [r3, #4]
 800e1c0:	6063      	str	r3, [r4, #4]
 800e1c2:	bf04      	itt	eq
 800e1c4:	1809      	addeq	r1, r1, r0
 800e1c6:	6021      	streq	r1, [r4, #0]
 800e1c8:	6054      	str	r4, [r2, #4]
 800e1ca:	e7ca      	b.n	800e162 <_free_r+0x22>
 800e1cc:	bd38      	pop	{r3, r4, r5, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20002450 	.word	0x20002450

0800e1d4 <malloc>:
 800e1d4:	4b02      	ldr	r3, [pc, #8]	@ (800e1e0 <malloc+0xc>)
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	6818      	ldr	r0, [r3, #0]
 800e1da:	f000 b825 	b.w	800e228 <_malloc_r>
 800e1de:	bf00      	nop
 800e1e0:	2000010c 	.word	0x2000010c

0800e1e4 <sbrk_aligned>:
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	4e0f      	ldr	r6, [pc, #60]	@ (800e224 <sbrk_aligned+0x40>)
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	6831      	ldr	r1, [r6, #0]
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	b911      	cbnz	r1, 800e1f6 <sbrk_aligned+0x12>
 800e1f0:	f001 fe0c 	bl	800fe0c <_sbrk_r>
 800e1f4:	6030      	str	r0, [r6, #0]
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f001 fe07 	bl	800fe0c <_sbrk_r>
 800e1fe:	1c43      	adds	r3, r0, #1
 800e200:	d103      	bne.n	800e20a <sbrk_aligned+0x26>
 800e202:	f04f 34ff 	mov.w	r4, #4294967295
 800e206:	4620      	mov	r0, r4
 800e208:	bd70      	pop	{r4, r5, r6, pc}
 800e20a:	1cc4      	adds	r4, r0, #3
 800e20c:	f024 0403 	bic.w	r4, r4, #3
 800e210:	42a0      	cmp	r0, r4
 800e212:	d0f8      	beq.n	800e206 <sbrk_aligned+0x22>
 800e214:	1a21      	subs	r1, r4, r0
 800e216:	4628      	mov	r0, r5
 800e218:	f001 fdf8 	bl	800fe0c <_sbrk_r>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d1f2      	bne.n	800e206 <sbrk_aligned+0x22>
 800e220:	e7ef      	b.n	800e202 <sbrk_aligned+0x1e>
 800e222:	bf00      	nop
 800e224:	2000244c 	.word	0x2000244c

0800e228 <_malloc_r>:
 800e228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	1ccd      	adds	r5, r1, #3
 800e22e:	f025 0503 	bic.w	r5, r5, #3
 800e232:	3508      	adds	r5, #8
 800e234:	2d0c      	cmp	r5, #12
 800e236:	bf38      	it	cc
 800e238:	250c      	movcc	r5, #12
 800e23a:	2d00      	cmp	r5, #0
 800e23c:	4606      	mov	r6, r0
 800e23e:	db01      	blt.n	800e244 <_malloc_r+0x1c>
 800e240:	42a9      	cmp	r1, r5
 800e242:	d904      	bls.n	800e24e <_malloc_r+0x26>
 800e244:	230c      	movs	r3, #12
 800e246:	6033      	str	r3, [r6, #0]
 800e248:	2000      	movs	r0, #0
 800e24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e324 <_malloc_r+0xfc>
 800e252:	f000 f869 	bl	800e328 <__malloc_lock>
 800e256:	f8d8 3000 	ldr.w	r3, [r8]
 800e25a:	461c      	mov	r4, r3
 800e25c:	bb44      	cbnz	r4, 800e2b0 <_malloc_r+0x88>
 800e25e:	4629      	mov	r1, r5
 800e260:	4630      	mov	r0, r6
 800e262:	f7ff ffbf 	bl	800e1e4 <sbrk_aligned>
 800e266:	1c43      	adds	r3, r0, #1
 800e268:	4604      	mov	r4, r0
 800e26a:	d158      	bne.n	800e31e <_malloc_r+0xf6>
 800e26c:	f8d8 4000 	ldr.w	r4, [r8]
 800e270:	4627      	mov	r7, r4
 800e272:	2f00      	cmp	r7, #0
 800e274:	d143      	bne.n	800e2fe <_malloc_r+0xd6>
 800e276:	2c00      	cmp	r4, #0
 800e278:	d04b      	beq.n	800e312 <_malloc_r+0xea>
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	4639      	mov	r1, r7
 800e27e:	4630      	mov	r0, r6
 800e280:	eb04 0903 	add.w	r9, r4, r3
 800e284:	f001 fdc2 	bl	800fe0c <_sbrk_r>
 800e288:	4581      	cmp	r9, r0
 800e28a:	d142      	bne.n	800e312 <_malloc_r+0xea>
 800e28c:	6821      	ldr	r1, [r4, #0]
 800e28e:	1a6d      	subs	r5, r5, r1
 800e290:	4629      	mov	r1, r5
 800e292:	4630      	mov	r0, r6
 800e294:	f7ff ffa6 	bl	800e1e4 <sbrk_aligned>
 800e298:	3001      	adds	r0, #1
 800e29a:	d03a      	beq.n	800e312 <_malloc_r+0xea>
 800e29c:	6823      	ldr	r3, [r4, #0]
 800e29e:	442b      	add	r3, r5
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	bb62      	cbnz	r2, 800e304 <_malloc_r+0xdc>
 800e2aa:	f8c8 7000 	str.w	r7, [r8]
 800e2ae:	e00f      	b.n	800e2d0 <_malloc_r+0xa8>
 800e2b0:	6822      	ldr	r2, [r4, #0]
 800e2b2:	1b52      	subs	r2, r2, r5
 800e2b4:	d420      	bmi.n	800e2f8 <_malloc_r+0xd0>
 800e2b6:	2a0b      	cmp	r2, #11
 800e2b8:	d917      	bls.n	800e2ea <_malloc_r+0xc2>
 800e2ba:	1961      	adds	r1, r4, r5
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	6025      	str	r5, [r4, #0]
 800e2c0:	bf18      	it	ne
 800e2c2:	6059      	strne	r1, [r3, #4]
 800e2c4:	6863      	ldr	r3, [r4, #4]
 800e2c6:	bf08      	it	eq
 800e2c8:	f8c8 1000 	streq.w	r1, [r8]
 800e2cc:	5162      	str	r2, [r4, r5]
 800e2ce:	604b      	str	r3, [r1, #4]
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f000 f82f 	bl	800e334 <__malloc_unlock>
 800e2d6:	f104 000b 	add.w	r0, r4, #11
 800e2da:	1d23      	adds	r3, r4, #4
 800e2dc:	f020 0007 	bic.w	r0, r0, #7
 800e2e0:	1ac2      	subs	r2, r0, r3
 800e2e2:	bf1c      	itt	ne
 800e2e4:	1a1b      	subne	r3, r3, r0
 800e2e6:	50a3      	strne	r3, [r4, r2]
 800e2e8:	e7af      	b.n	800e24a <_malloc_r+0x22>
 800e2ea:	6862      	ldr	r2, [r4, #4]
 800e2ec:	42a3      	cmp	r3, r4
 800e2ee:	bf0c      	ite	eq
 800e2f0:	f8c8 2000 	streq.w	r2, [r8]
 800e2f4:	605a      	strne	r2, [r3, #4]
 800e2f6:	e7eb      	b.n	800e2d0 <_malloc_r+0xa8>
 800e2f8:	4623      	mov	r3, r4
 800e2fa:	6864      	ldr	r4, [r4, #4]
 800e2fc:	e7ae      	b.n	800e25c <_malloc_r+0x34>
 800e2fe:	463c      	mov	r4, r7
 800e300:	687f      	ldr	r7, [r7, #4]
 800e302:	e7b6      	b.n	800e272 <_malloc_r+0x4a>
 800e304:	461a      	mov	r2, r3
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	42a3      	cmp	r3, r4
 800e30a:	d1fb      	bne.n	800e304 <_malloc_r+0xdc>
 800e30c:	2300      	movs	r3, #0
 800e30e:	6053      	str	r3, [r2, #4]
 800e310:	e7de      	b.n	800e2d0 <_malloc_r+0xa8>
 800e312:	230c      	movs	r3, #12
 800e314:	6033      	str	r3, [r6, #0]
 800e316:	4630      	mov	r0, r6
 800e318:	f000 f80c 	bl	800e334 <__malloc_unlock>
 800e31c:	e794      	b.n	800e248 <_malloc_r+0x20>
 800e31e:	6005      	str	r5, [r0, #0]
 800e320:	e7d6      	b.n	800e2d0 <_malloc_r+0xa8>
 800e322:	bf00      	nop
 800e324:	20002450 	.word	0x20002450

0800e328 <__malloc_lock>:
 800e328:	4801      	ldr	r0, [pc, #4]	@ (800e330 <__malloc_lock+0x8>)
 800e32a:	f7ff b8b4 	b.w	800d496 <__retarget_lock_acquire_recursive>
 800e32e:	bf00      	nop
 800e330:	20002448 	.word	0x20002448

0800e334 <__malloc_unlock>:
 800e334:	4801      	ldr	r0, [pc, #4]	@ (800e33c <__malloc_unlock+0x8>)
 800e336:	f7ff b8af 	b.w	800d498 <__retarget_lock_release_recursive>
 800e33a:	bf00      	nop
 800e33c:	20002448 	.word	0x20002448

0800e340 <_Balloc>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	69c6      	ldr	r6, [r0, #28]
 800e344:	4604      	mov	r4, r0
 800e346:	460d      	mov	r5, r1
 800e348:	b976      	cbnz	r6, 800e368 <_Balloc+0x28>
 800e34a:	2010      	movs	r0, #16
 800e34c:	f7ff ff42 	bl	800e1d4 <malloc>
 800e350:	4602      	mov	r2, r0
 800e352:	61e0      	str	r0, [r4, #28]
 800e354:	b920      	cbnz	r0, 800e360 <_Balloc+0x20>
 800e356:	4b18      	ldr	r3, [pc, #96]	@ (800e3b8 <_Balloc+0x78>)
 800e358:	4818      	ldr	r0, [pc, #96]	@ (800e3bc <_Balloc+0x7c>)
 800e35a:	216b      	movs	r1, #107	@ 0x6b
 800e35c:	f001 fd7c 	bl	800fe58 <__assert_func>
 800e360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e364:	6006      	str	r6, [r0, #0]
 800e366:	60c6      	str	r6, [r0, #12]
 800e368:	69e6      	ldr	r6, [r4, #28]
 800e36a:	68f3      	ldr	r3, [r6, #12]
 800e36c:	b183      	cbz	r3, 800e390 <_Balloc+0x50>
 800e36e:	69e3      	ldr	r3, [r4, #28]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e376:	b9b8      	cbnz	r0, 800e3a8 <_Balloc+0x68>
 800e378:	2101      	movs	r1, #1
 800e37a:	fa01 f605 	lsl.w	r6, r1, r5
 800e37e:	1d72      	adds	r2, r6, #5
 800e380:	0092      	lsls	r2, r2, #2
 800e382:	4620      	mov	r0, r4
 800e384:	f001 fd86 	bl	800fe94 <_calloc_r>
 800e388:	b160      	cbz	r0, 800e3a4 <_Balloc+0x64>
 800e38a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e38e:	e00e      	b.n	800e3ae <_Balloc+0x6e>
 800e390:	2221      	movs	r2, #33	@ 0x21
 800e392:	2104      	movs	r1, #4
 800e394:	4620      	mov	r0, r4
 800e396:	f001 fd7d 	bl	800fe94 <_calloc_r>
 800e39a:	69e3      	ldr	r3, [r4, #28]
 800e39c:	60f0      	str	r0, [r6, #12]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1e4      	bne.n	800e36e <_Balloc+0x2e>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	6802      	ldr	r2, [r0, #0]
 800e3aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3b4:	e7f7      	b.n	800e3a6 <_Balloc+0x66>
 800e3b6:	bf00      	nop
 800e3b8:	08011ace 	.word	0x08011ace
 800e3bc:	08011b4e 	.word	0x08011b4e

0800e3c0 <_Bfree>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	69c6      	ldr	r6, [r0, #28]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	b976      	cbnz	r6, 800e3e8 <_Bfree+0x28>
 800e3ca:	2010      	movs	r0, #16
 800e3cc:	f7ff ff02 	bl	800e1d4 <malloc>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	61e8      	str	r0, [r5, #28]
 800e3d4:	b920      	cbnz	r0, 800e3e0 <_Bfree+0x20>
 800e3d6:	4b09      	ldr	r3, [pc, #36]	@ (800e3fc <_Bfree+0x3c>)
 800e3d8:	4809      	ldr	r0, [pc, #36]	@ (800e400 <_Bfree+0x40>)
 800e3da:	218f      	movs	r1, #143	@ 0x8f
 800e3dc:	f001 fd3c 	bl	800fe58 <__assert_func>
 800e3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3e4:	6006      	str	r6, [r0, #0]
 800e3e6:	60c6      	str	r6, [r0, #12]
 800e3e8:	b13c      	cbz	r4, 800e3fa <_Bfree+0x3a>
 800e3ea:	69eb      	ldr	r3, [r5, #28]
 800e3ec:	6862      	ldr	r2, [r4, #4]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3f4:	6021      	str	r1, [r4, #0]
 800e3f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	08011ace 	.word	0x08011ace
 800e400:	08011b4e 	.word	0x08011b4e

0800e404 <__multadd>:
 800e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	690d      	ldr	r5, [r1, #16]
 800e40a:	4607      	mov	r7, r0
 800e40c:	460c      	mov	r4, r1
 800e40e:	461e      	mov	r6, r3
 800e410:	f101 0c14 	add.w	ip, r1, #20
 800e414:	2000      	movs	r0, #0
 800e416:	f8dc 3000 	ldr.w	r3, [ip]
 800e41a:	b299      	uxth	r1, r3
 800e41c:	fb02 6101 	mla	r1, r2, r1, r6
 800e420:	0c1e      	lsrs	r6, r3, #16
 800e422:	0c0b      	lsrs	r3, r1, #16
 800e424:	fb02 3306 	mla	r3, r2, r6, r3
 800e428:	b289      	uxth	r1, r1
 800e42a:	3001      	adds	r0, #1
 800e42c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e430:	4285      	cmp	r5, r0
 800e432:	f84c 1b04 	str.w	r1, [ip], #4
 800e436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e43a:	dcec      	bgt.n	800e416 <__multadd+0x12>
 800e43c:	b30e      	cbz	r6, 800e482 <__multadd+0x7e>
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	42ab      	cmp	r3, r5
 800e442:	dc19      	bgt.n	800e478 <__multadd+0x74>
 800e444:	6861      	ldr	r1, [r4, #4]
 800e446:	4638      	mov	r0, r7
 800e448:	3101      	adds	r1, #1
 800e44a:	f7ff ff79 	bl	800e340 <_Balloc>
 800e44e:	4680      	mov	r8, r0
 800e450:	b928      	cbnz	r0, 800e45e <__multadd+0x5a>
 800e452:	4602      	mov	r2, r0
 800e454:	4b0c      	ldr	r3, [pc, #48]	@ (800e488 <__multadd+0x84>)
 800e456:	480d      	ldr	r0, [pc, #52]	@ (800e48c <__multadd+0x88>)
 800e458:	21ba      	movs	r1, #186	@ 0xba
 800e45a:	f001 fcfd 	bl	800fe58 <__assert_func>
 800e45e:	6922      	ldr	r2, [r4, #16]
 800e460:	3202      	adds	r2, #2
 800e462:	f104 010c 	add.w	r1, r4, #12
 800e466:	0092      	lsls	r2, r2, #2
 800e468:	300c      	adds	r0, #12
 800e46a:	f001 fcdf 	bl	800fe2c <memcpy>
 800e46e:	4621      	mov	r1, r4
 800e470:	4638      	mov	r0, r7
 800e472:	f7ff ffa5 	bl	800e3c0 <_Bfree>
 800e476:	4644      	mov	r4, r8
 800e478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e47c:	3501      	adds	r5, #1
 800e47e:	615e      	str	r6, [r3, #20]
 800e480:	6125      	str	r5, [r4, #16]
 800e482:	4620      	mov	r0, r4
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e488:	08011b3d 	.word	0x08011b3d
 800e48c:	08011b4e 	.word	0x08011b4e

0800e490 <__s2b>:
 800e490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	4615      	mov	r5, r2
 800e498:	461f      	mov	r7, r3
 800e49a:	2209      	movs	r2, #9
 800e49c:	3308      	adds	r3, #8
 800e49e:	4606      	mov	r6, r0
 800e4a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	db09      	blt.n	800e4c0 <__s2b+0x30>
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff ff47 	bl	800e340 <_Balloc>
 800e4b2:	b940      	cbnz	r0, 800e4c6 <__s2b+0x36>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	4b19      	ldr	r3, [pc, #100]	@ (800e51c <__s2b+0x8c>)
 800e4b8:	4819      	ldr	r0, [pc, #100]	@ (800e520 <__s2b+0x90>)
 800e4ba:	21d3      	movs	r1, #211	@ 0xd3
 800e4bc:	f001 fccc 	bl	800fe58 <__assert_func>
 800e4c0:	0052      	lsls	r2, r2, #1
 800e4c2:	3101      	adds	r1, #1
 800e4c4:	e7f0      	b.n	800e4a8 <__s2b+0x18>
 800e4c6:	9b08      	ldr	r3, [sp, #32]
 800e4c8:	6143      	str	r3, [r0, #20]
 800e4ca:	2d09      	cmp	r5, #9
 800e4cc:	f04f 0301 	mov.w	r3, #1
 800e4d0:	6103      	str	r3, [r0, #16]
 800e4d2:	dd16      	ble.n	800e502 <__s2b+0x72>
 800e4d4:	f104 0909 	add.w	r9, r4, #9
 800e4d8:	46c8      	mov	r8, r9
 800e4da:	442c      	add	r4, r5
 800e4dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e4e0:	4601      	mov	r1, r0
 800e4e2:	3b30      	subs	r3, #48	@ 0x30
 800e4e4:	220a      	movs	r2, #10
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f7ff ff8c 	bl	800e404 <__multadd>
 800e4ec:	45a0      	cmp	r8, r4
 800e4ee:	d1f5      	bne.n	800e4dc <__s2b+0x4c>
 800e4f0:	f1a5 0408 	sub.w	r4, r5, #8
 800e4f4:	444c      	add	r4, r9
 800e4f6:	1b2d      	subs	r5, r5, r4
 800e4f8:	1963      	adds	r3, r4, r5
 800e4fa:	42bb      	cmp	r3, r7
 800e4fc:	db04      	blt.n	800e508 <__s2b+0x78>
 800e4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e502:	340a      	adds	r4, #10
 800e504:	2509      	movs	r5, #9
 800e506:	e7f6      	b.n	800e4f6 <__s2b+0x66>
 800e508:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e50c:	4601      	mov	r1, r0
 800e50e:	3b30      	subs	r3, #48	@ 0x30
 800e510:	220a      	movs	r2, #10
 800e512:	4630      	mov	r0, r6
 800e514:	f7ff ff76 	bl	800e404 <__multadd>
 800e518:	e7ee      	b.n	800e4f8 <__s2b+0x68>
 800e51a:	bf00      	nop
 800e51c:	08011b3d 	.word	0x08011b3d
 800e520:	08011b4e 	.word	0x08011b4e

0800e524 <__hi0bits>:
 800e524:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e528:	4603      	mov	r3, r0
 800e52a:	bf36      	itet	cc
 800e52c:	0403      	lslcc	r3, r0, #16
 800e52e:	2000      	movcs	r0, #0
 800e530:	2010      	movcc	r0, #16
 800e532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e536:	bf3c      	itt	cc
 800e538:	021b      	lslcc	r3, r3, #8
 800e53a:	3008      	addcc	r0, #8
 800e53c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e540:	bf3c      	itt	cc
 800e542:	011b      	lslcc	r3, r3, #4
 800e544:	3004      	addcc	r0, #4
 800e546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e54a:	bf3c      	itt	cc
 800e54c:	009b      	lslcc	r3, r3, #2
 800e54e:	3002      	addcc	r0, #2
 800e550:	2b00      	cmp	r3, #0
 800e552:	db05      	blt.n	800e560 <__hi0bits+0x3c>
 800e554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e558:	f100 0001 	add.w	r0, r0, #1
 800e55c:	bf08      	it	eq
 800e55e:	2020      	moveq	r0, #32
 800e560:	4770      	bx	lr

0800e562 <__lo0bits>:
 800e562:	6803      	ldr	r3, [r0, #0]
 800e564:	4602      	mov	r2, r0
 800e566:	f013 0007 	ands.w	r0, r3, #7
 800e56a:	d00b      	beq.n	800e584 <__lo0bits+0x22>
 800e56c:	07d9      	lsls	r1, r3, #31
 800e56e:	d421      	bmi.n	800e5b4 <__lo0bits+0x52>
 800e570:	0798      	lsls	r0, r3, #30
 800e572:	bf49      	itett	mi
 800e574:	085b      	lsrmi	r3, r3, #1
 800e576:	089b      	lsrpl	r3, r3, #2
 800e578:	2001      	movmi	r0, #1
 800e57a:	6013      	strmi	r3, [r2, #0]
 800e57c:	bf5c      	itt	pl
 800e57e:	6013      	strpl	r3, [r2, #0]
 800e580:	2002      	movpl	r0, #2
 800e582:	4770      	bx	lr
 800e584:	b299      	uxth	r1, r3
 800e586:	b909      	cbnz	r1, 800e58c <__lo0bits+0x2a>
 800e588:	0c1b      	lsrs	r3, r3, #16
 800e58a:	2010      	movs	r0, #16
 800e58c:	b2d9      	uxtb	r1, r3
 800e58e:	b909      	cbnz	r1, 800e594 <__lo0bits+0x32>
 800e590:	3008      	adds	r0, #8
 800e592:	0a1b      	lsrs	r3, r3, #8
 800e594:	0719      	lsls	r1, r3, #28
 800e596:	bf04      	itt	eq
 800e598:	091b      	lsreq	r3, r3, #4
 800e59a:	3004      	addeq	r0, #4
 800e59c:	0799      	lsls	r1, r3, #30
 800e59e:	bf04      	itt	eq
 800e5a0:	089b      	lsreq	r3, r3, #2
 800e5a2:	3002      	addeq	r0, #2
 800e5a4:	07d9      	lsls	r1, r3, #31
 800e5a6:	d403      	bmi.n	800e5b0 <__lo0bits+0x4e>
 800e5a8:	085b      	lsrs	r3, r3, #1
 800e5aa:	f100 0001 	add.w	r0, r0, #1
 800e5ae:	d003      	beq.n	800e5b8 <__lo0bits+0x56>
 800e5b0:	6013      	str	r3, [r2, #0]
 800e5b2:	4770      	bx	lr
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	4770      	bx	lr
 800e5b8:	2020      	movs	r0, #32
 800e5ba:	4770      	bx	lr

0800e5bc <__i2b>:
 800e5bc:	b510      	push	{r4, lr}
 800e5be:	460c      	mov	r4, r1
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	f7ff febd 	bl	800e340 <_Balloc>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	b928      	cbnz	r0, 800e5d6 <__i2b+0x1a>
 800e5ca:	4b05      	ldr	r3, [pc, #20]	@ (800e5e0 <__i2b+0x24>)
 800e5cc:	4805      	ldr	r0, [pc, #20]	@ (800e5e4 <__i2b+0x28>)
 800e5ce:	f240 1145 	movw	r1, #325	@ 0x145
 800e5d2:	f001 fc41 	bl	800fe58 <__assert_func>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	6144      	str	r4, [r0, #20]
 800e5da:	6103      	str	r3, [r0, #16]
 800e5dc:	bd10      	pop	{r4, pc}
 800e5de:	bf00      	nop
 800e5e0:	08011b3d 	.word	0x08011b3d
 800e5e4:	08011b4e 	.word	0x08011b4e

0800e5e8 <__multiply>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	4614      	mov	r4, r2
 800e5ee:	690a      	ldr	r2, [r1, #16]
 800e5f0:	6923      	ldr	r3, [r4, #16]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	bfa8      	it	ge
 800e5f6:	4623      	movge	r3, r4
 800e5f8:	460f      	mov	r7, r1
 800e5fa:	bfa4      	itt	ge
 800e5fc:	460c      	movge	r4, r1
 800e5fe:	461f      	movge	r7, r3
 800e600:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e604:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e608:	68a3      	ldr	r3, [r4, #8]
 800e60a:	6861      	ldr	r1, [r4, #4]
 800e60c:	eb0a 0609 	add.w	r6, sl, r9
 800e610:	42b3      	cmp	r3, r6
 800e612:	b085      	sub	sp, #20
 800e614:	bfb8      	it	lt
 800e616:	3101      	addlt	r1, #1
 800e618:	f7ff fe92 	bl	800e340 <_Balloc>
 800e61c:	b930      	cbnz	r0, 800e62c <__multiply+0x44>
 800e61e:	4602      	mov	r2, r0
 800e620:	4b44      	ldr	r3, [pc, #272]	@ (800e734 <__multiply+0x14c>)
 800e622:	4845      	ldr	r0, [pc, #276]	@ (800e738 <__multiply+0x150>)
 800e624:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e628:	f001 fc16 	bl	800fe58 <__assert_func>
 800e62c:	f100 0514 	add.w	r5, r0, #20
 800e630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e634:	462b      	mov	r3, r5
 800e636:	2200      	movs	r2, #0
 800e638:	4543      	cmp	r3, r8
 800e63a:	d321      	bcc.n	800e680 <__multiply+0x98>
 800e63c:	f107 0114 	add.w	r1, r7, #20
 800e640:	f104 0214 	add.w	r2, r4, #20
 800e644:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e648:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e64c:	9302      	str	r3, [sp, #8]
 800e64e:	1b13      	subs	r3, r2, r4
 800e650:	3b15      	subs	r3, #21
 800e652:	f023 0303 	bic.w	r3, r3, #3
 800e656:	3304      	adds	r3, #4
 800e658:	f104 0715 	add.w	r7, r4, #21
 800e65c:	42ba      	cmp	r2, r7
 800e65e:	bf38      	it	cc
 800e660:	2304      	movcc	r3, #4
 800e662:	9301      	str	r3, [sp, #4]
 800e664:	9b02      	ldr	r3, [sp, #8]
 800e666:	9103      	str	r1, [sp, #12]
 800e668:	428b      	cmp	r3, r1
 800e66a:	d80c      	bhi.n	800e686 <__multiply+0x9e>
 800e66c:	2e00      	cmp	r6, #0
 800e66e:	dd03      	ble.n	800e678 <__multiply+0x90>
 800e670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e674:	2b00      	cmp	r3, #0
 800e676:	d05b      	beq.n	800e730 <__multiply+0x148>
 800e678:	6106      	str	r6, [r0, #16]
 800e67a:	b005      	add	sp, #20
 800e67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e680:	f843 2b04 	str.w	r2, [r3], #4
 800e684:	e7d8      	b.n	800e638 <__multiply+0x50>
 800e686:	f8b1 a000 	ldrh.w	sl, [r1]
 800e68a:	f1ba 0f00 	cmp.w	sl, #0
 800e68e:	d024      	beq.n	800e6da <__multiply+0xf2>
 800e690:	f104 0e14 	add.w	lr, r4, #20
 800e694:	46a9      	mov	r9, r5
 800e696:	f04f 0c00 	mov.w	ip, #0
 800e69a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e69e:	f8d9 3000 	ldr.w	r3, [r9]
 800e6a2:	fa1f fb87 	uxth.w	fp, r7
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e6ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e6b0:	f8d9 7000 	ldr.w	r7, [r9]
 800e6b4:	4463      	add	r3, ip
 800e6b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e6ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800e6be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e6c8:	4572      	cmp	r2, lr
 800e6ca:	f849 3b04 	str.w	r3, [r9], #4
 800e6ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e6d2:	d8e2      	bhi.n	800e69a <__multiply+0xb2>
 800e6d4:	9b01      	ldr	r3, [sp, #4]
 800e6d6:	f845 c003 	str.w	ip, [r5, r3]
 800e6da:	9b03      	ldr	r3, [sp, #12]
 800e6dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e6e0:	3104      	adds	r1, #4
 800e6e2:	f1b9 0f00 	cmp.w	r9, #0
 800e6e6:	d021      	beq.n	800e72c <__multiply+0x144>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	f104 0c14 	add.w	ip, r4, #20
 800e6ee:	46ae      	mov	lr, r5
 800e6f0:	f04f 0a00 	mov.w	sl, #0
 800e6f4:	f8bc b000 	ldrh.w	fp, [ip]
 800e6f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e6fc:	fb09 770b 	mla	r7, r9, fp, r7
 800e700:	4457      	add	r7, sl
 800e702:	b29b      	uxth	r3, r3
 800e704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e708:	f84e 3b04 	str.w	r3, [lr], #4
 800e70c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e714:	f8be 3000 	ldrh.w	r3, [lr]
 800e718:	fb09 330a 	mla	r3, r9, sl, r3
 800e71c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e720:	4562      	cmp	r2, ip
 800e722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e726:	d8e5      	bhi.n	800e6f4 <__multiply+0x10c>
 800e728:	9f01      	ldr	r7, [sp, #4]
 800e72a:	51eb      	str	r3, [r5, r7]
 800e72c:	3504      	adds	r5, #4
 800e72e:	e799      	b.n	800e664 <__multiply+0x7c>
 800e730:	3e01      	subs	r6, #1
 800e732:	e79b      	b.n	800e66c <__multiply+0x84>
 800e734:	08011b3d 	.word	0x08011b3d
 800e738:	08011b4e 	.word	0x08011b4e

0800e73c <__pow5mult>:
 800e73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e740:	4615      	mov	r5, r2
 800e742:	f012 0203 	ands.w	r2, r2, #3
 800e746:	4607      	mov	r7, r0
 800e748:	460e      	mov	r6, r1
 800e74a:	d007      	beq.n	800e75c <__pow5mult+0x20>
 800e74c:	4c25      	ldr	r4, [pc, #148]	@ (800e7e4 <__pow5mult+0xa8>)
 800e74e:	3a01      	subs	r2, #1
 800e750:	2300      	movs	r3, #0
 800e752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e756:	f7ff fe55 	bl	800e404 <__multadd>
 800e75a:	4606      	mov	r6, r0
 800e75c:	10ad      	asrs	r5, r5, #2
 800e75e:	d03d      	beq.n	800e7dc <__pow5mult+0xa0>
 800e760:	69fc      	ldr	r4, [r7, #28]
 800e762:	b97c      	cbnz	r4, 800e784 <__pow5mult+0x48>
 800e764:	2010      	movs	r0, #16
 800e766:	f7ff fd35 	bl	800e1d4 <malloc>
 800e76a:	4602      	mov	r2, r0
 800e76c:	61f8      	str	r0, [r7, #28]
 800e76e:	b928      	cbnz	r0, 800e77c <__pow5mult+0x40>
 800e770:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e8 <__pow5mult+0xac>)
 800e772:	481e      	ldr	r0, [pc, #120]	@ (800e7ec <__pow5mult+0xb0>)
 800e774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e778:	f001 fb6e 	bl	800fe58 <__assert_func>
 800e77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e780:	6004      	str	r4, [r0, #0]
 800e782:	60c4      	str	r4, [r0, #12]
 800e784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e78c:	b94c      	cbnz	r4, 800e7a2 <__pow5mult+0x66>
 800e78e:	f240 2171 	movw	r1, #625	@ 0x271
 800e792:	4638      	mov	r0, r7
 800e794:	f7ff ff12 	bl	800e5bc <__i2b>
 800e798:	2300      	movs	r3, #0
 800e79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e79e:	4604      	mov	r4, r0
 800e7a0:	6003      	str	r3, [r0, #0]
 800e7a2:	f04f 0900 	mov.w	r9, #0
 800e7a6:	07eb      	lsls	r3, r5, #31
 800e7a8:	d50a      	bpl.n	800e7c0 <__pow5mult+0x84>
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4622      	mov	r2, r4
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7ff ff1a 	bl	800e5e8 <__multiply>
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4680      	mov	r8, r0
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f7ff fe01 	bl	800e3c0 <_Bfree>
 800e7be:	4646      	mov	r6, r8
 800e7c0:	106d      	asrs	r5, r5, #1
 800e7c2:	d00b      	beq.n	800e7dc <__pow5mult+0xa0>
 800e7c4:	6820      	ldr	r0, [r4, #0]
 800e7c6:	b938      	cbnz	r0, 800e7d8 <__pow5mult+0x9c>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f7ff ff0b 	bl	800e5e8 <__multiply>
 800e7d2:	6020      	str	r0, [r4, #0]
 800e7d4:	f8c0 9000 	str.w	r9, [r0]
 800e7d8:	4604      	mov	r4, r0
 800e7da:	e7e4      	b.n	800e7a6 <__pow5mult+0x6a>
 800e7dc:	4630      	mov	r0, r6
 800e7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e2:	bf00      	nop
 800e7e4:	08011ba8 	.word	0x08011ba8
 800e7e8:	08011ace 	.word	0x08011ace
 800e7ec:	08011b4e 	.word	0x08011b4e

0800e7f0 <__lshift>:
 800e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	6849      	ldr	r1, [r1, #4]
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7fe:	68a3      	ldr	r3, [r4, #8]
 800e800:	4607      	mov	r7, r0
 800e802:	4691      	mov	r9, r2
 800e804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e808:	f108 0601 	add.w	r6, r8, #1
 800e80c:	42b3      	cmp	r3, r6
 800e80e:	db0b      	blt.n	800e828 <__lshift+0x38>
 800e810:	4638      	mov	r0, r7
 800e812:	f7ff fd95 	bl	800e340 <_Balloc>
 800e816:	4605      	mov	r5, r0
 800e818:	b948      	cbnz	r0, 800e82e <__lshift+0x3e>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4b28      	ldr	r3, [pc, #160]	@ (800e8c0 <__lshift+0xd0>)
 800e81e:	4829      	ldr	r0, [pc, #164]	@ (800e8c4 <__lshift+0xd4>)
 800e820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e824:	f001 fb18 	bl	800fe58 <__assert_func>
 800e828:	3101      	adds	r1, #1
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	e7ee      	b.n	800e80c <__lshift+0x1c>
 800e82e:	2300      	movs	r3, #0
 800e830:	f100 0114 	add.w	r1, r0, #20
 800e834:	f100 0210 	add.w	r2, r0, #16
 800e838:	4618      	mov	r0, r3
 800e83a:	4553      	cmp	r3, sl
 800e83c:	db33      	blt.n	800e8a6 <__lshift+0xb6>
 800e83e:	6920      	ldr	r0, [r4, #16]
 800e840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e844:	f104 0314 	add.w	r3, r4, #20
 800e848:	f019 091f 	ands.w	r9, r9, #31
 800e84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e854:	d02b      	beq.n	800e8ae <__lshift+0xbe>
 800e856:	f1c9 0e20 	rsb	lr, r9, #32
 800e85a:	468a      	mov	sl, r1
 800e85c:	2200      	movs	r2, #0
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	fa00 f009 	lsl.w	r0, r0, r9
 800e864:	4310      	orrs	r0, r2
 800e866:	f84a 0b04 	str.w	r0, [sl], #4
 800e86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86e:	459c      	cmp	ip, r3
 800e870:	fa22 f20e 	lsr.w	r2, r2, lr
 800e874:	d8f3      	bhi.n	800e85e <__lshift+0x6e>
 800e876:	ebac 0304 	sub.w	r3, ip, r4
 800e87a:	3b15      	subs	r3, #21
 800e87c:	f023 0303 	bic.w	r3, r3, #3
 800e880:	3304      	adds	r3, #4
 800e882:	f104 0015 	add.w	r0, r4, #21
 800e886:	4584      	cmp	ip, r0
 800e888:	bf38      	it	cc
 800e88a:	2304      	movcc	r3, #4
 800e88c:	50ca      	str	r2, [r1, r3]
 800e88e:	b10a      	cbz	r2, 800e894 <__lshift+0xa4>
 800e890:	f108 0602 	add.w	r6, r8, #2
 800e894:	3e01      	subs	r6, #1
 800e896:	4638      	mov	r0, r7
 800e898:	612e      	str	r6, [r5, #16]
 800e89a:	4621      	mov	r1, r4
 800e89c:	f7ff fd90 	bl	800e3c0 <_Bfree>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	e7c5      	b.n	800e83a <__lshift+0x4a>
 800e8ae:	3904      	subs	r1, #4
 800e8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8b8:	459c      	cmp	ip, r3
 800e8ba:	d8f9      	bhi.n	800e8b0 <__lshift+0xc0>
 800e8bc:	e7ea      	b.n	800e894 <__lshift+0xa4>
 800e8be:	bf00      	nop
 800e8c0:	08011b3d 	.word	0x08011b3d
 800e8c4:	08011b4e 	.word	0x08011b4e

0800e8c8 <__mcmp>:
 800e8c8:	690a      	ldr	r2, [r1, #16]
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	6900      	ldr	r0, [r0, #16]
 800e8ce:	1a80      	subs	r0, r0, r2
 800e8d0:	b530      	push	{r4, r5, lr}
 800e8d2:	d10e      	bne.n	800e8f2 <__mcmp+0x2a>
 800e8d4:	3314      	adds	r3, #20
 800e8d6:	3114      	adds	r1, #20
 800e8d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e8dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8e8:	4295      	cmp	r5, r2
 800e8ea:	d003      	beq.n	800e8f4 <__mcmp+0x2c>
 800e8ec:	d205      	bcs.n	800e8fa <__mcmp+0x32>
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	bd30      	pop	{r4, r5, pc}
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d3f3      	bcc.n	800e8e0 <__mcmp+0x18>
 800e8f8:	e7fb      	b.n	800e8f2 <__mcmp+0x2a>
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	e7f9      	b.n	800e8f2 <__mcmp+0x2a>
	...

0800e900 <__mdiff>:
 800e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4689      	mov	r9, r1
 800e906:	4606      	mov	r6, r0
 800e908:	4611      	mov	r1, r2
 800e90a:	4648      	mov	r0, r9
 800e90c:	4614      	mov	r4, r2
 800e90e:	f7ff ffdb 	bl	800e8c8 <__mcmp>
 800e912:	1e05      	subs	r5, r0, #0
 800e914:	d112      	bne.n	800e93c <__mdiff+0x3c>
 800e916:	4629      	mov	r1, r5
 800e918:	4630      	mov	r0, r6
 800e91a:	f7ff fd11 	bl	800e340 <_Balloc>
 800e91e:	4602      	mov	r2, r0
 800e920:	b928      	cbnz	r0, 800e92e <__mdiff+0x2e>
 800e922:	4b3f      	ldr	r3, [pc, #252]	@ (800ea20 <__mdiff+0x120>)
 800e924:	f240 2137 	movw	r1, #567	@ 0x237
 800e928:	483e      	ldr	r0, [pc, #248]	@ (800ea24 <__mdiff+0x124>)
 800e92a:	f001 fa95 	bl	800fe58 <__assert_func>
 800e92e:	2301      	movs	r3, #1
 800e930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e934:	4610      	mov	r0, r2
 800e936:	b003      	add	sp, #12
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	bfbc      	itt	lt
 800e93e:	464b      	movlt	r3, r9
 800e940:	46a1      	movlt	r9, r4
 800e942:	4630      	mov	r0, r6
 800e944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e948:	bfba      	itte	lt
 800e94a:	461c      	movlt	r4, r3
 800e94c:	2501      	movlt	r5, #1
 800e94e:	2500      	movge	r5, #0
 800e950:	f7ff fcf6 	bl	800e340 <_Balloc>
 800e954:	4602      	mov	r2, r0
 800e956:	b918      	cbnz	r0, 800e960 <__mdiff+0x60>
 800e958:	4b31      	ldr	r3, [pc, #196]	@ (800ea20 <__mdiff+0x120>)
 800e95a:	f240 2145 	movw	r1, #581	@ 0x245
 800e95e:	e7e3      	b.n	800e928 <__mdiff+0x28>
 800e960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e964:	6926      	ldr	r6, [r4, #16]
 800e966:	60c5      	str	r5, [r0, #12]
 800e968:	f109 0310 	add.w	r3, r9, #16
 800e96c:	f109 0514 	add.w	r5, r9, #20
 800e970:	f104 0e14 	add.w	lr, r4, #20
 800e974:	f100 0b14 	add.w	fp, r0, #20
 800e978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e97c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e980:	9301      	str	r3, [sp, #4]
 800e982:	46d9      	mov	r9, fp
 800e984:	f04f 0c00 	mov.w	ip, #0
 800e988:	9b01      	ldr	r3, [sp, #4]
 800e98a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e98e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	fa1f f38a 	uxth.w	r3, sl
 800e998:	4619      	mov	r1, r3
 800e99a:	b283      	uxth	r3, r0
 800e99c:	1acb      	subs	r3, r1, r3
 800e99e:	0c00      	lsrs	r0, r0, #16
 800e9a0:	4463      	add	r3, ip
 800e9a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e9a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e9b0:	4576      	cmp	r6, lr
 800e9b2:	f849 3b04 	str.w	r3, [r9], #4
 800e9b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e9ba:	d8e5      	bhi.n	800e988 <__mdiff+0x88>
 800e9bc:	1b33      	subs	r3, r6, r4
 800e9be:	3b15      	subs	r3, #21
 800e9c0:	f023 0303 	bic.w	r3, r3, #3
 800e9c4:	3415      	adds	r4, #21
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	42a6      	cmp	r6, r4
 800e9ca:	bf38      	it	cc
 800e9cc:	2304      	movcc	r3, #4
 800e9ce:	441d      	add	r5, r3
 800e9d0:	445b      	add	r3, fp
 800e9d2:	461e      	mov	r6, r3
 800e9d4:	462c      	mov	r4, r5
 800e9d6:	4544      	cmp	r4, r8
 800e9d8:	d30e      	bcc.n	800e9f8 <__mdiff+0xf8>
 800e9da:	f108 0103 	add.w	r1, r8, #3
 800e9de:	1b49      	subs	r1, r1, r5
 800e9e0:	f021 0103 	bic.w	r1, r1, #3
 800e9e4:	3d03      	subs	r5, #3
 800e9e6:	45a8      	cmp	r8, r5
 800e9e8:	bf38      	it	cc
 800e9ea:	2100      	movcc	r1, #0
 800e9ec:	440b      	add	r3, r1
 800e9ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9f2:	b191      	cbz	r1, 800ea1a <__mdiff+0x11a>
 800e9f4:	6117      	str	r7, [r2, #16]
 800e9f6:	e79d      	b.n	800e934 <__mdiff+0x34>
 800e9f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e9fc:	46e6      	mov	lr, ip
 800e9fe:	0c08      	lsrs	r0, r1, #16
 800ea00:	fa1c fc81 	uxtah	ip, ip, r1
 800ea04:	4471      	add	r1, lr
 800ea06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ea0a:	b289      	uxth	r1, r1
 800ea0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ea10:	f846 1b04 	str.w	r1, [r6], #4
 800ea14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea18:	e7dd      	b.n	800e9d6 <__mdiff+0xd6>
 800ea1a:	3f01      	subs	r7, #1
 800ea1c:	e7e7      	b.n	800e9ee <__mdiff+0xee>
 800ea1e:	bf00      	nop
 800ea20:	08011b3d 	.word	0x08011b3d
 800ea24:	08011b4e 	.word	0x08011b4e

0800ea28 <__ulp>:
 800ea28:	b082      	sub	sp, #8
 800ea2a:	ed8d 0b00 	vstr	d0, [sp]
 800ea2e:	9a01      	ldr	r2, [sp, #4]
 800ea30:	4b0f      	ldr	r3, [pc, #60]	@ (800ea70 <__ulp+0x48>)
 800ea32:	4013      	ands	r3, r2
 800ea34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dc08      	bgt.n	800ea4e <__ulp+0x26>
 800ea3c:	425b      	negs	r3, r3
 800ea3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ea42:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ea46:	da04      	bge.n	800ea52 <__ulp+0x2a>
 800ea48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ea4c:	4113      	asrs	r3, r2
 800ea4e:	2200      	movs	r2, #0
 800ea50:	e008      	b.n	800ea64 <__ulp+0x3c>
 800ea52:	f1a2 0314 	sub.w	r3, r2, #20
 800ea56:	2b1e      	cmp	r3, #30
 800ea58:	bfda      	itte	le
 800ea5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ea5e:	40da      	lsrle	r2, r3
 800ea60:	2201      	movgt	r2, #1
 800ea62:	2300      	movs	r3, #0
 800ea64:	4619      	mov	r1, r3
 800ea66:	4610      	mov	r0, r2
 800ea68:	ec41 0b10 	vmov	d0, r0, r1
 800ea6c:	b002      	add	sp, #8
 800ea6e:	4770      	bx	lr
 800ea70:	7ff00000 	.word	0x7ff00000

0800ea74 <__b2d>:
 800ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea78:	6906      	ldr	r6, [r0, #16]
 800ea7a:	f100 0814 	add.w	r8, r0, #20
 800ea7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ea82:	1f37      	subs	r7, r6, #4
 800ea84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea88:	4610      	mov	r0, r2
 800ea8a:	f7ff fd4b 	bl	800e524 <__hi0bits>
 800ea8e:	f1c0 0320 	rsb	r3, r0, #32
 800ea92:	280a      	cmp	r0, #10
 800ea94:	600b      	str	r3, [r1, #0]
 800ea96:	491b      	ldr	r1, [pc, #108]	@ (800eb04 <__b2d+0x90>)
 800ea98:	dc15      	bgt.n	800eac6 <__b2d+0x52>
 800ea9a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ea9e:	fa22 f30c 	lsr.w	r3, r2, ip
 800eaa2:	45b8      	cmp	r8, r7
 800eaa4:	ea43 0501 	orr.w	r5, r3, r1
 800eaa8:	bf34      	ite	cc
 800eaaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eaae:	2300      	movcs	r3, #0
 800eab0:	3015      	adds	r0, #21
 800eab2:	fa02 f000 	lsl.w	r0, r2, r0
 800eab6:	fa23 f30c 	lsr.w	r3, r3, ip
 800eaba:	4303      	orrs	r3, r0
 800eabc:	461c      	mov	r4, r3
 800eabe:	ec45 4b10 	vmov	d0, r4, r5
 800eac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac6:	45b8      	cmp	r8, r7
 800eac8:	bf3a      	itte	cc
 800eaca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eace:	f1a6 0708 	subcc.w	r7, r6, #8
 800ead2:	2300      	movcs	r3, #0
 800ead4:	380b      	subs	r0, #11
 800ead6:	d012      	beq.n	800eafe <__b2d+0x8a>
 800ead8:	f1c0 0120 	rsb	r1, r0, #32
 800eadc:	fa23 f401 	lsr.w	r4, r3, r1
 800eae0:	4082      	lsls	r2, r0
 800eae2:	4322      	orrs	r2, r4
 800eae4:	4547      	cmp	r7, r8
 800eae6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800eaea:	bf8c      	ite	hi
 800eaec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eaf0:	2200      	movls	r2, #0
 800eaf2:	4083      	lsls	r3, r0
 800eaf4:	40ca      	lsrs	r2, r1
 800eaf6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800eafa:	4313      	orrs	r3, r2
 800eafc:	e7de      	b.n	800eabc <__b2d+0x48>
 800eafe:	ea42 0501 	orr.w	r5, r2, r1
 800eb02:	e7db      	b.n	800eabc <__b2d+0x48>
 800eb04:	3ff00000 	.word	0x3ff00000

0800eb08 <__d2b>:
 800eb08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	2101      	movs	r1, #1
 800eb10:	ec59 8b10 	vmov	r8, r9, d0
 800eb14:	4616      	mov	r6, r2
 800eb16:	f7ff fc13 	bl	800e340 <_Balloc>
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	b930      	cbnz	r0, 800eb2c <__d2b+0x24>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	4b23      	ldr	r3, [pc, #140]	@ (800ebb0 <__d2b+0xa8>)
 800eb22:	4824      	ldr	r0, [pc, #144]	@ (800ebb4 <__d2b+0xac>)
 800eb24:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb28:	f001 f996 	bl	800fe58 <__assert_func>
 800eb2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb34:	b10d      	cbz	r5, 800eb3a <__d2b+0x32>
 800eb36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	f1b8 0300 	subs.w	r3, r8, #0
 800eb40:	d023      	beq.n	800eb8a <__d2b+0x82>
 800eb42:	4668      	mov	r0, sp
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	f7ff fd0c 	bl	800e562 <__lo0bits>
 800eb4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb4e:	b1d0      	cbz	r0, 800eb86 <__d2b+0x7e>
 800eb50:	f1c0 0320 	rsb	r3, r0, #32
 800eb54:	fa02 f303 	lsl.w	r3, r2, r3
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	40c2      	lsrs	r2, r0
 800eb5c:	6163      	str	r3, [r4, #20]
 800eb5e:	9201      	str	r2, [sp, #4]
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	61a3      	str	r3, [r4, #24]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	bf0c      	ite	eq
 800eb68:	2201      	moveq	r2, #1
 800eb6a:	2202      	movne	r2, #2
 800eb6c:	6122      	str	r2, [r4, #16]
 800eb6e:	b1a5      	cbz	r5, 800eb9a <__d2b+0x92>
 800eb70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eb74:	4405      	add	r5, r0
 800eb76:	603d      	str	r5, [r7, #0]
 800eb78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eb7c:	6030      	str	r0, [r6, #0]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	b003      	add	sp, #12
 800eb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb86:	6161      	str	r1, [r4, #20]
 800eb88:	e7ea      	b.n	800eb60 <__d2b+0x58>
 800eb8a:	a801      	add	r0, sp, #4
 800eb8c:	f7ff fce9 	bl	800e562 <__lo0bits>
 800eb90:	9b01      	ldr	r3, [sp, #4]
 800eb92:	6163      	str	r3, [r4, #20]
 800eb94:	3020      	adds	r0, #32
 800eb96:	2201      	movs	r2, #1
 800eb98:	e7e8      	b.n	800eb6c <__d2b+0x64>
 800eb9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eba2:	6038      	str	r0, [r7, #0]
 800eba4:	6918      	ldr	r0, [r3, #16]
 800eba6:	f7ff fcbd 	bl	800e524 <__hi0bits>
 800ebaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebae:	e7e5      	b.n	800eb7c <__d2b+0x74>
 800ebb0:	08011b3d 	.word	0x08011b3d
 800ebb4:	08011b4e 	.word	0x08011b4e

0800ebb8 <__ratio>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	b085      	sub	sp, #20
 800ebbe:	e9cd 1000 	strd	r1, r0, [sp]
 800ebc2:	a902      	add	r1, sp, #8
 800ebc4:	f7ff ff56 	bl	800ea74 <__b2d>
 800ebc8:	9800      	ldr	r0, [sp, #0]
 800ebca:	a903      	add	r1, sp, #12
 800ebcc:	ec55 4b10 	vmov	r4, r5, d0
 800ebd0:	f7ff ff50 	bl	800ea74 <__b2d>
 800ebd4:	9b01      	ldr	r3, [sp, #4]
 800ebd6:	6919      	ldr	r1, [r3, #16]
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	1ac9      	subs	r1, r1, r3
 800ebde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ebe2:	1a9b      	subs	r3, r3, r2
 800ebe4:	ec5b ab10 	vmov	sl, fp, d0
 800ebe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	bfce      	itee	gt
 800ebf0:	462a      	movgt	r2, r5
 800ebf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ebf6:	465a      	movle	r2, fp
 800ebf8:	462f      	mov	r7, r5
 800ebfa:	46d9      	mov	r9, fp
 800ebfc:	bfcc      	ite	gt
 800ebfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ec06:	464b      	mov	r3, r9
 800ec08:	4652      	mov	r2, sl
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f7f1 fe25 	bl	800085c <__aeabi_ddiv>
 800ec12:	ec41 0b10 	vmov	d0, r0, r1
 800ec16:	b005      	add	sp, #20
 800ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec1c <__copybits>:
 800ec1c:	3901      	subs	r1, #1
 800ec1e:	b570      	push	{r4, r5, r6, lr}
 800ec20:	1149      	asrs	r1, r1, #5
 800ec22:	6914      	ldr	r4, [r2, #16]
 800ec24:	3101      	adds	r1, #1
 800ec26:	f102 0314 	add.w	r3, r2, #20
 800ec2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec32:	1f05      	subs	r5, r0, #4
 800ec34:	42a3      	cmp	r3, r4
 800ec36:	d30c      	bcc.n	800ec52 <__copybits+0x36>
 800ec38:	1aa3      	subs	r3, r4, r2
 800ec3a:	3b11      	subs	r3, #17
 800ec3c:	f023 0303 	bic.w	r3, r3, #3
 800ec40:	3211      	adds	r2, #17
 800ec42:	42a2      	cmp	r2, r4
 800ec44:	bf88      	it	hi
 800ec46:	2300      	movhi	r3, #0
 800ec48:	4418      	add	r0, r3
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4288      	cmp	r0, r1
 800ec4e:	d305      	bcc.n	800ec5c <__copybits+0x40>
 800ec50:	bd70      	pop	{r4, r5, r6, pc}
 800ec52:	f853 6b04 	ldr.w	r6, [r3], #4
 800ec56:	f845 6f04 	str.w	r6, [r5, #4]!
 800ec5a:	e7eb      	b.n	800ec34 <__copybits+0x18>
 800ec5c:	f840 3b04 	str.w	r3, [r0], #4
 800ec60:	e7f4      	b.n	800ec4c <__copybits+0x30>

0800ec62 <__any_on>:
 800ec62:	f100 0214 	add.w	r2, r0, #20
 800ec66:	6900      	ldr	r0, [r0, #16]
 800ec68:	114b      	asrs	r3, r1, #5
 800ec6a:	4298      	cmp	r0, r3
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	db11      	blt.n	800ec94 <__any_on+0x32>
 800ec70:	dd0a      	ble.n	800ec88 <__any_on+0x26>
 800ec72:	f011 011f 	ands.w	r1, r1, #31
 800ec76:	d007      	beq.n	800ec88 <__any_on+0x26>
 800ec78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec7c:	fa24 f001 	lsr.w	r0, r4, r1
 800ec80:	fa00 f101 	lsl.w	r1, r0, r1
 800ec84:	428c      	cmp	r4, r1
 800ec86:	d10b      	bne.n	800eca0 <__any_on+0x3e>
 800ec88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d803      	bhi.n	800ec98 <__any_on+0x36>
 800ec90:	2000      	movs	r0, #0
 800ec92:	bd10      	pop	{r4, pc}
 800ec94:	4603      	mov	r3, r0
 800ec96:	e7f7      	b.n	800ec88 <__any_on+0x26>
 800ec98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec9c:	2900      	cmp	r1, #0
 800ec9e:	d0f5      	beq.n	800ec8c <__any_on+0x2a>
 800eca0:	2001      	movs	r0, #1
 800eca2:	e7f6      	b.n	800ec92 <__any_on+0x30>

0800eca4 <sulp>:
 800eca4:	b570      	push	{r4, r5, r6, lr}
 800eca6:	4604      	mov	r4, r0
 800eca8:	460d      	mov	r5, r1
 800ecaa:	ec45 4b10 	vmov	d0, r4, r5
 800ecae:	4616      	mov	r6, r2
 800ecb0:	f7ff feba 	bl	800ea28 <__ulp>
 800ecb4:	ec51 0b10 	vmov	r0, r1, d0
 800ecb8:	b17e      	cbz	r6, 800ecda <sulp+0x36>
 800ecba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ecbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dd09      	ble.n	800ecda <sulp+0x36>
 800ecc6:	051b      	lsls	r3, r3, #20
 800ecc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eccc:	2400      	movs	r4, #0
 800ecce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	f7f1 fc97 	bl	8000608 <__aeabi_dmul>
 800ecda:	ec41 0b10 	vmov	d0, r0, r1
 800ecde:	bd70      	pop	{r4, r5, r6, pc}

0800ece0 <_strtod_l>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	b09f      	sub	sp, #124	@ 0x7c
 800ece6:	460c      	mov	r4, r1
 800ece8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ecea:	2200      	movs	r2, #0
 800ecec:	921a      	str	r2, [sp, #104]	@ 0x68
 800ecee:	9005      	str	r0, [sp, #20]
 800ecf0:	f04f 0a00 	mov.w	sl, #0
 800ecf4:	f04f 0b00 	mov.w	fp, #0
 800ecf8:	460a      	mov	r2, r1
 800ecfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecfc:	7811      	ldrb	r1, [r2, #0]
 800ecfe:	292b      	cmp	r1, #43	@ 0x2b
 800ed00:	d04a      	beq.n	800ed98 <_strtod_l+0xb8>
 800ed02:	d838      	bhi.n	800ed76 <_strtod_l+0x96>
 800ed04:	290d      	cmp	r1, #13
 800ed06:	d832      	bhi.n	800ed6e <_strtod_l+0x8e>
 800ed08:	2908      	cmp	r1, #8
 800ed0a:	d832      	bhi.n	800ed72 <_strtod_l+0x92>
 800ed0c:	2900      	cmp	r1, #0
 800ed0e:	d03b      	beq.n	800ed88 <_strtod_l+0xa8>
 800ed10:	2200      	movs	r2, #0
 800ed12:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ed14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ed16:	782a      	ldrb	r2, [r5, #0]
 800ed18:	2a30      	cmp	r2, #48	@ 0x30
 800ed1a:	f040 80b3 	bne.w	800ee84 <_strtod_l+0x1a4>
 800ed1e:	786a      	ldrb	r2, [r5, #1]
 800ed20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ed24:	2a58      	cmp	r2, #88	@ 0x58
 800ed26:	d16e      	bne.n	800ee06 <_strtod_l+0x126>
 800ed28:	9302      	str	r3, [sp, #8]
 800ed2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	4a8e      	ldr	r2, [pc, #568]	@ (800ef6c <_strtod_l+0x28c>)
 800ed34:	9805      	ldr	r0, [sp, #20]
 800ed36:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ed38:	a919      	add	r1, sp, #100	@ 0x64
 800ed3a:	f001 f927 	bl	800ff8c <__gethex>
 800ed3e:	f010 060f 	ands.w	r6, r0, #15
 800ed42:	4604      	mov	r4, r0
 800ed44:	d005      	beq.n	800ed52 <_strtod_l+0x72>
 800ed46:	2e06      	cmp	r6, #6
 800ed48:	d128      	bne.n	800ed9c <_strtod_l+0xbc>
 800ed4a:	3501      	adds	r5, #1
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ed50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f040 858e 	bne.w	800f876 <_strtod_l+0xb96>
 800ed5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed5c:	b1cb      	cbz	r3, 800ed92 <_strtod_l+0xb2>
 800ed5e:	4652      	mov	r2, sl
 800ed60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ed64:	ec43 2b10 	vmov	d0, r2, r3
 800ed68:	b01f      	add	sp, #124	@ 0x7c
 800ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed6e:	2920      	cmp	r1, #32
 800ed70:	d1ce      	bne.n	800ed10 <_strtod_l+0x30>
 800ed72:	3201      	adds	r2, #1
 800ed74:	e7c1      	b.n	800ecfa <_strtod_l+0x1a>
 800ed76:	292d      	cmp	r1, #45	@ 0x2d
 800ed78:	d1ca      	bne.n	800ed10 <_strtod_l+0x30>
 800ed7a:	2101      	movs	r1, #1
 800ed7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ed7e:	1c51      	adds	r1, r2, #1
 800ed80:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed82:	7852      	ldrb	r2, [r2, #1]
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	d1c5      	bne.n	800ed14 <_strtod_l+0x34>
 800ed88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed8a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f040 8570 	bne.w	800f872 <_strtod_l+0xb92>
 800ed92:	4652      	mov	r2, sl
 800ed94:	465b      	mov	r3, fp
 800ed96:	e7e5      	b.n	800ed64 <_strtod_l+0x84>
 800ed98:	2100      	movs	r1, #0
 800ed9a:	e7ef      	b.n	800ed7c <_strtod_l+0x9c>
 800ed9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed9e:	b13a      	cbz	r2, 800edb0 <_strtod_l+0xd0>
 800eda0:	2135      	movs	r1, #53	@ 0x35
 800eda2:	a81c      	add	r0, sp, #112	@ 0x70
 800eda4:	f7ff ff3a 	bl	800ec1c <__copybits>
 800eda8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edaa:	9805      	ldr	r0, [sp, #20]
 800edac:	f7ff fb08 	bl	800e3c0 <_Bfree>
 800edb0:	3e01      	subs	r6, #1
 800edb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800edb4:	2e04      	cmp	r6, #4
 800edb6:	d806      	bhi.n	800edc6 <_strtod_l+0xe6>
 800edb8:	e8df f006 	tbb	[pc, r6]
 800edbc:	201d0314 	.word	0x201d0314
 800edc0:	14          	.byte	0x14
 800edc1:	00          	.byte	0x00
 800edc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800edc6:	05e1      	lsls	r1, r4, #23
 800edc8:	bf48      	it	mi
 800edca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800edce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edd2:	0d1b      	lsrs	r3, r3, #20
 800edd4:	051b      	lsls	r3, r3, #20
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d1bb      	bne.n	800ed52 <_strtod_l+0x72>
 800edda:	f7fe fb31 	bl	800d440 <__errno>
 800edde:	2322      	movs	r3, #34	@ 0x22
 800ede0:	6003      	str	r3, [r0, #0]
 800ede2:	e7b6      	b.n	800ed52 <_strtod_l+0x72>
 800ede4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ede8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800edec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800edf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800edf4:	e7e7      	b.n	800edc6 <_strtod_l+0xe6>
 800edf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ef74 <_strtod_l+0x294>
 800edfa:	e7e4      	b.n	800edc6 <_strtod_l+0xe6>
 800edfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ee00:	f04f 3aff 	mov.w	sl, #4294967295
 800ee04:	e7df      	b.n	800edc6 <_strtod_l+0xe6>
 800ee06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee0c:	785b      	ldrb	r3, [r3, #1]
 800ee0e:	2b30      	cmp	r3, #48	@ 0x30
 800ee10:	d0f9      	beq.n	800ee06 <_strtod_l+0x126>
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d09d      	beq.n	800ed52 <_strtod_l+0x72>
 800ee16:	2301      	movs	r3, #1
 800ee18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee1e:	2300      	movs	r3, #0
 800ee20:	9308      	str	r3, [sp, #32]
 800ee22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee24:	461f      	mov	r7, r3
 800ee26:	220a      	movs	r2, #10
 800ee28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ee2a:	7805      	ldrb	r5, [r0, #0]
 800ee2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ee30:	b2d9      	uxtb	r1, r3
 800ee32:	2909      	cmp	r1, #9
 800ee34:	d928      	bls.n	800ee88 <_strtod_l+0x1a8>
 800ee36:	494e      	ldr	r1, [pc, #312]	@ (800ef70 <_strtod_l+0x290>)
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f000 ffd5 	bl	800fde8 <strncmp>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d032      	beq.n	800eea8 <_strtod_l+0x1c8>
 800ee42:	2000      	movs	r0, #0
 800ee44:	462a      	mov	r2, r5
 800ee46:	4681      	mov	r9, r0
 800ee48:	463d      	mov	r5, r7
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2a65      	cmp	r2, #101	@ 0x65
 800ee4e:	d001      	beq.n	800ee54 <_strtod_l+0x174>
 800ee50:	2a45      	cmp	r2, #69	@ 0x45
 800ee52:	d114      	bne.n	800ee7e <_strtod_l+0x19e>
 800ee54:	b91d      	cbnz	r5, 800ee5e <_strtod_l+0x17e>
 800ee56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee58:	4302      	orrs	r2, r0
 800ee5a:	d095      	beq.n	800ed88 <_strtod_l+0xa8>
 800ee5c:	2500      	movs	r5, #0
 800ee5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ee60:	1c62      	adds	r2, r4, #1
 800ee62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee64:	7862      	ldrb	r2, [r4, #1]
 800ee66:	2a2b      	cmp	r2, #43	@ 0x2b
 800ee68:	d077      	beq.n	800ef5a <_strtod_l+0x27a>
 800ee6a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ee6c:	d07b      	beq.n	800ef66 <_strtod_l+0x286>
 800ee6e:	f04f 0c00 	mov.w	ip, #0
 800ee72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ee76:	2909      	cmp	r1, #9
 800ee78:	f240 8082 	bls.w	800ef80 <_strtod_l+0x2a0>
 800ee7c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ee7e:	f04f 0800 	mov.w	r8, #0
 800ee82:	e0a2      	b.n	800efca <_strtod_l+0x2ea>
 800ee84:	2300      	movs	r3, #0
 800ee86:	e7c7      	b.n	800ee18 <_strtod_l+0x138>
 800ee88:	2f08      	cmp	r7, #8
 800ee8a:	bfd5      	itete	le
 800ee8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ee8e:	9908      	ldrgt	r1, [sp, #32]
 800ee90:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee94:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ee98:	f100 0001 	add.w	r0, r0, #1
 800ee9c:	bfd4      	ite	le
 800ee9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800eea0:	9308      	strgt	r3, [sp, #32]
 800eea2:	3701      	adds	r7, #1
 800eea4:	9019      	str	r0, [sp, #100]	@ 0x64
 800eea6:	e7bf      	b.n	800ee28 <_strtod_l+0x148>
 800eea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	9219      	str	r2, [sp, #100]	@ 0x64
 800eeae:	785a      	ldrb	r2, [r3, #1]
 800eeb0:	b37f      	cbz	r7, 800ef12 <_strtod_l+0x232>
 800eeb2:	4681      	mov	r9, r0
 800eeb4:	463d      	mov	r5, r7
 800eeb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	d912      	bls.n	800eee4 <_strtod_l+0x204>
 800eebe:	2301      	movs	r3, #1
 800eec0:	e7c4      	b.n	800ee4c <_strtod_l+0x16c>
 800eec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	9219      	str	r2, [sp, #100]	@ 0x64
 800eec8:	785a      	ldrb	r2, [r3, #1]
 800eeca:	3001      	adds	r0, #1
 800eecc:	2a30      	cmp	r2, #48	@ 0x30
 800eece:	d0f8      	beq.n	800eec2 <_strtod_l+0x1e2>
 800eed0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eed4:	2b08      	cmp	r3, #8
 800eed6:	f200 84d3 	bhi.w	800f880 <_strtod_l+0xba0>
 800eeda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eedc:	930c      	str	r3, [sp, #48]	@ 0x30
 800eede:	4681      	mov	r9, r0
 800eee0:	2000      	movs	r0, #0
 800eee2:	4605      	mov	r5, r0
 800eee4:	3a30      	subs	r2, #48	@ 0x30
 800eee6:	f100 0301 	add.w	r3, r0, #1
 800eeea:	d02a      	beq.n	800ef42 <_strtod_l+0x262>
 800eeec:	4499      	add	r9, r3
 800eeee:	eb00 0c05 	add.w	ip, r0, r5
 800eef2:	462b      	mov	r3, r5
 800eef4:	210a      	movs	r1, #10
 800eef6:	4563      	cmp	r3, ip
 800eef8:	d10d      	bne.n	800ef16 <_strtod_l+0x236>
 800eefa:	1c69      	adds	r1, r5, #1
 800eefc:	4401      	add	r1, r0
 800eefe:	4428      	add	r0, r5
 800ef00:	2808      	cmp	r0, #8
 800ef02:	dc16      	bgt.n	800ef32 <_strtod_l+0x252>
 800ef04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef06:	230a      	movs	r3, #10
 800ef08:	fb03 2300 	mla	r3, r3, r0, r2
 800ef0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e018      	b.n	800ef44 <_strtod_l+0x264>
 800ef12:	4638      	mov	r0, r7
 800ef14:	e7da      	b.n	800eecc <_strtod_l+0x1ec>
 800ef16:	2b08      	cmp	r3, #8
 800ef18:	f103 0301 	add.w	r3, r3, #1
 800ef1c:	dc03      	bgt.n	800ef26 <_strtod_l+0x246>
 800ef1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ef20:	434e      	muls	r6, r1
 800ef22:	960a      	str	r6, [sp, #40]	@ 0x28
 800ef24:	e7e7      	b.n	800eef6 <_strtod_l+0x216>
 800ef26:	2b10      	cmp	r3, #16
 800ef28:	bfde      	ittt	le
 800ef2a:	9e08      	ldrle	r6, [sp, #32]
 800ef2c:	434e      	mulle	r6, r1
 800ef2e:	9608      	strle	r6, [sp, #32]
 800ef30:	e7e1      	b.n	800eef6 <_strtod_l+0x216>
 800ef32:	280f      	cmp	r0, #15
 800ef34:	dceb      	bgt.n	800ef0e <_strtod_l+0x22e>
 800ef36:	9808      	ldr	r0, [sp, #32]
 800ef38:	230a      	movs	r3, #10
 800ef3a:	fb03 2300 	mla	r3, r3, r0, r2
 800ef3e:	9308      	str	r3, [sp, #32]
 800ef40:	e7e5      	b.n	800ef0e <_strtod_l+0x22e>
 800ef42:	4629      	mov	r1, r5
 800ef44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef46:	1c50      	adds	r0, r2, #1
 800ef48:	9019      	str	r0, [sp, #100]	@ 0x64
 800ef4a:	7852      	ldrb	r2, [r2, #1]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	460d      	mov	r5, r1
 800ef50:	e7b1      	b.n	800eeb6 <_strtod_l+0x1d6>
 800ef52:	f04f 0900 	mov.w	r9, #0
 800ef56:	2301      	movs	r3, #1
 800ef58:	e77d      	b.n	800ee56 <_strtod_l+0x176>
 800ef5a:	f04f 0c00 	mov.w	ip, #0
 800ef5e:	1ca2      	adds	r2, r4, #2
 800ef60:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef62:	78a2      	ldrb	r2, [r4, #2]
 800ef64:	e785      	b.n	800ee72 <_strtod_l+0x192>
 800ef66:	f04f 0c01 	mov.w	ip, #1
 800ef6a:	e7f8      	b.n	800ef5e <_strtod_l+0x27e>
 800ef6c:	08011cc0 	.word	0x08011cc0
 800ef70:	08011ca8 	.word	0x08011ca8
 800ef74:	7ff00000 	.word	0x7ff00000
 800ef78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef7a:	1c51      	adds	r1, r2, #1
 800ef7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef7e:	7852      	ldrb	r2, [r2, #1]
 800ef80:	2a30      	cmp	r2, #48	@ 0x30
 800ef82:	d0f9      	beq.n	800ef78 <_strtod_l+0x298>
 800ef84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ef88:	2908      	cmp	r1, #8
 800ef8a:	f63f af78 	bhi.w	800ee7e <_strtod_l+0x19e>
 800ef8e:	3a30      	subs	r2, #48	@ 0x30
 800ef90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ef96:	f04f 080a 	mov.w	r8, #10
 800ef9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef9c:	1c56      	adds	r6, r2, #1
 800ef9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800efa0:	7852      	ldrb	r2, [r2, #1]
 800efa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800efa6:	f1be 0f09 	cmp.w	lr, #9
 800efaa:	d939      	bls.n	800f020 <_strtod_l+0x340>
 800efac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800efae:	1a76      	subs	r6, r6, r1
 800efb0:	2e08      	cmp	r6, #8
 800efb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800efb6:	dc03      	bgt.n	800efc0 <_strtod_l+0x2e0>
 800efb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800efba:	4588      	cmp	r8, r1
 800efbc:	bfa8      	it	ge
 800efbe:	4688      	movge	r8, r1
 800efc0:	f1bc 0f00 	cmp.w	ip, #0
 800efc4:	d001      	beq.n	800efca <_strtod_l+0x2ea>
 800efc6:	f1c8 0800 	rsb	r8, r8, #0
 800efca:	2d00      	cmp	r5, #0
 800efcc:	d14e      	bne.n	800f06c <_strtod_l+0x38c>
 800efce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efd0:	4308      	orrs	r0, r1
 800efd2:	f47f aebe 	bne.w	800ed52 <_strtod_l+0x72>
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f47f aed6 	bne.w	800ed88 <_strtod_l+0xa8>
 800efdc:	2a69      	cmp	r2, #105	@ 0x69
 800efde:	d028      	beq.n	800f032 <_strtod_l+0x352>
 800efe0:	dc25      	bgt.n	800f02e <_strtod_l+0x34e>
 800efe2:	2a49      	cmp	r2, #73	@ 0x49
 800efe4:	d025      	beq.n	800f032 <_strtod_l+0x352>
 800efe6:	2a4e      	cmp	r2, #78	@ 0x4e
 800efe8:	f47f aece 	bne.w	800ed88 <_strtod_l+0xa8>
 800efec:	499b      	ldr	r1, [pc, #620]	@ (800f25c <_strtod_l+0x57c>)
 800efee:	a819      	add	r0, sp, #100	@ 0x64
 800eff0:	f001 f9ee 	bl	80103d0 <__match>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f43f aec7 	beq.w	800ed88 <_strtod_l+0xa8>
 800effa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	2b28      	cmp	r3, #40	@ 0x28
 800f000:	d12e      	bne.n	800f060 <_strtod_l+0x380>
 800f002:	4997      	ldr	r1, [pc, #604]	@ (800f260 <_strtod_l+0x580>)
 800f004:	aa1c      	add	r2, sp, #112	@ 0x70
 800f006:	a819      	add	r0, sp, #100	@ 0x64
 800f008:	f001 f9f6 	bl	80103f8 <__hexnan>
 800f00c:	2805      	cmp	r0, #5
 800f00e:	d127      	bne.n	800f060 <_strtod_l+0x380>
 800f010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f012:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f016:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f01a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f01e:	e698      	b.n	800ed52 <_strtod_l+0x72>
 800f020:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f022:	fb08 2101 	mla	r1, r8, r1, r2
 800f026:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f02c:	e7b5      	b.n	800ef9a <_strtod_l+0x2ba>
 800f02e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f030:	e7da      	b.n	800efe8 <_strtod_l+0x308>
 800f032:	498c      	ldr	r1, [pc, #560]	@ (800f264 <_strtod_l+0x584>)
 800f034:	a819      	add	r0, sp, #100	@ 0x64
 800f036:	f001 f9cb 	bl	80103d0 <__match>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	f43f aea4 	beq.w	800ed88 <_strtod_l+0xa8>
 800f040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f042:	4989      	ldr	r1, [pc, #548]	@ (800f268 <_strtod_l+0x588>)
 800f044:	3b01      	subs	r3, #1
 800f046:	a819      	add	r0, sp, #100	@ 0x64
 800f048:	9319      	str	r3, [sp, #100]	@ 0x64
 800f04a:	f001 f9c1 	bl	80103d0 <__match>
 800f04e:	b910      	cbnz	r0, 800f056 <_strtod_l+0x376>
 800f050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f052:	3301      	adds	r3, #1
 800f054:	9319      	str	r3, [sp, #100]	@ 0x64
 800f056:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f278 <_strtod_l+0x598>
 800f05a:	f04f 0a00 	mov.w	sl, #0
 800f05e:	e678      	b.n	800ed52 <_strtod_l+0x72>
 800f060:	4882      	ldr	r0, [pc, #520]	@ (800f26c <_strtod_l+0x58c>)
 800f062:	f000 fef1 	bl	800fe48 <nan>
 800f066:	ec5b ab10 	vmov	sl, fp, d0
 800f06a:	e672      	b.n	800ed52 <_strtod_l+0x72>
 800f06c:	eba8 0309 	sub.w	r3, r8, r9
 800f070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f072:	9309      	str	r3, [sp, #36]	@ 0x24
 800f074:	2f00      	cmp	r7, #0
 800f076:	bf08      	it	eq
 800f078:	462f      	moveq	r7, r5
 800f07a:	2d10      	cmp	r5, #16
 800f07c:	462c      	mov	r4, r5
 800f07e:	bfa8      	it	ge
 800f080:	2410      	movge	r4, #16
 800f082:	f7f1 fa47 	bl	8000514 <__aeabi_ui2d>
 800f086:	2d09      	cmp	r5, #9
 800f088:	4682      	mov	sl, r0
 800f08a:	468b      	mov	fp, r1
 800f08c:	dc13      	bgt.n	800f0b6 <_strtod_l+0x3d6>
 800f08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f090:	2b00      	cmp	r3, #0
 800f092:	f43f ae5e 	beq.w	800ed52 <_strtod_l+0x72>
 800f096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f098:	dd78      	ble.n	800f18c <_strtod_l+0x4ac>
 800f09a:	2b16      	cmp	r3, #22
 800f09c:	dc5f      	bgt.n	800f15e <_strtod_l+0x47e>
 800f09e:	4974      	ldr	r1, [pc, #464]	@ (800f270 <_strtod_l+0x590>)
 800f0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	465b      	mov	r3, fp
 800f0ac:	f7f1 faac 	bl	8000608 <__aeabi_dmul>
 800f0b0:	4682      	mov	sl, r0
 800f0b2:	468b      	mov	fp, r1
 800f0b4:	e64d      	b.n	800ed52 <_strtod_l+0x72>
 800f0b6:	4b6e      	ldr	r3, [pc, #440]	@ (800f270 <_strtod_l+0x590>)
 800f0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f0c0:	f7f1 faa2 	bl	8000608 <__aeabi_dmul>
 800f0c4:	4682      	mov	sl, r0
 800f0c6:	9808      	ldr	r0, [sp, #32]
 800f0c8:	468b      	mov	fp, r1
 800f0ca:	f7f1 fa23 	bl	8000514 <__aeabi_ui2d>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	f7f1 f8e1 	bl	800029c <__adddf3>
 800f0da:	2d0f      	cmp	r5, #15
 800f0dc:	4682      	mov	sl, r0
 800f0de:	468b      	mov	fp, r1
 800f0e0:	ddd5      	ble.n	800f08e <_strtod_l+0x3ae>
 800f0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e4:	1b2c      	subs	r4, r5, r4
 800f0e6:	441c      	add	r4, r3
 800f0e8:	2c00      	cmp	r4, #0
 800f0ea:	f340 8096 	ble.w	800f21a <_strtod_l+0x53a>
 800f0ee:	f014 030f 	ands.w	r3, r4, #15
 800f0f2:	d00a      	beq.n	800f10a <_strtod_l+0x42a>
 800f0f4:	495e      	ldr	r1, [pc, #376]	@ (800f270 <_strtod_l+0x590>)
 800f0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0fa:	4652      	mov	r2, sl
 800f0fc:	465b      	mov	r3, fp
 800f0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f102:	f7f1 fa81 	bl	8000608 <__aeabi_dmul>
 800f106:	4682      	mov	sl, r0
 800f108:	468b      	mov	fp, r1
 800f10a:	f034 040f 	bics.w	r4, r4, #15
 800f10e:	d073      	beq.n	800f1f8 <_strtod_l+0x518>
 800f110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f114:	dd48      	ble.n	800f1a8 <_strtod_l+0x4c8>
 800f116:	2400      	movs	r4, #0
 800f118:	46a0      	mov	r8, r4
 800f11a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f11c:	46a1      	mov	r9, r4
 800f11e:	9a05      	ldr	r2, [sp, #20]
 800f120:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f278 <_strtod_l+0x598>
 800f124:	2322      	movs	r3, #34	@ 0x22
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	f04f 0a00 	mov.w	sl, #0
 800f12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f43f ae0f 	beq.w	800ed52 <_strtod_l+0x72>
 800f134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f136:	9805      	ldr	r0, [sp, #20]
 800f138:	f7ff f942 	bl	800e3c0 <_Bfree>
 800f13c:	9805      	ldr	r0, [sp, #20]
 800f13e:	4649      	mov	r1, r9
 800f140:	f7ff f93e 	bl	800e3c0 <_Bfree>
 800f144:	9805      	ldr	r0, [sp, #20]
 800f146:	4641      	mov	r1, r8
 800f148:	f7ff f93a 	bl	800e3c0 <_Bfree>
 800f14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f14e:	9805      	ldr	r0, [sp, #20]
 800f150:	f7ff f936 	bl	800e3c0 <_Bfree>
 800f154:	9805      	ldr	r0, [sp, #20]
 800f156:	4621      	mov	r1, r4
 800f158:	f7ff f932 	bl	800e3c0 <_Bfree>
 800f15c:	e5f9      	b.n	800ed52 <_strtod_l+0x72>
 800f15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f164:	4293      	cmp	r3, r2
 800f166:	dbbc      	blt.n	800f0e2 <_strtod_l+0x402>
 800f168:	4c41      	ldr	r4, [pc, #260]	@ (800f270 <_strtod_l+0x590>)
 800f16a:	f1c5 050f 	rsb	r5, r5, #15
 800f16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f172:	4652      	mov	r2, sl
 800f174:	465b      	mov	r3, fp
 800f176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17a:	f7f1 fa45 	bl	8000608 <__aeabi_dmul>
 800f17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f180:	1b5d      	subs	r5, r3, r5
 800f182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f18a:	e78f      	b.n	800f0ac <_strtod_l+0x3cc>
 800f18c:	3316      	adds	r3, #22
 800f18e:	dba8      	blt.n	800f0e2 <_strtod_l+0x402>
 800f190:	4b37      	ldr	r3, [pc, #220]	@ (800f270 <_strtod_l+0x590>)
 800f192:	eba9 0808 	sub.w	r8, r9, r8
 800f196:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f19a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f19e:	4650      	mov	r0, sl
 800f1a0:	4659      	mov	r1, fp
 800f1a2:	f7f1 fb5b 	bl	800085c <__aeabi_ddiv>
 800f1a6:	e783      	b.n	800f0b0 <_strtod_l+0x3d0>
 800f1a8:	4b32      	ldr	r3, [pc, #200]	@ (800f274 <_strtod_l+0x594>)
 800f1aa:	9308      	str	r3, [sp, #32]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	1124      	asrs	r4, r4, #4
 800f1b0:	4650      	mov	r0, sl
 800f1b2:	4659      	mov	r1, fp
 800f1b4:	461e      	mov	r6, r3
 800f1b6:	2c01      	cmp	r4, #1
 800f1b8:	dc21      	bgt.n	800f1fe <_strtod_l+0x51e>
 800f1ba:	b10b      	cbz	r3, 800f1c0 <_strtod_l+0x4e0>
 800f1bc:	4682      	mov	sl, r0
 800f1be:	468b      	mov	fp, r1
 800f1c0:	492c      	ldr	r1, [pc, #176]	@ (800f274 <_strtod_l+0x594>)
 800f1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f1ca:	4652      	mov	r2, sl
 800f1cc:	465b      	mov	r3, fp
 800f1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1d2:	f7f1 fa19 	bl	8000608 <__aeabi_dmul>
 800f1d6:	4b28      	ldr	r3, [pc, #160]	@ (800f278 <_strtod_l+0x598>)
 800f1d8:	460a      	mov	r2, r1
 800f1da:	400b      	ands	r3, r1
 800f1dc:	4927      	ldr	r1, [pc, #156]	@ (800f27c <_strtod_l+0x59c>)
 800f1de:	428b      	cmp	r3, r1
 800f1e0:	4682      	mov	sl, r0
 800f1e2:	d898      	bhi.n	800f116 <_strtod_l+0x436>
 800f1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f1e8:	428b      	cmp	r3, r1
 800f1ea:	bf86      	itte	hi
 800f1ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f280 <_strtod_l+0x5a0>
 800f1f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800f1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9308      	str	r3, [sp, #32]
 800f1fc:	e07a      	b.n	800f2f4 <_strtod_l+0x614>
 800f1fe:	07e2      	lsls	r2, r4, #31
 800f200:	d505      	bpl.n	800f20e <_strtod_l+0x52e>
 800f202:	9b08      	ldr	r3, [sp, #32]
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9fe 	bl	8000608 <__aeabi_dmul>
 800f20c:	2301      	movs	r3, #1
 800f20e:	9a08      	ldr	r2, [sp, #32]
 800f210:	3208      	adds	r2, #8
 800f212:	3601      	adds	r6, #1
 800f214:	1064      	asrs	r4, r4, #1
 800f216:	9208      	str	r2, [sp, #32]
 800f218:	e7cd      	b.n	800f1b6 <_strtod_l+0x4d6>
 800f21a:	d0ed      	beq.n	800f1f8 <_strtod_l+0x518>
 800f21c:	4264      	negs	r4, r4
 800f21e:	f014 020f 	ands.w	r2, r4, #15
 800f222:	d00a      	beq.n	800f23a <_strtod_l+0x55a>
 800f224:	4b12      	ldr	r3, [pc, #72]	@ (800f270 <_strtod_l+0x590>)
 800f226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f22a:	4650      	mov	r0, sl
 800f22c:	4659      	mov	r1, fp
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f1 fb13 	bl	800085c <__aeabi_ddiv>
 800f236:	4682      	mov	sl, r0
 800f238:	468b      	mov	fp, r1
 800f23a:	1124      	asrs	r4, r4, #4
 800f23c:	d0dc      	beq.n	800f1f8 <_strtod_l+0x518>
 800f23e:	2c1f      	cmp	r4, #31
 800f240:	dd20      	ble.n	800f284 <_strtod_l+0x5a4>
 800f242:	2400      	movs	r4, #0
 800f244:	46a0      	mov	r8, r4
 800f246:	940a      	str	r4, [sp, #40]	@ 0x28
 800f248:	46a1      	mov	r9, r4
 800f24a:	9a05      	ldr	r2, [sp, #20]
 800f24c:	2322      	movs	r3, #34	@ 0x22
 800f24e:	f04f 0a00 	mov.w	sl, #0
 800f252:	f04f 0b00 	mov.w	fp, #0
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	e768      	b.n	800f12c <_strtod_l+0x44c>
 800f25a:	bf00      	nop
 800f25c:	08011a95 	.word	0x08011a95
 800f260:	08011cac 	.word	0x08011cac
 800f264:	08011a8d 	.word	0x08011a8d
 800f268:	08011ac4 	.word	0x08011ac4
 800f26c:	08011e55 	.word	0x08011e55
 800f270:	08011be0 	.word	0x08011be0
 800f274:	08011bb8 	.word	0x08011bb8
 800f278:	7ff00000 	.word	0x7ff00000
 800f27c:	7ca00000 	.word	0x7ca00000
 800f280:	7fefffff 	.word	0x7fefffff
 800f284:	f014 0310 	ands.w	r3, r4, #16
 800f288:	bf18      	it	ne
 800f28a:	236a      	movne	r3, #106	@ 0x6a
 800f28c:	4ea9      	ldr	r6, [pc, #676]	@ (800f534 <_strtod_l+0x854>)
 800f28e:	9308      	str	r3, [sp, #32]
 800f290:	4650      	mov	r0, sl
 800f292:	4659      	mov	r1, fp
 800f294:	2300      	movs	r3, #0
 800f296:	07e2      	lsls	r2, r4, #31
 800f298:	d504      	bpl.n	800f2a4 <_strtod_l+0x5c4>
 800f29a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f29e:	f7f1 f9b3 	bl	8000608 <__aeabi_dmul>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	1064      	asrs	r4, r4, #1
 800f2a6:	f106 0608 	add.w	r6, r6, #8
 800f2aa:	d1f4      	bne.n	800f296 <_strtod_l+0x5b6>
 800f2ac:	b10b      	cbz	r3, 800f2b2 <_strtod_l+0x5d2>
 800f2ae:	4682      	mov	sl, r0
 800f2b0:	468b      	mov	fp, r1
 800f2b2:	9b08      	ldr	r3, [sp, #32]
 800f2b4:	b1b3      	cbz	r3, 800f2e4 <_strtod_l+0x604>
 800f2b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f2ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	4659      	mov	r1, fp
 800f2c2:	dd0f      	ble.n	800f2e4 <_strtod_l+0x604>
 800f2c4:	2b1f      	cmp	r3, #31
 800f2c6:	dd55      	ble.n	800f374 <_strtod_l+0x694>
 800f2c8:	2b34      	cmp	r3, #52	@ 0x34
 800f2ca:	bfde      	ittt	le
 800f2cc:	f04f 33ff 	movle.w	r3, #4294967295
 800f2d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f2d4:	4093      	lslle	r3, r2
 800f2d6:	f04f 0a00 	mov.w	sl, #0
 800f2da:	bfcc      	ite	gt
 800f2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f2e0:	ea03 0b01 	andle.w	fp, r3, r1
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	4650      	mov	r0, sl
 800f2ea:	4659      	mov	r1, fp
 800f2ec:	f7f1 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d1a6      	bne.n	800f242 <_strtod_l+0x562>
 800f2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f2fa:	9805      	ldr	r0, [sp, #20]
 800f2fc:	462b      	mov	r3, r5
 800f2fe:	463a      	mov	r2, r7
 800f300:	f7ff f8c6 	bl	800e490 <__s2b>
 800f304:	900a      	str	r0, [sp, #40]	@ 0x28
 800f306:	2800      	cmp	r0, #0
 800f308:	f43f af05 	beq.w	800f116 <_strtod_l+0x436>
 800f30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f30e:	2a00      	cmp	r2, #0
 800f310:	eba9 0308 	sub.w	r3, r9, r8
 800f314:	bfa8      	it	ge
 800f316:	2300      	movge	r3, #0
 800f318:	9312      	str	r3, [sp, #72]	@ 0x48
 800f31a:	2400      	movs	r4, #0
 800f31c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f320:	9316      	str	r3, [sp, #88]	@ 0x58
 800f322:	46a0      	mov	r8, r4
 800f324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f326:	9805      	ldr	r0, [sp, #20]
 800f328:	6859      	ldr	r1, [r3, #4]
 800f32a:	f7ff f809 	bl	800e340 <_Balloc>
 800f32e:	4681      	mov	r9, r0
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f aef4 	beq.w	800f11e <_strtod_l+0x43e>
 800f336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f338:	691a      	ldr	r2, [r3, #16]
 800f33a:	3202      	adds	r2, #2
 800f33c:	f103 010c 	add.w	r1, r3, #12
 800f340:	0092      	lsls	r2, r2, #2
 800f342:	300c      	adds	r0, #12
 800f344:	f000 fd72 	bl	800fe2c <memcpy>
 800f348:	ec4b ab10 	vmov	d0, sl, fp
 800f34c:	9805      	ldr	r0, [sp, #20]
 800f34e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f350:	a91b      	add	r1, sp, #108	@ 0x6c
 800f352:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f356:	f7ff fbd7 	bl	800eb08 <__d2b>
 800f35a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f35c:	2800      	cmp	r0, #0
 800f35e:	f43f aede 	beq.w	800f11e <_strtod_l+0x43e>
 800f362:	9805      	ldr	r0, [sp, #20]
 800f364:	2101      	movs	r1, #1
 800f366:	f7ff f929 	bl	800e5bc <__i2b>
 800f36a:	4680      	mov	r8, r0
 800f36c:	b948      	cbnz	r0, 800f382 <_strtod_l+0x6a2>
 800f36e:	f04f 0800 	mov.w	r8, #0
 800f372:	e6d4      	b.n	800f11e <_strtod_l+0x43e>
 800f374:	f04f 32ff 	mov.w	r2, #4294967295
 800f378:	fa02 f303 	lsl.w	r3, r2, r3
 800f37c:	ea03 0a0a 	and.w	sl, r3, sl
 800f380:	e7b0      	b.n	800f2e4 <_strtod_l+0x604>
 800f382:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f384:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f386:	2d00      	cmp	r5, #0
 800f388:	bfab      	itete	ge
 800f38a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f38c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f38e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f390:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f392:	bfac      	ite	ge
 800f394:	18ef      	addge	r7, r5, r3
 800f396:	1b5e      	sublt	r6, r3, r5
 800f398:	9b08      	ldr	r3, [sp, #32]
 800f39a:	1aed      	subs	r5, r5, r3
 800f39c:	4415      	add	r5, r2
 800f39e:	4b66      	ldr	r3, [pc, #408]	@ (800f538 <_strtod_l+0x858>)
 800f3a0:	3d01      	subs	r5, #1
 800f3a2:	429d      	cmp	r5, r3
 800f3a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f3a8:	da50      	bge.n	800f44c <_strtod_l+0x76c>
 800f3aa:	1b5b      	subs	r3, r3, r5
 800f3ac:	2b1f      	cmp	r3, #31
 800f3ae:	eba2 0203 	sub.w	r2, r2, r3
 800f3b2:	f04f 0101 	mov.w	r1, #1
 800f3b6:	dc3d      	bgt.n	800f434 <_strtod_l+0x754>
 800f3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3c2:	18bd      	adds	r5, r7, r2
 800f3c4:	9b08      	ldr	r3, [sp, #32]
 800f3c6:	42af      	cmp	r7, r5
 800f3c8:	4416      	add	r6, r2
 800f3ca:	441e      	add	r6, r3
 800f3cc:	463b      	mov	r3, r7
 800f3ce:	bfa8      	it	ge
 800f3d0:	462b      	movge	r3, r5
 800f3d2:	42b3      	cmp	r3, r6
 800f3d4:	bfa8      	it	ge
 800f3d6:	4633      	movge	r3, r6
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bfc2      	ittt	gt
 800f3dc:	1aed      	subgt	r5, r5, r3
 800f3de:	1af6      	subgt	r6, r6, r3
 800f3e0:	1aff      	subgt	r7, r7, r3
 800f3e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dd16      	ble.n	800f416 <_strtod_l+0x736>
 800f3e8:	4641      	mov	r1, r8
 800f3ea:	9805      	ldr	r0, [sp, #20]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	f7ff f9a5 	bl	800e73c <__pow5mult>
 800f3f2:	4680      	mov	r8, r0
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d0ba      	beq.n	800f36e <_strtod_l+0x68e>
 800f3f8:	4601      	mov	r1, r0
 800f3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f3fc:	9805      	ldr	r0, [sp, #20]
 800f3fe:	f7ff f8f3 	bl	800e5e8 <__multiply>
 800f402:	900e      	str	r0, [sp, #56]	@ 0x38
 800f404:	2800      	cmp	r0, #0
 800f406:	f43f ae8a 	beq.w	800f11e <_strtod_l+0x43e>
 800f40a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f40c:	9805      	ldr	r0, [sp, #20]
 800f40e:	f7fe ffd7 	bl	800e3c0 <_Bfree>
 800f412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f414:	931a      	str	r3, [sp, #104]	@ 0x68
 800f416:	2d00      	cmp	r5, #0
 800f418:	dc1d      	bgt.n	800f456 <_strtod_l+0x776>
 800f41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd23      	ble.n	800f468 <_strtod_l+0x788>
 800f420:	4649      	mov	r1, r9
 800f422:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f424:	9805      	ldr	r0, [sp, #20]
 800f426:	f7ff f989 	bl	800e73c <__pow5mult>
 800f42a:	4681      	mov	r9, r0
 800f42c:	b9e0      	cbnz	r0, 800f468 <_strtod_l+0x788>
 800f42e:	f04f 0900 	mov.w	r9, #0
 800f432:	e674      	b.n	800f11e <_strtod_l+0x43e>
 800f434:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f438:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f43c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f440:	35e2      	adds	r5, #226	@ 0xe2
 800f442:	fa01 f305 	lsl.w	r3, r1, r5
 800f446:	9310      	str	r3, [sp, #64]	@ 0x40
 800f448:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f44a:	e7ba      	b.n	800f3c2 <_strtod_l+0x6e2>
 800f44c:	2300      	movs	r3, #0
 800f44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f450:	2301      	movs	r3, #1
 800f452:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f454:	e7b5      	b.n	800f3c2 <_strtod_l+0x6e2>
 800f456:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f458:	9805      	ldr	r0, [sp, #20]
 800f45a:	462a      	mov	r2, r5
 800f45c:	f7ff f9c8 	bl	800e7f0 <__lshift>
 800f460:	901a      	str	r0, [sp, #104]	@ 0x68
 800f462:	2800      	cmp	r0, #0
 800f464:	d1d9      	bne.n	800f41a <_strtod_l+0x73a>
 800f466:	e65a      	b.n	800f11e <_strtod_l+0x43e>
 800f468:	2e00      	cmp	r6, #0
 800f46a:	dd07      	ble.n	800f47c <_strtod_l+0x79c>
 800f46c:	4649      	mov	r1, r9
 800f46e:	9805      	ldr	r0, [sp, #20]
 800f470:	4632      	mov	r2, r6
 800f472:	f7ff f9bd 	bl	800e7f0 <__lshift>
 800f476:	4681      	mov	r9, r0
 800f478:	2800      	cmp	r0, #0
 800f47a:	d0d8      	beq.n	800f42e <_strtod_l+0x74e>
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	dd08      	ble.n	800f492 <_strtod_l+0x7b2>
 800f480:	4641      	mov	r1, r8
 800f482:	9805      	ldr	r0, [sp, #20]
 800f484:	463a      	mov	r2, r7
 800f486:	f7ff f9b3 	bl	800e7f0 <__lshift>
 800f48a:	4680      	mov	r8, r0
 800f48c:	2800      	cmp	r0, #0
 800f48e:	f43f ae46 	beq.w	800f11e <_strtod_l+0x43e>
 800f492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f494:	9805      	ldr	r0, [sp, #20]
 800f496:	464a      	mov	r2, r9
 800f498:	f7ff fa32 	bl	800e900 <__mdiff>
 800f49c:	4604      	mov	r4, r0
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	f43f ae3d 	beq.w	800f11e <_strtod_l+0x43e>
 800f4a4:	68c3      	ldr	r3, [r0, #12]
 800f4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60c3      	str	r3, [r0, #12]
 800f4ac:	4641      	mov	r1, r8
 800f4ae:	f7ff fa0b 	bl	800e8c8 <__mcmp>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	da46      	bge.n	800f544 <_strtod_l+0x864>
 800f4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800f4bc:	d16c      	bne.n	800f598 <_strtod_l+0x8b8>
 800f4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d168      	bne.n	800f598 <_strtod_l+0x8b8>
 800f4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4ca:	0d1b      	lsrs	r3, r3, #20
 800f4cc:	051b      	lsls	r3, r3, #20
 800f4ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f4d2:	d961      	bls.n	800f598 <_strtod_l+0x8b8>
 800f4d4:	6963      	ldr	r3, [r4, #20]
 800f4d6:	b913      	cbnz	r3, 800f4de <_strtod_l+0x7fe>
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	dd5c      	ble.n	800f598 <_strtod_l+0x8b8>
 800f4de:	4621      	mov	r1, r4
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	9805      	ldr	r0, [sp, #20]
 800f4e4:	f7ff f984 	bl	800e7f0 <__lshift>
 800f4e8:	4641      	mov	r1, r8
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	f7ff f9ec 	bl	800e8c8 <__mcmp>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	dd51      	ble.n	800f598 <_strtod_l+0x8b8>
 800f4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4f8:	9a08      	ldr	r2, [sp, #32]
 800f4fa:	0d1b      	lsrs	r3, r3, #20
 800f4fc:	051b      	lsls	r3, r3, #20
 800f4fe:	2a00      	cmp	r2, #0
 800f500:	d06b      	beq.n	800f5da <_strtod_l+0x8fa>
 800f502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f506:	d868      	bhi.n	800f5da <_strtod_l+0x8fa>
 800f508:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f50c:	f67f ae9d 	bls.w	800f24a <_strtod_l+0x56a>
 800f510:	4b0a      	ldr	r3, [pc, #40]	@ (800f53c <_strtod_l+0x85c>)
 800f512:	4650      	mov	r0, sl
 800f514:	4659      	mov	r1, fp
 800f516:	2200      	movs	r2, #0
 800f518:	f7f1 f876 	bl	8000608 <__aeabi_dmul>
 800f51c:	4b08      	ldr	r3, [pc, #32]	@ (800f540 <_strtod_l+0x860>)
 800f51e:	400b      	ands	r3, r1
 800f520:	4682      	mov	sl, r0
 800f522:	468b      	mov	fp, r1
 800f524:	2b00      	cmp	r3, #0
 800f526:	f47f ae05 	bne.w	800f134 <_strtod_l+0x454>
 800f52a:	9a05      	ldr	r2, [sp, #20]
 800f52c:	2322      	movs	r3, #34	@ 0x22
 800f52e:	6013      	str	r3, [r2, #0]
 800f530:	e600      	b.n	800f134 <_strtod_l+0x454>
 800f532:	bf00      	nop
 800f534:	08011cd8 	.word	0x08011cd8
 800f538:	fffffc02 	.word	0xfffffc02
 800f53c:	39500000 	.word	0x39500000
 800f540:	7ff00000 	.word	0x7ff00000
 800f544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f548:	d165      	bne.n	800f616 <_strtod_l+0x936>
 800f54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f550:	b35a      	cbz	r2, 800f5aa <_strtod_l+0x8ca>
 800f552:	4a9f      	ldr	r2, [pc, #636]	@ (800f7d0 <_strtod_l+0xaf0>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d12b      	bne.n	800f5b0 <_strtod_l+0x8d0>
 800f558:	9b08      	ldr	r3, [sp, #32]
 800f55a:	4651      	mov	r1, sl
 800f55c:	b303      	cbz	r3, 800f5a0 <_strtod_l+0x8c0>
 800f55e:	4b9d      	ldr	r3, [pc, #628]	@ (800f7d4 <_strtod_l+0xaf4>)
 800f560:	465a      	mov	r2, fp
 800f562:	4013      	ands	r3, r2
 800f564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f568:	f04f 32ff 	mov.w	r2, #4294967295
 800f56c:	d81b      	bhi.n	800f5a6 <_strtod_l+0x8c6>
 800f56e:	0d1b      	lsrs	r3, r3, #20
 800f570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f574:	fa02 f303 	lsl.w	r3, r2, r3
 800f578:	4299      	cmp	r1, r3
 800f57a:	d119      	bne.n	800f5b0 <_strtod_l+0x8d0>
 800f57c:	4b96      	ldr	r3, [pc, #600]	@ (800f7d8 <_strtod_l+0xaf8>)
 800f57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f580:	429a      	cmp	r2, r3
 800f582:	d102      	bne.n	800f58a <_strtod_l+0x8aa>
 800f584:	3101      	adds	r1, #1
 800f586:	f43f adca 	beq.w	800f11e <_strtod_l+0x43e>
 800f58a:	4b92      	ldr	r3, [pc, #584]	@ (800f7d4 <_strtod_l+0xaf4>)
 800f58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f58e:	401a      	ands	r2, r3
 800f590:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f594:	f04f 0a00 	mov.w	sl, #0
 800f598:	9b08      	ldr	r3, [sp, #32]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1b8      	bne.n	800f510 <_strtod_l+0x830>
 800f59e:	e5c9      	b.n	800f134 <_strtod_l+0x454>
 800f5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a4:	e7e8      	b.n	800f578 <_strtod_l+0x898>
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	e7e6      	b.n	800f578 <_strtod_l+0x898>
 800f5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800f5ae:	d0a1      	beq.n	800f4f4 <_strtod_l+0x814>
 800f5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5b2:	b1db      	cbz	r3, 800f5ec <_strtod_l+0x90c>
 800f5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5b6:	4213      	tst	r3, r2
 800f5b8:	d0ee      	beq.n	800f598 <_strtod_l+0x8b8>
 800f5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5bc:	9a08      	ldr	r2, [sp, #32]
 800f5be:	4650      	mov	r0, sl
 800f5c0:	4659      	mov	r1, fp
 800f5c2:	b1bb      	cbz	r3, 800f5f4 <_strtod_l+0x914>
 800f5c4:	f7ff fb6e 	bl	800eca4 <sulp>
 800f5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5cc:	ec53 2b10 	vmov	r2, r3, d0
 800f5d0:	f7f0 fe64 	bl	800029c <__adddf3>
 800f5d4:	4682      	mov	sl, r0
 800f5d6:	468b      	mov	fp, r1
 800f5d8:	e7de      	b.n	800f598 <_strtod_l+0x8b8>
 800f5da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f5de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f5e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f5e6:	f04f 3aff 	mov.w	sl, #4294967295
 800f5ea:	e7d5      	b.n	800f598 <_strtod_l+0x8b8>
 800f5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5ee:	ea13 0f0a 	tst.w	r3, sl
 800f5f2:	e7e1      	b.n	800f5b8 <_strtod_l+0x8d8>
 800f5f4:	f7ff fb56 	bl	800eca4 <sulp>
 800f5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5fc:	ec53 2b10 	vmov	r2, r3, d0
 800f600:	f7f0 fe4a 	bl	8000298 <__aeabi_dsub>
 800f604:	2200      	movs	r2, #0
 800f606:	2300      	movs	r3, #0
 800f608:	4682      	mov	sl, r0
 800f60a:	468b      	mov	fp, r1
 800f60c:	f7f1 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 800f610:	2800      	cmp	r0, #0
 800f612:	d0c1      	beq.n	800f598 <_strtod_l+0x8b8>
 800f614:	e619      	b.n	800f24a <_strtod_l+0x56a>
 800f616:	4641      	mov	r1, r8
 800f618:	4620      	mov	r0, r4
 800f61a:	f7ff facd 	bl	800ebb8 <__ratio>
 800f61e:	ec57 6b10 	vmov	r6, r7, d0
 800f622:	2200      	movs	r2, #0
 800f624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	f7f1 fa68 	bl	8000b00 <__aeabi_dcmple>
 800f630:	2800      	cmp	r0, #0
 800f632:	d06f      	beq.n	800f714 <_strtod_l+0xa34>
 800f634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f636:	2b00      	cmp	r3, #0
 800f638:	d17a      	bne.n	800f730 <_strtod_l+0xa50>
 800f63a:	f1ba 0f00 	cmp.w	sl, #0
 800f63e:	d158      	bne.n	800f6f2 <_strtod_l+0xa12>
 800f640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f646:	2b00      	cmp	r3, #0
 800f648:	d15a      	bne.n	800f700 <_strtod_l+0xa20>
 800f64a:	4b64      	ldr	r3, [pc, #400]	@ (800f7dc <_strtod_l+0xafc>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7f1 fa4b 	bl	8000aec <__aeabi_dcmplt>
 800f656:	2800      	cmp	r0, #0
 800f658:	d159      	bne.n	800f70e <_strtod_l+0xa2e>
 800f65a:	4630      	mov	r0, r6
 800f65c:	4639      	mov	r1, r7
 800f65e:	4b60      	ldr	r3, [pc, #384]	@ (800f7e0 <_strtod_l+0xb00>)
 800f660:	2200      	movs	r2, #0
 800f662:	f7f0 ffd1 	bl	8000608 <__aeabi_dmul>
 800f666:	4606      	mov	r6, r0
 800f668:	460f      	mov	r7, r1
 800f66a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f66e:	9606      	str	r6, [sp, #24]
 800f670:	9307      	str	r3, [sp, #28]
 800f672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f676:	4d57      	ldr	r5, [pc, #348]	@ (800f7d4 <_strtod_l+0xaf4>)
 800f678:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f67e:	401d      	ands	r5, r3
 800f680:	4b58      	ldr	r3, [pc, #352]	@ (800f7e4 <_strtod_l+0xb04>)
 800f682:	429d      	cmp	r5, r3
 800f684:	f040 80b2 	bne.w	800f7ec <_strtod_l+0xb0c>
 800f688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f68a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f68e:	ec4b ab10 	vmov	d0, sl, fp
 800f692:	f7ff f9c9 	bl	800ea28 <__ulp>
 800f696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f69a:	ec51 0b10 	vmov	r0, r1, d0
 800f69e:	f7f0 ffb3 	bl	8000608 <__aeabi_dmul>
 800f6a2:	4652      	mov	r2, sl
 800f6a4:	465b      	mov	r3, fp
 800f6a6:	f7f0 fdf9 	bl	800029c <__adddf3>
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	4949      	ldr	r1, [pc, #292]	@ (800f7d4 <_strtod_l+0xaf4>)
 800f6ae:	4a4e      	ldr	r2, [pc, #312]	@ (800f7e8 <_strtod_l+0xb08>)
 800f6b0:	4019      	ands	r1, r3
 800f6b2:	4291      	cmp	r1, r2
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	d942      	bls.n	800f73e <_strtod_l+0xa5e>
 800f6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f6ba:	4b47      	ldr	r3, [pc, #284]	@ (800f7d8 <_strtod_l+0xaf8>)
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d103      	bne.n	800f6c8 <_strtod_l+0x9e8>
 800f6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	f43f ad2b 	beq.w	800f11e <_strtod_l+0x43e>
 800f6c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f7d8 <_strtod_l+0xaf8>
 800f6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800f6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6d2:	9805      	ldr	r0, [sp, #20]
 800f6d4:	f7fe fe74 	bl	800e3c0 <_Bfree>
 800f6d8:	9805      	ldr	r0, [sp, #20]
 800f6da:	4649      	mov	r1, r9
 800f6dc:	f7fe fe70 	bl	800e3c0 <_Bfree>
 800f6e0:	9805      	ldr	r0, [sp, #20]
 800f6e2:	4641      	mov	r1, r8
 800f6e4:	f7fe fe6c 	bl	800e3c0 <_Bfree>
 800f6e8:	9805      	ldr	r0, [sp, #20]
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	f7fe fe68 	bl	800e3c0 <_Bfree>
 800f6f0:	e618      	b.n	800f324 <_strtod_l+0x644>
 800f6f2:	f1ba 0f01 	cmp.w	sl, #1
 800f6f6:	d103      	bne.n	800f700 <_strtod_l+0xa20>
 800f6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f43f ada5 	beq.w	800f24a <_strtod_l+0x56a>
 800f700:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f7b0 <_strtod_l+0xad0>
 800f704:	4f35      	ldr	r7, [pc, #212]	@ (800f7dc <_strtod_l+0xafc>)
 800f706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f70a:	2600      	movs	r6, #0
 800f70c:	e7b1      	b.n	800f672 <_strtod_l+0x992>
 800f70e:	4f34      	ldr	r7, [pc, #208]	@ (800f7e0 <_strtod_l+0xb00>)
 800f710:	2600      	movs	r6, #0
 800f712:	e7aa      	b.n	800f66a <_strtod_l+0x98a>
 800f714:	4b32      	ldr	r3, [pc, #200]	@ (800f7e0 <_strtod_l+0xb00>)
 800f716:	4630      	mov	r0, r6
 800f718:	4639      	mov	r1, r7
 800f71a:	2200      	movs	r2, #0
 800f71c:	f7f0 ff74 	bl	8000608 <__aeabi_dmul>
 800f720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f722:	4606      	mov	r6, r0
 800f724:	460f      	mov	r7, r1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d09f      	beq.n	800f66a <_strtod_l+0x98a>
 800f72a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f72e:	e7a0      	b.n	800f672 <_strtod_l+0x992>
 800f730:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f7b8 <_strtod_l+0xad8>
 800f734:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f738:	ec57 6b17 	vmov	r6, r7, d7
 800f73c:	e799      	b.n	800f672 <_strtod_l+0x992>
 800f73e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f742:	9b08      	ldr	r3, [sp, #32]
 800f744:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1c1      	bne.n	800f6d0 <_strtod_l+0x9f0>
 800f74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f750:	0d1b      	lsrs	r3, r3, #20
 800f752:	051b      	lsls	r3, r3, #20
 800f754:	429d      	cmp	r5, r3
 800f756:	d1bb      	bne.n	800f6d0 <_strtod_l+0x9f0>
 800f758:	4630      	mov	r0, r6
 800f75a:	4639      	mov	r1, r7
 800f75c:	f7f1 fab4 	bl	8000cc8 <__aeabi_d2lz>
 800f760:	f7f0 ff24 	bl	80005ac <__aeabi_l2d>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	4630      	mov	r0, r6
 800f76a:	4639      	mov	r1, r7
 800f76c:	f7f0 fd94 	bl	8000298 <__aeabi_dsub>
 800f770:	460b      	mov	r3, r1
 800f772:	4602      	mov	r2, r0
 800f774:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f778:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f77e:	ea46 060a 	orr.w	r6, r6, sl
 800f782:	431e      	orrs	r6, r3
 800f784:	d06f      	beq.n	800f866 <_strtod_l+0xb86>
 800f786:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7c0 <_strtod_l+0xae0>)
 800f788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78c:	f7f1 f9ae 	bl	8000aec <__aeabi_dcmplt>
 800f790:	2800      	cmp	r0, #0
 800f792:	f47f accf 	bne.w	800f134 <_strtod_l+0x454>
 800f796:	a30c      	add	r3, pc, #48	@ (adr r3, 800f7c8 <_strtod_l+0xae8>)
 800f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7a0:	f7f1 f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d093      	beq.n	800f6d0 <_strtod_l+0x9f0>
 800f7a8:	e4c4      	b.n	800f134 <_strtod_l+0x454>
 800f7aa:	bf00      	nop
 800f7ac:	f3af 8000 	nop.w
 800f7b0:	00000000 	.word	0x00000000
 800f7b4:	bff00000 	.word	0xbff00000
 800f7b8:	00000000 	.word	0x00000000
 800f7bc:	3ff00000 	.word	0x3ff00000
 800f7c0:	94a03595 	.word	0x94a03595
 800f7c4:	3fdfffff 	.word	0x3fdfffff
 800f7c8:	35afe535 	.word	0x35afe535
 800f7cc:	3fe00000 	.word	0x3fe00000
 800f7d0:	000fffff 	.word	0x000fffff
 800f7d4:	7ff00000 	.word	0x7ff00000
 800f7d8:	7fefffff 	.word	0x7fefffff
 800f7dc:	3ff00000 	.word	0x3ff00000
 800f7e0:	3fe00000 	.word	0x3fe00000
 800f7e4:	7fe00000 	.word	0x7fe00000
 800f7e8:	7c9fffff 	.word	0x7c9fffff
 800f7ec:	9b08      	ldr	r3, [sp, #32]
 800f7ee:	b323      	cbz	r3, 800f83a <_strtod_l+0xb5a>
 800f7f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f7f4:	d821      	bhi.n	800f83a <_strtod_l+0xb5a>
 800f7f6:	a328      	add	r3, pc, #160	@ (adr r3, 800f898 <_strtod_l+0xbb8>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	4639      	mov	r1, r7
 800f800:	f7f1 f97e 	bl	8000b00 <__aeabi_dcmple>
 800f804:	b1a0      	cbz	r0, 800f830 <_strtod_l+0xb50>
 800f806:	4639      	mov	r1, r7
 800f808:	4630      	mov	r0, r6
 800f80a:	f7f1 f9d5 	bl	8000bb8 <__aeabi_d2uiz>
 800f80e:	2801      	cmp	r0, #1
 800f810:	bf38      	it	cc
 800f812:	2001      	movcc	r0, #1
 800f814:	f7f0 fe7e 	bl	8000514 <__aeabi_ui2d>
 800f818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f81a:	4606      	mov	r6, r0
 800f81c:	460f      	mov	r7, r1
 800f81e:	b9fb      	cbnz	r3, 800f860 <_strtod_l+0xb80>
 800f820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f824:	9014      	str	r0, [sp, #80]	@ 0x50
 800f826:	9315      	str	r3, [sp, #84]	@ 0x54
 800f828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f82c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f836:	1b5b      	subs	r3, r3, r5
 800f838:	9311      	str	r3, [sp, #68]	@ 0x44
 800f83a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f83e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f842:	f7ff f8f1 	bl	800ea28 <__ulp>
 800f846:	4650      	mov	r0, sl
 800f848:	ec53 2b10 	vmov	r2, r3, d0
 800f84c:	4659      	mov	r1, fp
 800f84e:	f7f0 fedb 	bl	8000608 <__aeabi_dmul>
 800f852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f856:	f7f0 fd21 	bl	800029c <__adddf3>
 800f85a:	4682      	mov	sl, r0
 800f85c:	468b      	mov	fp, r1
 800f85e:	e770      	b.n	800f742 <_strtod_l+0xa62>
 800f860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f864:	e7e0      	b.n	800f828 <_strtod_l+0xb48>
 800f866:	a30e      	add	r3, pc, #56	@ (adr r3, 800f8a0 <_strtod_l+0xbc0>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	f7f1 f93e 	bl	8000aec <__aeabi_dcmplt>
 800f870:	e798      	b.n	800f7a4 <_strtod_l+0xac4>
 800f872:	2300      	movs	r3, #0
 800f874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f876:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f87a:	6013      	str	r3, [r2, #0]
 800f87c:	f7ff ba6d 	b.w	800ed5a <_strtod_l+0x7a>
 800f880:	2a65      	cmp	r2, #101	@ 0x65
 800f882:	f43f ab66 	beq.w	800ef52 <_strtod_l+0x272>
 800f886:	2a45      	cmp	r2, #69	@ 0x45
 800f888:	f43f ab63 	beq.w	800ef52 <_strtod_l+0x272>
 800f88c:	2301      	movs	r3, #1
 800f88e:	f7ff bb9e 	b.w	800efce <_strtod_l+0x2ee>
 800f892:	bf00      	nop
 800f894:	f3af 8000 	nop.w
 800f898:	ffc00000 	.word	0xffc00000
 800f89c:	41dfffff 	.word	0x41dfffff
 800f8a0:	94a03595 	.word	0x94a03595
 800f8a4:	3fcfffff 	.word	0x3fcfffff

0800f8a8 <_strtod_r>:
 800f8a8:	4b01      	ldr	r3, [pc, #4]	@ (800f8b0 <_strtod_r+0x8>)
 800f8aa:	f7ff ba19 	b.w	800ece0 <_strtod_l>
 800f8ae:	bf00      	nop
 800f8b0:	2000015c 	.word	0x2000015c

0800f8b4 <_strtol_l.constprop.0>:
 800f8b4:	2b24      	cmp	r3, #36	@ 0x24
 800f8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ba:	4686      	mov	lr, r0
 800f8bc:	4690      	mov	r8, r2
 800f8be:	d801      	bhi.n	800f8c4 <_strtol_l.constprop.0+0x10>
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d106      	bne.n	800f8d2 <_strtol_l.constprop.0+0x1e>
 800f8c4:	f7fd fdbc 	bl	800d440 <__errno>
 800f8c8:	2316      	movs	r3, #22
 800f8ca:	6003      	str	r3, [r0, #0]
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d2:	4834      	ldr	r0, [pc, #208]	@ (800f9a4 <_strtol_l.constprop.0+0xf0>)
 800f8d4:	460d      	mov	r5, r1
 800f8d6:	462a      	mov	r2, r5
 800f8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8dc:	5d06      	ldrb	r6, [r0, r4]
 800f8de:	f016 0608 	ands.w	r6, r6, #8
 800f8e2:	d1f8      	bne.n	800f8d6 <_strtol_l.constprop.0+0x22>
 800f8e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f8e6:	d12d      	bne.n	800f944 <_strtol_l.constprop.0+0x90>
 800f8e8:	782c      	ldrb	r4, [r5, #0]
 800f8ea:	2601      	movs	r6, #1
 800f8ec:	1c95      	adds	r5, r2, #2
 800f8ee:	f033 0210 	bics.w	r2, r3, #16
 800f8f2:	d109      	bne.n	800f908 <_strtol_l.constprop.0+0x54>
 800f8f4:	2c30      	cmp	r4, #48	@ 0x30
 800f8f6:	d12a      	bne.n	800f94e <_strtol_l.constprop.0+0x9a>
 800f8f8:	782a      	ldrb	r2, [r5, #0]
 800f8fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f8fe:	2a58      	cmp	r2, #88	@ 0x58
 800f900:	d125      	bne.n	800f94e <_strtol_l.constprop.0+0x9a>
 800f902:	786c      	ldrb	r4, [r5, #1]
 800f904:	2310      	movs	r3, #16
 800f906:	3502      	adds	r5, #2
 800f908:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f90c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f910:	2200      	movs	r2, #0
 800f912:	fbbc f9f3 	udiv	r9, ip, r3
 800f916:	4610      	mov	r0, r2
 800f918:	fb03 ca19 	mls	sl, r3, r9, ip
 800f91c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f920:	2f09      	cmp	r7, #9
 800f922:	d81b      	bhi.n	800f95c <_strtol_l.constprop.0+0xa8>
 800f924:	463c      	mov	r4, r7
 800f926:	42a3      	cmp	r3, r4
 800f928:	dd27      	ble.n	800f97a <_strtol_l.constprop.0+0xc6>
 800f92a:	1c57      	adds	r7, r2, #1
 800f92c:	d007      	beq.n	800f93e <_strtol_l.constprop.0+0x8a>
 800f92e:	4581      	cmp	r9, r0
 800f930:	d320      	bcc.n	800f974 <_strtol_l.constprop.0+0xc0>
 800f932:	d101      	bne.n	800f938 <_strtol_l.constprop.0+0x84>
 800f934:	45a2      	cmp	sl, r4
 800f936:	db1d      	blt.n	800f974 <_strtol_l.constprop.0+0xc0>
 800f938:	fb00 4003 	mla	r0, r0, r3, r4
 800f93c:	2201      	movs	r2, #1
 800f93e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f942:	e7eb      	b.n	800f91c <_strtol_l.constprop.0+0x68>
 800f944:	2c2b      	cmp	r4, #43	@ 0x2b
 800f946:	bf04      	itt	eq
 800f948:	782c      	ldrbeq	r4, [r5, #0]
 800f94a:	1c95      	addeq	r5, r2, #2
 800f94c:	e7cf      	b.n	800f8ee <_strtol_l.constprop.0+0x3a>
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1da      	bne.n	800f908 <_strtol_l.constprop.0+0x54>
 800f952:	2c30      	cmp	r4, #48	@ 0x30
 800f954:	bf0c      	ite	eq
 800f956:	2308      	moveq	r3, #8
 800f958:	230a      	movne	r3, #10
 800f95a:	e7d5      	b.n	800f908 <_strtol_l.constprop.0+0x54>
 800f95c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f960:	2f19      	cmp	r7, #25
 800f962:	d801      	bhi.n	800f968 <_strtol_l.constprop.0+0xb4>
 800f964:	3c37      	subs	r4, #55	@ 0x37
 800f966:	e7de      	b.n	800f926 <_strtol_l.constprop.0+0x72>
 800f968:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f96c:	2f19      	cmp	r7, #25
 800f96e:	d804      	bhi.n	800f97a <_strtol_l.constprop.0+0xc6>
 800f970:	3c57      	subs	r4, #87	@ 0x57
 800f972:	e7d8      	b.n	800f926 <_strtol_l.constprop.0+0x72>
 800f974:	f04f 32ff 	mov.w	r2, #4294967295
 800f978:	e7e1      	b.n	800f93e <_strtol_l.constprop.0+0x8a>
 800f97a:	1c53      	adds	r3, r2, #1
 800f97c:	d108      	bne.n	800f990 <_strtol_l.constprop.0+0xdc>
 800f97e:	2322      	movs	r3, #34	@ 0x22
 800f980:	f8ce 3000 	str.w	r3, [lr]
 800f984:	4660      	mov	r0, ip
 800f986:	f1b8 0f00 	cmp.w	r8, #0
 800f98a:	d0a0      	beq.n	800f8ce <_strtol_l.constprop.0+0x1a>
 800f98c:	1e69      	subs	r1, r5, #1
 800f98e:	e006      	b.n	800f99e <_strtol_l.constprop.0+0xea>
 800f990:	b106      	cbz	r6, 800f994 <_strtol_l.constprop.0+0xe0>
 800f992:	4240      	negs	r0, r0
 800f994:	f1b8 0f00 	cmp.w	r8, #0
 800f998:	d099      	beq.n	800f8ce <_strtol_l.constprop.0+0x1a>
 800f99a:	2a00      	cmp	r2, #0
 800f99c:	d1f6      	bne.n	800f98c <_strtol_l.constprop.0+0xd8>
 800f99e:	f8c8 1000 	str.w	r1, [r8]
 800f9a2:	e794      	b.n	800f8ce <_strtol_l.constprop.0+0x1a>
 800f9a4:	08011d01 	.word	0x08011d01

0800f9a8 <_strtol_r>:
 800f9a8:	f7ff bf84 	b.w	800f8b4 <_strtol_l.constprop.0>

0800f9ac <__ssputs_r>:
 800f9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b0:	688e      	ldr	r6, [r1, #8]
 800f9b2:	461f      	mov	r7, r3
 800f9b4:	42be      	cmp	r6, r7
 800f9b6:	680b      	ldr	r3, [r1, #0]
 800f9b8:	4682      	mov	sl, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	4690      	mov	r8, r2
 800f9be:	d82d      	bhi.n	800fa1c <__ssputs_r+0x70>
 800f9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f9c8:	d026      	beq.n	800fa18 <__ssputs_r+0x6c>
 800f9ca:	6965      	ldr	r5, [r4, #20]
 800f9cc:	6909      	ldr	r1, [r1, #16]
 800f9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9d2:	eba3 0901 	sub.w	r9, r3, r1
 800f9d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9da:	1c7b      	adds	r3, r7, #1
 800f9dc:	444b      	add	r3, r9
 800f9de:	106d      	asrs	r5, r5, #1
 800f9e0:	429d      	cmp	r5, r3
 800f9e2:	bf38      	it	cc
 800f9e4:	461d      	movcc	r5, r3
 800f9e6:	0553      	lsls	r3, r2, #21
 800f9e8:	d527      	bpl.n	800fa3a <__ssputs_r+0x8e>
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	f7fe fc1c 	bl	800e228 <_malloc_r>
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	b360      	cbz	r0, 800fa4e <__ssputs_r+0xa2>
 800f9f4:	6921      	ldr	r1, [r4, #16]
 800f9f6:	464a      	mov	r2, r9
 800f9f8:	f000 fa18 	bl	800fe2c <memcpy>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fa02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa06:	81a3      	strh	r3, [r4, #12]
 800fa08:	6126      	str	r6, [r4, #16]
 800fa0a:	6165      	str	r5, [r4, #20]
 800fa0c:	444e      	add	r6, r9
 800fa0e:	eba5 0509 	sub.w	r5, r5, r9
 800fa12:	6026      	str	r6, [r4, #0]
 800fa14:	60a5      	str	r5, [r4, #8]
 800fa16:	463e      	mov	r6, r7
 800fa18:	42be      	cmp	r6, r7
 800fa1a:	d900      	bls.n	800fa1e <__ssputs_r+0x72>
 800fa1c:	463e      	mov	r6, r7
 800fa1e:	6820      	ldr	r0, [r4, #0]
 800fa20:	4632      	mov	r2, r6
 800fa22:	4641      	mov	r1, r8
 800fa24:	f000 f9c6 	bl	800fdb4 <memmove>
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	1b9b      	subs	r3, r3, r6
 800fa2c:	60a3      	str	r3, [r4, #8]
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	4433      	add	r3, r6
 800fa32:	6023      	str	r3, [r4, #0]
 800fa34:	2000      	movs	r0, #0
 800fa36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa3a:	462a      	mov	r2, r5
 800fa3c:	f000 fd89 	bl	8010552 <_realloc_r>
 800fa40:	4606      	mov	r6, r0
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d1e0      	bne.n	800fa08 <__ssputs_r+0x5c>
 800fa46:	6921      	ldr	r1, [r4, #16]
 800fa48:	4650      	mov	r0, sl
 800fa4a:	f7fe fb79 	bl	800e140 <_free_r>
 800fa4e:	230c      	movs	r3, #12
 800fa50:	f8ca 3000 	str.w	r3, [sl]
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa5a:	81a3      	strh	r3, [r4, #12]
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	e7e9      	b.n	800fa36 <__ssputs_r+0x8a>
	...

0800fa64 <_svfiprintf_r>:
 800fa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa68:	4698      	mov	r8, r3
 800fa6a:	898b      	ldrh	r3, [r1, #12]
 800fa6c:	061b      	lsls	r3, r3, #24
 800fa6e:	b09d      	sub	sp, #116	@ 0x74
 800fa70:	4607      	mov	r7, r0
 800fa72:	460d      	mov	r5, r1
 800fa74:	4614      	mov	r4, r2
 800fa76:	d510      	bpl.n	800fa9a <_svfiprintf_r+0x36>
 800fa78:	690b      	ldr	r3, [r1, #16]
 800fa7a:	b973      	cbnz	r3, 800fa9a <_svfiprintf_r+0x36>
 800fa7c:	2140      	movs	r1, #64	@ 0x40
 800fa7e:	f7fe fbd3 	bl	800e228 <_malloc_r>
 800fa82:	6028      	str	r0, [r5, #0]
 800fa84:	6128      	str	r0, [r5, #16]
 800fa86:	b930      	cbnz	r0, 800fa96 <_svfiprintf_r+0x32>
 800fa88:	230c      	movs	r3, #12
 800fa8a:	603b      	str	r3, [r7, #0]
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	b01d      	add	sp, #116	@ 0x74
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	2340      	movs	r3, #64	@ 0x40
 800fa98:	616b      	str	r3, [r5, #20]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa9e:	2320      	movs	r3, #32
 800faa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800faa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800faa8:	2330      	movs	r3, #48	@ 0x30
 800faaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fc48 <_svfiprintf_r+0x1e4>
 800faae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fab2:	f04f 0901 	mov.w	r9, #1
 800fab6:	4623      	mov	r3, r4
 800fab8:	469a      	mov	sl, r3
 800faba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fabe:	b10a      	cbz	r2, 800fac4 <_svfiprintf_r+0x60>
 800fac0:	2a25      	cmp	r2, #37	@ 0x25
 800fac2:	d1f9      	bne.n	800fab8 <_svfiprintf_r+0x54>
 800fac4:	ebba 0b04 	subs.w	fp, sl, r4
 800fac8:	d00b      	beq.n	800fae2 <_svfiprintf_r+0x7e>
 800faca:	465b      	mov	r3, fp
 800facc:	4622      	mov	r2, r4
 800face:	4629      	mov	r1, r5
 800fad0:	4638      	mov	r0, r7
 800fad2:	f7ff ff6b 	bl	800f9ac <__ssputs_r>
 800fad6:	3001      	adds	r0, #1
 800fad8:	f000 80a7 	beq.w	800fc2a <_svfiprintf_r+0x1c6>
 800fadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fade:	445a      	add	r2, fp
 800fae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fae2:	f89a 3000 	ldrb.w	r3, [sl]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 809f 	beq.w	800fc2a <_svfiprintf_r+0x1c6>
 800faec:	2300      	movs	r3, #0
 800faee:	f04f 32ff 	mov.w	r2, #4294967295
 800faf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faf6:	f10a 0a01 	add.w	sl, sl, #1
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	9307      	str	r3, [sp, #28]
 800fafe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb02:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb04:	4654      	mov	r4, sl
 800fb06:	2205      	movs	r2, #5
 800fb08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0c:	484e      	ldr	r0, [pc, #312]	@ (800fc48 <_svfiprintf_r+0x1e4>)
 800fb0e:	f7f0 fb67 	bl	80001e0 <memchr>
 800fb12:	9a04      	ldr	r2, [sp, #16]
 800fb14:	b9d8      	cbnz	r0, 800fb4e <_svfiprintf_r+0xea>
 800fb16:	06d0      	lsls	r0, r2, #27
 800fb18:	bf44      	itt	mi
 800fb1a:	2320      	movmi	r3, #32
 800fb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb20:	0711      	lsls	r1, r2, #28
 800fb22:	bf44      	itt	mi
 800fb24:	232b      	movmi	r3, #43	@ 0x2b
 800fb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb30:	d015      	beq.n	800fb5e <_svfiprintf_r+0xfa>
 800fb32:	9a07      	ldr	r2, [sp, #28]
 800fb34:	4654      	mov	r4, sl
 800fb36:	2000      	movs	r0, #0
 800fb38:	f04f 0c0a 	mov.w	ip, #10
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb42:	3b30      	subs	r3, #48	@ 0x30
 800fb44:	2b09      	cmp	r3, #9
 800fb46:	d94b      	bls.n	800fbe0 <_svfiprintf_r+0x17c>
 800fb48:	b1b0      	cbz	r0, 800fb78 <_svfiprintf_r+0x114>
 800fb4a:	9207      	str	r2, [sp, #28]
 800fb4c:	e014      	b.n	800fb78 <_svfiprintf_r+0x114>
 800fb4e:	eba0 0308 	sub.w	r3, r0, r8
 800fb52:	fa09 f303 	lsl.w	r3, r9, r3
 800fb56:	4313      	orrs	r3, r2
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	46a2      	mov	sl, r4
 800fb5c:	e7d2      	b.n	800fb04 <_svfiprintf_r+0xa0>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	1d19      	adds	r1, r3, #4
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	9103      	str	r1, [sp, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	bfbb      	ittet	lt
 800fb6a:	425b      	neglt	r3, r3
 800fb6c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb70:	9307      	strge	r3, [sp, #28]
 800fb72:	9307      	strlt	r3, [sp, #28]
 800fb74:	bfb8      	it	lt
 800fb76:	9204      	strlt	r2, [sp, #16]
 800fb78:	7823      	ldrb	r3, [r4, #0]
 800fb7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb7c:	d10a      	bne.n	800fb94 <_svfiprintf_r+0x130>
 800fb7e:	7863      	ldrb	r3, [r4, #1]
 800fb80:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb82:	d132      	bne.n	800fbea <_svfiprintf_r+0x186>
 800fb84:	9b03      	ldr	r3, [sp, #12]
 800fb86:	1d1a      	adds	r2, r3, #4
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	9203      	str	r2, [sp, #12]
 800fb8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb90:	3402      	adds	r4, #2
 800fb92:	9305      	str	r3, [sp, #20]
 800fb94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fc58 <_svfiprintf_r+0x1f4>
 800fb98:	7821      	ldrb	r1, [r4, #0]
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	4650      	mov	r0, sl
 800fb9e:	f7f0 fb1f 	bl	80001e0 <memchr>
 800fba2:	b138      	cbz	r0, 800fbb4 <_svfiprintf_r+0x150>
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	eba0 000a 	sub.w	r0, r0, sl
 800fbaa:	2240      	movs	r2, #64	@ 0x40
 800fbac:	4082      	lsls	r2, r0
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	3401      	adds	r4, #1
 800fbb2:	9304      	str	r3, [sp, #16]
 800fbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb8:	4824      	ldr	r0, [pc, #144]	@ (800fc4c <_svfiprintf_r+0x1e8>)
 800fbba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbbe:	2206      	movs	r2, #6
 800fbc0:	f7f0 fb0e 	bl	80001e0 <memchr>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d036      	beq.n	800fc36 <_svfiprintf_r+0x1d2>
 800fbc8:	4b21      	ldr	r3, [pc, #132]	@ (800fc50 <_svfiprintf_r+0x1ec>)
 800fbca:	bb1b      	cbnz	r3, 800fc14 <_svfiprintf_r+0x1b0>
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	3307      	adds	r3, #7
 800fbd0:	f023 0307 	bic.w	r3, r3, #7
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	9303      	str	r3, [sp, #12]
 800fbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbda:	4433      	add	r3, r6
 800fbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbde:	e76a      	b.n	800fab6 <_svfiprintf_r+0x52>
 800fbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	e7a8      	b.n	800fb3c <_svfiprintf_r+0xd8>
 800fbea:	2300      	movs	r3, #0
 800fbec:	3401      	adds	r4, #1
 800fbee:	9305      	str	r3, [sp, #20]
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f04f 0c0a 	mov.w	ip, #10
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbfc:	3a30      	subs	r2, #48	@ 0x30
 800fbfe:	2a09      	cmp	r2, #9
 800fc00:	d903      	bls.n	800fc0a <_svfiprintf_r+0x1a6>
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0c6      	beq.n	800fb94 <_svfiprintf_r+0x130>
 800fc06:	9105      	str	r1, [sp, #20]
 800fc08:	e7c4      	b.n	800fb94 <_svfiprintf_r+0x130>
 800fc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc0e:	4604      	mov	r4, r0
 800fc10:	2301      	movs	r3, #1
 800fc12:	e7f0      	b.n	800fbf6 <_svfiprintf_r+0x192>
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc54 <_svfiprintf_r+0x1f0>)
 800fc1c:	a904      	add	r1, sp, #16
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f7fc fcca 	bl	800c5b8 <_printf_float>
 800fc24:	1c42      	adds	r2, r0, #1
 800fc26:	4606      	mov	r6, r0
 800fc28:	d1d6      	bne.n	800fbd8 <_svfiprintf_r+0x174>
 800fc2a:	89ab      	ldrh	r3, [r5, #12]
 800fc2c:	065b      	lsls	r3, r3, #25
 800fc2e:	f53f af2d 	bmi.w	800fa8c <_svfiprintf_r+0x28>
 800fc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc34:	e72c      	b.n	800fa90 <_svfiprintf_r+0x2c>
 800fc36:	ab03      	add	r3, sp, #12
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	462a      	mov	r2, r5
 800fc3c:	4b05      	ldr	r3, [pc, #20]	@ (800fc54 <_svfiprintf_r+0x1f0>)
 800fc3e:	a904      	add	r1, sp, #16
 800fc40:	4638      	mov	r0, r7
 800fc42:	f7fc ff51 	bl	800cae8 <_printf_i>
 800fc46:	e7ed      	b.n	800fc24 <_svfiprintf_r+0x1c0>
 800fc48:	08011e01 	.word	0x08011e01
 800fc4c:	08011e0b 	.word	0x08011e0b
 800fc50:	0800c5b9 	.word	0x0800c5b9
 800fc54:	0800f9ad 	.word	0x0800f9ad
 800fc58:	08011e07 	.word	0x08011e07

0800fc5c <__sflush_r>:
 800fc5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc64:	0716      	lsls	r6, r2, #28
 800fc66:	4605      	mov	r5, r0
 800fc68:	460c      	mov	r4, r1
 800fc6a:	d454      	bmi.n	800fd16 <__sflush_r+0xba>
 800fc6c:	684b      	ldr	r3, [r1, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	dc02      	bgt.n	800fc78 <__sflush_r+0x1c>
 800fc72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	dd48      	ble.n	800fd0a <__sflush_r+0xae>
 800fc78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	d045      	beq.n	800fd0a <__sflush_r+0xae>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc84:	682f      	ldr	r7, [r5, #0]
 800fc86:	6a21      	ldr	r1, [r4, #32]
 800fc88:	602b      	str	r3, [r5, #0]
 800fc8a:	d030      	beq.n	800fcee <__sflush_r+0x92>
 800fc8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	0759      	lsls	r1, r3, #29
 800fc92:	d505      	bpl.n	800fca0 <__sflush_r+0x44>
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	1ad2      	subs	r2, r2, r3
 800fc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc9a:	b10b      	cbz	r3, 800fca0 <__sflush_r+0x44>
 800fc9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	2300      	movs	r3, #0
 800fca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fca4:	6a21      	ldr	r1, [r4, #32]
 800fca6:	4628      	mov	r0, r5
 800fca8:	47b0      	blx	r6
 800fcaa:	1c43      	adds	r3, r0, #1
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	d106      	bne.n	800fcbe <__sflush_r+0x62>
 800fcb0:	6829      	ldr	r1, [r5, #0]
 800fcb2:	291d      	cmp	r1, #29
 800fcb4:	d82b      	bhi.n	800fd0e <__sflush_r+0xb2>
 800fcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800fd60 <__sflush_r+0x104>)
 800fcb8:	410a      	asrs	r2, r1
 800fcba:	07d6      	lsls	r6, r2, #31
 800fcbc:	d427      	bmi.n	800fd0e <__sflush_r+0xb2>
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	6062      	str	r2, [r4, #4]
 800fcc2:	04d9      	lsls	r1, r3, #19
 800fcc4:	6922      	ldr	r2, [r4, #16]
 800fcc6:	6022      	str	r2, [r4, #0]
 800fcc8:	d504      	bpl.n	800fcd4 <__sflush_r+0x78>
 800fcca:	1c42      	adds	r2, r0, #1
 800fccc:	d101      	bne.n	800fcd2 <__sflush_r+0x76>
 800fcce:	682b      	ldr	r3, [r5, #0]
 800fcd0:	b903      	cbnz	r3, 800fcd4 <__sflush_r+0x78>
 800fcd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcd6:	602f      	str	r7, [r5, #0]
 800fcd8:	b1b9      	cbz	r1, 800fd0a <__sflush_r+0xae>
 800fcda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcde:	4299      	cmp	r1, r3
 800fce0:	d002      	beq.n	800fce8 <__sflush_r+0x8c>
 800fce2:	4628      	mov	r0, r5
 800fce4:	f7fe fa2c 	bl	800e140 <_free_r>
 800fce8:	2300      	movs	r3, #0
 800fcea:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcec:	e00d      	b.n	800fd0a <__sflush_r+0xae>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	47b0      	blx	r6
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	1c50      	adds	r0, r2, #1
 800fcf8:	d1c9      	bne.n	800fc8e <__sflush_r+0x32>
 800fcfa:	682b      	ldr	r3, [r5, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d0c6      	beq.n	800fc8e <__sflush_r+0x32>
 800fd00:	2b1d      	cmp	r3, #29
 800fd02:	d001      	beq.n	800fd08 <__sflush_r+0xac>
 800fd04:	2b16      	cmp	r3, #22
 800fd06:	d11e      	bne.n	800fd46 <__sflush_r+0xea>
 800fd08:	602f      	str	r7, [r5, #0]
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e022      	b.n	800fd54 <__sflush_r+0xf8>
 800fd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd12:	b21b      	sxth	r3, r3
 800fd14:	e01b      	b.n	800fd4e <__sflush_r+0xf2>
 800fd16:	690f      	ldr	r7, [r1, #16]
 800fd18:	2f00      	cmp	r7, #0
 800fd1a:	d0f6      	beq.n	800fd0a <__sflush_r+0xae>
 800fd1c:	0793      	lsls	r3, r2, #30
 800fd1e:	680e      	ldr	r6, [r1, #0]
 800fd20:	bf08      	it	eq
 800fd22:	694b      	ldreq	r3, [r1, #20]
 800fd24:	600f      	str	r7, [r1, #0]
 800fd26:	bf18      	it	ne
 800fd28:	2300      	movne	r3, #0
 800fd2a:	eba6 0807 	sub.w	r8, r6, r7
 800fd2e:	608b      	str	r3, [r1, #8]
 800fd30:	f1b8 0f00 	cmp.w	r8, #0
 800fd34:	dde9      	ble.n	800fd0a <__sflush_r+0xae>
 800fd36:	6a21      	ldr	r1, [r4, #32]
 800fd38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd3a:	4643      	mov	r3, r8
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	4628      	mov	r0, r5
 800fd40:	47b0      	blx	r6
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dc08      	bgt.n	800fd58 <__sflush_r+0xfc>
 800fd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd4e:	81a3      	strh	r3, [r4, #12]
 800fd50:	f04f 30ff 	mov.w	r0, #4294967295
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4407      	add	r7, r0
 800fd5a:	eba8 0800 	sub.w	r8, r8, r0
 800fd5e:	e7e7      	b.n	800fd30 <__sflush_r+0xd4>
 800fd60:	dfbffffe 	.word	0xdfbffffe

0800fd64 <_fflush_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	690b      	ldr	r3, [r1, #16]
 800fd68:	4605      	mov	r5, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	b913      	cbnz	r3, 800fd74 <_fflush_r+0x10>
 800fd6e:	2500      	movs	r5, #0
 800fd70:	4628      	mov	r0, r5
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	b118      	cbz	r0, 800fd7e <_fflush_r+0x1a>
 800fd76:	6a03      	ldr	r3, [r0, #32]
 800fd78:	b90b      	cbnz	r3, 800fd7e <_fflush_r+0x1a>
 800fd7a:	f7fd fa75 	bl	800d268 <__sinit>
 800fd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d0f3      	beq.n	800fd6e <_fflush_r+0xa>
 800fd86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd88:	07d0      	lsls	r0, r2, #31
 800fd8a:	d404      	bmi.n	800fd96 <_fflush_r+0x32>
 800fd8c:	0599      	lsls	r1, r3, #22
 800fd8e:	d402      	bmi.n	800fd96 <_fflush_r+0x32>
 800fd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd92:	f7fd fb80 	bl	800d496 <__retarget_lock_acquire_recursive>
 800fd96:	4628      	mov	r0, r5
 800fd98:	4621      	mov	r1, r4
 800fd9a:	f7ff ff5f 	bl	800fc5c <__sflush_r>
 800fd9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fda0:	07da      	lsls	r2, r3, #31
 800fda2:	4605      	mov	r5, r0
 800fda4:	d4e4      	bmi.n	800fd70 <_fflush_r+0xc>
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	059b      	lsls	r3, r3, #22
 800fdaa:	d4e1      	bmi.n	800fd70 <_fflush_r+0xc>
 800fdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdae:	f7fd fb73 	bl	800d498 <__retarget_lock_release_recursive>
 800fdb2:	e7dd      	b.n	800fd70 <_fflush_r+0xc>

0800fdb4 <memmove>:
 800fdb4:	4288      	cmp	r0, r1
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	eb01 0402 	add.w	r4, r1, r2
 800fdbc:	d902      	bls.n	800fdc4 <memmove+0x10>
 800fdbe:	4284      	cmp	r4, r0
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	d807      	bhi.n	800fdd4 <memmove+0x20>
 800fdc4:	1e43      	subs	r3, r0, #1
 800fdc6:	42a1      	cmp	r1, r4
 800fdc8:	d008      	beq.n	800fddc <memmove+0x28>
 800fdca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdd2:	e7f8      	b.n	800fdc6 <memmove+0x12>
 800fdd4:	4402      	add	r2, r0
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	428a      	cmp	r2, r1
 800fdda:	d100      	bne.n	800fdde <memmove+0x2a>
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fde2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fde6:	e7f7      	b.n	800fdd8 <memmove+0x24>

0800fde8 <strncmp>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	b16a      	cbz	r2, 800fe08 <strncmp+0x20>
 800fdec:	3901      	subs	r1, #1
 800fdee:	1884      	adds	r4, r0, r2
 800fdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d103      	bne.n	800fe04 <strncmp+0x1c>
 800fdfc:	42a0      	cmp	r0, r4
 800fdfe:	d001      	beq.n	800fe04 <strncmp+0x1c>
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	d1f5      	bne.n	800fdf0 <strncmp+0x8>
 800fe04:	1ad0      	subs	r0, r2, r3
 800fe06:	bd10      	pop	{r4, pc}
 800fe08:	4610      	mov	r0, r2
 800fe0a:	e7fc      	b.n	800fe06 <strncmp+0x1e>

0800fe0c <_sbrk_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d06      	ldr	r5, [pc, #24]	@ (800fe28 <_sbrk_r+0x1c>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4604      	mov	r4, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	f7f1 fecc 	bl	8001bb4 <_sbrk>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_sbrk_r+0x1a>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_sbrk_r+0x1a>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	20002444 	.word	0x20002444

0800fe2c <memcpy>:
 800fe2c:	440a      	add	r2, r1
 800fe2e:	4291      	cmp	r1, r2
 800fe30:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe34:	d100      	bne.n	800fe38 <memcpy+0xc>
 800fe36:	4770      	bx	lr
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe42:	4291      	cmp	r1, r2
 800fe44:	d1f9      	bne.n	800fe3a <memcpy+0xe>
 800fe46:	bd10      	pop	{r4, pc}

0800fe48 <nan>:
 800fe48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fe50 <nan+0x8>
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	00000000 	.word	0x00000000
 800fe54:	7ff80000 	.word	0x7ff80000

0800fe58 <__assert_func>:
 800fe58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe5a:	4614      	mov	r4, r2
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	4b09      	ldr	r3, [pc, #36]	@ (800fe84 <__assert_func+0x2c>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4605      	mov	r5, r0
 800fe64:	68d8      	ldr	r0, [r3, #12]
 800fe66:	b954      	cbnz	r4, 800fe7e <__assert_func+0x26>
 800fe68:	4b07      	ldr	r3, [pc, #28]	@ (800fe88 <__assert_func+0x30>)
 800fe6a:	461c      	mov	r4, r3
 800fe6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe70:	9100      	str	r1, [sp, #0]
 800fe72:	462b      	mov	r3, r5
 800fe74:	4905      	ldr	r1, [pc, #20]	@ (800fe8c <__assert_func+0x34>)
 800fe76:	f000 fba7 	bl	80105c8 <fiprintf>
 800fe7a:	f000 fbb7 	bl	80105ec <abort>
 800fe7e:	4b04      	ldr	r3, [pc, #16]	@ (800fe90 <__assert_func+0x38>)
 800fe80:	e7f4      	b.n	800fe6c <__assert_func+0x14>
 800fe82:	bf00      	nop
 800fe84:	2000010c 	.word	0x2000010c
 800fe88:	08011e55 	.word	0x08011e55
 800fe8c:	08011e27 	.word	0x08011e27
 800fe90:	08011e1a 	.word	0x08011e1a

0800fe94 <_calloc_r>:
 800fe94:	b570      	push	{r4, r5, r6, lr}
 800fe96:	fba1 5402 	umull	r5, r4, r1, r2
 800fe9a:	b93c      	cbnz	r4, 800feac <_calloc_r+0x18>
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	f7fe f9c3 	bl	800e228 <_malloc_r>
 800fea2:	4606      	mov	r6, r0
 800fea4:	b928      	cbnz	r0, 800feb2 <_calloc_r+0x1e>
 800fea6:	2600      	movs	r6, #0
 800fea8:	4630      	mov	r0, r6
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	220c      	movs	r2, #12
 800feae:	6002      	str	r2, [r0, #0]
 800feb0:	e7f9      	b.n	800fea6 <_calloc_r+0x12>
 800feb2:	462a      	mov	r2, r5
 800feb4:	4621      	mov	r1, r4
 800feb6:	f7fd fa70 	bl	800d39a <memset>
 800feba:	e7f5      	b.n	800fea8 <_calloc_r+0x14>

0800febc <rshift>:
 800febc:	6903      	ldr	r3, [r0, #16]
 800febe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800feca:	f100 0414 	add.w	r4, r0, #20
 800fece:	dd45      	ble.n	800ff5c <rshift+0xa0>
 800fed0:	f011 011f 	ands.w	r1, r1, #31
 800fed4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fed8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fedc:	d10c      	bne.n	800fef8 <rshift+0x3c>
 800fede:	f100 0710 	add.w	r7, r0, #16
 800fee2:	4629      	mov	r1, r5
 800fee4:	42b1      	cmp	r1, r6
 800fee6:	d334      	bcc.n	800ff52 <rshift+0x96>
 800fee8:	1a9b      	subs	r3, r3, r2
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	1eea      	subs	r2, r5, #3
 800feee:	4296      	cmp	r6, r2
 800fef0:	bf38      	it	cc
 800fef2:	2300      	movcc	r3, #0
 800fef4:	4423      	add	r3, r4
 800fef6:	e015      	b.n	800ff24 <rshift+0x68>
 800fef8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fefc:	f1c1 0820 	rsb	r8, r1, #32
 800ff00:	40cf      	lsrs	r7, r1
 800ff02:	f105 0e04 	add.w	lr, r5, #4
 800ff06:	46a1      	mov	r9, r4
 800ff08:	4576      	cmp	r6, lr
 800ff0a:	46f4      	mov	ip, lr
 800ff0c:	d815      	bhi.n	800ff3a <rshift+0x7e>
 800ff0e:	1a9a      	subs	r2, r3, r2
 800ff10:	0092      	lsls	r2, r2, #2
 800ff12:	3a04      	subs	r2, #4
 800ff14:	3501      	adds	r5, #1
 800ff16:	42ae      	cmp	r6, r5
 800ff18:	bf38      	it	cc
 800ff1a:	2200      	movcc	r2, #0
 800ff1c:	18a3      	adds	r3, r4, r2
 800ff1e:	50a7      	str	r7, [r4, r2]
 800ff20:	b107      	cbz	r7, 800ff24 <rshift+0x68>
 800ff22:	3304      	adds	r3, #4
 800ff24:	1b1a      	subs	r2, r3, r4
 800ff26:	42a3      	cmp	r3, r4
 800ff28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff2c:	bf08      	it	eq
 800ff2e:	2300      	moveq	r3, #0
 800ff30:	6102      	str	r2, [r0, #16]
 800ff32:	bf08      	it	eq
 800ff34:	6143      	streq	r3, [r0, #20]
 800ff36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff3a:	f8dc c000 	ldr.w	ip, [ip]
 800ff3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff42:	ea4c 0707 	orr.w	r7, ip, r7
 800ff46:	f849 7b04 	str.w	r7, [r9], #4
 800ff4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff4e:	40cf      	lsrs	r7, r1
 800ff50:	e7da      	b.n	800ff08 <rshift+0x4c>
 800ff52:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff56:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff5a:	e7c3      	b.n	800fee4 <rshift+0x28>
 800ff5c:	4623      	mov	r3, r4
 800ff5e:	e7e1      	b.n	800ff24 <rshift+0x68>

0800ff60 <__hexdig_fun>:
 800ff60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ff64:	2b09      	cmp	r3, #9
 800ff66:	d802      	bhi.n	800ff6e <__hexdig_fun+0xe>
 800ff68:	3820      	subs	r0, #32
 800ff6a:	b2c0      	uxtb	r0, r0
 800ff6c:	4770      	bx	lr
 800ff6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ff72:	2b05      	cmp	r3, #5
 800ff74:	d801      	bhi.n	800ff7a <__hexdig_fun+0x1a>
 800ff76:	3847      	subs	r0, #71	@ 0x47
 800ff78:	e7f7      	b.n	800ff6a <__hexdig_fun+0xa>
 800ff7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ff7e:	2b05      	cmp	r3, #5
 800ff80:	d801      	bhi.n	800ff86 <__hexdig_fun+0x26>
 800ff82:	3827      	subs	r0, #39	@ 0x27
 800ff84:	e7f1      	b.n	800ff6a <__hexdig_fun+0xa>
 800ff86:	2000      	movs	r0, #0
 800ff88:	4770      	bx	lr
	...

0800ff8c <__gethex>:
 800ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	b085      	sub	sp, #20
 800ff92:	468a      	mov	sl, r1
 800ff94:	9302      	str	r3, [sp, #8]
 800ff96:	680b      	ldr	r3, [r1, #0]
 800ff98:	9001      	str	r0, [sp, #4]
 800ff9a:	4690      	mov	r8, r2
 800ff9c:	1c9c      	adds	r4, r3, #2
 800ff9e:	46a1      	mov	r9, r4
 800ffa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ffa4:	2830      	cmp	r0, #48	@ 0x30
 800ffa6:	d0fa      	beq.n	800ff9e <__gethex+0x12>
 800ffa8:	eba9 0303 	sub.w	r3, r9, r3
 800ffac:	f1a3 0b02 	sub.w	fp, r3, #2
 800ffb0:	f7ff ffd6 	bl	800ff60 <__hexdig_fun>
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d168      	bne.n	801008c <__gethex+0x100>
 800ffba:	49a0      	ldr	r1, [pc, #640]	@ (801023c <__gethex+0x2b0>)
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	4648      	mov	r0, r9
 800ffc0:	f7ff ff12 	bl	800fde8 <strncmp>
 800ffc4:	4607      	mov	r7, r0
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d167      	bne.n	801009a <__gethex+0x10e>
 800ffca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ffce:	4626      	mov	r6, r4
 800ffd0:	f7ff ffc6 	bl	800ff60 <__hexdig_fun>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d062      	beq.n	801009e <__gethex+0x112>
 800ffd8:	4623      	mov	r3, r4
 800ffda:	7818      	ldrb	r0, [r3, #0]
 800ffdc:	2830      	cmp	r0, #48	@ 0x30
 800ffde:	4699      	mov	r9, r3
 800ffe0:	f103 0301 	add.w	r3, r3, #1
 800ffe4:	d0f9      	beq.n	800ffda <__gethex+0x4e>
 800ffe6:	f7ff ffbb 	bl	800ff60 <__hexdig_fun>
 800ffea:	fab0 f580 	clz	r5, r0
 800ffee:	096d      	lsrs	r5, r5, #5
 800fff0:	f04f 0b01 	mov.w	fp, #1
 800fff4:	464a      	mov	r2, r9
 800fff6:	4616      	mov	r6, r2
 800fff8:	3201      	adds	r2, #1
 800fffa:	7830      	ldrb	r0, [r6, #0]
 800fffc:	f7ff ffb0 	bl	800ff60 <__hexdig_fun>
 8010000:	2800      	cmp	r0, #0
 8010002:	d1f8      	bne.n	800fff6 <__gethex+0x6a>
 8010004:	498d      	ldr	r1, [pc, #564]	@ (801023c <__gethex+0x2b0>)
 8010006:	2201      	movs	r2, #1
 8010008:	4630      	mov	r0, r6
 801000a:	f7ff feed 	bl	800fde8 <strncmp>
 801000e:	2800      	cmp	r0, #0
 8010010:	d13f      	bne.n	8010092 <__gethex+0x106>
 8010012:	b944      	cbnz	r4, 8010026 <__gethex+0x9a>
 8010014:	1c74      	adds	r4, r6, #1
 8010016:	4622      	mov	r2, r4
 8010018:	4616      	mov	r6, r2
 801001a:	3201      	adds	r2, #1
 801001c:	7830      	ldrb	r0, [r6, #0]
 801001e:	f7ff ff9f 	bl	800ff60 <__hexdig_fun>
 8010022:	2800      	cmp	r0, #0
 8010024:	d1f8      	bne.n	8010018 <__gethex+0x8c>
 8010026:	1ba4      	subs	r4, r4, r6
 8010028:	00a7      	lsls	r7, r4, #2
 801002a:	7833      	ldrb	r3, [r6, #0]
 801002c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010030:	2b50      	cmp	r3, #80	@ 0x50
 8010032:	d13e      	bne.n	80100b2 <__gethex+0x126>
 8010034:	7873      	ldrb	r3, [r6, #1]
 8010036:	2b2b      	cmp	r3, #43	@ 0x2b
 8010038:	d033      	beq.n	80100a2 <__gethex+0x116>
 801003a:	2b2d      	cmp	r3, #45	@ 0x2d
 801003c:	d034      	beq.n	80100a8 <__gethex+0x11c>
 801003e:	1c71      	adds	r1, r6, #1
 8010040:	2400      	movs	r4, #0
 8010042:	7808      	ldrb	r0, [r1, #0]
 8010044:	f7ff ff8c 	bl	800ff60 <__hexdig_fun>
 8010048:	1e43      	subs	r3, r0, #1
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b18      	cmp	r3, #24
 801004e:	d830      	bhi.n	80100b2 <__gethex+0x126>
 8010050:	f1a0 0210 	sub.w	r2, r0, #16
 8010054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010058:	f7ff ff82 	bl	800ff60 <__hexdig_fun>
 801005c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010060:	fa5f fc8c 	uxtb.w	ip, ip
 8010064:	f1bc 0f18 	cmp.w	ip, #24
 8010068:	f04f 030a 	mov.w	r3, #10
 801006c:	d91e      	bls.n	80100ac <__gethex+0x120>
 801006e:	b104      	cbz	r4, 8010072 <__gethex+0xe6>
 8010070:	4252      	negs	r2, r2
 8010072:	4417      	add	r7, r2
 8010074:	f8ca 1000 	str.w	r1, [sl]
 8010078:	b1ed      	cbz	r5, 80100b6 <__gethex+0x12a>
 801007a:	f1bb 0f00 	cmp.w	fp, #0
 801007e:	bf0c      	ite	eq
 8010080:	2506      	moveq	r5, #6
 8010082:	2500      	movne	r5, #0
 8010084:	4628      	mov	r0, r5
 8010086:	b005      	add	sp, #20
 8010088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008c:	2500      	movs	r5, #0
 801008e:	462c      	mov	r4, r5
 8010090:	e7b0      	b.n	800fff4 <__gethex+0x68>
 8010092:	2c00      	cmp	r4, #0
 8010094:	d1c7      	bne.n	8010026 <__gethex+0x9a>
 8010096:	4627      	mov	r7, r4
 8010098:	e7c7      	b.n	801002a <__gethex+0x9e>
 801009a:	464e      	mov	r6, r9
 801009c:	462f      	mov	r7, r5
 801009e:	2501      	movs	r5, #1
 80100a0:	e7c3      	b.n	801002a <__gethex+0x9e>
 80100a2:	2400      	movs	r4, #0
 80100a4:	1cb1      	adds	r1, r6, #2
 80100a6:	e7cc      	b.n	8010042 <__gethex+0xb6>
 80100a8:	2401      	movs	r4, #1
 80100aa:	e7fb      	b.n	80100a4 <__gethex+0x118>
 80100ac:	fb03 0002 	mla	r0, r3, r2, r0
 80100b0:	e7ce      	b.n	8010050 <__gethex+0xc4>
 80100b2:	4631      	mov	r1, r6
 80100b4:	e7de      	b.n	8010074 <__gethex+0xe8>
 80100b6:	eba6 0309 	sub.w	r3, r6, r9
 80100ba:	3b01      	subs	r3, #1
 80100bc:	4629      	mov	r1, r5
 80100be:	2b07      	cmp	r3, #7
 80100c0:	dc0a      	bgt.n	80100d8 <__gethex+0x14c>
 80100c2:	9801      	ldr	r0, [sp, #4]
 80100c4:	f7fe f93c 	bl	800e340 <_Balloc>
 80100c8:	4604      	mov	r4, r0
 80100ca:	b940      	cbnz	r0, 80100de <__gethex+0x152>
 80100cc:	4b5c      	ldr	r3, [pc, #368]	@ (8010240 <__gethex+0x2b4>)
 80100ce:	4602      	mov	r2, r0
 80100d0:	21e4      	movs	r1, #228	@ 0xe4
 80100d2:	485c      	ldr	r0, [pc, #368]	@ (8010244 <__gethex+0x2b8>)
 80100d4:	f7ff fec0 	bl	800fe58 <__assert_func>
 80100d8:	3101      	adds	r1, #1
 80100da:	105b      	asrs	r3, r3, #1
 80100dc:	e7ef      	b.n	80100be <__gethex+0x132>
 80100de:	f100 0a14 	add.w	sl, r0, #20
 80100e2:	2300      	movs	r3, #0
 80100e4:	4655      	mov	r5, sl
 80100e6:	469b      	mov	fp, r3
 80100e8:	45b1      	cmp	r9, r6
 80100ea:	d337      	bcc.n	801015c <__gethex+0x1d0>
 80100ec:	f845 bb04 	str.w	fp, [r5], #4
 80100f0:	eba5 050a 	sub.w	r5, r5, sl
 80100f4:	10ad      	asrs	r5, r5, #2
 80100f6:	6125      	str	r5, [r4, #16]
 80100f8:	4658      	mov	r0, fp
 80100fa:	f7fe fa13 	bl	800e524 <__hi0bits>
 80100fe:	016d      	lsls	r5, r5, #5
 8010100:	f8d8 6000 	ldr.w	r6, [r8]
 8010104:	1a2d      	subs	r5, r5, r0
 8010106:	42b5      	cmp	r5, r6
 8010108:	dd54      	ble.n	80101b4 <__gethex+0x228>
 801010a:	1bad      	subs	r5, r5, r6
 801010c:	4629      	mov	r1, r5
 801010e:	4620      	mov	r0, r4
 8010110:	f7fe fda7 	bl	800ec62 <__any_on>
 8010114:	4681      	mov	r9, r0
 8010116:	b178      	cbz	r0, 8010138 <__gethex+0x1ac>
 8010118:	1e6b      	subs	r3, r5, #1
 801011a:	1159      	asrs	r1, r3, #5
 801011c:	f003 021f 	and.w	r2, r3, #31
 8010120:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010124:	f04f 0901 	mov.w	r9, #1
 8010128:	fa09 f202 	lsl.w	r2, r9, r2
 801012c:	420a      	tst	r2, r1
 801012e:	d003      	beq.n	8010138 <__gethex+0x1ac>
 8010130:	454b      	cmp	r3, r9
 8010132:	dc36      	bgt.n	80101a2 <__gethex+0x216>
 8010134:	f04f 0902 	mov.w	r9, #2
 8010138:	4629      	mov	r1, r5
 801013a:	4620      	mov	r0, r4
 801013c:	f7ff febe 	bl	800febc <rshift>
 8010140:	442f      	add	r7, r5
 8010142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010146:	42bb      	cmp	r3, r7
 8010148:	da42      	bge.n	80101d0 <__gethex+0x244>
 801014a:	9801      	ldr	r0, [sp, #4]
 801014c:	4621      	mov	r1, r4
 801014e:	f7fe f937 	bl	800e3c0 <_Bfree>
 8010152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010154:	2300      	movs	r3, #0
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	25a3      	movs	r5, #163	@ 0xa3
 801015a:	e793      	b.n	8010084 <__gethex+0xf8>
 801015c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010160:	2a2e      	cmp	r2, #46	@ 0x2e
 8010162:	d012      	beq.n	801018a <__gethex+0x1fe>
 8010164:	2b20      	cmp	r3, #32
 8010166:	d104      	bne.n	8010172 <__gethex+0x1e6>
 8010168:	f845 bb04 	str.w	fp, [r5], #4
 801016c:	f04f 0b00 	mov.w	fp, #0
 8010170:	465b      	mov	r3, fp
 8010172:	7830      	ldrb	r0, [r6, #0]
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	f7ff fef3 	bl	800ff60 <__hexdig_fun>
 801017a:	9b03      	ldr	r3, [sp, #12]
 801017c:	f000 000f 	and.w	r0, r0, #15
 8010180:	4098      	lsls	r0, r3
 8010182:	ea4b 0b00 	orr.w	fp, fp, r0
 8010186:	3304      	adds	r3, #4
 8010188:	e7ae      	b.n	80100e8 <__gethex+0x15c>
 801018a:	45b1      	cmp	r9, r6
 801018c:	d8ea      	bhi.n	8010164 <__gethex+0x1d8>
 801018e:	492b      	ldr	r1, [pc, #172]	@ (801023c <__gethex+0x2b0>)
 8010190:	9303      	str	r3, [sp, #12]
 8010192:	2201      	movs	r2, #1
 8010194:	4630      	mov	r0, r6
 8010196:	f7ff fe27 	bl	800fde8 <strncmp>
 801019a:	9b03      	ldr	r3, [sp, #12]
 801019c:	2800      	cmp	r0, #0
 801019e:	d1e1      	bne.n	8010164 <__gethex+0x1d8>
 80101a0:	e7a2      	b.n	80100e8 <__gethex+0x15c>
 80101a2:	1ea9      	subs	r1, r5, #2
 80101a4:	4620      	mov	r0, r4
 80101a6:	f7fe fd5c 	bl	800ec62 <__any_on>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d0c2      	beq.n	8010134 <__gethex+0x1a8>
 80101ae:	f04f 0903 	mov.w	r9, #3
 80101b2:	e7c1      	b.n	8010138 <__gethex+0x1ac>
 80101b4:	da09      	bge.n	80101ca <__gethex+0x23e>
 80101b6:	1b75      	subs	r5, r6, r5
 80101b8:	4621      	mov	r1, r4
 80101ba:	9801      	ldr	r0, [sp, #4]
 80101bc:	462a      	mov	r2, r5
 80101be:	f7fe fb17 	bl	800e7f0 <__lshift>
 80101c2:	1b7f      	subs	r7, r7, r5
 80101c4:	4604      	mov	r4, r0
 80101c6:	f100 0a14 	add.w	sl, r0, #20
 80101ca:	f04f 0900 	mov.w	r9, #0
 80101ce:	e7b8      	b.n	8010142 <__gethex+0x1b6>
 80101d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101d4:	42bd      	cmp	r5, r7
 80101d6:	dd6f      	ble.n	80102b8 <__gethex+0x32c>
 80101d8:	1bed      	subs	r5, r5, r7
 80101da:	42ae      	cmp	r6, r5
 80101dc:	dc34      	bgt.n	8010248 <__gethex+0x2bc>
 80101de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d022      	beq.n	801022c <__gethex+0x2a0>
 80101e6:	2b03      	cmp	r3, #3
 80101e8:	d024      	beq.n	8010234 <__gethex+0x2a8>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d115      	bne.n	801021a <__gethex+0x28e>
 80101ee:	42ae      	cmp	r6, r5
 80101f0:	d113      	bne.n	801021a <__gethex+0x28e>
 80101f2:	2e01      	cmp	r6, #1
 80101f4:	d10b      	bne.n	801020e <__gethex+0x282>
 80101f6:	9a02      	ldr	r2, [sp, #8]
 80101f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101fc:	6013      	str	r3, [r2, #0]
 80101fe:	2301      	movs	r3, #1
 8010200:	6123      	str	r3, [r4, #16]
 8010202:	f8ca 3000 	str.w	r3, [sl]
 8010206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010208:	2562      	movs	r5, #98	@ 0x62
 801020a:	601c      	str	r4, [r3, #0]
 801020c:	e73a      	b.n	8010084 <__gethex+0xf8>
 801020e:	1e71      	subs	r1, r6, #1
 8010210:	4620      	mov	r0, r4
 8010212:	f7fe fd26 	bl	800ec62 <__any_on>
 8010216:	2800      	cmp	r0, #0
 8010218:	d1ed      	bne.n	80101f6 <__gethex+0x26a>
 801021a:	9801      	ldr	r0, [sp, #4]
 801021c:	4621      	mov	r1, r4
 801021e:	f7fe f8cf 	bl	800e3c0 <_Bfree>
 8010222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010224:	2300      	movs	r3, #0
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	2550      	movs	r5, #80	@ 0x50
 801022a:	e72b      	b.n	8010084 <__gethex+0xf8>
 801022c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1f3      	bne.n	801021a <__gethex+0x28e>
 8010232:	e7e0      	b.n	80101f6 <__gethex+0x26a>
 8010234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1dd      	bne.n	80101f6 <__gethex+0x26a>
 801023a:	e7ee      	b.n	801021a <__gethex+0x28e>
 801023c:	08011ca8 	.word	0x08011ca8
 8010240:	08011b3d 	.word	0x08011b3d
 8010244:	08011e56 	.word	0x08011e56
 8010248:	1e6f      	subs	r7, r5, #1
 801024a:	f1b9 0f00 	cmp.w	r9, #0
 801024e:	d130      	bne.n	80102b2 <__gethex+0x326>
 8010250:	b127      	cbz	r7, 801025c <__gethex+0x2d0>
 8010252:	4639      	mov	r1, r7
 8010254:	4620      	mov	r0, r4
 8010256:	f7fe fd04 	bl	800ec62 <__any_on>
 801025a:	4681      	mov	r9, r0
 801025c:	117a      	asrs	r2, r7, #5
 801025e:	2301      	movs	r3, #1
 8010260:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010264:	f007 071f 	and.w	r7, r7, #31
 8010268:	40bb      	lsls	r3, r7
 801026a:	4213      	tst	r3, r2
 801026c:	4629      	mov	r1, r5
 801026e:	4620      	mov	r0, r4
 8010270:	bf18      	it	ne
 8010272:	f049 0902 	orrne.w	r9, r9, #2
 8010276:	f7ff fe21 	bl	800febc <rshift>
 801027a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801027e:	1b76      	subs	r6, r6, r5
 8010280:	2502      	movs	r5, #2
 8010282:	f1b9 0f00 	cmp.w	r9, #0
 8010286:	d047      	beq.n	8010318 <__gethex+0x38c>
 8010288:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801028c:	2b02      	cmp	r3, #2
 801028e:	d015      	beq.n	80102bc <__gethex+0x330>
 8010290:	2b03      	cmp	r3, #3
 8010292:	d017      	beq.n	80102c4 <__gethex+0x338>
 8010294:	2b01      	cmp	r3, #1
 8010296:	d109      	bne.n	80102ac <__gethex+0x320>
 8010298:	f019 0f02 	tst.w	r9, #2
 801029c:	d006      	beq.n	80102ac <__gethex+0x320>
 801029e:	f8da 3000 	ldr.w	r3, [sl]
 80102a2:	ea49 0903 	orr.w	r9, r9, r3
 80102a6:	f019 0f01 	tst.w	r9, #1
 80102aa:	d10e      	bne.n	80102ca <__gethex+0x33e>
 80102ac:	f045 0510 	orr.w	r5, r5, #16
 80102b0:	e032      	b.n	8010318 <__gethex+0x38c>
 80102b2:	f04f 0901 	mov.w	r9, #1
 80102b6:	e7d1      	b.n	801025c <__gethex+0x2d0>
 80102b8:	2501      	movs	r5, #1
 80102ba:	e7e2      	b.n	8010282 <__gethex+0x2f6>
 80102bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102be:	f1c3 0301 	rsb	r3, r3, #1
 80102c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d0f0      	beq.n	80102ac <__gethex+0x320>
 80102ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80102ce:	f104 0314 	add.w	r3, r4, #20
 80102d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80102d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80102da:	f04f 0c00 	mov.w	ip, #0
 80102de:	4618      	mov	r0, r3
 80102e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80102e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80102e8:	d01b      	beq.n	8010322 <__gethex+0x396>
 80102ea:	3201      	adds	r2, #1
 80102ec:	6002      	str	r2, [r0, #0]
 80102ee:	2d02      	cmp	r5, #2
 80102f0:	f104 0314 	add.w	r3, r4, #20
 80102f4:	d13c      	bne.n	8010370 <__gethex+0x3e4>
 80102f6:	f8d8 2000 	ldr.w	r2, [r8]
 80102fa:	3a01      	subs	r2, #1
 80102fc:	42b2      	cmp	r2, r6
 80102fe:	d109      	bne.n	8010314 <__gethex+0x388>
 8010300:	1171      	asrs	r1, r6, #5
 8010302:	2201      	movs	r2, #1
 8010304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010308:	f006 061f 	and.w	r6, r6, #31
 801030c:	fa02 f606 	lsl.w	r6, r2, r6
 8010310:	421e      	tst	r6, r3
 8010312:	d13a      	bne.n	801038a <__gethex+0x3fe>
 8010314:	f045 0520 	orr.w	r5, r5, #32
 8010318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801031a:	601c      	str	r4, [r3, #0]
 801031c:	9b02      	ldr	r3, [sp, #8]
 801031e:	601f      	str	r7, [r3, #0]
 8010320:	e6b0      	b.n	8010084 <__gethex+0xf8>
 8010322:	4299      	cmp	r1, r3
 8010324:	f843 cc04 	str.w	ip, [r3, #-4]
 8010328:	d8d9      	bhi.n	80102de <__gethex+0x352>
 801032a:	68a3      	ldr	r3, [r4, #8]
 801032c:	459b      	cmp	fp, r3
 801032e:	db17      	blt.n	8010360 <__gethex+0x3d4>
 8010330:	6861      	ldr	r1, [r4, #4]
 8010332:	9801      	ldr	r0, [sp, #4]
 8010334:	3101      	adds	r1, #1
 8010336:	f7fe f803 	bl	800e340 <_Balloc>
 801033a:	4681      	mov	r9, r0
 801033c:	b918      	cbnz	r0, 8010346 <__gethex+0x3ba>
 801033e:	4b1a      	ldr	r3, [pc, #104]	@ (80103a8 <__gethex+0x41c>)
 8010340:	4602      	mov	r2, r0
 8010342:	2184      	movs	r1, #132	@ 0x84
 8010344:	e6c5      	b.n	80100d2 <__gethex+0x146>
 8010346:	6922      	ldr	r2, [r4, #16]
 8010348:	3202      	adds	r2, #2
 801034a:	f104 010c 	add.w	r1, r4, #12
 801034e:	0092      	lsls	r2, r2, #2
 8010350:	300c      	adds	r0, #12
 8010352:	f7ff fd6b 	bl	800fe2c <memcpy>
 8010356:	4621      	mov	r1, r4
 8010358:	9801      	ldr	r0, [sp, #4]
 801035a:	f7fe f831 	bl	800e3c0 <_Bfree>
 801035e:	464c      	mov	r4, r9
 8010360:	6923      	ldr	r3, [r4, #16]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010368:	6122      	str	r2, [r4, #16]
 801036a:	2201      	movs	r2, #1
 801036c:	615a      	str	r2, [r3, #20]
 801036e:	e7be      	b.n	80102ee <__gethex+0x362>
 8010370:	6922      	ldr	r2, [r4, #16]
 8010372:	455a      	cmp	r2, fp
 8010374:	dd0b      	ble.n	801038e <__gethex+0x402>
 8010376:	2101      	movs	r1, #1
 8010378:	4620      	mov	r0, r4
 801037a:	f7ff fd9f 	bl	800febc <rshift>
 801037e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010382:	3701      	adds	r7, #1
 8010384:	42bb      	cmp	r3, r7
 8010386:	f6ff aee0 	blt.w	801014a <__gethex+0x1be>
 801038a:	2501      	movs	r5, #1
 801038c:	e7c2      	b.n	8010314 <__gethex+0x388>
 801038e:	f016 061f 	ands.w	r6, r6, #31
 8010392:	d0fa      	beq.n	801038a <__gethex+0x3fe>
 8010394:	4453      	add	r3, sl
 8010396:	f1c6 0620 	rsb	r6, r6, #32
 801039a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801039e:	f7fe f8c1 	bl	800e524 <__hi0bits>
 80103a2:	42b0      	cmp	r0, r6
 80103a4:	dbe7      	blt.n	8010376 <__gethex+0x3ea>
 80103a6:	e7f0      	b.n	801038a <__gethex+0x3fe>
 80103a8:	08011b3d 	.word	0x08011b3d

080103ac <L_shift>:
 80103ac:	f1c2 0208 	rsb	r2, r2, #8
 80103b0:	0092      	lsls	r2, r2, #2
 80103b2:	b570      	push	{r4, r5, r6, lr}
 80103b4:	f1c2 0620 	rsb	r6, r2, #32
 80103b8:	6843      	ldr	r3, [r0, #4]
 80103ba:	6804      	ldr	r4, [r0, #0]
 80103bc:	fa03 f506 	lsl.w	r5, r3, r6
 80103c0:	432c      	orrs	r4, r5
 80103c2:	40d3      	lsrs	r3, r2
 80103c4:	6004      	str	r4, [r0, #0]
 80103c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80103ca:	4288      	cmp	r0, r1
 80103cc:	d3f4      	bcc.n	80103b8 <L_shift+0xc>
 80103ce:	bd70      	pop	{r4, r5, r6, pc}

080103d0 <__match>:
 80103d0:	b530      	push	{r4, r5, lr}
 80103d2:	6803      	ldr	r3, [r0, #0]
 80103d4:	3301      	adds	r3, #1
 80103d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103da:	b914      	cbnz	r4, 80103e2 <__match+0x12>
 80103dc:	6003      	str	r3, [r0, #0]
 80103de:	2001      	movs	r0, #1
 80103e0:	bd30      	pop	{r4, r5, pc}
 80103e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80103ea:	2d19      	cmp	r5, #25
 80103ec:	bf98      	it	ls
 80103ee:	3220      	addls	r2, #32
 80103f0:	42a2      	cmp	r2, r4
 80103f2:	d0f0      	beq.n	80103d6 <__match+0x6>
 80103f4:	2000      	movs	r0, #0
 80103f6:	e7f3      	b.n	80103e0 <__match+0x10>

080103f8 <__hexnan>:
 80103f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fc:	680b      	ldr	r3, [r1, #0]
 80103fe:	6801      	ldr	r1, [r0, #0]
 8010400:	115e      	asrs	r6, r3, #5
 8010402:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010406:	f013 031f 	ands.w	r3, r3, #31
 801040a:	b087      	sub	sp, #28
 801040c:	bf18      	it	ne
 801040e:	3604      	addne	r6, #4
 8010410:	2500      	movs	r5, #0
 8010412:	1f37      	subs	r7, r6, #4
 8010414:	4682      	mov	sl, r0
 8010416:	4690      	mov	r8, r2
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	f846 5c04 	str.w	r5, [r6, #-4]
 801041e:	46b9      	mov	r9, r7
 8010420:	463c      	mov	r4, r7
 8010422:	9502      	str	r5, [sp, #8]
 8010424:	46ab      	mov	fp, r5
 8010426:	784a      	ldrb	r2, [r1, #1]
 8010428:	1c4b      	adds	r3, r1, #1
 801042a:	9303      	str	r3, [sp, #12]
 801042c:	b342      	cbz	r2, 8010480 <__hexnan+0x88>
 801042e:	4610      	mov	r0, r2
 8010430:	9105      	str	r1, [sp, #20]
 8010432:	9204      	str	r2, [sp, #16]
 8010434:	f7ff fd94 	bl	800ff60 <__hexdig_fun>
 8010438:	2800      	cmp	r0, #0
 801043a:	d151      	bne.n	80104e0 <__hexnan+0xe8>
 801043c:	9a04      	ldr	r2, [sp, #16]
 801043e:	9905      	ldr	r1, [sp, #20]
 8010440:	2a20      	cmp	r2, #32
 8010442:	d818      	bhi.n	8010476 <__hexnan+0x7e>
 8010444:	9b02      	ldr	r3, [sp, #8]
 8010446:	459b      	cmp	fp, r3
 8010448:	dd13      	ble.n	8010472 <__hexnan+0x7a>
 801044a:	454c      	cmp	r4, r9
 801044c:	d206      	bcs.n	801045c <__hexnan+0x64>
 801044e:	2d07      	cmp	r5, #7
 8010450:	dc04      	bgt.n	801045c <__hexnan+0x64>
 8010452:	462a      	mov	r2, r5
 8010454:	4649      	mov	r1, r9
 8010456:	4620      	mov	r0, r4
 8010458:	f7ff ffa8 	bl	80103ac <L_shift>
 801045c:	4544      	cmp	r4, r8
 801045e:	d952      	bls.n	8010506 <__hexnan+0x10e>
 8010460:	2300      	movs	r3, #0
 8010462:	f1a4 0904 	sub.w	r9, r4, #4
 8010466:	f844 3c04 	str.w	r3, [r4, #-4]
 801046a:	f8cd b008 	str.w	fp, [sp, #8]
 801046e:	464c      	mov	r4, r9
 8010470:	461d      	mov	r5, r3
 8010472:	9903      	ldr	r1, [sp, #12]
 8010474:	e7d7      	b.n	8010426 <__hexnan+0x2e>
 8010476:	2a29      	cmp	r2, #41	@ 0x29
 8010478:	d157      	bne.n	801052a <__hexnan+0x132>
 801047a:	3102      	adds	r1, #2
 801047c:	f8ca 1000 	str.w	r1, [sl]
 8010480:	f1bb 0f00 	cmp.w	fp, #0
 8010484:	d051      	beq.n	801052a <__hexnan+0x132>
 8010486:	454c      	cmp	r4, r9
 8010488:	d206      	bcs.n	8010498 <__hexnan+0xa0>
 801048a:	2d07      	cmp	r5, #7
 801048c:	dc04      	bgt.n	8010498 <__hexnan+0xa0>
 801048e:	462a      	mov	r2, r5
 8010490:	4649      	mov	r1, r9
 8010492:	4620      	mov	r0, r4
 8010494:	f7ff ff8a 	bl	80103ac <L_shift>
 8010498:	4544      	cmp	r4, r8
 801049a:	d936      	bls.n	801050a <__hexnan+0x112>
 801049c:	f1a8 0204 	sub.w	r2, r8, #4
 80104a0:	4623      	mov	r3, r4
 80104a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80104a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80104aa:	429f      	cmp	r7, r3
 80104ac:	d2f9      	bcs.n	80104a2 <__hexnan+0xaa>
 80104ae:	1b3b      	subs	r3, r7, r4
 80104b0:	f023 0303 	bic.w	r3, r3, #3
 80104b4:	3304      	adds	r3, #4
 80104b6:	3401      	adds	r4, #1
 80104b8:	3e03      	subs	r6, #3
 80104ba:	42b4      	cmp	r4, r6
 80104bc:	bf88      	it	hi
 80104be:	2304      	movhi	r3, #4
 80104c0:	4443      	add	r3, r8
 80104c2:	2200      	movs	r2, #0
 80104c4:	f843 2b04 	str.w	r2, [r3], #4
 80104c8:	429f      	cmp	r7, r3
 80104ca:	d2fb      	bcs.n	80104c4 <__hexnan+0xcc>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	b91b      	cbnz	r3, 80104d8 <__hexnan+0xe0>
 80104d0:	4547      	cmp	r7, r8
 80104d2:	d128      	bne.n	8010526 <__hexnan+0x12e>
 80104d4:	2301      	movs	r3, #1
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	2005      	movs	r0, #5
 80104da:	b007      	add	sp, #28
 80104dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e0:	3501      	adds	r5, #1
 80104e2:	2d08      	cmp	r5, #8
 80104e4:	f10b 0b01 	add.w	fp, fp, #1
 80104e8:	dd06      	ble.n	80104f8 <__hexnan+0x100>
 80104ea:	4544      	cmp	r4, r8
 80104ec:	d9c1      	bls.n	8010472 <__hexnan+0x7a>
 80104ee:	2300      	movs	r3, #0
 80104f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80104f4:	2501      	movs	r5, #1
 80104f6:	3c04      	subs	r4, #4
 80104f8:	6822      	ldr	r2, [r4, #0]
 80104fa:	f000 000f 	and.w	r0, r0, #15
 80104fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010502:	6020      	str	r0, [r4, #0]
 8010504:	e7b5      	b.n	8010472 <__hexnan+0x7a>
 8010506:	2508      	movs	r5, #8
 8010508:	e7b3      	b.n	8010472 <__hexnan+0x7a>
 801050a:	9b01      	ldr	r3, [sp, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d0dd      	beq.n	80104cc <__hexnan+0xd4>
 8010510:	f1c3 0320 	rsb	r3, r3, #32
 8010514:	f04f 32ff 	mov.w	r2, #4294967295
 8010518:	40da      	lsrs	r2, r3
 801051a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801051e:	4013      	ands	r3, r2
 8010520:	f846 3c04 	str.w	r3, [r6, #-4]
 8010524:	e7d2      	b.n	80104cc <__hexnan+0xd4>
 8010526:	3f04      	subs	r7, #4
 8010528:	e7d0      	b.n	80104cc <__hexnan+0xd4>
 801052a:	2004      	movs	r0, #4
 801052c:	e7d5      	b.n	80104da <__hexnan+0xe2>

0801052e <__ascii_mbtowc>:
 801052e:	b082      	sub	sp, #8
 8010530:	b901      	cbnz	r1, 8010534 <__ascii_mbtowc+0x6>
 8010532:	a901      	add	r1, sp, #4
 8010534:	b142      	cbz	r2, 8010548 <__ascii_mbtowc+0x1a>
 8010536:	b14b      	cbz	r3, 801054c <__ascii_mbtowc+0x1e>
 8010538:	7813      	ldrb	r3, [r2, #0]
 801053a:	600b      	str	r3, [r1, #0]
 801053c:	7812      	ldrb	r2, [r2, #0]
 801053e:	1e10      	subs	r0, r2, #0
 8010540:	bf18      	it	ne
 8010542:	2001      	movne	r0, #1
 8010544:	b002      	add	sp, #8
 8010546:	4770      	bx	lr
 8010548:	4610      	mov	r0, r2
 801054a:	e7fb      	b.n	8010544 <__ascii_mbtowc+0x16>
 801054c:	f06f 0001 	mvn.w	r0, #1
 8010550:	e7f8      	b.n	8010544 <__ascii_mbtowc+0x16>

08010552 <_realloc_r>:
 8010552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010556:	4680      	mov	r8, r0
 8010558:	4615      	mov	r5, r2
 801055a:	460c      	mov	r4, r1
 801055c:	b921      	cbnz	r1, 8010568 <_realloc_r+0x16>
 801055e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010562:	4611      	mov	r1, r2
 8010564:	f7fd be60 	b.w	800e228 <_malloc_r>
 8010568:	b92a      	cbnz	r2, 8010576 <_realloc_r+0x24>
 801056a:	f7fd fde9 	bl	800e140 <_free_r>
 801056e:	2400      	movs	r4, #0
 8010570:	4620      	mov	r0, r4
 8010572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010576:	f000 f840 	bl	80105fa <_malloc_usable_size_r>
 801057a:	4285      	cmp	r5, r0
 801057c:	4606      	mov	r6, r0
 801057e:	d802      	bhi.n	8010586 <_realloc_r+0x34>
 8010580:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010584:	d8f4      	bhi.n	8010570 <_realloc_r+0x1e>
 8010586:	4629      	mov	r1, r5
 8010588:	4640      	mov	r0, r8
 801058a:	f7fd fe4d 	bl	800e228 <_malloc_r>
 801058e:	4607      	mov	r7, r0
 8010590:	2800      	cmp	r0, #0
 8010592:	d0ec      	beq.n	801056e <_realloc_r+0x1c>
 8010594:	42b5      	cmp	r5, r6
 8010596:	462a      	mov	r2, r5
 8010598:	4621      	mov	r1, r4
 801059a:	bf28      	it	cs
 801059c:	4632      	movcs	r2, r6
 801059e:	f7ff fc45 	bl	800fe2c <memcpy>
 80105a2:	4621      	mov	r1, r4
 80105a4:	4640      	mov	r0, r8
 80105a6:	f7fd fdcb 	bl	800e140 <_free_r>
 80105aa:	463c      	mov	r4, r7
 80105ac:	e7e0      	b.n	8010570 <_realloc_r+0x1e>

080105ae <__ascii_wctomb>:
 80105ae:	4603      	mov	r3, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	b141      	cbz	r1, 80105c6 <__ascii_wctomb+0x18>
 80105b4:	2aff      	cmp	r2, #255	@ 0xff
 80105b6:	d904      	bls.n	80105c2 <__ascii_wctomb+0x14>
 80105b8:	228a      	movs	r2, #138	@ 0x8a
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	f04f 30ff 	mov.w	r0, #4294967295
 80105c0:	4770      	bx	lr
 80105c2:	700a      	strb	r2, [r1, #0]
 80105c4:	2001      	movs	r0, #1
 80105c6:	4770      	bx	lr

080105c8 <fiprintf>:
 80105c8:	b40e      	push	{r1, r2, r3}
 80105ca:	b503      	push	{r0, r1, lr}
 80105cc:	4601      	mov	r1, r0
 80105ce:	ab03      	add	r3, sp, #12
 80105d0:	4805      	ldr	r0, [pc, #20]	@ (80105e8 <fiprintf+0x20>)
 80105d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d6:	6800      	ldr	r0, [r0, #0]
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	f000 f83f 	bl	801065c <_vfiprintf_r>
 80105de:	b002      	add	sp, #8
 80105e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105e4:	b003      	add	sp, #12
 80105e6:	4770      	bx	lr
 80105e8:	2000010c 	.word	0x2000010c

080105ec <abort>:
 80105ec:	b508      	push	{r3, lr}
 80105ee:	2006      	movs	r0, #6
 80105f0:	f000 fa08 	bl	8010a04 <raise>
 80105f4:	2001      	movs	r0, #1
 80105f6:	f7f1 fa65 	bl	8001ac4 <_exit>

080105fa <_malloc_usable_size_r>:
 80105fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105fe:	1f18      	subs	r0, r3, #4
 8010600:	2b00      	cmp	r3, #0
 8010602:	bfbc      	itt	lt
 8010604:	580b      	ldrlt	r3, [r1, r0]
 8010606:	18c0      	addlt	r0, r0, r3
 8010608:	4770      	bx	lr

0801060a <__sfputc_r>:
 801060a:	6893      	ldr	r3, [r2, #8]
 801060c:	3b01      	subs	r3, #1
 801060e:	2b00      	cmp	r3, #0
 8010610:	b410      	push	{r4}
 8010612:	6093      	str	r3, [r2, #8]
 8010614:	da08      	bge.n	8010628 <__sfputc_r+0x1e>
 8010616:	6994      	ldr	r4, [r2, #24]
 8010618:	42a3      	cmp	r3, r4
 801061a:	db01      	blt.n	8010620 <__sfputc_r+0x16>
 801061c:	290a      	cmp	r1, #10
 801061e:	d103      	bne.n	8010628 <__sfputc_r+0x1e>
 8010620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010624:	f000 b932 	b.w	801088c <__swbuf_r>
 8010628:	6813      	ldr	r3, [r2, #0]
 801062a:	1c58      	adds	r0, r3, #1
 801062c:	6010      	str	r0, [r2, #0]
 801062e:	7019      	strb	r1, [r3, #0]
 8010630:	4608      	mov	r0, r1
 8010632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010636:	4770      	bx	lr

08010638 <__sfputs_r>:
 8010638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063a:	4606      	mov	r6, r0
 801063c:	460f      	mov	r7, r1
 801063e:	4614      	mov	r4, r2
 8010640:	18d5      	adds	r5, r2, r3
 8010642:	42ac      	cmp	r4, r5
 8010644:	d101      	bne.n	801064a <__sfputs_r+0x12>
 8010646:	2000      	movs	r0, #0
 8010648:	e007      	b.n	801065a <__sfputs_r+0x22>
 801064a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801064e:	463a      	mov	r2, r7
 8010650:	4630      	mov	r0, r6
 8010652:	f7ff ffda 	bl	801060a <__sfputc_r>
 8010656:	1c43      	adds	r3, r0, #1
 8010658:	d1f3      	bne.n	8010642 <__sfputs_r+0xa>
 801065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801065c <_vfiprintf_r>:
 801065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010660:	460d      	mov	r5, r1
 8010662:	b09d      	sub	sp, #116	@ 0x74
 8010664:	4614      	mov	r4, r2
 8010666:	4698      	mov	r8, r3
 8010668:	4606      	mov	r6, r0
 801066a:	b118      	cbz	r0, 8010674 <_vfiprintf_r+0x18>
 801066c:	6a03      	ldr	r3, [r0, #32]
 801066e:	b90b      	cbnz	r3, 8010674 <_vfiprintf_r+0x18>
 8010670:	f7fc fdfa 	bl	800d268 <__sinit>
 8010674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010676:	07d9      	lsls	r1, r3, #31
 8010678:	d405      	bmi.n	8010686 <_vfiprintf_r+0x2a>
 801067a:	89ab      	ldrh	r3, [r5, #12]
 801067c:	059a      	lsls	r2, r3, #22
 801067e:	d402      	bmi.n	8010686 <_vfiprintf_r+0x2a>
 8010680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010682:	f7fc ff08 	bl	800d496 <__retarget_lock_acquire_recursive>
 8010686:	89ab      	ldrh	r3, [r5, #12]
 8010688:	071b      	lsls	r3, r3, #28
 801068a:	d501      	bpl.n	8010690 <_vfiprintf_r+0x34>
 801068c:	692b      	ldr	r3, [r5, #16]
 801068e:	b99b      	cbnz	r3, 80106b8 <_vfiprintf_r+0x5c>
 8010690:	4629      	mov	r1, r5
 8010692:	4630      	mov	r0, r6
 8010694:	f000 f938 	bl	8010908 <__swsetup_r>
 8010698:	b170      	cbz	r0, 80106b8 <_vfiprintf_r+0x5c>
 801069a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801069c:	07dc      	lsls	r4, r3, #31
 801069e:	d504      	bpl.n	80106aa <_vfiprintf_r+0x4e>
 80106a0:	f04f 30ff 	mov.w	r0, #4294967295
 80106a4:	b01d      	add	sp, #116	@ 0x74
 80106a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106aa:	89ab      	ldrh	r3, [r5, #12]
 80106ac:	0598      	lsls	r0, r3, #22
 80106ae:	d4f7      	bmi.n	80106a0 <_vfiprintf_r+0x44>
 80106b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106b2:	f7fc fef1 	bl	800d498 <__retarget_lock_release_recursive>
 80106b6:	e7f3      	b.n	80106a0 <_vfiprintf_r+0x44>
 80106b8:	2300      	movs	r3, #0
 80106ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80106bc:	2320      	movs	r3, #32
 80106be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80106c6:	2330      	movs	r3, #48	@ 0x30
 80106c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010878 <_vfiprintf_r+0x21c>
 80106cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106d0:	f04f 0901 	mov.w	r9, #1
 80106d4:	4623      	mov	r3, r4
 80106d6:	469a      	mov	sl, r3
 80106d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106dc:	b10a      	cbz	r2, 80106e2 <_vfiprintf_r+0x86>
 80106de:	2a25      	cmp	r2, #37	@ 0x25
 80106e0:	d1f9      	bne.n	80106d6 <_vfiprintf_r+0x7a>
 80106e2:	ebba 0b04 	subs.w	fp, sl, r4
 80106e6:	d00b      	beq.n	8010700 <_vfiprintf_r+0xa4>
 80106e8:	465b      	mov	r3, fp
 80106ea:	4622      	mov	r2, r4
 80106ec:	4629      	mov	r1, r5
 80106ee:	4630      	mov	r0, r6
 80106f0:	f7ff ffa2 	bl	8010638 <__sfputs_r>
 80106f4:	3001      	adds	r0, #1
 80106f6:	f000 80a7 	beq.w	8010848 <_vfiprintf_r+0x1ec>
 80106fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106fc:	445a      	add	r2, fp
 80106fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010700:	f89a 3000 	ldrb.w	r3, [sl]
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 809f 	beq.w	8010848 <_vfiprintf_r+0x1ec>
 801070a:	2300      	movs	r3, #0
 801070c:	f04f 32ff 	mov.w	r2, #4294967295
 8010710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010714:	f10a 0a01 	add.w	sl, sl, #1
 8010718:	9304      	str	r3, [sp, #16]
 801071a:	9307      	str	r3, [sp, #28]
 801071c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010720:	931a      	str	r3, [sp, #104]	@ 0x68
 8010722:	4654      	mov	r4, sl
 8010724:	2205      	movs	r2, #5
 8010726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801072a:	4853      	ldr	r0, [pc, #332]	@ (8010878 <_vfiprintf_r+0x21c>)
 801072c:	f7ef fd58 	bl	80001e0 <memchr>
 8010730:	9a04      	ldr	r2, [sp, #16]
 8010732:	b9d8      	cbnz	r0, 801076c <_vfiprintf_r+0x110>
 8010734:	06d1      	lsls	r1, r2, #27
 8010736:	bf44      	itt	mi
 8010738:	2320      	movmi	r3, #32
 801073a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801073e:	0713      	lsls	r3, r2, #28
 8010740:	bf44      	itt	mi
 8010742:	232b      	movmi	r3, #43	@ 0x2b
 8010744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010748:	f89a 3000 	ldrb.w	r3, [sl]
 801074c:	2b2a      	cmp	r3, #42	@ 0x2a
 801074e:	d015      	beq.n	801077c <_vfiprintf_r+0x120>
 8010750:	9a07      	ldr	r2, [sp, #28]
 8010752:	4654      	mov	r4, sl
 8010754:	2000      	movs	r0, #0
 8010756:	f04f 0c0a 	mov.w	ip, #10
 801075a:	4621      	mov	r1, r4
 801075c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010760:	3b30      	subs	r3, #48	@ 0x30
 8010762:	2b09      	cmp	r3, #9
 8010764:	d94b      	bls.n	80107fe <_vfiprintf_r+0x1a2>
 8010766:	b1b0      	cbz	r0, 8010796 <_vfiprintf_r+0x13a>
 8010768:	9207      	str	r2, [sp, #28]
 801076a:	e014      	b.n	8010796 <_vfiprintf_r+0x13a>
 801076c:	eba0 0308 	sub.w	r3, r0, r8
 8010770:	fa09 f303 	lsl.w	r3, r9, r3
 8010774:	4313      	orrs	r3, r2
 8010776:	9304      	str	r3, [sp, #16]
 8010778:	46a2      	mov	sl, r4
 801077a:	e7d2      	b.n	8010722 <_vfiprintf_r+0xc6>
 801077c:	9b03      	ldr	r3, [sp, #12]
 801077e:	1d19      	adds	r1, r3, #4
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	9103      	str	r1, [sp, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	bfbb      	ittet	lt
 8010788:	425b      	neglt	r3, r3
 801078a:	f042 0202 	orrlt.w	r2, r2, #2
 801078e:	9307      	strge	r3, [sp, #28]
 8010790:	9307      	strlt	r3, [sp, #28]
 8010792:	bfb8      	it	lt
 8010794:	9204      	strlt	r2, [sp, #16]
 8010796:	7823      	ldrb	r3, [r4, #0]
 8010798:	2b2e      	cmp	r3, #46	@ 0x2e
 801079a:	d10a      	bne.n	80107b2 <_vfiprintf_r+0x156>
 801079c:	7863      	ldrb	r3, [r4, #1]
 801079e:	2b2a      	cmp	r3, #42	@ 0x2a
 80107a0:	d132      	bne.n	8010808 <_vfiprintf_r+0x1ac>
 80107a2:	9b03      	ldr	r3, [sp, #12]
 80107a4:	1d1a      	adds	r2, r3, #4
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	9203      	str	r2, [sp, #12]
 80107aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107ae:	3402      	adds	r4, #2
 80107b0:	9305      	str	r3, [sp, #20]
 80107b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010888 <_vfiprintf_r+0x22c>
 80107b6:	7821      	ldrb	r1, [r4, #0]
 80107b8:	2203      	movs	r2, #3
 80107ba:	4650      	mov	r0, sl
 80107bc:	f7ef fd10 	bl	80001e0 <memchr>
 80107c0:	b138      	cbz	r0, 80107d2 <_vfiprintf_r+0x176>
 80107c2:	9b04      	ldr	r3, [sp, #16]
 80107c4:	eba0 000a 	sub.w	r0, r0, sl
 80107c8:	2240      	movs	r2, #64	@ 0x40
 80107ca:	4082      	lsls	r2, r0
 80107cc:	4313      	orrs	r3, r2
 80107ce:	3401      	adds	r4, #1
 80107d0:	9304      	str	r3, [sp, #16]
 80107d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107d6:	4829      	ldr	r0, [pc, #164]	@ (801087c <_vfiprintf_r+0x220>)
 80107d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107dc:	2206      	movs	r2, #6
 80107de:	f7ef fcff 	bl	80001e0 <memchr>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d03f      	beq.n	8010866 <_vfiprintf_r+0x20a>
 80107e6:	4b26      	ldr	r3, [pc, #152]	@ (8010880 <_vfiprintf_r+0x224>)
 80107e8:	bb1b      	cbnz	r3, 8010832 <_vfiprintf_r+0x1d6>
 80107ea:	9b03      	ldr	r3, [sp, #12]
 80107ec:	3307      	adds	r3, #7
 80107ee:	f023 0307 	bic.w	r3, r3, #7
 80107f2:	3308      	adds	r3, #8
 80107f4:	9303      	str	r3, [sp, #12]
 80107f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107f8:	443b      	add	r3, r7
 80107fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80107fc:	e76a      	b.n	80106d4 <_vfiprintf_r+0x78>
 80107fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010802:	460c      	mov	r4, r1
 8010804:	2001      	movs	r0, #1
 8010806:	e7a8      	b.n	801075a <_vfiprintf_r+0xfe>
 8010808:	2300      	movs	r3, #0
 801080a:	3401      	adds	r4, #1
 801080c:	9305      	str	r3, [sp, #20]
 801080e:	4619      	mov	r1, r3
 8010810:	f04f 0c0a 	mov.w	ip, #10
 8010814:	4620      	mov	r0, r4
 8010816:	f810 2b01 	ldrb.w	r2, [r0], #1
 801081a:	3a30      	subs	r2, #48	@ 0x30
 801081c:	2a09      	cmp	r2, #9
 801081e:	d903      	bls.n	8010828 <_vfiprintf_r+0x1cc>
 8010820:	2b00      	cmp	r3, #0
 8010822:	d0c6      	beq.n	80107b2 <_vfiprintf_r+0x156>
 8010824:	9105      	str	r1, [sp, #20]
 8010826:	e7c4      	b.n	80107b2 <_vfiprintf_r+0x156>
 8010828:	fb0c 2101 	mla	r1, ip, r1, r2
 801082c:	4604      	mov	r4, r0
 801082e:	2301      	movs	r3, #1
 8010830:	e7f0      	b.n	8010814 <_vfiprintf_r+0x1b8>
 8010832:	ab03      	add	r3, sp, #12
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	462a      	mov	r2, r5
 8010838:	4b12      	ldr	r3, [pc, #72]	@ (8010884 <_vfiprintf_r+0x228>)
 801083a:	a904      	add	r1, sp, #16
 801083c:	4630      	mov	r0, r6
 801083e:	f7fb febb 	bl	800c5b8 <_printf_float>
 8010842:	4607      	mov	r7, r0
 8010844:	1c78      	adds	r0, r7, #1
 8010846:	d1d6      	bne.n	80107f6 <_vfiprintf_r+0x19a>
 8010848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801084a:	07d9      	lsls	r1, r3, #31
 801084c:	d405      	bmi.n	801085a <_vfiprintf_r+0x1fe>
 801084e:	89ab      	ldrh	r3, [r5, #12]
 8010850:	059a      	lsls	r2, r3, #22
 8010852:	d402      	bmi.n	801085a <_vfiprintf_r+0x1fe>
 8010854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010856:	f7fc fe1f 	bl	800d498 <__retarget_lock_release_recursive>
 801085a:	89ab      	ldrh	r3, [r5, #12]
 801085c:	065b      	lsls	r3, r3, #25
 801085e:	f53f af1f 	bmi.w	80106a0 <_vfiprintf_r+0x44>
 8010862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010864:	e71e      	b.n	80106a4 <_vfiprintf_r+0x48>
 8010866:	ab03      	add	r3, sp, #12
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	462a      	mov	r2, r5
 801086c:	4b05      	ldr	r3, [pc, #20]	@ (8010884 <_vfiprintf_r+0x228>)
 801086e:	a904      	add	r1, sp, #16
 8010870:	4630      	mov	r0, r6
 8010872:	f7fc f939 	bl	800cae8 <_printf_i>
 8010876:	e7e4      	b.n	8010842 <_vfiprintf_r+0x1e6>
 8010878:	08011e01 	.word	0x08011e01
 801087c:	08011e0b 	.word	0x08011e0b
 8010880:	0800c5b9 	.word	0x0800c5b9
 8010884:	08010639 	.word	0x08010639
 8010888:	08011e07 	.word	0x08011e07

0801088c <__swbuf_r>:
 801088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088e:	460e      	mov	r6, r1
 8010890:	4614      	mov	r4, r2
 8010892:	4605      	mov	r5, r0
 8010894:	b118      	cbz	r0, 801089e <__swbuf_r+0x12>
 8010896:	6a03      	ldr	r3, [r0, #32]
 8010898:	b90b      	cbnz	r3, 801089e <__swbuf_r+0x12>
 801089a:	f7fc fce5 	bl	800d268 <__sinit>
 801089e:	69a3      	ldr	r3, [r4, #24]
 80108a0:	60a3      	str	r3, [r4, #8]
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	071a      	lsls	r2, r3, #28
 80108a6:	d501      	bpl.n	80108ac <__swbuf_r+0x20>
 80108a8:	6923      	ldr	r3, [r4, #16]
 80108aa:	b943      	cbnz	r3, 80108be <__swbuf_r+0x32>
 80108ac:	4621      	mov	r1, r4
 80108ae:	4628      	mov	r0, r5
 80108b0:	f000 f82a 	bl	8010908 <__swsetup_r>
 80108b4:	b118      	cbz	r0, 80108be <__swbuf_r+0x32>
 80108b6:	f04f 37ff 	mov.w	r7, #4294967295
 80108ba:	4638      	mov	r0, r7
 80108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	6922      	ldr	r2, [r4, #16]
 80108c2:	1a98      	subs	r0, r3, r2
 80108c4:	6963      	ldr	r3, [r4, #20]
 80108c6:	b2f6      	uxtb	r6, r6
 80108c8:	4283      	cmp	r3, r0
 80108ca:	4637      	mov	r7, r6
 80108cc:	dc05      	bgt.n	80108da <__swbuf_r+0x4e>
 80108ce:	4621      	mov	r1, r4
 80108d0:	4628      	mov	r0, r5
 80108d2:	f7ff fa47 	bl	800fd64 <_fflush_r>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d1ed      	bne.n	80108b6 <__swbuf_r+0x2a>
 80108da:	68a3      	ldr	r3, [r4, #8]
 80108dc:	3b01      	subs	r3, #1
 80108de:	60a3      	str	r3, [r4, #8]
 80108e0:	6823      	ldr	r3, [r4, #0]
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	6022      	str	r2, [r4, #0]
 80108e6:	701e      	strb	r6, [r3, #0]
 80108e8:	6962      	ldr	r2, [r4, #20]
 80108ea:	1c43      	adds	r3, r0, #1
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d004      	beq.n	80108fa <__swbuf_r+0x6e>
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	07db      	lsls	r3, r3, #31
 80108f4:	d5e1      	bpl.n	80108ba <__swbuf_r+0x2e>
 80108f6:	2e0a      	cmp	r6, #10
 80108f8:	d1df      	bne.n	80108ba <__swbuf_r+0x2e>
 80108fa:	4621      	mov	r1, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	f7ff fa31 	bl	800fd64 <_fflush_r>
 8010902:	2800      	cmp	r0, #0
 8010904:	d0d9      	beq.n	80108ba <__swbuf_r+0x2e>
 8010906:	e7d6      	b.n	80108b6 <__swbuf_r+0x2a>

08010908 <__swsetup_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4b29      	ldr	r3, [pc, #164]	@ (80109b0 <__swsetup_r+0xa8>)
 801090c:	4605      	mov	r5, r0
 801090e:	6818      	ldr	r0, [r3, #0]
 8010910:	460c      	mov	r4, r1
 8010912:	b118      	cbz	r0, 801091c <__swsetup_r+0x14>
 8010914:	6a03      	ldr	r3, [r0, #32]
 8010916:	b90b      	cbnz	r3, 801091c <__swsetup_r+0x14>
 8010918:	f7fc fca6 	bl	800d268 <__sinit>
 801091c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010920:	0719      	lsls	r1, r3, #28
 8010922:	d422      	bmi.n	801096a <__swsetup_r+0x62>
 8010924:	06da      	lsls	r2, r3, #27
 8010926:	d407      	bmi.n	8010938 <__swsetup_r+0x30>
 8010928:	2209      	movs	r2, #9
 801092a:	602a      	str	r2, [r5, #0]
 801092c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	f04f 30ff 	mov.w	r0, #4294967295
 8010936:	e033      	b.n	80109a0 <__swsetup_r+0x98>
 8010938:	0758      	lsls	r0, r3, #29
 801093a:	d512      	bpl.n	8010962 <__swsetup_r+0x5a>
 801093c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801093e:	b141      	cbz	r1, 8010952 <__swsetup_r+0x4a>
 8010940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010944:	4299      	cmp	r1, r3
 8010946:	d002      	beq.n	801094e <__swsetup_r+0x46>
 8010948:	4628      	mov	r0, r5
 801094a:	f7fd fbf9 	bl	800e140 <_free_r>
 801094e:	2300      	movs	r3, #0
 8010950:	6363      	str	r3, [r4, #52]	@ 0x34
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010958:	81a3      	strh	r3, [r4, #12]
 801095a:	2300      	movs	r3, #0
 801095c:	6063      	str	r3, [r4, #4]
 801095e:	6923      	ldr	r3, [r4, #16]
 8010960:	6023      	str	r3, [r4, #0]
 8010962:	89a3      	ldrh	r3, [r4, #12]
 8010964:	f043 0308 	orr.w	r3, r3, #8
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	b94b      	cbnz	r3, 8010982 <__swsetup_r+0x7a>
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010978:	d003      	beq.n	8010982 <__swsetup_r+0x7a>
 801097a:	4621      	mov	r1, r4
 801097c:	4628      	mov	r0, r5
 801097e:	f000 f883 	bl	8010a88 <__smakebuf_r>
 8010982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010986:	f013 0201 	ands.w	r2, r3, #1
 801098a:	d00a      	beq.n	80109a2 <__swsetup_r+0x9a>
 801098c:	2200      	movs	r2, #0
 801098e:	60a2      	str	r2, [r4, #8]
 8010990:	6962      	ldr	r2, [r4, #20]
 8010992:	4252      	negs	r2, r2
 8010994:	61a2      	str	r2, [r4, #24]
 8010996:	6922      	ldr	r2, [r4, #16]
 8010998:	b942      	cbnz	r2, 80109ac <__swsetup_r+0xa4>
 801099a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801099e:	d1c5      	bne.n	801092c <__swsetup_r+0x24>
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	0799      	lsls	r1, r3, #30
 80109a4:	bf58      	it	pl
 80109a6:	6962      	ldrpl	r2, [r4, #20]
 80109a8:	60a2      	str	r2, [r4, #8]
 80109aa:	e7f4      	b.n	8010996 <__swsetup_r+0x8e>
 80109ac:	2000      	movs	r0, #0
 80109ae:	e7f7      	b.n	80109a0 <__swsetup_r+0x98>
 80109b0:	2000010c 	.word	0x2000010c

080109b4 <_raise_r>:
 80109b4:	291f      	cmp	r1, #31
 80109b6:	b538      	push	{r3, r4, r5, lr}
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	d904      	bls.n	80109c8 <_raise_r+0x14>
 80109be:	2316      	movs	r3, #22
 80109c0:	6003      	str	r3, [r0, #0]
 80109c2:	f04f 30ff 	mov.w	r0, #4294967295
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
 80109c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80109ca:	b112      	cbz	r2, 80109d2 <_raise_r+0x1e>
 80109cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109d0:	b94b      	cbnz	r3, 80109e6 <_raise_r+0x32>
 80109d2:	4628      	mov	r0, r5
 80109d4:	f000 f830 	bl	8010a38 <_getpid_r>
 80109d8:	4622      	mov	r2, r4
 80109da:	4601      	mov	r1, r0
 80109dc:	4628      	mov	r0, r5
 80109de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109e2:	f000 b817 	b.w	8010a14 <_kill_r>
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d00a      	beq.n	8010a00 <_raise_r+0x4c>
 80109ea:	1c59      	adds	r1, r3, #1
 80109ec:	d103      	bne.n	80109f6 <_raise_r+0x42>
 80109ee:	2316      	movs	r3, #22
 80109f0:	6003      	str	r3, [r0, #0]
 80109f2:	2001      	movs	r0, #1
 80109f4:	e7e7      	b.n	80109c6 <_raise_r+0x12>
 80109f6:	2100      	movs	r1, #0
 80109f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109fc:	4620      	mov	r0, r4
 80109fe:	4798      	blx	r3
 8010a00:	2000      	movs	r0, #0
 8010a02:	e7e0      	b.n	80109c6 <_raise_r+0x12>

08010a04 <raise>:
 8010a04:	4b02      	ldr	r3, [pc, #8]	@ (8010a10 <raise+0xc>)
 8010a06:	4601      	mov	r1, r0
 8010a08:	6818      	ldr	r0, [r3, #0]
 8010a0a:	f7ff bfd3 	b.w	80109b4 <_raise_r>
 8010a0e:	bf00      	nop
 8010a10:	2000010c 	.word	0x2000010c

08010a14 <_kill_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d07      	ldr	r5, [pc, #28]	@ (8010a34 <_kill_r+0x20>)
 8010a18:	2300      	movs	r3, #0
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	4611      	mov	r1, r2
 8010a20:	602b      	str	r3, [r5, #0]
 8010a22:	f7f1 f83f 	bl	8001aa4 <_kill>
 8010a26:	1c43      	adds	r3, r0, #1
 8010a28:	d102      	bne.n	8010a30 <_kill_r+0x1c>
 8010a2a:	682b      	ldr	r3, [r5, #0]
 8010a2c:	b103      	cbz	r3, 8010a30 <_kill_r+0x1c>
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	bd38      	pop	{r3, r4, r5, pc}
 8010a32:	bf00      	nop
 8010a34:	20002444 	.word	0x20002444

08010a38 <_getpid_r>:
 8010a38:	f7f1 b82c 	b.w	8001a94 <_getpid>

08010a3c <__swhatbuf_r>:
 8010a3c:	b570      	push	{r4, r5, r6, lr}
 8010a3e:	460c      	mov	r4, r1
 8010a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a44:	2900      	cmp	r1, #0
 8010a46:	b096      	sub	sp, #88	@ 0x58
 8010a48:	4615      	mov	r5, r2
 8010a4a:	461e      	mov	r6, r3
 8010a4c:	da0d      	bge.n	8010a6a <__swhatbuf_r+0x2e>
 8010a4e:	89a3      	ldrh	r3, [r4, #12]
 8010a50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010a54:	f04f 0100 	mov.w	r1, #0
 8010a58:	bf14      	ite	ne
 8010a5a:	2340      	movne	r3, #64	@ 0x40
 8010a5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010a60:	2000      	movs	r0, #0
 8010a62:	6031      	str	r1, [r6, #0]
 8010a64:	602b      	str	r3, [r5, #0]
 8010a66:	b016      	add	sp, #88	@ 0x58
 8010a68:	bd70      	pop	{r4, r5, r6, pc}
 8010a6a:	466a      	mov	r2, sp
 8010a6c:	f000 f848 	bl	8010b00 <_fstat_r>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	dbec      	blt.n	8010a4e <__swhatbuf_r+0x12>
 8010a74:	9901      	ldr	r1, [sp, #4]
 8010a76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a7e:	4259      	negs	r1, r3
 8010a80:	4159      	adcs	r1, r3
 8010a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a86:	e7eb      	b.n	8010a60 <__swhatbuf_r+0x24>

08010a88 <__smakebuf_r>:
 8010a88:	898b      	ldrh	r3, [r1, #12]
 8010a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a8c:	079d      	lsls	r5, r3, #30
 8010a8e:	4606      	mov	r6, r0
 8010a90:	460c      	mov	r4, r1
 8010a92:	d507      	bpl.n	8010aa4 <__smakebuf_r+0x1c>
 8010a94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	6123      	str	r3, [r4, #16]
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	6163      	str	r3, [r4, #20]
 8010aa0:	b003      	add	sp, #12
 8010aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa4:	ab01      	add	r3, sp, #4
 8010aa6:	466a      	mov	r2, sp
 8010aa8:	f7ff ffc8 	bl	8010a3c <__swhatbuf_r>
 8010aac:	9f00      	ldr	r7, [sp, #0]
 8010aae:	4605      	mov	r5, r0
 8010ab0:	4639      	mov	r1, r7
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7fd fbb8 	bl	800e228 <_malloc_r>
 8010ab8:	b948      	cbnz	r0, 8010ace <__smakebuf_r+0x46>
 8010aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010abe:	059a      	lsls	r2, r3, #22
 8010ac0:	d4ee      	bmi.n	8010aa0 <__smakebuf_r+0x18>
 8010ac2:	f023 0303 	bic.w	r3, r3, #3
 8010ac6:	f043 0302 	orr.w	r3, r3, #2
 8010aca:	81a3      	strh	r3, [r4, #12]
 8010acc:	e7e2      	b.n	8010a94 <__smakebuf_r+0xc>
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	6020      	str	r0, [r4, #0]
 8010ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ad6:	81a3      	strh	r3, [r4, #12]
 8010ad8:	9b01      	ldr	r3, [sp, #4]
 8010ada:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ade:	b15b      	cbz	r3, 8010af8 <__smakebuf_r+0x70>
 8010ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	f000 f81d 	bl	8010b24 <_isatty_r>
 8010aea:	b128      	cbz	r0, 8010af8 <__smakebuf_r+0x70>
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	f023 0303 	bic.w	r3, r3, #3
 8010af2:	f043 0301 	orr.w	r3, r3, #1
 8010af6:	81a3      	strh	r3, [r4, #12]
 8010af8:	89a3      	ldrh	r3, [r4, #12]
 8010afa:	431d      	orrs	r5, r3
 8010afc:	81a5      	strh	r5, [r4, #12]
 8010afe:	e7cf      	b.n	8010aa0 <__smakebuf_r+0x18>

08010b00 <_fstat_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4d07      	ldr	r5, [pc, #28]	@ (8010b20 <_fstat_r+0x20>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4604      	mov	r4, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	602b      	str	r3, [r5, #0]
 8010b0e:	f7f1 f829 	bl	8001b64 <_fstat>
 8010b12:	1c43      	adds	r3, r0, #1
 8010b14:	d102      	bne.n	8010b1c <_fstat_r+0x1c>
 8010b16:	682b      	ldr	r3, [r5, #0]
 8010b18:	b103      	cbz	r3, 8010b1c <_fstat_r+0x1c>
 8010b1a:	6023      	str	r3, [r4, #0]
 8010b1c:	bd38      	pop	{r3, r4, r5, pc}
 8010b1e:	bf00      	nop
 8010b20:	20002444 	.word	0x20002444

08010b24 <_isatty_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4d06      	ldr	r5, [pc, #24]	@ (8010b40 <_isatty_r+0x1c>)
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	4608      	mov	r0, r1
 8010b2e:	602b      	str	r3, [r5, #0]
 8010b30:	f7f1 f828 	bl	8001b84 <_isatty>
 8010b34:	1c43      	adds	r3, r0, #1
 8010b36:	d102      	bne.n	8010b3e <_isatty_r+0x1a>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	b103      	cbz	r3, 8010b3e <_isatty_r+0x1a>
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	20002444 	.word	0x20002444

08010b44 <pow>:
 8010b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b46:	ed2d 8b02 	vpush	{d8}
 8010b4a:	eeb0 8a40 	vmov.f32	s16, s0
 8010b4e:	eef0 8a60 	vmov.f32	s17, s1
 8010b52:	ec55 4b11 	vmov	r4, r5, d1
 8010b56:	f000 f873 	bl	8010c40 <__ieee754_pow>
 8010b5a:	4622      	mov	r2, r4
 8010b5c:	462b      	mov	r3, r5
 8010b5e:	4620      	mov	r0, r4
 8010b60:	4629      	mov	r1, r5
 8010b62:	ec57 6b10 	vmov	r6, r7, d0
 8010b66:	f7ef ffe9 	bl	8000b3c <__aeabi_dcmpun>
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d13b      	bne.n	8010be6 <pow+0xa2>
 8010b6e:	ec51 0b18 	vmov	r0, r1, d8
 8010b72:	2200      	movs	r2, #0
 8010b74:	2300      	movs	r3, #0
 8010b76:	f7ef ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b7a:	b1b8      	cbz	r0, 8010bac <pow+0x68>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	2300      	movs	r3, #0
 8010b80:	4620      	mov	r0, r4
 8010b82:	4629      	mov	r1, r5
 8010b84:	f7ef ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d146      	bne.n	8010c1a <pow+0xd6>
 8010b8c:	ec45 4b10 	vmov	d0, r4, r5
 8010b90:	f000 f848 	bl	8010c24 <finite>
 8010b94:	b338      	cbz	r0, 8010be6 <pow+0xa2>
 8010b96:	2200      	movs	r2, #0
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	f7ef ffa5 	bl	8000aec <__aeabi_dcmplt>
 8010ba2:	b300      	cbz	r0, 8010be6 <pow+0xa2>
 8010ba4:	f7fc fc4c 	bl	800d440 <__errno>
 8010ba8:	2322      	movs	r3, #34	@ 0x22
 8010baa:	e01b      	b.n	8010be4 <pow+0xa0>
 8010bac:	ec47 6b10 	vmov	d0, r6, r7
 8010bb0:	f000 f838 	bl	8010c24 <finite>
 8010bb4:	b9e0      	cbnz	r0, 8010bf0 <pow+0xac>
 8010bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8010bba:	eef0 0a68 	vmov.f32	s1, s17
 8010bbe:	f000 f831 	bl	8010c24 <finite>
 8010bc2:	b1a8      	cbz	r0, 8010bf0 <pow+0xac>
 8010bc4:	ec45 4b10 	vmov	d0, r4, r5
 8010bc8:	f000 f82c 	bl	8010c24 <finite>
 8010bcc:	b180      	cbz	r0, 8010bf0 <pow+0xac>
 8010bce:	4632      	mov	r2, r6
 8010bd0:	463b      	mov	r3, r7
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	f7ef ffb1 	bl	8000b3c <__aeabi_dcmpun>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d0e2      	beq.n	8010ba4 <pow+0x60>
 8010bde:	f7fc fc2f 	bl	800d440 <__errno>
 8010be2:	2321      	movs	r3, #33	@ 0x21
 8010be4:	6003      	str	r3, [r0, #0]
 8010be6:	ecbd 8b02 	vpop	{d8}
 8010bea:	ec47 6b10 	vmov	d0, r6, r7
 8010bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	f7ef ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d0f2      	beq.n	8010be6 <pow+0xa2>
 8010c00:	eeb0 0a48 	vmov.f32	s0, s16
 8010c04:	eef0 0a68 	vmov.f32	s1, s17
 8010c08:	f000 f80c 	bl	8010c24 <finite>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d0ea      	beq.n	8010be6 <pow+0xa2>
 8010c10:	ec45 4b10 	vmov	d0, r4, r5
 8010c14:	f000 f806 	bl	8010c24 <finite>
 8010c18:	e7c3      	b.n	8010ba2 <pow+0x5e>
 8010c1a:	4f01      	ldr	r7, [pc, #4]	@ (8010c20 <pow+0xdc>)
 8010c1c:	2600      	movs	r6, #0
 8010c1e:	e7e2      	b.n	8010be6 <pow+0xa2>
 8010c20:	3ff00000 	.word	0x3ff00000

08010c24 <finite>:
 8010c24:	b082      	sub	sp, #8
 8010c26:	ed8d 0b00 	vstr	d0, [sp]
 8010c2a:	9801      	ldr	r0, [sp, #4]
 8010c2c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010c30:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010c34:	0fc0      	lsrs	r0, r0, #31
 8010c36:	b002      	add	sp, #8
 8010c38:	4770      	bx	lr
 8010c3a:	0000      	movs	r0, r0
 8010c3c:	0000      	movs	r0, r0
	...

08010c40 <__ieee754_pow>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	b091      	sub	sp, #68	@ 0x44
 8010c46:	ed8d 1b00 	vstr	d1, [sp]
 8010c4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010c4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010c52:	ea5a 0001 	orrs.w	r0, sl, r1
 8010c56:	ec57 6b10 	vmov	r6, r7, d0
 8010c5a:	d113      	bne.n	8010c84 <__ieee754_pow+0x44>
 8010c5c:	19b3      	adds	r3, r6, r6
 8010c5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010c62:	4152      	adcs	r2, r2
 8010c64:	4298      	cmp	r0, r3
 8010c66:	4b98      	ldr	r3, [pc, #608]	@ (8010ec8 <__ieee754_pow+0x288>)
 8010c68:	4193      	sbcs	r3, r2
 8010c6a:	f080 84ea 	bcs.w	8011642 <__ieee754_pow+0xa02>
 8010c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c72:	4630      	mov	r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	f7ef fb11 	bl	800029c <__adddf3>
 8010c7a:	ec41 0b10 	vmov	d0, r0, r1
 8010c7e:	b011      	add	sp, #68	@ 0x44
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	4a91      	ldr	r2, [pc, #580]	@ (8010ecc <__ieee754_pow+0x28c>)
 8010c86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010c8a:	4590      	cmp	r8, r2
 8010c8c:	463d      	mov	r5, r7
 8010c8e:	4633      	mov	r3, r6
 8010c90:	d806      	bhi.n	8010ca0 <__ieee754_pow+0x60>
 8010c92:	d101      	bne.n	8010c98 <__ieee754_pow+0x58>
 8010c94:	2e00      	cmp	r6, #0
 8010c96:	d1ea      	bne.n	8010c6e <__ieee754_pow+0x2e>
 8010c98:	4592      	cmp	sl, r2
 8010c9a:	d801      	bhi.n	8010ca0 <__ieee754_pow+0x60>
 8010c9c:	d10e      	bne.n	8010cbc <__ieee754_pow+0x7c>
 8010c9e:	b169      	cbz	r1, 8010cbc <__ieee754_pow+0x7c>
 8010ca0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010ca4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010ca8:	431d      	orrs	r5, r3
 8010caa:	d1e0      	bne.n	8010c6e <__ieee754_pow+0x2e>
 8010cac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cb0:	18db      	adds	r3, r3, r3
 8010cb2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010cb6:	4152      	adcs	r2, r2
 8010cb8:	429d      	cmp	r5, r3
 8010cba:	e7d4      	b.n	8010c66 <__ieee754_pow+0x26>
 8010cbc:	2d00      	cmp	r5, #0
 8010cbe:	46c3      	mov	fp, r8
 8010cc0:	da3a      	bge.n	8010d38 <__ieee754_pow+0xf8>
 8010cc2:	4a83      	ldr	r2, [pc, #524]	@ (8010ed0 <__ieee754_pow+0x290>)
 8010cc4:	4592      	cmp	sl, r2
 8010cc6:	d84d      	bhi.n	8010d64 <__ieee754_pow+0x124>
 8010cc8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010ccc:	4592      	cmp	sl, r2
 8010cce:	f240 84c7 	bls.w	8011660 <__ieee754_pow+0xa20>
 8010cd2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010cd6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010cda:	2a14      	cmp	r2, #20
 8010cdc:	dd0f      	ble.n	8010cfe <__ieee754_pow+0xbe>
 8010cde:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010ce2:	fa21 f402 	lsr.w	r4, r1, r2
 8010ce6:	fa04 f202 	lsl.w	r2, r4, r2
 8010cea:	428a      	cmp	r2, r1
 8010cec:	f040 84b8 	bne.w	8011660 <__ieee754_pow+0xa20>
 8010cf0:	f004 0401 	and.w	r4, r4, #1
 8010cf4:	f1c4 0402 	rsb	r4, r4, #2
 8010cf8:	2900      	cmp	r1, #0
 8010cfa:	d158      	bne.n	8010dae <__ieee754_pow+0x16e>
 8010cfc:	e00e      	b.n	8010d1c <__ieee754_pow+0xdc>
 8010cfe:	2900      	cmp	r1, #0
 8010d00:	d154      	bne.n	8010dac <__ieee754_pow+0x16c>
 8010d02:	f1c2 0214 	rsb	r2, r2, #20
 8010d06:	fa4a f402 	asr.w	r4, sl, r2
 8010d0a:	fa04 f202 	lsl.w	r2, r4, r2
 8010d0e:	4552      	cmp	r2, sl
 8010d10:	f040 84a3 	bne.w	801165a <__ieee754_pow+0xa1a>
 8010d14:	f004 0401 	and.w	r4, r4, #1
 8010d18:	f1c4 0402 	rsb	r4, r4, #2
 8010d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8010ed4 <__ieee754_pow+0x294>)
 8010d1e:	4592      	cmp	sl, r2
 8010d20:	d12e      	bne.n	8010d80 <__ieee754_pow+0x140>
 8010d22:	f1b9 0f00 	cmp.w	r9, #0
 8010d26:	f280 8494 	bge.w	8011652 <__ieee754_pow+0xa12>
 8010d2a:	496a      	ldr	r1, [pc, #424]	@ (8010ed4 <__ieee754_pow+0x294>)
 8010d2c:	4632      	mov	r2, r6
 8010d2e:	463b      	mov	r3, r7
 8010d30:	2000      	movs	r0, #0
 8010d32:	f7ef fd93 	bl	800085c <__aeabi_ddiv>
 8010d36:	e7a0      	b.n	8010c7a <__ieee754_pow+0x3a>
 8010d38:	2400      	movs	r4, #0
 8010d3a:	bbc1      	cbnz	r1, 8010dae <__ieee754_pow+0x16e>
 8010d3c:	4a63      	ldr	r2, [pc, #396]	@ (8010ecc <__ieee754_pow+0x28c>)
 8010d3e:	4592      	cmp	sl, r2
 8010d40:	d1ec      	bne.n	8010d1c <__ieee754_pow+0xdc>
 8010d42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010d46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010d4a:	431a      	orrs	r2, r3
 8010d4c:	f000 8479 	beq.w	8011642 <__ieee754_pow+0xa02>
 8010d50:	4b61      	ldr	r3, [pc, #388]	@ (8010ed8 <__ieee754_pow+0x298>)
 8010d52:	4598      	cmp	r8, r3
 8010d54:	d908      	bls.n	8010d68 <__ieee754_pow+0x128>
 8010d56:	f1b9 0f00 	cmp.w	r9, #0
 8010d5a:	f2c0 8476 	blt.w	801164a <__ieee754_pow+0xa0a>
 8010d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d62:	e78a      	b.n	8010c7a <__ieee754_pow+0x3a>
 8010d64:	2402      	movs	r4, #2
 8010d66:	e7e8      	b.n	8010d3a <__ieee754_pow+0xfa>
 8010d68:	f1b9 0f00 	cmp.w	r9, #0
 8010d6c:	f04f 0000 	mov.w	r0, #0
 8010d70:	f04f 0100 	mov.w	r1, #0
 8010d74:	da81      	bge.n	8010c7a <__ieee754_pow+0x3a>
 8010d76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d7e:	e77c      	b.n	8010c7a <__ieee754_pow+0x3a>
 8010d80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010d84:	d106      	bne.n	8010d94 <__ieee754_pow+0x154>
 8010d86:	4632      	mov	r2, r6
 8010d88:	463b      	mov	r3, r7
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	f7ef fc3b 	bl	8000608 <__aeabi_dmul>
 8010d92:	e772      	b.n	8010c7a <__ieee754_pow+0x3a>
 8010d94:	4a51      	ldr	r2, [pc, #324]	@ (8010edc <__ieee754_pow+0x29c>)
 8010d96:	4591      	cmp	r9, r2
 8010d98:	d109      	bne.n	8010dae <__ieee754_pow+0x16e>
 8010d9a:	2d00      	cmp	r5, #0
 8010d9c:	db07      	blt.n	8010dae <__ieee754_pow+0x16e>
 8010d9e:	ec47 6b10 	vmov	d0, r6, r7
 8010da2:	b011      	add	sp, #68	@ 0x44
 8010da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da8:	f000 bd52 	b.w	8011850 <__ieee754_sqrt>
 8010dac:	2400      	movs	r4, #0
 8010dae:	ec47 6b10 	vmov	d0, r6, r7
 8010db2:	9302      	str	r3, [sp, #8]
 8010db4:	f000 fc88 	bl	80116c8 <fabs>
 8010db8:	9b02      	ldr	r3, [sp, #8]
 8010dba:	ec51 0b10 	vmov	r0, r1, d0
 8010dbe:	bb53      	cbnz	r3, 8010e16 <__ieee754_pow+0x1d6>
 8010dc0:	4b44      	ldr	r3, [pc, #272]	@ (8010ed4 <__ieee754_pow+0x294>)
 8010dc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d002      	beq.n	8010dd0 <__ieee754_pow+0x190>
 8010dca:	f1b8 0f00 	cmp.w	r8, #0
 8010dce:	d122      	bne.n	8010e16 <__ieee754_pow+0x1d6>
 8010dd0:	f1b9 0f00 	cmp.w	r9, #0
 8010dd4:	da05      	bge.n	8010de2 <__ieee754_pow+0x1a2>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	2000      	movs	r0, #0
 8010ddc:	493d      	ldr	r1, [pc, #244]	@ (8010ed4 <__ieee754_pow+0x294>)
 8010dde:	f7ef fd3d 	bl	800085c <__aeabi_ddiv>
 8010de2:	2d00      	cmp	r5, #0
 8010de4:	f6bf af49 	bge.w	8010c7a <__ieee754_pow+0x3a>
 8010de8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010dec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010df0:	ea58 0804 	orrs.w	r8, r8, r4
 8010df4:	d108      	bne.n	8010e08 <__ieee754_pow+0x1c8>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	4610      	mov	r0, r2
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	f7ef fa4b 	bl	8000298 <__aeabi_dsub>
 8010e02:	4602      	mov	r2, r0
 8010e04:	460b      	mov	r3, r1
 8010e06:	e794      	b.n	8010d32 <__ieee754_pow+0xf2>
 8010e08:	2c01      	cmp	r4, #1
 8010e0a:	f47f af36 	bne.w	8010c7a <__ieee754_pow+0x3a>
 8010e0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e12:	4619      	mov	r1, r3
 8010e14:	e731      	b.n	8010c7a <__ieee754_pow+0x3a>
 8010e16:	0feb      	lsrs	r3, r5, #31
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	ea53 0204 	orrs.w	r2, r3, r4
 8010e1e:	d102      	bne.n	8010e26 <__ieee754_pow+0x1e6>
 8010e20:	4632      	mov	r2, r6
 8010e22:	463b      	mov	r3, r7
 8010e24:	e7e9      	b.n	8010dfa <__ieee754_pow+0x1ba>
 8010e26:	3c01      	subs	r4, #1
 8010e28:	431c      	orrs	r4, r3
 8010e2a:	d016      	beq.n	8010e5a <__ieee754_pow+0x21a>
 8010e2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010eb8 <__ieee754_pow+0x278>
 8010e30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e38:	f240 8112 	bls.w	8011060 <__ieee754_pow+0x420>
 8010e3c:	4b28      	ldr	r3, [pc, #160]	@ (8010ee0 <__ieee754_pow+0x2a0>)
 8010e3e:	459a      	cmp	sl, r3
 8010e40:	4b25      	ldr	r3, [pc, #148]	@ (8010ed8 <__ieee754_pow+0x298>)
 8010e42:	d916      	bls.n	8010e72 <__ieee754_pow+0x232>
 8010e44:	4598      	cmp	r8, r3
 8010e46:	d80b      	bhi.n	8010e60 <__ieee754_pow+0x220>
 8010e48:	f1b9 0f00 	cmp.w	r9, #0
 8010e4c:	da0b      	bge.n	8010e66 <__ieee754_pow+0x226>
 8010e4e:	2000      	movs	r0, #0
 8010e50:	b011      	add	sp, #68	@ 0x44
 8010e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e56:	f000 bcf3 	b.w	8011840 <__math_oflow>
 8010e5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010ec0 <__ieee754_pow+0x280>
 8010e5e:	e7e7      	b.n	8010e30 <__ieee754_pow+0x1f0>
 8010e60:	f1b9 0f00 	cmp.w	r9, #0
 8010e64:	dcf3      	bgt.n	8010e4e <__ieee754_pow+0x20e>
 8010e66:	2000      	movs	r0, #0
 8010e68:	b011      	add	sp, #68	@ 0x44
 8010e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6e:	f000 bcdf 	b.w	8011830 <__math_uflow>
 8010e72:	4598      	cmp	r8, r3
 8010e74:	d20c      	bcs.n	8010e90 <__ieee754_pow+0x250>
 8010e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f7ef fe35 	bl	8000aec <__aeabi_dcmplt>
 8010e82:	3800      	subs	r0, #0
 8010e84:	bf18      	it	ne
 8010e86:	2001      	movne	r0, #1
 8010e88:	f1b9 0f00 	cmp.w	r9, #0
 8010e8c:	daec      	bge.n	8010e68 <__ieee754_pow+0x228>
 8010e8e:	e7df      	b.n	8010e50 <__ieee754_pow+0x210>
 8010e90:	4b10      	ldr	r3, [pc, #64]	@ (8010ed4 <__ieee754_pow+0x294>)
 8010e92:	4598      	cmp	r8, r3
 8010e94:	f04f 0200 	mov.w	r2, #0
 8010e98:	d924      	bls.n	8010ee4 <__ieee754_pow+0x2a4>
 8010e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f7ef fe24 	bl	8000aec <__aeabi_dcmplt>
 8010ea4:	3800      	subs	r0, #0
 8010ea6:	bf18      	it	ne
 8010ea8:	2001      	movne	r0, #1
 8010eaa:	f1b9 0f00 	cmp.w	r9, #0
 8010eae:	dccf      	bgt.n	8010e50 <__ieee754_pow+0x210>
 8010eb0:	e7da      	b.n	8010e68 <__ieee754_pow+0x228>
 8010eb2:	bf00      	nop
 8010eb4:	f3af 8000 	nop.w
 8010eb8:	00000000 	.word	0x00000000
 8010ebc:	3ff00000 	.word	0x3ff00000
 8010ec0:	00000000 	.word	0x00000000
 8010ec4:	bff00000 	.word	0xbff00000
 8010ec8:	fff00000 	.word	0xfff00000
 8010ecc:	7ff00000 	.word	0x7ff00000
 8010ed0:	433fffff 	.word	0x433fffff
 8010ed4:	3ff00000 	.word	0x3ff00000
 8010ed8:	3fefffff 	.word	0x3fefffff
 8010edc:	3fe00000 	.word	0x3fe00000
 8010ee0:	43f00000 	.word	0x43f00000
 8010ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8011050 <__ieee754_pow+0x410>)
 8010ee6:	f7ef f9d7 	bl	8000298 <__aeabi_dsub>
 8010eea:	a351      	add	r3, pc, #324	@ (adr r3, 8011030 <__ieee754_pow+0x3f0>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	460d      	mov	r5, r1
 8010ef4:	f7ef fb88 	bl	8000608 <__aeabi_dmul>
 8010ef8:	a34f      	add	r3, pc, #316	@ (adr r3, 8011038 <__ieee754_pow+0x3f8>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	4606      	mov	r6, r0
 8010f00:	460f      	mov	r7, r1
 8010f02:	4620      	mov	r0, r4
 8010f04:	4629      	mov	r1, r5
 8010f06:	f7ef fb7f 	bl	8000608 <__aeabi_dmul>
 8010f0a:	4b52      	ldr	r3, [pc, #328]	@ (8011054 <__ieee754_pow+0x414>)
 8010f0c:	4682      	mov	sl, r0
 8010f0e:	468b      	mov	fp, r1
 8010f10:	2200      	movs	r2, #0
 8010f12:	4620      	mov	r0, r4
 8010f14:	4629      	mov	r1, r5
 8010f16:	f7ef fb77 	bl	8000608 <__aeabi_dmul>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	a148      	add	r1, pc, #288	@ (adr r1, 8011040 <__ieee754_pow+0x400>)
 8010f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f24:	f7ef f9b8 	bl	8000298 <__aeabi_dsub>
 8010f28:	4622      	mov	r2, r4
 8010f2a:	462b      	mov	r3, r5
 8010f2c:	f7ef fb6c 	bl	8000608 <__aeabi_dmul>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	2000      	movs	r0, #0
 8010f36:	4948      	ldr	r1, [pc, #288]	@ (8011058 <__ieee754_pow+0x418>)
 8010f38:	f7ef f9ae 	bl	8000298 <__aeabi_dsub>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	4680      	mov	r8, r0
 8010f40:	4689      	mov	r9, r1
 8010f42:	462b      	mov	r3, r5
 8010f44:	4620      	mov	r0, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7ef fb5e 	bl	8000608 <__aeabi_dmul>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4640      	mov	r0, r8
 8010f52:	4649      	mov	r1, r9
 8010f54:	f7ef fb58 	bl	8000608 <__aeabi_dmul>
 8010f58:	a33b      	add	r3, pc, #236	@ (adr r3, 8011048 <__ieee754_pow+0x408>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef fb53 	bl	8000608 <__aeabi_dmul>
 8010f62:	4602      	mov	r2, r0
 8010f64:	460b      	mov	r3, r1
 8010f66:	4650      	mov	r0, sl
 8010f68:	4659      	mov	r1, fp
 8010f6a:	f7ef f995 	bl	8000298 <__aeabi_dsub>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4680      	mov	r8, r0
 8010f74:	4689      	mov	r9, r1
 8010f76:	4630      	mov	r0, r6
 8010f78:	4639      	mov	r1, r7
 8010f7a:	f7ef f98f 	bl	800029c <__adddf3>
 8010f7e:	2400      	movs	r4, #0
 8010f80:	4632      	mov	r2, r6
 8010f82:	463b      	mov	r3, r7
 8010f84:	4620      	mov	r0, r4
 8010f86:	460d      	mov	r5, r1
 8010f88:	f7ef f986 	bl	8000298 <__aeabi_dsub>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	460b      	mov	r3, r1
 8010f90:	4640      	mov	r0, r8
 8010f92:	4649      	mov	r1, r9
 8010f94:	f7ef f980 	bl	8000298 <__aeabi_dsub>
 8010f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	9304      	str	r3, [sp, #16]
 8010fa4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010fa8:	4606      	mov	r6, r0
 8010faa:	460f      	mov	r7, r1
 8010fac:	4652      	mov	r2, sl
 8010fae:	465b      	mov	r3, fp
 8010fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fb4:	f7ef f970 	bl	8000298 <__aeabi_dsub>
 8010fb8:	4622      	mov	r2, r4
 8010fba:	462b      	mov	r3, r5
 8010fbc:	f7ef fb24 	bl	8000608 <__aeabi_dmul>
 8010fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fc4:	4680      	mov	r8, r0
 8010fc6:	4689      	mov	r9, r1
 8010fc8:	4630      	mov	r0, r6
 8010fca:	4639      	mov	r1, r7
 8010fcc:	f7ef fb1c 	bl	8000608 <__aeabi_dmul>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	4649      	mov	r1, r9
 8010fd8:	f7ef f960 	bl	800029c <__adddf3>
 8010fdc:	4652      	mov	r2, sl
 8010fde:	465b      	mov	r3, fp
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	460f      	mov	r7, r1
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	f7ef fb0e 	bl	8000608 <__aeabi_dmul>
 8010fec:	460b      	mov	r3, r1
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4680      	mov	r8, r0
 8010ff2:	4689      	mov	r9, r1
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	4639      	mov	r1, r7
 8010ff8:	f7ef f950 	bl	800029c <__adddf3>
 8010ffc:	4b17      	ldr	r3, [pc, #92]	@ (801105c <__ieee754_pow+0x41c>)
 8010ffe:	4299      	cmp	r1, r3
 8011000:	4604      	mov	r4, r0
 8011002:	460d      	mov	r5, r1
 8011004:	468a      	mov	sl, r1
 8011006:	468b      	mov	fp, r1
 8011008:	f340 82ef 	ble.w	80115ea <__ieee754_pow+0x9aa>
 801100c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011010:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8011014:	4303      	orrs	r3, r0
 8011016:	f000 81e8 	beq.w	80113ea <__ieee754_pow+0x7aa>
 801101a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801101e:	2200      	movs	r2, #0
 8011020:	2300      	movs	r3, #0
 8011022:	f7ef fd63 	bl	8000aec <__aeabi_dcmplt>
 8011026:	3800      	subs	r0, #0
 8011028:	bf18      	it	ne
 801102a:	2001      	movne	r0, #1
 801102c:	e710      	b.n	8010e50 <__ieee754_pow+0x210>
 801102e:	bf00      	nop
 8011030:	60000000 	.word	0x60000000
 8011034:	3ff71547 	.word	0x3ff71547
 8011038:	f85ddf44 	.word	0xf85ddf44
 801103c:	3e54ae0b 	.word	0x3e54ae0b
 8011040:	55555555 	.word	0x55555555
 8011044:	3fd55555 	.word	0x3fd55555
 8011048:	652b82fe 	.word	0x652b82fe
 801104c:	3ff71547 	.word	0x3ff71547
 8011050:	3ff00000 	.word	0x3ff00000
 8011054:	3fd00000 	.word	0x3fd00000
 8011058:	3fe00000 	.word	0x3fe00000
 801105c:	408fffff 	.word	0x408fffff
 8011060:	4bd5      	ldr	r3, [pc, #852]	@ (80113b8 <__ieee754_pow+0x778>)
 8011062:	402b      	ands	r3, r5
 8011064:	2200      	movs	r2, #0
 8011066:	b92b      	cbnz	r3, 8011074 <__ieee754_pow+0x434>
 8011068:	4bd4      	ldr	r3, [pc, #848]	@ (80113bc <__ieee754_pow+0x77c>)
 801106a:	f7ef facd 	bl	8000608 <__aeabi_dmul>
 801106e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8011072:	468b      	mov	fp, r1
 8011074:	ea4f 532b 	mov.w	r3, fp, asr #20
 8011078:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801107c:	4413      	add	r3, r2
 801107e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011080:	4bcf      	ldr	r3, [pc, #828]	@ (80113c0 <__ieee754_pow+0x780>)
 8011082:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011086:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801108a:	459b      	cmp	fp, r3
 801108c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011090:	dd08      	ble.n	80110a4 <__ieee754_pow+0x464>
 8011092:	4bcc      	ldr	r3, [pc, #816]	@ (80113c4 <__ieee754_pow+0x784>)
 8011094:	459b      	cmp	fp, r3
 8011096:	f340 81a5 	ble.w	80113e4 <__ieee754_pow+0x7a4>
 801109a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801109c:	3301      	adds	r3, #1
 801109e:	930a      	str	r3, [sp, #40]	@ 0x28
 80110a0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80110a4:	f04f 0a00 	mov.w	sl, #0
 80110a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80110ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ae:	4bc6      	ldr	r3, [pc, #792]	@ (80113c8 <__ieee754_pow+0x788>)
 80110b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80110b4:	ed93 7b00 	vldr	d7, [r3]
 80110b8:	4629      	mov	r1, r5
 80110ba:	ec53 2b17 	vmov	r2, r3, d7
 80110be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110c6:	f7ef f8e7 	bl	8000298 <__aeabi_dsub>
 80110ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80110ce:	4606      	mov	r6, r0
 80110d0:	460f      	mov	r7, r1
 80110d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110d6:	f7ef f8e1 	bl	800029c <__adddf3>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	2000      	movs	r0, #0
 80110e0:	49ba      	ldr	r1, [pc, #744]	@ (80113cc <__ieee754_pow+0x78c>)
 80110e2:	f7ef fbbb 	bl	800085c <__aeabi_ddiv>
 80110e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80110ea:	4602      	mov	r2, r0
 80110ec:	460b      	mov	r3, r1
 80110ee:	4630      	mov	r0, r6
 80110f0:	4639      	mov	r1, r7
 80110f2:	f7ef fa89 	bl	8000608 <__aeabi_dmul>
 80110f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110fa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80110fe:	106d      	asrs	r5, r5, #1
 8011100:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011104:	f04f 0b00 	mov.w	fp, #0
 8011108:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801110c:	4661      	mov	r1, ip
 801110e:	2200      	movs	r2, #0
 8011110:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011114:	4658      	mov	r0, fp
 8011116:	46e1      	mov	r9, ip
 8011118:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801111c:	4614      	mov	r4, r2
 801111e:	461d      	mov	r5, r3
 8011120:	f7ef fa72 	bl	8000608 <__aeabi_dmul>
 8011124:	4602      	mov	r2, r0
 8011126:	460b      	mov	r3, r1
 8011128:	4630      	mov	r0, r6
 801112a:	4639      	mov	r1, r7
 801112c:	f7ef f8b4 	bl	8000298 <__aeabi_dsub>
 8011130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011134:	4606      	mov	r6, r0
 8011136:	460f      	mov	r7, r1
 8011138:	4620      	mov	r0, r4
 801113a:	4629      	mov	r1, r5
 801113c:	f7ef f8ac 	bl	8000298 <__aeabi_dsub>
 8011140:	4602      	mov	r2, r0
 8011142:	460b      	mov	r3, r1
 8011144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011148:	f7ef f8a6 	bl	8000298 <__aeabi_dsub>
 801114c:	465a      	mov	r2, fp
 801114e:	464b      	mov	r3, r9
 8011150:	f7ef fa5a 	bl	8000608 <__aeabi_dmul>
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	4630      	mov	r0, r6
 801115a:	4639      	mov	r1, r7
 801115c:	f7ef f89c 	bl	8000298 <__aeabi_dsub>
 8011160:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011164:	f7ef fa50 	bl	8000608 <__aeabi_dmul>
 8011168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801116c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011170:	4610      	mov	r0, r2
 8011172:	4619      	mov	r1, r3
 8011174:	f7ef fa48 	bl	8000608 <__aeabi_dmul>
 8011178:	a37d      	add	r3, pc, #500	@ (adr r3, 8011370 <__ieee754_pow+0x730>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	4604      	mov	r4, r0
 8011180:	460d      	mov	r5, r1
 8011182:	f7ef fa41 	bl	8000608 <__aeabi_dmul>
 8011186:	a37c      	add	r3, pc, #496	@ (adr r3, 8011378 <__ieee754_pow+0x738>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	f7ef f886 	bl	800029c <__adddf3>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7ef fa38 	bl	8000608 <__aeabi_dmul>
 8011198:	a379      	add	r3, pc, #484	@ (adr r3, 8011380 <__ieee754_pow+0x740>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f87d 	bl	800029c <__adddf3>
 80111a2:	4622      	mov	r2, r4
 80111a4:	462b      	mov	r3, r5
 80111a6:	f7ef fa2f 	bl	8000608 <__aeabi_dmul>
 80111aa:	a377      	add	r3, pc, #476	@ (adr r3, 8011388 <__ieee754_pow+0x748>)
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f7ef f874 	bl	800029c <__adddf3>
 80111b4:	4622      	mov	r2, r4
 80111b6:	462b      	mov	r3, r5
 80111b8:	f7ef fa26 	bl	8000608 <__aeabi_dmul>
 80111bc:	a374      	add	r3, pc, #464	@ (adr r3, 8011390 <__ieee754_pow+0x750>)
 80111be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c2:	f7ef f86b 	bl	800029c <__adddf3>
 80111c6:	4622      	mov	r2, r4
 80111c8:	462b      	mov	r3, r5
 80111ca:	f7ef fa1d 	bl	8000608 <__aeabi_dmul>
 80111ce:	a372      	add	r3, pc, #456	@ (adr r3, 8011398 <__ieee754_pow+0x758>)
 80111d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d4:	f7ef f862 	bl	800029c <__adddf3>
 80111d8:	4622      	mov	r2, r4
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	462b      	mov	r3, r5
 80111e0:	4620      	mov	r0, r4
 80111e2:	4629      	mov	r1, r5
 80111e4:	f7ef fa10 	bl	8000608 <__aeabi_dmul>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4630      	mov	r0, r6
 80111ee:	4639      	mov	r1, r7
 80111f0:	f7ef fa0a 	bl	8000608 <__aeabi_dmul>
 80111f4:	465a      	mov	r2, fp
 80111f6:	4604      	mov	r4, r0
 80111f8:	460d      	mov	r5, r1
 80111fa:	464b      	mov	r3, r9
 80111fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011200:	f7ef f84c 	bl	800029c <__adddf3>
 8011204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011208:	f7ef f9fe 	bl	8000608 <__aeabi_dmul>
 801120c:	4622      	mov	r2, r4
 801120e:	462b      	mov	r3, r5
 8011210:	f7ef f844 	bl	800029c <__adddf3>
 8011214:	465a      	mov	r2, fp
 8011216:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801121a:	464b      	mov	r3, r9
 801121c:	4658      	mov	r0, fp
 801121e:	4649      	mov	r1, r9
 8011220:	f7ef f9f2 	bl	8000608 <__aeabi_dmul>
 8011224:	4b6a      	ldr	r3, [pc, #424]	@ (80113d0 <__ieee754_pow+0x790>)
 8011226:	2200      	movs	r2, #0
 8011228:	4606      	mov	r6, r0
 801122a:	460f      	mov	r7, r1
 801122c:	f7ef f836 	bl	800029c <__adddf3>
 8011230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011234:	f7ef f832 	bl	800029c <__adddf3>
 8011238:	46d8      	mov	r8, fp
 801123a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801123e:	460d      	mov	r5, r1
 8011240:	465a      	mov	r2, fp
 8011242:	460b      	mov	r3, r1
 8011244:	4640      	mov	r0, r8
 8011246:	4649      	mov	r1, r9
 8011248:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801124c:	f7ef f9dc 	bl	8000608 <__aeabi_dmul>
 8011250:	465c      	mov	r4, fp
 8011252:	4680      	mov	r8, r0
 8011254:	4689      	mov	r9, r1
 8011256:	4b5e      	ldr	r3, [pc, #376]	@ (80113d0 <__ieee754_pow+0x790>)
 8011258:	2200      	movs	r2, #0
 801125a:	4620      	mov	r0, r4
 801125c:	4629      	mov	r1, r5
 801125e:	f7ef f81b 	bl	8000298 <__aeabi_dsub>
 8011262:	4632      	mov	r2, r6
 8011264:	463b      	mov	r3, r7
 8011266:	f7ef f817 	bl	8000298 <__aeabi_dsub>
 801126a:	4602      	mov	r2, r0
 801126c:	460b      	mov	r3, r1
 801126e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011272:	f7ef f811 	bl	8000298 <__aeabi_dsub>
 8011276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801127a:	f7ef f9c5 	bl	8000608 <__aeabi_dmul>
 801127e:	4622      	mov	r2, r4
 8011280:	4606      	mov	r6, r0
 8011282:	460f      	mov	r7, r1
 8011284:	462b      	mov	r3, r5
 8011286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801128a:	f7ef f9bd 	bl	8000608 <__aeabi_dmul>
 801128e:	4602      	mov	r2, r0
 8011290:	460b      	mov	r3, r1
 8011292:	4630      	mov	r0, r6
 8011294:	4639      	mov	r1, r7
 8011296:	f7ef f801 	bl	800029c <__adddf3>
 801129a:	4606      	mov	r6, r0
 801129c:	460f      	mov	r7, r1
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4640      	mov	r0, r8
 80112a4:	4649      	mov	r1, r9
 80112a6:	f7ee fff9 	bl	800029c <__adddf3>
 80112aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80112ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80113a0 <__ieee754_pow+0x760>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4658      	mov	r0, fp
 80112b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80112ba:	460d      	mov	r5, r1
 80112bc:	f7ef f9a4 	bl	8000608 <__aeabi_dmul>
 80112c0:	465c      	mov	r4, fp
 80112c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112c6:	4642      	mov	r2, r8
 80112c8:	464b      	mov	r3, r9
 80112ca:	4620      	mov	r0, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	f7ee ffe3 	bl	8000298 <__aeabi_dsub>
 80112d2:	4602      	mov	r2, r0
 80112d4:	460b      	mov	r3, r1
 80112d6:	4630      	mov	r0, r6
 80112d8:	4639      	mov	r1, r7
 80112da:	f7ee ffdd 	bl	8000298 <__aeabi_dsub>
 80112de:	a332      	add	r3, pc, #200	@ (adr r3, 80113a8 <__ieee754_pow+0x768>)
 80112e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e4:	f7ef f990 	bl	8000608 <__aeabi_dmul>
 80112e8:	a331      	add	r3, pc, #196	@ (adr r3, 80113b0 <__ieee754_pow+0x770>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	4606      	mov	r6, r0
 80112f0:	460f      	mov	r7, r1
 80112f2:	4620      	mov	r0, r4
 80112f4:	4629      	mov	r1, r5
 80112f6:	f7ef f987 	bl	8000608 <__aeabi_dmul>
 80112fa:	4602      	mov	r2, r0
 80112fc:	460b      	mov	r3, r1
 80112fe:	4630      	mov	r0, r6
 8011300:	4639      	mov	r1, r7
 8011302:	f7ee ffcb 	bl	800029c <__adddf3>
 8011306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011308:	4b32      	ldr	r3, [pc, #200]	@ (80113d4 <__ieee754_pow+0x794>)
 801130a:	4413      	add	r3, r2
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	f7ee ffc4 	bl	800029c <__adddf3>
 8011314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011318:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801131a:	f7ef f90b 	bl	8000534 <__aeabi_i2d>
 801131e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011320:	4b2d      	ldr	r3, [pc, #180]	@ (80113d8 <__ieee754_pow+0x798>)
 8011322:	4413      	add	r3, r2
 8011324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011328:	4606      	mov	r6, r0
 801132a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801132e:	460f      	mov	r7, r1
 8011330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011334:	f7ee ffb2 	bl	800029c <__adddf3>
 8011338:	4642      	mov	r2, r8
 801133a:	464b      	mov	r3, r9
 801133c:	f7ee ffae 	bl	800029c <__adddf3>
 8011340:	4632      	mov	r2, r6
 8011342:	463b      	mov	r3, r7
 8011344:	f7ee ffaa 	bl	800029c <__adddf3>
 8011348:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801134c:	4632      	mov	r2, r6
 801134e:	463b      	mov	r3, r7
 8011350:	4658      	mov	r0, fp
 8011352:	460d      	mov	r5, r1
 8011354:	f7ee ffa0 	bl	8000298 <__aeabi_dsub>
 8011358:	4642      	mov	r2, r8
 801135a:	464b      	mov	r3, r9
 801135c:	f7ee ff9c 	bl	8000298 <__aeabi_dsub>
 8011360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011364:	f7ee ff98 	bl	8000298 <__aeabi_dsub>
 8011368:	465c      	mov	r4, fp
 801136a:	4602      	mov	r2, r0
 801136c:	e036      	b.n	80113dc <__ieee754_pow+0x79c>
 801136e:	bf00      	nop
 8011370:	4a454eef 	.word	0x4a454eef
 8011374:	3fca7e28 	.word	0x3fca7e28
 8011378:	93c9db65 	.word	0x93c9db65
 801137c:	3fcd864a 	.word	0x3fcd864a
 8011380:	a91d4101 	.word	0xa91d4101
 8011384:	3fd17460 	.word	0x3fd17460
 8011388:	518f264d 	.word	0x518f264d
 801138c:	3fd55555 	.word	0x3fd55555
 8011390:	db6fabff 	.word	0xdb6fabff
 8011394:	3fdb6db6 	.word	0x3fdb6db6
 8011398:	33333303 	.word	0x33333303
 801139c:	3fe33333 	.word	0x3fe33333
 80113a0:	e0000000 	.word	0xe0000000
 80113a4:	3feec709 	.word	0x3feec709
 80113a8:	dc3a03fd 	.word	0xdc3a03fd
 80113ac:	3feec709 	.word	0x3feec709
 80113b0:	145b01f5 	.word	0x145b01f5
 80113b4:	be3e2fe0 	.word	0xbe3e2fe0
 80113b8:	7ff00000 	.word	0x7ff00000
 80113bc:	43400000 	.word	0x43400000
 80113c0:	0003988e 	.word	0x0003988e
 80113c4:	000bb679 	.word	0x000bb679
 80113c8:	08011ed8 	.word	0x08011ed8
 80113cc:	3ff00000 	.word	0x3ff00000
 80113d0:	40080000 	.word	0x40080000
 80113d4:	08011eb8 	.word	0x08011eb8
 80113d8:	08011ec8 	.word	0x08011ec8
 80113dc:	460b      	mov	r3, r1
 80113de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113e2:	e5d7      	b.n	8010f94 <__ieee754_pow+0x354>
 80113e4:	f04f 0a01 	mov.w	sl, #1
 80113e8:	e65e      	b.n	80110a8 <__ieee754_pow+0x468>
 80113ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80116bc <__ieee754_pow+0xa7c>)
 80113ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f0:	4630      	mov	r0, r6
 80113f2:	4639      	mov	r1, r7
 80113f4:	f7ee ff52 	bl	800029c <__adddf3>
 80113f8:	4642      	mov	r2, r8
 80113fa:	e9cd 0100 	strd	r0, r1, [sp]
 80113fe:	464b      	mov	r3, r9
 8011400:	4620      	mov	r0, r4
 8011402:	4629      	mov	r1, r5
 8011404:	f7ee ff48 	bl	8000298 <__aeabi_dsub>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011410:	f7ef fb8a 	bl	8000b28 <__aeabi_dcmpgt>
 8011414:	2800      	cmp	r0, #0
 8011416:	f47f ae00 	bne.w	801101a <__ieee754_pow+0x3da>
 801141a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801141e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011422:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8011426:	fa43 fa0a 	asr.w	sl, r3, sl
 801142a:	44da      	add	sl, fp
 801142c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011430:	489d      	ldr	r0, [pc, #628]	@ (80116a8 <__ieee754_pow+0xa68>)
 8011432:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011436:	4108      	asrs	r0, r1
 8011438:	ea00 030a 	and.w	r3, r0, sl
 801143c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011440:	f1c1 0114 	rsb	r1, r1, #20
 8011444:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011448:	fa4a fa01 	asr.w	sl, sl, r1
 801144c:	f1bb 0f00 	cmp.w	fp, #0
 8011450:	4640      	mov	r0, r8
 8011452:	4649      	mov	r1, r9
 8011454:	f04f 0200 	mov.w	r2, #0
 8011458:	bfb8      	it	lt
 801145a:	f1ca 0a00 	rsblt	sl, sl, #0
 801145e:	f7ee ff1b 	bl	8000298 <__aeabi_dsub>
 8011462:	4680      	mov	r8, r0
 8011464:	4689      	mov	r9, r1
 8011466:	4632      	mov	r2, r6
 8011468:	463b      	mov	r3, r7
 801146a:	4640      	mov	r0, r8
 801146c:	4649      	mov	r1, r9
 801146e:	f7ee ff15 	bl	800029c <__adddf3>
 8011472:	2400      	movs	r4, #0
 8011474:	a37c      	add	r3, pc, #496	@ (adr r3, 8011668 <__ieee754_pow+0xa28>)
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	4620      	mov	r0, r4
 801147c:	460d      	mov	r5, r1
 801147e:	f7ef f8c3 	bl	8000608 <__aeabi_dmul>
 8011482:	4642      	mov	r2, r8
 8011484:	e9cd 0100 	strd	r0, r1, [sp]
 8011488:	464b      	mov	r3, r9
 801148a:	4620      	mov	r0, r4
 801148c:	4629      	mov	r1, r5
 801148e:	f7ee ff03 	bl	8000298 <__aeabi_dsub>
 8011492:	4602      	mov	r2, r0
 8011494:	460b      	mov	r3, r1
 8011496:	4630      	mov	r0, r6
 8011498:	4639      	mov	r1, r7
 801149a:	f7ee fefd 	bl	8000298 <__aeabi_dsub>
 801149e:	a374      	add	r3, pc, #464	@ (adr r3, 8011670 <__ieee754_pow+0xa30>)
 80114a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a4:	f7ef f8b0 	bl	8000608 <__aeabi_dmul>
 80114a8:	a373      	add	r3, pc, #460	@ (adr r3, 8011678 <__ieee754_pow+0xa38>)
 80114aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ae:	4680      	mov	r8, r0
 80114b0:	4689      	mov	r9, r1
 80114b2:	4620      	mov	r0, r4
 80114b4:	4629      	mov	r1, r5
 80114b6:	f7ef f8a7 	bl	8000608 <__aeabi_dmul>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	4640      	mov	r0, r8
 80114c0:	4649      	mov	r1, r9
 80114c2:	f7ee feeb 	bl	800029c <__adddf3>
 80114c6:	4604      	mov	r4, r0
 80114c8:	460d      	mov	r5, r1
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114d2:	f7ee fee3 	bl	800029c <__adddf3>
 80114d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114da:	4680      	mov	r8, r0
 80114dc:	4689      	mov	r9, r1
 80114de:	f7ee fedb 	bl	8000298 <__aeabi_dsub>
 80114e2:	4602      	mov	r2, r0
 80114e4:	460b      	mov	r3, r1
 80114e6:	4620      	mov	r0, r4
 80114e8:	4629      	mov	r1, r5
 80114ea:	f7ee fed5 	bl	8000298 <__aeabi_dsub>
 80114ee:	4642      	mov	r2, r8
 80114f0:	4606      	mov	r6, r0
 80114f2:	460f      	mov	r7, r1
 80114f4:	464b      	mov	r3, r9
 80114f6:	4640      	mov	r0, r8
 80114f8:	4649      	mov	r1, r9
 80114fa:	f7ef f885 	bl	8000608 <__aeabi_dmul>
 80114fe:	a360      	add	r3, pc, #384	@ (adr r3, 8011680 <__ieee754_pow+0xa40>)
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	4604      	mov	r4, r0
 8011506:	460d      	mov	r5, r1
 8011508:	f7ef f87e 	bl	8000608 <__aeabi_dmul>
 801150c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011688 <__ieee754_pow+0xa48>)
 801150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011512:	f7ee fec1 	bl	8000298 <__aeabi_dsub>
 8011516:	4622      	mov	r2, r4
 8011518:	462b      	mov	r3, r5
 801151a:	f7ef f875 	bl	8000608 <__aeabi_dmul>
 801151e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011690 <__ieee754_pow+0xa50>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	f7ee feba 	bl	800029c <__adddf3>
 8011528:	4622      	mov	r2, r4
 801152a:	462b      	mov	r3, r5
 801152c:	f7ef f86c 	bl	8000608 <__aeabi_dmul>
 8011530:	a359      	add	r3, pc, #356	@ (adr r3, 8011698 <__ieee754_pow+0xa58>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	f7ee feaf 	bl	8000298 <__aeabi_dsub>
 801153a:	4622      	mov	r2, r4
 801153c:	462b      	mov	r3, r5
 801153e:	f7ef f863 	bl	8000608 <__aeabi_dmul>
 8011542:	a357      	add	r3, pc, #348	@ (adr r3, 80116a0 <__ieee754_pow+0xa60>)
 8011544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011548:	f7ee fea8 	bl	800029c <__adddf3>
 801154c:	4622      	mov	r2, r4
 801154e:	462b      	mov	r3, r5
 8011550:	f7ef f85a 	bl	8000608 <__aeabi_dmul>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4640      	mov	r0, r8
 801155a:	4649      	mov	r1, r9
 801155c:	f7ee fe9c 	bl	8000298 <__aeabi_dsub>
 8011560:	4604      	mov	r4, r0
 8011562:	460d      	mov	r5, r1
 8011564:	4602      	mov	r2, r0
 8011566:	460b      	mov	r3, r1
 8011568:	4640      	mov	r0, r8
 801156a:	4649      	mov	r1, r9
 801156c:	f7ef f84c 	bl	8000608 <__aeabi_dmul>
 8011570:	2200      	movs	r2, #0
 8011572:	e9cd 0100 	strd	r0, r1, [sp]
 8011576:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801157a:	4620      	mov	r0, r4
 801157c:	4629      	mov	r1, r5
 801157e:	f7ee fe8b 	bl	8000298 <__aeabi_dsub>
 8011582:	4602      	mov	r2, r0
 8011584:	460b      	mov	r3, r1
 8011586:	e9dd 0100 	ldrd	r0, r1, [sp]
 801158a:	f7ef f967 	bl	800085c <__aeabi_ddiv>
 801158e:	4632      	mov	r2, r6
 8011590:	4604      	mov	r4, r0
 8011592:	460d      	mov	r5, r1
 8011594:	463b      	mov	r3, r7
 8011596:	4640      	mov	r0, r8
 8011598:	4649      	mov	r1, r9
 801159a:	f7ef f835 	bl	8000608 <__aeabi_dmul>
 801159e:	4632      	mov	r2, r6
 80115a0:	463b      	mov	r3, r7
 80115a2:	f7ee fe7b 	bl	800029c <__adddf3>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4620      	mov	r0, r4
 80115ac:	4629      	mov	r1, r5
 80115ae:	f7ee fe73 	bl	8000298 <__aeabi_dsub>
 80115b2:	4642      	mov	r2, r8
 80115b4:	464b      	mov	r3, r9
 80115b6:	f7ee fe6f 	bl	8000298 <__aeabi_dsub>
 80115ba:	460b      	mov	r3, r1
 80115bc:	4602      	mov	r2, r0
 80115be:	493b      	ldr	r1, [pc, #236]	@ (80116ac <__ieee754_pow+0xa6c>)
 80115c0:	2000      	movs	r0, #0
 80115c2:	f7ee fe69 	bl	8000298 <__aeabi_dsub>
 80115c6:	ec41 0b10 	vmov	d0, r0, r1
 80115ca:	ee10 3a90 	vmov	r3, s1
 80115ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80115d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115d6:	da30      	bge.n	801163a <__ieee754_pow+0x9fa>
 80115d8:	4650      	mov	r0, sl
 80115da:	f000 f87d 	bl	80116d8 <scalbn>
 80115de:	ec51 0b10 	vmov	r0, r1, d0
 80115e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115e6:	f7ff bbd2 	b.w	8010d8e <__ieee754_pow+0x14e>
 80115ea:	4c31      	ldr	r4, [pc, #196]	@ (80116b0 <__ieee754_pow+0xa70>)
 80115ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80115f0:	42a3      	cmp	r3, r4
 80115f2:	d91a      	bls.n	801162a <__ieee754_pow+0x9ea>
 80115f4:	4b2f      	ldr	r3, [pc, #188]	@ (80116b4 <__ieee754_pow+0xa74>)
 80115f6:	440b      	add	r3, r1
 80115f8:	4303      	orrs	r3, r0
 80115fa:	d009      	beq.n	8011610 <__ieee754_pow+0x9d0>
 80115fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011600:	2200      	movs	r2, #0
 8011602:	2300      	movs	r3, #0
 8011604:	f7ef fa72 	bl	8000aec <__aeabi_dcmplt>
 8011608:	3800      	subs	r0, #0
 801160a:	bf18      	it	ne
 801160c:	2001      	movne	r0, #1
 801160e:	e42b      	b.n	8010e68 <__ieee754_pow+0x228>
 8011610:	4642      	mov	r2, r8
 8011612:	464b      	mov	r3, r9
 8011614:	f7ee fe40 	bl	8000298 <__aeabi_dsub>
 8011618:	4632      	mov	r2, r6
 801161a:	463b      	mov	r3, r7
 801161c:	f7ef fa7a 	bl	8000b14 <__aeabi_dcmpge>
 8011620:	2800      	cmp	r0, #0
 8011622:	d1eb      	bne.n	80115fc <__ieee754_pow+0x9bc>
 8011624:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80116c4 <__ieee754_pow+0xa84>
 8011628:	e6f7      	b.n	801141a <__ieee754_pow+0x7da>
 801162a:	469a      	mov	sl, r3
 801162c:	4b22      	ldr	r3, [pc, #136]	@ (80116b8 <__ieee754_pow+0xa78>)
 801162e:	459a      	cmp	sl, r3
 8011630:	f63f aef3 	bhi.w	801141a <__ieee754_pow+0x7da>
 8011634:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011638:	e715      	b.n	8011466 <__ieee754_pow+0x826>
 801163a:	ec51 0b10 	vmov	r0, r1, d0
 801163e:	4619      	mov	r1, r3
 8011640:	e7cf      	b.n	80115e2 <__ieee754_pow+0x9a2>
 8011642:	491a      	ldr	r1, [pc, #104]	@ (80116ac <__ieee754_pow+0xa6c>)
 8011644:	2000      	movs	r0, #0
 8011646:	f7ff bb18 	b.w	8010c7a <__ieee754_pow+0x3a>
 801164a:	2000      	movs	r0, #0
 801164c:	2100      	movs	r1, #0
 801164e:	f7ff bb14 	b.w	8010c7a <__ieee754_pow+0x3a>
 8011652:	4630      	mov	r0, r6
 8011654:	4639      	mov	r1, r7
 8011656:	f7ff bb10 	b.w	8010c7a <__ieee754_pow+0x3a>
 801165a:	460c      	mov	r4, r1
 801165c:	f7ff bb5e 	b.w	8010d1c <__ieee754_pow+0xdc>
 8011660:	2400      	movs	r4, #0
 8011662:	f7ff bb49 	b.w	8010cf8 <__ieee754_pow+0xb8>
 8011666:	bf00      	nop
 8011668:	00000000 	.word	0x00000000
 801166c:	3fe62e43 	.word	0x3fe62e43
 8011670:	fefa39ef 	.word	0xfefa39ef
 8011674:	3fe62e42 	.word	0x3fe62e42
 8011678:	0ca86c39 	.word	0x0ca86c39
 801167c:	be205c61 	.word	0xbe205c61
 8011680:	72bea4d0 	.word	0x72bea4d0
 8011684:	3e663769 	.word	0x3e663769
 8011688:	c5d26bf1 	.word	0xc5d26bf1
 801168c:	3ebbbd41 	.word	0x3ebbbd41
 8011690:	af25de2c 	.word	0xaf25de2c
 8011694:	3f11566a 	.word	0x3f11566a
 8011698:	16bebd93 	.word	0x16bebd93
 801169c:	3f66c16c 	.word	0x3f66c16c
 80116a0:	5555553e 	.word	0x5555553e
 80116a4:	3fc55555 	.word	0x3fc55555
 80116a8:	fff00000 	.word	0xfff00000
 80116ac:	3ff00000 	.word	0x3ff00000
 80116b0:	4090cbff 	.word	0x4090cbff
 80116b4:	3f6f3400 	.word	0x3f6f3400
 80116b8:	3fe00000 	.word	0x3fe00000
 80116bc:	652b82fe 	.word	0x652b82fe
 80116c0:	3c971547 	.word	0x3c971547
 80116c4:	4090cc00 	.word	0x4090cc00

080116c8 <fabs>:
 80116c8:	ec51 0b10 	vmov	r0, r1, d0
 80116cc:	4602      	mov	r2, r0
 80116ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80116d2:	ec43 2b10 	vmov	d0, r2, r3
 80116d6:	4770      	bx	lr

080116d8 <scalbn>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	ec55 4b10 	vmov	r4, r5, d0
 80116de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80116e2:	4606      	mov	r6, r0
 80116e4:	462b      	mov	r3, r5
 80116e6:	b991      	cbnz	r1, 801170e <scalbn+0x36>
 80116e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80116ec:	4323      	orrs	r3, r4
 80116ee:	d03d      	beq.n	801176c <scalbn+0x94>
 80116f0:	4b35      	ldr	r3, [pc, #212]	@ (80117c8 <scalbn+0xf0>)
 80116f2:	4620      	mov	r0, r4
 80116f4:	4629      	mov	r1, r5
 80116f6:	2200      	movs	r2, #0
 80116f8:	f7ee ff86 	bl	8000608 <__aeabi_dmul>
 80116fc:	4b33      	ldr	r3, [pc, #204]	@ (80117cc <scalbn+0xf4>)
 80116fe:	429e      	cmp	r6, r3
 8011700:	4604      	mov	r4, r0
 8011702:	460d      	mov	r5, r1
 8011704:	da0f      	bge.n	8011726 <scalbn+0x4e>
 8011706:	a328      	add	r3, pc, #160	@ (adr r3, 80117a8 <scalbn+0xd0>)
 8011708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170c:	e01e      	b.n	801174c <scalbn+0x74>
 801170e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011712:	4291      	cmp	r1, r2
 8011714:	d10b      	bne.n	801172e <scalbn+0x56>
 8011716:	4622      	mov	r2, r4
 8011718:	4620      	mov	r0, r4
 801171a:	4629      	mov	r1, r5
 801171c:	f7ee fdbe 	bl	800029c <__adddf3>
 8011720:	4604      	mov	r4, r0
 8011722:	460d      	mov	r5, r1
 8011724:	e022      	b.n	801176c <scalbn+0x94>
 8011726:	460b      	mov	r3, r1
 8011728:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801172c:	3936      	subs	r1, #54	@ 0x36
 801172e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011732:	4296      	cmp	r6, r2
 8011734:	dd0d      	ble.n	8011752 <scalbn+0x7a>
 8011736:	2d00      	cmp	r5, #0
 8011738:	a11d      	add	r1, pc, #116	@ (adr r1, 80117b0 <scalbn+0xd8>)
 801173a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801173e:	da02      	bge.n	8011746 <scalbn+0x6e>
 8011740:	a11d      	add	r1, pc, #116	@ (adr r1, 80117b8 <scalbn+0xe0>)
 8011742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011746:	a31a      	add	r3, pc, #104	@ (adr r3, 80117b0 <scalbn+0xd8>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7ee ff5c 	bl	8000608 <__aeabi_dmul>
 8011750:	e7e6      	b.n	8011720 <scalbn+0x48>
 8011752:	1872      	adds	r2, r6, r1
 8011754:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011758:	428a      	cmp	r2, r1
 801175a:	dcec      	bgt.n	8011736 <scalbn+0x5e>
 801175c:	2a00      	cmp	r2, #0
 801175e:	dd08      	ble.n	8011772 <scalbn+0x9a>
 8011760:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011764:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011768:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801176c:	ec45 4b10 	vmov	d0, r4, r5
 8011770:	bd70      	pop	{r4, r5, r6, pc}
 8011772:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011776:	da08      	bge.n	801178a <scalbn+0xb2>
 8011778:	2d00      	cmp	r5, #0
 801177a:	a10b      	add	r1, pc, #44	@ (adr r1, 80117a8 <scalbn+0xd0>)
 801177c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011780:	dac1      	bge.n	8011706 <scalbn+0x2e>
 8011782:	a10f      	add	r1, pc, #60	@ (adr r1, 80117c0 <scalbn+0xe8>)
 8011784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011788:	e7bd      	b.n	8011706 <scalbn+0x2e>
 801178a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801178e:	3236      	adds	r2, #54	@ 0x36
 8011790:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011794:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011798:	4620      	mov	r0, r4
 801179a:	4b0d      	ldr	r3, [pc, #52]	@ (80117d0 <scalbn+0xf8>)
 801179c:	4629      	mov	r1, r5
 801179e:	2200      	movs	r2, #0
 80117a0:	e7d4      	b.n	801174c <scalbn+0x74>
 80117a2:	bf00      	nop
 80117a4:	f3af 8000 	nop.w
 80117a8:	c2f8f359 	.word	0xc2f8f359
 80117ac:	01a56e1f 	.word	0x01a56e1f
 80117b0:	8800759c 	.word	0x8800759c
 80117b4:	7e37e43c 	.word	0x7e37e43c
 80117b8:	8800759c 	.word	0x8800759c
 80117bc:	fe37e43c 	.word	0xfe37e43c
 80117c0:	c2f8f359 	.word	0xc2f8f359
 80117c4:	81a56e1f 	.word	0x81a56e1f
 80117c8:	43500000 	.word	0x43500000
 80117cc:	ffff3cb0 	.word	0xffff3cb0
 80117d0:	3c900000 	.word	0x3c900000

080117d4 <with_errno>:
 80117d4:	b510      	push	{r4, lr}
 80117d6:	ed2d 8b02 	vpush	{d8}
 80117da:	eeb0 8a40 	vmov.f32	s16, s0
 80117de:	eef0 8a60 	vmov.f32	s17, s1
 80117e2:	4604      	mov	r4, r0
 80117e4:	f7fb fe2c 	bl	800d440 <__errno>
 80117e8:	eeb0 0a48 	vmov.f32	s0, s16
 80117ec:	eef0 0a68 	vmov.f32	s1, s17
 80117f0:	ecbd 8b02 	vpop	{d8}
 80117f4:	6004      	str	r4, [r0, #0]
 80117f6:	bd10      	pop	{r4, pc}

080117f8 <xflow>:
 80117f8:	4603      	mov	r3, r0
 80117fa:	b507      	push	{r0, r1, r2, lr}
 80117fc:	ec51 0b10 	vmov	r0, r1, d0
 8011800:	b183      	cbz	r3, 8011824 <xflow+0x2c>
 8011802:	4602      	mov	r2, r0
 8011804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011808:	e9cd 2300 	strd	r2, r3, [sp]
 801180c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011810:	f7ee fefa 	bl	8000608 <__aeabi_dmul>
 8011814:	ec41 0b10 	vmov	d0, r0, r1
 8011818:	2022      	movs	r0, #34	@ 0x22
 801181a:	b003      	add	sp, #12
 801181c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011820:	f7ff bfd8 	b.w	80117d4 <with_errno>
 8011824:	4602      	mov	r2, r0
 8011826:	460b      	mov	r3, r1
 8011828:	e7ee      	b.n	8011808 <xflow+0x10>
 801182a:	0000      	movs	r0, r0
 801182c:	0000      	movs	r0, r0
	...

08011830 <__math_uflow>:
 8011830:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011838 <__math_uflow+0x8>
 8011834:	f7ff bfe0 	b.w	80117f8 <xflow>
 8011838:	00000000 	.word	0x00000000
 801183c:	10000000 	.word	0x10000000

08011840 <__math_oflow>:
 8011840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011848 <__math_oflow+0x8>
 8011844:	f7ff bfd8 	b.w	80117f8 <xflow>
 8011848:	00000000 	.word	0x00000000
 801184c:	70000000 	.word	0x70000000

08011850 <__ieee754_sqrt>:
 8011850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	4a68      	ldr	r2, [pc, #416]	@ (80119f8 <__ieee754_sqrt+0x1a8>)
 8011856:	ec55 4b10 	vmov	r4, r5, d0
 801185a:	43aa      	bics	r2, r5
 801185c:	462b      	mov	r3, r5
 801185e:	4621      	mov	r1, r4
 8011860:	d110      	bne.n	8011884 <__ieee754_sqrt+0x34>
 8011862:	4622      	mov	r2, r4
 8011864:	4620      	mov	r0, r4
 8011866:	4629      	mov	r1, r5
 8011868:	f7ee fece 	bl	8000608 <__aeabi_dmul>
 801186c:	4602      	mov	r2, r0
 801186e:	460b      	mov	r3, r1
 8011870:	4620      	mov	r0, r4
 8011872:	4629      	mov	r1, r5
 8011874:	f7ee fd12 	bl	800029c <__adddf3>
 8011878:	4604      	mov	r4, r0
 801187a:	460d      	mov	r5, r1
 801187c:	ec45 4b10 	vmov	d0, r4, r5
 8011880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011884:	2d00      	cmp	r5, #0
 8011886:	dc0e      	bgt.n	80118a6 <__ieee754_sqrt+0x56>
 8011888:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801188c:	4322      	orrs	r2, r4
 801188e:	d0f5      	beq.n	801187c <__ieee754_sqrt+0x2c>
 8011890:	b19d      	cbz	r5, 80118ba <__ieee754_sqrt+0x6a>
 8011892:	4622      	mov	r2, r4
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f7ee fcfe 	bl	8000298 <__aeabi_dsub>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	f7ee ffdc 	bl	800085c <__aeabi_ddiv>
 80118a4:	e7e8      	b.n	8011878 <__ieee754_sqrt+0x28>
 80118a6:	152a      	asrs	r2, r5, #20
 80118a8:	d115      	bne.n	80118d6 <__ieee754_sqrt+0x86>
 80118aa:	2000      	movs	r0, #0
 80118ac:	e009      	b.n	80118c2 <__ieee754_sqrt+0x72>
 80118ae:	0acb      	lsrs	r3, r1, #11
 80118b0:	3a15      	subs	r2, #21
 80118b2:	0549      	lsls	r1, r1, #21
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d0fa      	beq.n	80118ae <__ieee754_sqrt+0x5e>
 80118b8:	e7f7      	b.n	80118aa <__ieee754_sqrt+0x5a>
 80118ba:	462a      	mov	r2, r5
 80118bc:	e7fa      	b.n	80118b4 <__ieee754_sqrt+0x64>
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	3001      	adds	r0, #1
 80118c2:	02dc      	lsls	r4, r3, #11
 80118c4:	d5fb      	bpl.n	80118be <__ieee754_sqrt+0x6e>
 80118c6:	1e44      	subs	r4, r0, #1
 80118c8:	1b12      	subs	r2, r2, r4
 80118ca:	f1c0 0420 	rsb	r4, r0, #32
 80118ce:	fa21 f404 	lsr.w	r4, r1, r4
 80118d2:	4323      	orrs	r3, r4
 80118d4:	4081      	lsls	r1, r0
 80118d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80118de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118e2:	07d2      	lsls	r2, r2, #31
 80118e4:	bf5c      	itt	pl
 80118e6:	005b      	lslpl	r3, r3, #1
 80118e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80118ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118f0:	bf58      	it	pl
 80118f2:	0049      	lslpl	r1, r1, #1
 80118f4:	2600      	movs	r6, #0
 80118f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80118fa:	106d      	asrs	r5, r5, #1
 80118fc:	0049      	lsls	r1, r1, #1
 80118fe:	2016      	movs	r0, #22
 8011900:	4632      	mov	r2, r6
 8011902:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011906:	1917      	adds	r7, r2, r4
 8011908:	429f      	cmp	r7, r3
 801190a:	bfde      	ittt	le
 801190c:	193a      	addle	r2, r7, r4
 801190e:	1bdb      	suble	r3, r3, r7
 8011910:	1936      	addle	r6, r6, r4
 8011912:	0fcf      	lsrs	r7, r1, #31
 8011914:	3801      	subs	r0, #1
 8011916:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801191a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801191e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011922:	d1f0      	bne.n	8011906 <__ieee754_sqrt+0xb6>
 8011924:	4604      	mov	r4, r0
 8011926:	2720      	movs	r7, #32
 8011928:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801192c:	429a      	cmp	r2, r3
 801192e:	eb00 0e0c 	add.w	lr, r0, ip
 8011932:	db02      	blt.n	801193a <__ieee754_sqrt+0xea>
 8011934:	d113      	bne.n	801195e <__ieee754_sqrt+0x10e>
 8011936:	458e      	cmp	lr, r1
 8011938:	d811      	bhi.n	801195e <__ieee754_sqrt+0x10e>
 801193a:	f1be 0f00 	cmp.w	lr, #0
 801193e:	eb0e 000c 	add.w	r0, lr, ip
 8011942:	da42      	bge.n	80119ca <__ieee754_sqrt+0x17a>
 8011944:	2800      	cmp	r0, #0
 8011946:	db40      	blt.n	80119ca <__ieee754_sqrt+0x17a>
 8011948:	f102 0801 	add.w	r8, r2, #1
 801194c:	1a9b      	subs	r3, r3, r2
 801194e:	458e      	cmp	lr, r1
 8011950:	bf88      	it	hi
 8011952:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011956:	eba1 010e 	sub.w	r1, r1, lr
 801195a:	4464      	add	r4, ip
 801195c:	4642      	mov	r2, r8
 801195e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011962:	3f01      	subs	r7, #1
 8011964:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011968:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801196c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011970:	d1dc      	bne.n	801192c <__ieee754_sqrt+0xdc>
 8011972:	4319      	orrs	r1, r3
 8011974:	d01b      	beq.n	80119ae <__ieee754_sqrt+0x15e>
 8011976:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80119fc <__ieee754_sqrt+0x1ac>
 801197a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011a00 <__ieee754_sqrt+0x1b0>
 801197e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011982:	e9db 2300 	ldrd	r2, r3, [fp]
 8011986:	f7ee fc87 	bl	8000298 <__aeabi_dsub>
 801198a:	e9da 8900 	ldrd	r8, r9, [sl]
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	4640      	mov	r0, r8
 8011994:	4649      	mov	r1, r9
 8011996:	f7ef f8b3 	bl	8000b00 <__aeabi_dcmple>
 801199a:	b140      	cbz	r0, 80119ae <__ieee754_sqrt+0x15e>
 801199c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80119a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80119a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80119a8:	d111      	bne.n	80119ce <__ieee754_sqrt+0x17e>
 80119aa:	3601      	adds	r6, #1
 80119ac:	463c      	mov	r4, r7
 80119ae:	1072      	asrs	r2, r6, #1
 80119b0:	0863      	lsrs	r3, r4, #1
 80119b2:	07f1      	lsls	r1, r6, #31
 80119b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80119b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80119bc:	bf48      	it	mi
 80119be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80119c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80119c6:	4618      	mov	r0, r3
 80119c8:	e756      	b.n	8011878 <__ieee754_sqrt+0x28>
 80119ca:	4690      	mov	r8, r2
 80119cc:	e7be      	b.n	801194c <__ieee754_sqrt+0xfc>
 80119ce:	f7ee fc65 	bl	800029c <__adddf3>
 80119d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	4640      	mov	r0, r8
 80119dc:	4649      	mov	r1, r9
 80119de:	f7ef f885 	bl	8000aec <__aeabi_dcmplt>
 80119e2:	b120      	cbz	r0, 80119ee <__ieee754_sqrt+0x19e>
 80119e4:	1ca0      	adds	r0, r4, #2
 80119e6:	bf08      	it	eq
 80119e8:	3601      	addeq	r6, #1
 80119ea:	3402      	adds	r4, #2
 80119ec:	e7df      	b.n	80119ae <__ieee754_sqrt+0x15e>
 80119ee:	1c63      	adds	r3, r4, #1
 80119f0:	f023 0401 	bic.w	r4, r3, #1
 80119f4:	e7db      	b.n	80119ae <__ieee754_sqrt+0x15e>
 80119f6:	bf00      	nop
 80119f8:	7ff00000 	.word	0x7ff00000
 80119fc:	200002d0 	.word	0x200002d0
 8011a00:	200002c8 	.word	0x200002c8

08011a04 <_init>:
 8011a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a06:	bf00      	nop
 8011a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a0a:	bc08      	pop	{r3}
 8011a0c:	469e      	mov	lr, r3
 8011a0e:	4770      	bx	lr

08011a10 <_fini>:
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	bf00      	nop
 8011a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a16:	bc08      	pop	{r3}
 8011a18:	469e      	mov	lr, r3
 8011a1a:	4770      	bx	lr
<<<<<<< HEAD
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
=======
>>>>>>> ba589f88c5c0d3c41fc62e627c44f500e650f5d9
