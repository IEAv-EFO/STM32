
EXERCICIO_AULA7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080086a0  080086a0  000096a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008730  08008730  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008738  08008738  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008738  08008738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800873c  0800873c  0000973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008740  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  2000014c  0800888c  0000a14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f1c  0800888c  0000af1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012482  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e2  00000000  00000000  0001c5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb5  00000000  00000000  00020798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d79  00000000  00000000  0002144d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ebc  00000000  00000000  0003a1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcbd  00000000  00000000  0004f082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ded3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  000ded84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e37ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008688 	.word	0x08008688

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008688 	.word	0x08008688

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 faf0 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f84a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f942 	bl	8000814 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000590:	f006 feca 	bl	8007328 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000594:	f000 f8ac 	bl	80006f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Ret = HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000598:	210c      	movs	r1, #12
 800059a:	4819      	ldr	r0, [pc, #100]	@ (8000600 <main+0x80>)
 800059c:	f002 fd6a 	bl	8003074 <HAL_TIM_PWM_Start>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0x84>)
 80005a6:	701a      	strb	r2, [r3, #0]
  if (Ret == HAL_OK) {
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0x84>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d105      	bne.n	80005bc <main+0x3c>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	4814      	ldr	r0, [pc, #80]	@ (8000608 <main+0x88>)
 80005b8:	f000 fe1a 	bl	80011f0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		extTrigger = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80005bc:	2120      	movs	r1, #32
 80005be:	4813      	ldr	r0, [pc, #76]	@ (800060c <main+0x8c>)
 80005c0:	f000 fdfe 	bl	80011c0 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <main+0x90>)
 80005ca:	701a      	strb	r2, [r3, #0]
		outTimer2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80005cc:	2108      	movs	r1, #8
 80005ce:	480f      	ldr	r0, [pc, #60]	@ (800060c <main+0x8c>)
 80005d0:	f000 fdf6 	bl	80011c0 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <main+0x94>)
 80005da:	701a      	strb	r2, [r3, #0]

		#if defined(ONEGRAPH)
			sprintf(buffer, "%d\n", outTimer2);
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <main+0x94>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	490d      	ldr	r1, [pc, #52]	@ (8000618 <main+0x98>)
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <main+0x9c>)
 80005e6:	f007 fbaf 	bl	8007d48 <siprintf>
			CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80005ea:	480c      	ldr	r0, [pc, #48]	@ (800061c <main+0x9c>)
 80005ec:	f7ff fdf8 	bl	80001e0 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	4809      	ldr	r0, [pc, #36]	@ (800061c <main+0x9c>)
 80005f8:	f006 ff54 	bl	80074a4 <CDC_Transmit_FS>
		extTrigger = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80005fc:	bf00      	nop
 80005fe:	e7dd      	b.n	80005bc <main+0x3c>
 8000600:	20000168 	.word	0x20000168
 8000604:	200001b0 	.word	0x200001b0
 8000608:	40020800 	.word	0x40020800
 800060c:	40020000 	.word	0x40020000
 8000610:	200001b1 	.word	0x200001b1
 8000614:	200001b2 	.word	0x200001b2
 8000618:	080086a0 	.word	0x080086a0
 800061c:	200001b4 	.word	0x200001b4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fbaa 	bl	8007d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a26      	ldr	r2, [pc, #152]	@ (80006e8 <SystemClock_Config+0xc8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <SystemClock_Config+0xcc>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000690:	230c      	movs	r3, #12
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000694:	2360      	movs	r3, #96	@ 0x60
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f80d 	bl	80026c4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f902 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fa6f 	bl	8002bb4 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 f8ec 	bl	80008b8 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	@ 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b092      	sub	sp, #72	@ 0x48
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8000738:	4b35      	ldr	r3, [pc, #212]	@ (8000810 <MX_TIM2_Init+0x120>)
 800073a:	225f      	movs	r2, #95	@ 0x5f
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b34      	ldr	r3, [pc, #208]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000744:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000746:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800074a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <MX_TIM2_Init+0x120>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000758:	482d      	ldr	r0, [pc, #180]	@ (8000810 <MX_TIM2_Init+0x120>)
 800075a:	f002 fbe3 	bl	8002f24 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000764:	f000 f8a8 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000772:	4619      	mov	r1, r3
 8000774:	4826      	ldr	r0, [pc, #152]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000776:	f002 fdef 	bl	8003358 <HAL_TIM_ConfigClockSource>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000780:	f000 f89a 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000784:	4822      	ldr	r0, [pc, #136]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000786:	f002 fc1c 	bl	8002fc2 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000790:	f000 f892 	bl	80008b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000794:	2304      	movs	r3, #4
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000798:	2350      	movs	r3, #80	@ 0x50
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 800079c:	230a      	movs	r3, #10
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.TriggerFilter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4819      	ldr	r0, [pc, #100]	@ (8000810 <MX_TIM2_Init+0x120>)
 80007ac:	f002 fe9b 	bl	80034e6 <HAL_TIM_SlaveConfigSynchro>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80007b6:	f000 f87f 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_TIM2_Init+0x120>)
 80007ca:	f003 fa37 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80007d4:	f000 f870 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d8:	2360      	movs	r3, #96	@ 0x60
 80007da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1150-1;
 80007dc:	f240 437d 	movw	r3, #1149	@ 0x47d
 80007e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	220c      	movs	r2, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	@ (8000810 <MX_TIM2_Init+0x120>)
 80007f2:	f002 fcef 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80007fc:	f000 f85c 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <MX_TIM2_Init+0x120>)
 8000802:	f000 f8cd 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3748      	adds	r7, #72	@ 0x48
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000168 	.word	0x20000168

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <MX_GPIO_Init+0xa0>)
 8000886:	f000 fcb3 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800088a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_GPIO_Init+0xa0>)
 80008a4:	f000 fb08 	bl	8000eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000934:	d12b      	bne.n	800098e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_TIM_Base_MspInit+0x84>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800097e:	2301      	movs	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <HAL_TIM_Base_MspInit+0x88>)
 800098a:	f000 fa95 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	@ 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c0:	d11d      	bne.n	80009fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009de:	2308      	movs	r3, #8
 80009e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009fa:	f000 fa5d 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f8d1 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <OTG_FS_IRQHandler+0x10>)
 8000a76:	f000 fd18 	bl	80014aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200016d0 	.word	0x200016d0

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f007 f970 	bl	8007d98 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200001e8 	.word	0x200001e8
 8000aec:	20001f20 	.word	0x20001f20

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f007 f92f 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd1b 	bl	8000580 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000b58:	08008740 	.word	0x08008740
  ldr r2, =_sbss
 8000b5c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000b60:	20001f1c 	.word	0x20001f1c

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f94f 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe92 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f967 	bl	8000e9e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f92f 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200001ec 	.word	0x200001ec

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200001ec 	.word	0x200001ec

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e159      	b.n	8001188 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8148 	bne.w	8001182 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	69b9      	ldr	r1, [r7, #24]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80a2 	beq.w	8001182 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <HAL_GPIO_Init+0x2e8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a56      	ldr	r2, [pc, #344]	@ (80011a0 <HAL_GPIO_Init+0x2e8>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b54      	ldr	r3, [pc, #336]	@ (80011a0 <HAL_GPIO_Init+0x2e8>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105a:	4a52      	ldr	r2, [pc, #328]	@ (80011a4 <HAL_GPIO_Init+0x2ec>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a49      	ldr	r2, [pc, #292]	@ (80011a8 <HAL_GPIO_Init+0x2f0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x202>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_GPIO_Init+0x2f4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x1fe>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a47      	ldr	r2, [pc, #284]	@ (80011b0 <HAL_GPIO_Init+0x2f8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x1fa>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a46      	ldr	r2, [pc, #280]	@ (80011b4 <HAL_GPIO_Init+0x2fc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x1f6>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a45      	ldr	r2, [pc, #276]	@ (80011b8 <HAL_GPIO_Init+0x300>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x1f2>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e008      	b.n	80010bc <HAL_GPIO_Init+0x204>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x204>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x204>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x204>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x204>
 80010ba:	2300      	movs	r3, #0
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010cc:	4935      	ldr	r1, [pc, #212]	@ (80011a4 <HAL_GPIO_Init+0x2ec>)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b38      	ldr	r3, [pc, #224]	@ (80011bc <HAL_GPIO_Init+0x304>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fe:	4a2f      	ldr	r2, [pc, #188]	@ (80011bc <HAL_GPIO_Init+0x304>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_GPIO_Init+0x304>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001128:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_GPIO_Init+0x304>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112e:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <HAL_GPIO_Init+0x304>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001152:	4a1a      	ldr	r2, [pc, #104]	@ (80011bc <HAL_GPIO_Init+0x304>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_GPIO_Init+0x304>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_GPIO_Init+0x304>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	f67f aea2 	bls.w	8000ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40013800 	.word	0x40013800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af02      	add	r7, sp, #8
 8001228:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e101      	b.n	8001438 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f006 fa70 	bl	8007734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001262:	d102      	bne.n	800126a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fe69 	bl	8003f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7c1a      	ldrb	r2, [r3, #16]
 800127c:	f88d 2000 	strb.w	r2, [sp]
 8001280:	3304      	adds	r3, #4
 8001282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001284:	f002 fd48 	bl	8003d18 <USB_CoreInit>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2202      	movs	r2, #2
 8001292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0ce      	b.n	8001438 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fe61 	bl	8003f68 <USB_SetCurrentMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0bf      	b.n	8001438 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e04a      	b.n	8001354 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	3315      	adds	r3, #21
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	3314      	adds	r3, #20
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	b298      	uxth	r0, r3
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	332e      	adds	r3, #46	@ 0x2e
 80012fa:	4602      	mov	r2, r0
 80012fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3318      	adds	r3, #24
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	331c      	adds	r3, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3320      	adds	r3, #32
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3324      	adds	r3, #36	@ 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	3301      	adds	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3af      	bcc.n	80012be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e044      	b.n	80013ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	3301      	adds	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3b5      	bcc.n	8001364 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7c1a      	ldrb	r2, [r3, #16]
 8001400:	f88d 2000 	strb.w	r2, [sp]
 8001404:	3304      	adds	r3, #4
 8001406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001408:	f002 fdfa 	bl	8004000 <USB_DevInit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00c      	b.n	8001438 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fe3e 	bl	80050b2 <USB_DevDisconnect>

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PCD_Start+0x1c>
 8001458:	2302      	movs	r3, #2
 800145a:	e022      	b.n	80014a2 <HAL_PCD_Start+0x62>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d009      	beq.n	8001484 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fd4b 	bl	8003f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fdec 	bl	8005070 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b08d      	sub	sp, #52	@ 0x34
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 feaa 	bl	800521a <USB_GetMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f040 848c 	bne.w	8001de6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fe0e 	bl	80050f4 <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8482 	beq.w	8001de4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fdfb 	bl	80050f4 <USB_ReadInterrupts>
 80014fe:	4603      	mov	r3, r0
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b02      	cmp	r3, #2
 8001506:	d107      	bne.n	8001518 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f002 0202 	and.w	r2, r2, #2
 8001516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fde9 	bl	80050f4 <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b10      	cmp	r3, #16
 800152a:	d161      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0210 	bic.w	r2, r2, #16
 800153a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f003 020f 	and.w	r2, r3, #15
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	0c5b      	lsrs	r3, r3, #17
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2b02      	cmp	r3, #2
 8001566:	d124      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d035      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800157e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	6a38      	ldr	r0, [r7, #32]
 8001588:	f003 fc20 	bl	8004dcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001598:	441a      	add	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015aa:	441a      	add	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	e016      	b.n	80015e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	0c5b      	lsrs	r3, r3, #17
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d110      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015c4:	2208      	movs	r2, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	6a38      	ldr	r0, [r7, #32]
 80015ca:	f003 fbff 	bl	8004dcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015da:	441a      	add	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0210 	orr.w	r2, r2, #16
 80015ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fd7d 	bl	80050f4 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001600:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001604:	f040 80a7 	bne.w	8001756 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fd82 	bl	800511a <USB_ReadDevAllOutEpInterrupt>
 8001616:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001618:	e099      	b.n	800174e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 808e 	beq.w	8001742 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fda6 	bl	8005182 <USB_ReadDevOutEPInterrupt>
 8001636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800164e:	461a      	mov	r2, r3
 8001650:	2301      	movs	r3, #1
 8001652:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fea2 	bl	80023a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00c      	beq.n	8001680 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001672:	461a      	mov	r2, r3
 8001674:	2308      	movs	r3, #8
 8001676:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 ff78 	bl	8002570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	2310      	movs	r3, #16
 800169a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d030      	beq.n	8001708 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ae:	2b80      	cmp	r3, #128	@ 0x80
 80016b0:	d109      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	3304      	adds	r3, #4
 80016da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2200      	movs	r2, #0
 80016e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f006 f91b 	bl	800792c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001702:	461a      	mov	r2, r3
 8001704:	2302      	movs	r3, #2
 8001706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800171e:	461a      	mov	r2, r3
 8001720:	2320      	movs	r3, #32
 8001722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800173a:	461a      	mov	r2, r3
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800174e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f af62 	bne.w	800161a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fcca 	bl	80050f4 <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001766:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800176a:	f040 80db 	bne.w	8001924 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fceb 	bl	800514e <USB_ReadDevAllInEpInterrupt>
 8001778:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800177e:	e0cd      	b.n	800191c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80c2 	beq.w	8001910 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fd11 	bl	80051be <USB_ReadDevInEPInterrupt>
 800179c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d057      	beq.n	8001858 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	2201      	movs	r2, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69f9      	ldr	r1, [r7, #28]
 80017c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80017c8:	4013      	ands	r3, r2
 80017ca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017d8:	461a      	mov	r2, r3
 80017da:	2301      	movs	r3, #1
 80017dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	799b      	ldrb	r3, [r3, #6]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d132      	bne.n	800184c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3320      	adds	r3, #32
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	331c      	adds	r3, #28
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4419      	add	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4403      	add	r3, r0
 800181a:	3320      	adds	r3, #32
 800181c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d113      	bne.n	800184c <HAL_PCD_IRQHandler+0x3a2>
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3324      	adds	r3, #36	@ 0x24
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001844:	461a      	mov	r2, r3
 8001846:	2101      	movs	r1, #1
 8001848:	f003 fd18 	bl	800527c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f005 ffef 	bl	8007836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800186e:	461a      	mov	r2, r3
 8001870:	2308      	movs	r3, #8
 8001872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188a:	461a      	mov	r2, r3
 800188c:	2310      	movs	r3, #16
 800188e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018a6:	461a      	mov	r2, r3
 80018a8:	2340      	movs	r3, #64	@ 0x40
 80018aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d023      	beq.n	80018fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018b8:	6a38      	ldr	r0, [r7, #32]
 80018ba:	f002 fd05 	bl	80042c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3310      	adds	r3, #16
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	3304      	adds	r3, #4
 80018d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	78db      	ldrb	r3, [r3, #3]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f006 f832 	bl	8007950 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018f8:	461a      	mov	r2, r3
 80018fa:	2302      	movs	r3, #2
 80018fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fcbb 	bl	8002286 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	3301      	adds	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f af2e 	bne.w	8001780 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fbe3 	bl	80050f4 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001938:	d122      	bne.n	8001980 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001960:	2100      	movs	r1, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fea2 	bl	80026ac <HAL_PCDEx_LPM_Callback>
 8001968:	e002      	b.n	8001970 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f005 ffd0 	bl	8007910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fbb5 	bl	80050f4 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001994:	d112      	bne.n	80019bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f005 ff8c 	bl	80078c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80019ba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fb97 	bl	80050f4 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019d0:	f040 80b7 	bne.w	8001b42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2110      	movs	r1, #16
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fc6a 	bl	80042c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019f8:	e046      	b.n	8001a88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a1e:	0151      	lsls	r1, r2, #5
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	440a      	add	r2, r1
 8001a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001a28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a52:	0151      	lsls	r1, r2, #5
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	440a      	add	r2, r1
 8001a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a72:	0151      	lsls	r1, r2, #5
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	440a      	add	r2, r1
 8001a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	3301      	adds	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d3b2      	bcc.n	80019fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001aa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7bdb      	ldrb	r3, [r3, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d016      	beq.n	8001ade <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ac0:	f043 030b 	orr.w	r3, r3, #11
 8001ac4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad6:	f043 030b 	orr.w	r3, r3, #11
 8001ada:	6453      	str	r3, [r2, #68]	@ 0x44
 8001adc:	e015      	b.n	8001b0a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001af0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001af4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b04:	f043 030b 	orr.w	r3, r3, #11
 8001b08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b18:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001b1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f003 fba5 	bl	800527c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fad4 	bl	80050f4 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b56:	d123      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fb6a 	bl	8005236 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fc27 	bl	80043ba <USB_GetDevSpeed>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681c      	ldr	r4, [r3, #0]
 8001b78:	f001 f9c8 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b82:	461a      	mov	r2, r3
 8001b84:	4620      	mov	r0, r4
 8001b86:	f002 f92b 	bl	8003de0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f005 fe7b 	bl	8007886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 faa5 	bl	80050f4 <USB_ReadInterrupts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d10a      	bne.n	8001bca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f005 fe58 	bl	800786a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f002 0208 	and.w	r2, r2, #8
 8001bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fa90 	bl	80050f4 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bda:	2b80      	cmp	r3, #128	@ 0x80
 8001bdc:	d123      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bea:	2301      	movs	r3, #1
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	e014      	b.n	8001c1a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fb08 	bl	8002224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	3301      	adds	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d3e4      	bcc.n	8001bf0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fa62 	bl	80050f4 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c3a:	d13c      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c40:	e02b      	b.n	8001c9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3318      	adds	r3, #24
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d115      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da12      	bge.n	8001c94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3317      	adds	r3, #23
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fac8 	bl	8002224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	3301      	adds	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d3cd      	bcc.n	8001c42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fa1a 	bl	80050f4 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cca:	d156      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ccc:	2301      	movs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd0:	e045      	b.n	8001d5e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12e      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da2b      	bge.n	8001d58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001d0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d121      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d54:	6053      	str	r3, [r2, #4]
            break;
 8001d56:	e008      	b.n	8001d6a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d3b3      	bcc.n	8001cd2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f9b8 	bl	80050f4 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8e:	d10a      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f005 fdef 	bl	8007974 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 f9a2 	bl	80050f4 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d115      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f005 fddf 	bl	8007990 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e000      	b.n	8001de6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001de4:	bf00      	nop
    }
  }
}
 8001de6:	3734      	adds	r7, #52	@ 0x34
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}

08001dec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_PCD_SetAddress+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e012      	b.n	8001e2c <HAL_PCD_SetAddress+0x40>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 f901 	bl	8005024 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	70fb      	strb	r3, [r7, #3]
 8001e46:	460b      	mov	r3, r1
 8001e48:	803b      	strh	r3, [r7, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da0f      	bge.n	8001e7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3310      	adds	r3, #16
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	705a      	strb	r2, [r3, #1]
 8001e78:	e00f      	b.n	8001e9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea6:	883a      	ldrh	r2, [r7, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	78ba      	ldrb	r2, [r7, #2]
 8001eb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Open+0xaa>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Open+0xc8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fa89 	bl	8004404 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da0f      	bge.n	8001f38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	3310      	adds	r3, #16
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	705a      	strb	r2, [r3, #1]
 8001f36:	e00f      	b.n	8001f58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_EP_Close+0x6e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e00e      	b.n	8001f90 <HAL_PCD_EP_Close+0x8c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fac7 	bl	8004514 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	799b      	ldrb	r3, [r3, #6]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6979      	ldr	r1, [r7, #20]
 8002000:	f002 fb64 	bl	80046cc <USB_EPStartXfer>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 020f 	and.w	r2, r3, #15
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002030:	681b      	ldr	r3, [r3, #0]
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	460b      	mov	r3, r1
 800204c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	3310      	adds	r3, #16
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	799b      	ldrb	r3, [r3, #6]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	799b      	ldrb	r3, [r3, #6]
 80020a0:	461a      	mov	r2, r3
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	f002 fb12 	bl	80046cc <USB_EPStartXfer>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	7912      	ldrb	r2, [r2, #4]
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e04f      	b.n	8002170 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da0f      	bge.n	80020f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	3310      	adds	r3, #16
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	705a      	strb	r2, [r3, #1]
 80020f6:	e00d      	b.n	8002114 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_PCD_EP_SetStall+0x82>
 8002130:	2302      	movs	r3, #2
 8002132:	e01d      	b.n	8002170 <HAL_PCD_EP_SetStall+0xbe>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fe9a 	bl	8004e7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7999      	ldrb	r1, [r3, #6]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002160:	461a      	mov	r2, r3
 8002162:	f003 f88b 	bl	800527c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7912      	ldrb	r2, [r2, #4]
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e042      	b.n	800221c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0f      	bge.n	80021be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3310      	adds	r3, #16
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	705a      	strb	r2, [r3, #1]
 80021bc:	e00f      	b.n	80021de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 020f 	and.w	r2, r3, #15
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_PCD_EP_ClrStall+0x86>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e00e      	b.n	800221c <HAL_PCD_EP_ClrStall+0xa4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fea3 	bl	8004f58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0c      	bge.n	8002252 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3310      	adds	r3, #16
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00c      	b.n	800226c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fcc2 	bl	8004bfc <USB_EPStopXfer>
 8002278:	4603      	mov	r3, r0
 800227a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800227c:	7afb      	ldrb	r3, [r7, #11]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b08a      	sub	sp, #40	@ 0x28
 800228a:	af02      	add	r7, sp, #8
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	3310      	adds	r3, #16
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d901      	bls.n	80022be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d902      	bls.n	80022da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3303      	adds	r3, #3
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022e2:	e02a      	b.n	800233a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d902      	bls.n	8002300 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3303      	adds	r3, #3
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	6978      	ldr	r0, [r7, #20]
 800231e:	f002 fd17 	bl	8004d50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	441a      	add	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	441a      	add	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	429a      	cmp	r2, r3
 800234e:	d809      	bhi.n	8002364 <PCD_WriteEmptyTxFifo+0xde>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002358:	429a      	cmp	r2, r3
 800235a:	d203      	bcs.n	8002364 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1bf      	bne.n	80022e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	d811      	bhi.n	8002394 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	2201      	movs	r2, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	43db      	mvns	r3, r3
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002390:	4013      	ands	r3, r2
 8002392:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	333c      	adds	r3, #60	@ 0x3c
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	799b      	ldrb	r3, [r3, #6]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d17b      	bne.n	80024ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4a61      	ldr	r2, [pc, #388]	@ (8002568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f240 80b9 	bls.w	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80b3 	beq.w	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002408:	6093      	str	r3, [r2, #8]
 800240a:	e0a7      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002422:	461a      	mov	r2, r3
 8002424:	2320      	movs	r3, #32
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	e098      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8093 	bne.w	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4a4b      	ldr	r2, [pc, #300]	@ (8002568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d90f      	bls.n	800245e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245a:	6093      	str	r3, [r2, #8]
 800245c:	e07e      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	440b      	add	r3, r1
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	1ad2      	subs	r2, r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024a8:	461a      	mov	r2, r3
 80024aa:	2101      	movs	r1, #1
 80024ac:	f002 fee6 	bl	800527c <USB_EP0_OutStart>
 80024b0:	e006      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f005 f99a 	bl	8007800 <HAL_PCD_DataOutStageCallback>
 80024cc:	e046      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4a26      	ldr	r2, [pc, #152]	@ (800256c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d124      	bne.n	8002520 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ec:	461a      	mov	r2, r3
 80024ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024f2:	6093      	str	r3, [r2, #8]
 80024f4:	e032      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	2320      	movs	r3, #32
 8002510:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f005 f971 	bl	8007800 <HAL_PCD_DataOutStageCallback>
 800251e:	e01d      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d114      	bne.n	8002550 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002548:	461a      	mov	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	f002 fe96 	bl	800527c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f005 f952 	bl	8007800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	4f54300a 	.word	0x4f54300a
 800256c:	4f54310a 	.word	0x4f54310a

08002570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	333c      	adds	r3, #60	@ 0x3c
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d90e      	bls.n	80025c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025bc:	461a      	mov	r2, r3
 80025be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 f909 	bl	80077dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d90c      	bls.n	80025ec <PCD_EP_OutSetupPacket_int+0x7c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	799b      	ldrb	r3, [r3, #6]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	f002 fe48 	bl	800527c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	4f54300a 	.word	0x4f54300a

080025fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
 8002608:	4613      	mov	r3, r2
 800260a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800261a:	883b      	ldrh	r3, [r7, #0]
 800261c:	0419      	lsls	r1, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	430a      	orrs	r2, r1
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
 8002628:	e028      	b.n	800267c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4413      	add	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e00d      	b.n	800265a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3340      	adds	r3, #64	@ 0x40
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	3b01      	subs	r3, #1
 8002660:	429a      	cmp	r2, r3
 8002662:	d3ec      	bcc.n	800263e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002664:	883b      	ldrh	r3, [r7, #0]
 8002666:	0418      	lsls	r0, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	3b01      	subs	r3, #1
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4302      	orrs	r2, r0
 8002674:	3340      	adds	r3, #64	@ 0x40
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e267      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d075      	beq.n	80027ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d00c      	beq.n	8002708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d112      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4b82      	ldr	r3, [pc, #520]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002706:	d10b      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4b7e      	ldr	r3, [pc, #504]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05b      	beq.n	80027cc <HAL_RCC_OscConfig+0x108>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d157      	bne.n	80027cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e242      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x74>
 800272a:	4b76      	ldr	r3, [pc, #472]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a75      	ldr	r2, [pc, #468]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x98>
 8002742:	4b70      	ldr	r3, [pc, #448]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6f      	ldr	r2, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6c      	ldr	r2, [pc, #432]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 800275c:	4b69      	ldr	r3, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a68      	ldr	r2, [pc, #416]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fa5a 	bl	8000c34 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fa56 	bl	8000c34 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e207      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xc0>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fa46 	bl	8000c34 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fa42 	bl	8000c34 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1f3      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b51      	ldr	r3, [pc, #324]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0xe8>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1c7      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4937      	ldr	r1, [pc, #220]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x244>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe f9fb 	bl	8000c34 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe f9f7 	bl	8000c34 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1a8      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4925      	ldr	r1, [pc, #148]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_OscConfig+0x244>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe f9da 	bl	8000c34 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002884:	f7fe f9d6 	bl	8000c34 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e187      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d036      	beq.n	800291c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_RCC_OscConfig+0x248>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe f9ba 	bl	8000c34 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe f9b6 	bl	8000c34 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e167      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80028d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x200>
 80028e2:	e01b      	b.n	800291c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_OscConfig+0x248>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe f9a3 	bl	8000c34 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	e00e      	b.n	8002910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe f99f 	bl	8000c34 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d907      	bls.n	8002910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e150      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	42470000 	.word	0x42470000
 800290c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ea      	bne.n	80028f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8097 	beq.w	8002a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	4a7c      	ldr	r2, [pc, #496]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	@ 0x40
 800294a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b77      	ldr	r3, [pc, #476]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b74      	ldr	r3, [pc, #464]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a73      	ldr	r2, [pc, #460]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7fe f95f 	bl	8000c34 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe f95b 	bl	8000c34 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e10c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x2ea>
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4a63      	ldr	r2, [pc, #396]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x30c>
 80029b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029d0:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	4a54      	ldr	r2, [pc, #336]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe f920 	bl	8000c34 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe f91c 	bl	8000c34 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0cb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ee      	beq.n	80029f8 <HAL_RCC_OscConfig+0x334>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f90a 	bl	8000c34 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe f906 	bl	8000c34 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0b5      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b39      	ldr	r3, [pc, #228]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	4a38      	ldr	r2, [pc, #224]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a1 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a62:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d05c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d141      	bne.n	8002afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f8da 	bl	8000c34 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe f8d6 	bl	8000c34 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e087      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	491b      	ldr	r1, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f8af 	bl	8000c34 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe f8ab 	bl	8000c34 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e05c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x416>
 8002af8:	e054      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe f898 	bl	8000c34 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe f894 	bl	8000c34 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e045      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x444>
 8002b26:	e03d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e038      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x4ec>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d11a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0cc      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b68      	ldr	r3, [pc, #416]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d90c      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b63      	ldr	r3, [pc, #396]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b8      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b59      	ldr	r3, [pc, #356]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	494d      	ldr	r1, [pc, #308]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b3f      	ldr	r3, [pc, #252]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e067      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4934      	ldr	r1, [pc, #208]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fd ffc6 	bl	8000c34 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fd ffc2 	bl	8000c34 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e04f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d20c      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4916      	ldr	r1, [pc, #88]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490e      	ldr	r1, [pc, #56]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3a:	f000 f821 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490a      	ldr	r1, [pc, #40]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd ff26 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080086ec 	.word	0x080086ec
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b090      	sub	sp, #64	@ 0x40
 8002d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d98:	4b59      	ldr	r3, [pc, #356]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f200 80a1 	bhi.w	8002eec <HAL_RCC_GetSysClockFreq+0x16c>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x3a>
 8002db2:	e09b      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b53      	ldr	r3, [pc, #332]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002db8:	e09b      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dbe:	e098      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dca:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002de8:	2100      	movs	r1, #0
 8002dea:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dec:	fb03 f201 	mul.w	r2, r3, r1
 8002df0:	2300      	movs	r3, #0
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	4a43      	ldr	r2, [pc, #268]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfa:	fba0 1202 	umull	r1, r2, r0, r2
 8002dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e00:	460a      	mov	r2, r1
 8002e02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e06:	4413      	add	r3, r2
 8002e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	61fa      	str	r2, [r7, #28]
 8002e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e1a:	f7fd fa39 	bl	8000290 <__aeabi_uldivmod>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4613      	mov	r3, r2
 8002e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e26:	e053      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4b35      	ldr	r3, [pc, #212]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	2200      	movs	r2, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	617a      	str	r2, [r7, #20]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e3a:	f04f 0b00 	mov.w	fp, #0
 8002e3e:	4652      	mov	r2, sl
 8002e40:	465b      	mov	r3, fp
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	0159      	lsls	r1, r3, #5
 8002e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e50:	0150      	lsls	r0, r2, #5
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	ebb2 080a 	subs.w	r8, r2, sl
 8002e5a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e72:	ebb2 0408 	subs.w	r4, r2, r8
 8002e76:	eb63 0509 	sbc.w	r5, r3, r9
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	00eb      	lsls	r3, r5, #3
 8002e84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e88:	00e2      	lsls	r2, r4, #3
 8002e8a:	4614      	mov	r4, r2
 8002e8c:	461d      	mov	r5, r3
 8002e8e:	eb14 030a 	adds.w	r3, r4, sl
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	eb45 030b 	adc.w	r3, r5, fp
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	028b      	lsls	r3, r1, #10
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	028a      	lsls	r2, r1, #10
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	60fa      	str	r2, [r7, #12]
 8002ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec4:	f7fd f9e4 	bl	8000290 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	3301      	adds	r3, #1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3740      	adds	r7, #64	@ 0x40
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	016e3600 	.word	0x016e3600

08002f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e041      	b.n	8002fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fce2 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f000 fb02 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e041      	b.n	8003058 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f839 	bl	8003060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 fab3 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start+0x24>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e022      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x3e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e015      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x58>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e008      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e068      	b.n	80031b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x82>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	e013      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start+0x92>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003104:	e00b      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start+0xa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003114:	e003      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd63 	bl	8003bf2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <HAL_TIM_PWM_Start+0x14c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d107      	bne.n	8003146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <HAL_TIM_PWM_Start+0x14c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_TIM_PWM_Start+0x10e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003158:	d013      	beq.n	8003182 <HAL_TIM_PWM_Start+0x10e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_TIM_PWM_Start+0x150>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_TIM_PWM_Start+0x10e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <HAL_TIM_PWM_Start+0x154>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_TIM_PWM_Start+0x10e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a16      	ldr	r2, [pc, #88]	@ (80031cc <HAL_TIM_PWM_Start+0x158>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_TIM_PWM_Start+0x10e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_TIM_PWM_Start+0x15c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d111      	bne.n	80031a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d010      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a4:	e007      	b.n	80031b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40014000 	.word	0x40014000

080031d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0ae      	b.n	8003350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f200 809f 	bhi.w	8003340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003202:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003341 	.word	0x08003341
 8003210:	08003341 	.word	0x08003341
 8003214:	08003341 	.word	0x08003341
 8003218:	0800327d 	.word	0x0800327d
 800321c:	08003341 	.word	0x08003341
 8003220:	08003341 	.word	0x08003341
 8003224:	08003341 	.word	0x08003341
 8003228:	080032bf 	.word	0x080032bf
 800322c:	08003341 	.word	0x08003341
 8003230:	08003341 	.word	0x08003341
 8003234:	08003341 	.word	0x08003341
 8003238:	080032ff 	.word	0x080032ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa1e 	bl	8003684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	619a      	str	r2, [r3, #24]
      break;
 800327a:	e064      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa64 	bl	8003750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	021a      	lsls	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]
      break;
 80032bc:	e043      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 faaf 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0208 	orr.w	r2, r2, #8
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0204 	bic.w	r2, r2, #4
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
      break;
 80032fc:	e023      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 faf9 	bl	80038fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	61da      	str	r2, [r3, #28]
      break;
 800333e:	e002      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
      break;
 8003344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x1c>
 8003370:	2302      	movs	r3, #2
 8003372:	e0b4      	b.n	80034de <HAL_TIM_ConfigClockSource+0x186>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800339a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ac:	d03e      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xd4>
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b2:	f200 8087 	bhi.w	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ba:	f000 8086 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x172>
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c2:	d87f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b70      	cmp	r3, #112	@ 0x70
 80033c6:	d01a      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xa6>
 80033c8:	2b70      	cmp	r3, #112	@ 0x70
 80033ca:	d87b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	2b60      	cmp	r3, #96	@ 0x60
 80033ce:	d050      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x11a>
 80033d0:	2b60      	cmp	r3, #96	@ 0x60
 80033d2:	d877      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033d4:	2b50      	cmp	r3, #80	@ 0x50
 80033d6:	d03c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xfa>
 80033d8:	2b50      	cmp	r3, #80	@ 0x50
 80033da:	d873      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d058      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x13a>
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d86f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e4:	2b30      	cmp	r3, #48	@ 0x30
 80033e6:	d064      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033e8:	2b30      	cmp	r3, #48	@ 0x30
 80033ea:	d86b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d060      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d867      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d05a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	e062      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800340e:	f000 fbd0 	bl	8003bb2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
      break;
 800342a:	e04f      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343c:	f000 fbb9 	bl	8003bb2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e03c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	461a      	mov	r2, r3
 8003460:	f000 fb2d 	bl	8003abe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2150      	movs	r1, #80	@ 0x50
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fb86 	bl	8003b7c <TIM_ITRx_SetConfig>
      break;
 8003470:	e02c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fb4c 	bl	8003b1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2160      	movs	r1, #96	@ 0x60
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb76 	bl	8003b7c <TIM_ITRx_SetConfig>
      break;
 8003490:	e01c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fb0d 	bl	8003abe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2140      	movs	r1, #64	@ 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb66 	bl	8003b7c <TIM_ITRx_SetConfig>
      break;
 80034b0:	e00c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fb5d 	bl	8003b7c <TIM_ITRx_SetConfig>
      break;
 80034c2:	e003      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      break;
 80034c8:	e000      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e031      	b.n	8003562 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa43 	bl	800399c <TIM_SlaveTimer_SetConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e018      	b.n	8003562 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800353e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800354e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3a      	ldr	r2, [pc, #232]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a37      	ldr	r2, [pc, #220]	@ (800366c <TIM_Base_SetConfig+0x100>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a36      	ldr	r2, [pc, #216]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a35      	ldr	r2, [pc, #212]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c4:	d017      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a28      	ldr	r2, [pc, #160]	@ (800366c <TIM_Base_SetConfig+0x100>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00f      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	@ (8003678 <TIM_Base_SetConfig+0x10c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a24      	ldr	r2, [pc, #144]	@ (800367c <TIM_Base_SetConfig+0x110>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <TIM_Base_SetConfig+0x114>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
  }
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0201 	bic.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0302 	bic.w	r3, r3, #2
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <TIM_OC1_SetConfig+0xc8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10c      	bne.n	80036fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0308 	bic.w	r3, r3, #8
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a13      	ldr	r2, [pc, #76]	@ (800374c <TIM_OC1_SetConfig+0xc8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40010000 	.word	0x40010000

08003750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 0210 	bic.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10d      	bne.n	80037cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d113      	bne.n	80037fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <TIM_OC3_SetConfig+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10d      	bne.n	80038a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800388c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <TIM_OC3_SetConfig+0xd0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000

080038fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <TIM_OC4_SetConfig+0x9c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000

0800399c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b70      	cmp	r3, #112	@ 0x70
 80039e4:	d01a      	beq.n	8003a1c <TIM_SlaveTimer_SetConfig+0x80>
 80039e6:	2b70      	cmp	r3, #112	@ 0x70
 80039e8:	d860      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 80039ea:	2b60      	cmp	r3, #96	@ 0x60
 80039ec:	d054      	beq.n	8003a98 <TIM_SlaveTimer_SetConfig+0xfc>
 80039ee:	2b60      	cmp	r3, #96	@ 0x60
 80039f0:	d85c      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 80039f2:	2b50      	cmp	r3, #80	@ 0x50
 80039f4:	d046      	beq.n	8003a84 <TIM_SlaveTimer_SetConfig+0xe8>
 80039f6:	2b50      	cmp	r3, #80	@ 0x50
 80039f8:	d858      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d019      	beq.n	8003a32 <TIM_SlaveTimer_SetConfig+0x96>
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d854      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 8003a02:	2b30      	cmp	r3, #48	@ 0x30
 8003a04:	d055      	beq.n	8003ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8003a06:	2b30      	cmp	r3, #48	@ 0x30
 8003a08:	d850      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d051      	beq.n	8003ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d84c      	bhi.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04d      	beq.n	8003ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d04b      	beq.n	8003ab2 <TIM_SlaveTimer_SetConfig+0x116>
 8003a1a:	e047      	b.n	8003aac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	f000 f8c1 	bl	8003bb2 <TIM_ETR_SetConfig>
      break;
 8003a30:	e040      	b.n	8003ab4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d101      	bne.n	8003a3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03b      	b.n	8003ab6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
      break;
 8003a82:	e017      	b.n	8003ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 f814 	bl	8003abe <TIM_TI1_ConfigInputStage>
      break;
 8003a96:	e00d      	b.n	8003ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f000 f839 	bl	8003b1c <TIM_TI2_ConfigInputStage>
      break;
 8003aaa:	e003      	b.n	8003ab4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab0:	e000      	b.n	8003ab4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003ab2:	bf00      	nop
  }

  return status;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0201 	bic.w	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 030a 	bic.w	r3, r3, #10
 8003afa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	621a      	str	r2, [r3, #32]
}
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	031b      	lsls	r3, r3, #12
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f043 0307 	orr.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	021a      	lsls	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2201      	movs	r2, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e050      	b.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca0:	d013      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	@ (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000

08003d18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d18:	b084      	sub	sp, #16
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	f107 001c 	add.w	r0, r7, #28
 8003d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d123      	bne.n	8003d7a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d105      	bne.n	8003d6e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f001 fae2 	bl	8005338 <USB_CoreReset>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e01b      	b.n	8003db2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 fad6 	bl	8005338 <USB_CoreReset>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003da4:	e005      	b.n	8003db2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003db2:	7fbb      	ldrb	r3, [r7, #30]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10b      	bne.n	8003dd0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f043 0206 	orr.w	r2, r3, #6
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ddc:	b004      	add	sp, #16
 8003dde:	4770      	bx	lr

08003de0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d165      	bne.n	8003ec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4a41      	ldr	r2, [pc, #260]	@ (8003efc <USB_SetTurnaroundTime+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d906      	bls.n	8003e0a <USB_SetTurnaroundTime+0x2a>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	@ (8003f00 <USB_SetTurnaroundTime+0x120>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d202      	bcs.n	8003e0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e04:	230f      	movs	r3, #15
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e062      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f00 <USB_SetTurnaroundTime+0x120>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d306      	bcc.n	8003e20 <USB_SetTurnaroundTime+0x40>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4a3b      	ldr	r2, [pc, #236]	@ (8003f04 <USB_SetTurnaroundTime+0x124>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d202      	bcs.n	8003e20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e1a:	230e      	movs	r3, #14
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e057      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <USB_SetTurnaroundTime+0x124>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d306      	bcc.n	8003e36 <USB_SetTurnaroundTime+0x56>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a37      	ldr	r2, [pc, #220]	@ (8003f08 <USB_SetTurnaroundTime+0x128>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d202      	bcs.n	8003e36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e30:	230d      	movs	r3, #13
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e04c      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a33      	ldr	r2, [pc, #204]	@ (8003f08 <USB_SetTurnaroundTime+0x128>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d306      	bcc.n	8003e4c <USB_SetTurnaroundTime+0x6c>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4a32      	ldr	r2, [pc, #200]	@ (8003f0c <USB_SetTurnaroundTime+0x12c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d802      	bhi.n	8003e4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e46:	230c      	movs	r3, #12
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e041      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f0c <USB_SetTurnaroundTime+0x12c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d906      	bls.n	8003e62 <USB_SetTurnaroundTime+0x82>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <USB_SetTurnaroundTime+0x130>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d802      	bhi.n	8003e62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e5c:	230b      	movs	r3, #11
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e036      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	@ (8003f10 <USB_SetTurnaroundTime+0x130>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d906      	bls.n	8003e78 <USB_SetTurnaroundTime+0x98>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <USB_SetTurnaroundTime+0x134>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d802      	bhi.n	8003e78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e72:	230a      	movs	r3, #10
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e02b      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <USB_SetTurnaroundTime+0x134>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d906      	bls.n	8003e8e <USB_SetTurnaroundTime+0xae>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <USB_SetTurnaroundTime+0x138>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d202      	bcs.n	8003e8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e88:	2309      	movs	r3, #9
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e020      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <USB_SetTurnaroundTime+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d306      	bcc.n	8003ea4 <USB_SetTurnaroundTime+0xc4>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a20      	ldr	r2, [pc, #128]	@ (8003f1c <USB_SetTurnaroundTime+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d802      	bhi.n	8003ea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e015      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f1c <USB_SetTurnaroundTime+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d906      	bls.n	8003eba <USB_SetTurnaroundTime+0xda>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <USB_SetTurnaroundTime+0x140>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d202      	bcs.n	8003eba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003eb4:	2307      	movs	r3, #7
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e00a      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003eba:	2306      	movs	r3, #6
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e007      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e001      	b.n	8003ed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ecc:	2309      	movs	r3, #9
 8003ece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	00d8acbf 	.word	0x00d8acbf
 8003f00:	00e4e1c0 	.word	0x00e4e1c0
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	01067380 	.word	0x01067380
 8003f0c:	011a499f 	.word	0x011a499f
 8003f10:	01312cff 	.word	0x01312cff
 8003f14:	014ca43f 	.word	0x014ca43f
 8003f18:	016e3600 	.word	0x016e3600
 8003f1c:	01a6ab1f 	.word	0x01a6ab1f
 8003f20:	01e84800 	.word	0x01e84800

08003f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f96:	200a      	movs	r0, #10
 8003f98:	f7fc fe58 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	330a      	adds	r3, #10
 8003fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f001 f939 	bl	800521a <USB_GetMode>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d01e      	beq.n	8003fec <USB_SetCurrentMode+0x84>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fb2:	d9f0      	bls.n	8003f96 <USB_SetCurrentMode+0x2e>
 8003fb4:	e01a      	b.n	8003fec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d115      	bne.n	8003fe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f7fc fe3f 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	330a      	adds	r3, #10
 8003fd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 f920 	bl	800521a <USB_GetMode>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <USB_SetCurrentMode+0x84>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fe4:	d9f0      	bls.n	8003fc8 <USB_SetCurrentMode+0x60>
 8003fe6:	e001      	b.n	8003fec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e005      	b.n	8003ff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ff0:	d101      	bne.n	8003ff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800400e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e009      	b.n	8004034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3340      	adds	r3, #64	@ 0x40
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3301      	adds	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0e      	cmp	r3, #14
 8004038:	d9f2      	bls.n	8004020 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800403a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11c      	bne.n	800407c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38
 800407a:	e00b      	b.n	8004094 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004080:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800409a:	461a      	mov	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d10d      	bne.n	80040c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040b0:	2100      	movs	r1, #0
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f968 	bl	8004388 <USB_SetDevSpeed>
 80040b8:	e008      	b.n	80040cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040ba:	2101      	movs	r1, #1
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f963 	bl	8004388 <USB_SetDevSpeed>
 80040c2:	e003      	b.n	80040cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040c4:	2103      	movs	r1, #3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f95e 	bl	8004388 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040cc:	2110      	movs	r1, #16
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8fa 	bl	80042c8 <USB_FlushTxFifo>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f924 	bl	800432c <USB_FlushRxFifo>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f4:	461a      	mov	r2, r3
 80040f6:	2300      	movs	r3, #0
 80040f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e043      	b.n	80041a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800412a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412e:	d118      	bne.n	8004162 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e013      	b.n	8004174 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e008      	b.n	8004174 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004192:	461a      	mov	r2, r3
 8004194:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041a4:	461a      	mov	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d3b5      	bcc.n	8004118 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e043      	b.n	800423a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041c8:	d118      	bne.n	80041fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e013      	b.n	800420e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e008      	b.n	800420e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3301      	adds	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800423e:	461a      	mov	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4293      	cmp	r3, r2
 8004244:	d3b5      	bcc.n	80041b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004258:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004266:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <USB_DevInit+0x2c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004288:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f043 0208 	orr.w	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800429c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042c0:	b004      	add	sp, #16
 80042c2:	4770      	bx	lr
 80042c4:	803c3800 	.word	0x803c3800

080042c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3301      	adds	r3, #1
 80042da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042e2:	d901      	bls.n	80042e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e01b      	b.n	8004320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	daf2      	bge.n	80042d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	019b      	lsls	r3, r3, #6
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800430c:	d901      	bls.n	8004312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e006      	b.n	8004320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b20      	cmp	r3, #32
 800431c:	d0f0      	beq.n	8004300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004344:	d901      	bls.n	800434a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e018      	b.n	800437c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	daf2      	bge.n	8004338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2210      	movs	r2, #16
 800435a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004368:	d901      	bls.n	800436e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e006      	b.n	800437c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d0f0      	beq.n	800435c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0306 	and.w	r3, r3, #6
 80043d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
 80043de:	e00a      	b.n	80043f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d002      	beq.n	80043ec <USB_GetDevSpeed+0x32>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d102      	bne.n	80043f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043ec:	2302      	movs	r3, #2
 80043ee:	75fb      	strb	r3, [r7, #23]
 80043f0:	e001      	b.n	80043f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043f2:	230f      	movs	r3, #15
 80043f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d13a      	bne.n	8004496 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	b29b      	uxth	r3, r3
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800443e:	4313      	orrs	r3, r2
 8004440:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d155      	bne.n	8004504 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004474:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800447c:	4313      	orrs	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e036      	b.n	8004504 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	2101      	movs	r1, #1
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11a      	bne.n	8004504 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044ea:	430b      	orrs	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d161      	bne.n	80045f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004546:	d11f      	bne.n	8004588 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004562:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004566:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	b29b      	uxth	r3, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a8:	4013      	ands	r3, r2
 80045aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045cc:	4013      	ands	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0159      	lsls	r1, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	4619      	mov	r1, r3
 80045ec:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <USB_DeactivateEndpoint+0x1b0>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
 80045f2:	e060      	b.n	80046b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800460a:	d11f      	bne.n	800464c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004626:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800462a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800464a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	43db      	mvns	r3, r3
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800466c:	4013      	ands	r3, r2
 800466e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	43db      	mvns	r3, r3
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004690:	4013      	ands	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0159      	lsls	r1, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	440b      	add	r3, r1
 80046aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ae:	4619      	mov	r1, r3
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <USB_DeactivateEndpoint+0x1b4>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	ec337800 	.word	0xec337800
 80046c8:	eff37800 	.word	0xeff37800

080046cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	@ 0x28
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 817a 	bne.w	80049e2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d132      	bne.n	800475c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004710:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004714:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004754:	0cdb      	lsrs	r3, r3, #19
 8004756:	04db      	lsls	r3, r3, #19
 8004758:	6113      	str	r3, [r2, #16]
 800475a:	e092      	b.n	8004882 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004776:	0cdb      	lsrs	r3, r3, #19
 8004778:	04db      	lsls	r3, r3, #19
 800477a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004796:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800479a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800479e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11a      	bne.n	80047dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d903      	bls.n	80047ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047d8:	6113      	str	r3, [r2, #16]
 80047da:	e01b      	b.n	8004814 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6919      	ldr	r1, [r3, #16]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	440b      	add	r3, r1
 80047f4:	1e59      	subs	r1, r3, #1
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004800:	4ba2      	ldr	r3, [pc, #648]	@ (8004a8c <USB_EPStartXfer+0x3c0>)
 8004802:	400b      	ands	r3, r1
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	0148      	lsls	r0, r1, #5
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	4401      	add	r1, r0
 800480c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	0148      	lsls	r0, r1, #5
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	4401      	add	r1, r0
 8004832:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	791b      	ldrb	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d11f      	bne.n	8004882 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800485c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004860:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800487c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004880:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d14b      	bne.n	8004920 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	791b      	ldrb	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d128      	bne.n	80048fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d110      	bne.n	80048de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e00f      	b.n	80048fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004918:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e165      	b.n	8004bec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800493a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800493e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d015      	beq.n	8004974 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 814d 	beq.w	8004bec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	69f9      	ldr	r1, [r7, #28]
 800496a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800496e:	4313      	orrs	r3, r2
 8004970:	634b      	str	r3, [r1, #52]	@ 0x34
 8004972:	e13b      	b.n	8004bec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d110      	bne.n	80049a6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800499e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e00f      	b.n	80049c6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	b298      	uxth	r0, r3
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4603      	mov	r3, r0
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f9b8 	bl	8004d50 <USB_WritePacket>
 80049e0:	e104      	b.n	8004bec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049fc:	0cdb      	lsrs	r3, r3, #19
 80049fe:	04db      	lsls	r3, r3, #19
 8004a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a24:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d131      	bne.n	8004a90 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5a:	69b9      	ldr	r1, [r7, #24]
 8004a5c:	0148      	lsls	r0, r1, #5
 8004a5e:	69f9      	ldr	r1, [r7, #28]
 8004a60:	4401      	add	r1, r0
 8004a62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a88:	6113      	str	r3, [r2, #16]
 8004a8a:	e061      	b.n	8004b50 <USB_EPStartXfer+0x484>
 8004a8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d123      	bne.n	8004ae0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	0148      	lsls	r0, r1, #5
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	4401      	add	r1, r0
 8004ab6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004adc:	6113      	str	r3, [r2, #16]
 8004ade:	e037      	b.n	8004b50 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4413      	add	r3, r2
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	8afa      	ldrh	r2, [r7, #22]
 8004afc:	fb03 f202 	mul.w	r2, r3, r2
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	8afb      	ldrh	r3, [r7, #22]
 8004b14:	04d9      	lsls	r1, r3, #19
 8004b16:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <USB_EPStartXfer+0x52c>)
 8004b18:	400b      	ands	r3, r1
 8004b1a:	69b9      	ldr	r1, [r7, #24]
 8004b1c:	0148      	lsls	r0, r1, #5
 8004b1e:	69f9      	ldr	r1, [r7, #28]
 8004b20:	4401      	add	r1, r0
 8004b22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	0148      	lsls	r0, r1, #5
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	4401      	add	r1, r0
 8004b48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10d      	bne.n	8004b72 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	460a      	mov	r2, r1
 8004b70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d128      	bne.n	8004bcc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d110      	bne.n	8004bac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e00f      	b.n	8004bcc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	1ff80000 	.word	0x1ff80000

08004bfc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d14a      	bne.n	8004cb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c32:	f040 8086 	bne.w	8004d42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d902      	bls.n	8004c94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
          break;
 8004c92:	e056      	b.n	8004d42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cac:	d0e7      	beq.n	8004c7e <USB_EPStopXfer+0x82>
 8004cae:	e048      	b.n	8004d42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc8:	d13b      	bne.n	8004d42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	7812      	ldrb	r2, [r2, #0]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d902      	bls.n	8004d28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
          break;
 8004d26:	e00c      	b.n	8004d42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d40:	d0e7      	beq.n	8004d12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	@ 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	460b      	mov	r3, r1
 8004d60:	71fb      	strb	r3, [r7, #7]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d123      	bne.n	8004dbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d76:	88bb      	ldrh	r3, [r7, #4]
 8004d78:	3303      	adds	r3, #3
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e018      	b.n	8004db6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	031a      	lsls	r2, r3, #12
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d90:	461a      	mov	r2, r3
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	3301      	adds	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3301      	adds	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d3e2      	bcc.n	8004d84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3724      	adds	r7, #36	@ 0x24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b08b      	sub	sp, #44	@ 0x2c
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
 8004df6:	e014      	b.n	8004e22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	3301      	adds	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	3301      	adds	r3, #1
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	3301      	adds	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d3e6      	bcc.n	8004df8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e2a:	8bfb      	ldrh	r3, [r7, #30]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01e      	beq.n	8004e6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	701a      	strb	r2, [r3, #0]
      i++;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	3301      	adds	r3, #1
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004e62:	8bfb      	ldrh	r3, [r7, #30]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e68:	8bfb      	ldrh	r3, [r7, #30]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1ea      	bne.n	8004e44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	372c      	adds	r7, #44	@ 0x2c
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d12c      	bne.n	8004ef2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db12      	blt.n	8004ed0 <USB_EPSetStall+0x54>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00f      	beq.n	8004ed0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ece:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e02b      	b.n	8004f4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db12      	blt.n	8004f2a <USB_EPSetStall+0xae>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00f      	beq.n	8004f2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d128      	bne.n	8004fc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	791b      	ldrb	r3, [r3, #4]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d003      	beq.n	8004fa4 <USB_EPClearStall+0x4c>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d138      	bne.n	8005016 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e027      	b.n	8005016 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fe0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fe4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d003      	beq.n	8004ff6 <USB_EPClearStall+0x9e>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d10f      	bne.n	8005016 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005014:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005042:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005046:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005058:	68f9      	ldr	r1, [r7, #12]
 800505a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800509e:	f023 0302 	bic.w	r3, r3, #2
 80050a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050cc:	f023 0303 	bic.w	r3, r3, #3
 80050d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	0c1b      	lsrs	r3, r3, #16
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	b29b      	uxth	r3, r3
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4013      	ands	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051b0:	68bb      	ldr	r3, [r7, #8]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051be:	b480      	push	{r7}
 80051c0:	b087      	sub	sp, #28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	01db      	lsls	r3, r3, #7
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800520c:	68bb      	ldr	r3, [r7, #8]
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0301 	and.w	r3, r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005250:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005254:	f023 0307 	bic.w	r3, r3, #7
 8005258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	460b      	mov	r3, r1
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	333c      	adds	r3, #60	@ 0x3c
 8005292:	3304      	adds	r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4a26      	ldr	r2, [pc, #152]	@ (8005334 <USB_EP0_OutStart+0xb8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d90a      	bls.n	80052b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052b0:	d101      	bne.n	80052b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e037      	b.n	8005326 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052e4:	f043 0318 	orr.w	r3, r3, #24
 80052e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80052fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10f      	bne.n	8005324 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800531e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	4f54300a 	.word	0x4f54300a

08005338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005350:	d901      	bls.n	8005356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e01b      	b.n	800538e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	daf2      	bge.n	8005344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f043 0201 	orr.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537a:	d901      	bls.n	8005380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d0f0      	beq.n	800536e <USB_CoreReset+0x36>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80053ac:	f002 fc88 	bl	8007cc0 <USBD_static_malloc>
 80053b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	32b0      	adds	r2, #176	@ 0xb0
 80053c2:	2100      	movs	r1, #0
 80053c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053c8:	2302      	movs	r3, #2
 80053ca:	e0d4      	b.n	8005576 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f002 fcd8 	bl	8007d88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	32b0      	adds	r2, #176	@ 0xb0
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	32b0      	adds	r2, #176	@ 0xb0
 80053f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7c1b      	ldrb	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d138      	bne.n	8005476 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005404:	4b5e      	ldr	r3, [pc, #376]	@ (8005580 <USBD_CDC_Init+0x1e4>)
 8005406:	7819      	ldrb	r1, [r3, #0]
 8005408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800540c:	2202      	movs	r2, #2
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 fb33 	bl	8007a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005414:	4b5a      	ldr	r3, [pc, #360]	@ (8005580 <USBD_CDC_Init+0x1e4>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	3324      	adds	r3, #36	@ 0x24
 800542a:	2201      	movs	r2, #1
 800542c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800542e:	4b55      	ldr	r3, [pc, #340]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 8005430:	7819      	ldrb	r1, [r3, #0]
 8005432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005436:	2202      	movs	r2, #2
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f002 fb1e 	bl	8007a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800543e:	4b51      	ldr	r3, [pc, #324]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005456:	2201      	movs	r2, #1
 8005458:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800545a:	4b4b      	ldr	r3, [pc, #300]	@ (8005588 <USBD_CDC_Init+0x1ec>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3326      	adds	r3, #38	@ 0x26
 8005470:	2210      	movs	r2, #16
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e035      	b.n	80054e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005476:	4b42      	ldr	r3, [pc, #264]	@ (8005580 <USBD_CDC_Init+0x1e4>)
 8005478:	7819      	ldrb	r1, [r3, #0]
 800547a:	2340      	movs	r3, #64	@ 0x40
 800547c:	2202      	movs	r2, #2
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f002 fafb 	bl	8007a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005484:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <USBD_CDC_Init+0x1e4>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3324      	adds	r3, #36	@ 0x24
 800549a:	2201      	movs	r2, #1
 800549c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800549e:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 80054a0:	7819      	ldrb	r1, [r3, #0]
 80054a2:	2340      	movs	r3, #64	@ 0x40
 80054a4:	2202      	movs	r2, #2
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f002 fae7 	bl	8007a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054ac:	4b35      	ldr	r3, [pc, #212]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054c4:	2201      	movs	r2, #1
 80054c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005588 <USBD_CDC_Init+0x1ec>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3326      	adds	r3, #38	@ 0x26
 80054de:	2210      	movs	r2, #16
 80054e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054e2:	4b29      	ldr	r3, [pc, #164]	@ (8005588 <USBD_CDC_Init+0x1ec>)
 80054e4:	7819      	ldrb	r1, [r3, #0]
 80054e6:	2308      	movs	r3, #8
 80054e8:	2203      	movs	r2, #3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f002 fac5 	bl	8007a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054f0:	4b25      	ldr	r3, [pc, #148]	@ (8005588 <USBD_CDC_Init+0x1ec>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3324      	adds	r3, #36	@ 0x24
 8005506:	2201      	movs	r2, #1
 8005508:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	33b0      	adds	r3, #176	@ 0xb0
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005540:	2302      	movs	r3, #2
 8005542:	e018      	b.n	8005576 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7c1b      	ldrb	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 800554e:	7819      	ldrb	r1, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f002 fb7c 	bl	8007c58 <USBD_LL_PrepareReceive>
 8005560:	e008      	b.n	8005574 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005562:	4b08      	ldr	r3, [pc, #32]	@ (8005584 <USBD_CDC_Init+0x1e8>)
 8005564:	7819      	ldrb	r1, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800556c:	2340      	movs	r3, #64	@ 0x40
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f002 fb72 	bl	8007c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000093 	.word	0x20000093
 8005584:	20000094 	.word	0x20000094
 8005588:	20000095 	.word	0x20000095

0800558c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005598:	4b3a      	ldr	r3, [pc, #232]	@ (8005684 <USBD_CDC_DeInit+0xf8>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f002 fa91 	bl	8007ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80055a4:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <USBD_CDC_DeInit+0xf8>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3324      	adds	r3, #36	@ 0x24
 80055ba:	2200      	movs	r2, #0
 80055bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055be:	4b32      	ldr	r3, [pc, #200]	@ (8005688 <USBD_CDC_DeInit+0xfc>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f002 fa7e 	bl	8007ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <USBD_CDC_DeInit+0xfc>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055e2:	2200      	movs	r2, #0
 80055e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055e6:	4b29      	ldr	r3, [pc, #164]	@ (800568c <USBD_CDC_DeInit+0x100>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f002 fa6a 	bl	8007ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055f2:	4b26      	ldr	r3, [pc, #152]	@ (800568c <USBD_CDC_DeInit+0x100>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3324      	adds	r3, #36	@ 0x24
 8005608:	2200      	movs	r2, #0
 800560a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800560c:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <USBD_CDC_DeInit+0x100>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 020f 	and.w	r2, r3, #15
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	3326      	adds	r3, #38	@ 0x26
 8005622:	2200      	movs	r2, #0
 8005624:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	32b0      	adds	r2, #176	@ 0xb0
 8005630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01f      	beq.n	8005678 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	33b0      	adds	r3, #176	@ 0xb0
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	32b0      	adds	r2, #176	@ 0xb0
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	4618      	mov	r0, r3
 800565c:	f002 fb3e 	bl	8007cdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	32b0      	adds	r2, #176	@ 0xb0
 800566a:	2100      	movs	r1, #0
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000093 	.word	0x20000093
 8005688:	20000094 	.word	0x20000094
 800568c:	20000095 	.word	0x20000095

08005690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	32b0      	adds	r2, #176	@ 0xb0
 80056a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0bf      	b.n	8005840 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d050      	beq.n	800576e <USBD_CDC_Setup+0xde>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	f040 80af 	bne.w	8005830 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	88db      	ldrh	r3, [r3, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d03a      	beq.n	8005750 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b25b      	sxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da1b      	bge.n	800571c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	33b0      	adds	r3, #176	@ 0xb0
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	88d2      	ldrh	r2, [r2, #6]
 8005700:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	88db      	ldrh	r3, [r3, #6]
 8005706:	2b07      	cmp	r3, #7
 8005708:	bf28      	it	cs
 800570a:	2307      	movcs	r3, #7
 800570c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	89fa      	ldrh	r2, [r7, #14]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fd87 	bl	8007228 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800571a:	e090      	b.n	800583e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	785a      	ldrb	r2, [r3, #1]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	88db      	ldrh	r3, [r3, #6]
 800572a:	2b3f      	cmp	r3, #63	@ 0x3f
 800572c:	d803      	bhi.n	8005736 <USBD_CDC_Setup+0xa6>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	88db      	ldrh	r3, [r3, #6]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	e000      	b.n	8005738 <USBD_CDC_Setup+0xa8>
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800573e:	6939      	ldr	r1, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005746:	461a      	mov	r2, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 fd99 	bl	8007280 <USBD_CtlPrepareRx>
      break;
 800574e:	e076      	b.n	800583e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	33b0      	adds	r3, #176	@ 0xb0
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	7850      	ldrb	r0, [r2, #1]
 8005766:	2200      	movs	r2, #0
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	4798      	blx	r3
      break;
 800576c:	e067      	b.n	800583e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b0b      	cmp	r3, #11
 8005774:	d851      	bhi.n	800581a <USBD_CDC_Setup+0x18a>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <USBD_CDC_Setup+0xec>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057ad 	.word	0x080057ad
 8005780:	08005829 	.word	0x08005829
 8005784:	0800581b 	.word	0x0800581b
 8005788:	0800581b 	.word	0x0800581b
 800578c:	0800581b 	.word	0x0800581b
 8005790:	0800581b 	.word	0x0800581b
 8005794:	0800581b 	.word	0x0800581b
 8005798:	0800581b 	.word	0x0800581b
 800579c:	0800581b 	.word	0x0800581b
 80057a0:	0800581b 	.word	0x0800581b
 80057a4:	080057d7 	.word	0x080057d7
 80057a8:	08005801 	.word	0x08005801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d107      	bne.n	80057c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057b8:	f107 030a 	add.w	r3, r7, #10
 80057bc:	2202      	movs	r2, #2
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fd31 	bl	8007228 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057c6:	e032      	b.n	800582e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fcbb 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 80057d0:	2303      	movs	r3, #3
 80057d2:	75fb      	strb	r3, [r7, #23]
          break;
 80057d4:	e02b      	b.n	800582e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d107      	bne.n	80057f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057e2:	f107 030d 	add.w	r3, r7, #13
 80057e6:	2201      	movs	r2, #1
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fd1c 	bl	8007228 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057f0:	e01d      	b.n	800582e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 fca6 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 80057fa:	2303      	movs	r3, #3
 80057fc:	75fb      	strb	r3, [r7, #23]
          break;
 80057fe:	e016      	b.n	800582e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b03      	cmp	r3, #3
 800580a:	d00f      	beq.n	800582c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fc99 	bl	8007146 <USBD_CtlError>
            ret = USBD_FAIL;
 8005814:	2303      	movs	r3, #3
 8005816:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005818:	e008      	b.n	800582c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fc92 	bl	8007146 <USBD_CtlError>
          ret = USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	75fb      	strb	r3, [r7, #23]
          break;
 8005826:	e002      	b.n	800582e <USBD_CDC_Setup+0x19e>
          break;
 8005828:	bf00      	nop
 800582a:	e008      	b.n	800583e <USBD_CDC_Setup+0x1ae>
          break;
 800582c:	bf00      	nop
      }
      break;
 800582e:	e006      	b.n	800583e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 fc87 	bl	8007146 <USBD_CtlError>
      ret = USBD_FAIL;
 8005838:	2303      	movs	r3, #3
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	bf00      	nop
  }

  return (uint8_t)ret;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800585a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	32b0      	adds	r2, #176	@ 0xb0
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800586e:	2303      	movs	r3, #3
 8005870:	e065      	b.n	800593e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	32b0      	adds	r2, #176	@ 0xb0
 800587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005880:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3318      	adds	r3, #24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02f      	beq.n	80058fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3318      	adds	r3, #24
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	f003 010f 	and.w	r1, r3, #15
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	460b      	mov	r3, r1
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4403      	add	r3, r0
 80058c4:	331c      	adds	r3, #28
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d112      	bne.n	80058fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	3318      	adds	r3, #24
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058ee:	78f9      	ldrb	r1, [r7, #3]
 80058f0:	2300      	movs	r3, #0
 80058f2:	2200      	movs	r2, #0
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 f98e 	bl	8007c16 <USBD_LL_Transmit>
 80058fa:	e01f      	b.n	800593c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	33b0      	adds	r3, #176	@ 0xb0
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	33b0      	adds	r3, #176	@ 0xb0
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	32b0      	adds	r2, #176	@ 0xb0
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	32b0      	adds	r2, #176	@ 0xb0
 800596c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	e01a      	b.n	80059ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 f98c 	bl	8007c9a <USBD_LL_GetRxDataSize>
 8005982:	4602      	mov	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	33b0      	adds	r3, #176	@ 0xb0
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80059a8:	4611      	mov	r1, r2
 80059aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	32b0      	adds	r2, #176	@ 0xb0
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e024      	b.n	8005a22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	33b0      	adds	r3, #176	@ 0xb0
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d019      	beq.n	8005a20 <USBD_CDC_EP0_RxReady+0x6a>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80059f2:	2bff      	cmp	r3, #255	@ 0xff
 80059f4:	d014      	beq.n	8005a20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	33b0      	adds	r3, #176	@ 0xb0
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005a0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	22ff      	movs	r2, #255	@ 0xff
 8005a1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a34:	2182      	movs	r1, #130	@ 0x82
 8005a36:	4818      	ldr	r0, [pc, #96]	@ (8005a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a38:	f000 fd4f 	bl	80064da <USBD_GetEpDesc>
 8005a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4815      	ldr	r0, [pc, #84]	@ (8005a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a42:	f000 fd4a 	bl	80064da <USBD_GetEpDesc>
 8005a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a48:	2181      	movs	r1, #129	@ 0x81
 8005a4a:	4813      	ldr	r0, [pc, #76]	@ (8005a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a4c:	f000 fd45 	bl	80064da <USBD_GetEpDesc>
 8005a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6c:	711a      	strb	r2, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d006      	beq.n	8005a86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a80:	711a      	strb	r2, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2243      	movs	r2, #67	@ 0x43
 8005a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a8c:	4b02      	ldr	r3, [pc, #8]	@ (8005a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000050 	.word	0x20000050

08005a9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005aa4:	2182      	movs	r1, #130	@ 0x82
 8005aa6:	4818      	ldr	r0, [pc, #96]	@ (8005b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aa8:	f000 fd17 	bl	80064da <USBD_GetEpDesc>
 8005aac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005aae:	2101      	movs	r1, #1
 8005ab0:	4815      	ldr	r0, [pc, #84]	@ (8005b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ab2:	f000 fd12 	bl	80064da <USBD_GetEpDesc>
 8005ab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ab8:	2181      	movs	r1, #129	@ 0x81
 8005aba:	4813      	ldr	r0, [pc, #76]	@ (8005b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005abc:	f000 fd0d 	bl	80064da <USBD_GetEpDesc>
 8005ac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2210      	movs	r2, #16
 8005acc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d006      	beq.n	8005ae2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	711a      	strb	r2, [r3, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f042 0202 	orr.w	r2, r2, #2
 8005ae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d006      	beq.n	8005af6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	711a      	strb	r2, [r3, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f042 0202 	orr.w	r2, r2, #2
 8005af4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2243      	movs	r2, #67	@ 0x43
 8005afa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005afc:	4b02      	ldr	r3, [pc, #8]	@ (8005b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000050 	.word	0x20000050

08005b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b14:	2182      	movs	r1, #130	@ 0x82
 8005b16:	4818      	ldr	r0, [pc, #96]	@ (8005b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b18:	f000 fcdf 	bl	80064da <USBD_GetEpDesc>
 8005b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4815      	ldr	r0, [pc, #84]	@ (8005b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b22:	f000 fcda 	bl	80064da <USBD_GetEpDesc>
 8005b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b28:	2181      	movs	r1, #129	@ 0x81
 8005b2a:	4813      	ldr	r0, [pc, #76]	@ (8005b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b2c:	f000 fcd5 	bl	80064da <USBD_GetEpDesc>
 8005b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2210      	movs	r2, #16
 8005b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b4c:	711a      	strb	r2, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b60:	711a      	strb	r2, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2243      	movs	r2, #67	@ 0x43
 8005b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b6c:	4b02      	ldr	r3, [pc, #8]	@ (8005b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000050 	.word	0x20000050

08005b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	220a      	movs	r2, #10
 8005b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b8a:	4b03      	ldr	r3, [pc, #12]	@ (8005b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	2000000c 	.word	0x2000000c

08005b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e009      	b.n	8005bc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	33b0      	adds	r3, #176	@ 0xb0
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	32b0      	adds	r2, #176	@ 0xb0
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e008      	b.n	8005c08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	32b0      	adds	r2, #176	@ 0xb0
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e004      	b.n	8005c42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	32b0      	adds	r2, #176	@ 0xb0
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e025      	b.n	8005cc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11f      	bne.n	8005cc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005c88:	4b10      	ldr	r3, [pc, #64]	@ (8005ccc <USBD_CDC_TransmitPacket+0x7c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005ca6:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <USBD_CDC_TransmitPacket+0x7c>)
 8005ca8:	7819      	ldrb	r1, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 ffad 	bl	8007c16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000093 	.word	0x20000093

08005cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	@ 0xb0
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	32b0      	adds	r2, #176	@ 0xb0
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e018      	b.n	8005d30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	7c1b      	ldrb	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d06:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <USBD_CDC_ReceivePacket+0x68>)
 8005d08:	7819      	ldrb	r1, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 ff9f 	bl	8007c58 <USBD_LL_PrepareReceive>
 8005d1a:	e008      	b.n	8005d2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <USBD_CDC_ReceivePacket+0x68>)
 8005d1e:	7819      	ldrb	r1, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d26:	2340      	movs	r3, #64	@ 0x40
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 ff95 	bl	8007c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000094 	.word	0x20000094

08005d3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e01f      	b.n	8005d94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	79fa      	ldrb	r2, [r7, #7]
 8005d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f001 fe0f 	bl	80079ac <USBD_LL_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e025      	b.n	8005e00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32ae      	adds	r2, #174	@ 0xae
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32ae      	adds	r2, #174	@ 0xae
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de0:	f107 020e 	add.w	r2, r7, #14
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	4602      	mov	r2, r0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fe17 	bl	8007a44 <USBD_LL_Start>
 8005e16:	4603      	mov	r3, r0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	4611      	mov	r1, r2
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 f90c 	bl	80070d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d01a      	beq.n	8005f14 <USBD_LL_SetupStage+0x72>
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d822      	bhi.n	8005f28 <USBD_LL_SetupStage+0x86>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <USBD_LL_SetupStage+0x4a>
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d00a      	beq.n	8005f00 <USBD_LL_SetupStage+0x5e>
 8005eea:	e01d      	b.n	8005f28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fb63 	bl	80065c0 <USBD_StdDevReq>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
      break;
 8005efe:	e020      	b.n	8005f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fbcb 	bl	80066a4 <USBD_StdItfReq>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
      break;
 8005f12:	e016      	b.n	8005f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc2d 	bl	800677c <USBD_StdEPReq>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
      break;
 8005f26:	e00c      	b.n	8005f42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fde4 	bl	8007b04 <USBD_LL_StallEP>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	bf00      	nop
  }

  return ret;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	460b      	mov	r3, r1
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d16e      	bne.n	8006042 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005f6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	f040 8098 	bne.w	80060a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d913      	bls.n	8005fac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bf28      	it	cs
 8005f9e:	4613      	movcs	r3, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 f988 	bl	80072ba <USBD_CtlContinueRx>
 8005faa:	e07d      	b.n	80060a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d014      	beq.n	8005fe4 <USBD_LL_DataOutStage+0x98>
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d81d      	bhi.n	8005ffa <USBD_LL_DataOutStage+0xae>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <USBD_LL_DataOutStage+0x7c>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <USBD_LL_DataOutStage+0x82>
 8005fc6:	e018      	b.n	8005ffa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75bb      	strb	r3, [r7, #22]
            break;
 8005fcc:	e018      	b.n	8006000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fa64 	bl	80064a6 <USBD_CoreFindIF>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fe2:	e00d      	b.n	8006000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fa66 	bl	80064c0 <USBD_CoreFindEP>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ff8:	e002      	b.n	8006000 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8005ffe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006000:	7dbb      	ldrb	r3, [r7, #22]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d119      	bne.n	800603a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d113      	bne.n	800603a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006012:	7dba      	ldrb	r2, [r7, #22]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	32ae      	adds	r2, #174	@ 0xae
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006022:	7dba      	ldrb	r2, [r7, #22]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800602a:	7dba      	ldrb	r2, [r7, #22]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	32ae      	adds	r2, #174	@ 0xae
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f001 f94e 	bl	80072dc <USBD_CtlSendStatus>
 8006040:	e032      	b.n	80060a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006042:	7afb      	ldrb	r3, [r7, #11]
 8006044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006048:	b2db      	uxtb	r3, r3
 800604a:	4619      	mov	r1, r3
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa37 	bl	80064c0 <USBD_CoreFindEP>
 8006052:	4603      	mov	r3, r0
 8006054:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	2bff      	cmp	r3, #255	@ 0xff
 800605a:	d025      	beq.n	80060a8 <USBD_LL_DataOutStage+0x15c>
 800605c:	7dbb      	ldrb	r3, [r7, #22]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d122      	bne.n	80060a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d117      	bne.n	800609e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800606e:	7dba      	ldrb	r2, [r7, #22]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	32ae      	adds	r2, #174	@ 0xae
 8006074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800607e:	7dba      	ldrb	r2, [r7, #22]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006086:	7dba      	ldrb	r2, [r7, #22]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	32ae      	adds	r2, #174	@ 0xae
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	7afa      	ldrb	r2, [r7, #11]
 8006094:	4611      	mov	r1, r2
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	e000      	b.n	80060aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	460b      	mov	r3, r1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d16f      	bne.n	80061a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3314      	adds	r3, #20
 80060ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d15a      	bne.n	800618c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d914      	bls.n	800610c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	1ad2      	subs	r2, r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f001 f8b0 	bl	800725e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060fe:	2300      	movs	r3, #0
 8006100:	2200      	movs	r2, #0
 8006102:	2100      	movs	r1, #0
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f001 fda7 	bl	8007c58 <USBD_LL_PrepareReceive>
 800610a:	e03f      	b.n	800618c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	d11c      	bne.n	8006152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006120:	429a      	cmp	r2, r3
 8006122:	d316      	bcc.n	8006152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800612e:	429a      	cmp	r2, r3
 8006130:	d20f      	bcs.n	8006152 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006132:	2200      	movs	r2, #0
 8006134:	2100      	movs	r1, #0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f001 f891 	bl	800725e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f001 fd84 	bl	8007c58 <USBD_LL_PrepareReceive>
 8006150:	e01c      	b.n	800618c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b03      	cmp	r3, #3
 800615c:	d10f      	bne.n	800617e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800617e:	2180      	movs	r1, #128	@ 0x80
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f001 fcbf 	bl	8007b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 f8bb 	bl	8007302 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d03a      	beq.n	800620c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff fe42 	bl	8005e20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80061a4:	e032      	b.n	800620c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061a6:	7afb      	ldrb	r3, [r7, #11]
 80061a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f985 	bl	80064c0 <USBD_CoreFindEP>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	2bff      	cmp	r3, #255	@ 0xff
 80061be:	d025      	beq.n	800620c <USBD_LL_DataInStage+0x15a>
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d122      	bne.n	800620c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d11c      	bne.n	800620c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061d2:	7dfa      	ldrb	r2, [r7, #23]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	32ae      	adds	r2, #174	@ 0xae
 80061d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061e2:	7dfa      	ldrb	r2, [r7, #23]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061ea:	7dfa      	ldrb	r2, [r7, #23]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	32ae      	adds	r2, #174	@ 0xae
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	7afa      	ldrb	r2, [r7, #11]
 80061f8:	4611      	mov	r1, r2
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	4798      	blx	r3
 80061fe:	4603      	mov	r3, r0
 8006200:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006202:	7dbb      	ldrb	r3, [r7, #22]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006208:	7dbb      	ldrb	r3, [r7, #22]
 800620a:	e000      	b.n	800620e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d014      	beq.n	800627c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6852      	ldr	r2, [r2, #4]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	4611      	mov	r1, r2
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800627c:	2340      	movs	r3, #64	@ 0x40
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fbf9 	bl	8007a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2240      	movs	r2, #64	@ 0x40
 8006294:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006298:	2340      	movs	r3, #64	@ 0x40
 800629a:	2200      	movs	r2, #0
 800629c:	2180      	movs	r1, #128	@ 0x80
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fbeb 	bl	8007a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2240      	movs	r2, #64	@ 0x40
 80062ae:	621a      	str	r2, [r3, #32]

  return ret;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d006      	beq.n	80062fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2204      	movs	r2, #4
 8006300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b04      	cmp	r3, #4
 8006324:	d106      	bne.n	8006334 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800632c:	b2da      	uxtb	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b03      	cmp	r3, #3
 8006354:	d110      	bne.n	8006378 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	32ae      	adds	r2, #174	@ 0xae
 8006398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e01c      	b.n	80063de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d115      	bne.n	80063dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32ae      	adds	r2, #174	@ 0xae
 80063ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	32ae      	adds	r2, #174	@ 0xae
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	4611      	mov	r1, r2
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32ae      	adds	r2, #174	@ 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	e01c      	b.n	8006442 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b03      	cmp	r3, #3
 8006412:	d115      	bne.n	8006440 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	32ae      	adds	r2, #174	@ 0xae
 800641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	32ae      	adds	r2, #174	@ 0xae
 8006432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	4611      	mov	r1, r2
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00e      	beq.n	800649c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6852      	ldr	r2, [r2, #4]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	4611      	mov	r1, r2
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d91f      	bls.n	8006540 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006506:	e013      	b.n	8006530 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006508:	f107 030a 	add.w	r3, r7, #10
 800650c:	4619      	mov	r1, r3
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f000 f81b 	bl	800654a <USBD_GetNextDesc>
 8006514:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d108      	bne.n	8006530 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	789b      	ldrb	r3, [r3, #2]
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	429a      	cmp	r2, r3
 800652a:	d008      	beq.n	800653e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	885b      	ldrh	r3, [r3, #2]
 8006534:	b29a      	uxth	r2, r3
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	429a      	cmp	r2, r3
 800653a:	d8e5      	bhi.n	8006508 <USBD_GetEpDesc+0x2e>
 800653c:	e000      	b.n	8006540 <USBD_GetEpDesc+0x66>
          break;
 800653e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006540:	693b      	ldr	r3, [r7, #16]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	4413      	add	r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006574:	68fb      	ldr	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006582:	b480      	push	{r7}
 8006584:	b087      	sub	sp, #28
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3301      	adds	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065a0:	8a3b      	ldrh	r3, [r7, #16]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	b21a      	sxth	r2, r3
 80065a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	b21b      	sxth	r3, r3
 80065ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065b0:	89fb      	ldrh	r3, [r7, #14]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	d005      	beq.n	80065e6 <USBD_StdDevReq+0x26>
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d857      	bhi.n	800668e <USBD_StdDevReq+0xce>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00f      	beq.n	8006602 <USBD_StdDevReq+0x42>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d153      	bne.n	800668e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	32ae      	adds	r2, #174	@ 0xae
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	4798      	blx	r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e04a      	b.n	8006698 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b09      	cmp	r3, #9
 8006608:	d83b      	bhi.n	8006682 <USBD_StdDevReq+0xc2>
 800660a:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <USBD_StdDevReq+0x50>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006665 	.word	0x08006665
 8006614:	08006679 	.word	0x08006679
 8006618:	08006683 	.word	0x08006683
 800661c:	0800666f 	.word	0x0800666f
 8006620:	08006683 	.word	0x08006683
 8006624:	08006643 	.word	0x08006643
 8006628:	08006639 	.word	0x08006639
 800662c:	08006683 	.word	0x08006683
 8006630:	0800665b 	.word	0x0800665b
 8006634:	0800664d 	.word	0x0800664d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa3c 	bl	8006ab8 <USBD_GetDescriptor>
          break;
 8006640:	e024      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fba1 	bl	8006d8c <USBD_SetAddress>
          break;
 800664a:	e01f      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fbe0 	bl	8006e14 <USBD_SetConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
          break;
 8006658:	e018      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc83 	bl	8006f68 <USBD_GetConfig>
          break;
 8006662:	e013      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fcb4 	bl	8006fd4 <USBD_GetStatus>
          break;
 800666c:	e00e      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fce3 	bl	800703c <USBD_SetFeature>
          break;
 8006676:	e009      	b.n	800668c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fd07 	bl	800708e <USBD_ClrFeature>
          break;
 8006680:	e004      	b.n	800668c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fd5e 	bl	8007146 <USBD_CtlError>
          break;
 800668a:	bf00      	nop
      }
      break;
 800668c:	e004      	b.n	8006698 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fd58 	bl	8007146 <USBD_CtlError>
      break;
 8006696:	bf00      	nop
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop

080066a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066ba:	2b40      	cmp	r3, #64	@ 0x40
 80066bc:	d005      	beq.n	80066ca <USBD_StdItfReq+0x26>
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d852      	bhi.n	8006768 <USBD_StdItfReq+0xc4>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <USBD_StdItfReq+0x26>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d14e      	bne.n	8006768 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d840      	bhi.n	800675a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	889b      	ldrh	r3, [r3, #4]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d836      	bhi.n	8006750 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	889b      	ldrh	r3, [r3, #4]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fedb 	bl	80064a6 <USBD_CoreFindIF>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2bff      	cmp	r3, #255	@ 0xff
 80066f8:	d01d      	beq.n	8006736 <USBD_StdItfReq+0x92>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11a      	bne.n	8006736 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006700:	7bba      	ldrb	r2, [r7, #14]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32ae      	adds	r2, #174	@ 0xae
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00f      	beq.n	8006730 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006710:	7bba      	ldrb	r2, [r7, #14]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006718:	7bba      	ldrb	r2, [r7, #14]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	32ae      	adds	r2, #174	@ 0xae
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800672e:	e004      	b.n	800673a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006734:	e001      	b.n	800673a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d110      	bne.n	8006764 <USBD_StdItfReq+0xc0>
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fdc7 	bl	80072dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800674e:	e009      	b.n	8006764 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fcf7 	bl	8007146 <USBD_CtlError>
          break;
 8006758:	e004      	b.n	8006764 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fcf2 	bl	8007146 <USBD_CtlError>
          break;
 8006762:	e000      	b.n	8006766 <USBD_StdItfReq+0xc2>
          break;
 8006764:	bf00      	nop
      }
      break;
 8006766:	e004      	b.n	8006772 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fceb 	bl	8007146 <USBD_CtlError>
      break;
 8006770:	bf00      	nop
  }

  return ret;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	889b      	ldrh	r3, [r3, #4]
 800678e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d007      	beq.n	80067ac <USBD_StdEPReq+0x30>
 800679c:	2b40      	cmp	r3, #64	@ 0x40
 800679e:	f200 817f 	bhi.w	8006aa0 <USBD_StdEPReq+0x324>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d02a      	beq.n	80067fc <USBD_StdEPReq+0x80>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 817a 	bne.w	8006aa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fe85 	bl	80064c0 <USBD_CoreFindEP>
 80067b6:	4603      	mov	r3, r0
 80067b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ba:	7b7b      	ldrb	r3, [r7, #13]
 80067bc:	2bff      	cmp	r3, #255	@ 0xff
 80067be:	f000 8174 	beq.w	8006aaa <USBD_StdEPReq+0x32e>
 80067c2:	7b7b      	ldrb	r3, [r7, #13]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 8170 	bne.w	8006aaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067ca:	7b7a      	ldrb	r2, [r7, #13]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067d2:	7b7a      	ldrb	r2, [r7, #13]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32ae      	adds	r2, #174	@ 0xae
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8163 	beq.w	8006aaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067e4:	7b7a      	ldrb	r2, [r7, #13]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	@ 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067fa:	e156      	b.n	8006aaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d008      	beq.n	8006816 <USBD_StdEPReq+0x9a>
 8006804:	2b03      	cmp	r3, #3
 8006806:	f300 8145 	bgt.w	8006a94 <USBD_StdEPReq+0x318>
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 809b 	beq.w	8006946 <USBD_StdEPReq+0x1ca>
 8006810:	2b01      	cmp	r3, #1
 8006812:	d03c      	beq.n	800688e <USBD_StdEPReq+0x112>
 8006814:	e13e      	b.n	8006a94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d002      	beq.n	8006828 <USBD_StdEPReq+0xac>
 8006822:	2b03      	cmp	r3, #3
 8006824:	d016      	beq.n	8006854 <USBD_StdEPReq+0xd8>
 8006826:	e02c      	b.n	8006882 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <USBD_StdEPReq+0xce>
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b80      	cmp	r3, #128	@ 0x80
 8006832:	d00a      	beq.n	800684a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f963 	bl	8007b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800683e:	2180      	movs	r1, #128	@ 0x80
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f95f 	bl	8007b04 <USBD_LL_StallEP>
 8006846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006848:	e020      	b.n	800688c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc7a 	bl	8007146 <USBD_CtlError>
              break;
 8006852:	e01b      	b.n	800688c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10e      	bne.n	800687a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <USBD_StdEPReq+0xfe>
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b80      	cmp	r3, #128	@ 0x80
 8006866:	d008      	beq.n	800687a <USBD_StdEPReq+0xfe>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	88db      	ldrh	r3, [r3, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 f945 	bl	8007b04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd2e 	bl	80072dc <USBD_CtlSendStatus>

              break;
 8006880:	e004      	b.n	800688c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc5e 	bl	8007146 <USBD_CtlError>
              break;
 800688a:	bf00      	nop
          }
          break;
 800688c:	e107      	b.n	8006a9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d002      	beq.n	80068a0 <USBD_StdEPReq+0x124>
 800689a:	2b03      	cmp	r3, #3
 800689c:	d016      	beq.n	80068cc <USBD_StdEPReq+0x150>
 800689e:	e04b      	b.n	8006938 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <USBD_StdEPReq+0x146>
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b80      	cmp	r3, #128	@ 0x80
 80068aa:	d00a      	beq.n	80068c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f927 	bl	8007b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068b6:	2180      	movs	r1, #128	@ 0x80
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 f923 	bl	8007b04 <USBD_LL_StallEP>
 80068be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068c0:	e040      	b.n	8006944 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fc3e 	bl	8007146 <USBD_CtlError>
              break;
 80068ca:	e03b      	b.n	8006944 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d136      	bne.n	8006942 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f92d 	bl	8007b42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fcf7 	bl	80072dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fde4 	bl	80064c0 <USBD_CoreFindEP>
 80068f8:	4603      	mov	r3, r0
 80068fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068fc:	7b7b      	ldrb	r3, [r7, #13]
 80068fe:	2bff      	cmp	r3, #255	@ 0xff
 8006900:	d01f      	beq.n	8006942 <USBD_StdEPReq+0x1c6>
 8006902:	7b7b      	ldrb	r3, [r7, #13]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11c      	bne.n	8006942 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006908:	7b7a      	ldrb	r2, [r7, #13]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006910:	7b7a      	ldrb	r2, [r7, #13]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32ae      	adds	r2, #174	@ 0xae
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	@ 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006936:	e004      	b.n	8006942 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fc03 	bl	8007146 <USBD_CtlError>
              break;
 8006940:	e000      	b.n	8006944 <USBD_StdEPReq+0x1c8>
              break;
 8006942:	bf00      	nop
          }
          break;
 8006944:	e0ab      	b.n	8006a9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d002      	beq.n	8006958 <USBD_StdEPReq+0x1dc>
 8006952:	2b03      	cmp	r3, #3
 8006954:	d032      	beq.n	80069bc <USBD_StdEPReq+0x240>
 8006956:	e097      	b.n	8006a88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <USBD_StdEPReq+0x1f2>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b80      	cmp	r3, #128	@ 0x80
 8006962:	d004      	beq.n	800696e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fbed 	bl	8007146 <USBD_CtlError>
                break;
 800696c:	e091      	b.n	8006a92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0b      	bge.n	800698e <USBD_StdEPReq+0x212>
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	3310      	adds	r3, #16
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	3304      	adds	r3, #4
 800698c:	e00b      	b.n	80069a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	3304      	adds	r3, #4
 80069a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2202      	movs	r2, #2
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc37 	bl	8007228 <USBD_CtlSendData>
              break;
 80069ba:	e06a      	b.n	8006a92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da11      	bge.n	80069e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	f003 020f 	and.w	r2, r3, #15
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	3324      	adds	r3, #36	@ 0x24
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d117      	bne.n	8006a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fbb0 	bl	8007146 <USBD_CtlError>
                  break;
 80069e6:	e054      	b.n	8006a92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb9d 	bl	8007146 <USBD_CtlError>
                  break;
 8006a0c:	e041      	b.n	8006a92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da0b      	bge.n	8006a2e <USBD_StdEPReq+0x2b2>
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	3310      	adds	r3, #16
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	e00b      	b.n	8006a46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4413      	add	r3, r2
 8006a44:	3304      	adds	r3, #4
 8006a46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <USBD_StdEPReq+0x2d8>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b80      	cmp	r3, #128	@ 0x80
 8006a52:	d103      	bne.n	8006a5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00e      	b.n	8006a7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f88d 	bl	8007b80 <USBD_LL_IsStallEP>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fbd1 	bl	8007228 <USBD_CtlSendData>
              break;
 8006a86:	e004      	b.n	8006a92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb5b 	bl	8007146 <USBD_CtlError>
              break;
 8006a90:	bf00      	nop
          }
          break;
 8006a92:	e004      	b.n	8006a9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb55 	bl	8007146 <USBD_CtlError>
          break;
 8006a9c:	bf00      	nop
      }
      break;
 8006a9e:	e005      	b.n	8006aac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fb4f 	bl	8007146 <USBD_CtlError>
      break;
 8006aa8:	e000      	b.n	8006aac <USBD_StdEPReq+0x330>
      break;
 8006aaa:	bf00      	nop
  }

  return ret;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	f200 8128 	bhi.w	8006d2e <USBD_GetDescriptor+0x276>
 8006ade:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae4 <USBD_GetDescriptor+0x2c>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b19 	.word	0x08006b19
 8006aec:	08006b59 	.word	0x08006b59
 8006af0:	08006d2f 	.word	0x08006d2f
 8006af4:	08006d2f 	.word	0x08006d2f
 8006af8:	08006ccf 	.word	0x08006ccf
 8006afc:	08006cfb 	.word	0x08006cfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
      break;
 8006b16:	e112      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7c1b      	ldrb	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	f107 0208 	add.w	r2, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b3a:	e100      	b.n	8006d3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b44:	f107 0208 	add.w	r2, r7, #8
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	2202      	movs	r2, #2
 8006b54:	701a      	strb	r2, [r3, #0]
      break;
 8006b56:	e0f2      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	f200 80ac 	bhi.w	8006cbc <USBD_GetDescriptor+0x204>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <USBD_GetDescriptor+0xb4>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b85 	.word	0x08006b85
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006c21 	.word	0x08006c21
 8006b7c:	08006c55 	.word	0x08006c55
 8006b80:	08006c89 	.word	0x08006c89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ba6:	e091      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 facb 	bl	8007146 <USBD_CtlError>
            err++;
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bb6:	e089      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7c12      	ldrb	r2, [r2, #16]
 8006bd0:	f107 0108 	add.w	r1, r7, #8
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bda:	e077      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fab1 	bl	8007146 <USBD_CtlError>
            err++;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	3301      	adds	r3, #1
 8006be8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bea:	e06f      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0e:	e05d      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa97 	bl	8007146 <USBD_CtlError>
            err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1e:	e055      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	7c12      	ldrb	r2, [r2, #16]
 8006c38:	f107 0108 	add.w	r1, r7, #8
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
 8006c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c42:	e043      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa7d 	bl	8007146 <USBD_CtlError>
            err++;
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	72fb      	strb	r3, [r7, #11]
          break;
 8006c52:	e03b      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	7c12      	ldrb	r2, [r2, #16]
 8006c6c:	f107 0108 	add.w	r1, r7, #8
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c76:	e029      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa63 	bl	8007146 <USBD_CtlError>
            err++;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	3301      	adds	r3, #1
 8006c84:	72fb      	strb	r3, [r7, #11]
          break;
 8006c86:	e021      	b.n	8006ccc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7c12      	ldrb	r2, [r2, #16]
 8006ca0:	f107 0108 	add.w	r1, r7, #8
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006caa:	e00f      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa49 	bl	8007146 <USBD_CtlError>
            err++;
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cba:	e007      	b.n	8006ccc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa41 	bl	8007146 <USBD_CtlError>
          err++;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cca:	bf00      	nop
      }
      break;
 8006ccc:	e037      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cde:	f107 0208 	add.w	r2, r7, #8
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4798      	blx	r3
 8006ce6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ce8:	e029      	b.n	8006d3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa2a 	bl	8007146 <USBD_CtlError>
        err++;
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8006cf8:	e021      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7c1b      	ldrb	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	f107 0208 	add.w	r2, r7, #8
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4798      	blx	r3
 8006d12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	2207      	movs	r2, #7
 8006d1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d1c:	e00f      	b.n	8006d3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa10 	bl	8007146 <USBD_CtlError>
        err++;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d2c:	e007      	b.n	8006d3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa08 	bl	8007146 <USBD_CtlError>
      err++;
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d3c:	bf00      	nop
  }

  if (err != 0U)
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11e      	bne.n	8006d82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	88db      	ldrh	r3, [r3, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d016      	beq.n	8006d7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d4c:	893b      	ldrh	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88da      	ldrh	r2, [r3, #6]
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bf28      	it	cs
 8006d5c:	4613      	movcs	r3, r2
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d62:	893b      	ldrh	r3, [r7, #8]
 8006d64:	461a      	mov	r2, r3
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa5d 	bl	8007228 <USBD_CtlSendData>
 8006d6e:	e009      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9e7 	bl	8007146 <USBD_CtlError>
 8006d78:	e004      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 faae 	bl	80072dc <USBD_CtlSendStatus>
 8006d80:	e000      	b.n	8006d84 <USBD_GetDescriptor+0x2cc>
    return;
 8006d82:	bf00      	nop
  }
}
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop

08006d8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	889b      	ldrh	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d131      	bne.n	8006e02 <USBD_SetAddress+0x76>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	88db      	ldrh	r3, [r3, #6]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d12d      	bne.n	8006e02 <USBD_SetAddress+0x76>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dac:	d829      	bhi.n	8006e02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d104      	bne.n	8006dd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f9bc 	bl	8007146 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dce:	e01d      	b.n	8006e0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fefb 	bl	8007bd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa7a 	bl	80072dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df6:	e009      	b.n	8006e0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	e004      	b.n	8006e0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f99e 	bl	8007146 <USBD_CtlError>
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	4b4e      	ldr	r3, [pc, #312]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006e2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d905      	bls.n	8006e40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f985 	bl	8007146 <USBD_CtlError>
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e08c      	b.n	8006f5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d002      	beq.n	8006e52 <USBD_SetConfig+0x3e>
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d029      	beq.n	8006ea4 <USBD_SetConfig+0x90>
 8006e50:	e075      	b.n	8006f3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e52:	4b44      	ldr	r3, [pc, #272]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d020      	beq.n	8006e9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e5a:	4b42      	ldr	r3, [pc, #264]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e64:	4b3f      	ldr	r3, [pc, #252]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fe ffe3 	bl	8005e36 <USBD_SetClassConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f962 	bl	8007146 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e8a:	e065      	b.n	8006f58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa25 	bl	80072dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2203      	movs	r2, #3
 8006e96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e9a:	e05d      	b.n	8006f58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa1d 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006ea2:	e059      	b.n	8006f58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d112      	bne.n	8006ed2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ebe:	4b29      	ldr	r3, [pc, #164]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fe ffd2 	bl	8005e6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa06 	bl	80072dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ed0:	e042      	b.n	8006f58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ed2:	4b24      	ldr	r3, [pc, #144]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d02a      	beq.n	8006f36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe ffc0 	bl	8005e6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eee:	4b1d      	ldr	r3, [pc, #116]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fe ff99 	bl	8005e36 <USBD_SetClassConfig>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f918 	bl	8007146 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe ffa5 	bl	8005e6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f2c:	e014      	b.n	8006f58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9d4 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006f34:	e010      	b.n	8006f58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9d0 	bl	80072dc <USBD_CtlSendStatus>
      break;
 8006f3c:	e00c      	b.n	8006f58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f900 	bl	8007146 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f46:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <USBD_SetConfig+0x150>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe ff8e 	bl	8005e6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f52:	2303      	movs	r3, #3
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200001f0 	.word	0x200001f0

08006f68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d004      	beq.n	8006f84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f8e2 	bl	8007146 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f82:	e023      	b.n	8006fcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	dc02      	bgt.n	8006f96 <USBD_GetConfig+0x2e>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc03      	bgt.n	8006f9c <USBD_GetConfig+0x34>
 8006f94:	e015      	b.n	8006fc2 <USBD_GetConfig+0x5a>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d00b      	beq.n	8006fb2 <USBD_GetConfig+0x4a>
 8006f9a:	e012      	b.n	8006fc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f93c 	bl	8007228 <USBD_CtlSendData>
        break;
 8006fb0:	e00c      	b.n	8006fcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f934 	bl	8007228 <USBD_CtlSendData>
        break;
 8006fc0:	e004      	b.n	8006fcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f8be 	bl	8007146 <USBD_CtlError>
        break;
 8006fca:	bf00      	nop
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d81e      	bhi.n	800702a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	88db      	ldrh	r3, [r3, #6]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d004      	beq.n	8006ffe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8a5 	bl	8007146 <USBD_CtlError>
        break;
 8006ffc:	e01a      	b.n	8007034 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f043 0202 	orr.w	r2, r3, #2
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	330c      	adds	r3, #12
 800701e:	2202      	movs	r2, #2
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f900 	bl	8007228 <USBD_CtlSendData>
      break;
 8007028:	e004      	b.n	8007034 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f88a 	bl	8007146 <USBD_CtlError>
      break;
 8007032:	bf00      	nop
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f940 	bl	80072dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800705c:	e013      	b.n	8007086 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d10b      	bne.n	800707e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	b29b      	uxth	r3, r3
 800706e:	b2da      	uxtb	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f930 	bl	80072dc <USBD_CtlSendStatus>
}
 800707c:	e003      	b.n	8007086 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f860 	bl	8007146 <USBD_CtlError>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d80b      	bhi.n	80070be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d10c      	bne.n	80070c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f910 	bl	80072dc <USBD_CtlSendStatus>
      }
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f840 	bl	8007146 <USBD_CtlError>
      break;
 80070c6:	e000      	b.n	80070ca <USBD_ClrFeature+0x3c>
      break;
 80070c8:	bf00      	nop
  }
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fa40 	bl	8006582 <SWAPBYTE>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fa33 	bl	8006582 <SWAPBYTE>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fa26 	bl	8006582 <SWAPBYTE>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	80da      	strh	r2, [r3, #6]
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007150:	2180      	movs	r1, #128	@ 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fcd6 	bl	8007b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fcd2 	bl	8007b04 <USBD_LL_StallEP>
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007182:	6938      	ldr	r0, [r7, #16]
 8007184:	f000 f836 	bl	80071f4 <USBD_GetLen>
 8007188:	4603      	mov	r3, r0
 800718a:	3301      	adds	r3, #1
 800718c:	b29b      	uxth	r3, r3
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	4413      	add	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	3301      	adds	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4413      	add	r3, r2
 80071ae:	2203      	movs	r2, #3
 80071b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071b8:	e013      	b.n	80071e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
    idx++;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	3301      	adds	r3, #1
 80071d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4413      	add	r3, r2
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
    idx++;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	3301      	adds	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e7      	bne.n	80071ba <USBD_GetString+0x52>
 80071ea:	e000      	b.n	80071ee <USBD_GetString+0x86>
    return;
 80071ec:	bf00      	nop
  }
}
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007204:	e005      	b.n	8007212 <USBD_GetLen+0x1e>
  {
    len++;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	3301      	adds	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3301      	adds	r3, #1
 8007210:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f5      	bne.n	8007206 <USBD_GetLen+0x12>
  }

  return len;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2202      	movs	r2, #2
 8007238:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fce1 	bl	8007c16 <USBD_LL_Transmit>

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	2100      	movs	r1, #0
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fcd0 	bl	8007c16 <USBD_LL_Transmit>

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2203      	movs	r2, #3
 8007290:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fcd4 	bl	8007c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fcc3 	bl	8007c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ec:	2300      	movs	r3, #0
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fc8f 	bl	8007c16 <USBD_LL_Transmit>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc9d 	bl	8007c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800732c:	2200      	movs	r2, #0
 800732e:	4912      	ldr	r1, [pc, #72]	@ (8007378 <MX_USB_DEVICE_Init+0x50>)
 8007330:	4812      	ldr	r0, [pc, #72]	@ (800737c <MX_USB_DEVICE_Init+0x54>)
 8007332:	f7fe fd03 	bl	8005d3c <USBD_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800733c:	f7f9 fabc 	bl	80008b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007340:	490f      	ldr	r1, [pc, #60]	@ (8007380 <MX_USB_DEVICE_Init+0x58>)
 8007342:	480e      	ldr	r0, [pc, #56]	@ (800737c <MX_USB_DEVICE_Init+0x54>)
 8007344:	f7fe fd2a 	bl	8005d9c <USBD_RegisterClass>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800734e:	f7f9 fab3 	bl	80008b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007352:	490c      	ldr	r1, [pc, #48]	@ (8007384 <MX_USB_DEVICE_Init+0x5c>)
 8007354:	4809      	ldr	r0, [pc, #36]	@ (800737c <MX_USB_DEVICE_Init+0x54>)
 8007356:	f7fe fc21 	bl	8005b9c <USBD_CDC_RegisterInterface>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007360:	f7f9 faaa 	bl	80008b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007364:	4805      	ldr	r0, [pc, #20]	@ (800737c <MX_USB_DEVICE_Init+0x54>)
 8007366:	f7fe fd4f 	bl	8005e08 <USBD_Start>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007370:	f7f9 faa2 	bl	80008b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200000ac 	.word	0x200000ac
 800737c:	200001f4 	.word	0x200001f4
 8007380:	20000018 	.word	0x20000018
 8007384:	20000098 	.word	0x20000098

08007388 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800738c:	2200      	movs	r2, #0
 800738e:	4905      	ldr	r1, [pc, #20]	@ (80073a4 <CDC_Init_FS+0x1c>)
 8007390:	4805      	ldr	r0, [pc, #20]	@ (80073a8 <CDC_Init_FS+0x20>)
 8007392:	f7fe fc1d 	bl	8005bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007396:	4905      	ldr	r1, [pc, #20]	@ (80073ac <CDC_Init_FS+0x24>)
 8007398:	4803      	ldr	r0, [pc, #12]	@ (80073a8 <CDC_Init_FS+0x20>)
 800739a:	f7fe fc3b 	bl	8005c14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800739e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000cd0 	.word	0x20000cd0
 80073a8:	200001f4 	.word	0x200001f4
 80073ac:	200004d0 	.word	0x200004d0

080073b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b23      	cmp	r3, #35	@ 0x23
 80073d4:	d84a      	bhi.n	800746c <CDC_Control_FS+0xac>
 80073d6:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <CDC_Control_FS+0x1c>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	0800746d 	.word	0x0800746d
 80073e0:	0800746d 	.word	0x0800746d
 80073e4:	0800746d 	.word	0x0800746d
 80073e8:	0800746d 	.word	0x0800746d
 80073ec:	0800746d 	.word	0x0800746d
 80073f0:	0800746d 	.word	0x0800746d
 80073f4:	0800746d 	.word	0x0800746d
 80073f8:	0800746d 	.word	0x0800746d
 80073fc:	0800746d 	.word	0x0800746d
 8007400:	0800746d 	.word	0x0800746d
 8007404:	0800746d 	.word	0x0800746d
 8007408:	0800746d 	.word	0x0800746d
 800740c:	0800746d 	.word	0x0800746d
 8007410:	0800746d 	.word	0x0800746d
 8007414:	0800746d 	.word	0x0800746d
 8007418:	0800746d 	.word	0x0800746d
 800741c:	0800746d 	.word	0x0800746d
 8007420:	0800746d 	.word	0x0800746d
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800746d 	.word	0x0800746d
 8007434:	0800746d 	.word	0x0800746d
 8007438:	0800746d 	.word	0x0800746d
 800743c:	0800746d 	.word	0x0800746d
 8007440:	0800746d 	.word	0x0800746d
 8007444:	0800746d 	.word	0x0800746d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800746d 	.word	0x0800746d
 8007450:	0800746d 	.word	0x0800746d
 8007454:	0800746d 	.word	0x0800746d
 8007458:	0800746d 	.word	0x0800746d
 800745c:	0800746d 	.word	0x0800746d
 8007460:	0800746d 	.word	0x0800746d
 8007464:	0800746d 	.word	0x0800746d
 8007468:	0800746d 	.word	0x0800746d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800746c:	bf00      	nop
  }

  return (USBD_OK);
 800746e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4805      	ldr	r0, [pc, #20]	@ (80074a0 <CDC_Receive_FS+0x24>)
 800748a:	f7fe fbc3 	bl	8005c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800748e:	4804      	ldr	r0, [pc, #16]	@ (80074a0 <CDC_Receive_FS+0x24>)
 8007490:	f7fe fc1e 	bl	8005cd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200001f4 	.word	0x200001f4

080074a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074b4:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <CDC_Transmit_FS+0x48>)
 80074b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e00b      	b.n	80074e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4806      	ldr	r0, [pc, #24]	@ (80074ec <CDC_Transmit_FS+0x48>)
 80074d2:	f7fe fb7d 	bl	8005bd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074d6:	4805      	ldr	r0, [pc, #20]	@ (80074ec <CDC_Transmit_FS+0x48>)
 80074d8:	f7fe fbba 	bl	8005c50 <USBD_CDC_TransmitPacket>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200001f4 	.word	0x200001f4

080074f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2212      	movs	r2, #18
 8007524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007526:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	200000c8 	.word	0x200000c8

08007538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2204      	movs	r2, #4
 8007548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800754a:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	200000dc 	.word	0x200000dc

0800755c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4907      	ldr	r1, [pc, #28]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
 8007572:	4808      	ldr	r0, [pc, #32]	@ (8007594 <USBD_FS_ProductStrDescriptor+0x38>)
 8007574:	f7ff fdf8 	bl	8007168 <USBD_GetString>
 8007578:	e004      	b.n	8007584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4904      	ldr	r1, [pc, #16]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
 800757e:	4805      	ldr	r0, [pc, #20]	@ (8007594 <USBD_FS_ProductStrDescriptor+0x38>)
 8007580:	f7ff fdf2 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007584:	4b02      	ldr	r3, [pc, #8]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200014d0 	.word	0x200014d0
 8007594:	080086a4 	.word	0x080086a4

08007598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	4904      	ldr	r1, [pc, #16]	@ (80075b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075a8:	4804      	ldr	r0, [pc, #16]	@ (80075bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075aa:	f7ff fddd 	bl	8007168 <USBD_GetString>
  return USBD_StrDesc;
 80075ae:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	200014d0 	.word	0x200014d0
 80075bc:	080086bc 	.word	0x080086bc

080075c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	221a      	movs	r2, #26
 80075d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075d2:	f000 f843 	bl	800765c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075d6:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200000e0 	.word	0x200000e0

080075e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fa:	4808      	ldr	r0, [pc, #32]	@ (800761c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075fc:	f7ff fdb4 	bl	8007168 <USBD_GetString>
 8007600:	e004      	b.n	800760c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4904      	ldr	r1, [pc, #16]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007606:	4805      	ldr	r0, [pc, #20]	@ (800761c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007608:	f7ff fdae 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200014d0 	.word	0x200014d0
 800761c:	080086d0 	.word	0x080086d0

08007620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4907      	ldr	r1, [pc, #28]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007636:	4808      	ldr	r0, [pc, #32]	@ (8007658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007638:	f7ff fd96 	bl	8007168 <USBD_GetString>
 800763c:	e004      	b.n	8007648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4904      	ldr	r1, [pc, #16]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007642:	4805      	ldr	r0, [pc, #20]	@ (8007658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007644:	f7ff fd90 	bl	8007168 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200014d0 	.word	0x200014d0
 8007658:	080086dc 	.word	0x080086dc

0800765c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <Get_SerialNum+0x44>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007668:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <Get_SerialNum+0x48>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <Get_SerialNum+0x4c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007682:	2208      	movs	r2, #8
 8007684:	4909      	ldr	r1, [pc, #36]	@ (80076ac <Get_SerialNum+0x50>)
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f814 	bl	80076b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800768c:	2204      	movs	r2, #4
 800768e:	4908      	ldr	r1, [pc, #32]	@ (80076b0 <Get_SerialNum+0x54>)
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f000 f80f 	bl	80076b4 <IntToUnicode>
  }
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	1fff7a10 	.word	0x1fff7a10
 80076a4:	1fff7a14 	.word	0x1fff7a14
 80076a8:	1fff7a18 	.word	0x1fff7a18
 80076ac:	200000e2 	.word	0x200000e2
 80076b0:	200000f2 	.word	0x200000f2

080076b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e027      	b.n	800771c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	0f1b      	lsrs	r3, r3, #28
 80076d0:	2b09      	cmp	r3, #9
 80076d2:	d80b      	bhi.n	80076ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4619      	mov	r1, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	440b      	add	r3, r1
 80076e4:	3230      	adds	r2, #48	@ 0x30
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e00a      	b.n	8007702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	0f1b      	lsrs	r3, r3, #28
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4619      	mov	r1, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	440b      	add	r3, r1
 80076fc:	3237      	adds	r2, #55	@ 0x37
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	3301      	adds	r3, #1
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	3301      	adds	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
 800771c:	7dfa      	ldrb	r2, [r7, #23]
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3d3      	bcc.n	80076cc <IntToUnicode+0x18>
  }
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	@ 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007754:	d13a      	bne.n	80077cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	4b1e      	ldr	r3, [pc, #120]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	4a1d      	ldr	r2, [pc, #116]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	6313      	str	r3, [r2, #48]	@ 0x30
 8007766:	4b1b      	ldr	r3, [pc, #108]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007772:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007778:	2302      	movs	r3, #2
 800777a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007780:	2303      	movs	r3, #3
 8007782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007784:	230a      	movs	r3, #10
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	4619      	mov	r1, r3
 800778e:	4812      	ldr	r0, [pc, #72]	@ (80077d8 <HAL_PCD_MspInit+0xa4>)
 8007790:	f7f9 fb92 	bl	8000eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007794:	4b0f      	ldr	r3, [pc, #60]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 8007796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007798:	4a0e      	ldr	r2, [pc, #56]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 800779a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779e:	6353      	str	r3, [r2, #52]	@ 0x34
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 80077a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a8:	4a0a      	ldr	r2, [pc, #40]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 80077aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80077b0:	4b08      	ldr	r3, [pc, #32]	@ (80077d4 <HAL_PCD_MspInit+0xa0>)
 80077b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077bc:	2200      	movs	r2, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	2043      	movs	r0, #67	@ 0x43
 80077c2:	f7f9 fb42 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077c6:	2043      	movs	r0, #67	@ 0x43
 80077c8:	f7f9 fb5b 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077cc:	bf00      	nop
 80077ce:	3728      	adds	r7, #40	@ 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020000 	.word	0x40020000

080077dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7fe fb55 	bl	8005ea2 <USBD_LL_SetupStage>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	4619      	mov	r1, r3
 800782a:	f7fe fb8f 	bl	8005f4c <USBD_LL_DataOutStage>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3320      	adds	r3, #32
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	4619      	mov	r1, r3
 800785e:	f7fe fc28 	bl	80060b2 <USBD_LL_DataInStage>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fd62 	bl	8006342 <USBD_LL_SOF>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800788e:	2301      	movs	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	79db      	ldrb	r3, [r3, #7]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d001      	beq.n	800789e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800789a:	f7f9 f80d 	bl	80008b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fd06 	bl	80062ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fcae 	bl	8006216 <USBD_LL_Reset>
}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fd01 	bl	80062da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7adb      	ldrb	r3, [r3, #11]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078f8:	4b04      	ldr	r3, [pc, #16]	@ (800790c <HAL_PCD_SuspendCallback+0x48>)
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	4a03      	ldr	r2, [pc, #12]	@ (800790c <HAL_PCD_SuspendCallback+0x48>)
 80078fe:	f043 0306 	orr.w	r3, r3, #6
 8007902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	e000ed00 	.word	0xe000ed00

08007910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fcf7 	bl	8006312 <USBD_LL_Resume>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fd4f 	bl	80063e6 <USBD_LL_IsoOUTIncomplete>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fd0b 	bl	8006382 <USBD_LL_IsoINIncomplete>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fd61 	bl	800644a <USBD_LL_DevConnected>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fd5e 	bl	8006460 <USBD_LL_DevDisconnected>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d13c      	bne.n	8007a36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079bc:	4a20      	ldr	r2, [pc, #128]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80079d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079d6:	2204      	movs	r2, #4
 80079d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079da:	4b19      	ldr	r3, [pc, #100]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079dc:	2202      	movs	r2, #2
 80079de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079e0:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079e6:	4b16      	ldr	r3, [pc, #88]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079e8:	2202      	movs	r2, #2
 80079ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079ec:	4b14      	ldr	r3, [pc, #80]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079f2:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079f8:	4b11      	ldr	r3, [pc, #68]	@ (8007a40 <USBD_LL_Init+0x94>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079fe:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a04:	4b0e      	ldr	r3, [pc, #56]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a0a:	480d      	ldr	r0, [pc, #52]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a0c:	f7f9 fc09 	bl	8001222 <HAL_PCD_Init>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a16:	f7f8 ff4f 	bl	80008b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a1a:	2180      	movs	r1, #128	@ 0x80
 8007a1c:	4808      	ldr	r0, [pc, #32]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a1e:	f7fa fe34 	bl	800268a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a22:	2240      	movs	r2, #64	@ 0x40
 8007a24:	2100      	movs	r1, #0
 8007a26:	4806      	ldr	r0, [pc, #24]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a28:	f7fa fde8 	bl	80025fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a2c:	2280      	movs	r2, #128	@ 0x80
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4803      	ldr	r0, [pc, #12]	@ (8007a40 <USBD_LL_Init+0x94>)
 8007a32:	f7fa fde3 	bl	80025fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200016d0 	.word	0x200016d0

08007a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f9 fcf0 	bl	8001440 <HAL_PCD_Start>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f942 	bl	8007cf0 <USBD_Get_USB_Status>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	461a      	mov	r2, r3
 8007a88:	4603      	mov	r3, r0
 8007a8a:	70fb      	strb	r3, [r7, #3]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70bb      	strb	r3, [r7, #2]
 8007a90:	4613      	mov	r3, r2
 8007a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007aa2:	78bb      	ldrb	r3, [r7, #2]
 8007aa4:	883a      	ldrh	r2, [r7, #0]
 8007aa6:	78f9      	ldrb	r1, [r7, #3]
 8007aa8:	f7fa f9c4 	bl	8001e34 <HAL_PCD_EP_Open>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f91c 	bl	8007cf0 <USBD_Get_USB_Status>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fa fa0d 	bl	8001f04 <HAL_PCD_EP_Close>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f8fd 	bl	8007cf0 <USBD_Get_USB_Status>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fa fac5 	bl	80020b2 <HAL_PCD_EP_SetStall>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 f8de 	bl	8007cf0 <USBD_Get_USB_Status>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fa fb09 	bl	8002178 <HAL_PCD_EP_ClrStall>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 f8bf 	bl	8007cf0 <USBD_Get_USB_Status>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da0b      	bge.n	8007bb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	3316      	adds	r3, #22
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	e00b      	b.n	8007bcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fa f8f8 	bl	8001dec <HAL_PCD_SetAddress>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f874 	bl	8007cf0 <USBD_Get_USB_Status>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b086      	sub	sp, #24
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
 8007c22:	460b      	mov	r3, r1
 8007c24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c34:	7af9      	ldrb	r1, [r7, #11]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f7fa fa00 	bl	800203e <HAL_PCD_EP_Transmit>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f853 	bl	8007cf0 <USBD_Get_USB_Status>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	460b      	mov	r3, r1
 8007c66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c76:	7af9      	ldrb	r1, [r7, #11]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	f7fa f98c 	bl	8001f98 <HAL_PCD_EP_Receive>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f832 	bl	8007cf0 <USBD_Get_USB_Status>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fa f9ac 	bl	800200e <HAL_PCD_EP_GetRxCount>
 8007cb6:	4603      	mov	r3, r0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <USBD_static_malloc+0x18>)
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20001bb4 	.word	0x20001bb4

08007cdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d817      	bhi.n	8007d34 <USBD_Get_USB_Status+0x44>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <USBD_Get_USB_Status+0x1c>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d23 	.word	0x08007d23
 8007d14:	08007d29 	.word	0x08007d29
 8007d18:	08007d2f 	.word	0x08007d2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d20:	e00b      	b.n	8007d3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d22:	2303      	movs	r3, #3
 8007d24:	73fb      	strb	r3, [r7, #15]
    break;
 8007d26:	e008      	b.n	8007d3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2c:	e005      	b.n	8007d3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	73fb      	strb	r3, [r7, #15]
    break;
 8007d32:	e002      	b.n	8007d3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	73fb      	strb	r3, [r7, #15]
    break;
 8007d38:	bf00      	nop
  }
  return usb_status;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <siprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b500      	push	{lr}
 8007d4c:	b09c      	sub	sp, #112	@ 0x70
 8007d4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	9006      	str	r0, [sp, #24]
 8007d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d58:	4809      	ldr	r0, [pc, #36]	@ (8007d80 <siprintf+0x38>)
 8007d5a:	9107      	str	r1, [sp, #28]
 8007d5c:	9104      	str	r1, [sp, #16]
 8007d5e:	4909      	ldr	r1, [pc, #36]	@ (8007d84 <siprintf+0x3c>)
 8007d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d64:	9105      	str	r1, [sp, #20]
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	a902      	add	r1, sp, #8
 8007d6c:	f000 f994 	bl	8008098 <_svfiprintf_r>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	b01c      	add	sp, #112	@ 0x70
 8007d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d7c:	b003      	add	sp, #12
 8007d7e:	4770      	bx	lr
 8007d80:	200000fc 	.word	0x200000fc
 8007d84:	ffff0208 	.word	0xffff0208

08007d88 <memset>:
 8007d88:	4402      	add	r2, r0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d100      	bne.n	8007d92 <memset+0xa>
 8007d90:	4770      	bx	lr
 8007d92:	f803 1b01 	strb.w	r1, [r3], #1
 8007d96:	e7f9      	b.n	8007d8c <memset+0x4>

08007d98 <__errno>:
 8007d98:	4b01      	ldr	r3, [pc, #4]	@ (8007da0 <__errno+0x8>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	200000fc 	.word	0x200000fc

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4d0d      	ldr	r5, [pc, #52]	@ (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	@ (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1b64      	subs	r4, r4, r5
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2600      	movs	r6, #0
 8007db0:	42a6      	cmp	r6, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4d0b      	ldr	r5, [pc, #44]	@ (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	@ (8007de8 <__libc_init_array+0x44>)
 8007db8:	f000 fc66 	bl	8008688 <_init>
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dcc:	4798      	blx	r3
 8007dce:	3601      	adds	r6, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd6:	4798      	blx	r3
 8007dd8:	3601      	adds	r6, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	08008738 	.word	0x08008738
 8007de0:	08008738 	.word	0x08008738
 8007de4:	08008738 	.word	0x08008738
 8007de8:	0800873c 	.word	0x0800873c

08007dec <__retarget_lock_acquire_recursive>:
 8007dec:	4770      	bx	lr

08007dee <__retarget_lock_release_recursive>:
 8007dee:	4770      	bx	lr

08007df0 <_free_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	2900      	cmp	r1, #0
 8007df6:	d041      	beq.n	8007e7c <_free_r+0x8c>
 8007df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfc:	1f0c      	subs	r4, r1, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	18e4      	addlt	r4, r4, r3
 8007e04:	f000 f8e0 	bl	8007fc8 <__malloc_lock>
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <_free_r+0x90>)
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	b933      	cbnz	r3, 8007e1c <_free_r+0x2c>
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	6014      	str	r4, [r2, #0]
 8007e12:	4628      	mov	r0, r5
 8007e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e18:	f000 b8dc 	b.w	8007fd4 <__malloc_unlock>
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d908      	bls.n	8007e32 <_free_r+0x42>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	1821      	adds	r1, r4, r0
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf01      	itttt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	1809      	addeq	r1, r1, r0
 8007e2e:	6021      	streq	r1, [r4, #0]
 8007e30:	e7ed      	b.n	8007e0e <_free_r+0x1e>
 8007e32:	461a      	mov	r2, r3
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	b10b      	cbz	r3, 8007e3c <_free_r+0x4c>
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d9fa      	bls.n	8007e32 <_free_r+0x42>
 8007e3c:	6811      	ldr	r1, [r2, #0]
 8007e3e:	1850      	adds	r0, r2, r1
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d10b      	bne.n	8007e5c <_free_r+0x6c>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	4401      	add	r1, r0
 8007e48:	1850      	adds	r0, r2, r1
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	d1e0      	bne.n	8007e12 <_free_r+0x22>
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	6053      	str	r3, [r2, #4]
 8007e56:	4408      	add	r0, r1
 8007e58:	6010      	str	r0, [r2, #0]
 8007e5a:	e7da      	b.n	8007e12 <_free_r+0x22>
 8007e5c:	d902      	bls.n	8007e64 <_free_r+0x74>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	e7d6      	b.n	8007e12 <_free_r+0x22>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	1821      	adds	r1, r4, r0
 8007e68:	428b      	cmp	r3, r1
 8007e6a:	bf04      	itt	eq
 8007e6c:	6819      	ldreq	r1, [r3, #0]
 8007e6e:	685b      	ldreq	r3, [r3, #4]
 8007e70:	6063      	str	r3, [r4, #4]
 8007e72:	bf04      	itt	eq
 8007e74:	1809      	addeq	r1, r1, r0
 8007e76:	6021      	streq	r1, [r4, #0]
 8007e78:	6054      	str	r4, [r2, #4]
 8007e7a:	e7ca      	b.n	8007e12 <_free_r+0x22>
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	bf00      	nop
 8007e80:	20001f18 	.word	0x20001f18

08007e84 <sbrk_aligned>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4e0f      	ldr	r6, [pc, #60]	@ (8007ec4 <sbrk_aligned+0x40>)
 8007e88:	460c      	mov	r4, r1
 8007e8a:	6831      	ldr	r1, [r6, #0]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	b911      	cbnz	r1, 8007e96 <sbrk_aligned+0x12>
 8007e90:	f000 fba6 	bl	80085e0 <_sbrk_r>
 8007e94:	6030      	str	r0, [r6, #0]
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 fba1 	bl	80085e0 <_sbrk_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d103      	bne.n	8007eaa <sbrk_aligned+0x26>
 8007ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	1cc4      	adds	r4, r0, #3
 8007eac:	f024 0403 	bic.w	r4, r4, #3
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d0f8      	beq.n	8007ea6 <sbrk_aligned+0x22>
 8007eb4:	1a21      	subs	r1, r4, r0
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 fb92 	bl	80085e0 <_sbrk_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d1f2      	bne.n	8007ea6 <sbrk_aligned+0x22>
 8007ec0:	e7ef      	b.n	8007ea2 <sbrk_aligned+0x1e>
 8007ec2:	bf00      	nop
 8007ec4:	20001f14 	.word	0x20001f14

08007ec8 <_malloc_r>:
 8007ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ecc:	1ccd      	adds	r5, r1, #3
 8007ece:	f025 0503 	bic.w	r5, r5, #3
 8007ed2:	3508      	adds	r5, #8
 8007ed4:	2d0c      	cmp	r5, #12
 8007ed6:	bf38      	it	cc
 8007ed8:	250c      	movcc	r5, #12
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	4606      	mov	r6, r0
 8007ede:	db01      	blt.n	8007ee4 <_malloc_r+0x1c>
 8007ee0:	42a9      	cmp	r1, r5
 8007ee2:	d904      	bls.n	8007eee <_malloc_r+0x26>
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	6033      	str	r3, [r6, #0]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fc4 <_malloc_r+0xfc>
 8007ef2:	f000 f869 	bl	8007fc8 <__malloc_lock>
 8007ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8007efa:	461c      	mov	r4, r3
 8007efc:	bb44      	cbnz	r4, 8007f50 <_malloc_r+0x88>
 8007efe:	4629      	mov	r1, r5
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff ffbf 	bl	8007e84 <sbrk_aligned>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	4604      	mov	r4, r0
 8007f0a:	d158      	bne.n	8007fbe <_malloc_r+0xf6>
 8007f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f10:	4627      	mov	r7, r4
 8007f12:	2f00      	cmp	r7, #0
 8007f14:	d143      	bne.n	8007f9e <_malloc_r+0xd6>
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	d04b      	beq.n	8007fb2 <_malloc_r+0xea>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4630      	mov	r0, r6
 8007f20:	eb04 0903 	add.w	r9, r4, r3
 8007f24:	f000 fb5c 	bl	80085e0 <_sbrk_r>
 8007f28:	4581      	cmp	r9, r0
 8007f2a:	d142      	bne.n	8007fb2 <_malloc_r+0xea>
 8007f2c:	6821      	ldr	r1, [r4, #0]
 8007f2e:	1a6d      	subs	r5, r5, r1
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffa6 	bl	8007e84 <sbrk_aligned>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d03a      	beq.n	8007fb2 <_malloc_r+0xea>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	442b      	add	r3, r5
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	f8d8 3000 	ldr.w	r3, [r8]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	bb62      	cbnz	r2, 8007fa4 <_malloc_r+0xdc>
 8007f4a:	f8c8 7000 	str.w	r7, [r8]
 8007f4e:	e00f      	b.n	8007f70 <_malloc_r+0xa8>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	1b52      	subs	r2, r2, r5
 8007f54:	d420      	bmi.n	8007f98 <_malloc_r+0xd0>
 8007f56:	2a0b      	cmp	r2, #11
 8007f58:	d917      	bls.n	8007f8a <_malloc_r+0xc2>
 8007f5a:	1961      	adds	r1, r4, r5
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	6025      	str	r5, [r4, #0]
 8007f60:	bf18      	it	ne
 8007f62:	6059      	strne	r1, [r3, #4]
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	bf08      	it	eq
 8007f68:	f8c8 1000 	streq.w	r1, [r8]
 8007f6c:	5162      	str	r2, [r4, r5]
 8007f6e:	604b      	str	r3, [r1, #4]
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f82f 	bl	8007fd4 <__malloc_unlock>
 8007f76:	f104 000b 	add.w	r0, r4, #11
 8007f7a:	1d23      	adds	r3, r4, #4
 8007f7c:	f020 0007 	bic.w	r0, r0, #7
 8007f80:	1ac2      	subs	r2, r0, r3
 8007f82:	bf1c      	itt	ne
 8007f84:	1a1b      	subne	r3, r3, r0
 8007f86:	50a3      	strne	r3, [r4, r2]
 8007f88:	e7af      	b.n	8007eea <_malloc_r+0x22>
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	bf0c      	ite	eq
 8007f90:	f8c8 2000 	streq.w	r2, [r8]
 8007f94:	605a      	strne	r2, [r3, #4]
 8007f96:	e7eb      	b.n	8007f70 <_malloc_r+0xa8>
 8007f98:	4623      	mov	r3, r4
 8007f9a:	6864      	ldr	r4, [r4, #4]
 8007f9c:	e7ae      	b.n	8007efc <_malloc_r+0x34>
 8007f9e:	463c      	mov	r4, r7
 8007fa0:	687f      	ldr	r7, [r7, #4]
 8007fa2:	e7b6      	b.n	8007f12 <_malloc_r+0x4a>
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d1fb      	bne.n	8007fa4 <_malloc_r+0xdc>
 8007fac:	2300      	movs	r3, #0
 8007fae:	6053      	str	r3, [r2, #4]
 8007fb0:	e7de      	b.n	8007f70 <_malloc_r+0xa8>
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f80c 	bl	8007fd4 <__malloc_unlock>
 8007fbc:	e794      	b.n	8007ee8 <_malloc_r+0x20>
 8007fbe:	6005      	str	r5, [r0, #0]
 8007fc0:	e7d6      	b.n	8007f70 <_malloc_r+0xa8>
 8007fc2:	bf00      	nop
 8007fc4:	20001f18 	.word	0x20001f18

08007fc8 <__malloc_lock>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	@ (8007fd0 <__malloc_lock+0x8>)
 8007fca:	f7ff bf0f 	b.w	8007dec <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20001f10 	.word	0x20001f10

08007fd4 <__malloc_unlock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	@ (8007fdc <__malloc_unlock+0x8>)
 8007fd6:	f7ff bf0a 	b.w	8007dee <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20001f10 	.word	0x20001f10

08007fe0 <__ssputs_r>:
 8007fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	688e      	ldr	r6, [r1, #8]
 8007fe6:	461f      	mov	r7, r3
 8007fe8:	42be      	cmp	r6, r7
 8007fea:	680b      	ldr	r3, [r1, #0]
 8007fec:	4682      	mov	sl, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	4690      	mov	r8, r2
 8007ff2:	d82d      	bhi.n	8008050 <__ssputs_r+0x70>
 8007ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ffc:	d026      	beq.n	800804c <__ssputs_r+0x6c>
 8007ffe:	6965      	ldr	r5, [r4, #20]
 8008000:	6909      	ldr	r1, [r1, #16]
 8008002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008006:	eba3 0901 	sub.w	r9, r3, r1
 800800a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800800e:	1c7b      	adds	r3, r7, #1
 8008010:	444b      	add	r3, r9
 8008012:	106d      	asrs	r5, r5, #1
 8008014:	429d      	cmp	r5, r3
 8008016:	bf38      	it	cc
 8008018:	461d      	movcc	r5, r3
 800801a:	0553      	lsls	r3, r2, #21
 800801c:	d527      	bpl.n	800806e <__ssputs_r+0x8e>
 800801e:	4629      	mov	r1, r5
 8008020:	f7ff ff52 	bl	8007ec8 <_malloc_r>
 8008024:	4606      	mov	r6, r0
 8008026:	b360      	cbz	r0, 8008082 <__ssputs_r+0xa2>
 8008028:	6921      	ldr	r1, [r4, #16]
 800802a:	464a      	mov	r2, r9
 800802c:	f000 fae8 	bl	8008600 <memcpy>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6126      	str	r6, [r4, #16]
 800803e:	6165      	str	r5, [r4, #20]
 8008040:	444e      	add	r6, r9
 8008042:	eba5 0509 	sub.w	r5, r5, r9
 8008046:	6026      	str	r6, [r4, #0]
 8008048:	60a5      	str	r5, [r4, #8]
 800804a:	463e      	mov	r6, r7
 800804c:	42be      	cmp	r6, r7
 800804e:	d900      	bls.n	8008052 <__ssputs_r+0x72>
 8008050:	463e      	mov	r6, r7
 8008052:	6820      	ldr	r0, [r4, #0]
 8008054:	4632      	mov	r2, r6
 8008056:	4641      	mov	r1, r8
 8008058:	f000 faa8 	bl	80085ac <memmove>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	1b9b      	subs	r3, r3, r6
 8008060:	60a3      	str	r3, [r4, #8]
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	4433      	add	r3, r6
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	462a      	mov	r2, r5
 8008070:	f000 fad4 	bl	800861c <_realloc_r>
 8008074:	4606      	mov	r6, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	d1e0      	bne.n	800803c <__ssputs_r+0x5c>
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	4650      	mov	r0, sl
 800807e:	f7ff feb7 	bl	8007df0 <_free_r>
 8008082:	230c      	movs	r3, #12
 8008084:	f8ca 3000 	str.w	r3, [sl]
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	e7e9      	b.n	800806a <__ssputs_r+0x8a>
	...

08008098 <_svfiprintf_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	4698      	mov	r8, r3
 800809e:	898b      	ldrh	r3, [r1, #12]
 80080a0:	061b      	lsls	r3, r3, #24
 80080a2:	b09d      	sub	sp, #116	@ 0x74
 80080a4:	4607      	mov	r7, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	4614      	mov	r4, r2
 80080aa:	d510      	bpl.n	80080ce <_svfiprintf_r+0x36>
 80080ac:	690b      	ldr	r3, [r1, #16]
 80080ae:	b973      	cbnz	r3, 80080ce <_svfiprintf_r+0x36>
 80080b0:	2140      	movs	r1, #64	@ 0x40
 80080b2:	f7ff ff09 	bl	8007ec8 <_malloc_r>
 80080b6:	6028      	str	r0, [r5, #0]
 80080b8:	6128      	str	r0, [r5, #16]
 80080ba:	b930      	cbnz	r0, 80080ca <_svfiprintf_r+0x32>
 80080bc:	230c      	movs	r3, #12
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	b01d      	add	sp, #116	@ 0x74
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	2340      	movs	r3, #64	@ 0x40
 80080cc:	616b      	str	r3, [r5, #20]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d2:	2320      	movs	r3, #32
 80080d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080dc:	2330      	movs	r3, #48	@ 0x30
 80080de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800827c <_svfiprintf_r+0x1e4>
 80080e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080e6:	f04f 0901 	mov.w	r9, #1
 80080ea:	4623      	mov	r3, r4
 80080ec:	469a      	mov	sl, r3
 80080ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f2:	b10a      	cbz	r2, 80080f8 <_svfiprintf_r+0x60>
 80080f4:	2a25      	cmp	r2, #37	@ 0x25
 80080f6:	d1f9      	bne.n	80080ec <_svfiprintf_r+0x54>
 80080f8:	ebba 0b04 	subs.w	fp, sl, r4
 80080fc:	d00b      	beq.n	8008116 <_svfiprintf_r+0x7e>
 80080fe:	465b      	mov	r3, fp
 8008100:	4622      	mov	r2, r4
 8008102:	4629      	mov	r1, r5
 8008104:	4638      	mov	r0, r7
 8008106:	f7ff ff6b 	bl	8007fe0 <__ssputs_r>
 800810a:	3001      	adds	r0, #1
 800810c:	f000 80a7 	beq.w	800825e <_svfiprintf_r+0x1c6>
 8008110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008112:	445a      	add	r2, fp
 8008114:	9209      	str	r2, [sp, #36]	@ 0x24
 8008116:	f89a 3000 	ldrb.w	r3, [sl]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 809f 	beq.w	800825e <_svfiprintf_r+0x1c6>
 8008120:	2300      	movs	r3, #0
 8008122:	f04f 32ff 	mov.w	r2, #4294967295
 8008126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812a:	f10a 0a01 	add.w	sl, sl, #1
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	9307      	str	r3, [sp, #28]
 8008132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008136:	931a      	str	r3, [sp, #104]	@ 0x68
 8008138:	4654      	mov	r4, sl
 800813a:	2205      	movs	r2, #5
 800813c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008140:	484e      	ldr	r0, [pc, #312]	@ (800827c <_svfiprintf_r+0x1e4>)
 8008142:	f7f8 f855 	bl	80001f0 <memchr>
 8008146:	9a04      	ldr	r2, [sp, #16]
 8008148:	b9d8      	cbnz	r0, 8008182 <_svfiprintf_r+0xea>
 800814a:	06d0      	lsls	r0, r2, #27
 800814c:	bf44      	itt	mi
 800814e:	2320      	movmi	r3, #32
 8008150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008154:	0711      	lsls	r1, r2, #28
 8008156:	bf44      	itt	mi
 8008158:	232b      	movmi	r3, #43	@ 0x2b
 800815a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800815e:	f89a 3000 	ldrb.w	r3, [sl]
 8008162:	2b2a      	cmp	r3, #42	@ 0x2a
 8008164:	d015      	beq.n	8008192 <_svfiprintf_r+0xfa>
 8008166:	9a07      	ldr	r2, [sp, #28]
 8008168:	4654      	mov	r4, sl
 800816a:	2000      	movs	r0, #0
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4621      	mov	r1, r4
 8008172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008176:	3b30      	subs	r3, #48	@ 0x30
 8008178:	2b09      	cmp	r3, #9
 800817a:	d94b      	bls.n	8008214 <_svfiprintf_r+0x17c>
 800817c:	b1b0      	cbz	r0, 80081ac <_svfiprintf_r+0x114>
 800817e:	9207      	str	r2, [sp, #28]
 8008180:	e014      	b.n	80081ac <_svfiprintf_r+0x114>
 8008182:	eba0 0308 	sub.w	r3, r0, r8
 8008186:	fa09 f303 	lsl.w	r3, r9, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	46a2      	mov	sl, r4
 8008190:	e7d2      	b.n	8008138 <_svfiprintf_r+0xa0>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	1d19      	adds	r1, r3, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	9103      	str	r1, [sp, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	bfbb      	ittet	lt
 800819e:	425b      	neglt	r3, r3
 80081a0:	f042 0202 	orrlt.w	r2, r2, #2
 80081a4:	9307      	strge	r3, [sp, #28]
 80081a6:	9307      	strlt	r3, [sp, #28]
 80081a8:	bfb8      	it	lt
 80081aa:	9204      	strlt	r2, [sp, #16]
 80081ac:	7823      	ldrb	r3, [r4, #0]
 80081ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80081b0:	d10a      	bne.n	80081c8 <_svfiprintf_r+0x130>
 80081b2:	7863      	ldrb	r3, [r4, #1]
 80081b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b6:	d132      	bne.n	800821e <_svfiprintf_r+0x186>
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	1d1a      	adds	r2, r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	9203      	str	r2, [sp, #12]
 80081c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081c4:	3402      	adds	r4, #2
 80081c6:	9305      	str	r3, [sp, #20]
 80081c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800828c <_svfiprintf_r+0x1f4>
 80081cc:	7821      	ldrb	r1, [r4, #0]
 80081ce:	2203      	movs	r2, #3
 80081d0:	4650      	mov	r0, sl
 80081d2:	f7f8 f80d 	bl	80001f0 <memchr>
 80081d6:	b138      	cbz	r0, 80081e8 <_svfiprintf_r+0x150>
 80081d8:	9b04      	ldr	r3, [sp, #16]
 80081da:	eba0 000a 	sub.w	r0, r0, sl
 80081de:	2240      	movs	r2, #64	@ 0x40
 80081e0:	4082      	lsls	r2, r0
 80081e2:	4313      	orrs	r3, r2
 80081e4:	3401      	adds	r4, #1
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ec:	4824      	ldr	r0, [pc, #144]	@ (8008280 <_svfiprintf_r+0x1e8>)
 80081ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081f2:	2206      	movs	r2, #6
 80081f4:	f7f7 fffc 	bl	80001f0 <memchr>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d036      	beq.n	800826a <_svfiprintf_r+0x1d2>
 80081fc:	4b21      	ldr	r3, [pc, #132]	@ (8008284 <_svfiprintf_r+0x1ec>)
 80081fe:	bb1b      	cbnz	r3, 8008248 <_svfiprintf_r+0x1b0>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	3307      	adds	r3, #7
 8008204:	f023 0307 	bic.w	r3, r3, #7
 8008208:	3308      	adds	r3, #8
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	4433      	add	r3, r6
 8008210:	9309      	str	r3, [sp, #36]	@ 0x24
 8008212:	e76a      	b.n	80080ea <_svfiprintf_r+0x52>
 8008214:	fb0c 3202 	mla	r2, ip, r2, r3
 8008218:	460c      	mov	r4, r1
 800821a:	2001      	movs	r0, #1
 800821c:	e7a8      	b.n	8008170 <_svfiprintf_r+0xd8>
 800821e:	2300      	movs	r3, #0
 8008220:	3401      	adds	r4, #1
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	4619      	mov	r1, r3
 8008226:	f04f 0c0a 	mov.w	ip, #10
 800822a:	4620      	mov	r0, r4
 800822c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008230:	3a30      	subs	r2, #48	@ 0x30
 8008232:	2a09      	cmp	r2, #9
 8008234:	d903      	bls.n	800823e <_svfiprintf_r+0x1a6>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0c6      	beq.n	80081c8 <_svfiprintf_r+0x130>
 800823a:	9105      	str	r1, [sp, #20]
 800823c:	e7c4      	b.n	80081c8 <_svfiprintf_r+0x130>
 800823e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008242:	4604      	mov	r4, r0
 8008244:	2301      	movs	r3, #1
 8008246:	e7f0      	b.n	800822a <_svfiprintf_r+0x192>
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	462a      	mov	r2, r5
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <_svfiprintf_r+0x1f0>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	4638      	mov	r0, r7
 8008254:	f3af 8000 	nop.w
 8008258:	1c42      	adds	r2, r0, #1
 800825a:	4606      	mov	r6, r0
 800825c:	d1d6      	bne.n	800820c <_svfiprintf_r+0x174>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	065b      	lsls	r3, r3, #25
 8008262:	f53f af2d 	bmi.w	80080c0 <_svfiprintf_r+0x28>
 8008266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008268:	e72c      	b.n	80080c4 <_svfiprintf_r+0x2c>
 800826a:	ab03      	add	r3, sp, #12
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	462a      	mov	r2, r5
 8008270:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <_svfiprintf_r+0x1f0>)
 8008272:	a904      	add	r1, sp, #16
 8008274:	4638      	mov	r0, r7
 8008276:	f000 f879 	bl	800836c <_printf_i>
 800827a:	e7ed      	b.n	8008258 <_svfiprintf_r+0x1c0>
 800827c:	080086fc 	.word	0x080086fc
 8008280:	08008706 	.word	0x08008706
 8008284:	00000000 	.word	0x00000000
 8008288:	08007fe1 	.word	0x08007fe1
 800828c:	08008702 	.word	0x08008702

08008290 <_printf_common>:
 8008290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	4616      	mov	r6, r2
 8008296:	4698      	mov	r8, r3
 8008298:	688a      	ldr	r2, [r1, #8]
 800829a:	690b      	ldr	r3, [r1, #16]
 800829c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bfb8      	it	lt
 80082a4:	4613      	movlt	r3, r2
 80082a6:	6033      	str	r3, [r6, #0]
 80082a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082ac:	4607      	mov	r7, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	b10a      	cbz	r2, 80082b6 <_printf_common+0x26>
 80082b2:	3301      	adds	r3, #1
 80082b4:	6033      	str	r3, [r6, #0]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	0699      	lsls	r1, r3, #26
 80082ba:	bf42      	ittt	mi
 80082bc:	6833      	ldrmi	r3, [r6, #0]
 80082be:	3302      	addmi	r3, #2
 80082c0:	6033      	strmi	r3, [r6, #0]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	f015 0506 	ands.w	r5, r5, #6
 80082c8:	d106      	bne.n	80082d8 <_printf_common+0x48>
 80082ca:	f104 0a19 	add.w	sl, r4, #25
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	6832      	ldr	r2, [r6, #0]
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	dc26      	bgt.n	8008326 <_printf_common+0x96>
 80082d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	3b00      	subs	r3, #0
 80082e0:	bf18      	it	ne
 80082e2:	2301      	movne	r3, #1
 80082e4:	0692      	lsls	r2, r2, #26
 80082e6:	d42b      	bmi.n	8008340 <_printf_common+0xb0>
 80082e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082ec:	4641      	mov	r1, r8
 80082ee:	4638      	mov	r0, r7
 80082f0:	47c8      	blx	r9
 80082f2:	3001      	adds	r0, #1
 80082f4:	d01e      	beq.n	8008334 <_printf_common+0xa4>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	f003 0306 	and.w	r3, r3, #6
 80082fe:	2b04      	cmp	r3, #4
 8008300:	bf02      	ittt	eq
 8008302:	68e5      	ldreq	r5, [r4, #12]
 8008304:	6833      	ldreq	r3, [r6, #0]
 8008306:	1aed      	subeq	r5, r5, r3
 8008308:	68a3      	ldr	r3, [r4, #8]
 800830a:	bf0c      	ite	eq
 800830c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008310:	2500      	movne	r5, #0
 8008312:	4293      	cmp	r3, r2
 8008314:	bfc4      	itt	gt
 8008316:	1a9b      	subgt	r3, r3, r2
 8008318:	18ed      	addgt	r5, r5, r3
 800831a:	2600      	movs	r6, #0
 800831c:	341a      	adds	r4, #26
 800831e:	42b5      	cmp	r5, r6
 8008320:	d11a      	bne.n	8008358 <_printf_common+0xc8>
 8008322:	2000      	movs	r0, #0
 8008324:	e008      	b.n	8008338 <_printf_common+0xa8>
 8008326:	2301      	movs	r3, #1
 8008328:	4652      	mov	r2, sl
 800832a:	4641      	mov	r1, r8
 800832c:	4638      	mov	r0, r7
 800832e:	47c8      	blx	r9
 8008330:	3001      	adds	r0, #1
 8008332:	d103      	bne.n	800833c <_printf_common+0xac>
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833c:	3501      	adds	r5, #1
 800833e:	e7c6      	b.n	80082ce <_printf_common+0x3e>
 8008340:	18e1      	adds	r1, r4, r3
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	2030      	movs	r0, #48	@ 0x30
 8008346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800834a:	4422      	add	r2, r4
 800834c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008354:	3302      	adds	r3, #2
 8008356:	e7c7      	b.n	80082e8 <_printf_common+0x58>
 8008358:	2301      	movs	r3, #1
 800835a:	4622      	mov	r2, r4
 800835c:	4641      	mov	r1, r8
 800835e:	4638      	mov	r0, r7
 8008360:	47c8      	blx	r9
 8008362:	3001      	adds	r0, #1
 8008364:	d0e6      	beq.n	8008334 <_printf_common+0xa4>
 8008366:	3601      	adds	r6, #1
 8008368:	e7d9      	b.n	800831e <_printf_common+0x8e>
	...

0800836c <_printf_i>:
 800836c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	7e0f      	ldrb	r7, [r1, #24]
 8008372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008374:	2f78      	cmp	r7, #120	@ 0x78
 8008376:	4691      	mov	r9, r2
 8008378:	4680      	mov	r8, r0
 800837a:	460c      	mov	r4, r1
 800837c:	469a      	mov	sl, r3
 800837e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008382:	d807      	bhi.n	8008394 <_printf_i+0x28>
 8008384:	2f62      	cmp	r7, #98	@ 0x62
 8008386:	d80a      	bhi.n	800839e <_printf_i+0x32>
 8008388:	2f00      	cmp	r7, #0
 800838a:	f000 80d2 	beq.w	8008532 <_printf_i+0x1c6>
 800838e:	2f58      	cmp	r7, #88	@ 0x58
 8008390:	f000 80b9 	beq.w	8008506 <_printf_i+0x19a>
 8008394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800839c:	e03a      	b.n	8008414 <_printf_i+0xa8>
 800839e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083a2:	2b15      	cmp	r3, #21
 80083a4:	d8f6      	bhi.n	8008394 <_printf_i+0x28>
 80083a6:	a101      	add	r1, pc, #4	@ (adr r1, 80083ac <_printf_i+0x40>)
 80083a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083ac:	08008405 	.word	0x08008405
 80083b0:	08008419 	.word	0x08008419
 80083b4:	08008395 	.word	0x08008395
 80083b8:	08008395 	.word	0x08008395
 80083bc:	08008395 	.word	0x08008395
 80083c0:	08008395 	.word	0x08008395
 80083c4:	08008419 	.word	0x08008419
 80083c8:	08008395 	.word	0x08008395
 80083cc:	08008395 	.word	0x08008395
 80083d0:	08008395 	.word	0x08008395
 80083d4:	08008395 	.word	0x08008395
 80083d8:	08008519 	.word	0x08008519
 80083dc:	08008443 	.word	0x08008443
 80083e0:	080084d3 	.word	0x080084d3
 80083e4:	08008395 	.word	0x08008395
 80083e8:	08008395 	.word	0x08008395
 80083ec:	0800853b 	.word	0x0800853b
 80083f0:	08008395 	.word	0x08008395
 80083f4:	08008443 	.word	0x08008443
 80083f8:	08008395 	.word	0x08008395
 80083fc:	08008395 	.word	0x08008395
 8008400:	080084db 	.word	0x080084db
 8008404:	6833      	ldr	r3, [r6, #0]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6032      	str	r2, [r6, #0]
 800840c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008414:	2301      	movs	r3, #1
 8008416:	e09d      	b.n	8008554 <_printf_i+0x1e8>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	6820      	ldr	r0, [r4, #0]
 800841c:	1d19      	adds	r1, r3, #4
 800841e:	6031      	str	r1, [r6, #0]
 8008420:	0606      	lsls	r6, r0, #24
 8008422:	d501      	bpl.n	8008428 <_printf_i+0xbc>
 8008424:	681d      	ldr	r5, [r3, #0]
 8008426:	e003      	b.n	8008430 <_printf_i+0xc4>
 8008428:	0645      	lsls	r5, r0, #25
 800842a:	d5fb      	bpl.n	8008424 <_printf_i+0xb8>
 800842c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008430:	2d00      	cmp	r5, #0
 8008432:	da03      	bge.n	800843c <_printf_i+0xd0>
 8008434:	232d      	movs	r3, #45	@ 0x2d
 8008436:	426d      	negs	r5, r5
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800843c:	4859      	ldr	r0, [pc, #356]	@ (80085a4 <_printf_i+0x238>)
 800843e:	230a      	movs	r3, #10
 8008440:	e011      	b.n	8008466 <_printf_i+0xfa>
 8008442:	6821      	ldr	r1, [r4, #0]
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	0608      	lsls	r0, r1, #24
 8008448:	f853 5b04 	ldr.w	r5, [r3], #4
 800844c:	d402      	bmi.n	8008454 <_printf_i+0xe8>
 800844e:	0649      	lsls	r1, r1, #25
 8008450:	bf48      	it	mi
 8008452:	b2ad      	uxthmi	r5, r5
 8008454:	2f6f      	cmp	r7, #111	@ 0x6f
 8008456:	4853      	ldr	r0, [pc, #332]	@ (80085a4 <_printf_i+0x238>)
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	bf14      	ite	ne
 800845c:	230a      	movne	r3, #10
 800845e:	2308      	moveq	r3, #8
 8008460:	2100      	movs	r1, #0
 8008462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008466:	6866      	ldr	r6, [r4, #4]
 8008468:	60a6      	str	r6, [r4, #8]
 800846a:	2e00      	cmp	r6, #0
 800846c:	bfa2      	ittt	ge
 800846e:	6821      	ldrge	r1, [r4, #0]
 8008470:	f021 0104 	bicge.w	r1, r1, #4
 8008474:	6021      	strge	r1, [r4, #0]
 8008476:	b90d      	cbnz	r5, 800847c <_printf_i+0x110>
 8008478:	2e00      	cmp	r6, #0
 800847a:	d04b      	beq.n	8008514 <_printf_i+0x1a8>
 800847c:	4616      	mov	r6, r2
 800847e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008482:	fb03 5711 	mls	r7, r3, r1, r5
 8008486:	5dc7      	ldrb	r7, [r0, r7]
 8008488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800848c:	462f      	mov	r7, r5
 800848e:	42bb      	cmp	r3, r7
 8008490:	460d      	mov	r5, r1
 8008492:	d9f4      	bls.n	800847e <_printf_i+0x112>
 8008494:	2b08      	cmp	r3, #8
 8008496:	d10b      	bne.n	80084b0 <_printf_i+0x144>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	07df      	lsls	r7, r3, #31
 800849c:	d508      	bpl.n	80084b0 <_printf_i+0x144>
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	6861      	ldr	r1, [r4, #4]
 80084a2:	4299      	cmp	r1, r3
 80084a4:	bfde      	ittt	le
 80084a6:	2330      	movle	r3, #48	@ 0x30
 80084a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084b0:	1b92      	subs	r2, r2, r6
 80084b2:	6122      	str	r2, [r4, #16]
 80084b4:	f8cd a000 	str.w	sl, [sp]
 80084b8:	464b      	mov	r3, r9
 80084ba:	aa03      	add	r2, sp, #12
 80084bc:	4621      	mov	r1, r4
 80084be:	4640      	mov	r0, r8
 80084c0:	f7ff fee6 	bl	8008290 <_printf_common>
 80084c4:	3001      	adds	r0, #1
 80084c6:	d14a      	bne.n	800855e <_printf_i+0x1f2>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	b004      	add	sp, #16
 80084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f043 0320 	orr.w	r3, r3, #32
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	4833      	ldr	r0, [pc, #204]	@ (80085a8 <_printf_i+0x23c>)
 80084dc:	2778      	movs	r7, #120	@ 0x78
 80084de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	6831      	ldr	r1, [r6, #0]
 80084e6:	061f      	lsls	r7, r3, #24
 80084e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80084ec:	d402      	bmi.n	80084f4 <_printf_i+0x188>
 80084ee:	065f      	lsls	r7, r3, #25
 80084f0:	bf48      	it	mi
 80084f2:	b2ad      	uxthmi	r5, r5
 80084f4:	6031      	str	r1, [r6, #0]
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	bf44      	itt	mi
 80084fa:	f043 0320 	orrmi.w	r3, r3, #32
 80084fe:	6023      	strmi	r3, [r4, #0]
 8008500:	b11d      	cbz	r5, 800850a <_printf_i+0x19e>
 8008502:	2310      	movs	r3, #16
 8008504:	e7ac      	b.n	8008460 <_printf_i+0xf4>
 8008506:	4827      	ldr	r0, [pc, #156]	@ (80085a4 <_printf_i+0x238>)
 8008508:	e7e9      	b.n	80084de <_printf_i+0x172>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f023 0320 	bic.w	r3, r3, #32
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	e7f6      	b.n	8008502 <_printf_i+0x196>
 8008514:	4616      	mov	r6, r2
 8008516:	e7bd      	b.n	8008494 <_printf_i+0x128>
 8008518:	6833      	ldr	r3, [r6, #0]
 800851a:	6825      	ldr	r5, [r4, #0]
 800851c:	6961      	ldr	r1, [r4, #20]
 800851e:	1d18      	adds	r0, r3, #4
 8008520:	6030      	str	r0, [r6, #0]
 8008522:	062e      	lsls	r6, r5, #24
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	d501      	bpl.n	800852c <_printf_i+0x1c0>
 8008528:	6019      	str	r1, [r3, #0]
 800852a:	e002      	b.n	8008532 <_printf_i+0x1c6>
 800852c:	0668      	lsls	r0, r5, #25
 800852e:	d5fb      	bpl.n	8008528 <_printf_i+0x1bc>
 8008530:	8019      	strh	r1, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	4616      	mov	r6, r2
 8008538:	e7bc      	b.n	80084b4 <_printf_i+0x148>
 800853a:	6833      	ldr	r3, [r6, #0]
 800853c:	1d1a      	adds	r2, r3, #4
 800853e:	6032      	str	r2, [r6, #0]
 8008540:	681e      	ldr	r6, [r3, #0]
 8008542:	6862      	ldr	r2, [r4, #4]
 8008544:	2100      	movs	r1, #0
 8008546:	4630      	mov	r0, r6
 8008548:	f7f7 fe52 	bl	80001f0 <memchr>
 800854c:	b108      	cbz	r0, 8008552 <_printf_i+0x1e6>
 800854e:	1b80      	subs	r0, r0, r6
 8008550:	6060      	str	r0, [r4, #4]
 8008552:	6863      	ldr	r3, [r4, #4]
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	2300      	movs	r3, #0
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800855c:	e7aa      	b.n	80084b4 <_printf_i+0x148>
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	4632      	mov	r2, r6
 8008562:	4649      	mov	r1, r9
 8008564:	4640      	mov	r0, r8
 8008566:	47d0      	blx	sl
 8008568:	3001      	adds	r0, #1
 800856a:	d0ad      	beq.n	80084c8 <_printf_i+0x15c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	079b      	lsls	r3, r3, #30
 8008570:	d413      	bmi.n	800859a <_printf_i+0x22e>
 8008572:	68e0      	ldr	r0, [r4, #12]
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	4298      	cmp	r0, r3
 8008578:	bfb8      	it	lt
 800857a:	4618      	movlt	r0, r3
 800857c:	e7a6      	b.n	80084cc <_printf_i+0x160>
 800857e:	2301      	movs	r3, #1
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d09d      	beq.n	80084c8 <_printf_i+0x15c>
 800858c:	3501      	adds	r5, #1
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	42ab      	cmp	r3, r5
 8008596:	dcf2      	bgt.n	800857e <_printf_i+0x212>
 8008598:	e7eb      	b.n	8008572 <_printf_i+0x206>
 800859a:	2500      	movs	r5, #0
 800859c:	f104 0619 	add.w	r6, r4, #25
 80085a0:	e7f5      	b.n	800858e <_printf_i+0x222>
 80085a2:	bf00      	nop
 80085a4:	0800870d 	.word	0x0800870d
 80085a8:	0800871e 	.word	0x0800871e

080085ac <memmove>:
 80085ac:	4288      	cmp	r0, r1
 80085ae:	b510      	push	{r4, lr}
 80085b0:	eb01 0402 	add.w	r4, r1, r2
 80085b4:	d902      	bls.n	80085bc <memmove+0x10>
 80085b6:	4284      	cmp	r4, r0
 80085b8:	4623      	mov	r3, r4
 80085ba:	d807      	bhi.n	80085cc <memmove+0x20>
 80085bc:	1e43      	subs	r3, r0, #1
 80085be:	42a1      	cmp	r1, r4
 80085c0:	d008      	beq.n	80085d4 <memmove+0x28>
 80085c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ca:	e7f8      	b.n	80085be <memmove+0x12>
 80085cc:	4402      	add	r2, r0
 80085ce:	4601      	mov	r1, r0
 80085d0:	428a      	cmp	r2, r1
 80085d2:	d100      	bne.n	80085d6 <memmove+0x2a>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085de:	e7f7      	b.n	80085d0 <memmove+0x24>

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d06      	ldr	r5, [pc, #24]	@ (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7f8 fa4a 	bl	8000a84 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20001f0c 	.word	0x20001f0c

08008600 <memcpy>:
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	f100 33ff 	add.w	r3, r0, #4294967295
 8008608:	d100      	bne.n	800860c <memcpy+0xc>
 800860a:	4770      	bx	lr
 800860c:	b510      	push	{r4, lr}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008616:	4291      	cmp	r1, r2
 8008618:	d1f9      	bne.n	800860e <memcpy+0xe>
 800861a:	bd10      	pop	{r4, pc}

0800861c <_realloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	4680      	mov	r8, r0
 8008622:	4615      	mov	r5, r2
 8008624:	460c      	mov	r4, r1
 8008626:	b921      	cbnz	r1, 8008632 <_realloc_r+0x16>
 8008628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	4611      	mov	r1, r2
 800862e:	f7ff bc4b 	b.w	8007ec8 <_malloc_r>
 8008632:	b92a      	cbnz	r2, 8008640 <_realloc_r+0x24>
 8008634:	f7ff fbdc 	bl	8007df0 <_free_r>
 8008638:	2400      	movs	r4, #0
 800863a:	4620      	mov	r0, r4
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	f000 f81a 	bl	8008678 <_malloc_usable_size_r>
 8008644:	4285      	cmp	r5, r0
 8008646:	4606      	mov	r6, r0
 8008648:	d802      	bhi.n	8008650 <_realloc_r+0x34>
 800864a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800864e:	d8f4      	bhi.n	800863a <_realloc_r+0x1e>
 8008650:	4629      	mov	r1, r5
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff fc38 	bl	8007ec8 <_malloc_r>
 8008658:	4607      	mov	r7, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	d0ec      	beq.n	8008638 <_realloc_r+0x1c>
 800865e:	42b5      	cmp	r5, r6
 8008660:	462a      	mov	r2, r5
 8008662:	4621      	mov	r1, r4
 8008664:	bf28      	it	cs
 8008666:	4632      	movcs	r2, r6
 8008668:	f7ff ffca 	bl	8008600 <memcpy>
 800866c:	4621      	mov	r1, r4
 800866e:	4640      	mov	r0, r8
 8008670:	f7ff fbbe 	bl	8007df0 <_free_r>
 8008674:	463c      	mov	r4, r7
 8008676:	e7e0      	b.n	800863a <_realloc_r+0x1e>

08008678 <_malloc_usable_size_r>:
 8008678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867c:	1f18      	subs	r0, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfbc      	itt	lt
 8008682:	580b      	ldrlt	r3, [r1, r0]
 8008684:	18c0      	addlt	r0, r0, r3
 8008686:	4770      	bx	lr

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
